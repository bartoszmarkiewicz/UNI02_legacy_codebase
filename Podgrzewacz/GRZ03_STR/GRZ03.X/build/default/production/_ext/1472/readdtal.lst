

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Thu Jul 12 08:02:17 2018


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	rbit,global,bit,common,class=COMRAM,space
      +                          =1,delta=1
     5                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9                           ;       param _wrn assigned to ?_ReadDataONL+5
    10  000000                     _ReadDataONL$wrn	set	?_ReadDataONL+5
    11                           ;       param _step assigned to ?_ReadDataONL+4
    12  000000                     _ReadDataONL$step	set	?_ReadDataONL+4
    13                           ;       param _max assigned to ?_ReadDataONL+3
    14  000000                     _ReadDataONL$max	set	?_ReadDataONL+3
    15                           ;       param _min assigned to ?_ReadDataONL+2
    16  000000                     _ReadDataONL$min	set	?_ReadDataONL+2
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98  000000                     
    99  000000                     
   100  000000                     
   101  000000                     
   102  000000                     
   103  000000                     
   104  000000                     
   105                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   106                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   107                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   108                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   109                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   110                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   111                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   112                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   113                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   114                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   115                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   116                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   117                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   118                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   119                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   120                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   121                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   122                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   123                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   124                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   125                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   126                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   127                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   128                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   129                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   130                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   131                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   132                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   133                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   134                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   135                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   136                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   137                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   138                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   139                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   140                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   141                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   142                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   143                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   144                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   145                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   146                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   147                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   148                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   149                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   150                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   151                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   152                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   153                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   154                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   155                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   156                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   157                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   158                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   159                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   160                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   161                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   162                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   163                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   164                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   165                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   166                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   167                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   168                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   169                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   170                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   171                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   172                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   173                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   174                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   175                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   176                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   177                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   178                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   179                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   180                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   181                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   182                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   183                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   184                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   185                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   186                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   187                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   188                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   189                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   190                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   191                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   192                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   193                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   194                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   195                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   196                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   197                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   198                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   199                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   200                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   201                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   202                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   203                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   204                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   205  000000                     _ReadDataONL$dt	set	?_ReadDataONL
   206                           
   207                           	psect	text
   208                           ;readdtal.c: 121: unsigned char ReadDataONL(unsi
      +                          gned char k,unsigned char *dt,unsigned char min,
      +                          unsigned char max,const unsigned char step,unsig
      +                          ned char wrn)
   209                           ;readdtal.c: 122: {
   210  007A8E  00A8               	dw	?_ReadDataONL
   211                           ;	_key assigned to ?a_ReadDataXONLD+1
   212  000000                     _ReadDataXONLD$key	set	?a_ReadDataXONLD+1
   213                           ;	_k assigned to ?a_ReadDataXONLD+0
   214  000000                     _ReadDataXONLD$k	set	?a_ReadDataXONLD
   215                           ;       param _step2 assigned to ?_ReadDataXONLD
      +                          +4
   216  000000                     _ReadDataXONLD$step2	set	?_ReadDataXONLD+4
   217                           ;       param _step assigned to ?_ReadDataXONLD+
      +                          3
   218  000000                     _ReadDataXONLD$step	set	?_ReadDataXONLD+3
   219                           ;       param _min assigned to ?_ReadDataXONLD+2
   220  000000                     _ReadDataXONLD$min	set	?_ReadDataXONLD+2
   221                           ;       param _dt assigned to ?_ReadDataXONLD+0
   222  000000                     _ReadDataXONLD$dt	set	?_ReadDataXONLD
   223                           ;	_key assigned to ?a_ReadDataXONLI+1
   224  000000                     _ReadDataXONLI$key	set	?a_ReadDataXONLI+1
   225                           ;	_k assigned to ?a_ReadDataXONLI+0
   226  000000                     _ReadDataXONLI$k	set	?a_ReadDataXONLI
   227                           ;       param _step2 assigned to ?_ReadDataXONLI
      +                          +4
   228  000000                     _ReadDataXONLI$step2	set	?_ReadDataXONLI+4
   229                           ;       param _step assigned to ?_ReadDataXONLI+
      +                          3
   230  000000                     _ReadDataXONLI$step	set	?_ReadDataXONLI+3
   231                           ;       param _max assigned to ?_ReadDataXONLI+2
   232  000000                     _ReadDataXONLI$max	set	?_ReadDataXONLI+2
   233                           ;       param _dt assigned to ?_ReadDataXONLI+0
   234  000000                     _ReadDataXONLI$dt	set	?_ReadDataXONLI
   235                           ;	_key assigned to ?a_ReadDataXONL+1
   236  000000                     _ReadDataXONL$key	set	?a_ReadDataXONL+1
   237                           ;	_k assigned to ?a_ReadDataXONL+0
   238  000000                     _ReadDataXONL$k	set	?a_ReadDataXONL
   239                           ;       param _wrn assigned to ?_ReadDataXONL+6
   240  000000                     _ReadDataXONL$wrn	set	?_ReadDataXONL+6
   241                           ;       param _step2 assigned to ?_ReadDataXONL+
      +                          5
   242  000000                     _ReadDataXONL$step2	set	?_ReadDataXONL+5
   243                           ;       param _step assigned to ?_ReadDataXONL+4
   244  000000                     _ReadDataXONL$step	set	?_ReadDataXONL+4
   245                           ;       param _max assigned to ?_ReadDataXONL+3
   246  000000                     _ReadDataXONL$max	set	?_ReadDataXONL+3
   247                           ;       param _min assigned to ?_ReadDataXONL+2
   248  000000                     _ReadDataXONL$min	set	?_ReadDataXONL+2
   249                           ;       param _dt assigned to ?_ReadDataXONL+0
   250  000000                     _ReadDataXONL$dt	set	?_ReadDataXONL
   251                           ;	_k assigned to ?a_ReadDataONL+0
   252  000000                     _ReadDataONL$k	set	?a_ReadDataONL
   253  007A90                     _ReadDataONL:
   254  000000                     
   255                           ;_k stored from wreg
   256  007A90  0100               	movlb	__Lparam shr (0+8)
   257  007A92  6FAE               	movwf	?a_ReadDataONL^(__Lparam& (0+65280)),b
   258                           ;readdtal.c: 123: if(*dt<min) *dt=min;
   259  007A94  C0A8  FFE9         	movff	?_ReadDataONL,fsr0l
   260  007A98  C0A9  FFEA         	movff	?_ReadDataONL+1,fsr0h
   261  007A9C  50EF               	movf	indf0,w,c
   262  007A9E  6E00               	movwf	btemp,c
   263  007AA0  51AA               	movf	(?_ReadDataONL+2)^(__Lparam& (0+65280)),w
   264  007AA2  5C00               	subwf	btemp,w,c
   265  007AA4  E206               	bc	l3
   266  007AA6  C0A8  FFE9         	movff	?_ReadDataONL,fsr0l
   267  007AAA  C0A9  FFEA         	movff	?_ReadDataONL+1,fsr0h
   268  007AAE  C0AA  FFEF         	movff	?_ReadDataONL+2,indf0
   269  007AB2                     l3:
   270                           ;readdtal.c: 124: if(ExPresKey(k,10,6))
   271  007AB2  0E0A               	movlw	10
   272  007AB4  0100               	movlb	__Lparam shr (0+8)
   273  007AB6  6FAF               	movwf	?_ExPresKey^(__Lparam& (0+65280)),b
   274  007AB8  0E06               	movlw	6
   275  007ABA  6FB0               	movwf	(?_ExPresKey+1)^(__Lparam& (0+65280)),b
   276  007ABC  51AE               	movf	?a_ReadDataONL^(__Lparam& (0+65280)),w
   277  007ABE  EC31  F043         	call	_ExPresKey
   278  007AC2  0A00               	xorlw	0
   279                           ;readdtal.c: 125: {
   280                           ; _dt loaded to fsr1
   281  007AC4  C0A8  FFE1         	movff	?_ReadDataONL,fsr1l
   282  007AC8  E029               	bz	L1
   283  007ACA  C0A9  FFE2         	movff	?_ReadDataONL+1,fsr1h
   284  007ACE  50E7               	movf	indf1,w,c
   285  007AD0  6E00               	movwf	btemp,c
   286  007AD2  0100               	movlb	__Lparam shr (0+8)
   287  007AD4  51AB               	movf	(?_ReadDataONL+3)^(__Lparam& (0+65280)),w
   288  007AD6  5C00               	subwf	btemp,w,c
   289  007AD8  E303               	bnc	l5
   290  007ADA  C0AA  FFE7         	movff	?_ReadDataONL+2,indf1
   291  007ADE  D01C               	goto	l4
   292  007AE0                     l5:
   293                           ;readdtal.c: 127: else
   294  007AE0  50E7               	movf	indf1,w,c
   295  007AE2  6E00               	movwf	btemp,c
   296  007AE4  C000  F002         	movff	btemp,btemp+2
   297  007AE8  6A03               	clrf	btemp+3,c
   298  007AEA  0100               	movlb	__Lparam shr (0+8)
   299  007AEC  51AC               	movf	(?_ReadDataONL+4)^(__Lparam& (0+65280)),w
   300  007AEE  2602               	addwf	btemp+2,f,c
   301  007AF0  0E00               	movlw	0
   302  007AF2  2203               	addwfc	btemp+3,f,c
   303  007AF4  C0AB  F000         	movff	?_ReadDataONL+3,btemp
   304  007AF8  6A01               	clrf	btemp+1,c
   305  007AFA  5001               	movf	btemp+1,w,c
   306  007AFC  0A80               	xorlw	128
   307  007AFE  6E04               	movwf	btemp+4,c
   308  007B00  5003               	movf	btemp+3,w,c
   309  007B02  0A80               	xorlw	128
   310  007B04  5C04               	subwf	btemp+4,w,c
   311  007B06  E102               	bnz	u45
   312  007B08  5002               	movf	btemp+2,w,c
   313  007B0A  5C00               	subwf	btemp,w,c
   314  007B0C                     u45:
   315  007B0C  E305               	bnc	l4
   316  007B0E  50E7               	movf	indf1,w,c
   317  007B10  6E00               	movwf	btemp,c
   318  007B12  51AC               	movf	(?_ReadDataONL+4)^(__Lparam& (0+65280)),w
   319  007B14  2400               	addwf	btemp,w,c
   320  007B16  6EE7               	movwf	indf1,c
   321  007B18                     l4:
   322                           ;readdtal.c: 129: }
   323                           ; _dt loaded to fsr1
   324  007B18  C0A8  FFE1         	movff	?_ReadDataONL,fsr1l
   325  007B1C                     L1:
   326  007B1C  C0A9  FFE2         	movff	?_ReadDataONL+1,fsr1h
   327  007B20  50E7               	movf	indf1,w,c
   328  007B22  0100               	movlb	__Lparam shr (0+8)
   329  007B24  61AB               	cpfslt	(?_ReadDataONL+3)^(__Lparam& (0+65280)),
      +                          b
   330  007B26  D002               	goto	l8
   331  007B28  C0AA  FFE7         	movff	?_ReadDataONL+2,indf1
   332  007B2C                     l8:
   333                           ;readdtal.c: 131: if(wrn) return 1;
   334  007B2C  0100               	movlb	__Lparam shr (0+8)
   335  007B2E  51AD               	movf	(?_ReadDataONL+5)^(__Lparam& (0+65280)),w
   336  007B30  E001               	bz	l9
   337  007B32  0C01               	retlw	1
   338  007B34                     l9:
   339                           ;readdtal.c: 132: return 0x00;
   340  007B34  0C00               	retlw	0
   341                           ;readdtal.c: 133: }
   342  007B36                     __end_of_ReadDataONL:
   343                           ;readdtal.c: 144: unsigned char ReadDataXONL(uns
      +                          igned char k,unsigned char *dt,unsigned char min
      +                          ,unsigned char max,const unsigned char step,cons
      +                          t unsigned char step2,unsigned char wrn)
   344                           ;readdtal.c: 145: {
   345  007B36  00A8               	dw	?_ReadDataXONL
   346  007B38                     _ReadDataXONL:
   347  000000                     
   348                           ;_k stored from wreg
   349  007B38  0100               	movlb	__Lparam shr (0+8)
   350  007B3A  6FAF               	movwf	?a_ReadDataXONL^(__Lparam& (0+65280)),b
   351                           ;readdtal.c: 146: static bit dtmo=0;
   352  007B3C  6AE1               	clrf	fsr1l,c
   353                           ;readdtal.c: 150: if(!dtmo)
   354  007B3E  B041               	btfsc	F1140/(0+8),F1140& (0+7),c
   355  007B40  D005               	goto	l11
   356                           ;readdtal.c: 151: {
   357  007B42  8041               	bsf	F1140/(0+8),F1140& (0+7),c
   358                           ;readdtal.c: 153: ktu=0;
   359  007B44  010F               	movlb	F1141 shr (0+8)
   360  007B46  6B2F               	clrf	F1141& (0+255),b
   361                           ;readdtal.c: 154: iu=0;
   362  007B48  010F               	movlb	F1142 shr (0+8)
   363  007B4A  6B30               	clrf	F1142& (0+255),b
   364  007B4C                     l11:
   365                           ;readdtal.c: 155: }
   366  007B4C  C0A8  FFE9         	movff	?_ReadDataXONL,fsr0l
   367  007B50  C0A9  FFEA         	movff	?_ReadDataXONL+1,fsr0h
   368  007B54  50EF               	movf	indf0,w,c
   369  007B56  6E00               	movwf	btemp,c
   370  007B58  0100               	movlb	__Lparam shr (0+8)
   371  007B5A  51AA               	movf	(?_ReadDataXONL+2)^(__Lparam& (0+65280)),w
   372  007B5C  5C00               	subwf	btemp,w,c
   373  007B5E  E206               	bc	l12
   374  007B60  C0A8  FFE9         	movff	?_ReadDataXONL,fsr0l
   375  007B64  C0A9  FFEA         	movff	?_ReadDataXONL+1,fsr0h
   376  007B68  C0AA  FFEF         	movff	?_ReadDataXONL+2,indf0
   377  007B6C                     l12:
   378                           ;readdtal.c: 157: if(key=ExPresKey2(k,5,ktu))
   379  007B6C  0E05               	movlw	5
   380  007B6E  0100               	movlb	__Lparam shr (0+8)
   381  007B70  6FB1               	movwf	?_ExPresKey2^(__Lparam& (0+65280)),b
   382  007B72  CF2F  F0B2         	movff	F1141,?_ExPresKey2+1
   383  007B76  51AF               	movf	?a_ReadDataXONL^(__Lparam& (0+65280)),w
   384  007B78  EC89  F043         	call	_ExPresKey2
   385  007B7C  0100               	movlb	__Lparam shr (0+8)
   386  007B7E  6FB0               	movwf	(?a_ReadDataXONL+1)^(__Lparam& (0+65280))
      +                          ,b
   387  007B80  51B0               	movf	(?a_ReadDataXONL+1)^(__Lparam& (0+65280)),
      +                          w
   388  007B82  E068               	bz	l13
   389                           ; _dt loaded to fsr1
   390  007B84  C0A8  FFE1         	movff	?_ReadDataXONL,fsr1l
   391  007B88  C0A9  FFE2         	movff	?_ReadDataXONL+1,fsr1h
   392                           ;readdtal.c: 158: {
   393  007B8C  05B0               	decf	(?a_ReadDataXONL+1)^(__Lparam& (0+65280)),
      +                          w
   394  007B8E  E12A               	bnz	l14
   395                           ;readdtal.c: 160: {
   396  007B90  010F               	movlb	F1142 shr (0+8)
   397  007B92  6B30               	clrf	F1142& (0+255),b
   398                           ;readdtal.c: 162: ktu=5;
   399  007B94  0E05               	movlw	5
   400  007B96  CFE8 FF2F          	movff	wreg,F1141
   401                           ;readdtal.c: 163: if(*dt>=max) *dt=min;
   402  007B9A  50E7               	movf	indf1,w,c
   403  007B9C  6E00               	movwf	btemp,c
   404  007B9E  0100               	movlb	__Lparam shr (0+8)
   405  007BA0  51AB               	movf	(?_ReadDataXONL+3)^(__Lparam& (0+65280)),w
   406  007BA2  5C00               	subwf	btemp,w,c
   407  007BA4  E303               	bnc	l15
   408  007BA6  C0AA  FFE7         	movff	?_ReadDataXONL+2,indf1
   409  007BAA  D01C               	goto	l14
   410  007BAC                     l15:
   411                           ;readdtal.c: 164: else
   412  007BAC  50E7               	movf	indf1,w,c
   413  007BAE  6E00               	movwf	btemp,c
   414  007BB0  C000  F002         	movff	btemp,btemp+2
   415  007BB4  6A03               	clrf	btemp+3,c
   416  007BB6  0100               	movlb	__Lparam shr (0+8)
   417  007BB8  51AC               	movf	(?_ReadDataXONL+4)^(__Lparam& (0+65280)),w
   418  007BBA  2602               	addwf	btemp+2,f,c
   419  007BBC  0E00               	movlw	0
   420  007BBE  2203               	addwfc	btemp+3,f,c
   421  007BC0  C0AB  F000         	movff	?_ReadDataXONL+3,btemp
   422  007BC4  6A01               	clrf	btemp+1,c
   423  007BC6  5001               	movf	btemp+1,w,c
   424  007BC8  0A80               	xorlw	128
   425  007BCA  6E04               	movwf	btemp+4,c
   426  007BCC  5003               	movf	btemp+3,w,c
   427  007BCE  0A80               	xorlw	128
   428  007BD0  5C04               	subwf	btemp+4,w,c
   429  007BD2  E102               	bnz	u125
   430  007BD4  5002               	movf	btemp+2,w,c
   431  007BD6  5C00               	subwf	btemp,w,c
   432  007BD8                     u125:
   433  007BD8  E305               	bnc	l14
   434  007BDA  50E7               	movf	indf1,w,c
   435  007BDC  6E00               	movwf	btemp,c
   436  007BDE  51AC               	movf	(?_ReadDataXONL+4)^(__Lparam& (0+65280)),w
   437  007BE0  2400               	addwf	btemp,w,c
   438  007BE2  6EE7               	movwf	indf1,c
   439  007BE4                     l14:
   440                           ;readdtal.c: 166: }
   441  007BE4  0100               	movlb	__Lparam shr (0+8)
   442  007BE6  51B0               	movf	(?a_ReadDataXONL+1)^(__Lparam& (0+65280)),
      +                          w
   443  007BE8  0A02               	xorlw	2
   444  007BEA  E139               	bnz	l23
   445                           ;readdtal.c: 168: {
   446  007BEC  0E0D               	movlw	13
   447  007BEE  010F               	movlb	F1142 shr (0+8)
   448  007BF0  6130               	cpfslt	F1142& (0+255),b
   449  007BF2  D001               	goto	l19
   450  007BF4  2B30               	incf	F1142& (0+255),f,b
   451  007BF6                     l19:
   452                           ;readdtal.c: 170: ktu=5-iu/3;
   453  007BF6  0E03               	movlw	3
   454  007BF8  6E01               	movwf	btemp+1,c
   455  007BFA  CF30  FFE8         	movff	F1142,wreg
   456  007BFE  ECE2  F04A         	call	lbdiv
   457  007C02  0805               	sublw	5
   458  007C04  CFE8 FF2F          	movff	wreg,F1141
   459                           ;readdtal.c: 171: if(*dt>=max) *dt=min;
   460  007C08  50E7               	movf	indf1,w,c
   461  007C0A  6E00               	movwf	btemp,c
   462  007C0C  0100               	movlb	__Lparam shr (0+8)
   463  007C0E  51AB               	movf	(?_ReadDataXONL+3)^(__Lparam& (0+65280)),w
   464  007C10  5C00               	subwf	btemp,w,c
   465  007C12  E303               	bnc	l20
   466  007C14  C0AA  FFE7         	movff	?_ReadDataXONL+2,indf1
   467  007C18  D022               	goto	l23
   468  007C1A                     l20:
   469                           ;readdtal.c: 172: else
   470  007C1A  50E7               	movf	indf1,w,c
   471  007C1C  6E00               	movwf	btemp,c
   472  007C1E  C000  F002         	movff	btemp,btemp+2
   473  007C22  6A03               	clrf	btemp+3,c
   474  007C24  0100               	movlb	__Lparam shr (0+8)
   475  007C26  51AD               	movf	(?_ReadDataXONL+5)^(__Lparam& (0+65280)),w
   476  007C28  2602               	addwf	btemp+2,f,c
   477  007C2A  0E00               	movlw	0
   478  007C2C  2203               	addwfc	btemp+3,f,c
   479  007C2E  C0AB  F000         	movff	?_ReadDataXONL+3,btemp
   480  007C32  6A01               	clrf	btemp+1,c
   481  007C34  5001               	movf	btemp+1,w,c
   482  007C36  0A80               	xorlw	128
   483  007C38  6E04               	movwf	btemp+4,c
   484  007C3A  5003               	movf	btemp+3,w,c
   485  007C3C  0A80               	xorlw	128
   486  007C3E  5C04               	subwf	btemp+4,w,c
   487  007C40  E102               	bnz	u165
   488  007C42  5002               	movf	btemp+2,w,c
   489  007C44  5C00               	subwf	btemp,w,c
   490  007C46                     u165:
   491  007C46  E30B               	bnc	l23
   492  007C48  50E7               	movf	indf1,w,c
   493  007C4A  6E00               	movwf	btemp,c
   494  007C4C  51AD               	movf	(?_ReadDataXONL+5)^(__Lparam& (0+65280)),w
   495  007C4E  2400               	addwf	btemp,w,c
   496  007C50  6EE7               	movwf	indf1,c
   497                           ;readdtal.c: 174: }
   498  007C52  D005               	goto	l23
   499  007C54                     l13:
   500                           ;readdtal.c: 176: else
   501  007C54  010F               	movlb	F1142 shr (0+8)
   502  007C56  6B30               	clrf	F1142& (0+255),b
   503                           ;readdtal.c: 179: ktu=5;
   504  007C58  0E05               	movlw	5
   505  007C5A  CFE8 FF2F          	movff	wreg,F1141
   506  007C5E                     l23:
   507                           ;readdtal.c: 180: }
   508                           ; _dt loaded to fsr1
   509  007C5E  C0A8  FFE1         	movff	?_ReadDataXONL,fsr1l
   510  007C62  C0A9  FFE2         	movff	?_ReadDataXONL+1,fsr1h
   511  007C66  50E7               	movf	indf1,w,c
   512  007C68  0100               	movlb	__Lparam shr (0+8)
   513  007C6A  61AB               	cpfslt	(?_ReadDataXONL+3)^(__Lparam& (0+65280))
      +                          ,b
   514  007C6C  D002               	goto	l24
   515  007C6E  C0AA  FFE7         	movff	?_ReadDataXONL+2,indf1
   516  007C72                     l24:
   517                           ;readdtal.c: 182: if(wrn)
   518  007C72  0100               	movlb	__Lparam shr (0+8)
   519  007C74  51AE               	movf	(?_ReadDataXONL+6)^(__Lparam& (0+65280)),w
   520  007C76  E002               	bz	l25
   521                           ;readdtal.c: 183: {
   522  007C78  9041               	bcf	F1140/(0+8),F1140& (0+7),c
   523                           ;readdtal.c: 185: return 1;
   524  007C7A  0C01               	retlw	1
   525  007C7C                     l25:
   526                           ;readdtal.c: 186: }
   527  007C7C  0C00               	retlw	0
   528                           ;readdtal.c: 188: }
   529  007C7E                     __end_of_ReadDataXONL:
   530                           ;readdtal.c: 200: unsigned char ReadDataXONLI(un
      +                          signed char k,unsigned char *dt,unsigned char ma
      +                          x,const unsigned char step,const unsigned char s
      +                          tep2)
   531                           ;readdtal.c: 201: {
   532  007C7E  00A9               	dw	?_ReadDataXONLI
   533  007C80                     _ReadDataXONLI:
   534  000000                     
   535                           ;_k stored from wreg
   536  007C80  0100               	movlb	__Lparam shr (0+8)
   537  007C82  6FAE               	movwf	?a_ReadDataXONLI^(__Lparam& (0+65280)),b
   538                           ;readdtal.c: 202: static bit dtmo=0;
   539  007C84  6AE1               	clrf	fsr1l,c
   540                           ;readdtal.c: 206: if(!dtmo)
   541  007C86  B241               	btfsc	F1150/(0+8),F1150& (0+7),c
   542  007C88  D005               	goto	l27
   543                           ;readdtal.c: 207: {
   544  007C8A  8241               	bsf	F1150/(0+8),F1150& (0+7),c
   545                           ;readdtal.c: 209: ktu=0;
   546  007C8C  010F               	movlb	F1151 shr (0+8)
   547  007C8E  6B31               	clrf	F1151& (0+255),b
   548                           ;readdtal.c: 210: iu=0;
   549  007C90  010F               	movlb	F1152 shr (0+8)
   550  007C92  6B32               	clrf	F1152& (0+255),b
   551  007C94                     l27:
   552                           ;readdtal.c: 211: }
   553  007C94  0E05               	movlw	5
   554  007C96  0100               	movlb	__Lparam shr (0+8)
   555  007C98  6FB1               	movwf	?_ExPresKey2^(__Lparam& (0+65280)),b
   556  007C9A  CF31  F0B2         	movff	F1151,?_ExPresKey2+1
   557  007C9E  51AE               	movf	?a_ReadDataXONLI^(__Lparam& (0+65280)),w
   558  007CA0  EC89  F043         	call	_ExPresKey2
   559  007CA4  0100               	movlb	__Lparam shr (0+8)
   560  007CA6  6FAF               	movwf	(?a_ReadDataXONLI+1)^(__Lparam& (0+65280)
      +                          ),b
   561  007CA8  51AF               	movf	(?a_ReadDataXONLI+1)^(__Lparam& (0+65280))
      +                          ,w
   562  007CAA  E05C               	bz	l28
   563                           ; _dt loaded to fsr1
   564  007CAC  C0A9  FFE1         	movff	?_ReadDataXONLI,fsr1l
   565  007CB0  C0AA  FFE2         	movff	?_ReadDataXONLI+1,fsr1h
   566                           ;readdtal.c: 214: {
   567  007CB4  05AF               	decf	(?a_ReadDataXONLI+1)^(__Lparam& (0+65280))
      +                          ,w
   568  007CB6  E124               	bnz	l29
   569                           ;readdtal.c: 216: {
   570  007CB8  010F               	movlb	F1152 shr (0+8)
   571  007CBA  6B32               	clrf	F1152& (0+255),b
   572                           ;readdtal.c: 218: ktu=5;
   573  007CBC  0E05               	movlw	5
   574  007CBE  CFE8 FF31          	movff	wreg,F1151
   575                           ;readdtal.c: 219: if(*dt+step<=max) *dt=*dt+step
      +                          ;
   576  007CC2  50E7               	movf	indf1,w,c
   577  007CC4  6E00               	movwf	btemp,c
   578  007CC6  C000  F002         	movff	btemp,btemp+2
   579  007CCA  6A03               	clrf	btemp+3,c
   580  007CCC  0100               	movlb	__Lparam shr (0+8)
   581  007CCE  51AC               	movf	(?_ReadDataXONLI+3)^(__Lparam& (0+65280)),
      +                          w
   582  007CD0  2602               	addwf	btemp+2,f,c
   583  007CD2  0E00               	movlw	0
   584  007CD4  2203               	addwfc	btemp+3,f,c
   585  007CD6  C0AB  F000         	movff	?_ReadDataXONLI+2,btemp
   586  007CDA  6A01               	clrf	btemp+1,c
   587  007CDC  5001               	movf	btemp+1,w,c
   588  007CDE  0A80               	xorlw	128
   589  007CE0  6E04               	movwf	btemp+4,c
   590  007CE2  5003               	movf	btemp+3,w,c
   591  007CE4  0A80               	xorlw	128
   592  007CE6  5C04               	subwf	btemp+4,w,c
   593  007CE8  E102               	bnz	u225
   594  007CEA  5002               	movf	btemp+2,w,c
   595  007CEC  5C00               	subwf	btemp,w,c
   596  007CEE                     u225:
   597  007CEE  E306               	bnc	l30
   598  007CF0  50E7               	movf	indf1,w,c
   599  007CF2  6E00               	movwf	btemp,c
   600  007CF4  51AC               	movf	(?_ReadDataXONLI+3)^(__Lparam& (0+65280)),
      +                          w
   601  007CF6  2400               	addwf	btemp,w,c
   602  007CF8  6EE7               	movwf	indf1,c
   603  007CFA  D002               	goto	l29
   604  007CFC                     l30:
   605                           ;readdtal.c: 220: else *dt=max;
   606  007CFC  C0AB  FFE7         	movff	?_ReadDataXONLI+2,indf1
   607  007D00                     l29:
   608                           ;readdtal.c: 221: }
   609  007D00  0100               	movlb	__Lparam shr (0+8)
   610  007D02  51AF               	movf	(?a_ReadDataXONLI+1)^(__Lparam& (0+65280))
      +                          ,w
   611  007D04  0A02               	xorlw	2
   612  007D06  E12D               	bnz	l32
   613                           ;readdtal.c: 223: {
   614  007D08  0E0D               	movlw	13
   615  007D0A  010F               	movlb	F1152 shr (0+8)
   616  007D0C  6132               	cpfslt	F1152& (0+255),b
   617  007D0E  D001               	goto	l33
   618  007D10  2B32               	incf	F1152& (0+255),f,b
   619  007D12                     l33:
   620                           ;readdtal.c: 225: ktu=5-iu/3;
   621  007D12  0E03               	movlw	3
   622  007D14  6E01               	movwf	btemp+1,c
   623  007D16  CF32  FFE8         	movff	F1152,wreg
   624  007D1A  ECE2  F04A         	call	lbdiv
   625  007D1E  0805               	sublw	5
   626  007D20  CFE8 FF31          	movff	wreg,F1151
   627                           ;readdtal.c: 226: if(*dt+step2<=max) *dt=*dt+ste
      +                          p2;
   628  007D24  50E7               	movf	indf1,w,c
   629  007D26  6E00               	movwf	btemp,c
   630  007D28  C000  F002         	movff	btemp,btemp+2
   631  007D2C  6A03               	clrf	btemp+3,c
   632  007D2E  0100               	movlb	__Lparam shr (0+8)
   633  007D30  51AD               	movf	(?_ReadDataXONLI+4)^(__Lparam& (0+65280)),
      +                          w
   634  007D32  2602               	addwf	btemp+2,f,c
   635  007D34  0E00               	movlw	0
   636  007D36  2203               	addwfc	btemp+3,f,c
   637  007D38  C0AB  F000         	movff	?_ReadDataXONLI+2,btemp
   638  007D3C  6A01               	clrf	btemp+1,c
   639  007D3E  5001               	movf	btemp+1,w,c
   640  007D40  0A80               	xorlw	128
   641  007D42  6E04               	movwf	btemp+4,c
   642  007D44  5003               	movf	btemp+3,w,c
   643  007D46  0A80               	xorlw	128
   644  007D48  5C04               	subwf	btemp+4,w,c
   645  007D4A  E102               	bnz	u255
   646  007D4C  5002               	movf	btemp+2,w,c
   647  007D4E  5C00               	subwf	btemp,w,c
   648  007D50                     u255:
   649  007D50  E306               	bnc	l34
   650  007D52  50E7               	movf	indf1,w,c
   651  007D54  6E00               	movwf	btemp,c
   652  007D56  51AD               	movf	(?_ReadDataXONLI+4)^(__Lparam& (0+65280)),
      +                          w
   653  007D58  2400               	addwf	btemp,w,c
   654  007D5A  6EE7               	movwf	indf1,c
   655  007D5C  0C01               	retlw	1
   656  007D5E                     l34:
   657                           ;readdtal.c: 227: else *dt=max;
   658  007D5E  C0AB  FFE7         	movff	?_ReadDataXONLI+2,indf1
   659  007D62                     l32:
   660                           ;readdtal.c: 228: }
   661  007D62  0C01               	retlw	1
   662  007D64                     l28:
   663                           ;readdtal.c: 231: else
   664  007D64  010F               	movlb	F1152 shr (0+8)
   665  007D66  6B32               	clrf	F1152& (0+255),b
   666                           ;readdtal.c: 234: ktu=5;
   667  007D68  0E05               	movlw	5
   668  007D6A  CFE8 FF31          	movff	wreg,F1151
   669                           ;readdtal.c: 235: }
   670  007D6E  0C00               	retlw	0
   671                           ;readdtal.c: 237: }
   672  007D70                     __end_of_ReadDataXONLI:
   673                           ;readdtal.c: 239: unsigned char ReadDataXONLD(un
      +                          signed char k,unsigned char *dt,unsigned char mi
      +                          n,const unsigned char step,const unsigned char s
      +                          tep2)
   674                           ;readdtal.c: 240: {
   675  007D70  00A9               	dw	?_ReadDataXONLD
   676  007D72                     _ReadDataXONLD:
   677  000000                     
   678                           ;_k stored from wreg
   679  007D72  0100               	movlb	__Lparam shr (0+8)
   680  007D74  6FAE               	movwf	?a_ReadDataXONLD^(__Lparam& (0+65280)),b
   681                           ;readdtal.c: 241: static bit dtmo=0;
   682  007D76  6AE1               	clrf	fsr1l,c
   683                           ;readdtal.c: 245: if(!dtmo)
   684  007D78  B441               	btfsc	F1160/(0+8),F1160& (0+7),c
   685  007D7A  D005               	goto	l38
   686                           ;readdtal.c: 246: {
   687  007D7C  8441               	bsf	F1160/(0+8),F1160& (0+7),c
   688                           ;readdtal.c: 248: ktu=0;
   689  007D7E  010F               	movlb	F1161 shr (0+8)
   690  007D80  6B33               	clrf	F1161& (0+255),b
   691                           ;readdtal.c: 249: iu=0;
   692  007D82  010F               	movlb	F1162 shr (0+8)
   693  007D84  6B34               	clrf	F1162& (0+255),b
   694  007D86                     l38:
   695                           ;readdtal.c: 250: }
   696  007D86  0E05               	movlw	5
   697  007D88  0100               	movlb	__Lparam shr (0+8)
   698  007D8A  6FB0               	movwf	?_ExPresKey2B^(__Lparam& (0+65280)),b
   699  007D8C  CF33  F0B1         	movff	F1161,?_ExPresKey2B+1
   700  007D90  51AE               	movf	?a_ReadDataXONLD^(__Lparam& (0+65280)),w
   701  007D92  EC05  F044         	call	_ExPresKey2B
   702  007D96  0100               	movlb	__Lparam shr (0+8)
   703  007D98  6FAF               	movwf	(?a_ReadDataXONLD+1)^(__Lparam& (0+65280)
      +                          ),b
   704  007D9A  51AF               	movf	(?a_ReadDataXONLD+1)^(__Lparam& (0+65280))
      +                          ,w
   705  007D9C  E064               	bz	l39
   706                           ; _dt loaded to fsr1
   707  007D9E  C0A9  FFE1         	movff	?_ReadDataXONLD,fsr1l
   708  007DA2  C0AA  FFE2         	movff	?_ReadDataXONLD+1,fsr1h
   709                           ;readdtal.c: 253: {
   710  007DA6  05AF               	decf	(?a_ReadDataXONLD+1)^(__Lparam& (0+65280))
      +                          ,w
   711  007DA8  E124               	bnz	l40
   712                           ;readdtal.c: 255: {
   713  007DAA  010F               	movlb	F1162 shr (0+8)
   714  007DAC  6B34               	clrf	F1162& (0+255),b
   715                           ;readdtal.c: 257: ktu=5;
   716  007DAE  0E05               	movlw	5
   717  007DB0  CFE8 FF33          	movff	wreg,F1161
   718                           ;readdtal.c: 258: if(*dt-step>min) *dt=*dt-step;
   719  007DB4  50E7               	movf	indf1,w,c
   720  007DB6  6E00               	movwf	btemp,c
   721  007DB8  C000  F002         	movff	btemp,btemp+2
   722  007DBC  6A03               	clrf	btemp+3,c
   723  007DBE  0100               	movlb	__Lparam shr (0+8)
   724  007DC0  51AC               	movf	(?_ReadDataXONLD+3)^(__Lparam& (0+65280)),
      +                          w
   725  007DC2  5E02               	subwf	btemp+2,f,c
   726  007DC4  0E00               	movlw	0
   727  007DC6  5A03               	subwfb	btemp+3,f,c
   728  007DC8  C0AB  F000         	movff	?_ReadDataXONLD+2,btemp
   729  007DCC  6A01               	clrf	btemp+1,c
   730  007DCE  5001               	movf	btemp+1,w,c
   731  007DD0  0A80               	xorlw	128
   732  007DD2  6E04               	movwf	btemp+4,c
   733  007DD4  5003               	movf	btemp+3,w,c
   734  007DD6  0A80               	xorlw	128
   735  007DD8  5C04               	subwf	btemp+4,w,c
   736  007DDA  E102               	bnz	u295
   737  007DDC  5002               	movf	btemp+2,w,c
   738  007DDE  5C00               	subwf	btemp,w,c
   739  007DE0                     u295:
   740  007DE0  E206               	bc	l41
   741  007DE2  50E7               	movf	indf1,w,c
   742  007DE4  6E00               	movwf	btemp,c
   743  007DE6  51AC               	movf	(?_ReadDataXONLD+3)^(__Lparam& (0+65280)),
      +                          w
   744  007DE8  5C00               	subwf	btemp,w,c
   745  007DEA  6EE7               	movwf	indf1,c
   746  007DEC  D002               	goto	l40
   747  007DEE                     l41:
   748                           ;readdtal.c: 259: else *dt=min;
   749  007DEE  C0AB  FFE7         	movff	?_ReadDataXONLD+2,indf1
   750  007DF2                     l40:
   751                           ;readdtal.c: 260: }
   752  007DF2  0100               	movlb	__Lparam shr (0+8)
   753  007DF4  51AF               	movf	(?a_ReadDataXONLD+1)^(__Lparam& (0+65280))
      +                          ,w
   754  007DF6  0A02               	xorlw	2
   755  007DF8  E12D               	bnz	l43
   756                           ;readdtal.c: 262: {
   757  007DFA  0E0D               	movlw	13
   758  007DFC  010F               	movlb	F1162 shr (0+8)
   759  007DFE  6134               	cpfslt	F1162& (0+255),b
   760  007E00  D001               	goto	l44
   761  007E02  2B34               	incf	F1162& (0+255),f,b
   762  007E04                     l44:
   763                           ;readdtal.c: 264: ktu=5-iu/3;
   764  007E04  0E03               	movlw	3
   765  007E06  6E01               	movwf	btemp+1,c
   766  007E08  CF34  FFE8         	movff	F1162,wreg
   767  007E0C  ECE2  F04A         	call	lbdiv
   768  007E10  0805               	sublw	5
   769  007E12  CFE8 FF33          	movff	wreg,F1161
   770                           ;readdtal.c: 265: if(*dt-step2>min) *dt=*dt-step
      +                          2;
   771  007E16  50E7               	movf	indf1,w,c
   772  007E18  6E00               	movwf	btemp,c
   773  007E1A  C000  F002         	movff	btemp,btemp+2
   774  007E1E  6A03               	clrf	btemp+3,c
   775  007E20  0100               	movlb	__Lparam shr (0+8)
   776  007E22  51AD               	movf	(?_ReadDataXONLD+4)^(__Lparam& (0+65280)),
      +                          w
   777  007E24  5E02               	subwf	btemp+2,f,c
   778  007E26  0E00               	movlw	0
   779  007E28  5A03               	subwfb	btemp+3,f,c
   780  007E2A  C0AB  F000         	movff	?_ReadDataXONLD+2,btemp
   781  007E2E  6A01               	clrf	btemp+1,c
   782  007E30  5001               	movf	btemp+1,w,c
   783  007E32  0A80               	xorlw	128
   784  007E34  6E04               	movwf	btemp+4,c
   785  007E36  5003               	movf	btemp+3,w,c
   786  007E38  0A80               	xorlw	128
   787  007E3A  5C04               	subwf	btemp+4,w,c
   788  007E3C  E102               	bnz	u325
   789  007E3E  5002               	movf	btemp+2,w,c
   790  007E40  5C00               	subwf	btemp,w,c
   791  007E42                     u325:
   792  007E42  E206               	bc	l45
   793  007E44  50E7               	movf	indf1,w,c
   794  007E46  6E00               	movwf	btemp,c
   795  007E48  51AD               	movf	(?_ReadDataXONLD+4)^(__Lparam& (0+65280)),
      +                          w
   796  007E4A  5C00               	subwf	btemp,w,c
   797  007E4C  6EE7               	movwf	indf1,c
   798  007E4E  D002               	goto	l43
   799  007E50                     l45:
   800                           ;readdtal.c: 266: else *dt=min;
   801  007E50  C0AB  FFE7         	movff	?_ReadDataXONLD+2,indf1
   802  007E54                     l43:
   803                           ;readdtal.c: 267: }
   804  007E54  50E7               	movf	indf1,w,c
   805  007E56  6E00               	movwf	btemp,c
   806  007E58  0100               	movlb	__Lparam shr (0+8)
   807  007E5A  51AB               	movf	(?_ReadDataXONLD+2)^(__Lparam& (0+65280)),
      +                          w
   808  007E5C  5C00               	subwf	btemp,w,c
   809  007E5E  A0D8               	btfss	status,0,c
   810  007E60  C0AB  FFE7         	movff	?_ReadDataXONLD+2,indf1
   811                           ;readdtal.c: 269: return 1;
   812  007E64  0C01               	retlw	1
   813  007E66                     l39:
   814                           ;readdtal.c: 271: else
   815  007E66  010F               	movlb	F1162 shr (0+8)
   816  007E68  6B34               	clrf	F1162& (0+255),b
   817                           ;readdtal.c: 274: ktu=5;
   818  007E6A  0E05               	movlw	5
   819  007E6C  CFE8 FF33          	movff	wreg,F1161
   820                           ;readdtal.c: 275: }
   821  007E70  0C00               	retlw	0
   822                           ;readdtal.c: 277: }
   823  007E72                     __end_of_ReadDataXONLD:
   824                           
   825                           	psect	rbit
   826  000208                     F1140:
   827  000208                     	ds	1
   828  000208                     F1150:
   829  000208                     	ds	1
   830  000208                     F1160:
   831  000208                     	ds	1
   832  000000                     
   833  000000                     
   834  000000                     
   835  000000                     
   836  000000                     
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268                           
  1269                           	psect	bigbss
  1270  000F2F                     F1141:
  1271  000F2F                     	ds	1
  1272  000F2F                     F1142:
  1273  000F2F                     	ds	1
  1274  000F2F                     F1151:
  1275  000F2F                     	ds	1
  1276  000F2F                     F1152:
  1277  000F2F                     	ds	1
  1278  000F2F                     F1161:
  1279  000F2F                     	ds	1
  1280  000F2F                     F1162:
  1281  000F2F                     	ds	1
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413  000000                     
  1414                           
  1415                           	psect	temp
  1416  000000                     btemp:
  1417  000000                     	ds	5
  1418                           indf0	equ	0xFEF
  1419                           fsr0h	equ	0xFEA
  1420                           fsr0l	equ	0xFE9
  1421                           wreg	equ	0xFE8
  1422                           indf1	equ	0xFE7
  1423                           fsr1h	equ	0xFE2
  1424                           fsr1l	equ	0xFE1
  1425                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Thu Jul 12 08:02:17 2018

                    l3 7AB2                      l4 7B18  
                    l5 7AE0                      l8 7B2C  
                    l9 7B34                     l11 7B4C  
                   l20 7C1A                     l12 7B6C  
                   l13 7C54                     l30 7CFC  
                   l14 7BE4                     l23 7C5E  
                   l15 7BAC                     l40 7DF2  
                   l32 7D62                     l24 7C72  
                   l41 7DEE                     l33 7D12  
                   l25 7C7C                     l34 7D5E  
                   l43 7E54                     l27 7C94  
                   l19 7BF6                     l44 7E04  
                   l28 7D64                     l45 7E50  
                   l29 7D00                     l38 7D86  
                   l39 7E66                     u45 7B0C  
                  u125 7BD8                    u225 7CEE  
                  u325 7E42                    u165 7C46  
                  u255 7D50                    u295 7DE0  
                  wreg 000FE8                   F1140 0208  
                 F1141 0F2F                   F1150 0209  
                 F1142 0F30                   F1151 0F31  
                 F1160 020A                   F1152 0F32  
                 F1161 0F33                   F1162 0F34  
       ?_ReadDataXONLD 00A9         ?_ReadDataXONLI 00A9  
                 fsr0h 000FEA                   indf0 000FEF  
                 fsr0l 000FE9                   indf1 000FE7  
                 fsr1l 000FE1                   btemp 0000  
                 lbdiv 95C4           _ReadDataXONL 7B38  
 __end_of_ReadDataXONL 7C7E             used_btemp0 0001  
           used_btemp1 0001             used_btemp2 0001  
           used_btemp3 0001             used_btemp4 0001  
          _ExPresKey2B 880A                  status 000FD8  
       ?a_ReadDataXONL 00AF                __Lparam 00A8  
         ?_ExPresKey2B 00B0                __ramtop 1000  
        ?_ReadDataXONL 00A8          _ReadDataXONLD 7D72  
        _ReadDataXONLI 7C80            _ReadDataONL 7A90  
  __end_of_ReadDataONL 7B36             _ExPresKey2 8712  
__end_of_ReadDataXONLD 7E72  __end_of_ReadDataXONLI 7D70  
        ?a_ReadDataONL 00AE            ?_ExPresKey2 00B1  
         ?_ReadDataONL 00A8              _ExPresKey 8662  
           ?_ExPresKey 00AF        ?a_ReadDataXONLD 00AE  
      ?a_ReadDataXONLI 00AE  
