

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Thu Jul 12 08:02:18 2018


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	data,global,class=RAM,space=1,delta=1
     5                           	psect	idata,global,class=CODE,delta=1
     6                           	psect	bigdata,global,class=BIGRAM,space=1,delta
      +                          =1
     7                           	psect	ibigdata,global,class=CODE,delta=1
     8                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     9                           	psect	const,global,class=CODE,delta=1
    10                           	psect	bss,global,class=RAM,space=1,delta=1
    11                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98  000000                     
    99  000000                     
   100  000000                     
   101  000000                     
   102                           
   103                           	psect	text
   104                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   105                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   106                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   107                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   108                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   109                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   110                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   111                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   112                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   113                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   114                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   115                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   116                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   117                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   118                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   119                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   120                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   121                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   122                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   123                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   124                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   125                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   126                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   127                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   128                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   129                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   130                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   131                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   132                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   133                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   134                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   135                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   136                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   137                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   138                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   139                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   140                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   141                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   142                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   143                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   144                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   145                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   146                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   147                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   148                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   149                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   150                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   151                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   152                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   153                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   154                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   155                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   156                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   157                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   158                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   159                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   160                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   161                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   162                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   163                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   164                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   165                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   166                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   167                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   168                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   169                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   170                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   171                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   172                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   173                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   174                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   175                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   176                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   177                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   178                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   179                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   180                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   181                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   182                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   183                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   184                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   185                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   186                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   187                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   188                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   189                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   190                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   191                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   192                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   193                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   194                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   195                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   196                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   197                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   198                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   199                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   200                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   201                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   202                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   203                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   204  0010EE                     _Moduluj:
   205                           ;	_pv assigned to ?a_ProcToMod+1
   206  000000                     _ProcToMod$pv	set	?a_ProcToMod+1
   207                           ;	_prvnt assigned to ?a_ProcToMod+0
   208  000000                     _ProcToMod$prvnt	set	?a_ProcToMod
   209                           ;	_v assigned to ?a_NewPop_SMOD+5
   210  000000                     _NewPop_SMOD$v	set	?a_NewPop_SMOD+5
   211                           ;	_pv assigned to ?a_NewPop_SMOD+3
   212  000000                     _NewPop_SMOD$pv	set	?a_NewPop_SMOD+3
   213                           ;	_ppv assigned to ?a_NewPop_SMOD+2
   214  000000                     _NewPop_SMOD$ppv	set	?a_NewPop_SMOD+2
   215                           ;	_mrg assigned to ?a_NewPop_SMOD+1
   216  000000                     _NewPop_SMOD$mrg	set	?a_NewPop_SMOD+1
   217                           ;	_pw assigned to ?a_NewPop_SMOD+0
   218  000000                     _NewPop_SMOD$pw	set	?a_NewPop_SMOD
   219                           ;	_pw assigned to ?a_New_SMOD+1
   220  000000                     _New_SMOD$pw	set	?a_New_SMOD+1
   221                           ;	_pv assigned to ?a_New_SMOD+0
   222  000000                     _New_SMOD$pv	set	?a_New_SMOD
   223                           ;	_v assigned to ?a_NewPop_MAX_CO+3
   224  000000                     _NewPop_MAX_CO$v	set	?a_NewPop_MAX_CO+3
   225                           ;	_pv assigned to ?a_NewPop_MAX_CO+1
   226  000000                     _NewPop_MAX_CO$pv	set	?a_NewPop_MAX_CO+1
   227                           ;	_ppv assigned to ?a_NewPop_MAX_CO+0
   228  000000                     _NewPop_MAX_CO$ppv	set	?a_NewPop_MAX_CO
   229                           ;	_v assigned to ?a_NewPop_MAX_CW+3
   230  000000                     _NewPop_MAX_CW$v	set	?a_NewPop_MAX_CW+3
   231                           ;	_pv assigned to ?a_NewPop_MAX_CW+1
   232  000000                     _NewPop_MAX_CW$pv	set	?a_NewPop_MAX_CW+1
   233                           ;	_ppv assigned to ?a_NewPop_MAX_CW+0
   234  000000                     _NewPop_MAX_CW$ppv	set	?a_NewPop_MAX_CW
   235                           ;	_v assigned to ?a_NewPop_MIN+2
   236  000000                     _NewPop_MIN$v	set	?a_NewPop_MIN+2
   237                           ;	_pv assigned to ?a_NewPop_MIN+0
   238  000000                     _NewPop_MIN$pv	set	?a_NewPop_MIN
   239                           ;	_k assigned to ?a_ModPrzCW2+0
   240  000000                     _ModPrzCW2$k	set	?a_ModPrzCW2
   241                           ;	_z assigned to ?a_IncMaxCW2+3
   242  000000                     _IncMaxCW2$z	set	?a_IncMaxCW2+3
   243                           ;	_wsp assigned to ?a_IncMaxCW2+0
   244  000000                     _IncMaxCW2$wsp	set	?a_IncMaxCW2
   245                           ;	_k assigned to ?a_ModPruCW2+0
   246  000000                     _ModPruCW2$k	set	?a_ModPruCW2
   247                           ;	_m assigned to ?a_ModDkCW2+4
   248  000000                     _ModDkCW2$m	set	?a_ModDkCW2+4
   249                           ;	_k assigned to ?a_ModDkCW2+1
   250  000000                     _ModDkCW2$k	set	?a_ModDkCW2+1
   251                           ;	_ada assigned to ?a_ModDkCW2+0
   252  000000                     _ModDkCW2$ada	set	?a_ModDkCW2
   253                           ;	_m assigned to ?a_ModZgCW2+0
   254  000000                     _ModZgCW2$m	set	?a_ModZgCW2
   255                           ;	_m assigned to ?a_FirstXMOD2+1
   256  000000                     _FirstXMOD2$m	set	?a_FirstXMOD2+1
   257  000000                     
   258                           ;rgl.c: 28: if(M._pob_CW)
   259  0010EE  0100               	movlb	(_M+8) shr (0+8)
   260  0010F0  515D               	movf	(_M+8)& (0+255),w,b
   261  0010F2  115E               	iorwf	(_M+9)& (0+255),w,b
   262  0010F4  B4D8               	btfsc	status,2,c
   263  0010F6  0012               	return	
   264                           ;rgl.c: 29: {
   265  0010F8  0E04               	movlw	4
   266  0010FA  EC04  F046         	call	_RTdS
   267  0010FE  6E00               	movwf	btemp,c
   268  001100  0E02               	movlw	2
   269  001102  5C00               	subwf	btemp,w,c
   270  001104  E307               	bnc	l12
   271                           ;rgl.c: 32: {
   272  001106  0E04               	movlw	4
   273  001108  ECF2  F045         	call	_StartRTdS
   274                           ;rgl.c: 34: NewPop_MIN();
   275  00110C  ECCF  F011         	call	_NewPop_MIN	;wreg free
   276                           ;rgl.c: 35: NewPop_MAX_CW();
   277  001110  EC72  F012         	call	_NewPop_MAX_CW	;wreg free
   278  001114                     l12:
   279                           ;rgl.c: 36: }
   280  001114  ECC0  F013         	call	_New_MIN	;wreg free
   281                           ;rgl.c: 38: New_MAX_CW();
   282  001118  ECFD  F013         	call	_New_MAX_CW	;wreg free
   283                           ;rgl.c: 40: StartMCW2();
   284  00111C  D81C               	call	_StartMCW2	;wreg free
   285                           ;rgl.c: 41: ReadDataCW2();
   286  00111E  DA4C               	call	_ReadDataCW2	;wreg free
   287                           ;rgl.c: 42: ModToCW2();
   288  001120  DA40               	call	_ModToCW2	;wreg free
   289                           ;rgl.c: 43: ModZgCW2();
   290  001122  DA4F               	call	_ModZgCW2	;wreg free
   291                           ;rgl.c: 44: ModDkCW2();
   292  001124  DB6F               	call	_ModDkCW2	;wreg free
   293                           ;rgl.c: 46: if(RTdS(3)>10)
   294  001126  0E03               	movlw	3
   295  001128  EC04  F046         	call	_RTdS
   296  00112C  6E00               	movwf	btemp,c
   297  00112E  0E0B               	movlw	11
   298  001130  5C00               	subwf	btemp,w,c
   299  001132  E30D               	bnc	l13
   300                           ;rgl.c: 47: {
   301  001134  0E03               	movlw	3
   302  001136  ECF2  F045         	call	_StartRTdS
   303                           ;rgl.c: 49: if(subtim<0xff) subtim++;
   304  00113A  CF2C  F000         	movff	_subtim,btemp
   305  00113E  2800               	incf	btemp,w,c
   306  001140  E002               	bz	l14
   307  001142  010F               	movlb	_subtim shr (0+8)
   308  001144  2B2C               	incf	_subtim& (0+255),f,b
   309  001146                     l14:
   310                           ;rgl.c: 50: IncConstCW2();
   311  001146  DA30               	call	_IncConstCW2	;wreg free
   312                           ;rgl.c: 51: IncMaxCW2();
   313  001148  EC50  F00F         	call	_IncMaxCW2	;wreg free
   314                           ;rgl.c: 52: ModPruCW2();
   315  00114C  DBDB               	call	_ModPruCW2	;wreg free
   316  00114E                     l13:
   317                           ;rgl.c: 53: }
   318  00114E  ECDD  F010         	call	_ModPrzCW2	;wreg free
   319                           ;rgl.c: 55: SetPWM_CW();
   320  001152  EF5F  F011         	goto	_SetPWM_CW	;wreg free
   321                           ;rgl.c: 56: }
   322  001156                     __end_of_Moduluj:
   323                           ;rgl.c: 127: float wspSUP0=1.0;
   324                           ;rgl.c: 200: unsigned char FirstXMOD2(void);
   325                           ;rgl.c: 201: void StartMCW2(void)
   326                           ;rgl.c: 202: {
   327  001156                     _StartMCW2:
   328  000000                     
   329                           ;rgl.c: 203: if(rgl.btcw) return;
   330  001156  0101               	movlb	_rgl shr (0+8)	;volatile
   331  001158  B3F5               	btfsc	_rgl& (0+255),1,b	;volatile
   332  00115A  0012               	return	
   333                           ;rgl.c: 204: StartRTdS(3);
   334  00115C  0E03               	movlw	3
   335  00115E  ECF2  F045         	call	_StartRTdS
   336                           ;rgl.c: 205: popMIN=0;
   337  001162  010F               	movlb	_popMIN shr (0+8)
   338  001164  6B26               	clrf	_popMIN& (0+255),b
   339                           ;rgl.c: 206: popMAXCW=0;
   340  001166  010F               	movlb	_popMAXCW shr (0+8)
   341  001168  6B25               	clrf	_popMAXCW& (0+255),b
   342                           ;rgl.c: 208: DtCW.dDCW=0;
   343  00116A  0102               	movlb	(_DtCW+8) shr (0+8)
   344  00116C  6B56               	clrf	(_DtCW+8)& (0+255),b
   345                           ;rgl.c: 210: DtCW.indCW=0;
   346  00116E  0102               	movlb	(_DtCW+10) shr (0+8)
   347  001170  6B58               	clrf	(_DtCW+10)& (0+255),b
   348                           ;rgl.c: 211: rgl.fz=0;
   349  001172  0101               	movlb	_rgl shr (0+8)	;volatile
   350  001174  95F5               	bcf	_rgl& (0+255),2,b	;volatile
   351                           ;rgl.c: 212: rgl.xmod=FirstXMOD2();
   352  001176  D809               	call	_FirstXMOD2	;wreg free
   353  001178  CFE8 F1FD          	movff	wreg,_rgl+8
   354                           ;rgl.c: 213: PWM.BufPWM=rgl.xmod;
   355  00117C  C1FD  F25E         	movff	_rgl+8,_PWM+1
   356                           ;rgl.c: 215: rgl.srp=0;
   357  001180  0101               	movlb	(_rgl+7) shr (0+8)
   358  001182  6BFC               	clrf	(_rgl+7)& (0+255),b
   359                           ;rgl.c: 216: rgl.ytmp=0;
   360  001184  6BFB               	clrf	(_rgl+6)& (0+255),b
   361                           ;rgl.c: 217: rgl.del1s=0;
   362  001186  9DF5               	bcf	_rgl& (0+255),6,b	;volatile
   363                           ;rgl.c: 218: }
   364  001188  0012               	return	
   365  00118A                     __end_of_StartMCW2:
   366                           ;rgl.c: 221: unsigned char FirstXMOD2(void)
   367                           ;rgl.c: 222: {
   368  00118A                     _FirstXMOD2:
   369  000000                     
   370                           ;	_p assigned to ?a_FirstXMOD2+0
   371  000000                     _FirstXMOD2$p	set	?a_FirstXMOD2
   372                           ;rgl.c: 233: signed long m;
   373  00118A  0E04               	movlw	4
   374  00118C  6E02               	movwf	btemp+2,c
   375  00118E  6A03               	clrf	btemp+3,c
   376  001190  C265  FFE8         	movff	_PWM+8,wreg
   377  001194  C26F  F000         	movff	_PWM+18,btemp
   378  001198  6A01               	clrf	btemp+1,c
   379  00119A  5E00               	subwf	btemp,f,c
   380  00119C  0E00               	movlw	0
   381  00119E  5A01               	subwfb	btemp+1,f,c
   382  0011A0  ECBB  F04B         	call	awdiv
   383  0011A4  C004  F000         	movff	btemp+4,btemp
   384  0011A8  C005  F001         	movff	btemp+5,btemp+1
   385  0011AC  EC3F  F04C         	call	awtoft
   386  0011B0  C087  F003         	movff	_wspPp0,btemp+3
   387  0011B4  C088  F004         	movff	_wspPp0+1,btemp+4
   388  0011B8  C089  F005         	movff	_wspPp0+2,btemp+5
   389  0011BC  ECFF  F048         	call	ftmul
   390  0011C0  EC10  F04B         	call	fttol
   391  0011C4  5000               	movf	btemp,w,c
   392  0011C6  6ED9               	movwf	fsr2l,c
   393                           ;rgl.c: 239: if(PWM.MMAXCW>(PWM.FIRSTPB+tmp))
   394  0011C8  C277  F000         	movff	_PWM+26,btemp
   395  0011CC  6A01               	clrf	btemp+1,c
   396  0011CE  50D9               	movf	fsr2l,w,c
   397  0011D0  C26F  F002         	movff	_PWM+18,btemp+2
   398  0011D4  6A03               	clrf	btemp+3,c
   399  0011D6  2602               	addwf	btemp+2,f,c
   400  0011D8  0E00               	movlw	0
   401  0011DA  2203               	addwfc	btemp+3,f,c
   402  0011DC  5003               	movf	btemp+3,w,c
   403  0011DE  0A80               	xorlw	128
   404  0011E0  6E04               	movwf	btemp+4,c
   405  0011E2  5001               	movf	btemp+1,w,c
   406  0011E4  0A80               	xorlw	128
   407  0011E6  5C04               	subwf	btemp+4,w,c
   408  0011E8  E102               	bnz	u65
   409  0011EA  5000               	movf	btemp,w,c
   410  0011EC  5C02               	subwf	btemp+2,w,c
   411  0011EE                     u65:
   412  0011EE  E205               	bc	l18
   413                           ;rgl.c: 240: {
   414  0011F0  50D9               	movf	fsr2l,w,c
   415  0011F2  0102               	movlb	(_PWM+18) shr (0+8)
   416  0011F4  256F               	addwf	(_PWM+18)& (0+255),w,b
   417  0011F6  6EE1               	movwf	fsr1l,c
   418                           ;rgl.c: 242: }
   419  0011F8  D002               	goto	l19
   420  0011FA                     l18:
   421                           ;rgl.c: 243: else
   422  0011FA  C277  FFE1         	movff	_PWM+26,fsr1l
   423  0011FE                     l19:
   424                           ;rgl.c: 246: }
   425  0011FE  0E13               	movlw	19
   426  001200  0102               	movlb	(_DtCW+2) shr (0+8)
   427  001202  6550               	cpfsgt	(_DtCW+2)& (0+255),b
   428  001204  D089               	goto	l20
   429  001206  0E3D               	movlw	61
   430  001208  6150               	cpfslt	(_DtCW+2)& (0+255),b
   431  00120A  D086               	goto	l20
   432                           ;rgl.c: 250: {
   433  00120C  0E0A               	movlw	10
   434  00120E  6E02               	movwf	btemp+2,c
   435  001210  6A03               	clrf	btemp+3,c
   436  001212  0E3C               	movlw	60
   437  001214  6E00               	movwf	btemp,c
   438  001216  6A01               	clrf	btemp+1,c
   439  001218  C250  FFE8         	movff	_DtCW+2,wreg
   440  00121C  5E00               	subwf	btemp,f,c
   441  00121E  0E00               	movlw	0
   442  001220  5A01               	subwfb	btemp+1,f,c
   443  001222  EC16  F04C         	call	awmul
   444  001226  0100               	movlb	__Lparam shr (0+8)
   445  001228  C004  F0A9         	movff	btemp+4,?a_FirstXMOD2+1
   446  00122C  C005  F0AA         	movff	btemp+5,?a_FirstXMOD2+2
   447  001230  0E00               	movlw	0
   448  001232  BFAA               	btfsc	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),7
      +                          ,b
   449  001234  0EFF               	movlw	-1
   450  001236  6FAB               	movwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   451  001238  6FAC               	movwf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   452                           ;rgl.c: 252: m=m/(60-20);
   453  00123A  0E28               	movlw	40
   454  00123C  6E04               	movwf	btemp+4,c
   455  00123E  6A05               	clrf	btemp+5,c
   456  001240  6A06               	clrf	btemp+6,c
   457  001242  6A07               	clrf	btemp+7,c
   458  001244  0EA9               	movlw	low (?a_FirstXMOD2+1)
   459  001246  6EE9               	movwf	fsr0l,c
   460  001248  0E00               	movlw	high (?a_FirstXMOD2+1)
   461  00124A  6EEA               	movwf	fsr0h,c
   462  00124C  EC5E  F04C         	call	aldiv_f
   463                           ;rgl.c: 253: m=m*(maxmod-PWM.MDMOD);
   464  001250  C265  FFE8         	movff	_PWM+8,wreg
   465  001254  5CE1               	subwf	fsr1l,w,c
   466  001256  6E04               	movwf	btemp+4,c
   467  001258  6A05               	clrf	btemp+5,c
   468  00125A  A0D8               	btfss	status,0,c
   469  00125C  0605               	decf	btemp+5,f,c
   470  00125E  6A06               	clrf	btemp+6,c
   471  001260  BE05               	btfsc	btemp+5,7,c
   472  001262  0606               	decf	btemp+6,f,c
   473  001264  5006               	movf	btemp+6,w,c
   474  001266  6E07               	movwf	btemp+7,c
   475  001268  0EA9               	movlw	low (?a_FirstXMOD2+1)
   476  00126A  6EE9               	movwf	fsr0l,c
   477  00126C  0E00               	movlw	high (?a_FirstXMOD2+1)
   478  00126E  6EEA               	movwf	fsr0h,c
   479  001270  EC72  F04C         	call	almul_f
   480                           ;rgl.c: 254: if(m<0) m=0;
   481  001274  AFAC               	btfss	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),7
      +                          ,b
   482  001276  D004               	goto	l21
   483  001278  6BA9               	clrf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),b
   484  00127A  6BAA               	clrf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),b
   485  00127C  6BAB               	clrf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   486  00127E  6BAC               	clrf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   487  001280                     l21:
   488                           ;rgl.c: 255: m=(signed long)(m*wspPp1);
   489  001280  C0A9  F000         	movff	?a_FirstXMOD2+1,btemp
   490  001284  C0AA  F001         	movff	?a_FirstXMOD2+2,btemp+1
   491  001288  C0AB  F002         	movff	?a_FirstXMOD2+3,btemp+2
   492  00128C  C0AC  F003         	movff	?a_FirstXMOD2+4,btemp+3
   493  001290  ECA5  F04B         	call	altoft
   494  001294  C08A  F003         	movff	_wspPp1,btemp+3
   495  001298  C08B  F004         	movff	_wspPp1+1,btemp+4
   496  00129C  C08C  F005         	movff	_wspPp1+2,btemp+5
   497  0012A0  ECFF  F048         	call	ftmul
   498  0012A4  EC10  F04B         	call	fttol
   499  0012A8  C000  F0A9         	movff	btemp,?a_FirstXMOD2+1
   500  0012AC  C001  F0AA         	movff	btemp+1,?a_FirstXMOD2+2
   501  0012B0  C002  F0AB         	movff	btemp+2,?a_FirstXMOD2+3
   502  0012B4  C003  F0AC         	movff	btemp+3,?a_FirstXMOD2+4
   503                           ;rgl.c: 256: m=m/10+PWM.MDMOD;
   504  0012B8  0E0A               	movlw	10
   505  0012BA  6E04               	movwf	btemp+4,c
   506  0012BC  6A05               	clrf	btemp+5,c
   507  0012BE  6A06               	clrf	btemp+6,c
   508  0012C0  6A07               	clrf	btemp+7,c
   509  0012C2  C0A9  F000         	movff	?a_FirstXMOD2+1,btemp
   510  0012C6  C0AA  F001         	movff	?a_FirstXMOD2+2,btemp+1
   511  0012CA  C0AB  F002         	movff	?a_FirstXMOD2+3,btemp+2
   512  0012CE  C0AC  F003         	movff	?a_FirstXMOD2+4,btemp+3
   513  0012D2  EC37  F04B         	call	aldiv
   514  0012D6  C265  FFE8         	movff	_PWM+8,wreg
   515  0012DA  2400               	addwf	btemp,w,c
   516  0012DC  0100               	movlb	__Lparam shr (0+8)
   517  0012DE  6FA9               	movwf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),b
   518  0012E0  0E00               	movlw	0
   519  0012E2  2001               	addwfc	btemp+1,w,c
   520  0012E4  6FAA               	movwf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),b
   521  0012E6  0E00               	movlw	0
   522  0012E8  2002               	addwfc	btemp+2,w,c
   523  0012EA  6FAB               	movwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   524  0012EC  0E00               	movlw	0
   525  0012EE  2003               	addwfc	btemp+3,w,c
   526  0012F0  6FAC               	movwf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   527                           ;rgl.c: 257: if(m>0xff) p=maxmod;
   528  0012F2  51AC               	movf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),w
   529  0012F4  0A80               	xorlw	128
   530  0012F6  0F80               	addlw	128
   531  0012F8  E108               	bnz	u115
   532  0012FA  0E00               	movlw	0
   533  0012FC  5DAB               	subwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),w
   534  0012FE  E105               	bnz	u115
   535  001300  0E01               	movlw	1
   536  001302  5DAA               	subwf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),w
   537  001304  E102               	bnz	u115
   538  001306  0E00               	movlw	0
   539  001308  5DA9               	subwf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),w
   540  00130A                     u115:
   541  00130A  E303               	bnc	l22
   542  00130C  50E1               	movf	fsr1l,w,c
   543  00130E                     L1:
   544  00130E  6FA8               	movwf	?a_FirstXMOD2^(__Lparam& (0+65280)),b
   545  001310  D010               	goto	l24
   546  001312                     l22:
   547                           ;rgl.c: 258: else p=m;
   548  001312  0100               	movlb	__Lparam shr (0+8)
   549  001314  51A9               	movf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),w
   550  001316  D7FB               	goto	L1
   551                           ;rgl.c: 259: }
   552  001318                     l20:
   553                           ;rgl.c: 260: else
   554  001318  0E14               	movlw	20
   555  00131A  0102               	movlb	(_DtCW+2) shr (0+8)
   556  00131C  6150               	cpfslt	(_DtCW+2)& (0+255),b
   557  00131E  D003               	goto	l25
   558  001320  50E1               	movf	fsr1l,w,c
   559  001322  0100               	movlb	__Lparam shr (0+8)
   560  001324  6FA8               	movwf	?a_FirstXMOD2^(__Lparam& (0+65280)),b
   561  001326                     l25:
   562                           ;rgl.c: 263: if(DtCW.CW>60) p=PWM.MDMOD;
   563  001326  0E3C               	movlw	60
   564  001328  0102               	movlb	(_DtCW+2) shr (0+8)
   565  00132A  6550               	cpfsgt	(_DtCW+2)& (0+255),b
   566  00132C  D002               	goto	l24
   567  00132E  C265  F0A8         	movff	_PWM+8,?a_FirstXMOD2
   568  001332                     l24:
   569                           ;rgl.c: 264: }
   570  001332  0E0A               	movlw	10
   571  001334  6E02               	movwf	btemp+2,c
   572  001336  6A03               	clrf	btemp+3,c
   573  001338  C251  F000         	movff	_DtCW+3,btemp
   574  00133C  6A01               	clrf	btemp+1,c
   575  00133E  0EE2               	movlw	226
   576  001340  2600               	addwf	btemp,f,c
   577  001342  0EFF               	movlw	255
   578  001344  2201               	addwfc	btemp+1,f,c
   579  001346  EC16  F04C         	call	awmul
   580  00134A  0100               	movlb	__Lparam shr (0+8)
   581  00134C  C004  F0A9         	movff	btemp+4,?a_FirstXMOD2+1
   582  001350  C005  F0AA         	movff	btemp+5,?a_FirstXMOD2+2
   583  001354  0E00               	movlw	0
   584  001356  BFAA               	btfsc	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),7
      +                          ,b
   585  001358  0EFF               	movlw	-1
   586  00135A  6FAB               	movwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   587  00135C  6FAC               	movwf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   588                           ;rgl.c: 268: m=m/(60-30);
   589  00135E  0E1E               	movlw	30
   590  001360  6E04               	movwf	btemp+4,c
   591  001362  6A05               	clrf	btemp+5,c
   592  001364  6A06               	clrf	btemp+6,c
   593  001366  6A07               	clrf	btemp+7,c
   594  001368  0EA9               	movlw	low (?a_FirstXMOD2+1)
   595  00136A  6EE9               	movwf	fsr0l,c
   596  00136C  0E00               	movlw	high (?a_FirstXMOD2+1)
   597  00136E  6EEA               	movwf	fsr0h,c
   598  001370  EC5E  F04C         	call	aldiv_f
   599                           ;rgl.c: 269: m=m*(maxmod-PWM.MDMOD);
   600  001374  C265  FFE8         	movff	_PWM+8,wreg
   601  001378  5CE1               	subwf	fsr1l,w,c
   602  00137A  6E04               	movwf	btemp+4,c
   603  00137C  6A05               	clrf	btemp+5,c
   604  00137E  A0D8               	btfss	status,0,c
   605  001380  0605               	decf	btemp+5,f,c
   606  001382  6A06               	clrf	btemp+6,c
   607  001384  BE05               	btfsc	btemp+5,7,c
   608  001386  0606               	decf	btemp+6,f,c
   609  001388  5006               	movf	btemp+6,w,c
   610  00138A  6E07               	movwf	btemp+7,c
   611  00138C  0EA9               	movlw	low (?a_FirstXMOD2+1)
   612  00138E  6EE9               	movwf	fsr0l,c
   613  001390  0E00               	movlw	high (?a_FirstXMOD2+1)
   614  001392  6EEA               	movwf	fsr0h,c
   615  001394  EC72  F04C         	call	almul_f
   616                           ;rgl.c: 270: if(m<0) m=0;
   617  001398  AFAC               	btfss	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),7
      +                          ,b
   618  00139A  D004               	goto	l27
   619  00139C  6BA9               	clrf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),b
   620  00139E  6BAA               	clrf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),b
   621  0013A0  6BAB               	clrf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   622  0013A2  6BAC               	clrf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   623  0013A4                     l27:
   624                           ;rgl.c: 271: m=(signed long)(m*wspPp2);
   625  0013A4  C0A9  F000         	movff	?a_FirstXMOD2+1,btemp
   626  0013A8  C0AA  F001         	movff	?a_FirstXMOD2+2,btemp+1
   627  0013AC  C0AB  F002         	movff	?a_FirstXMOD2+3,btemp+2
   628  0013B0  C0AC  F003         	movff	?a_FirstXMOD2+4,btemp+3
   629  0013B4  ECA5  F04B         	call	altoft
   630  0013B8  C08D  F003         	movff	_wspPp2,btemp+3
   631  0013BC  C08E  F004         	movff	_wspPp2+1,btemp+4
   632  0013C0  C08F  F005         	movff	_wspPp2+2,btemp+5
   633  0013C4  ECFF  F048         	call	ftmul
   634  0013C8  EC10  F04B         	call	fttol
   635  0013CC  C000  F0A9         	movff	btemp,?a_FirstXMOD2+1
   636  0013D0  C001  F0AA         	movff	btemp+1,?a_FirstXMOD2+2
   637  0013D4  C002  F0AB         	movff	btemp+2,?a_FirstXMOD2+3
   638  0013D8  C003  F0AC         	movff	btemp+3,?a_FirstXMOD2+4
   639                           ;rgl.c: 272: m=m/10+PWM.MDMOD;
   640  0013DC  0E0A               	movlw	10
   641  0013DE  6E04               	movwf	btemp+4,c
   642  0013E0  6A05               	clrf	btemp+5,c
   643  0013E2  6A06               	clrf	btemp+6,c
   644  0013E4  6A07               	clrf	btemp+7,c
   645  0013E6  C0A9  F000         	movff	?a_FirstXMOD2+1,btemp
   646  0013EA  C0AA  F001         	movff	?a_FirstXMOD2+2,btemp+1
   647  0013EE  C0AB  F002         	movff	?a_FirstXMOD2+3,btemp+2
   648  0013F2  C0AC  F003         	movff	?a_FirstXMOD2+4,btemp+3
   649  0013F6  EC37  F04B         	call	aldiv
   650  0013FA  C265  FFE8         	movff	_PWM+8,wreg
   651  0013FE  2400               	addwf	btemp,w,c
   652  001400  0100               	movlb	__Lparam shr (0+8)
   653  001402  6FA9               	movwf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),b
   654  001404  0E00               	movlw	0
   655  001406  2001               	addwfc	btemp+1,w,c
   656  001408  6FAA               	movwf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),b
   657  00140A  0E00               	movlw	0
   658  00140C  2002               	addwfc	btemp+2,w,c
   659  00140E  6FAB               	movwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   660  001410  0E00               	movlw	0
   661  001412  2003               	addwfc	btemp+3,w,c
   662  001414  6FAC               	movwf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   663                           ;rgl.c: 273: if(m>0xff) p2=maxmod;
   664  001416  51AC               	movf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),w
   665  001418  0A80               	xorlw	128
   666  00141A  0F80               	addlw	128
   667  00141C  E108               	bnz	u155
   668  00141E  0E00               	movlw	0
   669  001420  5DAB               	subwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),w
   670  001422  E105               	bnz	u155
   671  001424  0E01               	movlw	1
   672  001426  5DAA               	subwf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),w
   673  001428  E102               	bnz	u155
   674  00142A  0E00               	movlw	0
   675  00142C  5DA9               	subwf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),w
   676  00142E                     u155:
   677  00142E  E302               	bnc	l28
   678  001430  50E1               	movf	fsr1l,w,c
   679  001432  D002               	goto	L2
   680  001434                     l28:
   681                           ;rgl.c: 274: else p2=m;
   682  001434  0100               	movlb	__Lparam shr (0+8)
   683  001436  51A9               	movf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),w
   684  001438                     L2:
   685  001438  6ED9               	movwf	fsr2l,c
   686                           ;rgl.c: 277: if(p>p2) p=p2;
   687  00143A  0100               	movlb	__Lparam shr (0+8)
   688  00143C  51A8               	movf	?a_FirstXMOD2^(__Lparam& (0+65280)),w
   689  00143E  60D9               	cpfslt	fsr2l,c
   690  001440  D002               	goto	l30
   691  001442  50D9               	movf	fsr2l,w,c
   692  001444  6FA8               	movwf	?a_FirstXMOD2^(__Lparam& (0+65280)),b
   693  001446                     l30:
   694                           ;rgl.c: 280: if(DtCW.DCW>=0&&DtCW.DCW<=5)
   695  001446  C255  F000         	movff	_DtCW+7,btemp
   696  00144A  C255  FFE8         	movff	_DtCW+7,wreg
   697  00144E  0A80               	xorlw	128
   698  001450  BE00               	btfsc	btemp,7,c
   699  001452  D089               	goto	L24
   700  001454  0F7A               	addlw	-134
   701  001456  E301 D083          	bc	l31
   702                           ;rgl.c: 281: {
   703  00145A  0E0A               	movlw	10
   704  00145C  6E02               	movwf	btemp+2,c
   705  00145E  6A03               	clrf	btemp+3,c
   706  001460  C255  F000         	movff	_DtCW+7,btemp
   707  001464  6A01               	clrf	btemp+1,c
   708  001466  BE00               	btfsc	btemp,7,c
   709  001468  0601               	decf	btemp+1,f,c
   710  00146A  EC16  F04C         	call	awmul
   711  00146E  0100               	movlb	__Lparam shr (0+8)
   712  001470  C004  F0A9         	movff	btemp+4,?a_FirstXMOD2+1
   713  001474  C005  F0AA         	movff	btemp+5,?a_FirstXMOD2+2
   714  001478  0E00               	movlw	0
   715  00147A  BFAA               	btfsc	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),7
      +                          ,b
   716  00147C  0EFF               	movlw	-1
   717  00147E  6FAB               	movwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   718  001480  6FAC               	movwf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   719                           ;rgl.c: 283: m=m/(5-0);
   720  001482  0E05               	movlw	5
   721  001484  6E04               	movwf	btemp+4,c
   722  001486  6A05               	clrf	btemp+5,c
   723  001488  6A06               	clrf	btemp+6,c
   724  00148A  6A07               	clrf	btemp+7,c
   725  00148C  0EA9               	movlw	low (?a_FirstXMOD2+1)
   726  00148E  6EE9               	movwf	fsr0l,c
   727  001490  0E00               	movlw	high (?a_FirstXMOD2+1)
   728  001492  6EEA               	movwf	fsr0h,c
   729  001494  EC5E  F04C         	call	aldiv_f
   730                           ;rgl.c: 284: m=m*(maxmod-PWM.MDMOD);
   731  001498  C265  FFE8         	movff	_PWM+8,wreg
   732  00149C  5CE1               	subwf	fsr1l,w,c
   733  00149E  6E04               	movwf	btemp+4,c
   734  0014A0  6A05               	clrf	btemp+5,c
   735  0014A2  A0D8               	btfss	status,0,c
   736  0014A4  0605               	decf	btemp+5,f,c
   737  0014A6  6A06               	clrf	btemp+6,c
   738  0014A8  BE05               	btfsc	btemp+5,7,c
   739  0014AA  0606               	decf	btemp+6,f,c
   740  0014AC  5006               	movf	btemp+6,w,c
   741  0014AE  6E07               	movwf	btemp+7,c
   742  0014B0  0EA9               	movlw	low (?a_FirstXMOD2+1)
   743  0014B2  6EE9               	movwf	fsr0l,c
   744  0014B4  0E00               	movlw	high (?a_FirstXMOD2+1)
   745  0014B6  6EEA               	movwf	fsr0h,c
   746  0014B8  EC72  F04C         	call	almul_f
   747                           ;rgl.c: 285: if(m<0) m=0;
   748  0014BC  AFAC               	btfss	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),7
      +                          ,b
   749  0014BE  D004               	goto	l32
   750  0014C0  6BA9               	clrf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),b
   751  0014C2  6BAA               	clrf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),b
   752  0014C4  6BAB               	clrf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   753  0014C6  6BAC               	clrf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   754  0014C8                     l32:
   755                           ;rgl.c: 286: m=(signed long)(m*wspPp3);
   756  0014C8  C0A9  F000         	movff	?a_FirstXMOD2+1,btemp
   757  0014CC  C0AA  F001         	movff	?a_FirstXMOD2+2,btemp+1
   758  0014D0  C0AB  F002         	movff	?a_FirstXMOD2+3,btemp+2
   759  0014D4  C0AC  F003         	movff	?a_FirstXMOD2+4,btemp+3
   760  0014D8  ECA5  F04B         	call	altoft
   761  0014DC  C090  F003         	movff	_wspPp3,btemp+3
   762  0014E0  C091  F004         	movff	_wspPp3+1,btemp+4
   763  0014E4  C092  F005         	movff	_wspPp3+2,btemp+5
   764  0014E8  ECFF  F048         	call	ftmul
   765  0014EC  EC10  F04B         	call	fttol
   766  0014F0  C000  F0A9         	movff	btemp,?a_FirstXMOD2+1
   767  0014F4  C001  F0AA         	movff	btemp+1,?a_FirstXMOD2+2
   768  0014F8  C002  F0AB         	movff	btemp+2,?a_FirstXMOD2+3
   769  0014FC  C003  F0AC         	movff	btemp+3,?a_FirstXMOD2+4
   770                           ;rgl.c: 287: m=m/10+PWM.MDMOD;
   771  001500  0E0A               	movlw	10
   772  001502  6E04               	movwf	btemp+4,c
   773  001504  6A05               	clrf	btemp+5,c
   774  001506  6A06               	clrf	btemp+6,c
   775  001508  6A07               	clrf	btemp+7,c
   776  00150A  C0A9  F000         	movff	?a_FirstXMOD2+1,btemp
   777  00150E  C0AA  F001         	movff	?a_FirstXMOD2+2,btemp+1
   778  001512  C0AB  F002         	movff	?a_FirstXMOD2+3,btemp+2
   779  001516  C0AC  F003         	movff	?a_FirstXMOD2+4,btemp+3
   780  00151A  EC37  F04B         	call	aldiv
   781  00151E  C265  FFE8         	movff	_PWM+8,wreg
   782  001522  2400               	addwf	btemp,w,c
   783  001524  0100               	movlb	__Lparam shr (0+8)
   784  001526  6FA9               	movwf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),b
   785  001528  0E00               	movlw	0
   786  00152A  2001               	addwfc	btemp+1,w,c
   787  00152C  6FAA               	movwf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),b
   788  00152E  0E00               	movlw	0
   789  001530  2002               	addwfc	btemp+2,w,c
   790  001532  6FAB               	movwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),b
   791  001534  0E00               	movlw	0
   792  001536  2003               	addwfc	btemp+3,w,c
   793  001538  6FAC               	movwf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),b
   794                           ;rgl.c: 288: if(m>0xff) p2=maxmod;
   795  00153A  51AC               	movf	(?a_FirstXMOD2+4)^(__Lparam& (0+65280)),w
   796  00153C  0A80               	xorlw	128
   797  00153E  0F80               	addlw	128
   798  001540  E108               	bnz	u215
   799  001542  0E00               	movlw	0
   800  001544  5DAB               	subwf	(?a_FirstXMOD2+3)^(__Lparam& (0+65280)),w
   801  001546  E105               	bnz	u215
   802  001548  0E01               	movlw	1
   803  00154A  5DAA               	subwf	(?a_FirstXMOD2+2)^(__Lparam& (0+65280)),w
   804  00154C  E102               	bnz	u215
   805  00154E  0E00               	movlw	0
   806  001550  5DA9               	subwf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),w
   807  001552                     u215:
   808  001552  E303               	bnc	l33
   809  001554  50E1               	movf	fsr1l,w,c
   810  001556                     L3:
   811  001556  6ED9               	movwf	fsr2l,c
   812  001558  D00F               	goto	l35
   813  00155A                     l33:
   814                           ;rgl.c: 289: else p2=m;
   815  00155A  0100               	movlb	__Lparam shr (0+8)
   816  00155C  51A9               	movf	(?a_FirstXMOD2+1)^(__Lparam& (0+65280)),w
   817  00155E  D7FB               	goto	L3
   818                           ;rgl.c: 290: }
   819  001560                     l31:
   820                           ;rgl.c: 291: else
   821  001560  C255  FFE8         	movff	_DtCW+7,wreg
   822  001564  0A80               	xorlw	128
   823  001566                     L24:
   824  001566  0F7A               	addlw	-134
   825  001568  E302               	bnc	l36
   826  00156A  50E1               	movf	fsr1l,w,c
   827  00156C  6ED9               	movwf	fsr2l,c
   828  00156E                     l36:
   829                           ;rgl.c: 294: if(DtCW.DCW<0) p2=PWM.MDMOD;
   830  00156E  C255  F000         	movff	_DtCW+7,btemp
   831  001572  BE00               	btfsc	btemp,7,c
   832  001574  C265  FFD9         	movff	_PWM+8,fsr2l
   833  001578                     l35:
   834                           ;rgl.c: 295: }
   835  001578  0100               	movlb	__Lparam shr (0+8)
   836  00157A  51A8               	movf	?a_FirstXMOD2^(__Lparam& (0+65280)),w
   837  00157C  60D9               	cpfslt	fsr2l,c
   838  00157E  D002               	goto	l38
   839  001580  50D9               	movf	fsr2l,w,c
   840  001582  6FA8               	movwf	?a_FirstXMOD2^(__Lparam& (0+65280)),b
   841  001584                     l38:
   842                           ;rgl.c: 300: return p;
   843  001584  0100               	movlb	__Lparam shr (0+8)
   844  001586  51A8               	movf	?a_FirstXMOD2^(__Lparam& (0+65280)),w
   845  001588  0012               	return	
   846                           ;rgl.c: 301: }
   847  00158A                     __end_of_FirstXMOD2:
   848                           ;rgl.c: 304: void ClrMod2(void)
   849                           ;rgl.c: 305: {
   850  00158A                     _ClrMod2:
   851  000000                     
   852                           ;rgl.c: 306: rgl.fz=0;
   853  00158A  0101               	movlb	_rgl shr (0+8)	;volatile
   854  00158C  95F5               	bcf	_rgl& (0+255),2,b	;volatile
   855                           ;rgl.c: 307: rgl.med_up=0;
   856  00158E  97F5               	bcf	_rgl& (0+255),3,b	;volatile
   857                           ;rgl.c: 308: rgl.fast_up=0;
   858  001590  99F5               	bcf	_rgl& (0+255),4,b	;volatile
   859                           ;rgl.c: 311: rgl.xmod=PWM.BufPWM;
   860  001592  C25E  F1FD         	movff	_PWM+1,_rgl+8
   861                           ;rgl.c: 312: rgl.srp=0;
   862  001596  6BFC               	clrf	(_rgl+7)& (0+255),b
   863                           ;rgl.c: 313: rgl.ytmp=0;
   864  001598  6BFB               	clrf	(_rgl+6)& (0+255),b
   865                           ;rgl.c: 314: rgl.nmod=0;
   866  00159A  9BF5               	bcf	_rgl& (0+255),5,b	;volatile
   867                           ;rgl.c: 315: rgl.del1s=0;
   868  00159C  9DF5               	bcf	_rgl& (0+255),6,b	;volatile
   869                           ;rgl.c: 316: rgl.inv_mod=0;
   870  00159E  91F6               	bcf	(_rgl+1)& (0+255),0,b
   871                           ;rgl.c: 317: }
   872  0015A0  0012               	return	
   873  0015A2                     __end_of_ClrMod2:
   874                           ;rgl.c: 320: void ModToCW2(void)
   875                           ;rgl.c: 321: {
   876  0015A2                     _ModToCW2:
   877  000000                     
   878                           ;rgl.c: 322: rgl.btcw=1;
   879  0015A2  0101               	movlb	_rgl shr (0+8)	;volatile
   880  0015A4  83F5               	bsf	_rgl& (0+255),1,b	;volatile
   881                           ;rgl.c: 323: }
   882  0015A6  0012               	return	
   883  0015A8                     __end_of_ModToCW2:
   884                           ;rgl.c: 326: void IncConstCW2(void)
   885                           ;rgl.c: 327: {
   886  0015A8                     _IncConstCW2:
   887  000000                     
   888                           ;rgl.c: 328: if(Tstoi()) rgl.ytmp++;
   889  0015A8  EC7B  F016         	call	_Tstoi	;wreg free
   890  0015AC  0101               	movlb	(_rgl+6) shr (0+8)
   891  0015AE  E302               	bnc	L25
   892  0015B0  2BFB               	incf	(_rgl+6)& (0+255),f,b
   893  0015B2  0C01               	retlw	1
   894                           ;rgl.c: 329: else rgl.ytmp=0;
   895  0015B4                     L25:
   896  0015B4  6BFB               	clrf	(_rgl+6)& (0+255),b
   897                           ;rgl.c: 330: }
   898  0015B6  0012               	return	
   899  0015B8                     __end_of_IncConstCW2:
   900                           ;rgl.c: 333: void ReadDataCW2(void)
   901                           ;rgl.c: 334: {
   902  0015B8                     _ReadDataCW2:
   903  000000                     
   904                           ;rgl.c: 335: rgl.x_t=DtCW.DCW;
   905  0015B8  C255  F1F7         	movff	_DtCW+7,_rgl+2
   906                           ;rgl.c: 337: rgl.x_dt=DtCW.dDCW;
   907  0015BC  C256  F1F9         	movff	_DtCW+8,_rgl+4
   908                           ;rgl.c: 339: }
   909  0015C0  0012               	return	
   910  0015C2                     __end_of_ReadDataCW2:
   911                           ;rgl.c: 340: void ModZgCW2(void)
   912                           ;rgl.c: 341: {
   913  0015C2                     _ModZgCW2:
   914  000000                     
   915                           ;rgl.c: 342: signed long m;
   916  0015C2  0101               	movlb	_rgl shr (0+8)	;volatile
   917  0015C4  A5F5               	btfss	_rgl& (0+255),2,b	;volatile
   918  0015C6  D00C               	goto	l46
   919                           ;rgl.c: 345: {
   920  0015C8  0E05               	movlw	5
   921  0015CA  EC82  F016         	call	_Tnizsza
   922  0015CE  A0D8               	btfss	status,0,c
   923  0015D0  0012               	return	
   924                           ;rgl.c: 347: {
   925  0015D2  C25E  F1FD         	movff	_PWM+1,_rgl+8
   926                           ;rgl.c: 349: rgl.srp=0;
   927  0015D6  0101               	movlb	(_rgl+7) shr (0+8)
   928  0015D8  6BFC               	clrf	(_rgl+7)& (0+255),b
   929                           ;rgl.c: 350: rgl.ytmp=0;
   930  0015DA  6BFB               	clrf	(_rgl+6)& (0+255),b
   931                           ;rgl.c: 351: rgl.nmod=0;
   932  0015DC  9BF5               	bcf	_rgl& (0+255),5,b	;volatile
   933                           ;rgl.c: 352: rgl.del1s=0;
   934  0015DE  9DF5               	bcf	_rgl& (0+255),6,b	;volatile
   935                           ;rgl.c: 353: }
   936                           ;rgl.c: 354: else return;
   937  0015E0                     l46:
   938                           ;rgl.c: 355: }
   939  0015E0  0101               	movlb	_rgl shr (0+8)	;volatile
   940  0015E2  BBF5               	btfsc	_rgl& (0+255),5,b	;volatile
   941  0015E4  D027               	goto	l49
   942  0015E6  ECAA  F016         	call	_Trowna	;wreg free
   943  0015EA  E204               	bc	u320
   944  0015EC  0E00               	movlw	0
   945  0015EE  EC8F  F016         	call	_Twyzsza
   946  0015F2  E320               	bnc	l49
   947  0015F4                     u320:
   948                           ;rgl.c: 360: {
   949  0015F4  0101               	movlb	_rgl shr (0+8)	;volatile
   950  0015F6  85F5               	bsf	_rgl& (0+255),2,b	;volatile
   951                           ;rgl.c: 362: rgl.fast_up=0;
   952  0015F8  99F5               	bcf	_rgl& (0+255),4,b	;volatile
   953                           ;rgl.c: 363: rgl.med_up=0;
   954  0015FA  97F5               	bcf	_rgl& (0+255),3,b	;volatile
   955                           ;rgl.c: 364: rgl.srp=PWM.BufPWM;
   956  0015FC  C25E  F1FC         	movff	_PWM+1,_rgl+7
   957                           ;rgl.c: 365: rgl.xmod=PWM.BufPWM;
   958  001600  C25E  F1FD         	movff	_PWM+1,_rgl+8
   959                           ;rgl.c: 366: if(PWM.MMAXCW>PWM.MAXPWM)
   960  001604  C277  FFE8         	movff	_PWM+26,wreg
   961  001608  0102               	movlb	(_PWM+29) shr (0+8)
   962  00160A  617A               	cpfslt	(_PWM+29)& (0+255),b
   963  00160C  D009               	goto	l50
   964                           ;rgl.c: 367: {
   965  00160E  C1FD  FFE8         	movff	_rgl+8,wreg
   966  001612  617A               	cpfslt	(_PWM+29)& (0+255),b
   967  001614  0012               	return	
   968                           ;rgl.c: 369: {
   969  001616  C27A  F1FC         	movff	_PWM+29,_rgl+7
   970                           ;rgl.c: 371: rgl.xmod=PWM.MAXPWM;
   971  00161A  C27A  F1FD         	movff	_PWM+29,_rgl+8
   972                           ;rgl.c: 372: }
   973  00161E  0012               	return	
   974  001620                     l50:
   975                           ;rgl.c: 374: else
   976  001620  C1FD  FFE8         	movff	_rgl+8,wreg
   977  001624  0102               	movlb	(_PWM+26) shr (0+8)
   978  001626  6177               	cpfslt	(_PWM+26)& (0+255),b
   979  001628  0012               	return	
   980                           ;rgl.c: 377: {
   981  00162A  C277  F1FC         	movff	_PWM+26,_rgl+7
   982                           ;rgl.c: 379: rgl.xmod=PWM.MMAXCW;
   983  00162E  C277  F1FD         	movff	_PWM+26,_rgl+8
   984                           ;rgl.c: 380: }
   985  001632  0012               	return	
   986  001634                     l49:
   987                           ;rgl.c: 383: }
   988  001634  C279  FFE8         	movff	_PWM+28,wreg
   989  001638  0101               	movlb	(_rgl+8) shr (0+8)
   990  00163A  5DFD               	subwf	(_rgl+8)& (0+255),w,b
   991  00163C  E318               	bnc	l54
   992  00163E  0E0A               	movlw	10
   993  001640  6E02               	movwf	btemp+2,c
   994  001642  6A03               	clrf	btemp+3,c
   995  001644  C279  FFE8         	movff	_PWM+28,wreg
   996  001648  C1FD  F000         	movff	_rgl+8,btemp
   997  00164C  6A01               	clrf	btemp+1,c
   998  00164E  5E00               	subwf	btemp,f,c
   999  001650  0E00               	movlw	0
  1000  001652  5A01               	subwfb	btemp+1,f,c
  1001  001654  EC16  F04C         	call	awmul
  1002  001658  0100               	movlb	__Lparam shr (0+8)
  1003  00165A  C004  F0A8         	movff	btemp+4,?a_ModZgCW2
  1004  00165E  C005  F0A9         	movff	btemp+5,?a_ModZgCW2+1
  1005  001662  0E00               	movlw	0
  1006  001664  BFA9               	btfsc	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),7,b
  1007  001666  0EFF               	movlw	-1
  1008  001668  6FAA               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  1009  00166A  6FAB               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  1010  00166C  D005               	goto	l55
  1011  00166E                     l54:
  1012                           ;rgl.c: 385: else m=0;
  1013  00166E  0100               	movlb	__Lparam shr (0+8)
  1014  001670  6BA8               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  1015  001672  6BA9               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  1016  001674  6BAA               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  1017  001676  6BAB               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  1018  001678                     l55:
  1019                           ;rgl.c: 386: m=m/(DtCW.MAD_CW-DtCW.DAD_CW);
  1020  001678  C25C  FFE8         	movff	_DtCW+14,wreg
  1021  00167C  C25B  F000         	movff	_DtCW+13,btemp
  1022  001680  5C00               	subwf	btemp,w,c
  1023  001682  6E04               	movwf	btemp+4,c
  1024  001684  6A05               	clrf	btemp+5,c
  1025  001686  A0D8               	btfss	status,0,c
  1026  001688  0605               	decf	btemp+5,f,c
  1027  00168A  6A06               	clrf	btemp+6,c
  1028  00168C  BE05               	btfsc	btemp+5,7,c
  1029  00168E  0606               	decf	btemp+6,f,c
  1030  001690  5006               	movf	btemp+6,w,c
  1031  001692  6E07               	movwf	btemp+7,c
  1032  001694  0EA8               	movlw	low ?a_ModZgCW2
  1033  001696  6EE9               	movwf	fsr0l,c
  1034  001698  0E00               	movlw	high ?a_ModZgCW2
  1035  00169A  6EEA               	movwf	fsr0h,c
  1036  00169C  EC5E  F04C         	call	aldiv_f
  1037                           ;rgl.c: 387: m=m*(DtCW.AC_CW-DtCW.DAD_CW);
  1038  0016A0  C25C  FFE8         	movff	_DtCW+14,wreg
  1039  0016A4  C25A  F000         	movff	_DtCW+12,btemp
  1040  0016A8  5C00               	subwf	btemp,w,c
  1041  0016AA  6E04               	movwf	btemp+4,c
  1042  0016AC  6A05               	clrf	btemp+5,c
  1043  0016AE  A0D8               	btfss	status,0,c
  1044  0016B0  0605               	decf	btemp+5,f,c
  1045  0016B2  6A06               	clrf	btemp+6,c
  1046  0016B4  BE05               	btfsc	btemp+5,7,c
  1047  0016B6  0606               	decf	btemp+6,f,c
  1048  0016B8  5006               	movf	btemp+6,w,c
  1049  0016BA  6E07               	movwf	btemp+7,c
  1050  0016BC  0EA8               	movlw	low ?a_ModZgCW2
  1051  0016BE  6EE9               	movwf	fsr0l,c
  1052  0016C0  0E00               	movlw	high ?a_ModZgCW2
  1053  0016C2  6EEA               	movwf	fsr0h,c
  1054  0016C4  EC72  F04C         	call	almul_f
  1055                           ;rgl.c: 388: if(m<0) m=0;
  1056  0016C8  0100               	movlb	__Lparam shr (0+8)
  1057  0016CA  AFAB               	btfss	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),7,b
  1058  0016CC  D004               	goto	l56
  1059  0016CE  6BA8               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  1060  0016D0  6BA9               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  1061  0016D2  6BAA               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  1062  0016D4  6BAB               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  1063  0016D6                     l56:
  1064                           ;rgl.c: 389: m=(signed long)(m*wspZG0);
  1065  0016D6  C0A8  F000         	movff	?a_ModZgCW2,btemp
  1066  0016DA  C0A9  F001         	movff	?a_ModZgCW2+1,btemp+1
  1067  0016DE  C0AA  F002         	movff	?a_ModZgCW2+2,btemp+2
  1068  0016E2  C0AB  F003         	movff	?a_ModZgCW2+3,btemp+3
  1069  0016E6  ECA5  F04B         	call	altoft
  1070  0016EA  C099  F003         	movff	_wspZG0,btemp+3
  1071  0016EE  C09A  F004         	movff	_wspZG0+1,btemp+4
  1072  0016F2  C09B  F005         	movff	_wspZG0+2,btemp+5
  1073  0016F6  ECFF  F048         	call	ftmul
  1074  0016FA  EC10  F04B         	call	fttol
  1075  0016FE  C000  F0A8         	movff	btemp,?a_ModZgCW2
  1076  001702  C001  F0A9         	movff	btemp+1,?a_ModZgCW2+1
  1077  001706  C002  F0AA         	movff	btemp+2,?a_ModZgCW2+2
  1078  00170A  C003  F0AB         	movff	btemp+3,?a_ModZgCW2+3
  1079                           ;rgl.c: 390: m=m/10+PWM.MINPWM;
  1080  00170E  0E0A               	movlw	10
  1081  001710  6E04               	movwf	btemp+4,c
  1082  001712  6A05               	clrf	btemp+5,c
  1083  001714  6A06               	clrf	btemp+6,c
  1084  001716  6A07               	clrf	btemp+7,c
  1085  001718  C0A8  F000         	movff	?a_ModZgCW2,btemp
  1086  00171C  C0A9  F001         	movff	?a_ModZgCW2+1,btemp+1
  1087  001720  C0AA  F002         	movff	?a_ModZgCW2+2,btemp+2
  1088  001724  C0AB  F003         	movff	?a_ModZgCW2+3,btemp+3
  1089  001728  EC37  F04B         	call	aldiv
  1090  00172C  C279  FFE8         	movff	_PWM+28,wreg
  1091  001730  2400               	addwf	btemp,w,c
  1092  001732  0100               	movlb	__Lparam shr (0+8)
  1093  001734  6FA8               	movwf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  1094  001736  0E00               	movlw	0
  1095  001738  2001               	addwfc	btemp+1,w,c
  1096  00173A  6FA9               	movwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  1097  00173C  0E00               	movlw	0
  1098  00173E  2002               	addwfc	btemp+2,w,c
  1099  001740  6FAA               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  1100  001742  0E00               	movlw	0
  1101  001744  2003               	addwfc	btemp+3,w,c
  1102  001746  6FAB               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  1103                           ;rgl.c: 391: if(m>0xff)
  1104  001748  51AB               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  1105  00174A  0A80               	xorlw	128
  1106  00174C  0F80               	addlw	128
  1107  00174E  E108               	bnz	u385
  1108  001750  0E00               	movlw	0
  1109  001752  5DAA               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  1110  001754  E105               	bnz	u385
  1111  001756  0E01               	movlw	1
  1112  001758  5DA9               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  1113  00175A  E102               	bnz	u385
  1114  00175C  0E00               	movlw	0
  1115  00175E  5DA8               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  1116  001760                     u385:
  1117  001760  E305               	bnc	l57
  1118                           ;rgl.c: 392: {
  1119  001762  0101               	movlb	_rgl shr (0+8)	;volatile
  1120  001764  95F5               	bcf	_rgl& (0+255),2,b	;volatile
  1121                           ;rgl.c: 394: rgl.tmp_pwm=rgl.xmod;
  1122  001766  C1FD  F1FE         	movff	_rgl+8,_rgl+9
  1123                           ;rgl.c: 395: return;
  1124  00176A  0012               	return	
  1125  00176C                     l57:
  1126                           ;rgl.c: 396: }
  1127  00176C  0101               	movlb	_rgl shr (0+8)	;volatile
  1128  00176E  A5F5               	btfss	_rgl& (0+255),2,b	;volatile
  1129  001770  D01C               	goto	l58
  1130  001772  C1FD  F000         	movff	_rgl+8,btemp
  1131  001776  6A01               	clrf	btemp+1,c
  1132  001778  6A02               	clrf	btemp+2,c
  1133  00177A  6A03               	clrf	btemp+3,c
  1134  00177C  0100               	movlb	__Lparam shr (0+8)
  1135  00177E  51AB               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  1136  001780  0A80               	xorlw	128
  1137  001782  6E04               	movwf	btemp+4,c
  1138  001784  5003               	movf	btemp+3,w,c
  1139  001786  0A80               	xorlw	128
  1140  001788  5C04               	subwf	btemp+4,w,c
  1141  00178A  E108               	bnz	u405
  1142  00178C  5002               	movf	btemp+2,w,c
  1143  00178E  5DAA               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  1144  001790  E105               	bnz	u405
  1145  001792  5001               	movf	btemp+1,w,c
  1146  001794  5DA9               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  1147  001796  E102               	bnz	u405
  1148  001798  5000               	movf	btemp,w,c
  1149  00179A  5DA8               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  1150  00179C                     u405:
  1151  00179C  E206               	bc	l58
  1152                           ;rgl.c: 398: rgl.srp=(rgl.xmod-m);
  1153  00179E  0100               	movlb	__Lparam shr (0+8)
  1154  0017A0  51A8               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  1155  0017A2  0101               	movlb	(_rgl+8) shr (0+8)
  1156  0017A4  5DFD               	subwf	(_rgl+8)& (0+255),w,b
  1157  0017A6  CFE8 F1FC          	movff	wreg,_rgl+7
  1158  0017AA                     l58:
  1159                           ;rgl.c: 399: m+=rgl.srp;
  1160  0017AA  C1FC  FFE8         	movff	_rgl+7,wreg
  1161  0017AE  0100               	movlb	__Lparam shr (0+8)
  1162  0017B0  27A8               	addwf	?a_ModZgCW2^(__Lparam& (0+65280)),f,b
  1163  0017B2  0E01               	movlw	1
  1164  0017B4  B0D8               	btfsc	status,0,c
  1165  0017B6  27A9               	addwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),f,b
  1166  0017B8  B0D8               	btfsc	status,0,c
  1167  0017BA  27AA               	addwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),f,b
  1168  0017BC  B0D8               	btfsc	status,0,c
  1169  0017BE  27AB               	addwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),f,b
  1170                           ;rgl.c: 400: if(m>rgl.xmod) p=rgl.xmod;
  1171  0017C0  C1FD  F000         	movff	_rgl+8,btemp
  1172  0017C4  6A01               	clrf	btemp+1,c
  1173  0017C6  6A02               	clrf	btemp+2,c
  1174  0017C8  6A03               	clrf	btemp+3,c
  1175  0017CA  5003               	movf	btemp+3,w,c
  1176  0017CC  0A80               	xorlw	128
  1177  0017CE  6E04               	movwf	btemp+4,c
  1178  0017D0  51AB               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  1179  0017D2  0A80               	xorlw	128
  1180  0017D4  5C04               	subwf	btemp+4,w,c
  1181  0017D6  E108               	bnz	u425
  1182  0017D8  51AA               	movf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  1183  0017DA  5C02               	subwf	btemp+2,w,c
  1184  0017DC  E105               	bnz	u425
  1185  0017DE  51A9               	movf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  1186  0017E0  5C01               	subwf	btemp+1,w,c
  1187  0017E2  E102               	bnz	u425
  1188  0017E4  51A8               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  1189  0017E6  5C00               	subwf	btemp,w,c
  1190  0017E8                     u425:
  1191  0017E8  E203               	bc	l59
  1192  0017EA  C1FD  FFD9         	movff	_rgl+8,fsr2l
  1193  0017EE  D003               	goto	l60
  1194  0017F0                     l59:
  1195                           ;rgl.c: 401: else p=m;
  1196  0017F0  0100               	movlb	__Lparam shr (0+8)
  1197  0017F2  51A8               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  1198  0017F4  6ED9               	movwf	fsr2l,c
  1199  0017F6                     l60:
  1200                           ;rgl.c: 402: rgl.fz=0;
  1201  0017F6  0101               	movlb	_rgl shr (0+8)	;volatile
  1202  0017F8  95F5               	bcf	_rgl& (0+255),2,b	;volatile
  1203                           ;rgl.c: 403: rgl.tmp_pwm=p;
  1204  0017FA  EE01  F0FE         	lfsr	0,_rgl+9
  1205  0017FE  CFD9 FFEF          	movff	fsr2l,indf0
  1206                           ;rgl.c: 404: }
  1207  001802  0012               	return	
  1208  001804                     __end_of_ModZgCW2:
  1209                           ;rgl.c: 414: void ModDkCW2(void)
  1210                           ;rgl.c: 415: {
  1211  001804                     _ModDkCW2:
  1212  000000                     
  1213                           ;rgl.c: 416: signed long m;
  1214  001804  0101               	movlb	_rgl shr (0+8)	;volatile
  1215  001806  A5F5               	btfss	_rgl& (0+255),2,b	;volatile
  1216  001808  0012               	return	
  1217                           ;rgl.c: 421: ada=DtCW.AC_CW-DtCW.DAD_CW;
  1218  00180A  C25C  FFE8         	movff	_DtCW+14,wreg
  1219  00180E  0102               	movlb	(_DtCW+12) shr (0+8)
  1220  001810  5D5A               	subwf	(_DtCW+12)& (0+255),w,b
  1221  001812  0100               	movlb	__Lparam shr (0+8)
  1222  001814  6FA8               	movwf	?a_ModDkCW2^(__Lparam& (0+65280)),b
  1223                           ;rgl.c: 422: if(Trowna()) return;
  1224  001816  ECAA  F016         	call	_Trowna	;wreg free
  1225  00181A  B0D8               	btfsc	status,0,c
  1226  00181C  0012               	return	
  1227                           ;rgl.c: 423: k=1.0;
  1228  00181E  0100               	movlb	__Lparam shr (0+8)
  1229  001820  6BA9               	clrf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),b
  1230  001822  0E80               	movlw	128
  1231  001824  6FAA               	movwf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),b
  1232  001826  0E3F               	movlw	63
  1233  001828  6FAB               	movwf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),b
  1234                           ;rgl.c: 424: k=k*wspDK;
  1235  00182A  C09F  F003         	movff	_wspDK,btemp+3
  1236  00182E  C0A0  F004         	movff	_wspDK+1,btemp+4
  1237  001832  C0A1  F005         	movff	_wspDK+2,btemp+5
  1238  001836  0EA9               	movlw	low (?a_ModDkCW2+1)
  1239  001838  6EE9               	movwf	fsr0l,c
  1240  00183A  0E00               	movlw	high (?a_ModDkCW2+1)
  1241  00183C  6EEA               	movwf	fsr0h,c
  1242  00183E  EC7C  F04C         	call	ftmul_f
  1243                           ;rgl.c: 433: m=(signed long)(rgl.srp+k*ada);
  1244  001842  C0A8  F000         	movff	?a_ModDkCW2,btemp
  1245  001846  ECF6  F04B         	call	abtoft
  1246  00184A  C0A9  F003         	movff	?a_ModDkCW2+1,btemp+3
  1247  00184E  C0AA  F004         	movff	?a_ModDkCW2+2,btemp+4
  1248  001852  C0AB  F005         	movff	?a_ModDkCW2+3,btemp+5
  1249  001856  ECFF  F048         	call	ftmul
  1250  00185A  C000  F0B0         	movff	btemp,?a_ModDkCW2+8
  1251  00185E  C001  F0B1         	movff	btemp+1,?a_ModDkCW2+9
  1252  001862  C002  F0B2         	movff	btemp+2,?a_ModDkCW2+10
  1253  001866  C1FC  F000         	movff	_rgl+7,btemp
  1254  00186A  EC01  F04C         	call	lbtoft
  1255  00186E  C0B0  F003         	movff	?a_ModDkCW2+8,btemp+3
  1256  001872  C0B1  F004         	movff	?a_ModDkCW2+9,btemp+4
  1257  001876  C0B2  F005         	movff	?a_ModDkCW2+10,btemp+5
  1258  00187A  ECE9  F049         	call	ftadd
  1259  00187E  EC10  F04B         	call	fttol
  1260  001882  C000  F0AC         	movff	btemp,?a_ModDkCW2+4
  1261  001886  C001  F0AD         	movff	btemp+1,?a_ModDkCW2+5
  1262  00188A  C002  F0AE         	movff	btemp+2,?a_ModDkCW2+6
  1263  00188E  C003  F0AF         	movff	btemp+3,?a_ModDkCW2+7
  1264                           ;rgl.c: 434: if(m>rgl.xmod) p=rgl.xmod;
  1265  001892  C1FD  F000         	movff	_rgl+8,btemp
  1266  001896  6A01               	clrf	btemp+1,c
  1267  001898  6A02               	clrf	btemp+2,c
  1268  00189A  6A03               	clrf	btemp+3,c
  1269  00189C  5003               	movf	btemp+3,w,c
  1270  00189E  0A80               	xorlw	128
  1271  0018A0  6E04               	movwf	btemp+4,c
  1272  0018A2  51AF               	movf	(?a_ModDkCW2+7)^(__Lparam& (0+65280)),w
  1273  0018A4  0A80               	xorlw	128
  1274  0018A6  5C04               	subwf	btemp+4,w,c
  1275  0018A8  E108               	bnz	u455
  1276  0018AA  51AE               	movf	(?a_ModDkCW2+6)^(__Lparam& (0+65280)),w
  1277  0018AC  5C02               	subwf	btemp+2,w,c
  1278  0018AE  E105               	bnz	u455
  1279  0018B0  51AD               	movf	(?a_ModDkCW2+5)^(__Lparam& (0+65280)),w
  1280  0018B2  5C01               	subwf	btemp+1,w,c
  1281  0018B4  E102               	bnz	u455
  1282  0018B6  51AC               	movf	(?a_ModDkCW2+4)^(__Lparam& (0+65280)),w
  1283  0018B8  5C00               	subwf	btemp,w,c
  1284  0018BA                     u455:
  1285  0018BA  E203               	bc	l64
  1286  0018BC  C1FD  FFD9         	movff	_rgl+8,fsr2l
  1287  0018C0  D01C               	goto	l65
  1288  0018C2                     l64:
  1289                           ;rgl.c: 435: else
  1290  0018C2  C279  F000         	movff	_PWM+28,btemp
  1291  0018C6  6A01               	clrf	btemp+1,c
  1292  0018C8  6A02               	clrf	btemp+2,c
  1293  0018CA  6A03               	clrf	btemp+3,c
  1294  0018CC  0100               	movlb	__Lparam shr (0+8)
  1295  0018CE  51AF               	movf	(?a_ModDkCW2+7)^(__Lparam& (0+65280)),w
  1296  0018D0  0A80               	xorlw	128
  1297  0018D2  6E04               	movwf	btemp+4,c
  1298  0018D4  5003               	movf	btemp+3,w,c
  1299  0018D6  0A80               	xorlw	128
  1300  0018D8  5C04               	subwf	btemp+4,w,c
  1301  0018DA  E108               	bnz	u465
  1302  0018DC  5002               	movf	btemp+2,w,c
  1303  0018DE  5DAE               	subwf	(?a_ModDkCW2+6)^(__Lparam& (0+65280)),w
  1304  0018E0  E105               	bnz	u465
  1305  0018E2  5001               	movf	btemp+1,w,c
  1306  0018E4  5DAD               	subwf	(?a_ModDkCW2+5)^(__Lparam& (0+65280)),w
  1307  0018E6  E102               	bnz	u465
  1308  0018E8  5000               	movf	btemp,w,c
  1309  0018EA  5DAC               	subwf	(?a_ModDkCW2+4)^(__Lparam& (0+65280)),w
  1310  0018EC                     u465:
  1311  0018EC  E203               	bc	l66
  1312  0018EE  C279  FFD9         	movff	_PWM+28,fsr2l
  1313  0018F2  D003               	goto	l65
  1314  0018F4                     l66:
  1315                           ;rgl.c: 437: else p=m;
  1316  0018F4  0100               	movlb	__Lparam shr (0+8)
  1317  0018F6  51AC               	movf	(?a_ModDkCW2+4)^(__Lparam& (0+65280)),w
  1318  0018F8  6ED9               	movwf	fsr2l,c
  1319  0018FA                     l65:
  1320                           ;rgl.c: 438: rgl.tmp_pwm=p;
  1321  0018FA  EE01  F0FE         	lfsr	0,_rgl+9
  1322  0018FE  CFD9 FFEF          	movff	fsr2l,indf0
  1323                           ;rgl.c: 439: }
  1324  001902  0012               	return	
  1325  001904                     __end_of_ModDkCW2:
  1326                           ;rgl.c: 445: void ModPruCW2(void)
  1327                           ;rgl.c: 446: {
  1328  001904                     _ModPruCW2:
  1329  000000                     
  1330                           ;rgl.c: 447: static unsigned char l,m,o,p,q,r,s;
  1331  001904  0101               	movlb	_rgl shr (0+8)	;volatile
  1332  001906  B5F5               	btfsc	_rgl& (0+255),2,b	;volatile
  1333  001908  D0E6               	goto	l69
  1334                           ;rgl.c: 452: {
  1335  00190A  010F               	movlb	F1612 shr (0+8)
  1336  00190C  6B0B               	clrf	F1612& (0+255),b
  1337                           ;rgl.c: 454: m=0;
  1338  00190E  010F               	movlb	F1613 shr (0+8)
  1339  001910  6B0C               	clrf	F1613& (0+255),b
  1340                           ;rgl.c: 455: o=0;
  1341  001912  010F               	movlb	F1614 shr (0+8)
  1342  001914  6B0D               	clrf	F1614& (0+255),b
  1343                           ;rgl.c: 456: p=0;
  1344  001916  010F               	movlb	F1615 shr (0+8)
  1345  001918  6B0E               	clrf	F1615& (0+255),b
  1346                           ;rgl.c: 457: if(q<255) q++;
  1347  00191A  CF0F  F000         	movff	F1616,btemp
  1348  00191E  2800               	incf	btemp,w,c
  1349  001920  E002               	bz	l70
  1350  001922  010F               	movlb	F1616 shr (0+8)
  1351  001924  2B0F               	incf	F1616& (0+255),f,b
  1352  001926                     l70:
  1353                           ;rgl.c: 458: if(s<255) s++;
  1354  001926  CF11  F000         	movff	F1618,btemp
  1355  00192A  2800               	incf	btemp,w,c
  1356  00192C  E002               	bz	l71
  1357  00192E  010F               	movlb	F1618 shr (0+8)
  1358  001930  2B11               	incf	F1618& (0+255),f,b
  1359  001932                     l71:
  1360                           ;rgl.c: 459: if(DtCW._newPCW) s=0;
  1361  001932  0102               	movlb	(_DtCW+1) shr (0+8)
  1362  001934  A14F               	btfss	(_DtCW+1)& (0+255),0,b
  1363  001936  D002               	goto	l72
  1364  001938  010F               	movlb	F1618 shr (0+8)
  1365  00193A  6B11               	clrf	F1618& (0+255),b
  1366  00193C                     l72:
  1367                           ;rgl.c: 460: if(Tnizsza(0))
  1368  00193C  0E00               	movlw	0
  1369  00193E  EC82  F016         	call	_Tnizsza
  1370  001942  A0D8               	btfss	status,0,c
  1371  001944  0012               	return	
  1372                           ;rgl.c: 461: {
  1373  001946  0E0A               	movlw	10
  1374  001948  EC82  F016         	call	_Tnizsza
  1375  00194C  B0D8               	btfsc	status,0,c
  1376  00194E  0012               	return	
  1377                           ;rgl.c: 463: {
  1378  001950  0100               	movlb	__Lparam shr (0+8)
  1379  001952  6BA8               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1380                           ;rgl.c: 548: if(Tnizsza(5)&&Tstoi()&&s>=1)
  1381  001954  0E05               	movlw	5
  1382  001956  EC82  F016         	call	_Tnizsza
  1383  00195A  E30A               	bnc	l75
  1384  00195C  EC7B  F016         	call	_Tstoi	;wreg free
  1385  001960  E307               	bnc	l75
  1386  001962  0E00               	movlw	0
  1387  001964  010F               	movlb	F1618 shr (0+8)
  1388  001966  6511               	cpfsgt	F1618& (0+255),b
  1389  001968  D003               	goto	l75
  1390                           ;rgl.c: 549: {
  1391  00196A  6B11               	clrf	F1618& (0+255),b
  1392                           ;rgl.c: 551: k=20;
  1393  00196C  0E14               	movlw	20
  1394  00196E  D025               	goto	L20
  1395                           ;rgl.c: 552: }
  1396  001970                     l75:
  1397                           ;rgl.c: 553: else
  1398  001970  0E04               	movlw	4
  1399  001972  EC82  F016         	call	_Tnizsza
  1400  001976  E30A               	bnc	l77
  1401  001978  EC7B  F016         	call	_Tstoi	;wreg free
  1402  00197C  E307               	bnc	l77
  1403  00197E  0E00               	movlw	0
  1404  001980  010F               	movlb	F1618 shr (0+8)
  1405  001982  6511               	cpfsgt	F1618& (0+255),b
  1406  001984  D003               	goto	l77
  1407                           ;rgl.c: 555: {
  1408  001986  6B11               	clrf	F1618& (0+255),b
  1409                           ;rgl.c: 557: k=16;
  1410  001988  0E10               	movlw	16
  1411  00198A  D017               	goto	L20
  1412                           ;rgl.c: 558: }
  1413  00198C                     l77:
  1414                           ;rgl.c: 559: else
  1415  00198C  0E02               	movlw	2
  1416  00198E  EC82  F016         	call	_Tnizsza
  1417  001992  E30A               	bnc	l79
  1418  001994  EC7B  F016         	call	_Tstoi	;wreg free
  1419  001998  E307               	bnc	l79
  1420  00199A  0E00               	movlw	0
  1421  00199C  010F               	movlb	F1618 shr (0+8)
  1422  00199E  6511               	cpfsgt	F1618& (0+255),b
  1423  0019A0  D003               	goto	l79
  1424                           ;rgl.c: 561: {
  1425  0019A2  6B11               	clrf	F1618& (0+255),b
  1426                           ;rgl.c: 563: k=12;
  1427  0019A4  0E0C               	movlw	12
  1428  0019A6  D009               	goto	L20
  1429                           ;rgl.c: 564: }
  1430  0019A8                     l79:
  1431                           ;rgl.c: 565: else
  1432  0019A8  EC7B  F016         	call	_Tstoi	;wreg free
  1433  0019AC  E308               	bnc	l76
  1434  0019AE  0E00               	movlw	0
  1435  0019B0  010F               	movlb	F1618 shr (0+8)
  1436  0019B2  6511               	cpfsgt	F1618& (0+255),b
  1437  0019B4  D004               	goto	l76
  1438                           ;rgl.c: 567: {
  1439  0019B6  6B11               	clrf	F1618& (0+255),b
  1440                           ;rgl.c: 569: k=8;
  1441  0019B8  0E08               	movlw	8
  1442  0019BA                     L20:
  1443  0019BA  0100               	movlb	__Lparam shr (0+8)
  1444  0019BC  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1445  0019BE                     l76:
  1446                           ;rgl.c: 570: }
  1447  0019BE  0E01               	movlw	1
  1448  0019C0  EC53  F016         	call	_Trosnie
  1449  0019C4  E309               	bnc	l82
  1450  0019C6  0E00               	movlw	0
  1451  0019C8  010F               	movlb	F1618 shr (0+8)
  1452  0019CA  6511               	cpfsgt	F1618& (0+255),b
  1453  0019CC  D005               	goto	l82
  1454                           ;rgl.c: 572: {
  1455  0019CE  6B11               	clrf	F1618& (0+255),b
  1456                           ;rgl.c: 574: k=20;
  1457  0019D0  0E14               	movlw	20
  1458  0019D2  0100               	movlb	__Lparam shr (0+8)
  1459  0019D4  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1460                           ;rgl.c: 575: }
  1461  0019D6  D002               	goto	l83
  1462  0019D8                     l82:
  1463                           ;rgl.c: 576: else
  1464  0019D8  0101               	movlb	(_rgl+6) shr (0+8)
  1465  0019DA  6BFB               	clrf	(_rgl+6)& (0+255),b
  1466  0019DC                     l83:
  1467                           ;rgl.c: 578: if(PWM.BufPWM>rgl.xmod) return;
  1468  0019DC  C25E  FFE8         	movff	_PWM+1,wreg
  1469  0019E0  0101               	movlb	(_rgl+8) shr (0+8)
  1470  0019E2  61FD               	cpfslt	(_rgl+8)& (0+255),b
  1471  0019E4  D001               	goto	l84
  1472  0019E6  0012               	return	
  1473  0019E8                     l84:
  1474                           ;rgl.c: 579: tmp=rgl.xmod-PWM.BufPWM;
  1475  0019E8  C25E  FFE8         	movff	_PWM+1,wreg
  1476  0019EC  0101               	movlb	(_rgl+8) shr (0+8)
  1477  0019EE  5DFD               	subwf	(_rgl+8)& (0+255),w,b
  1478  0019F0  6ED9               	movwf	fsr2l,c
  1479                           ;rgl.c: 580: if(k>1||wspPR0>1)
  1480  0019F2  0100               	movlb	__Lparam shr (0+8)
  1481  0019F4  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1482  0019F6  0A80               	xorlw	128
  1483  0019F8  0F7E               	addlw	-130
  1484  0019FA  E20E               	bc	u770
  1485  0019FC  C09C  F003         	movff	_wspPR0,btemp+3
  1486  001A00  C09D  F004         	movff	_wspPR0+1,btemp+4
  1487  001A04  C09E  F005         	movff	_wspPR0+2,btemp+5
  1488  001A08  6A00               	clrf	btemp,c
  1489  001A0A  0E80               	movlw	128
  1490  001A0C  6E01               	movwf	btemp+1,c
  1491  001A0E  0E3F               	movlw	63
  1492  001A10  6E02               	movwf	btemp+2,c
  1493  001A12  EC55  F04B         	call	ftcmp
  1494  001A16  E211               	bc	l85
  1495  001A18                     u770:
  1496                           ;rgl.c: 581: {
  1497  001A18  C0A8  F000         	movff	?a_ModPruCW2,btemp
  1498  001A1C  ECF6  F04B         	call	abtoft
  1499  001A20  C09C  F003         	movff	_wspPR0,btemp+3
  1500  001A24  C09D  F004         	movff	_wspPR0+1,btemp+4
  1501  001A28  C09E  F005         	movff	_wspPR0+2,btemp+5
  1502  001A2C  ECFF  F048         	call	ftmul
  1503  001A30  EC10  F04B         	call	fttol
  1504  001A34  5000               	movf	btemp,w,c
  1505  001A36  0100               	movlb	__Lparam shr (0+8)
  1506  001A38  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1507  001A3A                     l85:
  1508                           ;rgl.c: 583: }
  1509  001A3A  50D9               	movf	fsr2l,w,c
  1510  001A3C  0100               	movlb	__Lparam shr (0+8)
  1511  001A3E  94D8               	bcf	status,2,c
  1512  001A40  90D8               	bcf	status,0,c
  1513  001A42  AFA8               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  1514  001A44  5DA8               	subwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1515  001A46  B4D8               	btfsc	status,2,c
  1516  001A48  90D8               	bcf	status,0,c
  1517  001A4A  E302               	bnc	l86
  1518  001A4C  50D9               	movf	fsr2l,w,c
  1519  001A4E  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1520  001A50                     l86:
  1521                           ;rgl.c: 585: if(PWM.MMAXCW>PWM.MAXPWM)
  1522  001A50  C277  FFE8         	movff	_PWM+26,wreg
  1523  001A54  0102               	movlb	(_PWM+29) shr (0+8)
  1524  001A56  617A               	cpfslt	(_PWM+29)& (0+255),b
  1525  001A58  D01F               	goto	l87
  1526                           ;rgl.c: 586: {
  1527  001A5A  C1FC  FFE8         	movff	_rgl+7,wreg
  1528  001A5E  0100               	movlb	__Lparam shr (0+8)
  1529  001A60  25A8               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1530  001A62  6E02               	movwf	btemp+2,c
  1531  001A64  6A03               	clrf	btemp+3,c
  1532  001A66  B0D8               	btfsc	status,0,c
  1533  001A68  2A03               	incf	btemp+3,f,c
  1534  001A6A  BFA8               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  1535  001A6C  0603               	decf	btemp+3,f,c
  1536  001A6E  C27A  F000         	movff	_PWM+29,btemp
  1537  001A72  6A01               	clrf	btemp+1,c
  1538  001A74  5001               	movf	btemp+1,w,c
  1539  001A76  0A80               	xorlw	128
  1540  001A78  6E04               	movwf	btemp+4,c
  1541  001A7A  5003               	movf	btemp+3,w,c
  1542  001A7C  0A80               	xorlw	128
  1543  001A7E  5C04               	subwf	btemp+4,w,c
  1544  001A80  E102               	bnz	u805
  1545  001A82  5002               	movf	btemp+2,w,c
  1546  001A84  5C00               	subwf	btemp,w,c
  1547  001A86                     u805:
  1548  001A86  E203               	bc	l88
  1549  001A88  C27A  F1FC         	movff	_PWM+29,_rgl+7
  1550  001A8C  0012               	return	
  1551  001A8E                     l88:
  1552                           ;rgl.c: 588: else rgl.srp+=k;
  1553  001A8E  0100               	movlb	__Lparam shr (0+8)
  1554  001A90  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1555  001A92  0101               	movlb	(_rgl+7) shr (0+8)
  1556  001A94  27FC               	addwf	(_rgl+7)& (0+255),f,b
  1557                           ;rgl.c: 589: }
  1558  001A96  0012               	return	
  1559  001A98                     l87:
  1560                           ;rgl.c: 590: else
  1561  001A98  C1FC  FFE8         	movff	_rgl+7,wreg
  1562  001A9C  0100               	movlb	__Lparam shr (0+8)
  1563  001A9E  25A8               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1564  001AA0  6E02               	movwf	btemp+2,c
  1565  001AA2  6A03               	clrf	btemp+3,c
  1566  001AA4  B0D8               	btfsc	status,0,c
  1567  001AA6  2A03               	incf	btemp+3,f,c
  1568  001AA8  BFA8               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  1569  001AAA  0603               	decf	btemp+3,f,c
  1570  001AAC  C277  F000         	movff	_PWM+26,btemp
  1571  001AB0  6A01               	clrf	btemp+1,c
  1572  001AB2  5001               	movf	btemp+1,w,c
  1573  001AB4  0A80               	xorlw	128
  1574  001AB6  6E04               	movwf	btemp+4,c
  1575  001AB8  5003               	movf	btemp+3,w,c
  1576  001ABA  0A80               	xorlw	128
  1577  001ABC  5C04               	subwf	btemp+4,w,c
  1578  001ABE  E102               	bnz	u815
  1579  001AC0  5002               	movf	btemp+2,w,c
  1580  001AC2  5C00               	subwf	btemp,w,c
  1581  001AC4                     u815:
  1582  001AC4  E203               	bc	l91
  1583  001AC6  C277  F1FC         	movff	_PWM+26,_rgl+7
  1584  001ACA  0012               	return	
  1585  001ACC                     l91:
  1586                           ;rgl.c: 593: else rgl.srp+=k;
  1587  001ACC  0100               	movlb	__Lparam shr (0+8)
  1588  001ACE  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1589  001AD0  0101               	movlb	(_rgl+7) shr (0+8)
  1590  001AD2  27FC               	addwf	(_rgl+7)& (0+255),f,b
  1591                           ;rgl.c: 594: }
  1592  001AD4  0012               	return	
  1593                           ;rgl.c: 597: else return;
  1594                           ;rgl.c: 599: else return;
  1595  001AD6                     l69:
  1596                           ;rgl.c: 601: else
  1597  001AD6  010F               	movlb	F1616 shr (0+8)
  1598  001AD8  6B0F               	clrf	F1616& (0+255),b
  1599                           ;rgl.c: 604: r=0;
  1600  001ADA  010F               	movlb	F1617 shr (0+8)
  1601  001ADC  6B10               	clrf	F1617& (0+255),b
  1602                           ;rgl.c: 605: s=0;
  1603  001ADE  010F               	movlb	F1618 shr (0+8)
  1604  001AE0  6B11               	clrf	F1618& (0+255),b
  1605                           ;rgl.c: 606: if(m<255) m++;
  1606  001AE2  CF0C  F000         	movff	F1613,btemp
  1607  001AE6  2800               	incf	btemp,w,c
  1608  001AE8  E002               	bz	l96
  1609  001AEA  010F               	movlb	F1613 shr (0+8)
  1610  001AEC  2B0C               	incf	F1613& (0+255),f,b
  1611  001AEE                     l96:
  1612                           ;rgl.c: 607: if(p<255) p++;
  1613  001AEE  CF0E  F000         	movff	F1615,btemp
  1614  001AF2  2800               	incf	btemp,w,c
  1615  001AF4  E002               	bz	l97
  1616  001AF6  010F               	movlb	F1615 shr (0+8)
  1617  001AF8  2B0E               	incf	F1615& (0+255),f,b
  1618  001AFA                     l97:
  1619                           ;rgl.c: 608: if(o<255) o++;
  1620  001AFA  CF0D  F000         	movff	F1614,btemp
  1621  001AFE  2800               	incf	btemp,w,c
  1622  001B00  E002               	bz	l98
  1623  001B02  010F               	movlb	F1614 shr (0+8)
  1624  001B04  2B0D               	incf	F1614& (0+255),f,b
  1625  001B06                     l98:
  1626                           ;rgl.c: 609: if(DtCW.DAD_CW>DtCW.AC_CW)
  1627  001B06  C25C  FFE8         	movff	_DtCW+14,wreg
  1628  001B0A  0102               	movlb	(_DtCW+12) shr (0+8)
  1629  001B0C  615A               	cpfslt	(_DtCW+12)& (0+255),b
  1630  001B0E  D0E4               	goto	l99
  1631                           ;rgl.c: 610: {
  1632  001B10  0100               	movlb	__Lparam shr (0+8)
  1633  001B12  6BA8               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1634                           ;rgl.c: 612: l=0;
  1635  001B14  010F               	movlb	F1612 shr (0+8)
  1636  001B16  6B0B               	clrf	F1612& (0+255),b
  1637                           ;rgl.c: 613: if(Tmaleje(0)&&Twyzsza(1)&&m>=ktimP
      +                          R+1)
  1638  001B18  0E00               	movlw	0
  1639  001B1A  EC60  F016         	call	_Tmaleje
  1640  001B1E  E320               	bnc	l100
  1641  001B20  0E01               	movlw	1
  1642  001B22  EC8F  F016         	call	_Twyzsza
  1643  001B26  E31C               	bnc	l100
  1644  001B28  0E01               	movlw	1
  1645  001B2A  CED9  F002         	movff	_ktimPR,btemp+2
  1646  001B2E  6A03               	clrf	btemp+3,c
  1647  001B30  2602               	addwf	btemp+2,f,c
  1648  001B32  0E00               	movlw	0
  1649  001B34  2203               	addwfc	btemp+3,f,c
  1650  001B36  CF0C  F000         	movff	F1613,btemp
  1651  001B3A  6A01               	clrf	btemp+1,c
  1652  001B3C  5001               	movf	btemp+1,w,c
  1653  001B3E  0A80               	xorlw	128
  1654  001B40  6E04               	movwf	btemp+4,c
  1655  001B42  5003               	movf	btemp+3,w,c
  1656  001B44  0A80               	xorlw	128
  1657  001B46  5C04               	subwf	btemp+4,w,c
  1658  001B48  E102               	bnz	u895
  1659  001B4A  5002               	movf	btemp+2,w,c
  1660  001B4C  5C00               	subwf	btemp,w,c
  1661  001B4E                     u895:
  1662  001B4E  E308               	bnc	l100
  1663                           ;rgl.c: 614: {
  1664  001B50  010F               	movlb	F1615 shr (0+8)
  1665  001B52  6B0E               	clrf	F1615& (0+255),b
  1666                           ;rgl.c: 616: o=0;
  1667  001B54  010F               	movlb	F1614 shr (0+8)
  1668  001B56  6B0D               	clrf	F1614& (0+255),b
  1669                           ;rgl.c: 617: l=1;
  1670  001B58  0E01               	movlw	1
  1671  001B5A  CFE8 FF0B          	movff	wreg,F1612
  1672  001B5E  D013               	goto	L21
  1673                           ;rgl.c: 618: m=0;
  1674                           ;rgl.c: 619: k=2;
  1675                           ;rgl.c: 620: }
  1676  001B60                     l100:
  1677                           ;rgl.c: 621: else
  1678  001B60  0E00               	movlw	0
  1679  001B62  EC60  F016         	call	_Tmaleje
  1680  001B66  E214               	bc	l101
  1681  001B68  0E01               	movlw	1
  1682  001B6A  EC8F  F016         	call	_Twyzsza
  1683  001B6E  E310               	bnc	l101
  1684  001B70  CED9  FFE8         	movff	_ktimPR,wreg
  1685  001B74  010F               	movlb	F1613 shr (0+8)
  1686  001B76  5D0C               	subwf	F1613& (0+255),w,b
  1687  001B78  E30B               	bnc	l101
  1688                           ;rgl.c: 623: {
  1689  001B7A  010F               	movlb	F1615 shr (0+8)
  1690  001B7C  6B0E               	clrf	F1615& (0+255),b
  1691                           ;rgl.c: 625: o=0;
  1692  001B7E  010F               	movlb	F1614 shr (0+8)
  1693  001B80  6B0D               	clrf	F1614& (0+255),b
  1694                           ;rgl.c: 626: l=0;
  1695  001B82  010F               	movlb	F1612 shr (0+8)
  1696  001B84  6B0B               	clrf	F1612& (0+255),b
  1697  001B86                     L21:
  1698                           ;rgl.c: 627: m=0;
  1699  001B86  010F               	movlb	F1613 shr (0+8)
  1700  001B88  6B0C               	clrf	F1613& (0+255),b
  1701                           ;rgl.c: 628: k=2;
  1702  001B8A  0E02               	movlw	2
  1703  001B8C  0100               	movlb	__Lparam shr (0+8)
  1704  001B8E  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1705  001B90                     l101:
  1706                           ;rgl.c: 629: }
  1707  001B90  0100               	movlb	__Lparam shr (0+8)
  1708  001B92  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1709  001B94  0A80               	xorlw	128
  1710  001B96  0F7E               	addlw	-130
  1711  001B98  E20E               	bc	u980
  1712  001B9A  C0A2  F003         	movff	_wspPR,btemp+3
  1713  001B9E  C0A3  F004         	movff	_wspPR+1,btemp+4
  1714  001BA2  C0A4  F005         	movff	_wspPR+2,btemp+5
  1715  001BA6  6A00               	clrf	btemp,c
  1716  001BA8  0E80               	movlw	128
  1717  001BAA  6E01               	movwf	btemp+1,c
  1718  001BAC  0E3F               	movlw	63
  1719  001BAE  6E02               	movwf	btemp+2,c
  1720  001BB0  EC55  F04B         	call	ftcmp
  1721  001BB4  E211               	bc	l103
  1722  001BB6                     u980:
  1723                           ;rgl.c: 631: {
  1724  001BB6  C0A8  F000         	movff	?a_ModPruCW2,btemp
  1725  001BBA  ECF6  F04B         	call	abtoft
  1726  001BBE  C0A2  F003         	movff	_wspPR,btemp+3
  1727  001BC2  C0A3  F004         	movff	_wspPR+1,btemp+4
  1728  001BC6  C0A4  F005         	movff	_wspPR+2,btemp+5
  1729  001BCA  ECFF  F048         	call	ftmul
  1730  001BCE  EC10  F04B         	call	fttol
  1731  001BD2  5000               	movf	btemp,w,c
  1732  001BD4  0100               	movlb	__Lparam shr (0+8)
  1733  001BD6  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1734  001BD8                     l103:
  1735                           ;rgl.c: 633: }
  1736  001BD8  010F               	movlb	F1612 shr (0+8)
  1737  001BDA  530B               	movf	F1612& (0+255),f,b
  1738  001BDC  E138               	bnz	l104
  1739  001BDE  0100               	movlb	__Lparam shr (0+8)
  1740  001BE0  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1741  001BE2  E035               	bz	l104
  1742                           ;rgl.c: 635: {
  1743  001BE4  C277  FFE8         	movff	_PWM+26,wreg
  1744  001BE8  0102               	movlb	(_PWM+29) shr (0+8)
  1745  001BEA  617A               	cpfslt	(_PWM+29)& (0+255),b
  1746  001BEC  D007               	goto	l105
  1747                           ;rgl.c: 638: {
  1748  001BEE  C1FC  FFE8         	movff	_rgl+7,wreg
  1749  001BF2  617A               	cpfslt	(_PWM+29)& (0+255),b
  1750  001BF4  D00A               	goto	l107
  1751  001BF6  C27A  F1FC         	movff	_PWM+29,_rgl+7
  1752                           ;rgl.c: 640: }
  1753  001BFA  D007               	goto	l107
  1754  001BFC                     l105:
  1755                           ;rgl.c: 641: else
  1756  001BFC  C1FC  FFE8         	movff	_rgl+7,wreg
  1757  001C00  0102               	movlb	(_PWM+26) shr (0+8)
  1758  001C02  6177               	cpfslt	(_PWM+26)& (0+255),b
  1759  001C04  D002               	goto	l107
  1760  001C06  C277  F1FC         	movff	_PWM+26,_rgl+7
  1761  001C0A                     l107:
  1762                           ;rgl.c: 644: }
  1763  001C0A  C279  F000         	movff	_PWM+28,btemp
  1764  001C0E  6A01               	clrf	btemp+1,c
  1765  001C10  C1FC  F002         	movff	_rgl+7,btemp+2
  1766  001C14  0100               	movlb	__Lparam shr (0+8)
  1767  001C16  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1768  001C18  5C02               	subwf	btemp+2,w,c
  1769  001C1A  6EF6               	movwf	tblptrl,c
  1770  001C1C  6AF7               	clrf	tblptrh,c
  1771  001C1E  B0D8               	btfsc	status,0,c
  1772  001C20  2AF7               	incf	tblptrh,f,c
  1773  001C22  AFA8               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  1774  001C24  06F7               	decf	tblptrh,f,c
  1775  001C26  50F7               	movf	tblptrh,w,c
  1776  001C28  0A80               	xorlw	128
  1777  001C2A  6E02               	movwf	btemp+2,c
  1778  001C2C  5001               	movf	btemp+1,w,c
  1779  001C2E  0A80               	xorlw	128
  1780  001C30  5C02               	subwf	btemp+2,w,c
  1781  001C32  E102               	bnz	u1055
  1782  001C34  5000               	movf	btemp,w,c
  1783  001C36  5CF6               	subwf	tblptrl,w,c
  1784  001C38                     u1055:
  1785  001C38  E203               	bc	l109
  1786  001C3A  C279  F1FC         	movff	_PWM+28,_rgl+7
  1787  001C3E  D044               	goto	l111
  1788  001C40                     l109:
  1789                           ;rgl.c: 646: else rgl.srp=rgl.srp-k;
  1790  001C40  0100               	movlb	__Lparam shr (0+8)
  1791  001C42  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1792  001C44  0101               	movlb	(_rgl+7) shr (0+8)
  1793  001C46  5DFC               	subwf	(_rgl+7)& (0+255),w,b
  1794  001C48  CFE8 F1FC          	movff	wreg,_rgl+7
  1795                           ;rgl.c: 647: }
  1796  001C4C  D03D               	goto	l111
  1797  001C4E                     l104:
  1798                           ;rgl.c: 648: else
  1799  001C4E  C277  FFE8         	movff	_PWM+26,wreg
  1800  001C52  0102               	movlb	(_PWM+29) shr (0+8)
  1801  001C54  617A               	cpfslt	(_PWM+29)& (0+255),b
  1802  001C56  D01A               	goto	l112
  1803                           ;rgl.c: 652: {
  1804  001C58  C1FC  FFE8         	movff	_rgl+7,wreg
  1805  001C5C  0100               	movlb	__Lparam shr (0+8)
  1806  001C5E  25A8               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1807  001C60  6E02               	movwf	btemp+2,c
  1808  001C62  6A03               	clrf	btemp+3,c
  1809  001C64  B0D8               	btfsc	status,0,c
  1810  001C66  2A03               	incf	btemp+3,f,c
  1811  001C68  BFA8               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  1812  001C6A  0603               	decf	btemp+3,f,c
  1813  001C6C  C27A  F000         	movff	_PWM+29,btemp
  1814  001C70  6A01               	clrf	btemp+1,c
  1815  001C72  5001               	movf	btemp+1,w,c
  1816  001C74  0A80               	xorlw	128
  1817  001C76  6E04               	movwf	btemp+4,c
  1818  001C78  5003               	movf	btemp+3,w,c
  1819  001C7A  0A80               	xorlw	128
  1820  001C7C  5C04               	subwf	btemp+4,w,c
  1821  001C7E  E102               	bnz	u1075
  1822  001C80  5002               	movf	btemp+2,w,c
  1823  001C82  5C00               	subwf	btemp,w,c
  1824  001C84                     u1075:
  1825  001C84  E21D               	bc	l116
  1826  001C86  C27A  F1FC         	movff	_PWM+29,_rgl+7
  1827  001C8A  D01E               	goto	l111
  1828                           ;rgl.c: 654: else rgl.srp+=k;
  1829                           ;rgl.c: 655: }
  1830  001C8C                     l112:
  1831                           ;rgl.c: 656: else
  1832  001C8C  C1FC  FFE8         	movff	_rgl+7,wreg
  1833  001C90  0100               	movlb	__Lparam shr (0+8)
  1834  001C92  25A8               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1835  001C94  6E02               	movwf	btemp+2,c
  1836  001C96  6A03               	clrf	btemp+3,c
  1837  001C98  B0D8               	btfsc	status,0,c
  1838  001C9A  2A03               	incf	btemp+3,f,c
  1839  001C9C  BFA8               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  1840  001C9E  0603               	decf	btemp+3,f,c
  1841  001CA0  C277  F000         	movff	_PWM+26,btemp
  1842  001CA4  6A01               	clrf	btemp+1,c
  1843  001CA6  5001               	movf	btemp+1,w,c
  1844  001CA8  0A80               	xorlw	128
  1845  001CAA  6E04               	movwf	btemp+4,c
  1846  001CAC  5003               	movf	btemp+3,w,c
  1847  001CAE  0A80               	xorlw	128
  1848  001CB0  5C04               	subwf	btemp+4,w,c
  1849  001CB2  E102               	bnz	u1085
  1850  001CB4  5002               	movf	btemp+2,w,c
  1851  001CB6  5C00               	subwf	btemp,w,c
  1852  001CB8                     u1085:
  1853  001CB8  E203               	bc	l116
  1854  001CBA  C277  F1FC         	movff	_PWM+26,_rgl+7
  1855  001CBE  D004               	goto	l111
  1856  001CC0                     l116:
  1857                           ;rgl.c: 659: else rgl.srp+=k;
  1858  001CC0  0100               	movlb	__Lparam shr (0+8)
  1859  001CC2  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1860  001CC4  0101               	movlb	(_rgl+7) shr (0+8)
  1861  001CC6  27FC               	addwf	(_rgl+7)& (0+255),f,b
  1862  001CC8                     l111:
  1863                           ;rgl.c: 660: }
  1864  001CC8  C1FC  FFE8         	movff	_rgl+7,wreg
  1865  001CCC  0101               	movlb	(_rgl+8) shr (0+8)
  1866  001CCE  61FD               	cpfslt	(_rgl+8)& (0+255),b
  1867  001CD0  0012               	return	
  1868  001CD2  C1FC  F1FD         	movff	_rgl+7,_rgl+8
  1869                           ;rgl.c: 663: return;
  1870  001CD6  0012               	return	
  1871  001CD8                     l99:
  1872                           ;rgl.c: 665: else
  1873  001CD8  0100               	movlb	__Lparam shr (0+8)
  1874  001CDA  6BA8               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1875                           ;rgl.c: 668: l=0;
  1876  001CDC  010F               	movlb	F1612 shr (0+8)
  1877  001CDE  6B0B               	clrf	F1612& (0+255),b
  1878                           ;rgl.c: 669: if(Trosnie(0)&&Tnizsza(1)&&m>=(ktim
      +                          PR+1))
  1879  001CE0  0E00               	movlw	0
  1880  001CE2  EC53  F016         	call	_Trosnie
  1881  001CE6  E320               	bnc	l120
  1882  001CE8  0E01               	movlw	1
  1883  001CEA  EC82  F016         	call	_Tnizsza
  1884  001CEE  E31C               	bnc	l120
  1885  001CF0  0E01               	movlw	1
  1886  001CF2  CED9  F002         	movff	_ktimPR,btemp+2
  1887  001CF6  6A03               	clrf	btemp+3,c
  1888  001CF8  2602               	addwf	btemp+2,f,c
  1889  001CFA  0E00               	movlw	0
  1890  001CFC  2203               	addwfc	btemp+3,f,c
  1891  001CFE  CF0C  F000         	movff	F1613,btemp
  1892  001D02  6A01               	clrf	btemp+1,c
  1893  001D04  5001               	movf	btemp+1,w,c
  1894  001D06  0A80               	xorlw	128
  1895  001D08  6E04               	movwf	btemp+4,c
  1896  001D0A  5003               	movf	btemp+3,w,c
  1897  001D0C  0A80               	xorlw	128
  1898  001D0E  5C04               	subwf	btemp+4,w,c
  1899  001D10  E102               	bnz	u1135
  1900  001D12  5002               	movf	btemp+2,w,c
  1901  001D14  5C00               	subwf	btemp,w,c
  1902  001D16                     u1135:
  1903  001D16  E308               	bnc	l120
  1904                           ;rgl.c: 670: {
  1905  001D18  010F               	movlb	F1615 shr (0+8)
  1906  001D1A  6B0E               	clrf	F1615& (0+255),b
  1907                           ;rgl.c: 672: o=0;
  1908  001D1C  010F               	movlb	F1614 shr (0+8)
  1909  001D1E  6B0D               	clrf	F1614& (0+255),b
  1910                           ;rgl.c: 673: l=1;
  1911  001D20  0E01               	movlw	1
  1912  001D22  CFE8 FF0B          	movff	wreg,F1612
  1913  001D26  D013               	goto	L22
  1914                           ;rgl.c: 674: m=0;
  1915                           ;rgl.c: 675: k=1;
  1916                           ;rgl.c: 676: }
  1917  001D28                     l120:
  1918                           ;rgl.c: 677: else
  1919  001D28  0E00               	movlw	0
  1920  001D2A  EC53  F016         	call	_Trosnie
  1921  001D2E  E214               	bc	l121
  1922  001D30  0E01               	movlw	1
  1923  001D32  EC82  F016         	call	_Tnizsza
  1924  001D36  E310               	bnc	l121
  1925  001D38  CED9  FFE8         	movff	_ktimPR,wreg
  1926  001D3C  010F               	movlb	F1613 shr (0+8)
  1927  001D3E  5D0C               	subwf	F1613& (0+255),w,b
  1928  001D40  E30B               	bnc	l121
  1929                           ;rgl.c: 679: {
  1930  001D42  010F               	movlb	F1615 shr (0+8)
  1931  001D44  6B0E               	clrf	F1615& (0+255),b
  1932                           ;rgl.c: 681: o=0;
  1933  001D46  010F               	movlb	F1614 shr (0+8)
  1934  001D48  6B0D               	clrf	F1614& (0+255),b
  1935                           ;rgl.c: 682: l=0;
  1936  001D4A  010F               	movlb	F1612 shr (0+8)
  1937  001D4C  6B0B               	clrf	F1612& (0+255),b
  1938  001D4E                     L22:
  1939                           ;rgl.c: 683: m=0;
  1940  001D4E  010F               	movlb	F1613 shr (0+8)
  1941  001D50  6B0C               	clrf	F1613& (0+255),b
  1942                           ;rgl.c: 684: k=1;
  1943  001D52  0E01               	movlw	1
  1944  001D54  0100               	movlb	__Lparam shr (0+8)
  1945  001D56  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1946  001D58                     l121:
  1947                           ;rgl.c: 685: }
  1948  001D58  0100               	movlb	__Lparam shr (0+8)
  1949  001D5A  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1950  001D5C  0A80               	xorlw	128
  1951  001D5E  0F7E               	addlw	-130
  1952  001D60  E20E               	bc	u1220
  1953  001D62  C0A2  F003         	movff	_wspPR,btemp+3
  1954  001D66  C0A3  F004         	movff	_wspPR+1,btemp+4
  1955  001D6A  C0A4  F005         	movff	_wspPR+2,btemp+5
  1956  001D6E  6A00               	clrf	btemp,c
  1957  001D70  0E80               	movlw	128
  1958  001D72  6E01               	movwf	btemp+1,c
  1959  001D74  0E3F               	movlw	63
  1960  001D76  6E02               	movwf	btemp+2,c
  1961  001D78  EC55  F04B         	call	ftcmp
  1962  001D7C  E211               	bc	l123
  1963  001D7E                     u1220:
  1964                           ;rgl.c: 687: {
  1965  001D7E  C0A8  F000         	movff	?a_ModPruCW2,btemp
  1966  001D82  ECF6  F04B         	call	abtoft
  1967  001D86  C0A2  F003         	movff	_wspPR,btemp+3
  1968  001D8A  C0A3  F004         	movff	_wspPR+1,btemp+4
  1969  001D8E  C0A4  F005         	movff	_wspPR+2,btemp+5
  1970  001D92  ECFF  F048         	call	ftmul
  1971  001D96  EC10  F04B         	call	fttol
  1972  001D9A  5000               	movf	btemp,w,c
  1973  001D9C  0100               	movlb	__Lparam shr (0+8)
  1974  001D9E  6FA8               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  1975  001DA0                     l123:
  1976                           ;rgl.c: 689: }
  1977  001DA0  010F               	movlb	F1612 shr (0+8)
  1978  001DA2  530B               	movf	F1612& (0+255),f,b
  1979  001DA4  E141               	bnz	l124
  1980  001DA6  0100               	movlb	__Lparam shr (0+8)
  1981  001DA8  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1982  001DAA  E03E               	bz	l124
  1983                           ;rgl.c: 691: {
  1984  001DAC  C277  FFE8         	movff	_PWM+26,wreg
  1985  001DB0  0102               	movlb	(_PWM+29) shr (0+8)
  1986  001DB2  617A               	cpfslt	(_PWM+29)& (0+255),b
  1987  001DB4  D01F               	goto	l125
  1988                           ;rgl.c: 694: {
  1989  001DB6  C1FC  FFE8         	movff	_rgl+7,wreg
  1990  001DBA  0100               	movlb	__Lparam shr (0+8)
  1991  001DBC  25A8               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  1992  001DBE  6E02               	movwf	btemp+2,c
  1993  001DC0  6A03               	clrf	btemp+3,c
  1994  001DC2  B0D8               	btfsc	status,0,c
  1995  001DC4  2A03               	incf	btemp+3,f,c
  1996  001DC6  BFA8               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  1997  001DC8  0603               	decf	btemp+3,f,c
  1998  001DCA  C27A  F000         	movff	_PWM+29,btemp
  1999  001DCE  6A01               	clrf	btemp+1,c
  2000  001DD0  5001               	movf	btemp+1,w,c
  2001  001DD2  0A80               	xorlw	128
  2002  001DD4  6E04               	movwf	btemp+4,c
  2003  001DD6  5003               	movf	btemp+3,w,c
  2004  001DD8  0A80               	xorlw	128
  2005  001DDA  5C04               	subwf	btemp+4,w,c
  2006  001DDC  E102               	bnz	u1275
  2007  001DDE  5002               	movf	btemp+2,w,c
  2008  001DE0  5C00               	subwf	btemp,w,c
  2009  001DE2                     u1275:
  2010  001DE2  E203               	bc	l126
  2011  001DE4  C27A  F1FC         	movff	_PWM+29,_rgl+7
  2012  001DE8  D053               	goto	l131
  2013  001DEA                     l126:
  2014                           ;rgl.c: 696: else rgl.srp+=k;
  2015  001DEA  0100               	movlb	__Lparam shr (0+8)
  2016  001DEC  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  2017  001DEE  0101               	movlb	(_rgl+7) shr (0+8)
  2018  001DF0  27FC               	addwf	(_rgl+7)& (0+255),f,b
  2019                           ;rgl.c: 697: }
  2020  001DF2  D04E               	goto	l131
  2021  001DF4                     l125:
  2022                           ;rgl.c: 698: else
  2023  001DF4  C1FC  FFE8         	movff	_rgl+7,wreg
  2024  001DF8  0100               	movlb	__Lparam shr (0+8)
  2025  001DFA  25A8               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  2026  001DFC  6E02               	movwf	btemp+2,c
  2027  001DFE  6A03               	clrf	btemp+3,c
  2028  001E00  B0D8               	btfsc	status,0,c
  2029  001E02  2A03               	incf	btemp+3,f,c
  2030  001E04  BFA8               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  2031  001E06  0603               	decf	btemp+3,f,c
  2032  001E08  C277  F000         	movff	_PWM+26,btemp
  2033  001E0C  6A01               	clrf	btemp+1,c
  2034  001E0E  5001               	movf	btemp+1,w,c
  2035  001E10  0A80               	xorlw	128
  2036  001E12  6E04               	movwf	btemp+4,c
  2037  001E14  5003               	movf	btemp+3,w,c
  2038  001E16  0A80               	xorlw	128
  2039  001E18  5C04               	subwf	btemp+4,w,c
  2040  001E1A  E102               	bnz	u1285
  2041  001E1C  5002               	movf	btemp+2,w,c
  2042  001E1E  5C00               	subwf	btemp,w,c
  2043  001E20                     u1285:
  2044  001E20  E2E4               	bc	l126
  2045  001E22  C277  F1FC         	movff	_PWM+26,_rgl+7
  2046  001E26  D034               	goto	l131
  2047                           ;rgl.c: 701: else rgl.srp+=k;
  2048                           ;rgl.c: 702: }
  2049  001E28                     l124:
  2050                           ;rgl.c: 704: else
  2051  001E28  C277  FFE8         	movff	_PWM+26,wreg
  2052  001E2C  0102               	movlb	(_PWM+29) shr (0+8)
  2053  001E2E  617A               	cpfslt	(_PWM+29)& (0+255),b
  2054  001E30  D007               	goto	l132
  2055                           ;rgl.c: 708: {
  2056  001E32  C1FC  FFE8         	movff	_rgl+7,wreg
  2057  001E36  617A               	cpfslt	(_PWM+29)& (0+255),b
  2058  001E38  D00A               	goto	l134
  2059  001E3A  C27A  F1FC         	movff	_PWM+29,_rgl+7
  2060                           ;rgl.c: 710: }
  2061  001E3E  D007               	goto	l134
  2062  001E40                     l132:
  2063                           ;rgl.c: 711: else
  2064  001E40  C1FC  FFE8         	movff	_rgl+7,wreg
  2065  001E44  0102               	movlb	(_PWM+26) shr (0+8)
  2066  001E46  6177               	cpfslt	(_PWM+26)& (0+255),b
  2067  001E48  D002               	goto	l134
  2068  001E4A  C277  F1FC         	movff	_PWM+26,_rgl+7
  2069  001E4E                     l134:
  2070                           ;rgl.c: 714: }
  2071  001E4E  C279  F000         	movff	_PWM+28,btemp
  2072  001E52  6A01               	clrf	btemp+1,c
  2073  001E54  C1FC  F002         	movff	_rgl+7,btemp+2
  2074  001E58  0100               	movlb	__Lparam shr (0+8)
  2075  001E5A  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  2076  001E5C  5C02               	subwf	btemp+2,w,c
  2077  001E5E  6EF6               	movwf	tblptrl,c
  2078  001E60  6AF7               	clrf	tblptrh,c
  2079  001E62  B0D8               	btfsc	status,0,c
  2080  001E64  2AF7               	incf	tblptrh,f,c
  2081  001E66  AFA8               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  2082  001E68  06F7               	decf	tblptrh,f,c
  2083  001E6A  50F7               	movf	tblptrh,w,c
  2084  001E6C  0A80               	xorlw	128
  2085  001E6E  6E02               	movwf	btemp+2,c
  2086  001E70  5001               	movf	btemp+1,w,c
  2087  001E72  0A80               	xorlw	128
  2088  001E74  5C02               	subwf	btemp+2,w,c
  2089  001E76  E102               	bnz	u1325
  2090  001E78  5000               	movf	btemp,w,c
  2091  001E7A  5CF6               	subwf	tblptrl,w,c
  2092  001E7C                     u1325:
  2093  001E7C  E203               	bc	l136
  2094  001E7E  C279  F1FC         	movff	_PWM+28,_rgl+7
  2095  001E82  D006               	goto	l131
  2096  001E84                     l136:
  2097                           ;rgl.c: 716: else rgl.srp=rgl.srp-k;
  2098  001E84  0100               	movlb	__Lparam shr (0+8)
  2099  001E86  51A8               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  2100  001E88  0101               	movlb	(_rgl+7) shr (0+8)
  2101  001E8A  5DFC               	subwf	(_rgl+7)& (0+255),w,b
  2102  001E8C  CFE8 F1FC          	movff	wreg,_rgl+7
  2103  001E90                     l131:
  2104                           ;rgl.c: 717: }
  2105  001E90  C1FC  FFE8         	movff	_rgl+7,wreg
  2106  001E94  0101               	movlb	(_rgl+8) shr (0+8)
  2107  001E96  61FD               	cpfslt	(_rgl+8)& (0+255),b
  2108  001E98  0012               	return	
  2109  001E9A  C1FC  F1FD         	movff	_rgl+7,_rgl+8
  2110                           ;rgl.c: 719: return;
  2111  001E9E  0012               	return	
  2112                           ;rgl.c: 720: }
  2113  001EA0                     __end_of_ModPruCW2:
  2114                           ;rgl.c: 988: void IncMaxCW2(void)
  2115                           ;rgl.c: 989: {
  2116  001EA0                     _IncMaxCW2:
  2117  000000                     
  2118                           ;rgl.c: 990: static unsigned char m,n;
  2119  001EA0  0101               	movlb	_rgl shr (0+8)	;volatile
  2120  001EA2  A5F5               	btfss	_rgl& (0+255),2,b	;volatile
  2121  001EA4  D014               	goto	l140
  2122                           ;rgl.c: 997: {
  2123  001EA6  C277  FFE8         	movff	_PWM+26,wreg
  2124  001EAA  0102               	movlb	(_PWM+29) shr (0+8)
  2125  001EAC  617A               	cpfslt	(_PWM+29)& (0+255),b
  2126  001EAE  D007               	goto	l141
  2127                           ;rgl.c: 999: {
  2128  001EB0  C1FD  FFE8         	movff	_rgl+8,wreg
  2129  001EB4  617A               	cpfslt	(_PWM+29)& (0+255),b
  2130  001EB6  0012               	return	
  2131  001EB8  C27A  F1FD         	movff	_PWM+29,_rgl+8
  2132                           ;rgl.c: 1001: }
  2133  001EBC  0012               	return	
  2134  001EBE                     l141:
  2135                           ;rgl.c: 1002: else
  2136  001EBE  C1FD  FFE8         	movff	_rgl+8,wreg
  2137  001EC2  0102               	movlb	(_PWM+26) shr (0+8)
  2138  001EC4  6177               	cpfslt	(_PWM+26)& (0+255),b
  2139  001EC6  0012               	return	
  2140  001EC8  C277  F1FD         	movff	_PWM+26,_rgl+8
  2141                           ;rgl.c: 1005: }
  2142  001ECC  0012               	return	
  2143  001ECE                     l140:
  2144                           ;rgl.c: 1007: }
  2145  001ECE  0E00               	movlw	0
  2146  001ED0  EC82  F016         	call	_Tnizsza
  2147  001ED4  E201 D0AA          	bnc	l145
  2148                           ;rgl.c: 1012: {
  2149  001ED8  0E02               	movlw	2
  2150  001EDA  EC53  F016         	call	_Trosnie
  2151  001EDE  E351               	bnc	l146
  2152  001EE0  0101               	movlb	_rgl shr (0+8)	;volatile
  2153  001EE2  B7F5               	btfsc	_rgl& (0+255),3,b	;volatile
  2154  001EE4  D04E               	goto	l146
  2155                           ;rgl.c: 1014: {
  2156  001EE6  0101               	movlb	_rgl shr (0+8)	;volatile
  2157  001EE8  87F5               	bsf	_rgl& (0+255),3,b	;volatile
  2158                           ;rgl.c: 1016: k=5;
  2159  001EEA  0E05               	movlw	5
  2160  001EEC  6ED9               	movwf	fsr2l,c
  2161                           ;rgl.c: 1017: if(k>1||wspInc0>=1)
  2162                           ;rgl.c: 1018: {
  2163  001EEE  CFD9 F000          	movff	fsr2l,btemp
  2164  001EF2  ECF6  F04B         	call	abtoft
  2165  001EF6  C093  F003         	movff	_wspInc0,btemp+3
  2166  001EFA  C094  F004         	movff	_wspInc0+1,btemp+4
  2167  001EFE  C095  F005         	movff	_wspInc0+2,btemp+5
  2168  001F02  ECFF  F048         	call	ftmul
  2169  001F06  EC10  F04B         	call	fttol
  2170  001F0A  5000               	movf	btemp,w,c
  2171  001F0C  6ED9               	movwf	fsr2l,c
  2172                           ;rgl.c: 1020: }
  2173  001F0E  C277  FFE8         	movff	_PWM+26,wreg
  2174  001F12  0102               	movlb	(_PWM+29) shr (0+8)
  2175  001F14  617A               	cpfslt	(_PWM+29)& (0+255),b
  2176  001F16  D019               	goto	l148
  2177                           ;rgl.c: 1022: {
  2178  001F18  C1FC  FFE8         	movff	_rgl+7,wreg
  2179  001F1C  24D9               	addwf	fsr2l,w,c
  2180  001F1E  6E02               	movwf	btemp+2,c
  2181  001F20  6A03               	clrf	btemp+3,c
  2182  001F22  B0D8               	btfsc	status,0,c
  2183  001F24  2A03               	incf	btemp+3,f,c
  2184  001F26  BED9               	btfsc	fsr2l,7,c
  2185  001F28  0603               	decf	btemp+3,f,c
  2186  001F2A  C27A  F000         	movff	_PWM+29,btemp
  2187  001F2E  6A01               	clrf	btemp+1,c
  2188  001F30  5001               	movf	btemp+1,w,c
  2189  001F32  0A80               	xorlw	128
  2190  001F34  6E04               	movwf	btemp+4,c
  2191  001F36  5003               	movf	btemp+3,w,c
  2192  001F38  0A80               	xorlw	128
  2193  001F3A  5C04               	subwf	btemp+4,w,c
  2194  001F3C  E102               	bnz	u1435
  2195  001F3E  5002               	movf	btemp+2,w,c
  2196  001F40  5C00               	subwf	btemp,w,c
  2197  001F42                     u1435:
  2198  001F42  E21C               	bc	l152
  2199  001F44  C27A  F1FC         	movff	_PWM+29,_rgl+7
  2200  001F48  D01C               	goto	l146
  2201                           ;rgl.c: 1024: else rgl.srp+=k;
  2202                           ;rgl.c: 1025: }
  2203  001F4A                     l148:
  2204                           ;rgl.c: 1026: else
  2205  001F4A  C1FC  FFE8         	movff	_rgl+7,wreg
  2206  001F4E  24D9               	addwf	fsr2l,w,c
  2207  001F50  6E02               	movwf	btemp+2,c
  2208  001F52  6A03               	clrf	btemp+3,c
  2209  001F54  B0D8               	btfsc	status,0,c
  2210  001F56  2A03               	incf	btemp+3,f,c
  2211  001F58  BED9               	btfsc	fsr2l,7,c
  2212  001F5A  0603               	decf	btemp+3,f,c
  2213  001F5C  C277  F000         	movff	_PWM+26,btemp
  2214  001F60  6A01               	clrf	btemp+1,c
  2215  001F62  5001               	movf	btemp+1,w,c
  2216  001F64  0A80               	xorlw	128
  2217  001F66  6E04               	movwf	btemp+4,c
  2218  001F68  5003               	movf	btemp+3,w,c
  2219  001F6A  0A80               	xorlw	128
  2220  001F6C  5C04               	subwf	btemp+4,w,c
  2221  001F6E  E102               	bnz	u1445
  2222  001F70  5002               	movf	btemp+2,w,c
  2223  001F72  5C00               	subwf	btemp,w,c
  2224  001F74                     u1445:
  2225  001F74  E203               	bc	l152
  2226  001F76  C277  F1FC         	movff	_PWM+26,_rgl+7
  2227  001F7A  D003               	goto	l146
  2228  001F7C                     l152:
  2229                           ;rgl.c: 1029: else rgl.srp+=k;
  2230  001F7C  50D9               	movf	fsr2l,w,c
  2231  001F7E  0101               	movlb	(_rgl+7) shr (0+8)
  2232  001F80  27FC               	addwf	(_rgl+7)& (0+255),f,b
  2233  001F82                     l146:
  2234                           ;rgl.c: 1030: }
  2235  001F82  0E03               	movlw	3
  2236  001F84  EC53  F016         	call	_Trosnie
  2237  001F88  E351               	bnc	l145
  2238  001F8A  0101               	movlb	_rgl shr (0+8)	;volatile
  2239  001F8C  B9F5               	btfsc	_rgl& (0+255),4,b	;volatile
  2240  001F8E  D04E               	goto	l145
  2241                           ;rgl.c: 1033: {
  2242  001F90  0101               	movlb	_rgl shr (0+8)	;volatile
  2243  001F92  89F5               	bsf	_rgl& (0+255),4,b	;volatile
  2244                           ;rgl.c: 1035: k=15;
  2245  001F94  0E0F               	movlw	15
  2246  001F96  6ED9               	movwf	fsr2l,c
  2247                           ;rgl.c: 1036: if(k>1||wspInc0>=1)
  2248                           ;rgl.c: 1037: {
  2249  001F98  CFD9 F000          	movff	fsr2l,btemp
  2250  001F9C  ECF6  F04B         	call	abtoft
  2251  001FA0  C093  F003         	movff	_wspInc0,btemp+3
  2252  001FA4  C094  F004         	movff	_wspInc0+1,btemp+4
  2253  001FA8  C095  F005         	movff	_wspInc0+2,btemp+5
  2254  001FAC  ECFF  F048         	call	ftmul
  2255  001FB0  EC10  F04B         	call	fttol
  2256  001FB4  5000               	movf	btemp,w,c
  2257  001FB6  6ED9               	movwf	fsr2l,c
  2258                           ;rgl.c: 1039: }
  2259  001FB8  C277  FFE8         	movff	_PWM+26,wreg
  2260  001FBC  0102               	movlb	(_PWM+29) shr (0+8)
  2261  001FBE  617A               	cpfslt	(_PWM+29)& (0+255),b
  2262  001FC0  D019               	goto	l156
  2263                           ;rgl.c: 1041: {
  2264  001FC2  C1FC  FFE8         	movff	_rgl+7,wreg
  2265  001FC6  24D9               	addwf	fsr2l,w,c
  2266  001FC8  6E02               	movwf	btemp+2,c
  2267  001FCA  6A03               	clrf	btemp+3,c
  2268  001FCC  B0D8               	btfsc	status,0,c
  2269  001FCE  2A03               	incf	btemp+3,f,c
  2270  001FD0  BED9               	btfsc	fsr2l,7,c
  2271  001FD2  0603               	decf	btemp+3,f,c
  2272  001FD4  C27A  F000         	movff	_PWM+29,btemp
  2273  001FD8  6A01               	clrf	btemp+1,c
  2274  001FDA  5001               	movf	btemp+1,w,c
  2275  001FDC  0A80               	xorlw	128
  2276  001FDE  6E04               	movwf	btemp+4,c
  2277  001FE0  5003               	movf	btemp+3,w,c
  2278  001FE2  0A80               	xorlw	128
  2279  001FE4  5C04               	subwf	btemp+4,w,c
  2280  001FE6  E102               	bnz	u1495
  2281  001FE8  5002               	movf	btemp+2,w,c
  2282  001FEA  5C00               	subwf	btemp,w,c
  2283  001FEC                     u1495:
  2284  001FEC  E21C               	bc	l160
  2285  001FEE  C27A  F1FC         	movff	_PWM+29,_rgl+7
  2286  001FF2  D01C               	goto	l145
  2287                           ;rgl.c: 1043: else rgl.srp+=k;
  2288                           ;rgl.c: 1044: }
  2289  001FF4                     l156:
  2290                           ;rgl.c: 1045: else
  2291  001FF4  C1FC  FFE8         	movff	_rgl+7,wreg
  2292  001FF8  24D9               	addwf	fsr2l,w,c
  2293  001FFA  6E02               	movwf	btemp+2,c
  2294  001FFC  6A03               	clrf	btemp+3,c
  2295  001FFE  B0D8               	btfsc	status,0,c
  2296  002000  2A03               	incf	btemp+3,f,c
  2297  002002  BED9               	btfsc	fsr2l,7,c
  2298  002004  0603               	decf	btemp+3,f,c
  2299  002006  C277  F000         	movff	_PWM+26,btemp
  2300  00200A  6A01               	clrf	btemp+1,c
  2301  00200C  5001               	movf	btemp+1,w,c
  2302  00200E  0A80               	xorlw	128
  2303  002010  6E04               	movwf	btemp+4,c
  2304  002012  5003               	movf	btemp+3,w,c
  2305  002014  0A80               	xorlw	128
  2306  002016  5C04               	subwf	btemp+4,w,c
  2307  002018  E102               	bnz	u1505
  2308  00201A  5002               	movf	btemp+2,w,c
  2309  00201C  5C00               	subwf	btemp,w,c
  2310  00201E                     u1505:
  2311  00201E  E203               	bc	l160
  2312  002020  C277  F1FC         	movff	_PWM+26,_rgl+7
  2313  002024  D003               	goto	l145
  2314  002026                     l160:
  2315                           ;rgl.c: 1048: else rgl.srp+=k;
  2316  002026  50D9               	movf	fsr2l,w,c
  2317  002028  0101               	movlb	(_rgl+7) shr (0+8)
  2318  00202A  27FC               	addwf	(_rgl+7)& (0+255),f,b
  2319  00202C                     l145:
  2320                           ;rgl.c: 1049: }
  2321  00202C  0E00               	movlw	0
  2322  00202E  EC53  F016         	call	_Trosnie
  2323  002032  B0D8               	btfsc	status,0,c
  2324  002034  0012               	return	
  2325                           ;rgl.c: 1054: z=(wspInc1/2.0)/(DtCW.maxPCW-DtCW.
      +                          minPCW);
  2326  002036  C253  FFE8         	movff	_DtCW+5,wreg
  2327  00203A  C254  F000         	movff	_DtCW+6,btemp
  2328  00203E  6A01               	clrf	btemp+1,c
  2329  002040  5E00               	subwf	btemp,f,c
  2330  002042  0E00               	movlw	0
  2331  002044  5A01               	subwfb	btemp+1,f,c
  2332  002046  EC3F  F04C         	call	awtoft
  2333  00204A  C000  F0AE         	movff	btemp,?a_IncMaxCW2+6
  2334  00204E  C001  F0AF         	movff	btemp+1,?a_IncMaxCW2+7
  2335  002052  C002  F0B0         	movff	btemp+2,?a_IncMaxCW2+8
  2336  002056  6A00               	clrf	btemp,c
  2337  002058  6A01               	clrf	btemp+1,c
  2338  00205A  0E40               	movlw	64
  2339  00205C  6E02               	movwf	btemp+2,c
  2340  00205E  C000  F0B1         	movff	btemp,?a_IncMaxCW2+9
  2341  002062  C001  F0B2         	movff	btemp+1,?a_IncMaxCW2+10
  2342  002066  C002  F0B3         	movff	btemp+2,?a_IncMaxCW2+11
  2343  00206A  C096  F000         	movff	_wspInc1,btemp
  2344  00206E  C097  F001         	movff	_wspInc1+1,btemp+1
  2345  002072  C098  F002         	movff	_wspInc1+2,btemp+2
  2346  002076  C0B1  F003         	movff	?a_IncMaxCW2+9,btemp+3
  2347  00207A  C0B2  F004         	movff	?a_IncMaxCW2+10,btemp+4
  2348  00207E  C0B3  F005         	movff	?a_IncMaxCW2+11,btemp+5
  2349  002082  EC8F  F049         	call	ftdiv
  2350  002086  C0AE  F003         	movff	?a_IncMaxCW2+6,btemp+3
  2351  00208A  C0AF  F004         	movff	?a_IncMaxCW2+7,btemp+4
  2352  00208E  C0B0  F005         	movff	?a_IncMaxCW2+8,btemp+5
  2353  002092  EC8F  F049         	call	ftdiv
  2354  002096  C000  F0AB         	movff	btemp,?a_IncMaxCW2+3
  2355  00209A  C001  F0AC         	movff	btemp+1,?a_IncMaxCW2+4
  2356  00209E  C002  F0AD         	movff	btemp+2,?a_IncMaxCW2+5
  2357                           ;rgl.c: 1055: wsp=(wspInc1/2.0)+((DtCW.PCW-DtCW.
      +                          minPCW)*z);
  2358  0020A2  C253  FFE8         	movff	_DtCW+5,wreg
  2359  0020A6  C251  F000         	movff	_DtCW+3,btemp
  2360  0020AA  6A01               	clrf	btemp+1,c
  2361  0020AC  5E00               	subwf	btemp,f,c
  2362  0020AE  0E00               	movlw	0
  2363  0020B0  5A01               	subwfb	btemp+1,f,c
  2364  0020B2  EC3F  F04C         	call	awtoft
  2365  0020B6  C0AB  F003         	movff	?a_IncMaxCW2+3,btemp+3
  2366  0020BA  C0AC  F004         	movff	?a_IncMaxCW2+4,btemp+4
  2367  0020BE  C0AD  F005         	movff	?a_IncMaxCW2+5,btemp+5
  2368  0020C2  ECFF  F048         	call	ftmul
  2369  0020C6  C000  F0AE         	movff	btemp,?a_IncMaxCW2+6
  2370  0020CA  C001  F0AF         	movff	btemp+1,?a_IncMaxCW2+7
  2371  0020CE  C002  F0B0         	movff	btemp+2,?a_IncMaxCW2+8
  2372  0020D2  6A00               	clrf	btemp,c
  2373  0020D4  6A01               	clrf	btemp+1,c
  2374  0020D6  0E40               	movlw	64
  2375  0020D8  6E02               	movwf	btemp+2,c
  2376  0020DA  C000  F0B1         	movff	btemp,?a_IncMaxCW2+9
  2377  0020DE  C001  F0B2         	movff	btemp+1,?a_IncMaxCW2+10
  2378  0020E2  C002  F0B3         	movff	btemp+2,?a_IncMaxCW2+11
  2379  0020E6  C096  F000         	movff	_wspInc1,btemp
  2380  0020EA  C097  F001         	movff	_wspInc1+1,btemp+1
  2381  0020EE  C098  F002         	movff	_wspInc1+2,btemp+2
  2382  0020F2  C0B1  F003         	movff	?a_IncMaxCW2+9,btemp+3
  2383  0020F6  C0B2  F004         	movff	?a_IncMaxCW2+10,btemp+4
  2384  0020FA  C0B3  F005         	movff	?a_IncMaxCW2+11,btemp+5
  2385  0020FE  EC8F  F049         	call	ftdiv
  2386  002102  C0AE  F003         	movff	?a_IncMaxCW2+6,btemp+3
  2387  002106  C0AF  F004         	movff	?a_IncMaxCW2+7,btemp+4
  2388  00210A  C0B0  F005         	movff	?a_IncMaxCW2+8,btemp+5
  2389  00210E  ECE9  F049         	call	ftadd
  2390  002112  C000  F0A8         	movff	btemp,?a_IncMaxCW2
  2391  002116  C001  F0A9         	movff	btemp+1,?a_IncMaxCW2+1
  2392  00211A  C002  F0AA         	movff	btemp+2,?a_IncMaxCW2+2
  2393                           ;rgl.c: 1056: k=5;
  2394  00211E  0E05               	movlw	5
  2395  002120  6ED9               	movwf	fsr2l,c
  2396                           ;rgl.c: 1057: if(k>1||wsp>=1)
  2397                           ;rgl.c: 1058: {
  2398  002122  CFD9 F000          	movff	fsr2l,btemp
  2399  002126  ECF6  F04B         	call	abtoft
  2400  00212A  C0A8  F003         	movff	?a_IncMaxCW2,btemp+3
  2401  00212E  C0A9  F004         	movff	?a_IncMaxCW2+1,btemp+4
  2402  002132  C0AA  F005         	movff	?a_IncMaxCW2+2,btemp+5
  2403  002136  ECFF  F048         	call	ftmul
  2404  00213A  EC10  F04B         	call	fttol
  2405  00213E  5000               	movf	btemp,w,c
  2406  002140  6ED9               	movwf	fsr2l,c
  2407                           ;rgl.c: 1060: }
  2408  002142  C279  F000         	movff	_PWM+28,btemp
  2409  002146  6A01               	clrf	btemp+1,c
  2410  002148  C1FD  FFE8         	movff	_rgl+8,wreg
  2411  00214C  24D9               	addwf	fsr2l,w,c
  2412  00214E  6E02               	movwf	btemp+2,c
  2413  002150  6A03               	clrf	btemp+3,c
  2414  002152  B0D8               	btfsc	status,0,c
  2415  002154  2A03               	incf	btemp+3,f,c
  2416  002156  BED9               	btfsc	fsr2l,7,c
  2417  002158  0603               	decf	btemp+3,f,c
  2418  00215A  5003               	movf	btemp+3,w,c
  2419  00215C  0A80               	xorlw	128
  2420  00215E  6E04               	movwf	btemp+4,c
  2421  002160  5001               	movf	btemp+1,w,c
  2422  002162  0A80               	xorlw	128
  2423  002164  5C04               	subwf	btemp+4,w,c
  2424  002166  E102               	bnz	u1525
  2425  002168  5000               	movf	btemp,w,c
  2426  00216A  5C02               	subwf	btemp+2,w,c
  2427  00216C                     u1525:
  2428  00216C  A0D8               	btfss	status,0,c
  2429  00216E  C279  F1FD         	movff	_PWM+28,_rgl+8
  2430                           ;rgl.c: 1063: if(rgl.xmod+k>PWM.MAXPWM) rgl.xmod
      +                          =PWM.MAXPWM;
  2431  002172  C1FD  FFE8         	movff	_rgl+8,wreg
  2432  002176  24D9               	addwf	fsr2l,w,c
  2433  002178  6E02               	movwf	btemp+2,c
  2434  00217A  6A03               	clrf	btemp+3,c
  2435  00217C  B0D8               	btfsc	status,0,c
  2436  00217E  2A03               	incf	btemp+3,f,c
  2437  002180  BED9               	btfsc	fsr2l,7,c
  2438  002182  0603               	decf	btemp+3,f,c
  2439  002184  C27A  F000         	movff	_PWM+29,btemp
  2440  002188  6A01               	clrf	btemp+1,c
  2441  00218A  5001               	movf	btemp+1,w,c
  2442  00218C  0A80               	xorlw	128
  2443  00218E  6E04               	movwf	btemp+4,c
  2444  002190  5003               	movf	btemp+3,w,c
  2445  002192  0A80               	xorlw	128
  2446  002194  5C04               	subwf	btemp+4,w,c
  2447  002196  E102               	bnz	u1535
  2448  002198  5002               	movf	btemp+2,w,c
  2449  00219A  5C00               	subwf	btemp,w,c
  2450  00219C                     u1535:
  2451  00219C  E203               	bc	l165
  2452  00219E  C27A  F1FD         	movff	_PWM+29,_rgl+8
  2453  0021A2  D003               	goto	l166
  2454  0021A4                     l165:
  2455                           ;rgl.c: 1064: else rgl.xmod+=k;
  2456  0021A4  50D9               	movf	fsr2l,w,c
  2457  0021A6  0101               	movlb	(_rgl+8) shr (0+8)
  2458  0021A8  27FD               	addwf	(_rgl+8)& (0+255),f,b
  2459  0021AA                     l166:
  2460                           ;rgl.c: 1065: if(rgl.xmod>PWM.MMAXCW) rgl.xmod=P
      +                          WM.MMAXCW;
  2461  0021AA  C1FD  FFE8         	movff	_rgl+8,wreg
  2462  0021AE  0102               	movlb	(_PWM+26) shr (0+8)
  2463  0021B0  6177               	cpfslt	(_PWM+26)& (0+255),b
  2464  0021B2  0012               	return	
  2465  0021B4  C277  F1FD         	movff	_PWM+26,_rgl+8
  2466                           ;rgl.c: 1066: }
  2467  0021B8  0012               	return	
  2468  0021BA                     __end_of_IncMaxCW2:
  2469                           ;rgl.c: 1069: void ModPrzCW2(void)
  2470                           ;rgl.c: 1070: {
  2471  0021BA                     _ModPrzCW2:
  2472  000000                     
  2473                           ;rgl.c: 1071: volatile unsigned char k;
  2474  0021BA  0E01               	movlw	1
  2475  0021BC  010F               	movlb	_subtim shr (0+8)
  2476  0021BE  652C               	cpfsgt	_subtim& (0+255),b
  2477  0021C0  D05D               	goto	l169
  2478                           ;rgl.c: 1164: {
  2479  0021C2  0E08               	movlw	8
  2480  0021C4  0100               	movlb	__Lparam shr (0+8)
  2481  0021C6  6FA8               	movwf	?a_ModPrzCW2^(__Lparam& (0+65280)),b	;vol
      +                          atile
  2482                           ;rgl.c: 1166: subtim=0;
  2483  0021C8  010F               	movlb	_subtim shr (0+8)
  2484  0021CA  6B2C               	clrf	_subtim& (0+255),b
  2485                           ;rgl.c: 1168: if(rgl.nmod)
  2486  0021CC  0101               	movlb	_rgl shr (0+8)	;volatile
  2487  0021CE  ABF5               	btfss	_rgl& (0+255),5,b	;volatile
  2488  0021D0  D055               	goto	l169
  2489                           ;rgl.c: 1169: {
  2490  0021D2  0E01               	movlw	1
  2491  0021D4  0100               	movlb	__Lparam shr (0+8)
  2492  0021D6  65A8               	cpfsgt	?a_ModPrzCW2^(__Lparam& (0+65280)),b	;vo
      +                          latile
  2493  0021D8  D001               	goto	u1571
  2494  0021DA  D00E               	goto	u1590
  2495  0021DC                     u1571:
  2496  0021DC  C0A5  F003         	movff	_wspSUP0,btemp+3
  2497  0021E0  C0A6  F004         	movff	_wspSUP0+1,btemp+4
  2498  0021E4  C0A7  F005         	movff	_wspSUP0+2,btemp+5
  2499  0021E8  6A00               	clrf	btemp,c
  2500  0021EA  0E80               	movlw	128
  2501  0021EC  6E01               	movwf	btemp+1,c
  2502  0021EE  0E3F               	movlw	63
  2503  0021F0  6E02               	movwf	btemp+2,c
  2504  0021F2  EC55  F04B         	call	ftcmp
  2505  0021F6  E211               	bc	l171
  2506  0021F8                     u1590:
  2507                           ;rgl.c: 1172: {
  2508  0021F8  C0A8  F000         	movff	?a_ModPrzCW2,btemp	;volatile
  2509  0021FC  EC01  F04C         	call	lbtoft
  2510  002200  C0A5  F003         	movff	_wspSUP0,btemp+3
  2511  002204  C0A6  F004         	movff	_wspSUP0+1,btemp+4
  2512  002208  C0A7  F005         	movff	_wspSUP0+2,btemp+5
  2513  00220C  ECFF  F048         	call	ftmul
  2514  002210  EC10  F04B         	call	fttol
  2515  002214  5000               	movf	btemp,w,c
  2516  002216  0100               	movlb	__Lparam shr (0+8)
  2517  002218  6FA8               	movwf	?a_ModPrzCW2^(__Lparam& (0+65280)),b	;vol
      +                          atile
  2518  00221A                     l171:
  2519                           ;rgl.c: 1174: }
  2520  00221A  C277  FFE8         	movff	_PWM+26,wreg
  2521  00221E  0102               	movlb	(_PWM+29) shr (0+8)
  2522  002220  617A               	cpfslt	(_PWM+29)& (0+255),b
  2523  002222  D007               	goto	l172
  2524                           ;rgl.c: 1176: {
  2525  002224  C1FC  FFE8         	movff	_rgl+7,wreg
  2526  002228  617A               	cpfslt	(_PWM+29)& (0+255),b
  2527  00222A  D00A               	goto	l174
  2528  00222C  C27A  F1FC         	movff	_PWM+29,_rgl+7
  2529                           ;rgl.c: 1178: }
  2530  002230  D007               	goto	l174
  2531  002232                     l172:
  2532                           ;rgl.c: 1179: else
  2533  002232  C1FC  FFE8         	movff	_rgl+7,wreg
  2534  002236  0102               	movlb	(_PWM+26) shr (0+8)
  2535  002238  6177               	cpfslt	(_PWM+26)& (0+255),b
  2536  00223A  D002               	goto	l174
  2537  00223C  C277  F1FC         	movff	_PWM+26,_rgl+7
  2538  002240                     l174:
  2539                           ;rgl.c: 1182: }
  2540  002240  C279  F000         	movff	_PWM+28,btemp
  2541  002244  6A01               	clrf	btemp+1,c
  2542  002246  0100               	movlb	__Lparam shr (0+8)
  2543  002248  51A8               	movf	?a_ModPrzCW2^(__Lparam& (0+65280)),w	;vola
      +                          tile
  2544  00224A  C1FC  F002         	movff	_rgl+7,btemp+2
  2545  00224E  6A03               	clrf	btemp+3,c
  2546  002250  5E02               	subwf	btemp+2,f,c
  2547  002252  0E00               	movlw	0
  2548  002254  5A03               	subwfb	btemp+3,f,c
  2549  002256  5003               	movf	btemp+3,w,c
  2550  002258  0A80               	xorlw	128
  2551  00225A  6E04               	movwf	btemp+4,c
  2552  00225C  5001               	movf	btemp+1,w,c
  2553  00225E  0A80               	xorlw	128
  2554  002260  5C04               	subwf	btemp+4,w,c
  2555  002262  E102               	bnz	u1635
  2556  002264  5000               	movf	btemp,w,c
  2557  002266  5C02               	subwf	btemp+2,w,c
  2558  002268                     u1635:
  2559  002268  E203               	bc	l176
  2560  00226A  C279  F1FC         	movff	_PWM+28,_rgl+7
  2561  00226E  D006               	goto	l169
  2562  002270                     l176:
  2563                           ;rgl.c: 1184: else rgl.srp=rgl.srp-k;
  2564  002270  0100               	movlb	__Lparam shr (0+8)
  2565  002272  51A8               	movf	?a_ModPrzCW2^(__Lparam& (0+65280)),w	;vola
      +                          tile
  2566  002274  0101               	movlb	(_rgl+7) shr (0+8)
  2567  002276  5DFC               	subwf	(_rgl+7)& (0+255),w,b
  2568  002278  CFE8 F1FC          	movff	wreg,_rgl+7
  2569  00227C                     l169:
  2570                           ;rgl.c: 1185: }
  2571  00227C  0101               	movlb	_rgl shr (0+8)	;volatile
  2572                           ;rgl.c: 1190: {
  2573  00227E  0E00               	movlw	0
  2574  002280  BBF5               	btfsc	_rgl& (0+255),5,b	;volatile
  2575  002282  D00E               	goto	L26
  2576  002284  EC60  F016         	call	_Tmaleje
  2577  002288  B0D8               	btfsc	status,0,c
  2578  00228A  0012               	return	
  2579                           ;rgl.c: 1192: {
  2580  00228C  0E0A               	movlw	10
  2581  00228E  EC8F  F016         	call	_Twyzsza
  2582  002292  A0D8               	btfss	status,0,c
  2583  002294  0012               	return	
  2584                           ;rgl.c: 1194: {
  2585  002296  0101               	movlb	_rgl shr (0+8)	;volatile
  2586  002298  8BF5               	bsf	_rgl& (0+255),5,b	;volatile
  2587                           ;rgl.c: 1196: subtim=0;
  2588  00229A  010F               	movlb	_subtim shr (0+8)
  2589  00229C  6B2C               	clrf	_subtim& (0+255),b
  2590                           ;rgl.c: 1197: return;
  2591  00229E  0012               	return	
  2592                           ;rgl.c: 1199: else return;
  2593                           ;rgl.c: 1201: else return;
  2594                           ;rgl.c: 1203: else
  2595  0022A0                     L26:
  2596  0022A0  EC60  F016         	call	_Tmaleje
  2597  0022A4  A0D8               	btfss	status,0,c
  2598  0022A6  EC7B  F016         	call	_Tstoi	;wreg free
  2599  0022AA  E306               	bnc	l183
  2600  0022AC  0E09               	movlw	9
  2601  0022AE  EC8F  F016         	call	_Twyzsza
  2602  0022B2  E202               	bc	l183
  2603                           ;rgl.c: 1206: {
  2604  0022B4  0101               	movlb	_rgl shr (0+8)	;volatile
  2605  0022B6  9BF5               	bcf	_rgl& (0+255),5,b	;volatile
  2606  0022B8                     l183:
  2607                           ;rgl.c: 1208: }
  2608  0022B8  010F               	movlb	F1637 shr (0+8)
  2609  0022BA  2B12               	incf	F1637& (0+255),f,b
  2610                           ;rgl.c: 1211: }
  2611  0022BC  0C01               	retlw	1
  2612  0022BE                     __end_of_ModPrzCW2:
  2613                           ;rgl.c: 1332: void SetPWM_CW(void)
  2614                           ;rgl.c: 1333: {
  2615  0022BE                     _SetPWM_CW:
  2616  000000                     
  2617                           ;rgl.c: 1334: if(!rgl.nmod)
  2618  0022BE  0101               	movlb	_rgl shr (0+8)	;volatile
  2619  0022C0  BBF5               	btfsc	_rgl& (0+255),5,b	;volatile
  2620  0022C2  D011               	goto	l186
  2621  0022C4                     L36:
  2622                           ;rgl.c: 1335: {
  2623  0022C4  C279  FFE8         	movff	_PWM+28,wreg
  2624  0022C8  61FE               	cpfslt	(_rgl+9)& (0+255),b
  2625  0022CA  D002               	goto	l187
  2626  0022CC  C279  F1FE         	movff	_PWM+28,_rgl+9
  2627  0022D0                     l187:
  2628                           ;rgl.c: 1337: if(rgl.tmp_pwm>PWM.MAXPWM) rgl.tmp
      +                          _pwm=PWM.MAXPWM;
  2629  0022D0  C1FE  FFE8         	movff	_rgl+9,wreg
  2630  0022D4  0102               	movlb	(_PWM+29) shr (0+8)
  2631  0022D6  617A               	cpfslt	(_PWM+29)& (0+255),b
  2632  0022D8  D002               	goto	l188
  2633  0022DA  C27A  F1FE         	movff	_PWM+29,_rgl+9
  2634  0022DE                     l188:
  2635                           ;rgl.c: 1338: WritePWM(rgl.tmp_pwm);
  2636  0022DE  C1FE  FFE8         	movff	_rgl+9,wreg
  2637  0022E2  EFB1  F045         	goto	_WritePWM
  2638                           ;rgl.c: 1339: }
  2639  0022E6                     l186:
  2640                           ;rgl.c: 1340: else
  2641  0022E6  0E05               	movlw	5
  2642  0022E8  C279  F002         	movff	_PWM+28,btemp+2
  2643  0022EC  6A03               	clrf	btemp+3,c
  2644  0022EE  2602               	addwf	btemp+2,f,c
  2645  0022F0  0E00               	movlw	0
  2646  0022F2  2203               	addwfc	btemp+3,f,c
  2647  0022F4  C1FE  F000         	movff	_rgl+9,btemp
  2648  0022F8  6A01               	clrf	btemp+1,c
  2649  0022FA  5001               	movf	btemp+1,w,c
  2650  0022FC  0A80               	xorlw	128
  2651  0022FE  6E04               	movwf	btemp+4,c
  2652  002300  5003               	movf	btemp+3,w,c
  2653  002302  0A80               	xorlw	128
  2654  002304  5C04               	subwf	btemp+4,w,c
  2655  002306  E102               	bnz	u1755
  2656  002308  5002               	movf	btemp+2,w,c
  2657  00230A  5C00               	subwf	btemp,w,c
  2658  00230C                     u1755:
  2659  00230C  E201               	bc	l190
  2660  00230E  D031               	goto	L32
  2661                           ;rgl.c: 1343: {
  2662                           ;rgl.c: 1345: }
  2663  002310                     l190:
  2664                           ;rgl.c: 1346: else
  2665  002310  C1FE  F000         	movff	_rgl+9,btemp
  2666  002314  6A01               	clrf	btemp+1,c
  2667  002316  0E05               	movlw	5
  2668  002318  C279  F002         	movff	_PWM+28,btemp+2
  2669  00231C  6A03               	clrf	btemp+3,c
  2670  00231E  2602               	addwf	btemp+2,f,c
  2671  002320  0E00               	movlw	0
  2672  002322  2203               	addwfc	btemp+3,f,c
  2673  002324  5003               	movf	btemp+3,w,c
  2674  002326  0A80               	xorlw	128
  2675  002328  6E04               	movwf	btemp+4,c
  2676  00232A  5001               	movf	btemp+1,w,c
  2677  00232C  0A80               	xorlw	128
  2678  00232E  5C04               	subwf	btemp+4,w,c
  2679  002330  E102               	bnz	u1765
  2680  002332                     L33:
  2681  002332  5000               	movf	btemp,w,c
  2682  002334  5C02               	subwf	btemp+2,w,c
  2683  002336                     u1815:
  2684  002336                     u1765:
  2685  002336  B0D8               	btfsc	status,0,c
  2686  002338  0012               	return	
  2687                           ;rgl.c: 1349: {
  2688  00233A  C279  FFE8         	movff	_PWM+28,wreg
  2689  00233E  0F05               	addlw	5
  2690  002340  EFB1  F045         	goto	_WritePWM
  2691                           ;rgl.c: 1351: }
  2692  002344                     __end_of_SetPWM_CW:
  2693                           ;rgl.c: 1356: void PropCO2(void)
  2694                           ;rgl.c: 1357: {
  2695  002344                     _PropCO2:
  2696  000000                     
  2697                           ;rgl.c: 1358: if(!rgl.nmod)
  2698  002344  0101               	movlb	_rgl shr (0+8)	;volatile
  2699  002346  ABF5               	btfss	_rgl& (0+255),5,b	;volatile
  2700  002348  D7BD               	goto	L36
  2701                           ;rgl.c: 1359: {
  2702                           ;rgl.c: 1361: if(rgl.tmp_pwm>PWM.MAXPWM) rgl.tmp
      +                          _pwm=PWM.MAXPWM;
  2703                           ;rgl.c: 1362: WritePWM(rgl.tmp_pwm);
  2704                           ;rgl.c: 1363: }
  2705                           ;rgl.c: 1364: else
  2706  00234A  0E05               	movlw	5
  2707  00234C  C279  F002         	movff	_PWM+28,btemp+2
  2708  002350  6A03               	clrf	btemp+3,c
  2709  002352  2602               	addwf	btemp+2,f,c
  2710  002354  0E00               	movlw	0
  2711  002356  2203               	addwfc	btemp+3,f,c
  2712  002358  C1FE  F000         	movff	_rgl+9,btemp
  2713  00235C  6A01               	clrf	btemp+1,c
  2714  00235E  5001               	movf	btemp+1,w,c
  2715  002360  0A80               	xorlw	128
  2716  002362  6E04               	movwf	btemp+4,c
  2717  002364  5003               	movf	btemp+3,w,c
  2718  002366  0A80               	xorlw	128
  2719  002368  5C04               	subwf	btemp+4,w,c
  2720  00236A  E102               	bnz	u1805
  2721  00236C  5002               	movf	btemp+2,w,c
  2722  00236E  5C00               	subwf	btemp,w,c
  2723  002370                     u1805:
  2724  002370  E204               	bc	l198
  2725  002372                     L32:
  2726                           ;rgl.c: 1367: {
  2727  002372  C279  FFE8         	movff	_PWM+28,wreg
  2728  002376  EFB1  F045         	goto	_WritePWM
  2729                           ;rgl.c: 1369: }
  2730  00237A                     l198:
  2731                           ;rgl.c: 1370: else
  2732  00237A  C1FE  F000         	movff	_rgl+9,btemp
  2733  00237E  6A01               	clrf	btemp+1,c
  2734  002380  0E05               	movlw	5
  2735  002382  C279  F002         	movff	_PWM+28,btemp+2
  2736  002386  6A03               	clrf	btemp+3,c
  2737  002388  2602               	addwf	btemp+2,f,c
  2738  00238A  0E00               	movlw	0
  2739  00238C  2203               	addwfc	btemp+3,f,c
  2740  00238E  5003               	movf	btemp+3,w,c
  2741  002390  0A80               	xorlw	128
  2742  002392  6E04               	movwf	btemp+4,c
  2743  002394  5001               	movf	btemp+1,w,c
  2744  002396  0A80               	xorlw	128
  2745  002398  5C04               	subwf	btemp+4,w,c
  2746  00239A  E1CD               	bnz	u1815
  2747  00239C  D7CA               	goto	L33
  2748                           ;rgl.c: 1373: {
  2749                           ;rgl.c: 1375: }
  2750  00239E                     __end_of_PropCO2:
  2751                           ;rgl.c: 1386: const unsigned char kdw=1;
  2752                           ;rgl.c: 1387: const unsigned char kup=1;
  2753                           ;rgl.c: 1389: void NewPop_MIN(void)
  2754                           ;rgl.c: 1390: {
  2755  00239E                     _NewPop_MIN:
  2756  000000                     
  2757                           ;rgl.c: 1391: static unsigned char bpv,t1,t2,bw1
      +                          ,bw2;
  2758  00239E  C085  F0AA         	movff	_M+48,?a_NewPop_MIN+2
  2759  0023A2  C086  F0AB         	movff	_M+49,?a_NewPop_MIN+3
  2760                           ;rgl.c: 1396: pv=DtKNF.mmin*100;
  2761  0023A6  C051  FFE8         	movff	_DtKNF+12,wreg
  2762  0023AA  0D64               	mullw	100
  2763  0023AC  CFF3 F0A8          	movff	prodl,?a_NewPop_MIN
  2764  0023B0  CFF4 F0A9          	movff	prodh,?a_NewPop_MIN+1
  2765                           ;rgl.c: 1397: SetNstVNT(DtKNF.mmin);
  2766  0023B4  C051  FFE8         	movff	_DtKNF+12,wreg
  2767  0023B8  0100               	movlb	__Lparam shr (0+8)
  2768  0023BA  6FB2               	movwf	?_SetNstVNT^(__Lparam& (0+65280)),b
  2769  0023BC  6BB3               	clrf	(?_SetNstVNT+1)^(__Lparam& (0+65280)),b
  2770  0023BE  EC2F  F027         	call	_SetNstVNT	;wreg free
  2771                           ;rgl.c: 1399: if(rgl.tmp_pwm<=PWM.MINPWM)
  2772  0023C2  C1FE  FFE8         	movff	_rgl+9,wreg
  2773  0023C6  0102               	movlb	(_PWM+28) shr (0+8)
  2774  0023C8  5D79               	subwf	(_PWM+28)& (0+255),w,b
  2775  0023CA  A0D8               	btfss	status,0,c
  2776  0023CC  0012               	return	
  2777                           ;rgl.c: 1400: {
  2778  0023CE  0E00               	movlw	0
  2779  0023D0  ECB9  F027         	call	_VTmalejacy
  2780  0023D4  0E00               	movlw	0
  2781  0023D6  E240               	bc	L27
  2782  0023D8  EC4E  F027         	call	_Vmaleje
  2783  0023DC  E23C               	bc	l203
  2784                           ;rgl.c: 1403: {
  2785  0023DE  0E3C               	movlw	60
  2786  0023E0  C0A8  F000         	movff	?a_NewPop_MIN,btemp
  2787  0023E4  C0A9  F001         	movff	?a_NewPop_MIN+1,btemp+1
  2788  0023E8  2600               	addwf	btemp,f,c
  2789  0023EA  0E00               	movlw	0
  2790  0023EC  2201               	addwfc	btemp+1,f,c
  2791  0023EE  0100               	movlb	__Lparam shr (0+8)
  2792  0023F0  51AB               	movf	(?a_NewPop_MIN+3)^(__Lparam& (0+65280)),w
  2793  0023F2  5C01               	subwf	btemp+1,w,c
  2794  0023F4  E102               	bnz	u1865
  2795  0023F6  51AA               	movf	(?a_NewPop_MIN+2)^(__Lparam& (0+65280)),w
  2796  0023F8  5C00               	subwf	btemp,w,c
  2797  0023FA                     u1865:
  2798  0023FA  E22D               	bc	l203
  2799                           ;rgl.c: 1405: {
  2800  0023FC  010F               	movlb	F1645 shr (0+8)
  2801  0023FE  6B13               	clrf	F1645& (0+255),b
  2802                           ;rgl.c: 1407: if((v-pv)>100) w=3;
  2803  002400  C0AA  F000         	movff	?a_NewPop_MIN+2,btemp
  2804  002404  C0AB  F001         	movff	?a_NewPop_MIN+3,btemp+1
  2805  002408  0100               	movlb	__Lparam shr (0+8)
  2806  00240A  51A8               	movf	?a_NewPop_MIN^(__Lparam& (0+65280)),w
  2807  00240C  5E00               	subwf	btemp,f,c
  2808  00240E  51A9               	movf	(?a_NewPop_MIN+1)^(__Lparam& (0+65280)),w
  2809  002410  5A01               	subwfb	btemp+1,f,c
  2810  002412  0E00               	movlw	0
  2811  002414  5C01               	subwf	btemp+1,w,c
  2812  002416  0E65               	movlw	101
  2813  002418  B4D8               	btfsc	status,2,c
  2814  00241A  5C00               	subwf	btemp,w,c
  2815  00241C  E302               	bnc	l205
  2816  00241E  0E03               	movlw	3
  2817  002420  D001               	goto	L6
  2818  002422                     l205:
  2819                           ;rgl.c: 1408: else w=6;
  2820  002422  0E06               	movlw	6
  2821  002424                     L6:
  2822  002424  6ED9               	movwf	fsr2l,c
  2823                           ;rgl.c: 1409: if(bw2) w=8;
  2824  002426  010F               	movlb	F1648 shr (0+8)
  2825  002428  5316               	movf	F1648& (0+255),f,b
  2826  00242A  E002               	bz	l207
  2827  00242C  0E08               	movlw	8
  2828  00242E  6ED9               	movwf	fsr2l,c
  2829  002430                     l207:
  2830                           ;rgl.c: 1411: if(++t2>w)
  2831  002430  010F               	movlb	F1646 shr (0+8)
  2832  002432  2B14               	incf	F1646& (0+255),f,b
  2833  002434  CF14  FFE8         	movff	F1646,wreg
  2834  002438  60D9               	cpfslt	fsr2l,c
  2835  00243A  D00D               	goto	l203
  2836                           ;rgl.c: 1412: {
  2837  00243C  6B14               	clrf	F1646& (0+255),b
  2838                           ;rgl.c: 1414: bw1=1;
  2839  00243E  0E01               	movlw	1
  2840  002440  CFE8 FF15          	movff	wreg,F1647
  2841                           ;rgl.c: 1415: bw2=0;
  2842  002444  010F               	movlb	F1648 shr (0+8)
  2843  002446  6B16               	clrf	F1648& (0+255),b
  2844                           ;rgl.c: 1416: if(popMIN>-50) popMIN-=kdw;
  2845  002448  CF26  FFE8         	movff	_popMIN,wreg
  2846  00244C  0A80               	xorlw	128
  2847  00244E  0FB1               	addlw	177
  2848  002450  E302               	bnc	l203
  2849  002452  010F               	movlb	_popMIN shr (0+8)
  2850  002454  0726               	decf	_popMIN& (0+255),f,b
  2851  002456                     l203:
  2852                           ;rgl.c: 1417: }
  2853  002456  0E00               	movlw	0
  2854  002458                     L27:
  2855  002458  ECA3  F027         	call	_VTrosnacy
  2856  00245C  B0D8               	btfsc	status,0,c
  2857  00245E  0012               	return	
  2858  002460  0E00               	movlw	0
  2859  002462  EC37  F027         	call	_Vrosnie
  2860  002466  B0D8               	btfsc	status,0,c
  2861  002468  0012               	return	
  2862                           ;rgl.c: 1422: {
  2863  00246A  0100               	movlb	__Lparam shr (0+8)
  2864  00246C  0EE2               	movlw	226
  2865  00246E  25A8               	addwf	?a_NewPop_MIN^(__Lparam& (0+65280)),w
  2866  002470  6E00               	movwf	btemp,c
  2867  002472  0EFF               	movlw	255
  2868  002474  21A9               	addwfc	(?a_NewPop_MIN+1)^(__Lparam& (0+65280)),
      +                          w
  2869  002476  6E01               	movwf	btemp+1,c
  2870  002478  5001               	movf	btemp+1,w,c
  2871  00247A  5DAB               	subwf	(?a_NewPop_MIN+3)^(__Lparam& (0+65280)),w
  2872  00247C  E102               	bnz	u1945
  2873  00247E  5000               	movf	btemp,w,c
  2874  002480  5DAA               	subwf	(?a_NewPop_MIN+2)^(__Lparam& (0+65280)),w
  2875  002482                     u1945:
  2876  002482  B0D8               	btfsc	status,0,c
  2877  002484  0012               	return	
  2878                           ;rgl.c: 1424: {
  2879  002486  010F               	movlb	F1646 shr (0+8)
  2880  002488  6B14               	clrf	F1646& (0+255),b
  2881                           ;rgl.c: 1426: if((pv-v)>100) w=5;
  2882  00248A  C0A8  F000         	movff	?a_NewPop_MIN,btemp
  2883  00248E  C0A9  F001         	movff	?a_NewPop_MIN+1,btemp+1
  2884  002492  0100               	movlb	__Lparam shr (0+8)
  2885  002494  51AA               	movf	(?a_NewPop_MIN+2)^(__Lparam& (0+65280)),w
  2886  002496  5E00               	subwf	btemp,f,c
  2887  002498  51AB               	movf	(?a_NewPop_MIN+3)^(__Lparam& (0+65280)),w
  2888  00249A  5A01               	subwfb	btemp+1,f,c
  2889  00249C  0E00               	movlw	0
  2890  00249E  5C01               	subwf	btemp+1,w,c
  2891  0024A0  0E65               	movlw	101
  2892  0024A2  B4D8               	btfsc	status,2,c
  2893  0024A4  5C00               	subwf	btemp,w,c
  2894  0024A6  E302               	bnc	l212
  2895  0024A8  0E05               	movlw	5
  2896  0024AA  D001               	goto	L7
  2897  0024AC                     l212:
  2898                           ;rgl.c: 1427: else w=8;
  2899  0024AC  0E08               	movlw	8
  2900  0024AE                     L7:
  2901  0024AE  6ED9               	movwf	fsr2l,c
  2902                           ;rgl.c: 1428: if(bw1) w=10;
  2903  0024B0  010F               	movlb	F1647 shr (0+8)
  2904  0024B2  5315               	movf	F1647& (0+255),f,b
  2905  0024B4  E002               	bz	l214
  2906  0024B6  0E0A               	movlw	10
  2907  0024B8  6ED9               	movwf	fsr2l,c
  2908  0024BA                     l214:
  2909                           ;rgl.c: 1429: if(++t1>w)
  2910  0024BA  010F               	movlb	F1645 shr (0+8)
  2911  0024BC  2B13               	incf	F1645& (0+255),f,b
  2912  0024BE  CF13  FFE8         	movff	F1645,wreg
  2913  0024C2  60D9               	cpfslt	fsr2l,c
  2914  0024C4  0012               	return	
  2915                           ;rgl.c: 1430: {
  2916  0024C6  6B13               	clrf	F1645& (0+255),b
  2917                           ;rgl.c: 1432: bw1=0;
  2918  0024C8  010F               	movlb	F1647 shr (0+8)
  2919  0024CA  6B15               	clrf	F1647& (0+255),b
  2920                           ;rgl.c: 1433: bw2=1;
  2921  0024CC  0E01               	movlw	1
  2922  0024CE  CFE8 FF16          	movff	wreg,F1648
  2923                           ;rgl.c: 1434: if(popMIN<50) popMIN+=kup;
  2924  0024D2  CF26  FFE8         	movff	_popMIN,wreg
  2925  0024D6  0A80               	xorlw	128
  2926  0024D8  0F4E               	addlw	-178
  2927  0024DA  B0D8               	btfsc	status,0,c
  2928  0024DC  0012               	return	
  2929  0024DE  010F               	movlb	_popMIN shr (0+8)
  2930  0024E0  2B26               	incf	_popMIN& (0+255),f,b
  2931                           ;rgl.c: 1435: }
  2932  0024E2  0C01               	retlw	1
  2933  0024E4                     __end_of_NewPop_MIN:
  2934                           ;rgl.c: 1442: void NewPop_MAX_CW(void)
  2935                           ;rgl.c: 1443: {
  2936  0024E4                     _NewPop_MAX_CW:
  2937  000000                     
  2938                           ;rgl.c: 1444: static unsigned char bpv,t1,t2,bw1
      +                          ,bw2;
  2939  0024E4  C085  F0AB         	movff	_M+48,?a_NewPop_MAX_CW+3
  2940  0024E8  C086  F0AC         	movff	_M+49,?a_NewPop_MAX_CW+4
  2941                           ;rgl.c: 1449: ppv=ProcToVNT(DtKNF.mxcw);
  2942  0024EC  C049  FFE8         	movff	_DtKNF+4,wreg
  2943  0024F0  ECEB  F039         	call	_ProcToVNT
  2944  0024F4  0100               	movlb	__Lparam shr (0+8)
  2945  0024F6  6FA8               	movwf	?a_NewPop_MAX_CW^(__Lparam& (0+65280)),b
  2946                           ;rgl.c: 1450: SetNstVNT(ppv);
  2947  0024F8  51A8               	movf	?a_NewPop_MAX_CW^(__Lparam& (0+65280)),w
  2948  0024FA  6FB2               	movwf	?_SetNstVNT^(__Lparam& (0+65280)),b
  2949  0024FC  6BB3               	clrf	(?_SetNstVNT+1)^(__Lparam& (0+65280)),b
  2950  0024FE  EC2F  F027         	call	_SetNstVNT	;wreg free
  2951                           ;rgl.c: 1451: pv=ppv*100;
  2952  002502  0100               	movlb	__Lparam shr (0+8)
  2953  002504  51A8               	movf	?a_NewPop_MAX_CW^(__Lparam& (0+65280)),w
  2954  002506  0D64               	mullw	100
  2955  002508  CFF3 F0A9          	movff	prodl,?a_NewPop_MAX_CW+1
  2956  00250C  CFF4 F0AA          	movff	prodh,?a_NewPop_MAX_CW+2
  2957                           ;rgl.c: 1453: if(rgl.tmp_pwm>=PWM.MAXPWM)
  2958  002510  C27A  FFE8         	movff	_PWM+29,wreg
  2959  002514  0101               	movlb	(_rgl+9) shr (0+8)
  2960  002516  5DFE               	subwf	(_rgl+9)& (0+255),w,b
  2961  002518  A0D8               	btfss	status,0,c
  2962  00251A  0012               	return	
  2963                           ;rgl.c: 1454: {
  2964  00251C  0E00               	movlw	0
  2965  00251E  ECB9  F027         	call	_VTmalejacy
  2966  002522  0E00               	movlw	0
  2967  002524  E240               	bc	L28
  2968  002526  EC4E  F027         	call	_Vmaleje
  2969  00252A  E23C               	bc	l219
  2970                           ;rgl.c: 1457: {
  2971  00252C  0E3C               	movlw	60
  2972  00252E  C0A9  F000         	movff	?a_NewPop_MAX_CW+1,btemp
  2973  002532  C0AA  F001         	movff	?a_NewPop_MAX_CW+2,btemp+1
  2974  002536  2600               	addwf	btemp,f,c
  2975  002538  0E00               	movlw	0
  2976  00253A  2201               	addwfc	btemp+1,f,c
  2977  00253C  0100               	movlb	__Lparam shr (0+8)
  2978  00253E  51AC               	movf	(?a_NewPop_MAX_CW+4)^(__Lparam& (0+65280))
      +                          ,w
  2979  002540  5C01               	subwf	btemp+1,w,c
  2980  002542  E102               	bnz	u2035
  2981  002544  51AB               	movf	(?a_NewPop_MAX_CW+3)^(__Lparam& (0+65280))
      +                          ,w
  2982  002546  5C00               	subwf	btemp,w,c
  2983  002548                     u2035:
  2984  002548  E22D               	bc	l219
  2985                           ;rgl.c: 1459: {
  2986  00254A  010F               	movlb	F1654 shr (0+8)
  2987  00254C  6B17               	clrf	F1654& (0+255),b
  2988                           ;rgl.c: 1461: if((v-pv)>100) w=3;
  2989  00254E  C0AB  F000         	movff	?a_NewPop_MAX_CW+3,btemp
  2990  002552  C0AC  F001         	movff	?a_NewPop_MAX_CW+4,btemp+1
  2991  002556  0100               	movlb	__Lparam shr (0+8)
  2992  002558  51A9               	movf	(?a_NewPop_MAX_CW+1)^(__Lparam& (0+65280))
      +                          ,w
  2993  00255A  5E00               	subwf	btemp,f,c
  2994  00255C  51AA               	movf	(?a_NewPop_MAX_CW+2)^(__Lparam& (0+65280))
      +                          ,w
  2995  00255E  5A01               	subwfb	btemp+1,f,c
  2996  002560  0E00               	movlw	0
  2997  002562  5C01               	subwf	btemp+1,w,c
  2998  002564  0E65               	movlw	101
  2999  002566  B4D8               	btfsc	status,2,c
  3000  002568  5C00               	subwf	btemp,w,c
  3001  00256A  E302               	bnc	l221
  3002  00256C  0E03               	movlw	3
  3003  00256E  D001               	goto	L8
  3004  002570                     l221:
  3005                           ;rgl.c: 1462: else w=6;
  3006  002570  0E06               	movlw	6
  3007  002572                     L8:
  3008  002572  6ED9               	movwf	fsr2l,c
  3009                           ;rgl.c: 1463: if(bw2) w=8;
  3010  002574  010F               	movlb	F1657 shr (0+8)
  3011  002576  531A               	movf	F1657& (0+255),f,b
  3012  002578  E002               	bz	l223
  3013  00257A  0E08               	movlw	8
  3014  00257C  6ED9               	movwf	fsr2l,c
  3015  00257E                     l223:
  3016                           ;rgl.c: 1464: if(++t2>w)
  3017  00257E  010F               	movlb	F1655 shr (0+8)
  3018  002580  2B18               	incf	F1655& (0+255),f,b
  3019  002582  CF18  FFE8         	movff	F1655,wreg
  3020  002586  60D9               	cpfslt	fsr2l,c
  3021  002588  D00D               	goto	l219
  3022                           ;rgl.c: 1465: {
  3023  00258A  6B18               	clrf	F1655& (0+255),b
  3024                           ;rgl.c: 1467: bw1=1;
  3025  00258C  0E01               	movlw	1
  3026  00258E  CFE8 FF19          	movff	wreg,F1656
  3027                           ;rgl.c: 1468: bw2=0;
  3028  002592  010F               	movlb	F1657 shr (0+8)
  3029  002594  6B1A               	clrf	F1657& (0+255),b
  3030                           ;rgl.c: 1469: if(popMAXCW>-50) popMAXCW-=kdw;
  3031  002596  CF25  FFE8         	movff	_popMAXCW,wreg
  3032  00259A  0A80               	xorlw	128
  3033  00259C  0FB1               	addlw	177
  3034  00259E  E302               	bnc	l219
  3035  0025A0  010F               	movlb	_popMAXCW shr (0+8)
  3036  0025A2  0725               	decf	_popMAXCW& (0+255),f,b
  3037  0025A4                     l219:
  3038                           ;rgl.c: 1470: }
  3039  0025A4  0E00               	movlw	0
  3040  0025A6                     L28:
  3041  0025A6  ECA3  F027         	call	_VTrosnacy
  3042  0025AA  B0D8               	btfsc	status,0,c
  3043  0025AC  0012               	return	
  3044  0025AE  0E00               	movlw	0
  3045  0025B0  EC37  F027         	call	_Vrosnie
  3046  0025B4  B0D8               	btfsc	status,0,c
  3047  0025B6  0012               	return	
  3048                           ;rgl.c: 1475: {
  3049  0025B8  0100               	movlb	__Lparam shr (0+8)
  3050  0025BA  0EE2               	movlw	226
  3051  0025BC  25A9               	addwf	(?a_NewPop_MAX_CW+1)^(__Lparam& (0+65280)
      +                          ),w
  3052  0025BE  6E00               	movwf	btemp,c
  3053  0025C0  0EFF               	movlw	255
  3054  0025C2  21AA               	addwfc	(?a_NewPop_MAX_CW+2)^(__Lparam& (0+65280
      +                          )),w
  3055  0025C4  6E01               	movwf	btemp+1,c
  3056  0025C6  5001               	movf	btemp+1,w,c
  3057  0025C8  5DAC               	subwf	(?a_NewPop_MAX_CW+4)^(__Lparam& (0+65280)
      +                          ),w
  3058  0025CA  E102               	bnz	u2115
  3059  0025CC  5000               	movf	btemp,w,c
  3060  0025CE  5DAB               	subwf	(?a_NewPop_MAX_CW+3)^(__Lparam& (0+65280)
      +                          ),w
  3061  0025D0                     u2115:
  3062  0025D0  B0D8               	btfsc	status,0,c
  3063  0025D2  0012               	return	
  3064                           ;rgl.c: 1477: {
  3065  0025D4  010F               	movlb	F1655 shr (0+8)
  3066  0025D6  6B18               	clrf	F1655& (0+255),b
  3067                           ;rgl.c: 1479: if((pv-v)>100) w=5;
  3068  0025D8  C0A9  F000         	movff	?a_NewPop_MAX_CW+1,btemp
  3069  0025DC  C0AA  F001         	movff	?a_NewPop_MAX_CW+2,btemp+1
  3070  0025E0  0100               	movlb	__Lparam shr (0+8)
  3071  0025E2  51AB               	movf	(?a_NewPop_MAX_CW+3)^(__Lparam& (0+65280))
      +                          ,w
  3072  0025E4  5E00               	subwf	btemp,f,c
  3073  0025E6  51AC               	movf	(?a_NewPop_MAX_CW+4)^(__Lparam& (0+65280))
      +                          ,w
  3074  0025E8  5A01               	subwfb	btemp+1,f,c
  3075  0025EA  0E00               	movlw	0
  3076  0025EC  5C01               	subwf	btemp+1,w,c
  3077  0025EE  0E65               	movlw	101
  3078  0025F0  B4D8               	btfsc	status,2,c
  3079  0025F2  5C00               	subwf	btemp,w,c
  3080  0025F4  E302               	bnc	l228
  3081  0025F6  0E05               	movlw	5
  3082  0025F8  D001               	goto	L9
  3083  0025FA                     l228:
  3084                           ;rgl.c: 1480: else w=8;
  3085  0025FA  0E08               	movlw	8
  3086  0025FC                     L9:
  3087  0025FC  6ED9               	movwf	fsr2l,c
  3088                           ;rgl.c: 1481: if(bw1) w=10;
  3089  0025FE  010F               	movlb	F1656 shr (0+8)
  3090  002600  5319               	movf	F1656& (0+255),f,b
  3091  002602  E002               	bz	l230
  3092  002604  0E0A               	movlw	10
  3093  002606  6ED9               	movwf	fsr2l,c
  3094  002608                     l230:
  3095                           ;rgl.c: 1482: if(++t1>w)
  3096  002608  010F               	movlb	F1654 shr (0+8)
  3097  00260A  2B17               	incf	F1654& (0+255),f,b
  3098  00260C  CF17  FFE8         	movff	F1654,wreg
  3099  002610  60D9               	cpfslt	fsr2l,c
  3100  002612  0012               	return	
  3101                           ;rgl.c: 1483: {
  3102  002614  6B17               	clrf	F1654& (0+255),b
  3103                           ;rgl.c: 1485: bw1=0;
  3104  002616  010F               	movlb	F1656 shr (0+8)
  3105  002618  6B19               	clrf	F1656& (0+255),b
  3106                           ;rgl.c: 1486: bw2=1;
  3107  00261A  0E01               	movlw	1
  3108  00261C  CFE8 FF1A          	movff	wreg,F1657
  3109                           ;rgl.c: 1487: if(popMAXCW<50) popMAXCW+=kup;
  3110  002620  CF25  FFE8         	movff	_popMAXCW,wreg
  3111  002624  0A80               	xorlw	128
  3112  002626  0F4E               	addlw	-178
  3113  002628  B0D8               	btfsc	status,0,c
  3114  00262A  0012               	return	
  3115  00262C  010F               	movlb	_popMAXCW shr (0+8)
  3116  00262E  2B25               	incf	_popMAXCW& (0+255),f,b
  3117                           ;rgl.c: 1488: }
  3118  002630  0C01               	retlw	1
  3119  002632                     __end_of_NewPop_MAX_CW:
  3120                           ;rgl.c: 1495: void NewPop_MAX_CO(void)
  3121                           ;rgl.c: 1496: {
  3122  002632                     _NewPop_MAX_CO:
  3123  000000                     
  3124                           ;rgl.c: 1497: static unsigned char bpv,t1,t2,bw1
      +                          ,bw2;
  3125  002632  C085  F0AB         	movff	_M+48,?a_NewPop_MAX_CO+3
  3126  002636  C086  F0AC         	movff	_M+49,?a_NewPop_MAX_CO+4
  3127                           ;rgl.c: 1502: ppv=ProcToVNT(DtKNF.mxco);
  3128  00263A  C04A  FFE8         	movff	_DtKNF+5,wreg
  3129  00263E  ECEB  F039         	call	_ProcToVNT
  3130  002642  0100               	movlb	__Lparam shr (0+8)
  3131  002644  6FA8               	movwf	?a_NewPop_MAX_CO^(__Lparam& (0+65280)),b
  3132                           ;rgl.c: 1503: SetNstVNT(ppv);
  3133  002646  51A8               	movf	?a_NewPop_MAX_CO^(__Lparam& (0+65280)),w
  3134  002648  6FB2               	movwf	?_SetNstVNT^(__Lparam& (0+65280)),b
  3135  00264A  6BB3               	clrf	(?_SetNstVNT+1)^(__Lparam& (0+65280)),b
  3136  00264C  EC2F  F027         	call	_SetNstVNT	;wreg free
  3137                           ;rgl.c: 1504: pv=ppv*100;
  3138  002650  0100               	movlb	__Lparam shr (0+8)
  3139  002652  51A8               	movf	?a_NewPop_MAX_CO^(__Lparam& (0+65280)),w
  3140  002654  0D64               	mullw	100
  3141  002656  CFF3 F0A9          	movff	prodl,?a_NewPop_MAX_CO+1
  3142  00265A  CFF4 F0AA          	movff	prodh,?a_NewPop_MAX_CO+2
  3143                           ;rgl.c: 1507: if(rgl.tmp_pwm>=PWM.MAXPWM)
  3144  00265E  C27A  FFE8         	movff	_PWM+29,wreg
  3145  002662  0101               	movlb	(_rgl+9) shr (0+8)
  3146  002664  5DFE               	subwf	(_rgl+9)& (0+255),w,b
  3147  002666  A0D8               	btfss	status,0,c
  3148  002668  0012               	return	
  3149                           ;rgl.c: 1508: {
  3150  00266A  0E00               	movlw	0
  3151  00266C  ECB9  F027         	call	_VTmalejacy
  3152  002670  0E00               	movlw	0
  3153  002672  E240               	bc	L29
  3154  002674  EC4E  F027         	call	_Vmaleje
  3155  002678  E23C               	bc	l235
  3156                           ;rgl.c: 1511: {
  3157  00267A  0E3C               	movlw	60
  3158  00267C  C0A9  F000         	movff	?a_NewPop_MAX_CO+1,btemp
  3159  002680  C0AA  F001         	movff	?a_NewPop_MAX_CO+2,btemp+1
  3160  002684  2600               	addwf	btemp,f,c
  3161  002686  0E00               	movlw	0
  3162  002688  2201               	addwfc	btemp+1,f,c
  3163  00268A  0100               	movlb	__Lparam shr (0+8)
  3164  00268C  51AC               	movf	(?a_NewPop_MAX_CO+4)^(__Lparam& (0+65280))
      +                          ,w
  3165  00268E  5C01               	subwf	btemp+1,w,c
  3166  002690  E102               	bnz	u2205
  3167  002692  51AB               	movf	(?a_NewPop_MAX_CO+3)^(__Lparam& (0+65280))
      +                          ,w
  3168  002694  5C00               	subwf	btemp,w,c
  3169  002696                     u2205:
  3170  002696  E22D               	bc	l235
  3171                           ;rgl.c: 1513: {
  3172  002698  010F               	movlb	F1664 shr (0+8)
  3173  00269A  6B1B               	clrf	F1664& (0+255),b
  3174                           ;rgl.c: 1515: if((v-pv)>100) w=3;
  3175  00269C  C0AB  F000         	movff	?a_NewPop_MAX_CO+3,btemp
  3176  0026A0  C0AC  F001         	movff	?a_NewPop_MAX_CO+4,btemp+1
  3177  0026A4  0100               	movlb	__Lparam shr (0+8)
  3178  0026A6  51A9               	movf	(?a_NewPop_MAX_CO+1)^(__Lparam& (0+65280))
      +                          ,w
  3179  0026A8  5E00               	subwf	btemp,f,c
  3180  0026AA  51AA               	movf	(?a_NewPop_MAX_CO+2)^(__Lparam& (0+65280))
      +                          ,w
  3181  0026AC  5A01               	subwfb	btemp+1,f,c
  3182  0026AE  0E00               	movlw	0
  3183  0026B0  5C01               	subwf	btemp+1,w,c
  3184  0026B2  0E65               	movlw	101
  3185  0026B4  B4D8               	btfsc	status,2,c
  3186  0026B6  5C00               	subwf	btemp,w,c
  3187  0026B8  E302               	bnc	l237
  3188  0026BA  0E03               	movlw	3
  3189  0026BC  D001               	goto	L10
  3190  0026BE                     l237:
  3191                           ;rgl.c: 1516: else w=6;
  3192  0026BE  0E06               	movlw	6
  3193  0026C0                     L10:
  3194  0026C0  6ED9               	movwf	fsr2l,c
  3195                           ;rgl.c: 1517: if(bw2) w=8;
  3196  0026C2  010F               	movlb	F1667 shr (0+8)
  3197  0026C4  531E               	movf	F1667& (0+255),f,b
  3198  0026C6  E002               	bz	l239
  3199  0026C8  0E08               	movlw	8
  3200  0026CA  6ED9               	movwf	fsr2l,c
  3201  0026CC                     l239:
  3202                           ;rgl.c: 1518: if(++t2>w)
  3203  0026CC  010F               	movlb	F1665 shr (0+8)
  3204  0026CE  2B1C               	incf	F1665& (0+255),f,b
  3205  0026D0  CF1C  FFE8         	movff	F1665,wreg
  3206  0026D4  60D9               	cpfslt	fsr2l,c
  3207  0026D6  D00D               	goto	l235
  3208                           ;rgl.c: 1519: {
  3209  0026D8  6B1C               	clrf	F1665& (0+255),b
  3210                           ;rgl.c: 1521: bw1=1;
  3211  0026DA  0E01               	movlw	1
  3212  0026DC  CFE8 FF1D          	movff	wreg,F1666
  3213                           ;rgl.c: 1522: bw2=0;
  3214  0026E0  010F               	movlb	F1667 shr (0+8)
  3215  0026E2  6B1E               	clrf	F1667& (0+255),b
  3216                           ;rgl.c: 1523: if(popMAXCO>-50) popMAXCO-=kdw;
  3217  0026E4  CF24  FFE8         	movff	_popMAXCO,wreg
  3218  0026E8  0A80               	xorlw	128
  3219  0026EA  0FB1               	addlw	177
  3220  0026EC  E302               	bnc	l235
  3221  0026EE  010F               	movlb	_popMAXCO shr (0+8)
  3222  0026F0  0724               	decf	_popMAXCO& (0+255),f,b
  3223  0026F2                     l235:
  3224                           ;rgl.c: 1524: }
  3225  0026F2  0E00               	movlw	0
  3226  0026F4                     L29:
  3227  0026F4  ECA3  F027         	call	_VTrosnacy
  3228  0026F8  B0D8               	btfsc	status,0,c
  3229  0026FA  0012               	return	
  3230  0026FC  0E00               	movlw	0
  3231  0026FE  EC37  F027         	call	_Vrosnie
  3232  002702  B0D8               	btfsc	status,0,c
  3233  002704  0012               	return	
  3234                           ;rgl.c: 1529: {
  3235  002706  0100               	movlb	__Lparam shr (0+8)
  3236  002708  0EE2               	movlw	226
  3237  00270A  25A9               	addwf	(?a_NewPop_MAX_CO+1)^(__Lparam& (0+65280)
      +                          ),w
  3238  00270C  6E00               	movwf	btemp,c
  3239  00270E  0EFF               	movlw	255
  3240  002710  21AA               	addwfc	(?a_NewPop_MAX_CO+2)^(__Lparam& (0+65280
      +                          )),w
  3241  002712  6E01               	movwf	btemp+1,c
  3242  002714  5001               	movf	btemp+1,w,c
  3243  002716  5DAC               	subwf	(?a_NewPop_MAX_CO+4)^(__Lparam& (0+65280)
      +                          ),w
  3244  002718  E102               	bnz	u2285
  3245  00271A  5000               	movf	btemp,w,c
  3246  00271C  5DAB               	subwf	(?a_NewPop_MAX_CO+3)^(__Lparam& (0+65280)
      +                          ),w
  3247  00271E                     u2285:
  3248  00271E  B0D8               	btfsc	status,0,c
  3249  002720  0012               	return	
  3250                           ;rgl.c: 1531: {
  3251  002722  010F               	movlb	F1665 shr (0+8)
  3252  002724  6B1C               	clrf	F1665& (0+255),b
  3253                           ;rgl.c: 1533: if((pv-v)>100) w=5;
  3254  002726  C0A9  F000         	movff	?a_NewPop_MAX_CO+1,btemp
  3255  00272A  C0AA  F001         	movff	?a_NewPop_MAX_CO+2,btemp+1
  3256  00272E  0100               	movlb	__Lparam shr (0+8)
  3257  002730  51AB               	movf	(?a_NewPop_MAX_CO+3)^(__Lparam& (0+65280))
      +                          ,w
  3258  002732  5E00               	subwf	btemp,f,c
  3259  002734  51AC               	movf	(?a_NewPop_MAX_CO+4)^(__Lparam& (0+65280))
      +                          ,w
  3260  002736  5A01               	subwfb	btemp+1,f,c
  3261  002738  0E00               	movlw	0
  3262  00273A  5C01               	subwf	btemp+1,w,c
  3263  00273C  0E65               	movlw	101
  3264  00273E  B4D8               	btfsc	status,2,c
  3265  002740  5C00               	subwf	btemp,w,c
  3266  002742  E302               	bnc	l244
  3267  002744  0E05               	movlw	5
  3268  002746  D001               	goto	L11
  3269  002748                     l244:
  3270                           ;rgl.c: 1534: else w=8;
  3271  002748  0E08               	movlw	8
  3272  00274A                     L11:
  3273  00274A  6ED9               	movwf	fsr2l,c
  3274                           ;rgl.c: 1535: if(bw1) w=10;
  3275  00274C  010F               	movlb	F1666 shr (0+8)
  3276  00274E  531D               	movf	F1666& (0+255),f,b
  3277  002750  E002               	bz	l246
  3278  002752  0E0A               	movlw	10
  3279  002754  6ED9               	movwf	fsr2l,c
  3280  002756                     l246:
  3281                           ;rgl.c: 1536: if(++t1>w)
  3282  002756  010F               	movlb	F1664 shr (0+8)
  3283  002758  2B1B               	incf	F1664& (0+255),f,b
  3284  00275A  CF1B  FFE8         	movff	F1664,wreg
  3285  00275E  60D9               	cpfslt	fsr2l,c
  3286  002760  0012               	return	
  3287                           ;rgl.c: 1537: {
  3288  002762  6B1B               	clrf	F1664& (0+255),b
  3289                           ;rgl.c: 1539: bw1=0;
  3290  002764  010F               	movlb	F1666 shr (0+8)
  3291  002766  6B1D               	clrf	F1666& (0+255),b
  3292                           ;rgl.c: 1540: bw2=1;
  3293  002768  0E01               	movlw	1
  3294  00276A  CFE8 FF1E          	movff	wreg,F1667
  3295                           ;rgl.c: 1541: if(popMAXCO<50) popMAXCO+=kup;
  3296  00276E  CF24  FFE8         	movff	_popMAXCO,wreg
  3297  002772  0A80               	xorlw	128
  3298  002774  0F4E               	addlw	-178
  3299  002776  B0D8               	btfsc	status,0,c
  3300  002778  0012               	return	
  3301  00277A  010F               	movlb	_popMAXCO shr (0+8)
  3302  00277C  2B24               	incf	_popMAXCO& (0+255),f,b
  3303                           ;rgl.c: 1542: }
  3304  00277E  0C01               	retlw	1
  3305  002780                     __end_of_NewPop_MAX_CO:
  3306                           ;rgl.c: 1549: void New_MIN(void)
  3307                           ;rgl.c: 1550: {
  3308  002780                     _New_MIN:
  3309  000000                     
  3310                           ;rgl.c: 1551: if(PWM.MINPWM+popMIN<PWM.VLO_PWM) 
      +                          PWM.MINPWM=PWM.VLO_PWM;
  3311  002780  C264  F000         	movff	_PWM+7,btemp
  3312  002784  6A01               	clrf	btemp+1,c
  3313  002786  CF26  F002         	movff	_popMIN,btemp+2
  3314  00278A  C279  FFE8         	movff	_PWM+28,wreg
  3315  00278E  2402               	addwf	btemp+2,w,c
  3316  002790  6EF6               	movwf	tblptrl,c
  3317  002792  6AF7               	clrf	tblptrh,c
  3318  002794  B0D8               	btfsc	status,0,c
  3319  002796  2AF7               	incf	tblptrh,f,c
  3320  002798  BE02               	btfsc	btemp+2,7,c
  3321  00279A  06F7               	decf	tblptrh,f,c
  3322  00279C  50F7               	movf	tblptrh,w,c
  3323  00279E  0A80               	xorlw	128
  3324  0027A0  6E02               	movwf	btemp+2,c
  3325  0027A2  5001               	movf	btemp+1,w,c
  3326  0027A4  0A80               	xorlw	128
  3327  0027A6  5C02               	subwf	btemp+2,w,c
  3328  0027A8  E102               	bnz	u2335
  3329  0027AA  5000               	movf	btemp,w,c
  3330  0027AC  5CF6               	subwf	tblptrl,w,c
  3331  0027AE                     u2335:
  3332  0027AE  E203               	bc	l250
  3333  0027B0  C264  F279         	movff	_PWM+7,_PWM+28
  3334  0027B4  0012               	return	
  3335  0027B6                     l250:
  3336                           ;rgl.c: 1552: else
  3337  0027B6  CF26  F000         	movff	_popMIN,btemp
  3338  0027BA  C279  FFE8         	movff	_PWM+28,wreg
  3339  0027BE  2400               	addwf	btemp,w,c
  3340  0027C0  6E02               	movwf	btemp+2,c
  3341  0027C2  6A03               	clrf	btemp+3,c
  3342  0027C4  B0D8               	btfsc	status,0,c
  3343  0027C6  2A03               	incf	btemp+3,f,c
  3344  0027C8  BE00               	btfsc	btemp,7,c
  3345  0027CA  0603               	decf	btemp+3,f,c
  3346  0027CC  C27A  F000         	movff	_PWM+29,btemp
  3347  0027D0  6A01               	clrf	btemp+1,c
  3348  0027D2  5001               	movf	btemp+1,w,c
  3349  0027D4  0A80               	xorlw	128
  3350  0027D6  6E04               	movwf	btemp+4,c
  3351  0027D8  5003               	movf	btemp+3,w,c
  3352  0027DA  0A80               	xorlw	128
  3353  0027DC  5C04               	subwf	btemp+4,w,c
  3354  0027DE  E102               	bnz	u2345
  3355  0027E0  5002               	movf	btemp+2,w,c
  3356  0027E2  5C00               	subwf	btemp,w,c
  3357  0027E4                     u2345:
  3358  0027E4  E203               	bc	l252
  3359  0027E6  C27A  F279         	movff	_PWM+29,_PWM+28
  3360  0027EA  0012               	return	
  3361  0027EC                     l252:
  3362                           ;rgl.c: 1554: else PWM.MINPWM=PWM.MDMOD+popMIN;
  3363  0027EC  CF26  FFE8         	movff	_popMIN,wreg
  3364  0027F0  0102               	movlb	(_PWM+8) shr (0+8)
  3365  0027F2  2565               	addwf	(_PWM+8)& (0+255),w,b
  3366  0027F4  CFE8 F279          	movff	wreg,_PWM+28
  3367                           ;rgl.c: 1555: }
  3368  0027F8  0012               	return	
  3369  0027FA                     __end_of_New_MIN:
  3370                           ;rgl.c: 1558: void New_MAX_CW(void)
  3371                           ;rgl.c: 1559: {
  3372  0027FA                     _New_MAX_CW:
  3373  000000                     
  3374                           ;rgl.c: 1560: if(PWM.MAXPWM+popMAXCW<PWM.MDMOD) 
      +                          PWM.MAXPWM=PWM.MDMOD;
  3375  0027FA  C265  F000         	movff	_PWM+8,btemp
  3376  0027FE  6A01               	clrf	btemp+1,c
  3377  002800  CF25  F002         	movff	_popMAXCW,btemp+2
  3378  002804  C27A  FFE8         	movff	_PWM+29,wreg
  3379  002808  2402               	addwf	btemp+2,w,c
  3380  00280A  6EF6               	movwf	tblptrl,c
  3381  00280C  6AF7               	clrf	tblptrh,c
  3382  00280E  B0D8               	btfsc	status,0,c
  3383  002810  2AF7               	incf	tblptrh,f,c
  3384  002812  BE02               	btfsc	btemp+2,7,c
  3385  002814  06F7               	decf	tblptrh,f,c
  3386  002816  50F7               	movf	tblptrh,w,c
  3387  002818  0A80               	xorlw	128
  3388  00281A  6E02               	movwf	btemp+2,c
  3389  00281C  5001               	movf	btemp+1,w,c
  3390  00281E  0A80               	xorlw	128
  3391  002820  5C02               	subwf	btemp+2,w,c
  3392  002822  E102               	bnz	u2355
  3393  002824  5000               	movf	btemp,w,c
  3394  002826  5CF6               	subwf	tblptrl,w,c
  3395  002828                     u2355:
  3396  002828  E203               	bc	l255
  3397  00282A  C265  F27A         	movff	_PWM+8,_PWM+29
  3398  00282E  0012               	return	
  3399  002830                     l255:
  3400                           ;rgl.c: 1561: else
  3401  002830  CF25  F000         	movff	_popMAXCW,btemp
  3402  002834  C27A  FFE8         	movff	_PWM+29,wreg
  3403  002838  2400               	addwf	btemp,w,c
  3404  00283A  6E02               	movwf	btemp+2,c
  3405  00283C  6A03               	clrf	btemp+3,c
  3406  00283E  B0D8               	btfsc	status,0,c
  3407  002840  2A03               	incf	btemp+3,f,c
  3408  002842  BE00               	btfsc	btemp,7,c
  3409  002844  0603               	decf	btemp+3,f,c
  3410  002846  5003               	movf	btemp+3,w,c
  3411  002848  0A80               	xorlw	128
  3412  00284A  0F7F               	addlw	-129
  3413  00284C  0E00               	movlw	0
  3414  00284E  B4D8               	btfsc	status,2,c
  3415  002850  5C02               	subwf	btemp+2,w,c
  3416  002852  E304               	bnc	l257
  3417  002854  0EFF               	movlw	255
  3418  002856  CFE8 F27A          	movff	wreg,_PWM+29
  3419  00285A  0CFF               	retlw	255
  3420  00285C                     l257:
  3421                           ;rgl.c: 1563: else PWM.MAXPWM=PWM.MMAXCW+popMAXC
      +                          W;
  3422  00285C  CF25  FFE8         	movff	_popMAXCW,wreg
  3423  002860  0102               	movlb	(_PWM+26) shr (0+8)
  3424  002862  2577               	addwf	(_PWM+26)& (0+255),w,b
  3425  002864  CFE8 F27A          	movff	wreg,_PWM+29
  3426                           ;rgl.c: 1564: }
  3427  002868  0012               	return	
  3428  00286A                     __end_of_New_MAX_CW:
  3429                           ;rgl.c: 1567: void New_MAX_CO(void)
  3430                           ;rgl.c: 1568: {
  3431  00286A                     _New_MAX_CO:
  3432  000000                     
  3433                           ;rgl.c: 1569: if(PWM.MAXPWM+popMAXCO<PWM.MDMOD) 
      +                          PWM.MAXPWM=PWM.MDMOD;
  3434  00286A  C265  F000         	movff	_PWM+8,btemp
  3435  00286E  6A01               	clrf	btemp+1,c
  3436  002870  CF24  F002         	movff	_popMAXCO,btemp+2
  3437  002874  C27A  FFE8         	movff	_PWM+29,wreg
  3438  002878  2402               	addwf	btemp+2,w,c
  3439  00287A  6EF6               	movwf	tblptrl,c
  3440  00287C  6AF7               	clrf	tblptrh,c
  3441  00287E  B0D8               	btfsc	status,0,c
  3442  002880  2AF7               	incf	tblptrh,f,c
  3443  002882  BE02               	btfsc	btemp+2,7,c
  3444  002884  06F7               	decf	tblptrh,f,c
  3445  002886  50F7               	movf	tblptrh,w,c
  3446  002888  0A80               	xorlw	128
  3447  00288A  6E02               	movwf	btemp+2,c
  3448  00288C  5001               	movf	btemp+1,w,c
  3449  00288E  0A80               	xorlw	128
  3450  002890  5C02               	subwf	btemp+2,w,c
  3451  002892  E102               	bnz	u2375
  3452  002894  5000               	movf	btemp,w,c
  3453  002896  5CF6               	subwf	tblptrl,w,c
  3454  002898                     u2375:
  3455  002898  E203               	bc	l260
  3456  00289A  C265  F27A         	movff	_PWM+8,_PWM+29
  3457  00289E  0012               	return	
  3458  0028A0                     l260:
  3459                           ;rgl.c: 1570: else
  3460  0028A0  CF24  F000         	movff	_popMAXCO,btemp
  3461  0028A4  C27A  FFE8         	movff	_PWM+29,wreg
  3462  0028A8  2400               	addwf	btemp,w,c
  3463  0028AA  6E02               	movwf	btemp+2,c
  3464  0028AC  6A03               	clrf	btemp+3,c
  3465  0028AE  B0D8               	btfsc	status,0,c
  3466  0028B0  2A03               	incf	btemp+3,f,c
  3467  0028B2  BE00               	btfsc	btemp,7,c
  3468  0028B4  0603               	decf	btemp+3,f,c
  3469  0028B6  5003               	movf	btemp+3,w,c
  3470  0028B8  0A80               	xorlw	128
  3471  0028BA  0F7F               	addlw	-129
  3472  0028BC  0E00               	movlw	0
  3473  0028BE  B4D8               	btfsc	status,2,c
  3474  0028C0  5C02               	subwf	btemp+2,w,c
  3475  0028C2  E304               	bnc	l262
  3476  0028C4  0EFF               	movlw	255
  3477  0028C6  CFE8 F27A          	movff	wreg,_PWM+29
  3478  0028CA  0CFF               	retlw	255
  3479  0028CC                     l262:
  3480                           ;rgl.c: 1572: else PWM.MAXPWM=PWM.MMAXCO+popMAXC
      +                          O;
  3481  0028CC  CF24  FFE8         	movff	_popMAXCO,wreg
  3482  0028D0  0102               	movlb	(_PWM+25) shr (0+8)
  3483  0028D2  2576               	addwf	(_PWM+25)& (0+255),w,b
  3484  0028D4  CFE8 F27A          	movff	wreg,_PWM+29
  3485                           ;rgl.c: 1573: }
  3486  0028D8  0012               	return	
  3487  0028DA                     __end_of_New_MAX_CO:
  3488                           ;rgl.c: 1581: unsigned char CalkVNTtoPopPWM(unsi
      +                          gned char nst,unsigned char pop);
  3489                           ;rgl.c: 1585: unsigned char New_SMOD(unsigned ch
      +                          ar pv)
  3490                           ;rgl.c: 1586: {
  3491  0028DA                     _New_SMOD:
  3492  000000                     
  3493                           ;_pv stored from wreg
  3494  0028DA  0100               	movlb	__Lparam shr (0+8)
  3495  0028DC  6FAB               	movwf	?a_New_SMOD^(__Lparam& (0+65280)),b
  3496                           ;rgl.c: 1587: unsigned char pw;
  3497  0028DE  D013               	goto	l266
  3498  0028E0                     l267:
  3499                           ;rgl.c: 1591: {
  3500                           ;rgl.c: 1593: {
  3501  0028E0  0100               	movlb	__Lparam shr (0+8)
  3502  0028E2  51AB               	movf	?a_New_SMOD^(__Lparam& (0+65280)),w
  3503  0028E4  ECDA  F039         	call	_CalkVNTtoPWM
  3504  0028E8  D00B               	goto	L13
  3505                           ;rgl.c: 1595: break;
  3506  0028EA                     l268:
  3507                           ;rgl.c: 1596: }
  3508                           ;rgl.c: 1598: {
  3509  0028EA  0E02               	movlw	2
  3510  0028EC  0100               	movlb	__Lparam shr (0+8)
  3511  0028EE  6FB2               	movwf	?_CalkVNTtoPopPWM^(__Lparam& (0+65280)),b
  3512  0028F0  51AB               	movf	?a_New_SMOD^(__Lparam& (0+65280)),w
  3513  0028F2  ECE2  F039         	call	_CalkVNTtoPopPWM
  3514  0028F6  D004               	goto	L13
  3515                           ;rgl.c: 1600: break;
  3516  0028F8                     l269:
  3517                           ;rgl.c: 1601: }
  3518                           ;rgl.c: 1603: {
  3519  0028F8  0100               	movlb	__Lparam shr (0+8)
  3520  0028FA  51AB               	movf	?a_New_SMOD^(__Lparam& (0+65280)),w
  3521  0028FC  ECDA  F039         	call	_CalkVNTtoPWM
  3522  002900                     L13:
  3523  002900  0100               	movlb	__Lparam shr (0+8)
  3524  002902  6FAC               	movwf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),b
  3525                           ;rgl.c: 1605: break;
  3526  002904  D008               	goto	l265
  3527  002906                     l266:
  3528  002906  C053  FFE8         	movff	_DtKNF+14,wreg
  3529  00290A  0A00               	xorlw	0
  3530  00290C  E0E9               	bz	l267
  3531  00290E  0A01               	xorlw	1
  3532  002910  E0EC               	bz	l268
  3533  002912  0A03               	xorlw	3
  3534  002914  E0F1               	bz	l269
  3535  002916                     l265:
  3536                           ;rgl.c: 1608: if(pw+popSMOD<PWM.VLO_PWM) pw=PWM.
      +                          VLO_PWM;
  3537  002916  CF29  F000         	movff	_popSMOD,btemp
  3538  00291A  0100               	movlb	__Lparam shr (0+8)
  3539  00291C  51AC               	movf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),w
  3540  00291E  2400               	addwf	btemp,w,c
  3541  002920  6E02               	movwf	btemp+2,c
  3542  002922  6A03               	clrf	btemp+3,c
  3543  002924  B0D8               	btfsc	status,0,c
  3544  002926  2A03               	incf	btemp+3,f,c
  3545  002928  BE00               	btfsc	btemp,7,c
  3546  00292A  0603               	decf	btemp+3,f,c
  3547  00292C  C264  F000         	movff	_PWM+7,btemp
  3548  002930  6A01               	clrf	btemp+1,c
  3549  002932  5003               	movf	btemp+3,w,c
  3550  002934  0A80               	xorlw	128
  3551  002936  6E04               	movwf	btemp+4,c
  3552  002938  5001               	movf	btemp+1,w,c
  3553  00293A  0A80               	xorlw	128
  3554  00293C  5C04               	subwf	btemp+4,w,c
  3555  00293E  E102               	bnz	u2395
  3556  002940  5000               	movf	btemp,w,c
  3557  002942  5C02               	subwf	btemp+2,w,c
  3558  002944                     u2395:
  3559  002944  E203               	bc	l270
  3560  002946  C264  F0AC         	movff	_PWM+7,?a_New_SMOD+1
  3561  00294A  D01F               	goto	l271
  3562  00294C                     l270:
  3563                           ;rgl.c: 1609: else
  3564  00294C  CF29  F000         	movff	_popSMOD,btemp
  3565  002950  0100               	movlb	__Lparam shr (0+8)
  3566  002952  51AC               	movf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),w
  3567  002954  2400               	addwf	btemp,w,c
  3568  002956  6E02               	movwf	btemp+2,c
  3569  002958  6A03               	clrf	btemp+3,c
  3570  00295A  B0D8               	btfsc	status,0,c
  3571  00295C  2A03               	incf	btemp+3,f,c
  3572  00295E  BE00               	btfsc	btemp,7,c
  3573  002960  0603               	decf	btemp+3,f,c
  3574  002962  C268  F000         	movff	_PWM+11,btemp
  3575  002966  6A01               	clrf	btemp+1,c
  3576  002968  5001               	movf	btemp+1,w,c
  3577  00296A  0A80               	xorlw	128
  3578  00296C  6E04               	movwf	btemp+4,c
  3579  00296E  5003               	movf	btemp+3,w,c
  3580  002970  0A80               	xorlw	128
  3581  002972  5C04               	subwf	btemp+4,w,c
  3582  002974  E102               	bnz	u2405
  3583  002976  5002               	movf	btemp+2,w,c
  3584  002978  5C00               	subwf	btemp,w,c
  3585  00297A                     u2405:
  3586  00297A  E203               	bc	l272
  3587  00297C  C268  F0AC         	movff	_PWM+11,?a_New_SMOD+1
  3588  002980  D004               	goto	l271
  3589  002982                     l272:
  3590                           ;rgl.c: 1611: else pw=pw+popSMOD;
  3591  002982  CF29  FFE8         	movff	_popSMOD,wreg
  3592  002986  0100               	movlb	__Lparam shr (0+8)
  3593  002988  27AC               	addwf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),f,b
  3594  00298A                     l271:
  3595                           ;rgl.c: 1612: return pw;
  3596  00298A  0100               	movlb	__Lparam shr (0+8)
  3597  00298C  51AC               	movf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),w
  3598  00298E  0012               	return	
  3599                           ;rgl.c: 1613: }
  3600  002990                     __end_of_New_SMOD:
  3601                           ;rgl.c: 1617: void NewPop_SMOD(unsigned char ppv
      +                          )
  3602                           ;rgl.c: 1618: {
  3603  002990                     _NewPop_SMOD:
  3604  000000                     
  3605                           ;_ppv stored from wreg
  3606                           ;rgl.c: 1619: unsigned int v,pv;
  3607  002990  CFE8 F000          	movff	wreg,btemp
  3608  002994  6A01               	clrf	btemp+1,c
  3609  002996  C000  F0B2         	movff	btemp,?_SetNstVNT
  3610  00299A  C001  F0B3         	movff	btemp+1,?_SetNstVNT+1
  3611                           ;_ppv stored from wreg
  3612  00299E  0100               	movlb	__Lparam shr (0+8)
  3613  0029A0  6FAD               	movwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          b
  3614  0029A2  EC2F  F027         	call	_SetNstVNT	;wreg free
  3615                           ;rgl.c: 1625: v=M.rVVNT;
  3616  0029A6  C085  F0B0         	movff	_M+48,?a_NewPop_SMOD+5
  3617  0029AA  C086  F0B1         	movff	_M+49,?a_NewPop_SMOD+6
  3618                           ;rgl.c: 1628: switch(DtKNF.rfan)
  3619  0029AE  D013               	goto	l276
  3620  0029B0                     l277:
  3621                           ;rgl.c: 1629: {
  3622                           ;rgl.c: 1631: {
  3623  0029B0  0100               	movlb	__Lparam shr (0+8)
  3624  0029B2  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  3625  0029B4  ECDA  F039         	call	_CalkVNTtoPWM
  3626  0029B8  D00B               	goto	L15
  3627                           ;rgl.c: 1633: break;
  3628  0029BA                     l278:
  3629                           ;rgl.c: 1634: }
  3630                           ;rgl.c: 1636: {
  3631  0029BA  0E02               	movlw	2
  3632  0029BC  0100               	movlb	__Lparam shr (0+8)
  3633  0029BE  6FB2               	movwf	?_CalkVNTtoPopPWM^(__Lparam& (0+65280)),b
  3634  0029C0  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  3635  0029C2  ECE2  F039         	call	_CalkVNTtoPopPWM
  3636  0029C6  D004               	goto	L15
  3637                           ;rgl.c: 1638: break;
  3638  0029C8                     l279:
  3639                           ;rgl.c: 1639: }
  3640                           ;rgl.c: 1641: {
  3641  0029C8  0100               	movlb	__Lparam shr (0+8)
  3642  0029CA  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  3643  0029CC  ECDA  F039         	call	_CalkVNTtoPWM
  3644  0029D0                     L15:
  3645  0029D0  0100               	movlb	__Lparam shr (0+8)
  3646  0029D2  6FAB               	movwf	?a_NewPop_SMOD^(__Lparam& (0+65280)),b
  3647                           ;rgl.c: 1643: break;
  3648  0029D4  D008               	goto	l275
  3649  0029D6                     l276:
  3650  0029D6  C053  FFE8         	movff	_DtKNF+14,wreg
  3651  0029DA  0A00               	xorlw	0
  3652  0029DC  E0E9               	bz	l277
  3653  0029DE  0A01               	xorlw	1
  3654  0029E0  E0EC               	bz	l278
  3655  0029E2  0A03               	xorlw	3
  3656  0029E4  E0F1               	bz	l279
  3657  0029E6                     l275:
  3658                           ;rgl.c: 1647: pv=ppv*100;
  3659  0029E6  0100               	movlb	__Lparam shr (0+8)
  3660  0029E8  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  3661  0029EA  0D64               	mullw	100
  3662  0029EC  CFF3 F0AE          	movff	prodl,?a_NewPop_SMOD+3
  3663  0029F0  CFF4 F0AF          	movff	prodh,?a_NewPop_SMOD+4
  3664                           ;rgl.c: 1650: if(pw<=PWM.MDMOD) mrg=1;
  3665  0029F4  51AB               	movf	?a_NewPop_SMOD^(__Lparam& (0+65280)),w
  3666  0029F6  0102               	movlb	(_PWM+8) shr (0+8)
  3667  0029F8  5D65               	subwf	(_PWM+8)& (0+255),w,b
  3668  0029FA  E303               	bnc	l280
  3669  0029FC  0E01               	movlw	1
  3670  0029FE  0100               	movlb	__Lparam shr (0+8)
  3671  002A00  D006               	goto	L16
  3672  002A02                     l280:
  3673                           ;rgl.c: 1651: else
  3674  002A02  0100               	movlb	__Lparam shr (0+8)
  3675  002A04  C268  FFE8         	movff	_PWM+11,wreg
  3676  002A08  5DAB               	subwf	?a_NewPop_SMOD^(__Lparam& (0+65280)),w
  3677  002A0A  E303               	bnc	l282
  3678  002A0C  0E02               	movlw	2
  3679  002A0E                     L16:
  3680  002A0E  6FAC               	movwf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),
      +                          b
  3681  002A10  D002               	goto	l281
  3682  002A12                     l282:
  3683                           ;rgl.c: 1653: else mrg=0;
  3684  002A12  0100               	movlb	__Lparam shr (0+8)
  3685  002A14  6BAC               	clrf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),b
  3686  002A16                     l281:
  3687                           ;rgl.c: 1656: if(bpv!=ppv)
  3688  002A16  CF1F  FFE8         	movff	F1689,wreg
  3689  002A1A  0100               	movlb	__Lparam shr (0+8)
  3690  002A1C  19AD               	xorwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          w
  3691  002A1E  E05A               	bz	l284
  3692                           ;rgl.c: 1657: {
  3693  002A20  010F               	movlb	F1690 shr (0+8)
  3694  002A22  6B20               	clrf	F1690& (0+255),b
  3695                           ;rgl.c: 1659: t2=0;
  3696  002A24  010F               	movlb	F1691 shr (0+8)
  3697  002A26  6B21               	clrf	F1691& (0+255),b
  3698                           ;rgl.c: 1660: bw1=0;
  3699  002A28  010F               	movlb	F1692 shr (0+8)
  3700  002A2A  6B22               	clrf	F1692& (0+255),b
  3701                           ;rgl.c: 1661: bw2=0;
  3702  002A2C  010F               	movlb	F1693 shr (0+8)
  3703  002A2E  6B23               	clrf	F1693& (0+255),b
  3704                           ;rgl.c: 1663: if(bpv>ppv)
  3705  002A30  CF1F  FFE8         	movff	F1689,wreg
  3706  002A34  0100               	movlb	__Lparam shr (0+8)
  3707  002A36  61AD               	cpfslt	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280))
      +                          ,b
  3708  002A38  D01E               	goto	l285
  3709                           ;rgl.c: 1664: {
  3710  002A3A  CF29  FFE8         	movff	_popSMOD,wreg
  3711  002A3E  0A80               	xorlw	128
  3712  002A40  0F7F               	addlw	-129
  3713  002A42  E30D               	bnc	l286
  3714                           ;rgl.c: 1667: {
  3715  002A44  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  3716  002A46  010F               	movlb	F1689 shr (0+8)
  3717  002A48  5D1F               	subwf	F1689& (0+255),w,b
  3718  002A4A  010F               	movlb	_popSMOD shr (0+8)
  3719  002A4C  5F29               	subwf	_popSMOD& (0+255),f,b
  3720                           ;rgl.c: 1669: if(popSMOD<0) {bw2=1;popSMOD=0;}
  3721  002A4E  CF29  F000         	movff	_popSMOD,btemp
  3722  002A52  AE00               	btfss	btemp,7,c
  3723  002A54  D030               	goto	l290
  3724  002A56                     u2460:
  3725  002A56  0E01               	movlw	1
  3726  002A58  CFE8 FF23          	movff	wreg,F1693
  3727  002A5C  D02A               	goto	L23
  3728                           ;rgl.c: 1670: }
  3729  002A5E                     l286:
  3730                           ;rgl.c: 1671: else
  3731  002A5E  0100               	movlb	__Lparam shr (0+8)
  3732  002A60  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  3733  002A62  010F               	movlb	F1689 shr (0+8)
  3734  002A64  5D1F               	subwf	F1689& (0+255),w,b
  3735  002A66  010F               	movlb	_popSMOD shr (0+8)
  3736  002A68  2729               	addwf	_popSMOD& (0+255),f,b
  3737                           ;rgl.c: 1674: if(popSMOD>0) {bw2=1;popSMOD=0;}
  3738  002A6A  CF29  FFE8         	movff	_popSMOD,wreg
  3739  002A6E  0A80               	xorlw	128
  3740  002A70  0F7F               	addlw	-129
  3741  002A72  E321               	bnc	l290
  3742  002A74  D7F0               	goto	u2460
  3743                           ;rgl.c: 1675: }
  3744  002A76                     l285:
  3745                           ;rgl.c: 1678: else
  3746  002A76  CF29  FFE8         	movff	_popSMOD,wreg
  3747  002A7A  0A80               	xorlw	128
  3748  002A7C  0F7F               	addlw	-129
  3749  002A7E  E30B               	bnc	l291
  3750                           ;rgl.c: 1681: {
  3751  002A80  CF1F  FFE8         	movff	F1689,wreg
  3752  002A84  0100               	movlb	__Lparam shr (0+8)
  3753  002A86  5DAD               	subwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          w
  3754  002A88  010F               	movlb	_popSMOD shr (0+8)
  3755  002A8A  5F29               	subwf	_popSMOD& (0+255),f,b
  3756                           ;rgl.c: 1683: if(popSMOD<0) {bw1=1;popSMOD=0;}
  3757  002A8C  CF29  F000         	movff	_popSMOD,btemp
  3758  002A90  AE00               	btfss	btemp,7,c
  3759  002A92  D011               	goto	l290
  3760  002A94  D00B               	goto	L34
  3761                           ;rgl.c: 1684: }
  3762  002A96                     l291:
  3763                           ;rgl.c: 1685: else
  3764  002A96  CF1F  FFE8         	movff	F1689,wreg
  3765  002A9A  0100               	movlb	__Lparam shr (0+8)
  3766  002A9C  5DAD               	subwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          w
  3767  002A9E  010F               	movlb	_popSMOD shr (0+8)
  3768  002AA0  2729               	addwf	_popSMOD& (0+255),f,b
  3769                           ;rgl.c: 1688: if(popSMOD>0) {bw1=1;popSMOD=0;}
  3770  002AA2  CF29  FFE8         	movff	_popSMOD,wreg
  3771  002AA6  0A80               	xorlw	128
  3772  002AA8  0F7F               	addlw	-129
  3773  002AAA  E305               	bnc	l290
  3774  002AAC                     L34:
  3775  002AAC  0E01               	movlw	1
  3776  002AAE  CFE8 FF22          	movff	wreg,F1692
  3777  002AB2                     L23:
  3778  002AB2  010F               	movlb	_popSMOD shr (0+8)
  3779  002AB4  6B29               	clrf	_popSMOD& (0+255),b
  3780  002AB6                     l290:
  3781                           ;rgl.c: 1689: }
  3782  002AB6  CF29  FFE8         	movff	_popSMOD,wreg
  3783  002ABA  0A80               	xorlw	128
  3784  002ABC  0F7F               	addlw	-129
  3785  002ABE  E302               	bnc	l295
  3786  002AC0  010F               	movlb	_popSMOD shr (0+8)
  3787  002AC2  0729               	decf	_popSMOD& (0+255),f,b
  3788  002AC4                     l295:
  3789                           ;rgl.c: 1692: if(popSMOD<0) popSMOD++;
  3790  002AC4  CF29  F000         	movff	_popSMOD,btemp
  3791  002AC8  AE00               	btfss	btemp,7,c
  3792  002ACA  D002               	goto	l296
  3793  002ACC  010F               	movlb	_popSMOD shr (0+8)
  3794  002ACE  2B29               	incf	_popSMOD& (0+255),f,b
  3795  002AD0                     l296:
  3796                           ;rgl.c: 1693: bpv=ppv;
  3797  002AD0  C0AD  FF1F         	movff	?a_NewPop_SMOD+2,F1689
  3798  002AD4                     l284:
  3799                           ;rgl.c: 1694: }
  3800  002AD4  0E00               	movlw	0
  3801  002AD6  ECB9  F027         	call	_VTmalejacy
  3802  002ADA  0E00               	movlw	0
  3803  002ADC  E265               	bc	L30
  3804  002ADE  EC4E  F027         	call	_Vmaleje
  3805  002AE2  E261               	bc	l297
  3806                           ;rgl.c: 1702: {
  3807  002AE4  0100               	movlb	__Lparam shr (0+8)
  3808  002AE6  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  3809  002AE8  E10E               	bnz	u2581
  3810  002AEA  0E3C               	movlw	60
  3811  002AEC  C0AE  F000         	movff	?a_NewPop_SMOD+3,btemp
  3812  002AF0  C0AF  F001         	movff	?a_NewPop_SMOD+4,btemp+1
  3813  002AF4  2600               	addwf	btemp,f,c
  3814  002AF6  0E00               	movlw	0
  3815  002AF8  2201               	addwfc	btemp+1,f,c
  3816  002AFA  51B1               	movf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),w
  3817  002AFC  5C01               	subwf	btemp+1,w,c
  3818  002AFE  E102               	bnz	u2575
  3819  002B00  51B0               	movf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),w
  3820  002B02  5C00               	subwf	btemp,w,c
  3821  002B04                     u2575:
  3822  002B04  E323               	bnc	u2660
  3823  002B06                     u2581:
  3824  002B06  0100               	movlb	__Lparam shr (0+8)
  3825  002B08  05AC               	decf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  3826  002B0A  E10E               	bnz	u2621
  3827  002B0C  0E3C               	movlw	60
  3828  002B0E  C0AE  F000         	movff	?a_NewPop_SMOD+3,btemp
  3829  002B12  C0AF  F001         	movff	?a_NewPop_SMOD+4,btemp+1
  3830  002B16  2600               	addwf	btemp,f,c
  3831  002B18  0E00               	movlw	0
  3832  002B1A  2201               	addwfc	btemp+1,f,c
  3833  002B1C  5001               	movf	btemp+1,w,c
  3834  002B1E  5DB1               	subwf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),
      +                          w
  3835  002B20  E102               	bnz	u2605
  3836  002B22  5000               	movf	btemp,w,c
  3837  002B24  5DB0               	subwf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),
      +                          w
  3838  002B26                     u2605:
  3839  002B26  E212               	bc	u2660
  3840  002B28                     u2621:
  3841  002B28  0100               	movlb	__Lparam shr (0+8)
  3842  002B2A  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  3843  002B2C  0A02               	xorlw	2
  3844  002B2E  E13B               	bnz	l297
  3845  002B30  0E3C               	movlw	60
  3846  002B32  C0AE  F000         	movff	?a_NewPop_SMOD+3,btemp
  3847  002B36  C0AF  F001         	movff	?a_NewPop_SMOD+4,btemp+1
  3848  002B3A  2600               	addwf	btemp,f,c
  3849  002B3C  0E00               	movlw	0
  3850  002B3E  2201               	addwfc	btemp+1,f,c
  3851  002B40  5001               	movf	btemp+1,w,c
  3852  002B42  5DB1               	subwf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),
      +                          w
  3853  002B44  E102               	bnz	u2645
  3854  002B46  5000               	movf	btemp,w,c
  3855  002B48  5DB0               	subwf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),
      +                          w
  3856  002B4A                     u2645:
  3857  002B4A  E32D               	bnc	l297
  3858  002B4C                     u2660:
  3859                           ;rgl.c: 1704: {
  3860  002B4C  010F               	movlb	F1690 shr (0+8)
  3861  002B4E  6B20               	clrf	F1690& (0+255),b
  3862                           ;rgl.c: 1706: if((v-pv)>100) w=3;
  3863  002B50  C0B0  F000         	movff	?a_NewPop_SMOD+5,btemp
  3864  002B54  C0B1  F001         	movff	?a_NewPop_SMOD+6,btemp+1
  3865  002B58  0100               	movlb	__Lparam shr (0+8)
  3866  002B5A  51AE               	movf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),w
  3867  002B5C  5E00               	subwf	btemp,f,c
  3868  002B5E  51AF               	movf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),w
  3869  002B60  5A01               	subwfb	btemp+1,f,c
  3870  002B62  0E00               	movlw	0
  3871  002B64  5C01               	subwf	btemp+1,w,c
  3872  002B66  0E65               	movlw	101
  3873  002B68  B4D8               	btfsc	status,2,c
  3874  002B6A  5C00               	subwf	btemp,w,c
  3875  002B6C  E302               	bnc	l299
  3876  002B6E  0E03               	movlw	3
  3877  002B70  D001               	goto	L18
  3878  002B72                     l299:
  3879                           ;rgl.c: 1707: else w=6;
  3880  002B72  0E06               	movlw	6
  3881  002B74                     L18:
  3882  002B74  6ED9               	movwf	fsr2l,c
  3883                           ;rgl.c: 1708: if(bw2) w=8;
  3884  002B76  010F               	movlb	F1693 shr (0+8)
  3885  002B78  5323               	movf	F1693& (0+255),f,b
  3886  002B7A  E002               	bz	l301
  3887  002B7C  0E08               	movlw	8
  3888  002B7E  6ED9               	movwf	fsr2l,c
  3889  002B80                     l301:
  3890                           ;rgl.c: 1709: if(++t2>w)
  3891  002B80  010F               	movlb	F1691 shr (0+8)
  3892  002B82  2B21               	incf	F1691& (0+255),f,b
  3893  002B84  CF21  FFE8         	movff	F1691,wreg
  3894  002B88  60D9               	cpfslt	fsr2l,c
  3895  002B8A  D00D               	goto	l297
  3896                           ;rgl.c: 1710: {
  3897  002B8C  6B21               	clrf	F1691& (0+255),b
  3898                           ;rgl.c: 1712: bw1=1;
  3899  002B8E  0E01               	movlw	1
  3900  002B90  CFE8 FF22          	movff	wreg,F1692
  3901                           ;rgl.c: 1713: bw2=0;
  3902  002B94  010F               	movlb	F1693 shr (0+8)
  3903  002B96  6B23               	clrf	F1693& (0+255),b
  3904                           ;rgl.c: 1714: if(popSMOD>-50) popSMOD-=kdw;
  3905  002B98  CF29  FFE8         	movff	_popSMOD,wreg
  3906  002B9C  0A80               	xorlw	128
  3907  002B9E  0FB1               	addlw	177
  3908  002BA0  E302               	bnc	l297
  3909  002BA2  010F               	movlb	_popSMOD shr (0+8)
  3910  002BA4  0729               	decf	_popSMOD& (0+255),f,b
  3911  002BA6                     l297:
  3912                           ;rgl.c: 1715: }
  3913  002BA6  0E00               	movlw	0
  3914  002BA8                     L30:
  3915  002BA8  ECA3  F027         	call	_VTrosnacy
  3916  002BAC  B0D8               	btfsc	status,0,c
  3917  002BAE  0012               	return	
  3918  002BB0  0E00               	movlw	0
  3919  002BB2  EC37  F027         	call	_Vrosnie
  3920  002BB6  B0D8               	btfsc	status,0,c
  3921  002BB8  0012               	return	
  3922                           ;rgl.c: 1721: {
  3923  002BBA  0100               	movlb	__Lparam shr (0+8)
  3924  002BBC  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  3925  002BBE  E10C               	bnz	u2761
  3926  002BC0  0EE2               	movlw	226
  3927  002BC2  25AE               	addwf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),
      +                          w
  3928  002BC4  6E00               	movwf	btemp,c
  3929  002BC6  0EFF               	movlw	255
  3930  002BC8  21AF               	addwfc	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280))
      +                          ,w
  3931  002BCA  6E01               	movwf	btemp+1,c
  3932  002BCC  5001               	movf	btemp+1,w,c
  3933  002BCE  5DB1               	subwf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),
      +                          w
  3934  002BD0  E102               	bnz	u2755
  3935  002BD2  5000               	movf	btemp,w,c
  3936  002BD4  5DB0               	subwf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),
      +                          w
  3937  002BD6                     u2755:
  3938  002BD6  E321               	bnc	u2840
  3939  002BD8                     u2761:
  3940  002BD8  0100               	movlb	__Lparam shr (0+8)
  3941  002BDA  05AC               	decf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  3942  002BDC  E10C               	bnz	u2801
  3943  002BDE  0EE2               	movlw	226
  3944  002BE0  25AE               	addwf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),
      +                          w
  3945  002BE2  6E00               	movwf	btemp,c
  3946  002BE4  0EFF               	movlw	255
  3947  002BE6  21AF               	addwfc	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280))
      +                          ,w
  3948  002BE8  6E01               	movwf	btemp+1,c
  3949  002BEA  51B1               	movf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),w
  3950  002BEC  5C01               	subwf	btemp+1,w,c
  3951  002BEE  E102               	bnz	u2785
  3952  002BF0  51B0               	movf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),w
  3953  002BF2  5C00               	subwf	btemp,w,c
  3954  002BF4                     u2785:
  3955  002BF4  E212               	bc	u2840
  3956  002BF6                     u2801:
  3957  002BF6  0100               	movlb	__Lparam shr (0+8)
  3958  002BF8  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  3959  002BFA  0A02               	xorlw	2
  3960  002BFC  A4D8               	btfss	status,2,c
  3961  002BFE  0012               	return	
  3962  002C00  0EE2               	movlw	226
  3963  002C02  25AE               	addwf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),
      +                          w
  3964  002C04  6E00               	movwf	btemp,c
  3965  002C06  0EFF               	movlw	255
  3966  002C08  21AF               	addwfc	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280))
      +                          ,w
  3967  002C0A  6E01               	movwf	btemp+1,c
  3968  002C0C  51B1               	movf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),w
  3969  002C0E  5C01               	subwf	btemp+1,w,c
  3970  002C10  E102               	bnz	u2825
  3971  002C12  51B0               	movf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),w
  3972  002C14  5C00               	subwf	btemp,w,c
  3973  002C16                     u2825:
  3974  002C16  A0D8               	btfss	status,0,c
  3975  002C18  0012               	return	
  3976  002C1A                     u2840:
  3977                           ;rgl.c: 1723: {
  3978  002C1A  010F               	movlb	F1691 shr (0+8)
  3979  002C1C  6B21               	clrf	F1691& (0+255),b
  3980                           ;rgl.c: 1727: if((pv-v)>100) w=5;
  3981  002C1E  C0AE  F000         	movff	?a_NewPop_SMOD+3,btemp
  3982  002C22  C0AF  F001         	movff	?a_NewPop_SMOD+4,btemp+1
  3983  002C26  0100               	movlb	__Lparam shr (0+8)
  3984  002C28  51B0               	movf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),w
  3985  002C2A  5E00               	subwf	btemp,f,c
  3986  002C2C  51B1               	movf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),w
  3987  002C2E  5A01               	subwfb	btemp+1,f,c
  3988  002C30  0E00               	movlw	0
  3989  002C32  5C01               	subwf	btemp+1,w,c
  3990  002C34  0E65               	movlw	101
  3991  002C36  B4D8               	btfsc	status,2,c
  3992  002C38  5C00               	subwf	btemp,w,c
  3993  002C3A  E302               	bnc	l306
  3994  002C3C  0E05               	movlw	5
  3995  002C3E  D001               	goto	L19
  3996  002C40                     l306:
  3997                           ;rgl.c: 1728: else w=8;
  3998  002C40  0E08               	movlw	8
  3999  002C42                     L19:
  4000  002C42  6ED9               	movwf	fsr2l,c
  4001                           ;rgl.c: 1729: if(bw1) w=10;
  4002  002C44  010F               	movlb	F1692 shr (0+8)
  4003  002C46  5322               	movf	F1692& (0+255),f,b
  4004  002C48  E002               	bz	l308
  4005  002C4A  0E0A               	movlw	10
  4006  002C4C  6ED9               	movwf	fsr2l,c
  4007  002C4E                     l308:
  4008                           ;rgl.c: 1730: if(++t1>w)
  4009  002C4E  010F               	movlb	F1690 shr (0+8)
  4010  002C50  2B20               	incf	F1690& (0+255),f,b
  4011  002C52  CF20  FFE8         	movff	F1690,wreg
  4012  002C56  60D9               	cpfslt	fsr2l,c
  4013  002C58  0012               	return	
  4014                           ;rgl.c: 1731: {
  4015  002C5A  6B20               	clrf	F1690& (0+255),b
  4016                           ;rgl.c: 1733: bw1=0;
  4017  002C5C  010F               	movlb	F1692 shr (0+8)
  4018  002C5E  6B22               	clrf	F1692& (0+255),b
  4019                           ;rgl.c: 1734: bw2=1;
  4020  002C60  0E01               	movlw	1
  4021  002C62  CFE8 FF23          	movff	wreg,F1693
  4022                           ;rgl.c: 1735: if(popSMOD<50) popSMOD+=kup;
  4023  002C66  CF29  FFE8         	movff	_popSMOD,wreg
  4024  002C6A  0A80               	xorlw	128
  4025  002C6C  0F4E               	addlw	-178
  4026  002C6E  B0D8               	btfsc	status,0,c
  4027  002C70  0012               	return	
  4028  002C72  010F               	movlb	_popSMOD shr (0+8)
  4029  002C74  2B29               	incf	_popSMOD& (0+255),f,b
  4030                           ;rgl.c: 1736: }
  4031  002C76  0C01               	retlw	1
  4032  002C78                     __end_of_NewPop_SMOD:
  4033                           ;rgl.c: 1743: unsigned char ProcToMod(unsigned c
      +                          har prvnt)
  4034                           ;rgl.c: 1744: {
  4035  002C78                     _ProcToMod:
  4036  000000                     
  4037                           ;_prvnt stored from wreg
  4038  002C78  0100               	movlb	__Lparam shr (0+8)
  4039  002C7A  6FA9               	movwf	?a_ProcToMod^(__Lparam& (0+65280)),b
  4040                           ;rgl.c: 1745: unsigned char pv;
  4041  002C7C  51A9               	movf	?a_ProcToMod^(__Lparam& (0+65280)),w
  4042  002C7E  ECEB  F039         	call	_ProcToVNT
  4043  002C82  0100               	movlb	__Lparam shr (0+8)
  4044  002C84  6FAA               	movwf	(?a_ProcToMod+1)^(__Lparam& (0+65280)),b
  4045                           ;rgl.c: 1748: if(RTdS(4)>1)
  4046  002C86  0E04               	movlw	4
  4047  002C88  EC04  F046         	call	_RTdS
  4048  002C8C  6E00               	movwf	btemp,c
  4049  002C8E  0E02               	movlw	2
  4050  002C90  5C00               	subwf	btemp,w,c
  4051  002C92  E306               	bnc	l312
  4052                           ;rgl.c: 1749: {
  4053  002C94  0E04               	movlw	4
  4054  002C96  ECF2  F045         	call	_StartRTdS
  4055                           ;rgl.c: 1751: NewPop_SMOD(pv);
  4056  002C9A  0100               	movlb	__Lparam shr (0+8)
  4057  002C9C  51AA               	movf	(?a_ProcToMod+1)^(__Lparam& (0+65280)),w
  4058  002C9E  DE78               	call	_NewPop_SMOD
  4059  002CA0                     l312:
  4060                           ;rgl.c: 1752: }
  4061  002CA0  0100               	movlb	__Lparam shr (0+8)
  4062  002CA2  51AA               	movf	(?a_ProcToMod+1)^(__Lparam& (0+65280)),w
  4063  002CA4  D61A               	goto	_New_SMOD
  4064                           ;rgl.c: 1756: }
  4065  002CA6                     __end_of_ProcToMod:
  4066                           ;rgl.c: 1766: bit Trosnie(const unsigned char t)
  4067                           ;rgl.c: 1767: {
  4068  002CA6                     _Trosnie:
  4069  000000                     
  4070                           ; _t loaded to fsr2l
  4071  002CA6  6ED9               	movwf	fsr2l,c
  4072                           ;rgl.c: 1768: return (rgl.x_dt>t);
  4073  002CA8  C1F9  F000         	movff	_rgl+4,btemp
  4074  002CAC  50D9               	movf	fsr2l,w,c
  4075  002CAE  BE00               	btfsc	btemp,7,c
  4076  002CB0  D005               	goto	u2900
  4077  002CB2  0AFF               	xorlw	255
  4078  002CB4  2400               	addwf	btemp,w,c
  4079  002CB6  E302               	bnc	u2900
  4080  002CB8  80D8               	bsf	status,0,c
  4081  002CBA  0012               	return	
  4082  002CBC                     u2900:
  4083  002CBC  90D8               	bcf	status,0,c
  4084  002CBE  0012               	return	
  4085                           ;rgl.c: 1769: }
  4086  002CC0                     __end_of_Trosnie:
  4087                           ;rgl.c: 1775: bit Tmaleje(const unsigned char t)
  4088                           ;rgl.c: 1776: {
  4089  002CC0                     _Tmaleje:
  4090  000000                     
  4091                           ; _t loaded to fsr2l
  4092  002CC0  6ED9               	movwf	fsr2l,c
  4093                           ;rgl.c: 1777: return (rgl.x_dt<(-1*t));
  4094  002CC2  CFD9 F000          	movff	fsr2l,btemp
  4095  002CC6  6A01               	clrf	btemp+1,c
  4096  002CC8  1E00               	comf	btemp,f,c
  4097  002CCA  1E01               	comf	btemp+1,f,c
  4098  002CCC  4A00               	infsnz	btemp,f,c
  4099  002CCE  2A01               	incf	btemp+1,f,c
  4100  002CD0  C1F9  F002         	movff	_rgl+4,btemp+2
  4101  002CD4  6A03               	clrf	btemp+3,c
  4102  002CD6  BE02               	btfsc	btemp+2,7,c
  4103  002CD8  0603               	decf	btemp+3,f,c
  4104  002CDA  5003               	movf	btemp+3,w,c
  4105  002CDC  0A80               	xorlw	128
  4106  002CDE  6E04               	movwf	btemp+4,c
  4107  002CE0  5001               	movf	btemp+1,w,c
  4108  002CE2  0A80               	xorlw	128
  4109  002CE4  5C04               	subwf	btemp+4,w,c
  4110  002CE6  E102               	bnz	u2925
  4111  002CE8  5000               	movf	btemp,w,c
  4112  002CEA  5C02               	subwf	btemp+2,w,c
  4113  002CEC                     u2925:
  4114  002CEC  E202               	bc	u2920
  4115  002CEE  80D8               	bsf	status,0,c
  4116  002CF0  0012               	return	
  4117  002CF2                     u2920:
  4118  002CF2  90D8               	bcf	status,0,c
  4119  002CF4  0012               	return	
  4120                           ;rgl.c: 1778: }
  4121  002CF6                     __end_of_Tmaleje:
  4122                           ;rgl.c: 1782: bit Tstoi(void)
  4123                           ;rgl.c: 1783: {
  4124  002CF6                     _Tstoi:
  4125  000000                     
  4126                           ;rgl.c: 1784: return !rgl.x_dt;
  4127  002CF6  EE01  F0F9         	lfsr	0,_rgl+4
  4128  002CFA  50EF               	movf	indf0,w,c
  4129  002CFC  90D8               	bcf	status,0,c
  4130  002CFE  B4D8               	btfsc	status,2,c
  4131  002D00  80D8               	bsf	status,0,c
  4132  002D02  0012               	return	
  4133                           ;rgl.c: 1785: }
  4134  002D04                     __end_of_Tstoi:
  4135                           ;rgl.c: 1792: bit Tnizsza(const unsigned char t)
  4136                           ;rgl.c: 1793: {
  4137  002D04                     _Tnizsza:
  4138  000000                     
  4139                           ; _t loaded to fsr2l
  4140  002D04  6ED9               	movwf	fsr2l,c
  4141                           ;rgl.c: 1794: return (rgl.x_t>t);
  4142  002D06  C1F7  F000         	movff	_rgl+2,btemp
  4143  002D0A  50D9               	movf	fsr2l,w,c
  4144  002D0C  BE00               	btfsc	btemp,7,c
  4145  002D0E  D005               	goto	u2940
  4146  002D10  0AFF               	xorlw	255
  4147  002D12  2400               	addwf	btemp,w,c
  4148  002D14  E302               	bnc	u2940
  4149  002D16  80D8               	bsf	status,0,c
  4150  002D18  0012               	return	
  4151  002D1A                     u2940:
  4152  002D1A  90D8               	bcf	status,0,c
  4153  002D1C  0012               	return	
  4154                           ;rgl.c: 1795: }
  4155  002D1E                     __end_of_Tnizsza:
  4156                           ;rgl.c: 1801: bit Twyzsza(const unsigned char t)
  4157                           ;rgl.c: 1802: {
  4158  002D1E                     _Twyzsza:
  4159  000000                     
  4160                           ; _t loaded to fsr2l
  4161  002D1E  6ED9               	movwf	fsr2l,c
  4162                           ;rgl.c: 1803: return (rgl.x_t<(-1*t));
  4163  002D20  CFD9 F000          	movff	fsr2l,btemp
  4164  002D24  6A01               	clrf	btemp+1,c
  4165  002D26  1E00               	comf	btemp,f,c
  4166  002D28  1E01               	comf	btemp+1,f,c
  4167  002D2A  4A00               	infsnz	btemp,f,c
  4168  002D2C  2A01               	incf	btemp+1,f,c
  4169  002D2E  C1F7  F002         	movff	_rgl+2,btemp+2
  4170  002D32  6A03               	clrf	btemp+3,c
  4171  002D34  BE02               	btfsc	btemp+2,7,c
  4172  002D36  0603               	decf	btemp+3,f,c
  4173  002D38  5003               	movf	btemp+3,w,c
  4174  002D3A  0A80               	xorlw	128
  4175  002D3C  6E04               	movwf	btemp+4,c
  4176  002D3E  5001               	movf	btemp+1,w,c
  4177  002D40  0A80               	xorlw	128
  4178  002D42  5C04               	subwf	btemp+4,w,c
  4179  002D44  E102               	bnz	u2965
  4180  002D46  5000               	movf	btemp,w,c
  4181  002D48  5C02               	subwf	btemp+2,w,c
  4182  002D4A                     u2965:
  4183  002D4A  E202               	bc	u2960
  4184  002D4C  80D8               	bsf	status,0,c
  4185  002D4E  0012               	return	
  4186  002D50                     u2960:
  4187  002D50  90D8               	bcf	status,0,c
  4188  002D52  0012               	return	
  4189                           ;rgl.c: 1804: }
  4190  002D54                     __end_of_Twyzsza:
  4191                           ;rgl.c: 1808: bit Trowna(void)
  4192                           ;rgl.c: 1809: {
  4193  002D54                     _Trowna:
  4194  000000                     
  4195                           ;rgl.c: 1810: return !rgl.x_t;
  4196  002D54  EE01  F0F7         	lfsr	0,_rgl+2
  4197  002D58  50EF               	movf	indf0,w,c
  4198  002D5A  90D8               	bcf	status,0,c
  4199  002D5C  B4D8               	btfsc	status,2,c
  4200  002D5E  80D8               	bsf	status,0,c
  4201  002D60  0012               	return	
  4202                           ;rgl.c: 1811: }
  4203  002D62                     __end_of_Trowna:
  4204                           ;rgl.c: 1817: bit TFrosnie(const unsigned char t
      +                          )
  4205                           ;rgl.c: 1818: {
  4206  002D62                     _TFrosnie:
  4207  000000                     
  4208                           ; _t loaded to fsr2l
  4209  002D62  6ED9               	movwf	fsr2l,c
  4210                           ;rgl.c: 1819: return (rgl.x_df>t);
  4211  002D64  C1FA  F000         	movff	_rgl+5,btemp
  4212  002D68  50D9               	movf	fsr2l,w,c
  4213  002D6A  BE00               	btfsc	btemp,7,c
  4214  002D6C  D005               	goto	u2980
  4215  002D6E  0AFF               	xorlw	255
  4216  002D70  2400               	addwf	btemp,w,c
  4217  002D72  E302               	bnc	u2980
  4218  002D74  80D8               	bsf	status,0,c
  4219  002D76  0012               	return	
  4220  002D78                     u2980:
  4221  002D78  90D8               	bcf	status,0,c
  4222  002D7A  0012               	return	
  4223                           ;rgl.c: 1820: }
  4224  002D7C                     __end_of_TFrosnie:
  4225                           ;rgl.c: 1826: bit TFmaleje(const unsigned char t
      +                          )
  4226                           ;rgl.c: 1827: {
  4227  002D7C                     _TFmaleje:
  4228  000000                     
  4229                           ; _t loaded to fsr2l
  4230  002D7C  6ED9               	movwf	fsr2l,c
  4231                           ;rgl.c: 1828: return (rgl.x_df<(-1*t));
  4232  002D7E  CFD9 F000          	movff	fsr2l,btemp
  4233  002D82  6A01               	clrf	btemp+1,c
  4234  002D84  1E00               	comf	btemp,f,c
  4235  002D86  1E01               	comf	btemp+1,f,c
  4236  002D88  4A00               	infsnz	btemp,f,c
  4237  002D8A  2A01               	incf	btemp+1,f,c
  4238  002D8C  C1FA  F002         	movff	_rgl+5,btemp+2
  4239  002D90  6A03               	clrf	btemp+3,c
  4240  002D92  BE02               	btfsc	btemp+2,7,c
  4241  002D94  0603               	decf	btemp+3,f,c
  4242  002D96  5003               	movf	btemp+3,w,c
  4243  002D98  0A80               	xorlw	128
  4244  002D9A  6E04               	movwf	btemp+4,c
  4245  002D9C  5001               	movf	btemp+1,w,c
  4246  002D9E  0A80               	xorlw	128
  4247  002DA0  5C04               	subwf	btemp+4,w,c
  4248  002DA2  E102               	bnz	u3005
  4249  002DA4  5000               	movf	btemp,w,c
  4250  002DA6  5C02               	subwf	btemp+2,w,c
  4251  002DA8                     u3005:
  4252  002DA8  E202               	bc	u3000
  4253  002DAA  80D8               	bsf	status,0,c
  4254  002DAC  0012               	return	
  4255  002DAE                     u3000:
  4256  002DAE  90D8               	bcf	status,0,c
  4257  002DB0  0012               	return	
  4258                           ;rgl.c: 1829: }
  4259  002DB2                     __end_of_TFmaleje:
  4260                           ;rgl.c: 1833: bit TFstoi(void)
  4261                           ;rgl.c: 1834: {
  4262  002DB2                     _TFstoi:
  4263  000000                     
  4264                           ;rgl.c: 1835: return !rgl.x_df;
  4265  002DB2  EE01  F0FA         	lfsr	0,_rgl+5
  4266  002DB6  50EF               	movf	indf0,w,c
  4267  002DB8  90D8               	bcf	status,0,c
  4268  002DBA  B4D8               	btfsc	status,2,c
  4269  002DBC  80D8               	bsf	status,0,c
  4270  002DBE  0012               	return	
  4271                           ;rgl.c: 1836: }
  4272  002DC0                     __end_of_TFstoi:
  4273                           ;rgl.c: 1839: void RestartMod(void)
  4274                           ;rgl.c: 1840: {
  4275  002DC0                     _RestartMod:
  4276  000000                     
  4277                           ;rgl.c: 1841: rgl.btcw=0;
  4278  002DC0  0101               	movlb	_rgl shr (0+8)	;volatile
  4279  002DC2  93F5               	bcf	_rgl& (0+255),1,b	;volatile
  4280                           ;rgl.c: 1842: rgl.fz=0;
  4281  002DC4  95F5               	bcf	_rgl& (0+255),2,b	;volatile
  4282                           ;rgl.c: 1843: rgl.med_up=0;
  4283  002DC6  97F5               	bcf	_rgl& (0+255),3,b	;volatile
  4284                           ;rgl.c: 1844: rgl.fast_up=0;
  4285  002DC8  99F5               	bcf	_rgl& (0+255),4,b	;volatile
  4286                           ;rgl.c: 1845: rgl.nmod=0;
  4287  002DCA  9BF5               	bcf	_rgl& (0+255),5,b	;volatile
  4288                           ;rgl.c: 1846: rgl.del1s=0;
  4289  002DCC  9DF5               	bcf	_rgl& (0+255),6,b	;volatile
  4290                           ;rgl.c: 1847: rgl.deln1=0;
  4291  002DCE  9FF5               	bcf	_rgl& (0+255),7,b	;volatile
  4292                           ;rgl.c: 1848: rgl.inv_mod=0;
  4293  002DD0  91F6               	bcf	(_rgl+1)& (0+255),0,b
  4294                           ;rgl.c: 1849: }
  4295  002DD2  0012               	return	
  4296  002DD4                     __end_of_RestartMod:
  4297  000000                     
  4298  000000                     
  4299  000000                     
  4300  000000                     
  4301  000000                     
  4302  000000                     
  4303  000000                     
  4304  000000                     
  4305  000000                     
  4306  000000                     
  4307  000000                     
  4308  000000                     
  4309  000000                     
  4310  000000                     
  4311  000000                     
  4312  000000                     
  4313  000000                     
  4314  000000                     
  4315  000000                     
  4316  000000                     
  4317  000000                     
  4318  000000                     
  4319  000000                     
  4320  000000                     
  4321  000000                     
  4322  000000                     
  4323  000000                     
  4324  000000                     
  4325  000000                     
  4326  000000                     
  4327  000000                     
  4328  000000                     
  4329  000000                     
  4330  000000                     
  4331  000000                     
  4332  000000                     
  4333  000000                     
  4334  000000                     
  4335  000000                     
  4336  000000                     
  4337  000000                     
  4338  000000                     
  4339  000000                     
  4340  000000                     
  4341  000000                     
  4342  000000                     
  4343  000000                     
  4344  000000                     
  4345  000000                     
  4346  000000                     
  4347  000000                     
  4348  000000                     
  4349  000000                     
  4350  000000                     
  4351  000000                     
  4352  000000                     
  4353  000000                     
  4354  000000                     
  4355  000000                     
  4356  000000                     
  4357  000000                     
  4358  000000                     
  4359  000000                     
  4360  000000                     
  4361  000000                     
  4362  000000                     
  4363  000000                     
  4364  000000                     
  4365  000000                     
  4366  000000                     
  4367  000000                     
  4368  000000                     
  4369  000000                     
  4370  000000                     
  4371  000000                     
  4372  000000                     
  4373  000000                     
  4374  000000                     
  4375  000000                     
  4376  000000                     
  4377  000000                     
  4378  000000                     
  4379  000000                     
  4380  000000                     
  4381  000000                     
  4382  000000                     
  4383  000000                     
  4384  000000                     
  4385  000000                     
  4386  000000                     
  4387  000000                     
  4388  000000                     
  4389  000000                     
  4390  000000                     
  4391  000000                     
  4392  000000                     
  4393  000000                     
  4394  000000                     
  4395  000000                     
  4396  000000                     
  4397  000000                     
  4398  000000                     
  4399  000000                     
  4400  000000                     
  4401  000000                     
  4402  000000                     
  4403  000000                     
  4404  000000                     
  4405  000000                     
  4406  000000                     
  4407  000000                     
  4408  000000                     
  4409  000000                     
  4410  000000                     
  4411  000000                     
  4412  000000                     
  4413  000000                     
  4414  000000                     
  4415  000000                     
  4416  000000                     
  4417  000000                     
  4418  000000                     
  4419  000000                     
  4420  000000                     
  4421  000000                     
  4422  000000                     
  4423  000000                     
  4424  000000                     
  4425  000000                     
  4426  000000                     
  4427  000000                     
  4428  000000                     
  4429  000000                     
  4430  000000                     
  4431  000000                     
  4432  000000                     
  4433  000000                     
  4434  000000                     
  4435  000000                     
  4436  000000                     
  4437  000000                     
  4438  000000                     
  4439  000000                     
  4440  000000                     
  4441  000000                     
  4442  000000                     
  4443  000000                     
  4444  000000                     
  4445  000000                     
  4446  000000                     
  4447  000000                     
  4448  000000                     
  4449  000000                     
  4450  000000                     
  4451  000000                     
  4452  000000                     
  4453  000000                     
  4454  000000                     
  4455  000000                     
  4456  000000                     
  4457  000000                     
  4458  000000                     
  4459  000000                     
  4460  000000                     
  4461  000000                     
  4462  000000                     
  4463  000000                     
  4464  000000                     
  4465  000000                     
  4466  000000                     
  4467  000000                     
  4468  000000                     
  4469  000000                     
  4470  000000                     
  4471  000000                     
  4472  000000                     
  4473  000000                     
  4474  000000                     
  4475  000000                     
  4476  000000                     
  4477  000000                     
  4478  000000                     
  4479  000000                     
  4480  000000                     
  4481  000000                     
  4482  000000                     
  4483  000000                     
  4484  000000                     
  4485  000000                     
  4486  000000                     
  4487  000000                     
  4488  000000                     
  4489  000000                     
  4490  000000                     
  4491  000000                     
  4492  000000                     
  4493  000000                     
  4494  000000                     
  4495  000000                     
  4496  000000                     
  4497  000000                     
  4498  000000                     
  4499  000000                     
  4500  000000                     
  4501  000000                     
  4502  000000                     
  4503  000000                     
  4504  000000                     
  4505  000000                     
  4506  000000                     
  4507  000000                     
  4508  000000                     
  4509  000000                     
  4510  000000                     
  4511  000000                     
  4512  000000                     
  4513  000000                     
  4514  000000                     
  4515  000000                     
  4516  000000                     
  4517  000000                     
  4518  000000                     
  4519  000000                     
  4520  000000                     
  4521  000000                     
  4522  000000                     
  4523  000000                     
  4524  000000                     
  4525  000000                     
  4526  000000                     
  4527  000000                     
  4528  000000                     
  4529  000000                     
  4530  000000                     
  4531  000000                     
  4532  000000                     
  4533  000000                     
  4534  000000                     
  4535  000000                     
  4536  000000                     
  4537  000000                     
  4538  000000                     
  4539  000000                     
  4540  000000                     
  4541  000000                     
  4542  000000                     
  4543  000000                     
  4544  000000                     
  4545  000000                     
  4546  000000                     
  4547  000000                     
  4548  000000                     
  4549  000000                     
  4550  000000                     
  4551  000000                     
  4552  000000                     
  4553  000000                     
  4554  000000                     
  4555  000000                     
  4556  000000                     
  4557  000000                     
  4558  000000                     
  4559  000000                     
  4560  000000                     
  4561  000000                     
  4562  000000                     
  4563  000000                     
  4564  000000                     
  4565  000000                     
  4566  000000                     
  4567  000000                     
  4568  000000                     
  4569  000000                     
  4570  000000                     
  4571  000000                     
  4572  000000                     
  4573  000000                     
  4574  000000                     
  4575  000000                     
  4576  000000                     
  4577  000000                     
  4578  000000                     
  4579  000000                     
  4580  000000                     
  4581  000000                     
  4582  000000                     
  4583  000000                     
  4584  000000                     
  4585  000000                     
  4586  000000                     
  4587  000000                     
  4588  000000                     
  4589  000000                     
  4590  000000                     
  4591  000000                     
  4592  000000                     
  4593  000000                     
  4594  000000                     
  4595  000000                     
  4596  000000                     
  4597  000000                     
  4598  000000                     
  4599  000000                     
  4600  000000                     
  4601  000000                     
  4602  000000                     
  4603  000000                     
  4604  000000                     
  4605  000000                     
  4606  000000                     
  4607  000000                     
  4608  000000                     
  4609  000000                     
  4610  000000                     
  4611  000000                     
  4612  000000                     
  4613  000000                     
  4614  000000                     
  4615  000000                     
  4616  000000                     
  4617  000000                     
  4618  000000                     
  4619  000000                     
  4620  000000                     
  4621  000000                     
  4622  000000                     
  4623  000000                     
  4624  000000                     
  4625  000000                     
  4626  000000                     
  4627  000000                     
  4628  000000                     
  4629  000000                     
  4630  000000                     
  4631  000000                     
  4632  000000                     
  4633  000000                     
  4634  000000                     
  4635  000000                     
  4636  000000                     
  4637  000000                     
  4638  000000                     
  4639  000000                     
  4640  000000                     
  4641  000000                     
  4642  000000                     
  4643  000000                     
  4644  000000                     
  4645  000000                     
  4646  000000                     
  4647  000000                     
  4648  000000                     
  4649  000000                     
  4650  000000                     
  4651  000000                     
  4652  000000                     
  4653  000000                     
  4654  000000                     
  4655  000000                     
  4656  000000                     
  4657  000000                     
  4658  000000                     
  4659  000000                     
  4660  000000                     
  4661  000000                     
  4662  000000                     
  4663  000000                     
  4664  000000                     
  4665  000000                     
  4666  000000                     
  4667  000000                     
  4668  000000                     
  4669  000000                     
  4670  000000                     
  4671  000000                     
  4672  000000                     
  4673  000000                     
  4674  000000                     
  4675  000000                     
  4676  000000                     
  4677  000000                     
  4678  000000                     
  4679  000000                     
  4680  000000                     
  4681  000000                     
  4682  000000                     
  4683  000000                     
  4684  000000                     
  4685  000000                     
  4686  000000                     
  4687  000000                     
  4688  000000                     
  4689  000000                     
  4690  000000                     
  4691  000000                     
  4692  000000                     
  4693  000000                     
  4694  000000                     
  4695  000000                     
  4696  000000                     
  4697  000000                     
  4698  000000                     
  4699  000000                     
  4700  000000                     
  4701  000000                     
  4702  000000                     
  4703  000000                     
  4704  000000                     
  4705  000000                     
  4706  000000                     
  4707  000000                     
  4708  000000                     
  4709  000000                     
  4710  000000                     
  4711  000000                     
  4712  000000                     
  4713  000000                     
  4714  000000                     
  4715  000000                     
  4716  000000                     
  4717  000000                     
  4718  000000                     
  4719  000000                     
  4720  000000                     
  4721  000000                     
  4722  000000                     
  4723  000000                     
  4724  000000                     
  4725  000000                     
  4726  000000                     
  4727  000000                     
  4728  000000                     
  4729  000000                     
  4730  000000                     
  4731  000000                     
  4732  000000                     
  4733                           
  4734                           	psect	data
  4735  000087                     _wspPp0:
  4736  000087                     	ds	3
  4737                           ;rgl.c: 102: float wspPp0=0.5;
  4738  000087                     _wspPp1:
  4739  000087                     	ds	3
  4740                           ;rgl.c: 103: float wspPp1=0.5;
  4741  000087                     _wspPp2:
  4742  000087                     	ds	3
  4743                           ;rgl.c: 104: float wspPp2=0.5;
  4744  000087                     _wspPp3:
  4745  000087                     	ds	3
  4746                           ;rgl.c: 105: float wspPp3=0.5;
  4747  000087                     _wspInc0:
  4748  000087                     	ds	3
  4749                           ;rgl.c: 108: float wspInc0=0.8;
  4750  000087                     _wspInc1:
  4751  000087                     	ds	3
  4752                           ;rgl.c: 109: float wspInc1=0.8;
  4753  000087                     _wspZG0:
  4754  000087                     	ds	3
  4755                           ;rgl.c: 112: float wspZG0=0.8;
  4756  000087                     _wspPR0:
  4757  000087                     	ds	3
  4758                           ;rgl.c: 115: float wspPR0=0.5;
  4759  000087                     _wspDK:
  4760  000087                     	ds	3
  4761                           ;rgl.c: 123: unsigned char ktimPR=2;
  4762  000087                     _wspPR:
  4763  000087                     	ds	3
  4764                           ;rgl.c: 124: float wspPR=0.5;
  4765  000087                     _wspSUP0:
  4766  000087                     	ds	3
  4767                           
  4768                           	psect	idata
  4769  0010A8  00                 	db	0
  4770  0010A9  00                 	db	0
  4771  0010AA  3F                 	db	63
  4772  0010AB  00                 	db	0
  4773  0010AC  00                 	db	0
  4774  0010AD  3F                 	db	63
  4775  0010AE  00                 	db	0
  4776  0010AF  00                 	db	0
  4777  0010B0  3F                 	db	63
  4778  0010B1  00                 	db	0
  4779  0010B2  00                 	db	0
  4780  0010B3  3F                 	db	63
  4781  0010B4  CD                 	db	205
  4782  0010B5  4C                 	db	76
  4783  0010B6  3F                 	db	63
  4784  0010B7  CD                 	db	205
  4785  0010B8  4C                 	db	76
  4786  0010B9  3F                 	db	63
  4787  0010BA  CD                 	db	205
  4788  0010BB  4C                 	db	76
  4789  0010BC  3F                 	db	63
  4790  0010BD  00                 	db	0
  4791  0010BE  00                 	db	0
  4792  0010BF  3F                 	db	63
  4793  0010C0  33                 	db	51
  4794  0010C1  33                 	db	51
  4795  0010C2  3F                 	db	63
  4796  0010C3  00                 	db	0
  4797  0010C4  00                 	db	0
  4798  0010C5  3F                 	db	63
  4799  0010C6  00                 	db	0
  4800  0010C7  80                 	db	128
  4801  0010C8  3F                 	db	63
  4802                           
  4803                           	psect	bigdata
  4804                           ;rgl.c: 120: float wspDK=0.7;
  4805  000ED9                     _ktimPR:
  4806  000ED9                     	ds	1
  4807                           
  4808                           	psect	ibigdata
  4809  0010CA  02                 	db	2
  4810                           
  4811                           	psect	bigbss
  4812  000F0B                     F1612:
  4813  000F0B                     	ds	1
  4814  000F0B                     F1613:
  4815  000F0B                     	ds	1
  4816  000F0B                     F1614:
  4817  000F0B                     	ds	1
  4818  000F0B                     F1615:
  4819  000F0B                     	ds	1
  4820  000F0B                     F1616:
  4821  000F0B                     	ds	1
  4822  000F0B                     F1617:
  4823  000F0B                     	ds	1
  4824  000F0B                     F1618:
  4825  000F0B                     	ds	1
  4826  000F0B                     F1637:
  4827  000F0B                     	ds	1
  4828  000F0B                     F1645:
  4829  000F0B                     	ds	1
  4830  000F0B                     F1646:
  4831  000F0B                     	ds	1
  4832  000F0B                     F1647:
  4833  000F0B                     	ds	1
  4834  000F0B                     F1648:
  4835  000F0B                     	ds	1
  4836  000F0B                     F1654:
  4837  000F0B                     	ds	1
  4838  000F0B                     F1655:
  4839  000F0B                     	ds	1
  4840  000F0B                     F1656:
  4841  000F0B                     	ds	1
  4842  000F0B                     F1657:
  4843  000F0B                     	ds	1
  4844  000F0B                     F1664:
  4845  000F0B                     	ds	1
  4846  000F0B                     F1665:
  4847  000F0B                     	ds	1
  4848  000F0B                     F1666:
  4849  000F0B                     	ds	1
  4850  000F0B                     F1667:
  4851  000F0B                     	ds	1
  4852  000F0B                     F1689:
  4853  000F0B                     	ds	1
  4854  000F0B                     F1690:
  4855  000F0B                     	ds	1
  4856  000F0B                     F1691:
  4857  000F0B                     	ds	1
  4858  000F0B                     F1692:
  4859  000F0B                     	ds	1
  4860  000F0B                     F1693:
  4861  000F0B                     	ds	1
  4862  000000                     
  4863  000000                     
  4864  000000                     
  4865  000000                     
  4866  000000                     
  4867  000000                     
  4868  000000                     
  4869  000000                     
  4870  000000                     
  4871  000000                     
  4872  000000                     
  4873  000000                     
  4874  000000                     
  4875  000000                     
  4876  000000                     
  4877  000000                     
  4878  000000                     
  4879  000000                     
  4880  000000                     
  4881  000000                     
  4882  000000                     
  4883  000000                     
  4884  000000                     
  4885  000000                     
  4886  000000                     
  4887  000000                     
  4888  000000                     
  4889  000000                     
  4890  000000                     
  4891  000000                     
  4892  000000                     
  4893  000000                     
  4894  000000                     
  4895  000000                     
  4896  000000                     
  4897  000000                     
  4898  000000                     
  4899  000000                     
  4900  000000                     
  4901  000000                     
  4902  000000                     
  4903  000000                     
  4904  000000                     
  4905  000000                     
  4906  000000                     
  4907  000000                     
  4908  000000                     
  4909  000000                     
  4910  000000                     
  4911  000000                     
  4912  000000                     
  4913  000000                     
  4914  000000                     
  4915  000000                     
  4916  000000                     
  4917  000000                     
  4918  000000                     
  4919  000000                     
  4920  000000                     
  4921  000000                     
  4922  000000                     
  4923  000000                     
  4924  000000                     
  4925  000000                     
  4926  000000                     
  4927  000000                     
  4928  000000                     
  4929  000000                     
  4930  000000                     
  4931  000000                     
  4932  000000                     
  4933  000000                     
  4934  000000                     
  4935  000000                     
  4936  000000                     
  4937  000000                     
  4938  000000                     
  4939  000000                     
  4940  000000                     
  4941  000000                     
  4942  000000                     
  4943  000000                     
  4944  000000                     
  4945  000000                     
  4946  000000                     
  4947  000000                     
  4948  000000                     
  4949  000000                     
  4950  000000                     
  4951  000000                     
  4952  000000                     
  4953  000000                     
  4954  000000                     
  4955  000000                     
  4956  000000                     
  4957  000000                     
  4958  000000                     
  4959  000000                     
  4960  000000                     
  4961  000000                     
  4962  000000                     
  4963  000000                     
  4964  000000                     
  4965  000000                     
  4966  000000                     
  4967  000000                     
  4968  000000                     
  4969  000000                     
  4970  000000                     
  4971  000000                     
  4972  000000                     
  4973  000000                     
  4974  000000                     
  4975  000000                     
  4976  000000                     
  4977  000000                     
  4978  000000                     
  4979  000000                     
  4980  000000                     
  4981  000000                     
  4982  000000                     
  4983  000000                     
  4984  000000                     
  4985  000000                     
  4986  000000                     
  4987  000F0B                     _popMAXCO:
  4988  000F0B                     	ds	1
  4989  000F0B                     _popMAXCW:
  4990  000F0B                     	ds	1
  4991  000F0B                     _popMIN:
  4992  000F0B                     	ds	1
  4993  000F0B                     _popSMAX:
  4994  000F0B                     	ds	1
  4995  000F0B                     _popSMIN:
  4996  000F0B                     	ds	1
  4997  000F0B                     _popSMOD:
  4998  000F0B                     	ds	1
  4999  000F0B                     _pwm_center:
  5000  000F0B                     	ds	1
  5001  000F0B                     _pwm_kwr:
  5002  000F0B                     	ds	1
  5003  000F0B                     _subtim:
  5004  000F0B                     	ds	1
  5005  000F0B                     _tmr:
  5006  000F0B                     	ds	1
  5007  000F0B                     _tmr2:
  5008  000F0B                     	ds	1
  5009  000000                     
  5010  000000                     
  5011  000000                     
  5012  000000                     
  5013  000000                     
  5014  000000                     
  5015  000000                     
  5016                           
  5017                           	psect	const
  5018  001014                     _kdw:
  5019  001014  01                 	db	1
  5020  001015                     _kup:
  5021  001015  01                 	db	1
  5022                           
  5023                           	psect	bss
  5024  0001F5                     _rgl:
  5025  0001F5                     	ds	10
  5026                           
  5027                           	psect	temp
  5028  000000                     btemp:
  5029  000000                     	ds	8
  5030                           tblptrh	equ	0xFF7
  5031                           tblptrl	equ	0xFF6
  5032                           prodh	equ	0xFF4
  5033                           prodl	equ	0xFF3
  5034                           indf0	equ	0xFEF
  5035                           fsr0h	equ	0xFEA
  5036                           fsr0l	equ	0xFE9
  5037                           wreg	equ	0xFE8
  5038                           fsr1l	equ	0xFE1
  5039                           fsr2l	equ	0xFD9
  5040                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Thu Jul 12 08:02:18 2018

            _SetNstVNT 4E5E                      _M 0055  
                   l20 1318                     l12 1114  
                   l21 1280                     l13 114E  
                   l30 1446                     l22 1312  
                   l14 1146                     l31 1560  
                   l32 14C8                     l24 1332  
                   l33 155A                     l25 1326  
                   l50 1620                     l18 11FA  
                   l35 1578                     l27 13A4  
                   l19 11FE                     l60 17F6  
                   l36 156E                     l28 1434  
           ?_SetNstVNT 00B2                     l70 1926  
                   l54 166E                     l46 15E0  
                   l38 1584                     l71 1932  
                   l55 1678                     l72 193C  
                   l64 18C2                     l56 16D6  
                   l65 18FA                     l57 176C  
                   l49 1634                     l82 19D8  
                   l66 18F4                     l58 17AA  
                   l91 1ACC                     l83 19DC  
                   l75 1970                     l59 17F0  
                   l84 19E8                     l76 19BE  
                   l85 1A3A                     l77 198C  
                   l69 1AD6                     l86 1A50  
                   l87 1A98                     l79 19A8  
                   l96 1AEE                     l88 1A8E  
                   l97 1AFA                     l98 1B06  
                   l99 1CD8                     u65 11EE  
            _ProcToVNT 73D6              _ProcToMod 2C78  
    __end_of_ProcToMod 2CA6          _NewPop_MAX_CO 2632  
        _NewPop_MAX_CW 24E4             ?a_ModDkCW2 00A8  
                  l100 1B60                    l101 1B90  
                  l111 1CC8                    l103 1BD8  
                  l120 1D28                    l112 1C8C  
                  l104 1C4E                    l121 1D58  
                  l105 1BFC                    l203 2456  
                  l131 1E90                    l123 1DA0  
                  l107 1C0A                    l212 24AC  
                  l140 1ECE                    l132 1E40  
                  l124 1E28                    l116 1CC0  
                  l301 2B80                    l221 2570  
                  l205 2422                    l141 1EBE  
                  l125 1DF4                    l109 1C40  
                  l230 2608                    l214 24BA  
                  l134 1E4E                    l126 1DEA  
                  l223 257E                    l207 2430  
                  l312 2CA0                    l160 2026  
                  l152 1F7C                    l136 1E84  
                  l145 202C                    l306 2C40  
                  l250 27B6                    l146 1F82  
                  l235 26F2                    l219 25A4  
                  l171 221A                    l308 2C4E  
                  l260 28A0                    l252 27EC  
                  l244 2748                    l228 25FA  
                  l172 2232                    l156 1FF4  
                  l148 1F4A                    l237 26BE  
                  l165 21A4                    l270 294C  
                  l262 28CC                    l246 2756  
                  l190 2310                    l174 2240  
                  l166 21AA                    l271 298A  
                  l255 2830                    l239 26CC  
                  l183 22B8                    l280 2A02  
                  l272 2982                    l176 2270  
                  l281 2A16                    l265 2916  
                  l257 285C                    l169 227C  
                  l290 2AB6                    l282 2A12  
                  l266 2906                    l186 22E6  
                  l291 2A96                    l275 29E6  
                  l267 28E0                    l187 22D0  
                  l284 2AD4                    l276 29D6  
                  l268 28EA                    l188 22DE  
                  l285 2A76                    l277 29B0  
                  l269 28F8                    l286 2A5E  
                  l278 29BA                    l198 237A  
                  l295 2AC4                    l279 29C8  
                  l296 2AD0                    l297 2BA6  
                  l299 2B72                    u115 130A  
                  u215 1552                    u320 15F4  
                  u155 142E                    u405 179C  
                  u425 17E8                    u455 18BA  
                  u465 18EC                    u385 1760  
                  u805 1A86                    u815 1AC4  
                  u770 1A18                    u980 1BB6  
                  u895 1B4E                    _PWM 025D  
             _WritePWM 8B62             ?a_ModZgCW2 00A8  
           ?a_New_SMOD 00AB                    _kdw 1014  
                  _rgl 01F5                    _kup 1015  
          ?a_IncMaxCW2 00A8              _StartMCW2 1156  
                  _tmr 0F2D      __end_of_StartMCW2 118A  
                  wreg 000FE8              _StartRTdS 8BE4  
           _RestartMod 2DC0                   F1612 0F0B  
                 F1613 0F0C                   F1614 0F0D  
                 F1615 0F0E                   F1616 0F0F  
                 F1617 0F10                   F1618 0F11  
                 F1645 0F13                   F1637 0F12  
                 F1654 0F17                   F1646 0F14  
                 F1655 0F18                   F1647 0F15  
                 F1664 0F1B                   F1656 0F19  
                 F1648 0F16                   F1665 0F1C  
                 F1657 0F1A                   F1690 0F20  
                 F1666 0F1D                   F1691 0F21  
                 F1667 0F1E                   F1692 0F22  
                 F1693 0F23                   F1689 0F1F  
   __end_of_RestartMod 2DD4  __end_of_NewPop_MAX_CO 2780  
__end_of_NewPop_MAX_CW 2632                   f6253 00B0  
                 f6363 00AE                   u1220 1D7E  
                 u1135 1D16                   u1055 1C38  
                 u3000 2DAE                   u2115 25D0  
                 u2035 2548                   u1075 1C84  
                 u3005 2DA8                   u2205 2696  
                 u1325 1E7C                   u1085 1CB8  
                 u1505 201E                   u1435 1F42  
                 u1275 1DE2                   u2405 297A  
                 u1525 216C                   u1445 1F74  
                 u1285 1E20                   u2335 27AE  
                 u1535 219C                   u2345 27E4  
                 u2355 2828                   u1635 2268  
                 u1571 21DC                   u2460 2A56  
                 u2621 2B28                   u2605 2B26  
                 u2285 271E                   u1805 2370  
                 u1590 21F8                   u2375 2898  
                 u1815 2336                   u1495 1FEC  
                 u2801 2BF6                   u2395 2944  
                 u1755 230C                   u2900 2CBC  
                 u2660 2B4C                   u2645 2B4A  
                 u2581 2B06                   u1765 2336  
                 u2575 2B04                   u2920 2CF2  
                 u2840 2C1A                   u2825 2C16  
                 u2761 2BD8                   u1945 2482  
                 u1865 23FA                   u2755 2BD6  
                 u2940 2D1A                   u2925 2CEC  
                 u2960 2D50                   u2785 2BF4  
                 u2980 2D78                   u2965 2D4A  
                 _DtCW 024E                   _RTdS 8C08  
      __end_of_ClrMod2 15A2            ?a_ModPruCW2 00A8  
          ?a_ModPrzCW2 00A8                   aldiv 966E  
                 _tmr2 0F2E                   fsr0h 000FEA  
                 indf0 000FEF                   fsr0l 000FE9  
                 fsr1l 000FE1                   fsr2l 000FD9  
                 btemp 0000                   awdiv 9776  
                 ftadd 93D2                   awmul 982C  
                 ftcmp 96AA                   ftdiv 931E  
                 ftmul 91FE                   fttol 9620  
                 prodh 000FF4                   prodl 000FF3  
           _pwm_center 0F2A        __end_of_New_MIN 27FA  
             _popMAXCO 0F24               _popMAXCW 0F25  
      _CalkVNTtoPopPWM 73C4        __end_of_Moduluj 1156  
      __end_of_PropCO2 239E        __end_of_Tmaleje 2CF6  
     ?_CalkVNTtoPopPWM 00B2        __end_of_Tnizsza 2D1E  
      __end_of_Trosnie 2CC0           ?a_FirstXMOD2 00A8  
      __end_of_Twyzsza 2D54          __end_of_Tstoi 2D04  
          ?a_ProcToMod 00A9            _IncConstCW2 15A8  
                _DtKNF 0045    __end_of_IncConstCW2 15B8  
           used_btemp0 0001             used_btemp1 0001  
           used_btemp2 0001             used_btemp3 0001  
           used_btemp4 0001             used_btemp5 0001  
           used_btemp6 0001             used_btemp7 0001  
                _Tstoi 2CF6       __end_of_TFmaleje 2DB2  
      ?a_NewPop_MAX_CO 00A8        ?a_NewPop_MAX_CW 00A8  
                abtoft 97EC                  _wspDK 009F  
                altoft 974A                  _wspPR 00A2  
     __end_of_TFrosnie 2D7C                  awtoft 987E  
                lbtoft 9802           ?a_NewPop_MIN 00A8  
     __end_of_ModDkCW2 1904                _ClrMod2 158A  
                status 000FD8       __end_of_ModToCW2 15A8  
     __end_of_ModZgCW2 1804       __end_of_New_SMOD 2990  
              _New_MIN 2780                _Moduluj 10EE  
              __Lparam 00A8                _PropCO2 2344  
              _Tmaleje 2CC0                _Vmaleje 4E9C  
              _Tnizsza 2D04                _Trosnie 2CA6  
              _Vrosnie 4E6E                _Twyzsza 2D1E  
              __ramtop 1000         __end_of_TFstoi 2DC0  
              _popSMAX 0F27                _popSMIN 0F28  
              _popSMOD 0F29         __end_of_Trowna 2D62  
         _CalkVNTtoPWM 73B4                _pwm_kwr 0F2B  
          _ReadDataCW2 15B8                _wspSUP0 00A5  
              _wspInc0 0093                _wspInc1 0096  
  __end_of_ReadDataCW2 15C2                 _TFstoi 2DB2  
           _FirstXMOD2 118A            _NewPop_SMOD 2990  
               _Trowna 2D54     __end_of_FirstXMOD2 158A  
  __end_of_NewPop_SMOD 2C78                 aldiv_f 98BC  
               _popMIN 0F26                 _ktimPR 0ED9  
               almul_f 98E4                 _wspPR0 009C  
           _New_MAX_CO 286A                 _wspZG0 0099  
           _New_MAX_CW 27FA                 _subtim 0F2C  
            _IncMaxCW2 1EA0                 _wspPp0 0087  
               _wspPp1 008A                 _wspPp2 008D  
               _wspPp3 0090      __end_of_IncMaxCW2 21BA  
   __end_of_New_MAX_CO 28DA     __end_of_New_MAX_CW 286A  
        ?a_NewPop_SMOD 00AB             _VTmalejacy 4F72  
               ftmul_f 98F8                 tblptrh 000FF7  
               tblptrl 000FF6             _NewPop_MIN 239E  
             _TFmaleje 2D7C     __end_of_NewPop_MIN 24E4  
             _TFrosnie 2D62              _ModPruCW2 1904  
            _ModPrzCW2 21BA      __end_of_ModPruCW2 1EA0  
    __end_of_ModPrzCW2 22BE               _ModDkCW2 1804  
             _ModToCW2 15A2               _ModZgCW2 15C2  
             _New_SMOD 28DA              _SetPWM_CW 22BE  
    __end_of_SetPWM_CW 2344              _VTrosnacy 4F46  
