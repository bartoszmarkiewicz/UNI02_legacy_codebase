

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Thu Jul 12 08:02:17 2018


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     5                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     6  000000                     
     7  000000                     
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95                           
    96                           	psect	text
    97                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
    98                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
    99                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   100                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   101                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   102                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   103                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   104                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   105                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   106                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   107                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   108                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   109                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   110                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   111                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   112                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   113                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   114                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   115                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   116                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   117                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   118                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   119                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   120                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   121                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   122                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   123                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   124                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   125                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   126                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   127                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   128                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   129                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   130                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   131                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   132                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   133                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   134                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   135                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   136                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   137                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   138                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   139                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   140                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   141                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   142                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   143                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   144                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   145                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   146                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   147                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   148                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   149                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   150                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   151                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   152                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   153                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   154                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   155                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   156                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   157                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   158                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   159                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   160                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   161                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   162                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   163                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   164                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   165                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   166                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   167                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   168                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   169                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   170                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   171                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   172                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   173                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   174                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   175                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   176                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   177                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   178                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   179                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   180                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   181                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   182                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   183                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   184                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   185                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   186                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   187                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   188                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   189                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   190                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   191                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   192                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   193                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   194                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   195                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   196                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   197  007E72                     _ClsScr:
   198                           ;	_wd assigned to ?a_SetDiode+0
   199  000000                     _SetDiode$wd	set	?a_SetDiode
   200                           ;       param _stn assigned to ?_SetDiode+0
   201  000000                     _SetDiode$stn	set	?_SetDiode
   202                           ;	_tm assigned to ?a_PrintHex+0
   203  000000                     _PrintHex$tm	set	?a_PrintHex
   204                           ;	_tm assigned to ?a_PrintCW+0
   205  000000                     _PrintCW$tm	set	?a_PrintCW
   206                           ;       param _krp assigned to ?_PrintCW+0
   207  000000                     _PrintCW$krp	set	?_PrintCW
   208                           ;       param _krp assigned to ?_PrintNstCW+0
   209  000000                     _PrintNstCW$krp	set	?_PrintNstCW
   210                           ;       param _tryb assigned to ?_PrintPR+1
   211  000000                     _PrintPR$tryb	set	?_PrintPR+1
   212                           ;       param _nkod assigned to ?_PrintPR+0
   213  000000                     _PrintPR$nkod	set	?_PrintPR
   214                           ;	_kod assigned to ?a_PrintErr+0
   215  000000                     _PrintErr$kod	set	?a_PrintErr
   216  000000                     
   217                           ;print.c: 31: WswOff();
   218  007E72  EF43  F01F         	goto	_WswOff	;wreg free
   219                           ;print.c: 32: }
   220  007E76                     __end_of_ClsScr:
   221                           ;print.c: 34: void EndClsScr(void)
   222                           ;print.c: 35: {
   223  007E76                     _EndClsScr:
   224  000000                     
   225                           ;print.c: 36: AllKolToFirstPoz();
   226  007E76  EC6A  F021         	call	_AllKolToFirstPoz	;wreg free
   227                           ;print.c: 37: WswOn();
   228  007E7A  EF46  F01F         	goto	_WswOn	;wreg free
   229                           ;print.c: 38: }
   230  007E7E                     __end_of_EndClsScr:
   231                           ;       param _pls assigned to ?_PrintErr+0
   232  000000                     _PrintErr$pls	set	?_PrintErr
   233                           ;print.c: 44: void PrintErr(const unsigned char 
      +                          kod, const unsigned char pls)
   234                           ;print.c: 45: {
   235  007E7E  00A9               	dw	?_PrintErr
   236  007E80                     _PrintErr:
   237  000000                     
   238                           ;_kod stored from wreg
   239  007E80  0100               	movlb	__Lparam shr (0+8)
   240  007E82  6FAA               	movwf	?a_PrintErr^(__Lparam& (0+65280)),b
   241                           ;print.c: 46: if(pls)
   242  007E84  51A9               	movf	?_PrintErr^(__Lparam& (0+65280)),w
   243  007E86  E02A               	bz	l22
   244                           ;print.c: 47: {
   245  007E88  0ED9               	movlw	low _DWD
   246  007E8A  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   247  007E8C  0E01               	movlw	high _DWD
   248  007E8E  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   249  007E90  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   250  007E92  51AA               	movf	?a_PrintErr^(__Lparam& (0+65280)),w
   251  007E94  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   252  007E96  EC4A  F01F         	call	_SetData	;wreg free
   253                           ;print.c: 49: SetData(&DWD[1],0b11111111,0b11111
      +                          111);
   254  007E9A  0100               	movlb	__Lparam shr (0+8)
   255  007E9C  0EDD               	movlw	low (_DWD+4)
   256  007E9E  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   257  007EA0  0E01               	movlw	high (_DWD+4)
   258  007EA2  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   259  007EA4  69AD               	setf	(?_SetData+2)^(__Lparam& (0+65280)),b
   260  007EA6  69AE               	setf	(?_SetData+3)^(__Lparam& (0+65280)),b
   261  007EA8  EC4A  F01F         	call	_SetData	;wreg free
   262                           ;print.c: 50: SetStatus(&DWD[0],0b00100000000000
      +                          00,0b1111111111111111);
   263  007EAC  0100               	movlb	__Lparam shr (0+8)
   264  007EAE  0ED9               	movlw	low _DWD
   265  007EB0  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   266  007EB2  0E01               	movlw	high _DWD
   267  007EB4  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   268  007EB6  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   269  007EB8  0E20               	movlw	32
   270  007EBA  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   271  007EBC  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   272  007EBE  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   273  007EC0  EC60  F01F         	call	_SetStatus	;wreg free
   274                           ;print.c: 51: SetStatus(&DWD[1],0b00000000000000
      +                          00,0b1111111111111111);
   275  007EC4  0100               	movlb	__Lparam shr (0+8)
   276  007EC6  0EDD               	movlw	low (_DWD+4)
   277  007EC8  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   278  007ECA  0E01               	movlw	high (_DWD+4)
   279  007ECC  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   280  007ECE  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   281  007ED0  6BAE               	clrf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   282  007ED2  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   283  007ED4  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   284  007ED6  EC60  F01F         	call	_SetStatus	;wreg free
   285                           ;print.c: 52: }
   286  007EDA  D02C               	goto	l23
   287  007EDC                     l22:
   288                           ;print.c: 53: else
   289  007EDC  0100               	movlb	__Lparam shr (0+8)
   290  007EDE  0ED9               	movlw	low _DWD
   291  007EE0  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   292  007EE2  0E01               	movlw	high _DWD
   293  007EE4  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   294  007EE6  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   295  007EE8  51AA               	movf	?a_PrintErr^(__Lparam& (0+65280)),w
   296  007EEA  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   297  007EEC  EC4A  F01F         	call	_SetData	;wreg free
   298                           ;print.c: 56: SetData(&DWD[1],0,kod);
   299  007EF0  0100               	movlb	__Lparam shr (0+8)
   300  007EF2  0EDD               	movlw	low (_DWD+4)
   301  007EF4  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   302  007EF6  0E01               	movlw	high (_DWD+4)
   303  007EF8  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   304  007EFA  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   305  007EFC  51AA               	movf	?a_PrintErr^(__Lparam& (0+65280)),w
   306  007EFE  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   307  007F00  EC4A  F01F         	call	_SetData	;wreg free
   308                           ;print.c: 57: SetStatus(&DWD[0],0b00100000000000
      +                          00,0b1111111111111111);
   309  007F04  0100               	movlb	__Lparam shr (0+8)
   310  007F06  0ED9               	movlw	low _DWD
   311  007F08  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   312  007F0A  0E01               	movlw	high _DWD
   313  007F0C  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   314  007F0E  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   315  007F10  0E20               	movlw	32
   316  007F12  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   317  007F14  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   318  007F16  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   319  007F18  EC60  F01F         	call	_SetStatus	;wreg free
   320                           ;print.c: 58: SetStatus(&DWD[1],0b00100000000000
      +                          00,0b1111111111111111);
   321  007F1C  0100               	movlb	__Lparam shr (0+8)
   322  007F1E  0EDD               	movlw	low (_DWD+4)
   323  007F20  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   324  007F22  0E01               	movlw	high (_DWD+4)
   325  007F24  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   326  007F26  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   327  007F28  0E20               	movlw	32
   328  007F2A  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   329  007F2C  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   330  007F2E  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   331  007F30  EC60  F01F         	call	_SetStatus	;wreg free
   332  007F34                     l23:
   333                           ;print.c: 59: }
   334  007F34  0100               	movlb	__Lparam shr (0+8)
   335  007F36  6BAB               	clrf	?_SetPoz^(__Lparam& (0+65280)),b
   336  007F38  0E00               	movlw	0
   337  007F3A  ECA9  F020         	call	_SetPoz
   338                           ;print.c: 61: SetPoz(0,1);
   339  007F3E  0E01               	movlw	1
   340  007F40  0100               	movlb	__Lparam shr (0+8)
   341  007F42  6FAB               	movwf	?_SetPoz^(__Lparam& (0+65280)),b
   342  007F44  0E00               	movlw	0
   343  007F46  EFA9  F020         	goto	_SetPoz
   344                           ;print.c: 62: }
   345  007F4A                     __end_of_PrintErr:
   346                           ;print.c: 64: void EndErr(void)
   347                           ;print.c: 65: {
   348  007F4A                     _EndErr:
   349  000000                     
   350                           ;print.c: 66: ResetKol(0);
   351  007F4A  0E00               	movlw	0
   352  007F4C  EF4A  F021         	goto	_ResetKol
   353                           ;print.c: 67: }
   354  007F50                     __end_of_EndErr:
   355                           ;print.c: 76: void PrintPR(const unsigned char l
      +                          kod,unsigned char nkod,unsigned char tryb)
   356                           ;print.c: 77: {
   357  007F50  00A9               	dw	?_PrintPR
   358  007F52                     _PrintPR:
   359  000000                     
   360                           ; _lkod loaded to fsr2l
   361  007F52  6ED9               	movwf	fsr2l,c
   362                           ;print.c: 78: if((nkod>0xf)&&!tryb) nkod=0xf;
   363  007F54  0E0F               	movlw	15
   364  007F56  0100               	movlb	__Lparam shr (0+8)
   365  007F58  65A9               	cpfsgt	?_PrintPR^(__Lparam& (0+65280)),b
   366  007F5A  D004               	goto	l26
   367  007F5C  51AA               	movf	(?_PrintPR+1)^(__Lparam& (0+65280)),w
   368  007F5E  E102               	bnz	l26
   369  007F60  0E0F               	movlw	15
   370  007F62  6FA9               	movwf	?_PrintPR^(__Lparam& (0+65280)),b
   371  007F64                     l26:
   372                           ;print.c: 79: SetData(&DWD[2],lkod,(!tryb)?Znak[
      +                          nkod]:nkod);
   373  007F64  0100               	movlb	__Lparam shr (0+8)
   374  007F66  0EE1               	movlw	low (_DWD+8)
   375  007F68  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   376  007F6A  0E01               	movlw	high (_DWD+8)
   377  007F6C  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   378  007F6E  50D9               	movf	fsr2l,w,c
   379  007F70  6FAD               	movwf	(?_SetData+2)^(__Lparam& (0+65280)),b
   380  007F72  51AA               	movf	(?_PrintPR+1)^(__Lparam& (0+65280)),w
   381  007F74  E002               	bz	u66
   382  007F76  51A9               	movf	?_PrintPR^(__Lparam& (0+65280)),w
   383  007F78  D00C               	goto	u68
   384  007F7A                     u66:
   385  007F7A  C0A9  F000         	movff	?_PrintPR,btemp
   386  007F7E  6A01               	clrf	btemp+1,c
   387  007F80  5000               	movf	btemp,w,c
   388  007F82  0F94               	addlw	low _Znak
   389  007F84  6EF6               	movwf	tblptrl,c
   390  007F86  5001               	movf	btemp+1,w,c
   391  007F88  6EF7               	movwf	tblptrh,c
   392  007F8A  0E10               	movlw	high _Znak
   393  007F8C  22F7               	addwfc	tblptrh,f,c
   394  007F8E  0008               	tblrd		*
   395  007F90  50F5               	movf	tablat,w,c
   396  007F92                     u68:
   397  007F92  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   398  007F94  EC4A  F01F         	call	_SetData	;wreg free
   399                           ;print.c: 80: SetStatus(&DWD[2],0b00000000000000
      +                          00,0b1111111111111111);
   400  007F98  0100               	movlb	__Lparam shr (0+8)
   401  007F9A  0EE1               	movlw	low (_DWD+8)
   402  007F9C  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   403  007F9E  0E01               	movlw	high (_DWD+8)
   404  007FA0  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   405  007FA2  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   406  007FA4  6BAE               	clrf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   407  007FA6  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   408  007FA8  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   409  007FAA  EC60  F01F         	call	_SetStatus	;wreg free
   410                           ;print.c: 81: SetPoz(1,0);
   411  007FAE  0100               	movlb	__Lparam shr (0+8)
   412  007FB0  6BAB               	clrf	?_SetPoz^(__Lparam& (0+65280)),b
   413  007FB2  0E01               	movlw	1
   414  007FB4  ECA9  F020         	call	_SetPoz
   415  007FB8  D01C               	goto	L1
   416                           ;print.c: 82: SetPoz(1,1);
   417                           ;print.c: 83: }
   418  007FBA                     __end_of_PrintPR:
   419                           ;print.c: 86: void PrintWPR(const unsigned char 
      +                          wr)
   420                           ;print.c: 87: {
   421  007FBA                     _PrintWPR:
   422  000000                     
   423                           ; _wr loaded to fsr2l
   424  007FBA  6ED9               	movwf	fsr2l,c
   425                           ;print.c: 88: SetData(&DWD[2],0,wr);
   426  007FBC  0100               	movlb	__Lparam shr (0+8)
   427  007FBE  0EE1               	movlw	low (_DWD+8)
   428  007FC0  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   429  007FC2  0E01               	movlw	high (_DWD+8)
   430  007FC4  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   431  007FC6  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   432  007FC8  50D9               	movf	fsr2l,w,c
   433  007FCA  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   434  007FCC  EC4A  F01F         	call	_SetData	;wreg free
   435                           ;print.c: 89: SetStatus(&DWD[2],0b01000000000000
      +                          00,0b1111111111111111);
   436  007FD0  0100               	movlb	__Lparam shr (0+8)
   437  007FD2  0EE1               	movlw	low (_DWD+8)
   438  007FD4  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   439  007FD6  0E01               	movlw	high (_DWD+8)
   440  007FD8  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   441  007FDA  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   442  007FDC  0E40               	movlw	64
   443  007FDE  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   444  007FE0  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   445  007FE2  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   446  007FE4  EC60  F01F         	call	_SetStatus	;wreg free
   447                           ;print.c: 90: SetPoz(1,0);
   448  007FE8  0100               	movlb	__Lparam shr (0+8)
   449  007FEA  6BAB               	clrf	?_SetPoz^(__Lparam& (0+65280)),b
   450  007FEC  0E01               	movlw	1
   451  007FEE  ECA9  F020         	call	_SetPoz
   452  007FF2                     L1:
   453                           ;print.c: 91: SetPoz(1,1);
   454  007FF2  0E01               	movlw	1
   455  007FF4  0100               	movlb	__Lparam shr (0+8)
   456  007FF6  6FAB               	movwf	?_SetPoz^(__Lparam& (0+65280)),b
   457  007FF8  EFA9  F020         	goto	_SetPoz
   458                           ;print.c: 92: }
   459  007FFC                     __end_of_PrintWPR:
   460                           ;print.c: 95: void EndPR(void)
   461                           ;print.c: 96: {
   462  007FFC                     _EndPR:
   463  000000                     
   464                           ;print.c: 97: ResetKol(1);
   465  007FFC  0E01               	movlw	1
   466  007FFE  EF4A  F021         	goto	_ResetKol
   467                           ;print.c: 98: }
   468  008002                     __end_of_EndPR:
   469                           ;print.c: 102: void RNst(const unsigned char nst
      +                          )
   470                           ;print.c: 103: {
   471  008002                     _RNst:
   472  000000                     
   473                           ; _nst loaded to fsr2l
   474  008002  6ED9               	movwf	fsr2l,c
   475                           ;print.c: 104: SetData(&DWD[3],0,nst);
   476  008004  0100               	movlb	__Lparam shr (0+8)
   477  008006  0EE5               	movlw	low (_DWD+12)
   478  008008  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   479  00800A  0E01               	movlw	high (_DWD+12)
   480  00800C  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   481  00800E  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   482  008010  50D9               	movf	fsr2l,w,c
   483  008012  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   484  008014  EC4A  F01F         	call	_SetData	;wreg free
   485                           ;print.c: 105: SetData(&DWD[4],0b11111111,0b1111
      +                          1111);
   486  008018  0100               	movlb	__Lparam shr (0+8)
   487  00801A  0EE9               	movlw	low (_DWD+16)
   488  00801C  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   489  00801E  0E01               	movlw	high (_DWD+16)
   490  008020  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   491  008022  69AD               	setf	(?_SetData+2)^(__Lparam& (0+65280)),b
   492  008024  69AE               	setf	(?_SetData+3)^(__Lparam& (0+65280)),b
   493  008026  EF4A  F01F         	goto	_SetData	;wreg free
   494                           ;print.c: 106: }
   495  00802A                     __end_of_RNst:
   496                           ;print.c: 108: void PrintNstCW(const unsigned ch
      +                          ar nst,const unsigned char krp)
   497                           ;print.c: 109: {
   498  00802A  00A8               	dw	?_PrintNstCW
   499  00802C                     _PrintNstCW:
   500  000000                     
   501                           ; _nst loaded to fsr2l
   502  00802C  6ED9               	movwf	fsr2l,c
   503                           ;print.c: 110: SetData(&DWD[3],0,nst);
   504  00802E  0100               	movlb	__Lparam shr (0+8)
   505  008030  0EE5               	movlw	low (_DWD+12)
   506  008032  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   507  008034  0E01               	movlw	high (_DWD+12)
   508  008036  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   509  008038  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   510  00803A  50D9               	movf	fsr2l,w,c
   511  00803C  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   512  00803E  EC4A  F01F         	call	_SetData	;wreg free
   513                           ;print.c: 111: SetData(&DWD[4],0b11111111,0b1111
      +                          1111);
   514  008042  0100               	movlb	__Lparam shr (0+8)
   515  008044  0EE9               	movlw	low (_DWD+16)
   516  008046  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   517  008048  0E01               	movlw	high (_DWD+16)
   518  00804A  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   519  00804C  69AD               	setf	(?_SetData+2)^(__Lparam& (0+65280)),b
   520  00804E  69AE               	setf	(?_SetData+3)^(__Lparam& (0+65280)),b
   521  008050  EC4A  F01F         	call	_SetData	;wreg free
   522                           ;print.c: 112: if(!krp) SetStatus(&DWD[3],0b0100
      +                          000000000000,0b1111111111111111);
   523  008054  0100               	movlb	__Lparam shr (0+8)
   524  008056  51A8               	movf	?_PrintNstCW^(__Lparam& (0+65280)),w
   525  008058  E10C               	bnz	l31
   526  00805A  0EE5               	movlw	low (_DWD+12)
   527  00805C  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   528  00805E  0E01               	movlw	high (_DWD+12)
   529  008060  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   530  008062  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   531  008064  0E40               	movlw	64
   532  008066  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   533  008068  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   534  00806A  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   535  00806C  EC60  F01F         	call	_SetStatus	;wreg free
   536  008070  D00C               	goto	l32
   537  008072                     l31:
   538                           ;print.c: 113: else SetStatus(&DWD[3],0b01000000
      +                          00000000|0b0000100000000000,0b1111111111111111);
   539  008072  0100               	movlb	__Lparam shr (0+8)
   540  008074  0EE5               	movlw	low (_DWD+12)
   541  008076  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   542  008078  0E01               	movlw	high (_DWD+12)
   543  00807A  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   544  00807C  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   545  00807E  0E48               	movlw	72
   546  008080  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   547  008082  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   548  008084  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   549  008086  EC60  F01F         	call	_SetStatus	;wreg free
   550  00808A                     l32:
   551                           ;print.c: 114: SetStatus(&DWD[4],0b0000000000000
      +                          000,0b1111111111111111);
   552  00808A  0100               	movlb	__Lparam shr (0+8)
   553  00808C  0EE9               	movlw	low (_DWD+16)
   554  00808E  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   555  008090  0E01               	movlw	high (_DWD+16)
   556  008092  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   557  008094  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   558  008096  6BAE               	clrf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   559  008098  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   560  00809A  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   561  00809C  EC60  F01F         	call	_SetStatus	;wreg free
   562                           ;print.c: 115: RestartKol(2);
   563  0080A0  0E02               	movlw	2
   564  0080A2  EF5A  F021         	goto	_RestartKol
   565                           ;print.c: 116: }
   566  0080A6                     __end_of_PrintNstCW:
   567                           ;print.c: 118: void EndNst(void)
   568                           ;print.c: 119: {
   569  0080A6                     _EndNst:
   570  000000                     
   571                           ;print.c: 120: ResetKol(2);
   572  0080A6  0E02               	movlw	2
   573  0080A8  EF4A  F021         	goto	_ResetKol
   574                           ;print.c: 121: }
   575  0080AC                     __end_of_EndNst:
   576                           ;print.c: 125: void PrintOFF(void)
   577                           ;print.c: 126: {
   578  0080AC                     _PrintOFF:
   579  000000                     
   580                           ;print.c: 127: SetStatus(&PWD[4],0b0000000001000
      +                          000|0b0000000010000000|0b1000000000000000,0b1111
      +                          111111111111);
   581  0080AC  0100               	movlb	__Lparam shr (0+8)
   582  0080AE  0ED1               	movlw	low (_PWD+16)
   583  0080B0  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   584  0080B2  0E01               	movlw	high (_PWD+16)
   585  0080B4  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   586  0080B6  0EC0               	movlw	192
   587  0080B8  6FAD               	movwf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   588  0080BA  0E80               	movlw	128
   589  0080BC  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   590  0080BE  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   591  0080C0  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   592  0080C2  EC60  F01F         	call	_SetStatus	;wreg free
   593                           ;print.c: 128: SetData(&PWD[4],0b11111111,0b1111
      +                          1111);
   594  0080C6  0100               	movlb	__Lparam shr (0+8)
   595  0080C8  0ED1               	movlw	low (_PWD+16)
   596  0080CA  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   597  0080CC  0E01               	movlw	high (_PWD+16)
   598  0080CE  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   599  0080D0  69AD               	setf	(?_SetData+2)^(__Lparam& (0+65280)),b
   600  0080D2  69AE               	setf	(?_SetData+3)^(__Lparam& (0+65280)),b
   601  0080D4  EC4A  F01F         	call	_SetData	;wreg free
   602                           ;print.c: 133: if(RD0) RB4=1;
   603  0080D8  A083               	btfss	3971,0,c	;volatile
   604  0080DA  D002               	goto	l35
   605  0080DC  8881               	bsf	3969,4,c	;volatile
   606  0080DE  0012               	return	
   607  0080E0                     l35:
   608                           ;print.c: 134: else RB4=0;
   609  0080E0  9881               	bcf	3969,4,c	;volatile
   610                           ;print.c: 135: }
   611  0080E2  0012               	return	
   612  0080E4                     __end_of_PrintOFF:
   613                           ;print.c: 137: void EndOFF(void)
   614                           ;print.c: 138: {
   615  0080E4                     _EndOFF:
   616  000000                     
   617                           ;print.c: 139: RB4=0;
   618  0080E4  9881               	bcf	3969,4,c	;volatile
   619                           ;print.c: 140: SetStatus(&PWD[4],0b0000000001000
      +                          000|0b0000000010000000,0b1111111111111111);
   620  0080E6  0100               	movlb	__Lparam shr (0+8)
   621  0080E8  0ED1               	movlw	low (_PWD+16)
   622  0080EA  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   623  0080EC  0E01               	movlw	high (_PWD+16)
   624  0080EE  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   625  0080F0  0EC0               	movlw	192
   626  0080F2  6FAD               	movwf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   627  0080F4  6BAE               	clrf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   628  0080F6  D02D               	goto	L2
   629                           ;print.c: 141: }
   630  0080F8                     __end_of_EndOFF:
   631                           ;print.c: 146: void PrintCW(const unsigned char 
      +                          tm,const unsigned char krp)
   632                           ;print.c: 147: {
   633  0080F8  00A8               	dw	?_PrintCW
   634  0080FA                     _PrintCW:
   635  000000                     
   636                           ;_tm stored from wreg
   637  0080FA  0100               	movlb	__Lparam shr (0+8)
   638  0080FC  6FA9               	movwf	?a_PrintCW^(__Lparam& (0+65280)),b
   639                           ;print.c: 148: if(!krp) SetStatus(&PWD[5],0b0100
      +                          000000000000|0b1000000000000000,0b11111111111111
      +                          11);
   640  0080FE  51A8               	movf	?_PrintCW^(__Lparam& (0+65280)),w
   641  008100  E10C               	bnz	l39
   642  008102  0ED5               	movlw	low (_PWD+20)
   643  008104  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   644  008106  0E01               	movlw	high (_PWD+20)
   645  008108  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   646  00810A  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   647  00810C  0EC0               	movlw	192
   648  00810E  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   649  008110  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   650  008112  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   651  008114  EC60  F01F         	call	_SetStatus	;wreg free
   652  008118  D00C               	goto	l40
   653  00811A                     l39:
   654                           ;print.c: 149: else SetStatus(&PWD[5],0b01000000
      +                          00000000|0b0000100000000000|0b1000000000000000,0
      +                          b1111111111111111);
   655  00811A  0100               	movlb	__Lparam shr (0+8)
   656  00811C  0ED5               	movlw	low (_PWD+20)
   657  00811E  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   658  008120  0E01               	movlw	high (_PWD+20)
   659  008122  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   660  008124  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   661  008126  0EC8               	movlw	200
   662  008128  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   663  00812A  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   664  00812C  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   665  00812E  EC60  F01F         	call	_SetStatus	;wreg free
   666  008132                     l40:
   667                           ;print.c: 150: SetData(&PWD[5],0,tm);
   668  008132  0100               	movlb	__Lparam shr (0+8)
   669  008134  0ED5               	movlw	low (_PWD+20)
   670  008136  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   671  008138  0E01               	movlw	high (_PWD+20)
   672  00813A  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   673  00813C  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   674  00813E  51A9               	movf	?a_PrintCW^(__Lparam& (0+65280)),w
   675  008140  D020               	goto	L3
   676                           ;print.c: 151: }
   677  008142                     __end_of_PrintCW:
   678                           ;print.c: 153: void EndCW(void)
   679                           ;print.c: 154: {
   680  008142                     _EndCW:
   681  000000                     
   682                           ;print.c: 155: SetStatus(&PWD[5],0b0100000000000
      +                          000,0b1111111111111111);
   683  008142  0100               	movlb	__Lparam shr (0+8)
   684  008144  0ED5               	movlw	low (_PWD+20)
   685  008146  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   686  008148  0E01               	movlw	high (_PWD+20)
   687  00814A  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   688  00814C  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   689  00814E  0E40               	movlw	64
   690  008150  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   691  008152                     L2:
   692  008152  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   693  008154  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   694  008156  EF60  F01F         	goto	_SetStatus	;wreg free
   695                           ;print.c: 156: }
   696  00815A                     __end_of_EndCW:
   697                           ;print.c: 160: void PrintHex(const unsigned char
      +                           tm)
   698                           ;print.c: 161: {
   699  00815A                     _PrintHex:
   700  000000                     
   701                           ;_tm stored from wreg
   702  00815A  0100               	movlb	__Lparam shr (0+8)
   703  00815C  6FA8               	movwf	?a_PrintHex^(__Lparam& (0+65280)),b
   704                           ;print.c: 162: SetStatus(&PWD[5],0b0010000000000
      +                          000,0b1111111111111111);
   705  00815E  0ED5               	movlw	low (_PWD+20)
   706  008160  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   707  008162  0E01               	movlw	high (_PWD+20)
   708  008164  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   709  008166  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   710  008168  0E20               	movlw	32
   711  00816A  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   712  00816C  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   713  00816E  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   714  008170  EC60  F01F         	call	_SetStatus	;wreg free
   715                           ;print.c: 163: SetData(&PWD[5],0,tm);
   716  008174  0100               	movlb	__Lparam shr (0+8)
   717  008176  0ED5               	movlw	low (_PWD+20)
   718  008178  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   719  00817A  0E01               	movlw	high (_PWD+20)
   720  00817C  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   721  00817E  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   722  008180  51A8               	movf	?a_PrintHex^(__Lparam& (0+65280)),w
   723  008182                     L3:
   724  008182  6FAE               	movwf	(?_SetData+3)^(__Lparam& (0+65280)),b
   725  008184  EF4A  F01F         	goto	_SetData	;wreg free
   726                           ;print.c: 164: }
   727  008188                     __end_of_PrintHex:
   728                           ;print.c: 168: void SetDiode(unsigned char nrd, 
      +                          unsigned char stn);
   729                           ;print.c: 169: void TestScr(void)
   730                           ;print.c: 170: {
   731  008188                     _TestScr:
   732  000000                     
   733                           ;print.c: 171: SetStatus(&PWD[5],0b0000000000000
      +                          000|0b0000010000000000|0b0000100000000000,0b1111
      +                          111111111111);
   734  008188  0100               	movlb	__Lparam shr (0+8)
   735  00818A  0ED5               	movlw	low (_PWD+20)
   736  00818C  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   737  00818E  0E01               	movlw	high (_PWD+20)
   738  008190  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   739  008192  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   740  008194  0E0C               	movlw	12
   741  008196  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   742  008198  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   743  00819A  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   744  00819C  EC60  F01F         	call	_SetStatus	;wreg free
   745                           ;print.c: 172: SetData(&PWD[5],0b00000000,0b0000
      +                          0000);
   746  0081A0  0100               	movlb	__Lparam shr (0+8)
   747  0081A2  0ED5               	movlw	low (_PWD+20)
   748  0081A4  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   749  0081A6  0E01               	movlw	high (_PWD+20)
   750  0081A8  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   751  0081AA  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   752  0081AC  6BAE               	clrf	(?_SetData+3)^(__Lparam& (0+65280)),b
   753  0081AE  EC4A  F01F         	call	_SetData	;wreg free
   754                           ;print.c: 174: SetDiode(0b00000001|0b00001000|0b
      +                          00000010|0b00000100,1);
   755  0081B2  0E01               	movlw	1
   756  0081B4  0100               	movlb	__Lparam shr (0+8)
   757  0081B6  6FA8               	movwf	?_SetDiode^(__Lparam& (0+65280)),b
   758  0081B8  D017               	goto	L4
   759                           ;print.c: 176: }
   760  0081BA                     __end_of_TestScr:
   761                           ;print.c: 177: void EndTestScr(void)
   762                           ;print.c: 178: {
   763  0081BA                     _EndTestScr:
   764  000000                     
   765                           ;print.c: 179: SetStatus(&PWD[5],0b0100000000000
      +                          000,0b1111111111111111);
   766  0081BA  0100               	movlb	__Lparam shr (0+8)
   767  0081BC  0ED5               	movlw	low (_PWD+20)
   768  0081BE  6FAB               	movwf	?_SetStatus^(__Lparam& (0+65280)),b
   769  0081C0  0E01               	movlw	high (_PWD+20)
   770  0081C2  6FAC               	movwf	(?_SetStatus+1)^(__Lparam& (0+65280)),b
   771  0081C4  6BAD               	clrf	(?_SetStatus+2)^(__Lparam& (0+65280)),b
   772  0081C6  0E40               	movlw	64
   773  0081C8  6FAE               	movwf	(?_SetStatus+3)^(__Lparam& (0+65280)),b
   774  0081CA  69AF               	setf	(?_SetStatus+4)^(__Lparam& (0+65280)),b
   775  0081CC  69B0               	setf	(?_SetStatus+5)^(__Lparam& (0+65280)),b
   776  0081CE  EC60  F01F         	call	_SetStatus	;wreg free
   777                           ;print.c: 180: SetData(&PWD[5],0,0);
   778  0081D2  0100               	movlb	__Lparam shr (0+8)
   779  0081D4  0ED5               	movlw	low (_PWD+20)
   780  0081D6  6FAB               	movwf	?_SetData^(__Lparam& (0+65280)),b
   781  0081D8  0E01               	movlw	high (_PWD+20)
   782  0081DA  6FAC               	movwf	(?_SetData+1)^(__Lparam& (0+65280)),b
   783  0081DC  6BAD               	clrf	(?_SetData+2)^(__Lparam& (0+65280)),b
   784  0081DE  6BAE               	clrf	(?_SetData+3)^(__Lparam& (0+65280)),b
   785  0081E0  EC4A  F01F         	call	_SetData	;wreg free
   786                           ;print.c: 182: SetDiode(0b00000001|0b00001000|0b
      +                          00000010|0b00000100,0);
   787  0081E4  0100               	movlb	__Lparam shr (0+8)
   788  0081E6  6BA8               	clrf	?_SetDiode^(__Lparam& (0+65280)),b
   789  0081E8                     L4:
   790  0081E8  0E0F               	movlw	15
   791  0081EA  D001               	goto	_SetDiode
   792                           ;print.c: 184: }
   793  0081EC                     __end_of_EndTestScr:
   794                           ;print.c: 191: void SetDiode(unsigned char wd, u
      +                          nsigned char stn)
   795                           ;print.c: 192: {
   796  0081EC  00A8               	dw	?_SetDiode
   797  0081EE                     _SetDiode:
   798  000000                     
   799                           ;_wd stored from wreg
   800  0081EE  0100               	movlb	__Lparam shr (0+8)
   801  0081F0  6FA9               	movwf	?a_SetDiode^(__Lparam& (0+65280)),b
   802                           ;print.c: 193: if(stn) Swsdid(wd);
   803  0081F2  51A8               	movf	?_SetDiode^(__Lparam& (0+65280)),w
   804  0081F4  E003               	bz	l46
   805  0081F6  51A9               	movf	?a_SetDiode^(__Lparam& (0+65280)),w
   806  0081F8  EF35  F01F         	goto	_Swsdid
   807  0081FC                     l46:
   808                           ;print.c: 194: else Rwsdid(wd);
   809  0081FC  0100               	movlb	__Lparam shr (0+8)
   810  0081FE  51A9               	movf	?a_SetDiode^(__Lparam& (0+65280)),w
   811  008200  EF3C  F01F         	goto	_Rwsdid
   812                           ;print.c: 195: }
   813  008204                     __end_of_SetDiode:
   814  000000                     
   815  000000                     
   816  000000                     
   817  000000                     
   818  000000                     
   819  000000                     
   820  000000                     
   821  000000                     
   822  000000                     
   823  000000                     
   824  000000                     
   825  000000                     
   826  000000                     
   827  000000                     
   828  000000                     
   829  000000                     
   830  000000                     
   831  000000                     
   832  000000                     
   833  000000                     
   834  000000                     
   835  000000                     
   836  000000                     
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382                           
  1383                           	psect	temp
  1384  000000                     btemp:
  1385  000000                     	ds	2
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           fsr2l	equ	0xFD9


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Thu Jul 12 08:02:17 2018

         ?_SetDiode 00A8            _ResetKol 4294  
         _SetStatus 3EC0            _PrintOFF 80AC  
          _PrintWPR 7FBA            _PrintHex 815A  
          _PrintErr 7E80                  l22 7EDC  
                l31 8072                  l23 7F34  
                l40 8132                  l32 808A  
                l26 7F64                  l35 80E0  
                l46 81FC                  l39 811A  
                u66 7F7A                  u68 7F92  
         ?_PrintErr 00A9          ?_SetStatus 00AB  
         ?a_PrintCW 00A9                 _DWD 01D9  
               _PWD 01C1          _RestartKol 42B4  
        ?a_SetDiode 00A9          _PrintNstCW 802C  
__end_of_PrintNstCW 80A6          ?a_PrintHex 00A8  
        ?a_PrintErr 00AA                _RNst 8002  
              _Znak 1094                fsr2l 000FD9  
              btemp 0000         ?_PrintNstCW 00A8  
           ?_SetPoz 00AB     __end_of_PrintCW 8142  
   __end_of_TestScr 81BA     __end_of_PrintPR 7FBA  
  _AllKolToFirstPoz 42D4       __end_of_EndCW 815A  
     __end_of_EndPR 8002               _EndCW 8142  
             _EndPR 7FFC          used_btemp0 0001  
        used_btemp1 0001               _WswOn 3E8C  
             tablat 000FF5               status 000FD8  
           _SetData 3E94    __end_of_SetDiode 8204  
          ?_SetData 00AB             __Lparam 00A8  
           _PrintCW 80FA             _TestScr 8188  
           _PrintPR 7F52            ?_PrintCW 00A8  
          ?_PrintPR 00A9    __end_of_PrintOFF 80E4  
  __end_of_PrintWPR 7FFC    __end_of_PrintHex 8188  
  __end_of_PrintErr 7F4A             __ramtop 1000  
    __end_of_EndOFF 80F8      __end_of_EndErr 7F50  
    __end_of_EndNst 80AC      __end_of_ClsScr 7E76  
        _EndTestScr 81BA  __end_of_EndTestScr 81EC  
      __end_of_RNst 802A              _EndOFF 80E4  
            _EndErr 7F4A              _EndNst 80A6  
            _ClsScr 7E72              _SetPoz 4152  
         _EndClsScr 7E76              _Rwsdid 3E78  
            _Swsdid 3E6A              _WswOff 3E86  
 __end_of_EndClsScr 7E7E              tblptrh 000FF7  
            tblptrl 000FF6            _SetDiode 81EE  
