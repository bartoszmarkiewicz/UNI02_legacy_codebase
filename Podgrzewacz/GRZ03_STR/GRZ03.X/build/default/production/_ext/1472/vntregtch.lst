

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Thu Jul 12 08:02:18 2018


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	const,global,class=CODE,delta=1
     6                           	psect	bss,global,class=RAM,space=1,delta=1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
    99                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   100                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   101                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   102                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   103                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   104                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   105                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   106                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   107                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   108                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   109                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   110                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   111                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   112                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   113                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   114                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   115                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   116                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   117                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   118                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   119                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   120                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   121                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   122                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   123                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   124                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   125                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   126                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   127                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   128                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   129                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   130                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   131                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   132                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   133                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   134                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   135                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   136                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   137                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   138                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   139                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   140                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   141                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   142                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   143                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   144                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   145                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   146                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   147                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   148                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   149                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   150                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   151                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   152                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   153                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   154                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   155                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   156                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   157                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   158                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   159                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   160                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   161                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   162                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   163                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   164                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   165                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   166                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   167                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   168                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   169                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   170                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   171                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   172                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   173                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   174                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   175                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   176                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   177                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   178                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   179                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   180                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   181                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   182                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   183                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   184                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   185                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   186                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   187                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   188                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   189                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   190                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   191                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   192                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   193                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   194                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   195                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   196                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   197                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   198  000000                     _SetKalPWM$pwm	set	?_SetKalPWM
   199                           
   200                           	psect	text
   201                           ;vntregtch.c: 57: unsigned char SetKalPWM(unsign
      +                          ed char krk,unsigned char pwm)
   202                           ;vntregtch.c: 58: {
   203  006D66  00A8               	dw	?_SetKalPWM
   204                           ;	_w assigned to ?a_CalkTimStr+1
   205  000000                     _CalkTimStr$w	set	?a_CalkTimStr+1
   206                           ;	_minv assigned to ?a_CalkTimStr+0
   207  000000                     _CalkTimStr$minv	set	?a_CalkTimStr
   208                           ;	_tmp assigned to ?a_VNTToProc+0
   209  000000                     _VNTToProc$tmp	set	?a_VNTToProc
   210                           ;	_tmp assigned to ?a_ProcToVNT+0
   211  000000                     _ProcToVNT$tmp	set	?a_ProcToVNT
   212                           ;	_nst assigned to ?a_CalkVNTtoPopPWM+0
   213  000000                     _CalkVNTtoPopPWM$nst	set	?a_CalkVNTtoPopPWM
   214                           ;       param _pop assigned to ?_CalkVNTtoPopPWM
      +                          +0
   215  000000                     _CalkVNTtoPopPWM$pop	set	?_CalkVNTtoPopPWM
   216                           ;	_nst assigned to ?a_CalkVNTtoPWM+0
   217  000000                     _CalkVNTtoPWM$nst	set	?a_CalkVNTtoPWM
   218                           ;	_pw assigned to ?a_DVNTtoPopPWM+9
   219  000000                     _DVNTtoPopPWM$pw	set	?a_DVNTtoPopPWM+9
   220                           ;	_wsp assigned to ?a_DVNTtoPopPWM+5
   221  000000                     _DVNTtoPopPWM$wsp	set	?a_DVNTtoPopPWM+5
   222                           ;	_v1 assigned to ?a_DVNTtoPopPWM+4
   223  000000                     _DVNTtoPopPWM$v1	set	?a_DVNTtoPopPWM+4
   224                           ;	_dv assigned to ?a_DVNTtoPopPWM+3
   225  000000                     _DVNTtoPopPWM$dv	set	?a_DVNTtoPopPWM+3
   226                           ;	_v2 assigned to ?a_DVNTtoPopPWM+2
   227  000000                     _DVNTtoPopPWM$v2	set	?a_DVNTtoPopPWM+2
   228                           ;	_p1 assigned to ?a_DVNTtoPopPWM+1
   229  000000                     _DVNTtoPopPWM$p1	set	?a_DVNTtoPopPWM+1
   230                           ;	_p2 assigned to ?a_DVNTtoPopPWM+0
   231  000000                     _DVNTtoPopPWM$p2	set	?a_DVNTtoPopPWM
   232                           ;       param _pop assigned to ?_DVNTtoPopPWM+0
   233  000000                     _DVNTtoPopPWM$pop	set	?_DVNTtoPopPWM
   234                           ;	_pw assigned to ?a_DVNTtoPWM+9
   235  000000                     _DVNTtoPWM$pw	set	?a_DVNTtoPWM+9
   236                           ;	_wsp assigned to ?a_DVNTtoPWM+5
   237  000000                     _DVNTtoPWM$wsp	set	?a_DVNTtoPWM+5
   238                           ;	_v1 assigned to ?a_DVNTtoPWM+4
   239  000000                     _DVNTtoPWM$v1	set	?a_DVNTtoPWM+4
   240                           ;	_dv assigned to ?a_DVNTtoPWM+3
   241  000000                     _DVNTtoPWM$dv	set	?a_DVNTtoPWM+3
   242                           ;	_v2 assigned to ?a_DVNTtoPWM+2
   243  000000                     _DVNTtoPWM$v2	set	?a_DVNTtoPWM+2
   244                           ;	_p1 assigned to ?a_DVNTtoPWM+1
   245  000000                     _DVNTtoPWM$p1	set	?a_DVNTtoPWM+1
   246                           ;	_p2 assigned to ?a_DVNTtoPWM+0
   247  000000                     _DVNTtoPWM$p2	set	?a_DVNTtoPWM
   248                           ;	_krk assigned to ?a_SetKalPWM+1
   249  000000                     _SetKalPWM$krk	set	?a_SetKalPWM+1
   250                           ;	_tim assigned to ?a_SetKalPWM+0
   251  000000                     _SetKalPWM$tim	set	?a_SetKalPWM
   252  006D68                     _SetKalPWM:
   253  000000                     
   254                           ; _krk loaded to fsr2l
   255  006D68  6ED9               	movwf	fsr2l,c
   256                           ;_krk stored from fsr2l
   257                           ;vntregtch.c: 59: unsigned char tim,ppp;
   258  006D6A  50D9               	movf	fsr2l,w,c
   259  006D6C  0D05               	mullw	5
   260  006D6E  50F3               	movf	prodl,w,c
   261  006D70  0F23               	addlw	35
   262  006D72  0100               	movlb	__Lparam shr (0+8)
   263  006D74  6FA8               	movwf	?a_SetKalPWM^(__Lparam& (0+65280)),b
   264                           ;_krk stored from fsr2l
   265  006D76  50D9               	movf	fsr2l,w,c
   266  006D78  6FA9               	movwf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),b
   267                           ;vntregtch.c: 64: if(RTdS(8)<tim)
   268  006D7A  0E08               	movlw	8
   269  006D7C  EC04  F046         	call	_RTdS
   270  006D80  6E00               	movwf	btemp,c
   271  006D82  0100               	movlb	__Lparam shr (0+8)
   272  006D84  51A8               	movf	?a_SetKalPWM^(__Lparam& (0+65280)),w
   273  006D86  5C00               	subwf	btemp,w,c
   274  006D88  E204               	bc	l11
   275                           ;vntregtch.c: 65: {
   276  006D8A  51A8               	movf	?_SetKalPWM^(__Lparam& (0+65280)),w
   277  006D8C  ECB1  F045         	call	_WritePWM
   278                           ;vntregtch.c: 67: return 0;
   279  006D90  0C00               	retlw	0
   280  006D92                     l11:
   281                           ;vntregtch.c: 69: else
   282  006D92  0E08               	movlw	8
   283  006D94  ECF2  F045         	call	_StartRTdS
   284                           ;vntregtch.c: 72: Kvnt[krk].dvnt=(unsigned char)
      +                           (round(M.rVVNT/100.0));
   285  006D98  6A00               	clrf	btemp,c
   286  006D9A  0EC8               	movlw	200
   287  006D9C  6E01               	movwf	btemp+1,c
   288  006D9E  0E42               	movlw	66
   289  006DA0  6E02               	movwf	btemp+2,c
   290  006DA2  C000  F0AA         	movff	btemp,?a_SetKalPWM+2
   291  006DA6  C001  F0AB         	movff	btemp+1,?a_SetKalPWM+3
   292  006DAA  C002  F0AC         	movff	btemp+2,?a_SetKalPWM+4
   293  006DAE  EE00  F085         	lfsr	0,_M+48
   294  006DB2  CFEE F000          	movff	postinc0,btemp
   295  006DB6  CFED F001          	movff	postdec0,btemp+1
   296  006DBA  EC46  F04C         	call	lwtoft
   297  006DBE  C0AA  F003         	movff	?a_SetKalPWM+2,btemp+3
   298  006DC2  C0AB  F004         	movff	?a_SetKalPWM+3,btemp+4
   299  006DC6  C0AC  F005         	movff	?a_SetKalPWM+4,btemp+5
   300  006DCA  EC8F  F049         	call	ftdiv
   301  006DCE  C000  F0B6         	movff	btemp,?_round
   302  006DD2  C001  F0B7         	movff	btemp+1,?_round+1
   303  006DD6  C002  F0B8         	movff	btemp+2,?_round+2
   304  006DDA  EC12  F04A         	call	_round	;wreg free
   305  006DDE  EC10  F04B         	call	fttol
   306  006DE2  0100               	movlb	__Lparam shr (0+8)
   307  006DE4  51A9               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   308  006DE6  0D02               	mullw	2
   309  006DE8  0E7B               	movlw	low _Kvnt
   310  006DEA  24F3               	addwf	prodl,w,c
   311  006DEC  6EE9               	movwf	fsr0l,c
   312  006DEE  0E02               	movlw	high _Kvnt
   313  006DF0  20F4               	addwfc	prodh,w,c
   314  006DF2  6EEA               	movwf	fsr0h,c
   315  006DF4  C000  FFEF         	movff	btemp,indf0
   316                           ;vntregtch.c: 73: switch(DtKNF.rfan)
   317  006DF8  D047               	goto	l14
   318  006DFA                     l15:
   319  006DFA  D03A               	goto	l20
   320                           ;vntregtch.c: 74: {
   321                           ;vntregtch.c: 76: {
   322                           ;vntregtch.c: 78: break;
   323  006DFC                     l16:
   324                           ;vntregtch.c: 79: }
   325                           ;vntregtch.c: 81: {
   326  006DFC  0E02               	movlw	2
   327  006DFE  6ED9               	movwf	fsr2l,c
   328                           ;vntregtch.c: 83: if((krk>2)||(Kvnt[krk].dvnt>12
      +                          )) ppp=0;
   329  006E00  0100               	movlb	__Lparam shr (0+8)
   330  006E02  65A9               	cpfsgt	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),b
   331  006E04  D001               	goto	u21
   332  006E06  D00D               	goto	u40
   333  006E08                     u21:
   334  006E08  51A9               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   335  006E0A  0D02               	mullw	2
   336  006E0C  0E7B               	movlw	low _Kvnt
   337  006E0E  24F3               	addwf	prodl,w,c
   338  006E10  6EE9               	movwf	fsr0l,c
   339  006E12  0E02               	movlw	high _Kvnt
   340  006E14  20F4               	addwfc	prodh,w,c
   341  006E16  6EEA               	movwf	fsr0h,c
   342  006E18  50EF               	movf	indf0,w,c
   343  006E1A  6E00               	movwf	btemp,c
   344  006E1C  0E0D               	movlw	13
   345  006E1E  5C00               	subwf	btemp,w,c
   346  006E20  B0D8               	btfsc	status,0,c
   347  006E22                     u40:
   348  006E22  6AD9               	clrf	fsr2l,c
   349                           ;vntregtch.c: 84: if((pwm+ppp)<=0xff)
   350  006E24  50D9               	movf	fsr2l,w,c
   351  006E26  C0A8  F000         	movff	?_SetKalPWM,btemp
   352  006E2A  6A01               	clrf	btemp+1,c
   353  006E2C  2600               	addwf	btemp,f,c
   354  006E2E  0E00               	movlw	0
   355  006E30  2201               	addwfc	btemp+1,f,c
   356  006E32  5001               	movf	btemp+1,w,c
   357  006E34  0A80               	xorlw	128
   358  006E36  0F7F               	addlw	-129
   359  006E38  0E00               	movlw	0
   360  006E3A  B4D8               	btfsc	status,2,c
   361  006E3C  5C00               	subwf	btemp,w,c
   362  006E3E  E20D               	bc	l18
   363                           ;vntregtch.c: 85: {
   364  006E40  0100               	movlb	__Lparam shr (0+8)
   365  006E42  51A9               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   366  006E44  0D02               	mullw	2
   367  006E46  0E7C               	movlw	low (_Kvnt+1)
   368  006E48  24F3               	addwf	prodl,w,c
   369  006E4A  6EE9               	movwf	fsr0l,c
   370  006E4C  0E02               	movlw	high (_Kvnt+1)
   371  006E4E  20F4               	addwfc	prodh,w,c
   372  006E50  6EEA               	movwf	fsr0h,c
   373  006E52  50D9               	movf	fsr2l,w,c
   374  006E54  25A8               	addwf	?_SetKalPWM^(__Lparam& (0+65280)),w
   375  006E56                     L1:
   376  006E56  6EEF               	movwf	indf0,c
   377                           ;vntregtch.c: 87: }
   378  006E58  0C01               	retlw	1
   379  006E5A                     l18:
   380                           ;vntregtch.c: 88: else
   381  006E5A  0100               	movlb	__Lparam shr (0+8)
   382  006E5C  51A9               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   383  006E5E  0D02               	mullw	2
   384  006E60  0E7C               	movlw	low (_Kvnt+1)
   385  006E62  24F3               	addwf	prodl,w,c
   386  006E64  6EE9               	movwf	fsr0l,c
   387  006E66  0E02               	movlw	high (_Kvnt+1)
   388  006E68  20F4               	addwfc	prodh,w,c
   389  006E6A  6EEA               	movwf	fsr0h,c
   390  006E6C  0EFF               	movlw	-1
   391  006E6E  D7F3               	goto	L1
   392                           ;vntregtch.c: 91: }
   393  006E70                     l20:
   394                           ;vntregtch.c: 93: }
   395                           ;vntregtch.c: 95: {
   396  006E70  0100               	movlb	__Lparam shr (0+8)
   397  006E72  51A9               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   398  006E74  0D02               	mullw	2
   399  006E76  0E7C               	movlw	low (_Kvnt+1)
   400  006E78  24F3               	addwf	prodl,w,c
   401  006E7A  6EE9               	movwf	fsr0l,c
   402  006E7C  0E02               	movlw	high (_Kvnt+1)
   403  006E7E  20F4               	addwfc	prodh,w,c
   404  006E80  6EEA               	movwf	fsr0h,c
   405  006E82  C0A8  FFEF         	movff	?_SetKalPWM,indf0
   406                           ;vntregtch.c: 97: break;
   407  006E86  0C01               	retlw	1
   408  006E88                     l14:
   409  006E88  C053  FFE8         	movff	_DtKNF+14,wreg
   410  006E8C  0A00               	xorlw	0
   411  006E8E  E0B5               	bz	l15
   412  006E90  0A01               	xorlw	1
   413  006E92  E0B4               	bz	l16
   414  006E94  0A03               	xorlw	3
   415  006E96  E0EC               	bz	l20
   416                           ;vntregtch.c: 100: }
   417  006E98  0C01               	retlw	1
   418                           ;vntregtch.c: 102: }
   419  006E9A                     __end_of_SetKalPWM:
   420                           ;vntregtch.c: 107: unsigned char KalibracjaVNT(v
      +                          oid)
   421                           ;vntregtch.c: 108: {
   422  006E9A                     _KalibracjaVNT:
   423  000000                     
   424                           ;vntregtch.c: 109: static unsigned char k=0,krok
      +                          =0;
   425  006E9A  6AF3               	clrf	prodl,c
   426  006E9C  6AF4               	clrf	prodh,c
   427                           ;vntregtch.c: 116: Kvnt[0].dvnt=ReadEEVNT0_V();
   428  006E9E  EC58  F035         	call	_ReadEEVNT0_V	;wreg free
   429  006EA2  CFE8 F27B          	movff	wreg,_Kvnt
   430                           ;vntregtch.c: 117: Kvnt[0].dpwm=ReadEEVNT0_P();
   431  006EA6  EC61  F035         	call	_ReadEEVNT0_P	;wreg free
   432  006EAA  CFE8 F27C          	movff	wreg,_Kvnt+1
   433                           ;vntregtch.c: 119: Kvnt[1].dvnt=ReadEEVNT1_V();
   434  006EAE  EC86  F035         	call	_ReadEEVNT1_V	;wreg free
   435  006EB2  CFE8 F27D          	movff	wreg,_Kvnt+2
   436                           ;vntregtch.c: 120: Kvnt[1].dpwm=ReadEEVNT1_P();
   437  006EB6  EC8F  F035         	call	_ReadEEVNT1_P	;wreg free
   438  006EBA  CFE8 F27E          	movff	wreg,_Kvnt+3
   439                           ;vntregtch.c: 122: Kvnt[2].dvnt=ReadEEVNT2_V();
   440  006EBE  ECB4  F035         	call	_ReadEEVNT2_V	;wreg free
   441  006EC2  CFE8 F27F          	movff	wreg,_Kvnt+4
   442                           ;vntregtch.c: 123: Kvnt[2].dpwm=ReadEEVNT2_P();
   443  006EC6  ECBD  F035         	call	_ReadEEVNT2_P	;wreg free
   444  006ECA  CFE8 F280          	movff	wreg,_Kvnt+5
   445                           ;vntregtch.c: 125: Kvnt[3].dvnt=ReadEEVNT3_V();
   446  006ECE  ECE2  F035         	call	_ReadEEVNT3_V	;wreg free
   447  006ED2  CFE8 F281          	movff	wreg,_Kvnt+6
   448                           ;vntregtch.c: 126: Kvnt[3].dpwm=ReadEEVNT3_P();
   449  006ED6  ECEB  F035         	call	_ReadEEVNT3_P	;wreg free
   450  006EDA  CFE8 F282          	movff	wreg,_Kvnt+7
   451                           ;vntregtch.c: 128: Kvnt[4].dvnt=ReadEEVNT4_V();
   452  006EDE  EC10  F036         	call	_ReadEEVNT4_V	;wreg free
   453  006EE2  CFE8 F283          	movff	wreg,_Kvnt+8
   454                           ;vntregtch.c: 129: Kvnt[4].dpwm=ReadEEVNT4_P();
   455  006EE6  EC19  F036         	call	_ReadEEVNT4_P	;wreg free
   456  006EEA  CFE8 F284          	movff	wreg,_Kvnt+9
   457                           ;vntregtch.c: 131: Kvnt[5].dvnt=ReadEEVNT5_V();
   458  006EEE  EC3E  F036         	call	_ReadEEVNT5_V	;wreg free
   459  006EF2  CFE8 F285          	movff	wreg,_Kvnt+10
   460                           ;vntregtch.c: 132: Kvnt[5].dpwm=ReadEEVNT5_P();
   461  006EF6  EC47  F036         	call	_ReadEEVNT5_P	;wreg free
   462  006EFA  CFE8 F286          	movff	wreg,_Kvnt+11
   463                           ;vntregtch.c: 134: Kvnt[6].dvnt=ReadEEVNT6_V();
   464  006EFE  EC6C  F036         	call	_ReadEEVNT6_V	;wreg free
   465  006F02  CFE8 F287          	movff	wreg,_Kvnt+12
   466                           ;vntregtch.c: 135: Kvnt[6].dpwm=ReadEEVNT6_P();
   467  006F06  EC75  F036         	call	_ReadEEVNT6_P	;wreg free
   468  006F0A  CFE8 F288          	movff	wreg,_Kvnt+13
   469                           ;vntregtch.c: 137: Kvnt[7].dvnt=ReadEEVNT7_V();
   470  006F0E  EC9C  F036         	call	_ReadEEVNT7_V	;wreg free
   471  006F12  CFE8 F289          	movff	wreg,_Kvnt+14
   472                           ;vntregtch.c: 138: Kvnt[7].dpwm=ReadEEVNT7_P();
   473  006F16  ECA5  F036         	call	_ReadEEVNT7_P	;wreg free
   474  006F1A  CFE8 F28A          	movff	wreg,_Kvnt+15
   475                           ;vntregtch.c: 140: ModParam();
   476  006F1E  EC9E  F044         	call	_ModParam	;wreg free
   477                           ;vntregtch.c: 143: k=0;
   478  006F22  010F               	movlb	F1519 shr (0+8)
   479  006F24  6B3F               	clrf	F1519& (0+255),b
   480                           ;vntregtch.c: 144: RD3=0;
   481  006F26  9683               	bcf	3971,3,c	;volatile
   482                           ;vntregtch.c: 145: StartRTS(4);
   483  006F28  0E04               	movlw	4
   484  006F2A  EC10  F046         	call	_StartRTS
   485                           ;vntregtch.c: 146: return 2;
   486  006F2E  0C02               	retlw	2
   487                           ;vntregtch.c: 237: }
   488  006F30                     __end_of_KalibracjaVNT:
   489                           ;vntregtch.c: 241: void OdczytDanychKalibracji()
   490                           ;vntregtch.c: 242: {
   491  006F30                     _OdczytDanychKalibracji:
   492  000000                     
   493                           ;vntregtch.c: 244: Kvnt[0].dvnt=ReadEEVNT0_V();
   494  006F30  EC58  F035         	call	_ReadEEVNT0_V	;wreg free
   495  006F34  CFE8 F27B          	movff	wreg,_Kvnt
   496                           ;vntregtch.c: 245: Kvnt[0].dpwm=ReadEEVNT0_P();
   497  006F38  EC61  F035         	call	_ReadEEVNT0_P	;wreg free
   498  006F3C  CFE8 F27C          	movff	wreg,_Kvnt+1
   499                           ;vntregtch.c: 246: Kvnt[1].dvnt=ReadEEVNT1_V();
   500  006F40  EC86  F035         	call	_ReadEEVNT1_V	;wreg free
   501  006F44  CFE8 F27D          	movff	wreg,_Kvnt+2
   502                           ;vntregtch.c: 247: Kvnt[1].dpwm=ReadEEVNT1_P();
   503  006F48  EC8F  F035         	call	_ReadEEVNT1_P	;wreg free
   504  006F4C  CFE8 F27E          	movff	wreg,_Kvnt+3
   505                           ;vntregtch.c: 248: Kvnt[2].dvnt=ReadEEVNT2_V();
   506  006F50  ECB4  F035         	call	_ReadEEVNT2_V	;wreg free
   507  006F54  CFE8 F27F          	movff	wreg,_Kvnt+4
   508                           ;vntregtch.c: 249: Kvnt[2].dpwm=ReadEEVNT2_P();
   509  006F58  ECBD  F035         	call	_ReadEEVNT2_P	;wreg free
   510  006F5C  CFE8 F280          	movff	wreg,_Kvnt+5
   511                           ;vntregtch.c: 250: Kvnt[3].dvnt=ReadEEVNT3_V();
   512  006F60  ECE2  F035         	call	_ReadEEVNT3_V	;wreg free
   513  006F64  CFE8 F281          	movff	wreg,_Kvnt+6
   514                           ;vntregtch.c: 251: Kvnt[3].dpwm=ReadEEVNT3_P();
   515  006F68  ECEB  F035         	call	_ReadEEVNT3_P	;wreg free
   516  006F6C  CFE8 F282          	movff	wreg,_Kvnt+7
   517                           ;vntregtch.c: 252: Kvnt[4].dvnt=ReadEEVNT4_V();
   518  006F70  EC10  F036         	call	_ReadEEVNT4_V	;wreg free
   519  006F74  CFE8 F283          	movff	wreg,_Kvnt+8
   520                           ;vntregtch.c: 253: Kvnt[4].dpwm=ReadEEVNT4_P();
   521  006F78  EC19  F036         	call	_ReadEEVNT4_P	;wreg free
   522  006F7C  CFE8 F284          	movff	wreg,_Kvnt+9
   523                           ;vntregtch.c: 254: Kvnt[5].dvnt=ReadEEVNT5_V();
   524  006F80  EC3E  F036         	call	_ReadEEVNT5_V	;wreg free
   525  006F84  CFE8 F285          	movff	wreg,_Kvnt+10
   526                           ;vntregtch.c: 255: Kvnt[5].dpwm=ReadEEVNT5_P();
   527  006F88  EC47  F036         	call	_ReadEEVNT5_P	;wreg free
   528  006F8C  CFE8 F286          	movff	wreg,_Kvnt+11
   529                           ;vntregtch.c: 256: Kvnt[6].dvnt=ReadEEVNT6_V();
   530  006F90  EC6C  F036         	call	_ReadEEVNT6_V	;wreg free
   531  006F94  CFE8 F287          	movff	wreg,_Kvnt+12
   532                           ;vntregtch.c: 257: Kvnt[6].dpwm=ReadEEVNT6_P();
   533  006F98  EC75  F036         	call	_ReadEEVNT6_P	;wreg free
   534  006F9C  CFE8 F288          	movff	wreg,_Kvnt+13
   535                           ;vntregtch.c: 258: Kvnt[7].dvnt=ReadEEVNT7_V();
   536  006FA0  EC9C  F036         	call	_ReadEEVNT7_V	;wreg free
   537  006FA4  CFE8 F289          	movff	wreg,_Kvnt+14
   538                           ;vntregtch.c: 259: Kvnt[7].dpwm=ReadEEVNT7_P();
   539  006FA8  ECA5  F036         	call	_ReadEEVNT7_P	;wreg free
   540  006FAC  CFE8 F28A          	movff	wreg,_Kvnt+15
   541                           ;vntregtch.c: 260: ModParam();
   542  006FB0  EF9E  F044         	goto	_ModParam	;wreg free
   543                           ;vntregtch.c: 261: }
   544  006FB4                     __end_of_OdczytDanychKalibracji:
   545                           ;vntregtch.c: 268: unsigned char DVNTtoPWM(unsig
      +                          ned char dvnt)
   546                           ;vntregtch.c: 269: {
   547  006FB4                     _DVNTtoPWM:
   548  000000                     
   549                           ;vntregtch.c: 270: unsigned char i,v1,v2,p1,p2,d
      +                          v;
   550  006FB4  6A00               	clrf	btemp,c
   551  006FB6  6A01               	clrf	btemp+1,c
   552  006FB8  6A02               	clrf	btemp+2,c
   553  006FBA  6A03               	clrf	btemp+3,c
   554                           ;vntregtch.c: 274: dv=dvnt;
   555  006FBC  0100               	movlb	__Lparam shr (0+8)
   556  006FBE  6FB6               	movwf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),b
   557                           ;vntregtch.c: 275: for(i=0;i<nkpkt;i++)
   558  006FC0  6AD9               	clrf	fsr2l,c
   559  006FC2  D0DA               	goto	l27
   560  006FC4                     l24:
   561                           ;vntregtch.c: 276: {
   562  006FC4  50D9               	movf	fsr2l,w,c
   563  006FC6  0D02               	mullw	2
   564  006FC8  0E7B               	movlw	low _Kvnt
   565  006FCA  24F3               	addwf	prodl,w,c
   566  006FCC  6EE9               	movwf	fsr0l,c
   567  006FCE  0E02               	movlw	high _Kvnt
   568  006FD0  20F4               	addwfc	prodh,w,c
   569  006FD2  6EEA               	movwf	fsr0h,c
   570  006FD4  50EF               	movf	indf0,w,c
   571  006FD6  0100               	movlb	__Lparam shr (0+8)
   572  006FD8  6FB5               	movwf	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),b
   573                           ;vntregtch.c: 278: p2=Kvnt[i].dpwm;
   574  006FDA  50D9               	movf	fsr2l,w,c
   575  006FDC  0D02               	mullw	2
   576  006FDE  0E7C               	movlw	low (_Kvnt+1)
   577  006FE0  24F3               	addwf	prodl,w,c
   578  006FE2  6EE9               	movwf	fsr0l,c
   579  006FE4  0E02               	movlw	high (_Kvnt+1)
   580  006FE6  20F4               	addwfc	prodh,w,c
   581  006FE8  6EEA               	movwf	fsr0h,c
   582  006FEA  50EF               	movf	indf0,w,c
   583  006FEC  6FB3               	movwf	?a_DVNTtoPWM^(__Lparam& (0+65280)),b
   584                           ;vntregtch.c: 279: if(i!=0)
   585  006FEE  50D9               	movf	fsr2l,w,c
   586  006FF0  E015               	bz	l28
   587                           ;vntregtch.c: 280: {
   588  006FF2  50D9               	movf	fsr2l,w,c
   589  006FF4  0D02               	mullw	2
   590  006FF6  0E79               	movlw	low (_Kvnt+-2)
   591  006FF8  24F3               	addwf	prodl,w,c
   592  006FFA  6EE9               	movwf	fsr0l,c
   593  006FFC  0E02               	movlw	high (_Kvnt+-2)
   594  006FFE  20F4               	addwfc	prodh,w,c
   595  007000  6EEA               	movwf	fsr0h,c
   596  007002  50EF               	movf	indf0,w,c
   597  007004  6FB7               	movwf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),b
   598                           ;vntregtch.c: 282: p1=Kvnt[i-1].dpwm;
   599  007006  50D9               	movf	fsr2l,w,c
   600  007008  0D02               	mullw	2
   601  00700A  0E7A               	movlw	low (_Kvnt+-1)
   602  00700C  24F3               	addwf	prodl,w,c
   603  00700E  6EE9               	movwf	fsr0l,c
   604  007010  0E02               	movlw	high (_Kvnt+-1)
   605  007012  20F4               	addwfc	prodh,w,c
   606  007014  6EEA               	movwf	fsr0h,c
   607  007016  50EF               	movf	indf0,w,c
   608  007018  6FB4               	movwf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),b
   609                           ;vntregtch.c: 283: }
   610  00701A  D003               	goto	l29
   611  00701C                     l28:
   612                           ;vntregtch.c: 284: else
   613  00701C  0100               	movlb	__Lparam shr (0+8)
   614  00701E  6BB7               	clrf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),b
   615                           ;vntregtch.c: 287: p1=0;
   616  007020  6BB4               	clrf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),b
   617  007022                     l29:
   618                           ;vntregtch.c: 288: }
   619  007022  0100               	movlb	__Lparam shr (0+8)
   620  007024  51B5               	movf	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),w
   621  007026  61B6               	cpfslt	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),b
   622  007028  D004               	goto	u91
   623  00702A  51B6               	movf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),w
   624  00702C  61B7               	cpfslt	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),b
   625  00702E  D001               	goto	u91
   626  007030  D004               	goto	u110
   627  007032                     u91:
   628  007032  0100               	movlb	__Lparam shr (0+8)
   629  007034  51B6               	movf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),w
   630  007036  63B5               	cpfseq	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),b
   631  007038  D09E               	goto	l30
   632  00703A                     u110:
   633                           ;vntregtch.c: 290: {
   634  00703A  0EE8               	movlw	232
   635  00703C  6E04               	movwf	btemp+4,c
   636  00703E  0E03               	movlw	3
   637  007040  6E05               	movwf	btemp+5,c
   638  007042  6A06               	clrf	btemp+6,c
   639  007044  6A07               	clrf	btemp+7,c
   640  007046  0100               	movlb	__Lparam shr (0+8)
   641  007048  51B4               	movf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),w
   642  00704A  5DB3               	subwf	?a_DVNTtoPWM^(__Lparam& (0+65280)),w
   643  00704C  6E00               	movwf	btemp,c
   644  00704E  6A01               	clrf	btemp+1,c
   645  007050  A0D8               	btfss	status,0,c
   646  007052  0601               	decf	btemp+1,f,c
   647  007054  6A02               	clrf	btemp+2,c
   648  007056  BE01               	btfsc	btemp+1,7,c
   649  007058  0602               	decf	btemp+2,f,c
   650  00705A  5002               	movf	btemp+2,w,c
   651  00705C  6E03               	movwf	btemp+3,c
   652  00705E  EC4B  F049         	call	almul
   653  007062  C000  F0B8         	movff	btemp,?a_DVNTtoPWM+5
   654  007066  C001  F0B9         	movff	btemp+1,?a_DVNTtoPWM+6
   655  00706A  C002  F0BA         	movff	btemp+2,?a_DVNTtoPWM+7
   656  00706E  C003  F0BB         	movff	btemp+3,?a_DVNTtoPWM+8
   657                           ;vntregtch.c: 292: wsp/=(v2-v1);
   658  007072  51B7               	movf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),w
   659  007074  5DB5               	subwf	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),w
   660  007076  6E04               	movwf	btemp+4,c
   661  007078  6A05               	clrf	btemp+5,c
   662  00707A  A0D8               	btfss	status,0,c
   663  00707C  0605               	decf	btemp+5,f,c
   664  00707E  6A06               	clrf	btemp+6,c
   665  007080  BE05               	btfsc	btemp+5,7,c
   666  007082  0606               	decf	btemp+6,f,c
   667  007084  5006               	movf	btemp+6,w,c
   668  007086  6E07               	movwf	btemp+7,c
   669  007088  0EB8               	movlw	low (?a_DVNTtoPWM+5)
   670  00708A  6EE9               	movwf	fsr0l,c
   671  00708C  0E00               	movlw	high (?a_DVNTtoPWM+5)
   672  00708E  6EEA               	movwf	fsr0h,c
   673  007090  EC5E  F04C         	call	aldiv_f
   674                           ;vntregtch.c: 293: pw=(signed long int)(dv-v1)*w
      +                          sp;
   675  007094  C0B8  F004         	movff	?a_DVNTtoPWM+5,btemp+4
   676  007098  C0B9  F005         	movff	?a_DVNTtoPWM+6,btemp+5
   677  00709C  C0BA  F006         	movff	?a_DVNTtoPWM+7,btemp+6
   678  0070A0  C0BB  F007         	movff	?a_DVNTtoPWM+8,btemp+7
   679  0070A4  51B7               	movf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),w
   680  0070A6  5DB6               	subwf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),w
   681  0070A8  6E00               	movwf	btemp,c
   682  0070AA  6A01               	clrf	btemp+1,c
   683  0070AC  A0D8               	btfss	status,0,c
   684  0070AE  0601               	decf	btemp+1,f,c
   685  0070B0  6A02               	clrf	btemp+2,c
   686  0070B2  BE01               	btfsc	btemp+1,7,c
   687  0070B4  0602               	decf	btemp+2,f,c
   688  0070B6  5002               	movf	btemp+2,w,c
   689  0070B8  6E03               	movwf	btemp+3,c
   690  0070BA  EC4B  F049         	call	almul
   691  0070BE  C000  F0BC         	movff	btemp,?a_DVNTtoPWM+9
   692  0070C2  C001  F0BD         	movff	btemp+1,?a_DVNTtoPWM+10
   693  0070C6  C002  F0BE         	movff	btemp+2,?a_DVNTtoPWM+11
   694  0070CA  C003  F0BF         	movff	btemp+3,?a_DVNTtoPWM+12
   695                           ;vntregtch.c: 294: pw/=1000;
   696  0070CE  0EE8               	movlw	232
   697  0070D0  6E04               	movwf	btemp+4,c
   698  0070D2  0E03               	movlw	3
   699  0070D4  6E05               	movwf	btemp+5,c
   700  0070D6  6A06               	clrf	btemp+6,c
   701  0070D8  6A07               	clrf	btemp+7,c
   702  0070DA  0EBC               	movlw	low (?a_DVNTtoPWM+9)
   703  0070DC  6EE9               	movwf	fsr0l,c
   704  0070DE  0E00               	movlw	high (?a_DVNTtoPWM+9)
   705  0070E0  6EEA               	movwf	fsr0h,c
   706  0070E2  EC5E  F04C         	call	aldiv_f
   707                           ;vntregtch.c: 296: pw+=p1;
   708  0070E6  51B4               	movf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),w
   709  0070E8  27BC               	addwf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),f,
      +                          b
   710  0070EA  0E01               	movlw	1
   711  0070EC  B0D8               	btfsc	status,0,c
   712  0070EE  27BD               	addwf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),f
      +                          ,b
   713  0070F0  B0D8               	btfsc	status,0,c
   714  0070F2  27BE               	addwf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),f
      +                          ,b
   715  0070F4  B0D8               	btfsc	status,0,c
   716  0070F6  27BF               	addwf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),f
      +                          ,b
   717                           ;vntregtch.c: 297: if(pw<0) pw=0;
   718  0070F8  AFBF               	btfss	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),7
      +                          ,b
   719  0070FA  D004               	goto	l31
   720  0070FC  6BBC               	clrf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),b
   721  0070FE  6BBD               	clrf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),b
   722  007100  6BBE               	clrf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),b
   723  007102  6BBF               	clrf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),b
   724  007104                     l31:
   725                           ;vntregtch.c: 298: if(pw>PWM.HIPWM) pw=PWM.HIPWM
      +                          ;
   726  007104  C263  F000         	movff	_PWM+6,btemp
   727  007108  6A01               	clrf	btemp+1,c
   728  00710A  6A02               	clrf	btemp+2,c
   729  00710C  6A03               	clrf	btemp+3,c
   730  00710E  0100               	movlb	__Lparam shr (0+8)
   731  007110  5003               	movf	btemp+3,w,c
   732  007112  0A80               	xorlw	128
   733  007114  6E04               	movwf	btemp+4,c
   734  007116  51BF               	movf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),w
   735  007118  0A80               	xorlw	128
   736  00711A  5C04               	subwf	btemp+4,w,c
   737  00711C  E108               	bnz	u135
   738  00711E  51BE               	movf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),w
   739  007120  5C02               	subwf	btemp+2,w,c
   740  007122  E105               	bnz	u135
   741  007124  51BD               	movf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),w
   742  007126  5C01               	subwf	btemp+1,w,c
   743  007128  E102               	bnz	u135
   744  00712A  51BC               	movf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),w
   745  00712C  5C00               	subwf	btemp,w,c
   746  00712E                     u135:
   747  00712E  E205               	bc	l32
   748  007130  C263  F0BC         	movff	_PWM+6,?a_DVNTtoPWM+9
   749  007134  6BBD               	clrf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),b
   750  007136  6BBE               	clrf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),b
   751  007138  6BBF               	clrf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),b
   752  00713A                     l32:
   753                           ;vntregtch.c: 299: if(pw<PWM.VLO_PWM) pw=PWM.VLO
      +                          _PWM;
   754  00713A  C264  F000         	movff	_PWM+7,btemp
   755  00713E  6A01               	clrf	btemp+1,c
   756  007140  6A02               	clrf	btemp+2,c
   757  007142  6A03               	clrf	btemp+3,c
   758  007144  0100               	movlb	__Lparam shr (0+8)
   759  007146  51BF               	movf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),w
   760  007148  0A80               	xorlw	128
   761  00714A  6E04               	movwf	btemp+4,c
   762  00714C  5003               	movf	btemp+3,w,c
   763  00714E  0A80               	xorlw	128
   764  007150  5C04               	subwf	btemp+4,w,c
   765  007152  E108               	bnz	u145
   766  007154  5002               	movf	btemp+2,w,c
   767  007156  5DBE               	subwf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),w
   768  007158  E105               	bnz	u145
   769  00715A  5001               	movf	btemp+1,w,c
   770  00715C  5DBD               	subwf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),w
   771  00715E  E102               	bnz	u145
   772  007160  5000               	movf	btemp,w,c
   773  007162  5DBC               	subwf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),w
   774  007164                     u145:
   775  007164  E205               	bc	l33
   776  007166  C264  F0BC         	movff	_PWM+7,?a_DVNTtoPWM+9
   777  00716A  6BBD               	clrf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),b
   778  00716C  6BBE               	clrf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),b
   779  00716E  6BBF               	clrf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),b
   780  007170                     l33:
   781                           ;vntregtch.c: 300: return (unsigned char) pw;
   782  007170  0100               	movlb	__Lparam shr (0+8)
   783  007172  51BC               	movf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),w
   784  007174  0012               	return	
   785  007176                     l30:
   786  007176  2AD9               	incf	fsr2l,f,c
   787  007178                     l27:
   788  007178  0E07               	movlw	7
   789  00717A  64D9               	cpfsgt	fsr2l,c
   790  00717C  D723               	goto	l24
   791                           ;vntregtch.c: 301: }
   792  00717E  0100               	movlb	__Lparam shr (0+8)
   793  007180  51B3               	movf	?a_DVNTtoPWM^(__Lparam& (0+65280)),w
   794  007182  0012               	return	
   795                           ;vntregtch.c: 304: }
   796  007184                     __end_of_DVNTtoPWM:
   797                           ;vntregtch.c: 312: unsigned char DVNTtoPopPWM(un
      +                          signed char dvnt,const unsigned char pop)
   798                           ;vntregtch.c: 313: {
   799  007184  00B4               	dw	?_DVNTtoPopPWM
   800  007186                     _DVNTtoPopPWM:
   801  000000                     
   802                           ;vntregtch.c: 314: unsigned char i,v1,v2,p1,p2,d
      +                          v;
   803  007186  6A00               	clrf	btemp,c
   804  007188  6A01               	clrf	btemp+1,c
   805  00718A  6A02               	clrf	btemp+2,c
   806  00718C  6A03               	clrf	btemp+3,c
   807                           ;vntregtch.c: 318: dv=dvnt;
   808  00718E  0100               	movlb	__Lparam shr (0+8)
   809  007190  6FB8               	movwf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280))
      +                          ,b
   810                           ;vntregtch.c: 319: for(i=0;i<nkpkt;i++)
   811  007192  6AD9               	clrf	fsr2l,c
   812  007194  D109               	goto	l38
   813  007196                     l35:
   814                           ;vntregtch.c: 320: {
   815  007196  50D9               	movf	fsr2l,w,c
   816  007198  0D02               	mullw	2
   817  00719A  0E7B               	movlw	low _Kvnt
   818  00719C  24F3               	addwf	prodl,w,c
   819  00719E  6EE9               	movwf	fsr0l,c
   820  0071A0  0E02               	movlw	high _Kvnt
   821  0071A2  20F4               	addwfc	prodh,w,c
   822  0071A4  6EEA               	movwf	fsr0h,c
   823  0071A6  50EF               	movf	indf0,w,c
   824  0071A8  0100               	movlb	__Lparam shr (0+8)
   825  0071AA  6FB7               	movwf	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280))
      +                          ,b
   826                           ;vntregtch.c: 322: p2=Kvnt[i].dpwm;
   827  0071AC  50D9               	movf	fsr2l,w,c
   828  0071AE  0D02               	mullw	2
   829  0071B0  0E7C               	movlw	low (_Kvnt+1)
   830  0071B2  24F3               	addwf	prodl,w,c
   831  0071B4  6EE9               	movwf	fsr0l,c
   832  0071B6  0E02               	movlw	high (_Kvnt+1)
   833  0071B8  20F4               	addwfc	prodh,w,c
   834  0071BA  6EEA               	movwf	fsr0h,c
   835  0071BC  50EF               	movf	indf0,w,c
   836  0071BE  6FB5               	movwf	?a_DVNTtoPopPWM^(__Lparam& (0+65280)),b
   837                           ;vntregtch.c: 323: if(i!=0)
   838  0071C0  50D9               	movf	fsr2l,w,c
   839  0071C2  E015               	bz	l39
   840                           ;vntregtch.c: 324: {
   841  0071C4  50D9               	movf	fsr2l,w,c
   842  0071C6  0D02               	mullw	2
   843  0071C8  0E79               	movlw	low (_Kvnt+-2)
   844  0071CA  24F3               	addwf	prodl,w,c
   845  0071CC  6EE9               	movwf	fsr0l,c
   846  0071CE  0E02               	movlw	high (_Kvnt+-2)
   847  0071D0  20F4               	addwfc	prodh,w,c
   848  0071D2  6EEA               	movwf	fsr0h,c
   849  0071D4  50EF               	movf	indf0,w,c
   850  0071D6  6FB9               	movwf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280))
      +                          ,b
   851                           ;vntregtch.c: 326: p1=Kvnt[i-1].dpwm;
   852  0071D8  50D9               	movf	fsr2l,w,c
   853  0071DA  0D02               	mullw	2
   854  0071DC  0E7A               	movlw	low (_Kvnt+-1)
   855  0071DE  24F3               	addwf	prodl,w,c
   856  0071E0  6EE9               	movwf	fsr0l,c
   857  0071E2  0E02               	movlw	high (_Kvnt+-1)
   858  0071E4  20F4               	addwfc	prodh,w,c
   859  0071E6  6EEA               	movwf	fsr0h,c
   860  0071E8  50EF               	movf	indf0,w,c
   861  0071EA  6FB6               	movwf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280))
      +                          ,b
   862                           ;vntregtch.c: 327: }
   863  0071EC  D003               	goto	l40
   864  0071EE                     l39:
   865                           ;vntregtch.c: 328: else
   866  0071EE  0100               	movlb	__Lparam shr (0+8)
   867  0071F0  6BB9               	clrf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)),
      +                          b
   868                           ;vntregtch.c: 331: p1=0;
   869  0071F2  6BB6               	clrf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280)),
      +                          b
   870  0071F4                     l40:
   871                           ;vntregtch.c: 332: }
   872  0071F4  0100               	movlb	__Lparam shr (0+8)
   873  0071F6  51B7               	movf	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280)),
      +                          w
   874  0071F8  61B8               	cpfslt	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280)
      +                          ),b
   875  0071FA  D004               	goto	u191
   876  0071FC  51B8               	movf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280)),
      +                          w
   877  0071FE  61B9               	cpfslt	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)
      +                          ),b
   878  007200  D001               	goto	u191
   879  007202  D004               	goto	u210
   880  007204                     u191:
   881  007204  0100               	movlb	__Lparam shr (0+8)
   882  007206  51B8               	movf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280)),
      +                          w
   883  007208  63B7               	cpfseq	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280)
      +                          ),b
   884  00720A  D0CD               	goto	l41
   885  00720C                     u210:
   886                           ;vntregtch.c: 334: {
   887  00720C  0EE8               	movlw	232
   888  00720E  6E04               	movwf	btemp+4,c
   889  007210  0E03               	movlw	3
   890  007212  6E05               	movwf	btemp+5,c
   891  007214  6A06               	clrf	btemp+6,c
   892  007216  6A07               	clrf	btemp+7,c
   893  007218  0100               	movlb	__Lparam shr (0+8)
   894  00721A  51B6               	movf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280)),
      +                          w
   895  00721C  5DB5               	subwf	?a_DVNTtoPopPWM^(__Lparam& (0+65280)),w
   896  00721E  6E00               	movwf	btemp,c
   897  007220  6A01               	clrf	btemp+1,c
   898  007222  A0D8               	btfss	status,0,c
   899  007224  0601               	decf	btemp+1,f,c
   900  007226  6A02               	clrf	btemp+2,c
   901  007228  BE01               	btfsc	btemp+1,7,c
   902  00722A  0602               	decf	btemp+2,f,c
   903  00722C  5002               	movf	btemp+2,w,c
   904  00722E  6E03               	movwf	btemp+3,c
   905  007230  EC4B  F049         	call	almul
   906  007234  C000  F0BA         	movff	btemp,?a_DVNTtoPopPWM+5
   907  007238  C001  F0BB         	movff	btemp+1,?a_DVNTtoPopPWM+6
   908  00723C  C002  F0BC         	movff	btemp+2,?a_DVNTtoPopPWM+7
   909  007240  C003  F0BD         	movff	btemp+3,?a_DVNTtoPopPWM+8
   910                           ;vntregtch.c: 336: wsp/=(v2-v1);
   911  007244  51B9               	movf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)),
      +                          w
   912  007246  5DB7               	subwf	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280))
      +                          ,w
   913  007248  6E04               	movwf	btemp+4,c
   914  00724A  6A05               	clrf	btemp+5,c
   915  00724C  A0D8               	btfss	status,0,c
   916  00724E  0605               	decf	btemp+5,f,c
   917  007250  6A06               	clrf	btemp+6,c
   918  007252  BE05               	btfsc	btemp+5,7,c
   919  007254  0606               	decf	btemp+6,f,c
   920  007256  5006               	movf	btemp+6,w,c
   921  007258  6E07               	movwf	btemp+7,c
   922  00725A  0EBA               	movlw	low (?a_DVNTtoPopPWM+5)
   923  00725C  6EE9               	movwf	fsr0l,c
   924  00725E  0E00               	movlw	high (?a_DVNTtoPopPWM+5)
   925  007260  6EEA               	movwf	fsr0h,c
   926  007262  EC5E  F04C         	call	aldiv_f
   927                           ;vntregtch.c: 337: pw=(signed long int)(dv-v1)*w
      +                          sp;
   928  007266  C0BA  F004         	movff	?a_DVNTtoPopPWM+5,btemp+4
   929  00726A  C0BB  F005         	movff	?a_DVNTtoPopPWM+6,btemp+5
   930  00726E  C0BC  F006         	movff	?a_DVNTtoPopPWM+7,btemp+6
   931  007272  C0BD  F007         	movff	?a_DVNTtoPopPWM+8,btemp+7
   932  007276  51B9               	movf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)),
      +                          w
   933  007278  5DB8               	subwf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280))
      +                          ,w
   934  00727A  6E00               	movwf	btemp,c
   935  00727C  6A01               	clrf	btemp+1,c
   936  00727E  A0D8               	btfss	status,0,c
   937  007280  0601               	decf	btemp+1,f,c
   938  007282  6A02               	clrf	btemp+2,c
   939  007284  BE01               	btfsc	btemp+1,7,c
   940  007286  0602               	decf	btemp+2,f,c
   941  007288  5002               	movf	btemp+2,w,c
   942  00728A  6E03               	movwf	btemp+3,c
   943  00728C  EC4B  F049         	call	almul
   944  007290  C000  F0BE         	movff	btemp,?a_DVNTtoPopPWM+9
   945  007294  C001  F0BF         	movff	btemp+1,?a_DVNTtoPopPWM+10
   946  007298  C002  F0C0         	movff	btemp+2,?a_DVNTtoPopPWM+11
   947  00729C  C003  F0C1         	movff	btemp+3,?a_DVNTtoPopPWM+12
   948                           ;vntregtch.c: 338: pw/=1000;
   949  0072A0  0EE8               	movlw	232
   950  0072A2  6E04               	movwf	btemp+4,c
   951  0072A4  0E03               	movlw	3
   952  0072A6  6E05               	movwf	btemp+5,c
   953  0072A8  6A06               	clrf	btemp+6,c
   954  0072AA  6A07               	clrf	btemp+7,c
   955  0072AC  0EBE               	movlw	low (?a_DVNTtoPopPWM+9)
   956  0072AE  6EE9               	movwf	fsr0l,c
   957  0072B0  0E00               	movlw	high (?a_DVNTtoPopPWM+9)
   958  0072B2  6EEA               	movwf	fsr0h,c
   959  0072B4  EC5E  F04C         	call	aldiv_f
   960                           ;vntregtch.c: 340: pw+=p1;
   961  0072B8  51B6               	movf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280)),
      +                          w
   962  0072BA  27BE               	addwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,f,b
   963  0072BC  0E01               	movlw	1
   964  0072BE  B0D8               	btfsc	status,0,c
   965  0072C0  27BF               	addwf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280)
      +                          ),f,b
   966  0072C2  B0D8               	btfsc	status,0,c
   967  0072C4  27C0               	addwf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280)
      +                          ),f,b
   968  0072C6  B0D8               	btfsc	status,0,c
   969  0072C8  27C1               	addwf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280)
      +                          ),f,b
   970                           ;vntregtch.c: 341: if(pw<0) pw=0;
   971  0072CA  AFC1               	btfss	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280)
      +                          ),7,b
   972  0072CC  D004               	goto	l42
   973  0072CE  6BBE               	clrf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280)),
      +                          b
   974  0072D0  6BBF               	clrf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,b
   975  0072D2  6BC0               	clrf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,b
   976  0072D4  6BC1               	clrf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,b
   977  0072D6                     l42:
   978                           ;vntregtch.c: 342: if(pw>PWM.HIPWM) pw=PWM.HIPWM
      +                          ;
   979  0072D6  C263  F000         	movff	_PWM+6,btemp
   980  0072DA  6A01               	clrf	btemp+1,c
   981  0072DC  6A02               	clrf	btemp+2,c
   982  0072DE  6A03               	clrf	btemp+3,c
   983  0072E0  0100               	movlb	__Lparam shr (0+8)
   984  0072E2  5003               	movf	btemp+3,w,c
   985  0072E4  0A80               	xorlw	128
   986  0072E6  6E04               	movwf	btemp+4,c
   987  0072E8  51C1               	movf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,w
   988  0072EA  0A80               	xorlw	128
   989  0072EC  5C04               	subwf	btemp+4,w,c
   990  0072EE  E108               	bnz	u235
   991  0072F0  51C0               	movf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,w
   992  0072F2  5C02               	subwf	btemp+2,w,c
   993  0072F4  E105               	bnz	u235
   994  0072F6  51BF               	movf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,w
   995  0072F8  5C01               	subwf	btemp+1,w,c
   996  0072FA  E102               	bnz	u235
   997  0072FC  51BE               	movf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280)),
      +                          w
   998  0072FE  5C00               	subwf	btemp,w,c
   999  007300                     u235:
  1000  007300  E205               	bc	l43
  1001  007302  C263  F0BE         	movff	_PWM+6,?a_DVNTtoPopPWM+9
  1002  007306  6BBF               	clrf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,b
  1003  007308  6BC0               	clrf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,b
  1004  00730A  6BC1               	clrf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,b
  1005  00730C                     l43:
  1006                           ;vntregtch.c: 343: if(pw<PWM.VLO_PWM) pw=PWM.VLO
      +                          _PWM;
  1007  00730C  C264  F000         	movff	_PWM+7,btemp
  1008  007310  6A01               	clrf	btemp+1,c
  1009  007312  6A02               	clrf	btemp+2,c
  1010  007314  6A03               	clrf	btemp+3,c
  1011  007316  0100               	movlb	__Lparam shr (0+8)
  1012  007318  51C1               	movf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,w
  1013  00731A  0A80               	xorlw	128
  1014  00731C  6E04               	movwf	btemp+4,c
  1015  00731E  5003               	movf	btemp+3,w,c
  1016  007320  0A80               	xorlw	128
  1017  007322  5C04               	subwf	btemp+4,w,c
  1018  007324  E108               	bnz	u245
  1019  007326  5002               	movf	btemp+2,w,c
  1020  007328  5DC0               	subwf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280)
      +                          ),w
  1021  00732A  E105               	bnz	u245
  1022  00732C  5001               	movf	btemp+1,w,c
  1023  00732E  5DBF               	subwf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280)
      +                          ),w
  1024  007330  E102               	bnz	u245
  1025  007332  5000               	movf	btemp,w,c
  1026  007334  5DBE               	subwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,w
  1027  007336                     u245:
  1028  007336  E205               	bc	l44
  1029  007338  C264  F0BE         	movff	_PWM+7,?a_DVNTtoPopPWM+9
  1030  00733C  6BBF               	clrf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,b
  1031  00733E  6BC0               	clrf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,b
  1032  007340  6BC1               	clrf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,b
  1033  007342                     l44:
  1034                           ;vntregtch.c: 344: if(i>2||!pop)
  1035  007342  0E02               	movlw	2
  1036  007344  64D9               	cpfsgt	fsr2l,c
  1037  007346  D001               	goto	u251
  1038  007348  D003               	goto	u270
  1039  00734A                     u251:
  1040  00734A  0100               	movlb	__Lparam shr (0+8)
  1041  00734C  51B4               	movf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1042  00734E  E103               	bnz	l45
  1043  007350                     u270:
  1044                           ;vntregtch.c: 345: {
  1045  007350  0100               	movlb	__Lparam shr (0+8)
  1046  007352  51BE               	movf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280)),
      +                          w
  1047  007354  0012               	return	
  1048  007356                     l45:
  1049                           ;vntregtch.c: 348: else
  1050  007356  0100               	movlb	__Lparam shr (0+8)
  1051  007358  51B4               	movf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1052  00735A  25BE               	addwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,w
  1053  00735C  6E00               	movwf	btemp,c
  1054  00735E  0E00               	movlw	0
  1055  007360  21BF               	addwfc	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280
      +                          )),w
  1056  007362  6E01               	movwf	btemp+1,c
  1057  007364  0E00               	movlw	0
  1058  007366  21C0               	addwfc	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280
      +                          )),w
  1059  007368  6E02               	movwf	btemp+2,c
  1060  00736A  0E00               	movlw	0
  1061  00736C  21C1               	addwfc	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280
      +                          )),w
  1062  00736E  6E03               	movwf	btemp+3,c
  1063  007370  C263  F004         	movff	_PWM+6,btemp+4
  1064  007374  6A05               	clrf	btemp+5,c
  1065  007376  6A06               	clrf	btemp+6,c
  1066  007378  6A07               	clrf	btemp+7,c
  1067  00737A  5007               	movf	btemp+7,w,c
  1068  00737C  0A80               	xorlw	128
  1069  00737E  6E08               	movwf	btemp+8,c
  1070  007380  5003               	movf	btemp+3,w,c
  1071  007382  0A80               	xorlw	128
  1072  007384  5C08               	subwf	btemp+8,w,c
  1073  007386  E108               	bnz	u285
  1074  007388  5002               	movf	btemp+2,w,c
  1075  00738A  5C06               	subwf	btemp+6,w,c
  1076  00738C  E105               	bnz	u285
  1077  00738E  5001               	movf	btemp+1,w,c
  1078  007390  5C05               	subwf	btemp+5,w,c
  1079  007392  E102               	bnz	u285
  1080  007394  5000               	movf	btemp,w,c
  1081  007396  5C04               	subwf	btemp+4,w,c
  1082  007398                     u285:
  1083  007398  E303               	bnc	l47
  1084                           ;vntregtch.c: 351: {
  1085  00739A  51B4               	movf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1086  00739C  25BE               	addwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,w
  1087  00739E  0012               	return	
  1088  0073A0                     l47:
  1089                           ;vntregtch.c: 354: else
  1090  0073A0  C263  FFE8         	movff	_PWM+6,wreg
  1091  0073A4  0012               	return	
  1092  0073A6                     l41:
  1093  0073A6  2AD9               	incf	fsr2l,f,c
  1094  0073A8                     l38:
  1095  0073A8  0E07               	movlw	7
  1096  0073AA  64D9               	cpfsgt	fsr2l,c
  1097  0073AC  D6F4               	goto	l35
  1098                           ;vntregtch.c: 357: }
  1099  0073AE  0100               	movlb	__Lparam shr (0+8)
  1100  0073B0  51B5               	movf	?a_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1101  0073B2  0012               	return	
  1102                           ;vntregtch.c: 362: }
  1103  0073B4                     __end_of_DVNTtoPopPWM:
  1104                           ;vntregtch.c: 367: unsigned char CalkVNTtoPWM(un
      +                          signed char nst)
  1105                           ;vntregtch.c: 368: {
  1106  0073B4                     _CalkVNTtoPWM:
  1107  000000                     
  1108                           ;_nst stored from wreg
  1109  0073B4  0100               	movlb	__Lparam shr (0+8)
  1110  0073B6  6FB2               	movwf	?a_CalkVNTtoPWM^(__Lparam& (0+65280)),b
  1111                           ;vntregtch.c: 369: unsigned char p;
  1112  0073B8  51B2               	movf	?a_CalkVNTtoPWM^(__Lparam& (0+65280)),w
  1113  0073BA  DDFC               	call	_DVNTtoPWM
  1114  0073BC  6EE1               	movwf	fsr1l,c
  1115                           ;vntregtch.c: 371: return p;
  1116  0073BE  50E1               	movf	fsr1l,w,c
  1117  0073C0  0012               	return	
  1118                           ;vntregtch.c: 372: }
  1119  0073C2                     __end_of_CalkVNTtoPWM:
  1120                           ;vntregtch.c: 378: unsigned char CalkVNTtoPopPWM
      +                          (unsigned char nst,unsigned char pop)
  1121                           ;vntregtch.c: 379: {
  1122  0073C2  00B2               	dw	?_CalkVNTtoPopPWM
  1123  0073C4                     _CalkVNTtoPopPWM:
  1124  000000                     
  1125                           ;_nst stored from wreg
  1126  0073C4  0100               	movlb	__Lparam shr (0+8)
  1127  0073C6  6FB3               	movwf	?a_CalkVNTtoPopPWM^(__Lparam& (0+65280)),
      +                          b
  1128                           ;vntregtch.c: 380: unsigned char p;
  1129  0073C8  51B2               	movf	?_CalkVNTtoPopPWM^(__Lparam& (0+65280)),w
  1130  0073CA  6FB4               	movwf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),b
  1131  0073CC  51B3               	movf	?a_CalkVNTtoPopPWM^(__Lparam& (0+65280)),w
  1132  0073CE  DEDB               	call	_DVNTtoPopPWM
  1133  0073D0  6EE1               	movwf	fsr1l,c
  1134                           ;vntregtch.c: 382: return p;
  1135  0073D2  50E1               	movf	fsr1l,w,c
  1136  0073D4  0012               	return	
  1137                           ;vntregtch.c: 383: }
  1138  0073D6                     __end_of_CalkVNTtoPopPWM:
  1139                           ;vntregtch.c: 387: unsigned char ProcToVNT(unsig
      +                          ned char wrt)
  1140                           ;vntregtch.c: 388: {
  1141  0073D6                     _ProcToVNT:
  1142  000000                     
  1143                           ; _wrt loaded to fsr2l
  1144  0073D6  6ED9               	movwf	fsr2l,c
  1145                           ;vntregtch.c: 389: unsigned long tmp;
  1146  0073D8  0E63               	movlw	99
  1147  0073DA  64D9               	cpfsgt	fsr2l,c
  1148  0073DC  D001               	goto	l52
  1149  0073DE  6ED9               	movwf	fsr2l,c
  1150  0073E0                     l52:
  1151                           ;vntregtch.c: 391: wrt=wrt+1;
  1152  0073E0  2AD9               	incf	fsr2l,f,c
  1153                           ;vntregtch.c: 392: tmp=((DtKNF.mmax-DtKNF.mmin)*
      +                          100)/100;
  1154  0073E2  0E64               	movlw	100
  1155  0073E4  6E02               	movwf	btemp+2,c
  1156  0073E6  6A03               	clrf	btemp+3,c
  1157  0073E8  C051  FFE8         	movff	_DtKNF+12,wreg
  1158  0073EC  C052  F000         	movff	_DtKNF+13,btemp
  1159  0073F0  6A01               	clrf	btemp+1,c
  1160  0073F2  5E00               	subwf	btemp,f,c
  1161  0073F4  0E00               	movlw	0
  1162  0073F6  5A01               	subwfb	btemp+1,f,c
  1163  0073F8  EC16  F04C         	call	awmul
  1164  0073FC  C004  F000         	movff	btemp+4,btemp
  1165  007400  C005  F001         	movff	btemp+5,btemp+1
  1166  007404  0E64               	movlw	100
  1167  007406  6E02               	movwf	btemp+2,c
  1168  007408  6A03               	clrf	btemp+3,c
  1169  00740A  ECBB  F04B         	call	awdiv
  1170  00740E  0E00               	movlw	0
  1171  007410  BE05               	btfsc	btemp+5,7,c
  1172  007412  0EFF               	movlw	255
  1173  007414  6E06               	movwf	btemp+6,c
  1174  007416  6E07               	movwf	btemp+7,c
  1175  007418  C004  F0AD         	movff	btemp+4,?a_ProcToVNT
  1176  00741C  C005  F0AE         	movff	btemp+5,?a_ProcToVNT+1
  1177  007420  C006  F0AF         	movff	btemp+6,?a_ProcToVNT+2
  1178  007424  C007  F0B0         	movff	btemp+7,?a_ProcToVNT+3
  1179                           ;vntregtch.c: 393: return (DtKNF.mmin+(unsigned 
      +                          char)((wrt*tmp)/100));
  1180  007428  C051  F0B1         	movff	_DtKNF+12,?a_ProcToVNT+4
  1181  00742C  C0AD  F004         	movff	?a_ProcToVNT,btemp+4
  1182  007430  C0AE  F005         	movff	?a_ProcToVNT+1,btemp+5
  1183  007434  C0AF  F006         	movff	?a_ProcToVNT+2,btemp+6
  1184  007438  C0B0  F007         	movff	?a_ProcToVNT+3,btemp+7
  1185  00743C  CFD9 F000          	movff	fsr2l,btemp
  1186  007440  6A01               	clrf	btemp+1,c
  1187  007442  6A02               	clrf	btemp+2,c
  1188  007444  6A03               	clrf	btemp+3,c
  1189  007446  EC4B  F049         	call	llmul
  1190  00744A  0E64               	movlw	100
  1191  00744C  6E04               	movwf	btemp+4,c
  1192  00744E  6A05               	clrf	btemp+5,c
  1193  007450  6A06               	clrf	btemp+6,c
  1194  007452  6A07               	clrf	btemp+7,c
  1195  007454  EC58  F048         	call	lldiv
  1196  007458  0100               	movlb	__Lparam shr (0+8)
  1197  00745A  51B1               	movf	(?a_ProcToVNT+4)^(__Lparam& (0+65280)),w
  1198  00745C  2400               	addwf	btemp,w,c
  1199  00745E  0012               	return	
  1200                           ;vntregtch.c: 394: }
  1201  007460                     __end_of_ProcToVNT:
  1202                           ;vntregtch.c: 398: unsigned char VNTToProc(unsig
      +                          ned char wrt)
  1203                           ;vntregtch.c: 399: {
  1204  007460                     _VNTToProc:
  1205  000000                     
  1206                           ; _wrt loaded to fsr2l
  1207  007460  6ED9               	movwf	fsr2l,c
  1208                           ;vntregtch.c: 400: unsigned long tmp;
  1209  007462  C051  FFE8         	movff	_DtKNF+12,wreg
  1210  007466  60D9               	cpfslt	fsr2l,c
  1211  007468  D001               	goto	l54
  1212  00746A  0C00               	retlw	0
  1213  00746C                     l54:
  1214                           ;vntregtch.c: 402: if(wrt>DtKNF.mmax) return 99;
  1215  00746C  50D9               	movf	fsr2l,w,c
  1216  00746E  0100               	movlb	(_DtKNF+13) shr (0+8)
  1217  007470  6152               	cpfslt	(_DtKNF+13)& (0+255),b
  1218  007472  D001               	goto	l55
  1219  007474  0C63               	retlw	99
  1220  007476                     l55:
  1221                           ;vntregtch.c: 403: tmp=(wrt-DtKNF.mmin)*100;
  1222  007476  0E64               	movlw	100
  1223  007478  6E02               	movwf	btemp+2,c
  1224  00747A  6A03               	clrf	btemp+3,c
  1225  00747C  C051  FFE8         	movff	_DtKNF+12,wreg
  1226  007480  CFD9 F000          	movff	fsr2l,btemp
  1227  007484  6A01               	clrf	btemp+1,c
  1228  007486  5E00               	subwf	btemp,f,c
  1229  007488  0E00               	movlw	0
  1230  00748A  5A01               	subwfb	btemp+1,f,c
  1231  00748C  EC16  F04C         	call	awmul
  1232  007490  0E00               	movlw	0
  1233  007492  BE05               	btfsc	btemp+5,7,c
  1234  007494  0EFF               	movlw	255
  1235  007496  6E06               	movwf	btemp+6,c
  1236  007498  6E07               	movwf	btemp+7,c
  1237  00749A  C004  F0A8         	movff	btemp+4,?a_VNTToProc
  1238  00749E  C005  F0A9         	movff	btemp+5,?a_VNTToProc+1
  1239  0074A2  C006  F0AA         	movff	btemp+6,?a_VNTToProc+2
  1240  0074A6  C007  F0AB         	movff	btemp+7,?a_VNTToProc+3
  1241                           ;vntregtch.c: 404: tmp/=(DtKNF.mmax-DtKNF.mmin);
  1242  0074AA  C051  FFE8         	movff	_DtKNF+12,wreg
  1243  0074AE  C052  F000         	movff	_DtKNF+13,btemp
  1244  0074B2  5C00               	subwf	btemp,w,c
  1245  0074B4  6E04               	movwf	btemp+4,c
  1246  0074B6  6A05               	clrf	btemp+5,c
  1247  0074B8  A0D8               	btfss	status,0,c
  1248  0074BA  0605               	decf	btemp+5,f,c
  1249  0074BC  6A06               	clrf	btemp+6,c
  1250  0074BE  BE05               	btfsc	btemp+5,7,c
  1251  0074C0  0606               	decf	btemp+6,f,c
  1252  0074C2  5006               	movf	btemp+6,w,c
  1253  0074C4  6E07               	movwf	btemp+7,c
  1254  0074C6  0EA8               	movlw	low ?a_VNTToProc
  1255  0074C8  6EE9               	movwf	fsr0l,c
  1256  0074CA  0E00               	movlw	high ?a_VNTToProc
  1257  0074CC  6EEA               	movwf	fsr0h,c
  1258  0074CE  EC4A  F04C         	call	lldiv_f
  1259                           ;vntregtch.c: 405: if(tmp>=99) return 99;
  1260  0074D2  0100               	movlb	__Lparam shr (0+8)
  1261  0074D4  0E00               	movlw	0
  1262  0074D6  5DAB               	subwf	(?a_VNTToProc+3)^(__Lparam& (0+65280)),w
  1263  0074D8  E108               	bnz	u335
  1264  0074DA  0E00               	movlw	0
  1265  0074DC  5DAA               	subwf	(?a_VNTToProc+2)^(__Lparam& (0+65280)),w
  1266  0074DE  E105               	bnz	u335
  1267  0074E0  0E00               	movlw	0
  1268  0074E2  5DA9               	subwf	(?a_VNTToProc+1)^(__Lparam& (0+65280)),w
  1269  0074E4  E102               	bnz	u335
  1270  0074E6  0E63               	movlw	99
  1271  0074E8  5DA8               	subwf	?a_VNTToProc^(__Lparam& (0+65280)),w
  1272  0074EA                     u335:
  1273  0074EA  E301               	bnc	l56
  1274  0074EC  0C63               	retlw	99
  1275  0074EE                     l56:
  1276                           ;vntregtch.c: 406: return (unsigned char)tmp;
  1277  0074EE  0100               	movlb	__Lparam shr (0+8)
  1278  0074F0  51A8               	movf	?a_VNTToProc^(__Lparam& (0+65280)),w
  1279  0074F2  0012               	return	
  1280                           ;vntregtch.c: 407: }
  1281  0074F4                     __end_of_VNTToProc:
  1282                           ;vntregtch.c: 412: unsigned char CalkTimStr(unsi
      +                          gned char vstr)
  1283                           ;vntregtch.c: 413: {
  1284  0074F4                     _CalkTimStr:
  1285  000000                     
  1286                           ; _vstr loaded to fsr2l
  1287  0074F4  6ED9               	movwf	fsr2l,c
  1288                           ;vntregtch.c: 414: unsigned char mint,maxt,minv,
      +                          maxv;
  1289  0074F6  0E06               	movlw	6
  1290  0074F8  6EE1               	movwf	fsr1l,c
  1291                           ;vntregtch.c: 417: maxt=10;
  1292  0074FA  0E0A               	movlw	10
  1293  0074FC  6EF3               	movwf	prodl,c
  1294                           ;vntregtch.c: 419: minv=28;
  1295  0074FE  0E1C               	movlw	28
  1296  007500  0100               	movlb	__Lparam shr (0+8)
  1297  007502  6FA8               	movwf	?a_CalkTimStr^(__Lparam& (0+65280)),b
  1298                           ;vntregtch.c: 420: maxv=50;
  1299  007504  0E32               	movlw	50
  1300  007506  6EE9               	movwf	fsr0l,c
  1301                           ;vntregtch.c: 422: if(vstr<minv) vstr=minv;
  1302  007508  0E1C               	movlw	28
  1303  00750A  60D9               	cpfslt	fsr2l,c
  1304  00750C  D001               	goto	l58
  1305  00750E  6ED9               	movwf	fsr2l,c
  1306  007510                     l58:
  1307                           ;vntregtch.c: 423: if(vstr>maxv) vstr=maxv;
  1308  007510  0E32               	movlw	50
  1309  007512  6E00               	movwf	btemp,c
  1310  007514  50D9               	movf	fsr2l,w,c
  1311  007516  5C00               	subwf	btemp,w,c
  1312  007518  E202               	bc	l59
  1313  00751A  0E32               	movlw	50
  1314  00751C  6ED9               	movwf	fsr2l,c
  1315  00751E                     l59:
  1316                           ;vntregtch.c: 425: w=(unsigned long int)((maxt-m
      +                          int)*(vstr-minv)*100);
  1317  00751E  0E64               	movlw	100
  1318  007520  6E02               	movwf	btemp+2,c
  1319  007522  6A03               	clrf	btemp+3,c
  1320  007524  50D9               	movf	fsr2l,w,c
  1321  007526  0D04               	mullw	4
  1322  007528  0E90               	movlw	144
  1323  00752A  24F3               	addwf	prodl,w,c
  1324  00752C  6E00               	movwf	btemp,c
  1325  00752E  0EFF               	movlw	255
  1326  007530  20F4               	addwfc	prodh,w,c
  1327  007532  6E01               	movwf	btemp+1,c
  1328  007534  EC16  F04C         	call	awmul
  1329  007538  0100               	movlb	__Lparam shr (0+8)
  1330  00753A  C004  F0A9         	movff	btemp+4,?a_CalkTimStr+1
  1331  00753E  C005  F0AA         	movff	btemp+5,?a_CalkTimStr+2
  1332  007542  0E00               	movlw	0
  1333  007544  BFAA               	btfsc	(?a_CalkTimStr+2)^(__Lparam& (0+65280)),7
      +                          ,b
  1334  007546  0EFF               	movlw	-1
  1335  007548  6FAB               	movwf	(?a_CalkTimStr+3)^(__Lparam& (0+65280)),b
  1336  00754A  6FAC               	movwf	(?a_CalkTimStr+4)^(__Lparam& (0+65280)),b
  1337                           ;vntregtch.c: 426: w/=(maxv-minv);
  1338  00754C  0E16               	movlw	22
  1339  00754E  6E04               	movwf	btemp+4,c
  1340  007550  6A05               	clrf	btemp+5,c
  1341  007552  6A06               	clrf	btemp+6,c
  1342  007554  6A07               	clrf	btemp+7,c
  1343  007556  0EA9               	movlw	low (?a_CalkTimStr+1)
  1344  007558  6EE9               	movwf	fsr0l,c
  1345  00755A  0E00               	movlw	high (?a_CalkTimStr+1)
  1346  00755C  6EEA               	movwf	fsr0h,c
  1347  00755E  EC4A  F04C         	call	lldiv_f
  1348                           ;vntregtch.c: 427: w/=100;
  1349  007562  0E64               	movlw	100
  1350  007564  6E04               	movwf	btemp+4,c
  1351  007566  6A05               	clrf	btemp+5,c
  1352  007568  6A06               	clrf	btemp+6,c
  1353  00756A  6A07               	clrf	btemp+7,c
  1354  00756C  0EA9               	movlw	low (?a_CalkTimStr+1)
  1355  00756E  6EE9               	movwf	fsr0l,c
  1356  007570  0E00               	movlw	high (?a_CalkTimStr+1)
  1357  007572  6EEA               	movwf	fsr0h,c
  1358  007574  EC4A  F04C         	call	lldiv_f
  1359                           ;vntregtch.c: 428: w+=mint;
  1360  007578  0E06               	movlw	6
  1361  00757A  27A9               	addwf	(?a_CalkTimStr+1)^(__Lparam& (0+65280)),f
      +                          ,b
  1362  00757C  0E00               	movlw	0
  1363  00757E  23AA               	addwfc	(?a_CalkTimStr+2)^(__Lparam& (0+65280)),
      +                          f,b
  1364  007580  23AB               	addwfc	(?a_CalkTimStr+3)^(__Lparam& (0+65280)),
      +                          f,b
  1365  007582  23AC               	addwfc	(?a_CalkTimStr+4)^(__Lparam& (0+65280)),
      +                          f,b
  1366                           ;vntregtch.c: 429: return (unsigned char) w;
  1367  007584  51A9               	movf	(?a_CalkTimStr+1)^(__Lparam& (0+65280)),w
  1368  007586  0012               	return	
  1369                           ;vntregtch.c: 430: }
  1370  007588                     __end_of_CalkTimStr:
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413  000000                     
  1414  000000                     
  1415  000000                     
  1416  000000                     
  1417  000000                     
  1418  000000                     
  1419  000000                     
  1420  000000                     
  1421  000000                     
  1422  000000                     
  1423  000000                     
  1424  000000                     
  1425  000000                     
  1426  000000                     
  1427  000000                     
  1428  000000                     
  1429  000000                     
  1430  000000                     
  1431  000000                     
  1432  000000                     
  1433  000000                     
  1434  000000                     
  1435  000000                     
  1436  000000                     
  1437  000000                     
  1438  000000                     
  1439  000000                     
  1440  000000                     
  1441  000000                     
  1442  000000                     
  1443  000000                     
  1444  000000                     
  1445  000000                     
  1446  000000                     
  1447  000000                     
  1448  000000                     
  1449  000000                     
  1450  000000                     
  1451  000000                     
  1452  000000                     
  1453  000000                     
  1454  000000                     
  1455  000000                     
  1456  000000                     
  1457  000000                     
  1458  000000                     
  1459  000000                     
  1460  000000                     
  1461  000000                     
  1462  000000                     
  1463  000000                     
  1464  000000                     
  1465  000000                     
  1466  000000                     
  1467  000000                     
  1468  000000                     
  1469  000000                     
  1470  000000                     
  1471  000000                     
  1472  000000                     
  1473  000000                     
  1474  000000                     
  1475  000000                     
  1476  000000                     
  1477  000000                     
  1478  000000                     
  1479  000000                     
  1480  000000                     
  1481  000000                     
  1482  000000                     
  1483  000000                     
  1484  000000                     
  1485  000000                     
  1486  000000                     
  1487  000000                     
  1488  000000                     
  1489  000000                     
  1490  000000                     
  1491  000000                     
  1492  000000                     
  1493  000000                     
  1494  000000                     
  1495  000000                     
  1496  000000                     
  1497  000000                     
  1498  000000                     
  1499  000000                     
  1500  000000                     
  1501  000000                     
  1502  000000                     
  1503  000000                     
  1504  000000                     
  1505  000000                     
  1506  000000                     
  1507  000000                     
  1508  000000                     
  1509  000000                     
  1510  000000                     
  1511  000000                     
  1512  000000                     
  1513  000000                     
  1514  000000                     
  1515  000000                     
  1516  000000                     
  1517  000000                     
  1518  000000                     
  1519  000000                     
  1520  000000                     
  1521  000000                     
  1522  000000                     
  1523  000000                     
  1524  000000                     
  1525  000000                     
  1526  000000                     
  1527  000000                     
  1528  000000                     
  1529  000000                     
  1530  000000                     
  1531  000000                     
  1532  000000                     
  1533  000000                     
  1534  000000                     
  1535  000000                     
  1536  000000                     
  1537  000000                     
  1538  000000                     
  1539  000000                     
  1540  000000                     
  1541  000000                     
  1542  000000                     
  1543  000000                     
  1544  000000                     
  1545  000000                     
  1546  000000                     
  1547  000000                     
  1548  000000                     
  1549  000000                     
  1550  000000                     
  1551  000000                     
  1552  000000                     
  1553  000000                     
  1554  000000                     
  1555  000000                     
  1556  000000                     
  1557  000000                     
  1558  000000                     
  1559  000000                     
  1560  000000                     
  1561  000000                     
  1562  000000                     
  1563  000000                     
  1564  000000                     
  1565  000000                     
  1566  000000                     
  1567  000000                     
  1568  000000                     
  1569  000000                     
  1570  000000                     
  1571  000000                     
  1572  000000                     
  1573  000000                     
  1574  000000                     
  1575  000000                     
  1576  000000                     
  1577  000000                     
  1578  000000                     
  1579  000000                     
  1580  000000                     
  1581  000000                     
  1582  000000                     
  1583  000000                     
  1584  000000                     
  1585  000000                     
  1586  000000                     
  1587  000000                     
  1588  000000                     
  1589  000000                     
  1590  000000                     
  1591  000000                     
  1592  000000                     
  1593  000000                     
  1594  000000                     
  1595  000000                     
  1596  000000                     
  1597  000000                     
  1598  000000                     
  1599  000000                     
  1600  000000                     
  1601  000000                     
  1602  000000                     
  1603  000000                     
  1604  000000                     
  1605  000000                     
  1606  000000                     
  1607  000000                     
  1608  000000                     
  1609  000000                     
  1610  000000                     
  1611  000000                     
  1612  000000                     
  1613  000000                     
  1614  000000                     
  1615  000000                     
  1616  000000                     
  1617  000000                     
  1618  000000                     
  1619  000000                     
  1620  000000                     
  1621  000000                     
  1622  000000                     
  1623  000000                     
  1624  000000                     
  1625  000000                     
  1626  000000                     
  1627  000000                     
  1628  000000                     
  1629  000000                     
  1630  000000                     
  1631  000000                     
  1632  000000                     
  1633  000000                     
  1634  000000                     
  1635  000000                     
  1636  000000                     
  1637  000000                     
  1638  000000                     
  1639  000000                     
  1640  000000                     
  1641  000000                     
  1642  000000                     
  1643  000000                     
  1644  000000                     
  1645  000000                     
  1646  000000                     
  1647  000000                     
  1648  000000                     
  1649  000000                     
  1650  000000                     
  1651  000000                     
  1652  000000                     
  1653  000000                     
  1654  000000                     
  1655  000000                     
  1656  000000                     
  1657  000000                     
  1658  000000                     
  1659  000000                     
  1660  000000                     
  1661  000000                     
  1662  000000                     
  1663  000000                     
  1664  000000                     
  1665  000000                     
  1666  000000                     
  1667  000000                     
  1668  000000                     
  1669  000000                     
  1670  000000                     
  1671  000000                     
  1672  000000                     
  1673  000000                     
  1674  000000                     
  1675  000000                     
  1676  000000                     
  1677  000000                     
  1678  000000                     
  1679  000000                     
  1680  000000                     
  1681  000000                     
  1682  000000                     
  1683  000000                     
  1684  000000                     
  1685  000000                     
  1686  000000                     
  1687  000000                     
  1688  000000                     
  1689  000000                     
  1690  000000                     
  1691  000000                     
  1692  000000                     
  1693  000000                     
  1694  000000                     
  1695  000000                     
  1696  000000                     
  1697  000000                     
  1698  000000                     
  1699  000000                     
  1700  000000                     
  1701  000000                     
  1702  000000                     
  1703  000000                     
  1704  000000                     
  1705  000000                     
  1706  000000                     
  1707  000000                     
  1708  000000                     
  1709  000000                     
  1710  000000                     
  1711  000000                     
  1712  000000                     
  1713  000000                     
  1714  000000                     
  1715  000000                     
  1716  000000                     
  1717  000000                     
  1718  000000                     
  1719  000000                     
  1720  000000                     
  1721  000000                     
  1722  000000                     
  1723  000000                     
  1724  000000                     
  1725  000000                     
  1726  000000                     
  1727  000000                     
  1728  000000                     
  1729  000000                     
  1730  000000                     
  1731  000000                     
  1732  000000                     
  1733  000000                     
  1734  000000                     
  1735  000000                     
  1736  000000                     
  1737  000000                     
  1738  000000                     
  1739  000000                     
  1740  000000                     
  1741  000000                     
  1742  000000                     
  1743  000000                     
  1744  000000                     
  1745  000000                     
  1746  000000                     
  1747  000000                     
  1748  000000                     
  1749  000000                     
  1750  000000                     
  1751  000000                     
  1752  000000                     
  1753  000000                     
  1754  000000                     
  1755  000000                     
  1756  000000                     
  1757  000000                     
  1758  000000                     
  1759  000000                     
  1760  000000                     
  1761  000000                     
  1762  000000                     
  1763  000000                     
  1764  000000                     
  1765  000000                     
  1766  000000                     
  1767  000000                     
  1768  000000                     
  1769  000000                     
  1770  000000                     
  1771  000000                     
  1772  000000                     
  1773  000000                     
  1774  000000                     
  1775  000000                     
  1776  000000                     
  1777  000000                     
  1778  000000                     
  1779  000000                     
  1780  000000                     
  1781  000000                     
  1782  000000                     
  1783  000000                     
  1784  000000                     
  1785  000000                     
  1786  000000                     
  1787  000000                     
  1788  000000                     
  1789  000000                     
  1790  000000                     
  1791  000000                     
  1792  000000                     
  1793  000000                     
  1794  000000                     
  1795  000000                     
  1796  000000                     
  1797  000000                     
  1798  000000                     
  1799  000000                     
  1800  000000                     
  1801  000000                     
  1802  000000                     
  1803  000000                     
  1804  000000                     
  1805  000000                     
  1806  000000                     
  1807                           
  1808                           	psect	bigbss
  1809  000F3F                     F1519:
  1810  000F3F                     	ds	1
  1811  000000                     
  1812  000000                     
  1813  000000                     
  1814  000000                     
  1815  000000                     
  1816  000000                     
  1817  000000                     
  1818  000000                     
  1819  000000                     
  1820  000000                     
  1821  000000                     
  1822  000000                     
  1823  000000                     
  1824  000000                     
  1825  000000                     
  1826  000000                     
  1827  000000                     
  1828  000000                     
  1829  000000                     
  1830  000000                     
  1831  000000                     
  1832  000000                     
  1833  000000                     
  1834  000000                     
  1835  000000                     
  1836  000000                     
  1837  000000                     
  1838  000000                     
  1839  000000                     
  1840  000000                     
  1841  000000                     
  1842  000000                     
  1843  000000                     
  1844  000000                     
  1845  000000                     
  1846  000000                     
  1847  000000                     
  1848  000000                     
  1849  000000                     
  1850  000000                     
  1851  000000                     
  1852  000000                     
  1853  000000                     
  1854  000000                     
  1855  000000                     
  1856  000000                     
  1857  000000                     
  1858  000000                     
  1859  000000                     
  1860  000000                     
  1861  000000                     
  1862  000000                     
  1863  000000                     
  1864  000000                     
  1865  000000                     
  1866  000000                     
  1867  000000                     
  1868  000000                     
  1869  000000                     
  1870  000000                     
  1871  000000                     
  1872  000000                     
  1873  000000                     
  1874  000000                     
  1875  000000                     
  1876  000000                     
  1877  000000                     
  1878  000000                     
  1879  000000                     
  1880  000000                     
  1881  000000                     
  1882  000000                     
  1883  000000                     
  1884  000000                     
  1885  000000                     
  1886  000000                     
  1887  000000                     
  1888  000000                     
  1889  000000                     
  1890  000000                     
  1891  000000                     
  1892  000000                     
  1893  000000                     
  1894  000000                     
  1895  000000                     
  1896  000000                     
  1897  000000                     
  1898  000000                     
  1899  000000                     
  1900  000000                     
  1901  000000                     
  1902  000000                     
  1903  000000                     
  1904  000000                     
  1905  000000                     
  1906  000000                     
  1907  000000                     
  1908  000000                     
  1909  000000                     
  1910  000000                     
  1911  000000                     
  1912  000000                     
  1913  000000                     
  1914  000000                     
  1915  000000                     
  1916  000000                     
  1917  000000                     
  1918  000000                     
  1919  000000                     
  1920  000000                     
  1921  000000                     
  1922  000000                     
  1923  000000                     
  1924  000000                     
  1925  000000                     
  1926  000000                     
  1927  000000                     
  1928  000000                     
  1929  000000                     
  1930  000000                     
  1931  000000                     
  1932  000000                     
  1933  000000                     
  1934  000000                     
  1935  000000                     
  1936                           
  1937                           	psect	const
  1938  0010A6                     _nkpkt:
  1939  0010A6  08                 	db	8
  1940  000000                     
  1941  000000                     
  1942  000000                     
  1943  000000                     
  1944  000000                     
  1945  000000                     
  1946  000000                     
  1947                           
  1948                           	psect	bss
  1949  00027B                     _Kvnt:
  1950  00027B                     	ds	20
  1951                           
  1952                           	psect	temp
  1953  000000                     btemp:
  1954  000000                     	ds	9
  1955                           prodh	equ	0xFF4
  1956                           prodl	equ	0xFF3
  1957                           indf0	equ	0xFEF
  1958                           postinc0	equ	0xFEE
  1959                           postdec0	equ	0xFED
  1960                           fsr0h	equ	0xFEA
  1961                           fsr0l	equ	0xFE9
  1962                           wreg	equ	0xFE8
  1963                           fsr1l	equ	0xFE1
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Thu Jul 12 08:02:18 2018

                    ?_SetKalPWM 00A8                     ?a_VNTToProc 00A8  
                             _M 0055          _OdczytDanychKalibracji 6F30  
                            l11 6D92                              l20 6E70  
                            l30 7176                              l14 6E88  
                            l31 7104                              l15 6DFA  
                            l40 71F4                              l32 713A  
                            l24 6FC4                              l16 6DFC  
                            l41 73A6                              l33 7170  
                            l42 72D6                              l18 6E5A  
                            l43 730C                              l35 7196  
                            l27 7178                              l52 73E0  
                            l44 7342                              l28 701C  
                            l45 7356                              l29 7022  
                            l54 746C                              l38 73A8  
                            l55 7476                              l47 73A0  
                            l39 71EE                              l56 74EE  
                            l58 7510                              l59 751E  
                            u21 6E08                              u40 6E22  
                            u91 7032                       _ProcToVNT 73D6  
                      _StartRTS 8C20               __end_of_ProcToVNT 7460  
                           u110 703A                             u210 720C  
                           u135 712E                             u145 7164  
                           u251 734A                             u235 7300  
                           u245 7336                             u270 7350  
                           u335 74EA                             u191 7204  
                           u285 7398                             _PWM 025D  
                      _WritePWM 8B62                    _DVNTtoPopPWM 7186  
                           wreg 000FE8                       _StartRTdS 8BE4  
                          F1519 0F3F                    _ReadEEVNT0_P 6AC2  
                  _ReadEEVNT1_P 6B1E                    _ReadEEVNT0_V 6AB0  
                  _ReadEEVNT2_P 6B7A                    _ReadEEVNT1_V 6B0C  
                  _ReadEEVNT3_P 6BD6                    _ReadEEVNT2_V 6B68  
                  _ReadEEVNT4_P 6C32                    _ReadEEVNT3_V 6BC4  
                  _ReadEEVNT5_P 6C8E                    _ReadEEVNT4_V 6C20  
                  _ReadEEVNT6_P 6CEA                    _ReadEEVNT5_V 6C7C  
                  _ReadEEVNT7_P 6D4A                    _ReadEEVNT6_V 6CD8  
                  _ReadEEVNT7_V 6D38            __end_of_DVNTtoPopPWM 73B4  
                          f6053 00B1                            f5713 00AA  
                          _RTdS 8C08                            _Kvnt 027B  
                          almul 9296                            fsr0h 000FEA  
                          indf0 000FEF                            fsr0l 000FE9  
                          fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0000                            awdiv 9776  
                          awmul 982C                            ftdiv 931E  
                          lldiv 90B0                            fttol 9620  
                          llmul 9296                            prodh 000FF4  
                          prodl 000FF3                 _CalkVNTtoPopPWM 73C4  
                   ?a_SetKalPWM 00A8                ?_CalkVNTtoPopPWM 00B2  
                ?a_DVNTtoPopPWM 00B5                     ?a_ProcToVNT 00AD  
                         _DtKNF 0045                   ?_DVNTtoPopPWM 00B4  
                    used_btemp0 0001                      used_btemp1 0001  
                    used_btemp2 0001                      used_btemp3 0001  
                    used_btemp4 0001                      used_btemp5 0001  
                    used_btemp6 0001                      used_btemp7 0001  
                    used_btemp8 0001                           _nkpkt 10A6  
                         _round 9424                      _CalkTimStr 74F4  
                         lwtoft 988C                           status 000FD8  
            __end_of_CalkTimStr 7588                         __Lparam 00A8  
                     _DVNTtoPWM 6FB4               __end_of_DVNTtoPWM 7184  
       __end_of_CalkVNTtoPopPWM 73D6                         __ramtop 1000  
             ?a_CalkVNTtoPopPWM 00B3                    _CalkVNTtoPWM 73B4  
                        ?_round 00B6            __end_of_CalkVNTtoPWM 73C2  
                     _VNTToProc 7460               __end_of_VNTToProc 74F4  
                   ?a_DVNTtoPWM 00B3                         postdec0 000FED  
                 _KalibracjaVNT 6E9A                         postinc0 000FEE  
                        aldiv_f 98BC                  ?a_CalkVNTtoPWM 00B2  
                        lldiv_f 9894  __end_of_OdczytDanychKalibracji 6FB4  
         __end_of_KalibracjaVNT 6F30                        _ModParam 893C  
                     _SetKalPWM 6D68                    ?a_CalkTimStr 00A8  
             __end_of_SetKalPWM 6E9A  
