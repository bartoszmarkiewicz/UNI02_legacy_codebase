

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Fri Nov 21 09:58:04 2014


     1                           	processor	18F65J90
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	text
    99                           ;pic18f85j90.h: 18: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f85j90.h: 19: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f85j90.h: 20: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f85j90.h: 21: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f85j90.h: 22: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f85j90.h: 23: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f85j90.h: 24: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f85j90.h: 25: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f85j90.h: 26: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f85j90.h: 27: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f85j90.h: 28: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f85j90.h: 29: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f85j90.h: 30: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f85j90.h: 31: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f85j90.h: 32: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f85j90.h: 33: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f85j90.h: 34: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f85j90.h: 35: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f85j90.h: 36: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f85j90.h: 37: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f85j90.h: 38: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f85j90.h: 39: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f85j90.h: 40: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f85j90.h: 41: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f85j90.h: 42: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f85j90.h: 43: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f85j90.h: 44: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f85j90.h: 45: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f85j90.h: 46: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f85j90.h: 47: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f85j90.h: 48: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f85j90.h: 49: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f85j90.h: 50: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f85j90.h: 51: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f85j90.h: 52: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f85j90.h: 53: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f85j90.h: 54: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f85j90.h: 55: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f85j90.h: 56: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f85j90.h: 57: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f85j90.h: 58: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f85j90.h: 59: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f85j90.h: 60: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f85j90.h: 62: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f85j90.h: 63: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f85j90.h: 64: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f85j90.h: 65: static near unsigned char LC
      +                          DREG @ 0xFD2;
   146                           ;pic18f85j90.h: 66: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f85j90.h: 67: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f85j90.h: 68: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f85j90.h: 69: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f85j90.h: 71: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f85j90.h: 72: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f85j90.h: 73: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f85j90.h: 74: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f85j90.h: 75: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f85j90.h: 76: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f85j90.h: 77: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f85j90.h: 78: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f85j90.h: 79: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f85j90.h: 80: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f85j90.h: 81: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f85j90.h: 82: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f85j90.h: 84: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f85j90.h: 85: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f85j90.h: 86: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f85j90.h: 87: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f85j90.h: 88: static near unsigned char LC
      +                          DDATA4 @ 0xFBF;
   167                           ;pic18f85j90.h: 89: static near unsigned char LC
      +                          DDATA3 @ 0xFBE;
   168                           ;pic18f85j90.h: 90: static near unsigned char LC
      +                          DDATA2 @ 0xFBD;
   169                           ;pic18f85j90.h: 91: static near unsigned char LC
      +                          DDATA1 @ 0xFBC;
   170                           ;pic18f85j90.h: 92: static near unsigned char LC
      +                          DDATA0 @ 0xFBB;
   171                           ;pic18f85j90.h: 93: static near unsigned char LC
      +                          DSE5 @ 0xFBA;
   172                           ;pic18f85j90.h: 94: static near unsigned char LC
      +                          DSE4 @ 0xFB9;
   173                           ;pic18f85j90.h: 95: static near unsigned char LC
      +                          DSE3 @ 0xFB8;
   174                           ;pic18f85j90.h: 96: static near unsigned char LC
      +                          DSE2 @ 0xFB7;
   175                           ;pic18f85j90.h: 97: static near unsigned char LC
      +                          DSE1 @ 0xFB6;
   176                           ;pic18f85j90.h: 98: static volatile near unsigne
      +                          d char CVRCON @ 0xFB5;
   177                           ;pic18f85j90.h: 99: static volatile near unsigne
      +                          d char CMCON @ 0xFB4;
   178                           ;pic18f85j90.h: 100: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   179                           ;pic18f85j90.h: 101: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   180                           ;pic18f85j90.h: 103: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   181                           ;pic18f85j90.h: 104: static near unsigned char T
      +                          3CON @ 0xFB1;
   182                           ;pic18f85j90.h: 105: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   183                           ;pic18f85j90.h: 107: static near unsigned char S
      +                          PBRG @ 0xFAF;
   184                           ;pic18f85j90.h: 108: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   185                           ;pic18f85j90.h: 110: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   186                           ;pic18f85j90.h: 111: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   187                           ;pic18f85j90.h: 113: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   188                           ;pic18f85j90.h: 114: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   189                           ;pic18f85j90.h: 116: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   190                           ;pic18f85j90.h: 117: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   191                           ;pic18f85j90.h: 119: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   192                           ;pic18f85j90.h: 120: static volatile near unsign
      +                          ed char LCDPS @ 0xFAA;
   193                           ;pic18f85j90.h: 121: static near unsigned char L
      +                          CDSE0 @ 0xFA9;
   194                           ;pic18f85j90.h: 122: static volatile near unsign
      +                          ed char LCDCON @ 0xFA8;
   195                           ;pic18f85j90.h: 123: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   196                           ;pic18f85j90.h: 124: static volatile near unsign
      +                          ed char EECON1 @ 0xFA6;
   197                           ;pic18f85j90.h: 125: static near unsigned char I
      +                          PR3 @ 0xFA5;
   198                           ;pic18f85j90.h: 126: static volatile near unsign
      +                          ed char PIR3 @ 0xFA4;
   199  0062DE                     _IncRSTimer:
   200                           ;	_tDTA assigned to ?a_TrToUNI01+0
   201  000000                     _TrToUNI01$tDTA	set	?a_TrToUNI01
   202                           ;	_chkndat assigned to ?a_SaveDataToRS+1
   203  000000                     _SaveDataToRS$chkndat	set	?a_SaveDataToRS+1
   204                           ;	_ndat assigned to ?a_SaveDataToRS+0
   205  000000                     _SaveDataToRS$ndat	set	?a_SaveDataToRS
   206                           ;	_tnDat assigned to ?a_TransData+0
   207  000000                     _TransData$tnDat	set	?a_TransData
   208  000000                     
   209                           ;mgs_rs9b.c: 24: if(MGSD.timRS<255) MGSD.timRS++
      +                          ;
   210  0062DE  C2ED  F000         	movff	_MGSD+2,btemp
   211  0062E2  2800               	incf	btemp,w,c
   212  0062E4  B4D8               	btfsc	status,2,c
   213  0062E6  0012               	return	
   214  0062E8  0102               	movlb	(_MGSD+2) shr (0+8)
   215  0062EA  2BED               	incf	(_MGSD+2)& (0+255),f,b
   216                           ;mgs_rs9b.c: 25: }
   217  0062EC  0C01               	retlw	1
   218  0062EE                     __end_of_IncRSTimer:
   219                           ;mgs_rs9b.c: 28: void StartRSTim(void)
   220                           ;mgs_rs9b.c: 29: {
   221  0062EE                     _StartRSTim:
   222  000000                     
   223                           ;mgs_rs9b.c: 30: MGSD.timRS=0;
   224  0062EE  0102               	movlb	(_MGSD+2) shr (0+8)
   225  0062F0  6BED               	clrf	(_MGSD+2)& (0+255),b
   226                           ;mgs_rs9b.c: 31: }
   227  0062F2  0012               	return	
   228  0062F4                     __end_of_StartRSTim:
   229                           ;mgs_rs9b.c: 34: unsigned char RSTim(void)
   230                           ;mgs_rs9b.c: 35: {
   231  0062F4                     _RSTim:
   232  000000                     
   233                           ;mgs_rs9b.c: 36: return MGSD.timRS;
   234  0062F4  C2ED  FFE8         	movff	_MGSD+2,wreg
   235  0062F8  0012               	return	
   236                           ;mgs_rs9b.c: 37: }
   237  0062FA                     __end_of_RSTim:
   238                           ;mgs_rs9b.c: 40: void InitTransProc(void)
   239                           ;mgs_rs9b.c: 41: {
   240  0062FA                     _InitTransProc:
   241  000000                     
   242                           ;mgs_rs9b.c: 42: MGSD._TransData=0;
   243  0062FA  0102               	movlb	_MGSD shr (0+8)
   244  0062FC  91EB               	bcf	_MGSD& (0+255),0,b
   245                           ;mgs_rs9b.c: 43: MGSD._TransDataTR=0;
   246  0062FE  93EB               	bcf	_MGSD& (0+255),1,b
   247                           ;mgs_rs9b.c: 44: MGSD._TransDataRC=0;
   248  006300  95EB               	bcf	_MGSD& (0+255),2,b
   249                           ;mgs_rs9b.c: 45: MGSD._TransOK=0;
   250  006302  97EB               	bcf	_MGSD& (0+255),3,b
   251                           ;mgs_rs9b.c: 46: MGSD._TransACK=0;
   252  006304  99EB               	bcf	_MGSD& (0+255),4,b
   253                           ;mgs_rs9b.c: 47: MGSD._TERR_TIM=0;
   254  006306  9BEB               	bcf	_MGSD& (0+255),5,b
   255                           ;mgs_rs9b.c: 48: MGSD._RERR_TIM=0;
   256  006308  9DEB               	bcf	_MGSD& (0+255),6,b
   257                           ;mgs_rs9b.c: 49: MGSD._RERR_REC=0;
   258  00630A  9FEB               	bcf	_MGSD& (0+255),7,b
   259                           ;mgs_rs9b.c: 50: MGSD._ERRt=0;
   260  00630C  91EC               	bcf	(_MGSD+1)& (0+255),0,b
   261                           ;mgs_rs9b.c: 51: MGSD.timRS=0;
   262  00630E  6BED               	clrf	(_MGSD+2)& (0+255),b
   263                           ;mgs_rs9b.c: 52: MGSD.MTRS=0;
   264  006310  6BEE               	clrf	(_MGSD+3)& (0+255),b
   265                           ;mgs_rs9b.c: 53: MGSD.MTRS2=0;
   266  006312  6BEF               	clrf	(_MGSD+4)& (0+255),b
   267                           ;mgs_rs9b.c: 54: MGSD.KTR=0;
   268  006314  6BF0               	clrf	(_MGSD+5)& (0+255),b
   269                           ;mgs_rs9b.c: 55: MGSD.LCN=0;
   270  006316  6BF1               	clrf	(_MGSD+6)& (0+255),b
   271                           ;mgs_rs9b.c: 56: }
   272  006318  0012               	return	
   273  00631A                     __end_of_InitTransProc:
   274                           ;mgs_rs9b.c: 59: void StartTransData(void)
   275                           ;mgs_rs9b.c: 60: {
   276  00631A                     _StartTransData:
   277  000000                     
   278                           ;mgs_rs9b.c: 61: MGSD._TransData=1;
   279  00631A  0102               	movlb	_MGSD shr (0+8)
   280  00631C  81EB               	bsf	_MGSD& (0+255),0,b
   281                           ;mgs_rs9b.c: 62: MGSD.MTRS=0;
   282  00631E  6BEE               	clrf	(_MGSD+3)& (0+255),b
   283                           ;mgs_rs9b.c: 63: }
   284  006320  0012               	return	
   285  006322                     __end_of_StartTransData:
   286                           ;mgs_rs9b.c: 69: void TransData(const unsigned c
      +                          har tnDat)
   287                           ;mgs_rs9b.c: 70: {
   288  006322                     _TransData:
   289  000000                     
   290                           ;_tnDat stored from wreg
   291  006322  0100               	movlb	__Lparam shr (0+8)
   292  006324  6FD0               	movwf	?a_TransData^(__Lparam& (0+65280)),b
   293                           ;mgs_rs9b.c: 71: switch(MGSD.MTRS)
   294  006326  D060               	goto	l15
   295  006328                     l16:
   296                           ;mgs_rs9b.c: 72: {
   297                           ;mgs_rs9b.c: 74: if(tnDat) StartUSARTTR(tnDat);
   298  006328  0100               	movlb	__Lparam shr (0+8)
   299  00632A  51D0               	movf	?a_TransData^(__Lparam& (0+65280)),w
   300  00632C  E003               	bz	l17
   301  00632E  51D0               	movf	?a_TransData^(__Lparam& (0+65280)),w
   302  006330  EC47  F03A         	call	_StartUSARTTR
   303  006334                     l17:
   304                           ;mgs_rs9b.c: 75: StartRSTim();
   305  006334  DFDC               	call	_StartRSTim	;wreg free
   306                           ;mgs_rs9b.c: 76: MGSD.MTRS=1;
   307  006336  0E01               	movlw	1
   308  006338  CFE8 F2EE          	movff	wreg,_MGSD+3
   309  00633C                     l18:
   310                           ;mgs_rs9b.c: 77: case 1:
   311                           ;mgs_rs9b.c: 78: if(tnDat)
   312  00633C  0100               	movlb	__Lparam shr (0+8)
   313  00633E  51D0               	movf	?a_TransData^(__Lparam& (0+65280)),w
   314  006340  A4D8               	btfss	status,2,c
   315                           ;mgs_rs9b.c: 79: {
   316  006342  A89D               	btfss	3997,4,c
   317  006344  D012               	goto	l19
   318                           ;mgs_rs9b.c: 81: {
   319  006346  DFD6               	call	_RSTim	;wreg free
   320  006348  6E00               	movwf	btemp,c
   321  00634A  0E02               	movlw	2
   322  00634C  5C00               	subwf	btemp,w,c
   323  00634E  E303               	bnc	u71
   324  006350  0102               	movlb	_UADt shr (0+8)
   325  006352  A9F2               	btfss	_UADt& (0+255),4,b
   326  006354  D006               	goto	u90
   327  006356                     u71:
   328  006356  DFCE               	call	_RSTim	;wreg free
   329  006358  6E00               	movwf	btemp,c
   330  00635A  0E15               	movlw	21
   331  00635C  5C00               	subwf	btemp,w,c
   332  00635E  A0D8               	btfss	status,0,c
   333  006360  0012               	return	
   334  006362                     u90:
   335                           ;mgs_rs9b.c: 83: {
   336  006362  0E04               	movlw	4
   337  006364  CFE8 F2EE          	movff	wreg,_MGSD+3
   338                           ;mgs_rs9b.c: 85: break;
   339  006368  0C04               	retlw	4
   340                           ;mgs_rs9b.c: 86: }
   341  00636A                     l19:
   342                           ;mgs_rs9b.c: 88: }
   343  00636A  0102               	movlb	_MGSD shr (0+8)
   344  00636C  9BEB               	bcf	_MGSD& (0+255),5,b
   345                           ;mgs_rs9b.c: 91: if(!TRMT) break;
   346  00636E  A2AC               	btfss	4012,1,c	;volatile
   347  006370  0012               	return	
   348                           ;mgs_rs9b.c: 92: StopUSARTTR();
   349  006372  EC53  F03A         	call	_StopUSARTTR	;wreg free
   350                           ;mgs_rs9b.c: 93: StartRSTim();
   351  006376  DFBB               	call	_StartRSTim	;wreg free
   352                           ;mgs_rs9b.c: 94: MGSD.MTRS=2;
   353  006378  0E02               	movlw	2
   354  00637A  CFE8 F2EE          	movff	wreg,_MGSD+3
   355  00637E                     l23:
   356                           ;mgs_rs9b.c: 95: case 2:
   357                           ;mgs_rs9b.c: 96: if(!UADt.REnd&&(RSTim()<20)) br
      +                          eak;
   358  00637E  0102               	movlb	_UADt shr (0+8)
   359  006380  B3F2               	btfsc	_UADt& (0+255),1,b
   360  006382  D006               	goto	l24
   361  006384  DFB7               	call	_RSTim	;wreg free
   362  006386  6E00               	movwf	btemp,c
   363  006388  0E14               	movlw	20
   364  00638A  5C00               	subwf	btemp,w,c
   365  00638C  A0D8               	btfss	status,0,c
   366  00638E  0012               	return	
   367  006390                     l24:
   368                           ;mgs_rs9b.c: 97: if(!UADt.REnd)
   369  006390  0102               	movlb	_UADt shr (0+8)
   370  006392  B3F2               	btfsc	_UADt& (0+255),1,b
   371  006394  D004               	goto	l25
   372                           ;mgs_rs9b.c: 98: {
   373  006396  0E05               	movlw	5
   374  006398  CFE8 F2EE          	movff	wreg,_MGSD+3
   375                           ;mgs_rs9b.c: 100: break;
   376  00639C  0C05               	retlw	5
   377  00639E                     l25:
   378                           ;mgs_rs9b.c: 101: }
   379  00639E  0102               	movlb	_MGSD shr (0+8)
   380  0063A0  9DEB               	bcf	_MGSD& (0+255),6,b
   381                           ;mgs_rs9b.c: 103: if(UADt.REnd)
   382  0063A2  0102               	movlb	_UADt shr (0+8)
   383  0063A4  A3F2               	btfss	_UADt& (0+255),1,b
   384  0063A6  D006               	goto	l26
   385                           ;mgs_rs9b.c: 104: {
   386  0063A8  0102               	movlb	_UADt shr (0+8)
   387  0063AA  93F2               	bcf	_UADt& (0+255),1,b
   388                           ;mgs_rs9b.c: 107: MGSD._TransOK=1;
   389  0063AC  0102               	movlb	_MGSD shr (0+8)
   390  0063AE  87EB               	bsf	_MGSD& (0+255),3,b
   391                           ;mgs_rs9b.c: 108: MGSD._RERR_REC=0;
   392  0063B0  9FEB               	bcf	_MGSD& (0+255),7,b
   393                           ;mgs_rs9b.c: 109: }
   394  0063B2  D003               	goto	l27
   395  0063B4                     l26:
   396                           ;mgs_rs9b.c: 110: else
   397  0063B4  0102               	movlb	_MGSD shr (0+8)
   398  0063B6  97EB               	bcf	_MGSD& (0+255),3,b
   399                           ;mgs_rs9b.c: 113: MGSD._RERR_REC=1;
   400  0063B8  8FEB               	bsf	_MGSD& (0+255),7,b
   401  0063BA                     l27:
   402                           ;mgs_rs9b.c: 114: }
   403  0063BA  0102               	movlb	_MGSD shr (0+8)
   404  0063BC  9BEB               	bcf	_MGSD& (0+255),5,b
   405                           ;mgs_rs9b.c: 116: MGSD._RERR_TIM=0;
   406  0063BE  9DEB               	bcf	_MGSD& (0+255),6,b
   407                           ;mgs_rs9b.c: 117: MGSD.MTRS=6;
   408  0063C0  0E06               	movlw	6
   409  0063C2  CFE8 F2EE          	movff	wreg,_MGSD+3
   410                           ;mgs_rs9b.c: 118: break;
   411  0063C6  0C06               	retlw	6
   412  0063C8                     l28:
   413                           ;mgs_rs9b.c: 119: case 4:
   414                           ;mgs_rs9b.c: 120: MGSD._TERR_TIM=1;
   415  0063C8  0102               	movlb	_MGSD shr (0+8)
   416  0063CA  8BEB               	bsf	_MGSD& (0+255),5,b
   417                           ;mgs_rs9b.c: 121: MGSD._TransOK=0;
   418  0063CC  97EB               	bcf	_MGSD& (0+255),3,b
   419                           ;mgs_rs9b.c: 122: StopUSARTTR();
   420  0063CE  EC53  F03A         	call	_StopUSARTTR	;wreg free
   421                           ;mgs_rs9b.c: 123: MGSD.MTRS=6;
   422  0063D2  0E06               	movlw	6
   423  0063D4  CFE8 F2EE          	movff	wreg,_MGSD+3
   424                           ;mgs_rs9b.c: 124: break;
   425  0063D8  0C06               	retlw	6
   426  0063DA                     l29:
   427                           ;mgs_rs9b.c: 125: case 5:
   428                           ;mgs_rs9b.c: 126: MGSD._RERR_TIM=1;
   429  0063DA  0102               	movlb	_MGSD shr (0+8)
   430  0063DC  8DEB               	bsf	_MGSD& (0+255),6,b
   431                           ;mgs_rs9b.c: 127: MGSD._TransOK=0;
   432  0063DE  97EB               	bcf	_MGSD& (0+255),3,b
   433  0063E0                     l30:
   434                           ;mgs_rs9b.c: 128: case 6:
   435                           ;mgs_rs9b.c: 129: MGSD._TransData=0;
   436  0063E0  0102               	movlb	_MGSD shr (0+8)
   437  0063E2  91EB               	bcf	_MGSD& (0+255),0,b
   438                           ;mgs_rs9b.c: 130: MGSD.MTRS=0;
   439  0063E4  6BEE               	clrf	(_MGSD+3)& (0+255),b
   440                           ;mgs_rs9b.c: 131: break;
   441  0063E6  0012               	return	
   442  0063E8                     l15:
   443  0063E8  C2EE  FFE8         	movff	_MGSD+3,wreg
   444  0063EC  0A00               	xorlw	0
   445  0063EE  E09C               	bz	l16
   446  0063F0  0A01               	xorlw	1
   447  0063F2  E0A4               	bz	l18
   448  0063F4  0A03               	xorlw	3
   449  0063F6  E0C3               	bz	l23
   450  0063F8  0A06               	xorlw	6
   451  0063FA  E0E6               	bz	l28
   452  0063FC  0A01               	xorlw	1
   453  0063FE  E0ED               	bz	l29
   454  006400  0A03               	xorlw	3
   455  006402  E0EE               	bz	l30
   456  006404  0012               	return	
   457                           ;mgs_rs9b.c: 133: }
   458  006406                     __end_of_TransData:
   459                           ;mgs_rs9b.c: 141: void SaveRSToData(void)
   460                           ;mgs_rs9b.c: 142: {
   461  006406                     _SaveRSToData:
   462  000000                     
   463                           ;mgs_rs9b.c: 147: RSDT1.outID=GetRSRBuf(2);
   464  006406  0E02               	movlw	2
   465  006408  EC7D  F03A         	call	_GetRSRBuf
   466  00640C  CFE8 F25C          	movff	wreg,_RSDT1
   467                           ;mgs_rs9b.c: 149: switch(RSDT1.outID)
   468  006410  D103               	goto	l33
   469  006412                     l34:
   470                           ;mgs_rs9b.c: 150: {
   471                           ;mgs_rs9b.c: 152: {
   472  006412  0102               	movlb	(_RSDT1+1) shr (0+8)
   473  006414  B35D               	btfsc	(_RSDT1+1)& (0+255),1,b
   474  006416  0012               	return	
   475                           ;mgs_rs9b.c: 154: {
   476  006418  915D               	bcf	(_RSDT1+1)& (0+255),0,b
   477                           ;mgs_rs9b.c: 156: RSDT1.outRDZ0=GetRSRBuf(3);
   478  00641A  0E03               	movlw	3
   479  00641C  EC7D  F03A         	call	_GetRSRBuf
   480  006420  CFE8 F25E          	movff	wreg,_RSDT1+2
   481                           ;mgs_rs9b.c: 157: RSDT1.outRDZ1=GetRSRBuf(4);
   482  006424  0E04               	movlw	4
   483  006426  EC7D  F03A         	call	_GetRSRBuf
   484  00642A  CFE8 F25F          	movff	wreg,_RSDT1+3
   485                           ;mgs_rs9b.c: 158: RSDT1.outSTAT0=GetRSRBuf(5);
   486  00642E  0E05               	movlw	5
   487  006430  EC7D  F03A         	call	_GetRSRBuf
   488  006434  CFE8 F272          	movff	wreg,_RSDT1+22
   489                           ;mgs_rs9b.c: 159: RSDT1.outSTAT1=GetRSRBuf(6);
   490  006438  0E06               	movlw	6
   491  00643A  EC7D  F03A         	call	_GetRSRBuf
   492  00643E  CFE8 F273          	movff	wreg,_RSDT1+23
   493                           ;mgs_rs9b.c: 160: RSDT1.outSTAT2=GetRSRBuf(7);
   494  006442  0E07               	movlw	7
   495  006444  EC7D  F03A         	call	_GetRSRBuf
   496  006448  CFE8 F274          	movff	wreg,_RSDT1+24
   497                           ;mgs_rs9b.c: 161: RSDT1.outSTAT3=GetRSRBuf(8);
   498  00644C  0E08               	movlw	8
   499  00644E  EC7D  F03A         	call	_GetRSRBuf
   500  006452  CFE8 F275          	movff	wreg,_RSDT1+25
   501                           ;mgs_rs9b.c: 162: RSDT1.outCO=GetRSRBuf(9);
   502  006456  0E09               	movlw	9
   503  006458  EC7D  F03A         	call	_GetRSRBuf
   504  00645C  CFE8 F260          	movff	wreg,_RSDT1+4
   505                           ;mgs_rs9b.c: 163: RSDT1.outCW=GetRSRBuf(10);
   506  006460  0E0A               	movlw	10
   507  006462  EC7D  F03A         	call	_GetRSRBuf
   508  006466  CFE8 F261          	movff	wreg,_RSDT1+5
   509                           ;mgs_rs9b.c: 164: RSDT1.outCS=GetRSRBuf(11);
   510  00646A  0E0B               	movlw	11
   511  00646C  EC7D  F03A         	call	_GetRSRBuf
   512  006470  CFE8 F262          	movff	wreg,_RSDT1+6
   513                           ;mgs_rs9b.c: 165: RSDT1.outIN=GetRSRBuf(12);
   514  006474  0E0C               	movlw	12
   515  006476  EC7D  F03A         	call	_GetRSRBuf
   516  00647A  CFE8 F263          	movff	wreg,_RSDT1+7
   517                           ;mgs_rs9b.c: 166: RSDT1.outVNT=GetRSRBuf(13);
   518  00647E  0E0D               	movlw	13
   519  006480  EC7D  F03A         	call	_GetRSRBuf
   520  006484  CFE8 F264          	movff	wreg,_RSDT1+8
   521                           ;mgs_rs9b.c: 167: RSDT1.outPCO=GetRSRBuf(14);
   522  006488  0E0E               	movlw	14
   523  00648A  EC7D  F03A         	call	_GetRSRBuf
   524  00648E  CFE8 F265          	movff	wreg,_RSDT1+9
   525                           ;mgs_rs9b.c: 168: RSDT1.outPCOmn=GetRSRBuf(15);
   526  006492  0E0F               	movlw	15
   527  006494  EC7D  F03A         	call	_GetRSRBuf
   528  006498  CFE8 F267          	movff	wreg,_RSDT1+11
   529                           ;mgs_rs9b.c: 169: RSDT1.outPCOmx=GetRSRBuf(16);
   530  00649C  0E10               	movlw	16
   531  00649E  EC7D  F03A         	call	_GetRSRBuf
   532  0064A2  CFE8 F268          	movff	wreg,_RSDT1+12
   533                           ;mgs_rs9b.c: 170: RSDT1.outPCW=GetRSRBuf(17);
   534  0064A6  0E11               	movlw	17
   535  0064A8  EC7D  F03A         	call	_GetRSRBuf
   536  0064AC  CFE8 F266          	movff	wreg,_RSDT1+10
   537                           ;mgs_rs9b.c: 171: RSDT1.outPCWmn=GetRSRBuf(18);
   538  0064B0  0E12               	movlw	18
   539  0064B2  EC7D  F03A         	call	_GetRSRBuf
   540  0064B6  CFE8 F269          	movff	wreg,_RSDT1+13
   541                           ;mgs_rs9b.c: 172: RSDT1.outPCWmx=GetRSRBuf(19);
   542  0064BA  0E13               	movlw	19
   543  0064BC  EC7D  F03A         	call	_GetRSRBuf
   544  0064C0  CFE8 F26A          	movff	wreg,_RSDT1+14
   545                           ;mgs_rs9b.c: 173: RSDT1.outPPCO=GetRSRBuf(20);
   546  0064C4  0E14               	movlw	20
   547  0064C6  EC7D  F03A         	call	_GetRSRBuf
   548  0064CA  CFE8 F26B          	movff	wreg,_RSDT1+15
   549                           ;mgs_rs9b.c: 174: RSDT1.outPPCW=GetRSRBuf(21);
   550  0064CE  0E15               	movlw	21
   551  0064D0  EC7D  F03A         	call	_GetRSRBuf
   552  0064D4  CFE8 F26C          	movff	wreg,_RSDT1+16
   553                           ;mgs_rs9b.c: 175: RSDT1.outERR=GetRSRBuf(22);
   554  0064D8  0E16               	movlw	22
   555  0064DA  EC7D  F03A         	call	_GetRSRBuf
   556  0064DE  CFE8 F26D          	movff	wreg,_RSDT1+17
   557                           ;mgs_rs9b.c: 176: RSDT1.outAWR=GetRSRBuf(23);
   558  0064E2  0E17               	movlw	23
   559  0064E4  EC7D  F03A         	call	_GetRSRBuf
   560  0064E8  CFE8 F26E          	movff	wreg,_RSDT1+18
   561                           ;mgs_rs9b.c: 177: RSDT1.outECO=GetRSRBuf(24);
   562  0064EC  0E18               	movlw	24
   563  0064EE  EC7D  F03A         	call	_GetRSRBuf
   564  0064F2  CFE8 F26F          	movff	wreg,_RSDT1+19
   565                           ;mgs_rs9b.c: 178: RSDT1.outPP=GetRSRBuf(25);
   566  0064F6  0E19               	movlw	25
   567  0064F8  EC7D  F03A         	call	_GetRSRBuf
   568  0064FC  CFE8 F270          	movff	wreg,_RSDT1+20
   569                           ;mgs_rs9b.c: 179: RSDT1.outPG=GetRSRBuf(26);
   570  006500  0E1A               	movlw	26
   571  006502  EC7D  F03A         	call	_GetRSRBuf
   572  006506  CFE8 F271          	movff	wreg,_RSDT1+21
   573                           ;mgs_rs9b.c: 180: RSDT1.RD_STD=1;
   574  00650A  0102               	movlb	(_RSDT1+1) shr (0+8)
   575  00650C  815D               	bsf	(_RSDT1+1)& (0+255),0,b
   576                           ;mgs_rs9b.c: 181: }
   577  00650E  0012               	return	
   578  006510                     l36:
   579                           ;mgs_rs9b.c: 183: }
   580                           ;mgs_rs9b.c: 185: {
   581  006510  0102               	movlb	(_RSDT1+1) shr (0+8)
   582  006512  B75D               	btfsc	(_RSDT1+1)& (0+255),3,b
   583  006514  0012               	return	
   584                           ;mgs_rs9b.c: 187: {
   585  006516  955D               	bcf	(_RSDT1+1)& (0+255),2,b
   586                           ;mgs_rs9b.c: 190: switch(GetRSRBuf(1)&0b00011111
      +                          )
   587  006518  D003               	goto	l39
   588  00651A                     l40:
   589                           ;mgs_rs9b.c: 191: {
   590                           ;mgs_rs9b.c: 193: RSDT1.vKNF=1;
   591  00651A  0E01               	movlw	1
   592  00651C  D014               	goto	L1
   593                           ;mgs_rs9b.c: 194: break;
   594  00651E                     l41:
   595  00651E  D012               	goto	l42
   596                           ;mgs_rs9b.c: 197: break;
   597                           ;mgs_rs9b.c: 200: break;
   598  006520                     l39:
   599  006520  0E01               	movlw	1
   600  006522  EC7D  F03A         	call	_GetRSRBuf
   601  006526  6E00               	movwf	btemp,c
   602  006528  0E1F               	movlw	31
   603  00652A  1600               	andwf	btemp,f,c
   604  00652C  C000  F002         	movff	btemp,btemp+2
   605  006530  6A03               	clrf	btemp+3,c
   606  006532  D006               	goto	l30003
   607  006534                     l30004:
   608  006534  5002               	movf	btemp+2,w,c
   609  006536  0A16               	xorlw	22
   610  006538  E0F0               	bz	l40
   611  00653A  0A0E               	xorlw	14
   612  00653C  E0F0               	bz	l41
   613  00653E  D002               	goto	l42
   614  006540                     l30003:
   615  006540  5003               	movf	btemp+3,w,c
   616  006542  E0F8               	bz	l30004
   617  006544                     l42:
   618                           ;mgs_rs9b.c: 198: default:
   619                           ;mgs_rs9b.c: 199: RSDT1.vKNF=2;
   620  006544  0E02               	movlw	2
   621                           ;mgs_rs9b.c: 195: case 24:
   622                           ;mgs_rs9b.c: 196: RSDT1.vKNF=2;
   623  006546                     L1:
   624  006546  CFE8 F276          	movff	wreg,_RSDT1+26
   625                           ;mgs_rs9b.c: 202: RSDT1.outKSTAT0=GetRSRBuf(3);
   626  00654A  0E03               	movlw	3
   627  00654C  EC7D  F03A         	call	_GetRSRBuf
   628  006550  CFE8 F277          	movff	wreg,_RSDT1+27
   629                           ;mgs_rs9b.c: 203: RSDT1.outKRK=GetRSRBuf(4);
   630  006554  0E04               	movlw	4
   631  006556  EC7D  F03A         	call	_GetRSRBuf
   632  00655A  CFE8 F278          	movff	wreg,_RSDT1+28
   633                           ;mgs_rs9b.c: 204: RSDT1.outPRM=GetRSRBuf(5);
   634  00655E  0E05               	movlw	5
   635  006560  EC7D  F03A         	call	_GetRSRBuf
   636  006564  CFE8 F279          	movff	wreg,_RSDT1+29
   637                           ;mgs_rs9b.c: 205: RSDT1.outMSTR=GetRSRBuf(6);
   638  006568  0E06               	movlw	6
   639  00656A  EC7D  F03A         	call	_GetRSRBuf
   640  00656E  CFE8 F27A          	movff	wreg,_RSDT1+30
   641                           ;mgs_rs9b.c: 206: RSDT1.outMMAXU=GetRSRBuf(7);
   642  006572  0E07               	movlw	7
   643  006574  EC7D  F03A         	call	_GetRSRBuf
   644  006578  CFE8 F27B          	movff	wreg,_RSDT1+31
   645                           ;mgs_rs9b.c: 207: RSDT1.outMMAXG=GetRSRBuf(8);
   646  00657C  0E08               	movlw	8
   647  00657E  EC7D  F03A         	call	_GetRSRBuf
   648  006582  CFE8 F27C          	movff	wreg,_RSDT1+32
   649                           ;mgs_rs9b.c: 208: RSDT1.outOPDG=GetRSRBuf(9);
   650  006586  0E09               	movlw	9
   651  006588  EC7D  F03A         	call	_GetRSRBuf
   652  00658C  CFE8 F281          	movff	wreg,_RSDT1+37
   653                           ;mgs_rs9b.c: 209: RSDT1.outWANL=GetRSRBuf(10);
   654  006590  0E0A               	movlw	10
   655  006592  EC7D  F03A         	call	_GetRSRBuf
   656  006596  CFE8 F27D          	movff	wreg,_RSDT1+33
   657                           ;mgs_rs9b.c: 210: RSDT1.outKODKT=GetRSRBuf(11);
   658  00659A  0E0B               	movlw	11
   659  00659C  EC7D  F03A         	call	_GetRSRBuf
   660  0065A0  CFE8 F27E          	movff	wreg,_RSDT1+34
   661                           ;mgs_rs9b.c: 211: RSDT1.outWOBG=GetRSRBuf(12);
   662  0065A4  0E0C               	movlw	12
   663  0065A6  EC7D  F03A         	call	_GetRSRBuf
   664  0065AA  CFE8 F27F          	movff	wreg,_RSDT1+35
   665                           ;mgs_rs9b.c: 212: RSDT1.outNOKR=GetRSRBuf(13);
   666  0065AE  0E0D               	movlw	13
   667  0065B0  EC7D  F03A         	call	_GetRSRBuf
   668  0065B4  CFE8 F280          	movff	wreg,_RSDT1+36
   669                           ;mgs_rs9b.c: 213: RSDT1.outTPCS=GetRSRBuf(14);
   670  0065B8  0E0E               	movlw	14
   671  0065BA  EC7D  F03A         	call	_GetRSRBuf
   672  0065BE  CFE8 F282          	movff	wreg,_RSDT1+38
   673                           ;mgs_rs9b.c: 214: RSDT1.outMMIN=GetRSRBuf(15);
   674  0065C2  0E0F               	movlw	15
   675  0065C4  EC7D  F03A         	call	_GetRSRBuf
   676  0065C8  CFE8 F283          	movff	wreg,_RSDT1+39
   677                           ;mgs_rs9b.c: 215: RSDT1.outMMAX=GetRSRBuf(16);
   678  0065CC  0E10               	movlw	16
   679  0065CE  EC7D  F03A         	call	_GetRSRBuf
   680  0065D2  CFE8 F284          	movff	wreg,_RSDT1+40
   681                           ;mgs_rs9b.c: 216: RSDT1.outRDPM=GetRSRBuf(17);
   682  0065D6  0E11               	movlw	17
   683  0065D8  EC7D  F03A         	call	_GetRSRBuf
   684  0065DC  CFE8 F285          	movff	wreg,_RSDT1+41
   685                           ;mgs_rs9b.c: 217: RSDT1.outDTPM=GetRSRBuf(18);
   686  0065E0  0E12               	movlw	18
   687  0065E2  EC7D  F03A         	call	_GetRSRBuf
   688  0065E6  CFE8 F286          	movff	wreg,_RSDT1+42
   689                           ;mgs_rs9b.c: 218: RSDT1.outMDPM=GetRSRBuf(19);
   690  0065EA  0E13               	movlw	19
   691  0065EC  EC7D  F03A         	call	_GetRSRBuf
   692  0065F0  CFE8 F287          	movff	wreg,_RSDT1+43
   693                           ;mgs_rs9b.c: 219: RSDT1.outTECO=GetRSRBuf(20);
   694  0065F4  0E14               	movlw	20
   695  0065F6  EC7D  F03A         	call	_GetRSRBuf
   696  0065FA  CFE8 F288          	movff	wreg,_RSDT1+44
   697                           ;mgs_rs9b.c: 220: RSDT1.outTMMAXG2=GetRSRBuf(21)
      +                          ;
   698  0065FE  0E15               	movlw	21
   699  006600  EC7D  F03A         	call	_GetRSRBuf
   700  006604  CFE8 F289          	movff	wreg,_RSDT1+45
   701                           ;mgs_rs9b.c: 221: RSDT1.outMMAXG2=GetRSRBuf(22);
   702  006608  0E16               	movlw	22
   703  00660A  EC7D  F03A         	call	_GetRSRBuf
   704  00660E  CFE8 F28A          	movff	wreg,_RSDT1+46
   705                           ;mgs_rs9b.c: 222: RSDT1.RD_KNF=1;
   706  006612  0102               	movlb	(_RSDT1+1) shr (0+8)
   707  006614  855D               	bsf	(_RSDT1+1)& (0+255),2,b
   708                           ;mgs_rs9b.c: 223: }
   709  006616  0012               	return	
   710  006618                     l33:
   711  006618  C25C  FFE8         	movff	_RSDT1,wreg
   712  00661C  0A01               	xorlw	1
   713  00661E  E101 D6F8          	bz	l34
   714  006622  0A03               	xorlw	3
   715  006624  E101 D774          	bz	l36
   716  006628  0012               	return	
   717                           ;mgs_rs9b.c: 228: }
   718  00662A                     __end_of_SaveRSToData:
   719                           ;mgs_rs9b.c: 230: void SaveDataToRS(unsigned cha
      +                          r tDTA)
   720                           ;mgs_rs9b.c: 231: {
   721  00662A                     _SaveDataToRS:
   722  000000                     
   723                           ; _tDTA loaded to fsr2l
   724  00662A  6ED9               	movwf	fsr2l,c
   725                           ;mgs_rs9b.c: 232: unsigned char ndat;
   726  00662C  D0B7               	goto	l45
   727  00662E                     l46:
   728                           ;mgs_rs9b.c: 236: {
   729                           ;mgs_rs9b.c: 238: {
   730  00662E  0E09               	movlw	9
   731  006630  0100               	movlb	__Lparam shr (0+8)
   732  006632  6FD0               	movwf	?a_SaveDataToRS^(__Lparam& (0+65280)),b
   733                           ;mgs_rs9b.c: 240: chkndat=SetNDatCHK(ndat);
   734  006634  ECE3  F03A         	call	_SetNDatCHK
   735  006638  0100               	movlb	__Lparam shr (0+8)
   736  00663A  6FD1               	movwf	(?a_SaveDataToRS+1)^(__Lparam& (0+65280))
      +                          ,b
   737                           ;mgs_rs9b.c: 242: SetRSTBuf(0,0x10);
   738  00663C  0E10               	movlw	16
   739  00663E  6FD2               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   740  006640  0E00               	movlw	0
   741  006642  EC73  F03A         	call	_SetRSTBuf
   742                           ;mgs_rs9b.c: 243: SetRSTBuf(1,chkndat);
   743  006646  0100               	movlb	__Lparam shr (0+8)
   744  006648  51D1               	movf	(?a_SaveDataToRS+1)^(__Lparam& (0+65280)),
      +                          w
   745  00664A  6FD2               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   746  00664C  0E01               	movlw	1
   747  00664E  EC73  F03A         	call	_SetRSTBuf
   748                           ;mgs_rs9b.c: 244: SetRSTBuf(2,1);
   749  006652  0E01               	movlw	1
   750  006654  0100               	movlb	__Lparam shr (0+8)
   751  006656  6FD2               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   752  006658  0E02               	movlw	2
   753  00665A  EC73  F03A         	call	_SetRSTBuf
   754                           ;mgs_rs9b.c: 245: SetRSTBuf(3,RSDT1.inSTAT0);
   755  00665E  C28E  F0D2         	movff	_RSDT1+50,?_SetRSTBuf
   756  006662  0E03               	movlw	3
   757  006664  EC73  F03A         	call	_SetRSTBuf
   758                           ;mgs_rs9b.c: 246: SetRSTBuf(4,RSDT1.inSTAT1);
   759  006668  C28F  F0D2         	movff	_RSDT1+51,?_SetRSTBuf
   760  00666C  0E04               	movlw	4
   761  00666E  EC73  F03A         	call	_SetRSTBuf
   762                           ;mgs_rs9b.c: 247: SetRSTBuf(5,RSDT1.inPCO);
   763  006672  C28B  F0D2         	movff	_RSDT1+47,?_SetRSTBuf
   764  006676  0E05               	movlw	5
   765  006678  EC73  F03A         	call	_SetRSTBuf
   766                           ;mgs_rs9b.c: 248: SetRSTBuf(6,RSDT1.inPCW);
   767  00667C  C28C  F0D2         	movff	_RSDT1+48,?_SetRSTBuf
   768  006680  0E06               	movlw	6
   769  006682  EC73  F03A         	call	_SetRSTBuf
   770                           ;mgs_rs9b.c: 249: SetRSTBuf(7,RSDT1.inECO);
   771  006686  C28D  F0D2         	movff	_RSDT1+49,?_SetRSTBuf
   772  00668A  0E07               	movlw	7
   773  00668C  EC73  F03A         	call	_SetRSTBuf
   774                           ;mgs_rs9b.c: 250: SetRSCHK(ndat);
   775  006690  0E09               	movlw	9
   776  006692  EFAB  F03A         	goto	_SetRSCHK
   777                           ;mgs_rs9b.c: 252: break;
   778  006696                     l47:
   779                           ;mgs_rs9b.c: 253: }
   780                           ;mgs_rs9b.c: 255: {
   781  006696  0E19               	movlw	25
   782  006698  0100               	movlb	__Lparam shr (0+8)
   783  00669A  6FD0               	movwf	?a_SaveDataToRS^(__Lparam& (0+65280)),b
   784                           ;mgs_rs9b.c: 257: chkndat=SetNDatCHK(ndat);
   785  00669C  ECE3  F03A         	call	_SetNDatCHK
   786  0066A0  0100               	movlb	__Lparam shr (0+8)
   787  0066A2  6FD1               	movwf	(?a_SaveDataToRS+1)^(__Lparam& (0+65280))
      +                          ,b
   788                           ;mgs_rs9b.c: 259: SetRSTBuf(0,0x10);
   789  0066A4  0E10               	movlw	16
   790  0066A6  6FD2               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   791  0066A8  0E00               	movlw	0
   792  0066AA  EC73  F03A         	call	_SetRSTBuf
   793                           ;mgs_rs9b.c: 260: SetRSTBuf(1,chkndat);
   794  0066AE  0100               	movlb	__Lparam shr (0+8)
   795  0066B0  51D1               	movf	(?a_SaveDataToRS+1)^(__Lparam& (0+65280)),
      +                          w
   796  0066B2  6FD2               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   797  0066B4  0E01               	movlw	1
   798  0066B6  EC73  F03A         	call	_SetRSTBuf
   799                           ;mgs_rs9b.c: 261: SetRSTBuf(2,2);
   800  0066BA  0E02               	movlw	2
   801  0066BC  0100               	movlb	__Lparam shr (0+8)
   802  0066BE  6FD2               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   803  0066C0  EC73  F03A         	call	_SetRSTBuf
   804                           ;mgs_rs9b.c: 262: SetRSTBuf(3,RSDT1.inKSTAT0);
   805  0066C4  C290  F0D2         	movff	_RSDT1+52,?_SetRSTBuf
   806  0066C8  0E03               	movlw	3
   807  0066CA  EC73  F03A         	call	_SetRSTBuf
   808                           ;mgs_rs9b.c: 263: SetRSTBuf(4,RSDT1.inKRK);
   809  0066CE  C291  F0D2         	movff	_RSDT1+53,?_SetRSTBuf
   810  0066D2  0E04               	movlw	4
   811  0066D4  EC73  F03A         	call	_SetRSTBuf
   812                           ;mgs_rs9b.c: 264: SetRSTBuf(5,RSDT1.inPRM);
   813  0066D8  C292  F0D2         	movff	_RSDT1+54,?_SetRSTBuf
   814  0066DC  0E05               	movlw	5
   815  0066DE  EC73  F03A         	call	_SetRSTBuf
   816                           ;mgs_rs9b.c: 265: SetRSTBuf(6,RSDT1.inDDTA);
   817  0066E2  C293  F0D2         	movff	_RSDT1+55,?_SetRSTBuf
   818  0066E6  0E06               	movlw	6
   819  0066E8  EC73  F03A         	call	_SetRSTBuf
   820                           ;mgs_rs9b.c: 266: SetRSTBuf(7,RSDT1.inMSTR);
   821  0066EC  C294  F0D2         	movff	_RSDT1+56,?_SetRSTBuf
   822  0066F0  0E07               	movlw	7
   823  0066F2  EC73  F03A         	call	_SetRSTBuf
   824                           ;mgs_rs9b.c: 267: SetRSTBuf(8,RSDT1.inMMAXU);
   825  0066F6  C295  F0D2         	movff	_RSDT1+57,?_SetRSTBuf
   826  0066FA  0E08               	movlw	8
   827  0066FC  EC73  F03A         	call	_SetRSTBuf
   828                           ;mgs_rs9b.c: 268: SetRSTBuf(9,RSDT1.inMMAXG);
   829  006700  C296  F0D2         	movff	_RSDT1+58,?_SetRSTBuf
   830  006704  0E09               	movlw	9
   831  006706  EC73  F03A         	call	_SetRSTBuf
   832                           ;mgs_rs9b.c: 269: SetRSTBuf(10,RSDT1.inOPDG);
   833  00670A  C29B  F0D2         	movff	_RSDT1+63,?_SetRSTBuf
   834  00670E  0E0A               	movlw	10
   835  006710  EC73  F03A         	call	_SetRSTBuf
   836                           ;mgs_rs9b.c: 270: SetRSTBuf(11,RSDT1.inWANL);
   837  006714  C297  F0D2         	movff	_RSDT1+59,?_SetRSTBuf
   838  006718  0E0B               	movlw	11
   839  00671A  EC73  F03A         	call	_SetRSTBuf
   840                           ;mgs_rs9b.c: 271: SetRSTBuf(12,RSDT1.inKODKT);
   841  00671E  C298  F0D2         	movff	_RSDT1+60,?_SetRSTBuf
   842  006722  0E0C               	movlw	12
   843  006724  EC73  F03A         	call	_SetRSTBuf
   844                           ;mgs_rs9b.c: 272: SetRSTBuf(13,RSDT1.inWOBG);
   845  006728  C299  F0D2         	movff	_RSDT1+61,?_SetRSTBuf
   846  00672C  0E0D               	movlw	13
   847  00672E  EC73  F03A         	call	_SetRSTBuf
   848                           ;mgs_rs9b.c: 273: SetRSTBuf(14,RSDT1.inNOKR);
   849  006732  C29A  F0D2         	movff	_RSDT1+62,?_SetRSTBuf
   850  006736  0E0E               	movlw	14
   851  006738  EC73  F03A         	call	_SetRSTBuf
   852                           ;mgs_rs9b.c: 274: SetRSTBuf(15,RSDT1.inTPCS);
   853  00673C  C29C  F0D2         	movff	_RSDT1+64,?_SetRSTBuf
   854  006740  0E0F               	movlw	15
   855  006742  EC73  F03A         	call	_SetRSTBuf
   856                           ;mgs_rs9b.c: 275: SetRSTBuf(16,RSDT1.inMMIN);
   857  006746  C29D  F0D2         	movff	_RSDT1+65,?_SetRSTBuf
   858  00674A  0E10               	movlw	16
   859  00674C  EC73  F03A         	call	_SetRSTBuf
   860                           ;mgs_rs9b.c: 276: SetRSTBuf(17,RSDT1.inMMAX);
   861  006750  C29E  F0D2         	movff	_RSDT1+66,?_SetRSTBuf
   862  006754  0E11               	movlw	17
   863  006756  EC73  F03A         	call	_SetRSTBuf
   864                           ;mgs_rs9b.c: 277: SetRSTBuf(18,RSDT1.inRDPM);
   865  00675A  C29F  F0D2         	movff	_RSDT1+67,?_SetRSTBuf
   866  00675E  0E12               	movlw	18
   867  006760  EC73  F03A         	call	_SetRSTBuf
   868                           ;mgs_rs9b.c: 278: SetRSTBuf(19,RSDT1.inDTPM);
   869  006764  C2A0  F0D2         	movff	_RSDT1+68,?_SetRSTBuf
   870  006768  0E13               	movlw	19
   871  00676A  EC73  F03A         	call	_SetRSTBuf
   872                           ;mgs_rs9b.c: 279: SetRSTBuf(20,RSDT1.inMDPM);
   873  00676E  C2A1  F0D2         	movff	_RSDT1+69,?_SetRSTBuf
   874  006772  0E14               	movlw	20
   875  006774  EC73  F03A         	call	_SetRSTBuf
   876                           ;mgs_rs9b.c: 280: SetRSTBuf(21,RSDT1.inTECO);
   877  006778  C2A2  F0D2         	movff	_RSDT1+70,?_SetRSTBuf
   878  00677C  0E15               	movlw	21
   879  00677E  EC73  F03A         	call	_SetRSTBuf
   880                           ;mgs_rs9b.c: 281: SetRSTBuf(22,RSDT1.inTMMAXG2);
   881  006782  C2A3  F0D2         	movff	_RSDT1+71,?_SetRSTBuf
   882  006786  0E16               	movlw	22
   883  006788  EC73  F03A         	call	_SetRSTBuf
   884                           ;mgs_rs9b.c: 282: SetRSTBuf(23,RSDT1.inMMAXG2);
   885  00678C  C2A4  F0D2         	movff	_RSDT1+72,?_SetRSTBuf
   886  006790  0E17               	movlw	23
   887  006792  EC73  F03A         	call	_SetRSTBuf
   888                           ;mgs_rs9b.c: 283: SetRSCHK(ndat);
   889  006796  0E19               	movlw	25
   890  006798  EFAB  F03A         	goto	_SetRSCHK
   891                           ;mgs_rs9b.c: 285: break;
   892  00679C                     l45:
   893  00679C  50D9               	movf	fsr2l,w,c
   894  00679E  0A01               	xorlw	1
   895  0067A0  E101 D745          	bz	l46
   896  0067A4  0A03               	xorlw	3
   897  0067A6  E101 D776          	bz	l47
   898  0067AA  0012               	return	
   899                           ;mgs_rs9b.c: 288: }
   900  0067AC                     __end_of_SaveDataToRS:
   901                           ;mgs_rs9b.c: 292: void TrToUNI01(unsigned char t
      +                          DTA)
   902                           ;mgs_rs9b.c: 293: {
   903  0067AC                     _TrToUNI01:
   904  000000                     
   905                           ;_tDTA stored from wreg
   906  0067AC  0100               	movlb	__Lparam shr (0+8)
   907  0067AE  6FCF               	movwf	?a_TrToUNI01^(__Lparam& (0+65280)),b
   908                           ;mgs_rs9b.c: 296: switch(MGSD.KTR)
   909  0067B0  D06A               	goto	l50
   910  0067B2                     l51:
   911                           ;mgs_rs9b.c: 297: {
   912                           ;mgs_rs9b.c: 299: MGSD.KTR=1;
   913  0067B2  0E01               	movlw	1
   914  0067B4  CFE8 F2F0          	movff	wreg,_MGSD+5
   915  0067B8                     l52:
   916                           ;mgs_rs9b.c: 300: case 1:
   917                           ;mgs_rs9b.c: 301: SaveDataToRS(tDTA);
   918  0067B8  0100               	movlb	__Lparam shr (0+8)
   919  0067BA  51CF               	movf	?a_TrToUNI01^(__Lparam& (0+65280)),w
   920  0067BC  DF36               	call	_SaveDataToRS
   921                           ;mgs_rs9b.c: 302: StartTransData();
   922  0067BE  DDAD               	call	_StartTransData	;wreg free
   923                           ;mgs_rs9b.c: 303: MGSD.KTR=2;
   924  0067C0  0E02               	movlw	2
   925  0067C2  CFE8 F2F0          	movff	wreg,_MGSD+5
   926  0067C6                     l53:
   927                           ;mgs_rs9b.c: 304: case 2:
   928                           ;mgs_rs9b.c: 305: if(MGSD._TransData)
   929  0067C6  0102               	movlb	_MGSD shr (0+8)
   930  0067C8  A1EB               	btfss	_MGSD& (0+255),0,b
   931  0067CA  D002               	goto	l54
   932                           ;mgs_rs9b.c: 306: {
   933  0067CC  0E01               	movlw	1
   934  0067CE  D5A9               	goto	_TransData
   935                           ;mgs_rs9b.c: 308: return;
   936  0067D0                     l54:
   937                           ;mgs_rs9b.c: 309: }
   938  0067D0  0102               	movlb	_MGSD shr (0+8)
   939  0067D2  A7EB               	btfss	_MGSD& (0+255),3,b
   940  0067D4  D023               	goto	l55
   941                           ;mgs_rs9b.c: 311: {
   942  0067D6  98AB               	bcf	4011,4,c
   943                           ;mgs_rs9b.c: 313: if(VerifyRSACK()&&VerifyRSCHK(
      +                          UADt.RNData))
   944  0067D8  ECBF  F03A         	call	_VerifyRSACK	;wreg free
   945  0067DC  0900               	iorlw	0
   946  0067DE  E01A               	bz	l56
   947  0067E0  C2F4  FFE8         	movff	_UADt+2,wreg
   948  0067E4  ECC5  F03A         	call	_VerifyRSCHK
   949  0067E8  0900               	iorlw	0
   950  0067EA  E014               	bz	l56
   951                           ;mgs_rs9b.c: 314: {
   952  0067EC  0107               	movlb	_xxy shr (0+8)
   953  0067EE  2B98               	incf	_xxy& (0+255),f,b
   954  0067F0  0598               	decf	_xxy& (0+255),w,b
   955  0067F2  6E00               	movwf	btemp,c
   956  0067F4  0E64               	movlw	100
   957  0067F6  5C00               	subwf	btemp,w,c
   958  0067F8  E301               	bnc	l57
   959  0067FA  6B98               	clrf	_xxy& (0+255),b
   960  0067FC                     l57:
   961                           ;mgs_rs9b.c: 316: MGSD.LCN=0;
   962  0067FC  0102               	movlb	(_MGSD+6) shr (0+8)
   963  0067FE  6BF1               	clrf	(_MGSD+6)& (0+255),b
   964                           ;mgs_rs9b.c: 317: MGSD._NO_ODB=0;
   965  006800  93EC               	bcf	(_MGSD+1)& (0+255),1,b
   966                           ;mgs_rs9b.c: 318: MGSD._TransACK=1;
   967  006802  89EB               	bsf	_MGSD& (0+255),4,b
   968                           ;mgs_rs9b.c: 319: SaveRSToData();
   969  006804  DE00               	call	_SaveRSToData	;wreg free
   970                           ;mgs_rs9b.c: 320: MGSD.KTR=0;
   971  006806  0102               	movlb	(_MGSD+5) shr (0+8)
   972  006808  6BF0               	clrf	(_MGSD+5)& (0+255),b
   973                           ;mgs_rs9b.c: 321: ZtnToNext(0);
   974  00680A  0E00               	movlw	0
   975  00680C  EC22  F03E         	call	_ZtnToNext
   976                           ;mgs_rs9b.c: 322: CREN=1;
   977  006810  88AB               	bsf	4011,4,c
   978                           ;mgs_rs9b.c: 323: return;
   979  006812  0012               	return	
   980  006814                     l56:
   981                           ;mgs_rs9b.c: 325: else
   982  006814  0102               	movlb	_MGSD shr (0+8)
   983  006816  99EB               	bcf	_MGSD& (0+255),4,b
   984                           ;mgs_rs9b.c: 328: }
   985  006818  88AB               	bsf	4011,4,c
   986                           ;mgs_rs9b.c: 330: }else MGSD._TransACK=0;
   987  00681A  D002               	goto	l59
   988  00681C                     l55:
   989  00681C  0102               	movlb	_MGSD shr (0+8)
   990  00681E  99EB               	bcf	_MGSD& (0+255),4,b
   991  006820                     l59:
   992                           ;mgs_rs9b.c: 331: if(zzz++>99) zzz=0;
   993  006820  0107               	movlb	_zzz shr (0+8)
   994  006822  2B99               	incf	_zzz& (0+255),f,b
   995  006824  0599               	decf	_zzz& (0+255),w,b
   996  006826  6E00               	movwf	btemp,c
   997  006828  0E64               	movlw	100
   998  00682A  5C00               	subwf	btemp,w,c
   999  00682C  E301               	bnc	l60
  1000  00682E  6B99               	clrf	_zzz& (0+255),b
  1001  006830                     l60:
  1002                           ;mgs_rs9b.c: 332: if(MGSD._RERR_TIM||MGSD._TERR_
      +                          TIM||MGSD._RERR_REC) if(MGSD.LCN<100) MGSD.LCN++
      +                          ;
  1003  006830  0102               	movlb	_MGSD shr (0+8)
  1004  006832  ADEB               	btfss	_MGSD& (0+255),6,b
  1005  006834  BBEB               	btfsc	_MGSD& (0+255),5,b
  1006  006836  D002               	goto	u280
  1007  006838  AFEB               	btfss	_MGSD& (0+255),7,b
  1008  00683A  D005               	goto	l61
  1009  00683C                     u280:
  1010  00683C  0E64               	movlw	100
  1011  00683E  0102               	movlb	(_MGSD+6) shr (0+8)
  1012  006840  61F1               	cpfslt	(_MGSD+6)& (0+255),b
  1013  006842  D001               	goto	l61
  1014  006844  2BF1               	incf	(_MGSD+6)& (0+255),f,b
  1015  006846                     l61:
  1016                           ;mgs_rs9b.c: 333: if(!MGSD._RERR_TIM&&!MGSD._TER
      +                          R_TIM&&!MGSD._RERR_REC) MGSD.LCN=0;
  1017  006846  0102               	movlb	_MGSD shr (0+8)
  1018  006848  ADEB               	btfss	_MGSD& (0+255),6,b
  1019  00684A  BBEB               	btfsc	_MGSD& (0+255),5,b
  1020  00684C  D004               	goto	l63
  1021  00684E  BFEB               	btfsc	_MGSD& (0+255),7,b
  1022  006850  D002               	goto	l63
  1023  006852  0102               	movlb	(_MGSD+6) shr (0+8)
  1024  006854  6BF1               	clrf	(_MGSD+6)& (0+255),b
  1025  006856                     l63:
  1026                           ;mgs_rs9b.c: 334: if(MGSD.LCN>20) MGSD._NO_ODB=1
      +                          ;
  1027  006856  0E14               	movlw	20
  1028  006858  0102               	movlb	(_MGSD+6) shr (0+8)
  1029  00685A  65F1               	cpfsgt	(_MGSD+6)& (0+255),b
  1030  00685C  D002               	goto	l64
  1031  00685E  83EC               	bsf	(_MGSD+1)& (0+255),1,b
  1032  006860  D002               	goto	l65
  1033  006862                     l64:
  1034                           ;mgs_rs9b.c: 335: else MGSD._NO_ODB=0;
  1035  006862  0102               	movlb	(_MGSD+1) shr (0+8)
  1036  006864  93EC               	bcf	(_MGSD+1)& (0+255),1,b
  1037  006866                     l65:
  1038                           ;mgs_rs9b.c: 336: if(MGSD._TERR_TIM||MGSD._RERR_
      +                          TIM||MGSD._RERR_REC) MGSD._ERRt=1;
  1039  006866  0102               	movlb	_MGSD shr (0+8)
  1040  006868  ABEB               	btfss	_MGSD& (0+255),5,b
  1041  00686A  BDEB               	btfsc	_MGSD& (0+255),6,b
  1042  00686C  D002               	goto	u400
  1043  00686E  AFEB               	btfss	_MGSD& (0+255),7,b
  1044  006870  D003               	goto	l66
  1045  006872                     u400:
  1046  006872  0102               	movlb	(_MGSD+1) shr (0+8)
  1047  006874  81EC               	bsf	(_MGSD+1)& (0+255),0,b
  1048  006876  D002               	goto	l67
  1049  006878                     l66:
  1050                           ;mgs_rs9b.c: 337: else MGSD._ERRt=0;
  1051  006878  0102               	movlb	(_MGSD+1) shr (0+8)
  1052  00687A  91EC               	bcf	(_MGSD+1)& (0+255),0,b
  1053  00687C                     l67:
  1054                           ;mgs_rs9b.c: 338: MGSD.KTR=0;
  1055  00687C  0102               	movlb	(_MGSD+5) shr (0+8)
  1056  00687E  6BF0               	clrf	(_MGSD+5)& (0+255),b
  1057                           ;mgs_rs9b.c: 339: ZtnToNext(0);
  1058  006880  0E00               	movlw	0
  1059  006882  EF22  F03E         	goto	_ZtnToNext
  1060                           ;mgs_rs9b.c: 340: break;
  1061  006886                     l50:
  1062  006886  C2F0  FFE8         	movff	_MGSD+5,wreg
  1063  00688A  0A00               	xorlw	0
  1064  00688C  E092               	bz	l51
  1065  00688E  0A01               	xorlw	1
  1066  006890  E093               	bz	l52
  1067  006892  0A03               	xorlw	3
  1068  006894  E098               	bz	l53
  1069  006896  0012               	return	
  1070                           ;mgs_rs9b.c: 342: }
  1071  006898                     __end_of_TrToUNI01:
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413  000000                     
  1414  000000                     
  1415  000000                     
  1416  000000                     
  1417  000000                     
  1418  000000                     
  1419  000000                     
  1420  000000                     
  1421  000000                     
  1422  000000                     
  1423  000000                     
  1424  000000                     
  1425  000000                     
  1426  000000                     
  1427  000000                     
  1428  000000                     
  1429  000000                     
  1430  000000                     
  1431  000000                     
  1432  000000                     
  1433  000000                     
  1434  000000                     
  1435  000000                     
  1436  000000                     
  1437  000000                     
  1438  000000                     
  1439  000000                     
  1440  000000                     
  1441  000000                     
  1442  000000                     
  1443  000000                     
  1444  000000                     
  1445  000000                     
  1446  000000                     
  1447  000000                     
  1448  000000                     
  1449  000000                     
  1450  000000                     
  1451  000000                     
  1452  000000                     
  1453  000000                     
  1454  000000                     
  1455  000000                     
  1456  000000                     
  1457  000000                     
  1458  000000                     
  1459  000000                     
  1460  000000                     
  1461  000000                     
  1462  000000                     
  1463  000000                     
  1464  000000                     
  1465  000000                     
  1466  000000                     
  1467  000000                     
  1468  000000                     
  1469  000000                     
  1470  000000                     
  1471  000000                     
  1472  000000                     
  1473  000000                     
  1474  000000                     
  1475  000000                     
  1476  000000                     
  1477  000000                     
  1478  000000                     
  1479  000000                     
  1480  000000                     
  1481  000000                     
  1482  000000                     
  1483  000000                     
  1484  000000                     
  1485  000000                     
  1486  000000                     
  1487  000000                     
  1488  000000                     
  1489  000000                     
  1490  000000                     
  1491  000000                     
  1492  000000                     
  1493  000000                     
  1494  000000                     
  1495  000000                     
  1496  000000                     
  1497  000000                     
  1498  000000                     
  1499  000000                     
  1500  000000                     
  1501  000000                     
  1502  000000                     
  1503  000000                     
  1504  000000                     
  1505  000000                     
  1506  000000                     
  1507  000000                     
  1508  000000                     
  1509  000000                     
  1510  000000                     
  1511  000000                     
  1512  000000                     
  1513  000000                     
  1514  000000                     
  1515  000000                     
  1516  000000                     
  1517  000000                     
  1518  000000                     
  1519  000000                     
  1520  000000                     
  1521  000000                     
  1522  000000                     
  1523  000000                     
  1524  000000                     
  1525  000000                     
  1526  000000                     
  1527  000000                     
  1528  000000                     
  1529  000000                     
  1530  000000                     
  1531  000000                     
  1532  000000                     
  1533  000000                     
  1534  000000                     
  1535  000000                     
  1536  000000                     
  1537  000000                     
  1538  000000                     
  1539  000000                     
  1540  000000                     
  1541  000000                     
  1542  000000                     
  1543  000000                     
  1544  000000                     
  1545  000000                     
  1546  000000                     
  1547  000000                     
  1548  000000                     
  1549  000000                     
  1550  000000                     
  1551  000000                     
  1552  000000                     
  1553  000000                     
  1554  000000                     
  1555  000000                     
  1556  000000                     
  1557  000000                     
  1558  000000                     
  1559  000000                     
  1560  000000                     
  1561  000000                     
  1562  000000                     
  1563  000000                     
  1564  000000                     
  1565  000000                     
  1566  000000                     
  1567  000000                     
  1568  000000                     
  1569  000000                     
  1570  000000                     
  1571  000000                     
  1572  000000                     
  1573  000000                     
  1574  000000                     
  1575  000000                     
  1576  000000                     
  1577  000000                     
  1578  000000                     
  1579  000000                     
  1580  000000                     
  1581  000000                     
  1582  000000                     
  1583  000000                     
  1584  000000                     
  1585  000000                     
  1586  000000                     
  1587  000000                     
  1588  000000                     
  1589  000000                     
  1590  000000                     
  1591  000000                     
  1592  000000                     
  1593  000000                     
  1594  000000                     
  1595  000000                     
  1596  000000                     
  1597  000000                     
  1598  000000                     
  1599  000000                     
  1600  000000                     
  1601  000000                     
  1602  000000                     
  1603  000000                     
  1604  000000                     
  1605  000000                     
  1606  000000                     
  1607  000000                     
  1608  000000                     
  1609  000000                     
  1610  000000                     
  1611  000000                     
  1612  000000                     
  1613  000000                     
  1614  000000                     
  1615  000000                     
  1616  000000                     
  1617  000000                     
  1618  000000                     
  1619  000000                     
  1620  000000                     
  1621  000000                     
  1622  000000                     
  1623  000000                     
  1624  000000                     
  1625  000000                     
  1626  000000                     
  1627  000000                     
  1628  000000                     
  1629  000000                     
  1630  000000                     
  1631  000000                     
  1632  000000                     
  1633  000000                     
  1634  000000                     
  1635  000000                     
  1636  000000                     
  1637  000000                     
  1638  000000                     
  1639  000000                     
  1640  000000                     
  1641  000000                     
  1642  000000                     
  1643  000000                     
  1644  000000                     
  1645  000000                     
  1646  000000                     
  1647  000000                     
  1648  000000                     
  1649  000000                     
  1650  000000                     
  1651  000000                     
  1652  000000                     
  1653  000000                     
  1654  000000                     
  1655  000000                     
  1656  000000                     
  1657  000000                     
  1658  000000                     
  1659  000000                     
  1660  000000                     
  1661  000000                     
  1662  000000                     
  1663  000000                     
  1664  000000                     
  1665  000000                     
  1666  000000                     
  1667  000000                     
  1668  000000                     
  1669  000000                     
  1670  000000                     
  1671  000000                     
  1672  000000                     
  1673  000000                     
  1674  000000                     
  1675  000000                     
  1676  000000                     
  1677  000000                     
  1678  000000                     
  1679  000000                     
  1680  000000                     
  1681  000000                     
  1682  000000                     
  1683  000000                     
  1684  000000                     
  1685  000000                     
  1686  000000                     
  1687  000000                     
  1688  000000                     
  1689  000000                     
  1690  000000                     
  1691  000000                     
  1692  000000                     
  1693  000000                     
  1694  000000                     
  1695  000000                     
  1696  000000                     
  1697  000000                     
  1698  000000                     
  1699  000000                     
  1700  000000                     
  1701  000000                     
  1702  000000                     
  1703  000000                     
  1704  000000                     
  1705  000000                     
  1706  000000                     
  1707  000000                     
  1708  000000                     
  1709  000000                     
  1710  000000                     
  1711  000000                     
  1712  000000                     
  1713  000000                     
  1714  000000                     
  1715  000000                     
  1716  000000                     
  1717  000000                     
  1718  000000                     
  1719  000000                     
  1720  000000                     
  1721  000000                     
  1722  000000                     
  1723  000000                     
  1724  000000                     
  1725  000000                     
  1726  000000                     
  1727  000000                     
  1728  000000                     
  1729  000000                     
  1730  000000                     
  1731  000000                     
  1732  000000                     
  1733  000000                     
  1734  000000                     
  1735  000000                     
  1736  000000                     
  1737  000000                     
  1738  000000                     
  1739  000000                     
  1740  000000                     
  1741  000000                     
  1742  000000                     
  1743  000000                     
  1744  000000                     
  1745  000000                     
  1746  000000                     
  1747  000000                     
  1748  000000                     
  1749  000000                     
  1750  000000                     
  1751  000000                     
  1752  000000                     
  1753  000000                     
  1754  000000                     
  1755  000000                     
  1756  000000                     
  1757  000000                     
  1758  000000                     
  1759  000000                     
  1760  000000                     
  1761  000000                     
  1762  000000                     
  1763  000000                     
  1764  000000                     
  1765  000000                     
  1766  000000                     
  1767  000000                     
  1768  000000                     
  1769  000000                     
  1770  000000                     
  1771  000000                     
  1772  000000                     
  1773  000000                     
  1774  000000                     
  1775  000000                     
  1776  000000                     
  1777  000000                     
  1778  000000                     
  1779  000000                     
  1780  000000                     
  1781  000000                     
  1782  000000                     
  1783  000000                     
  1784  000000                     
  1785  000000                     
  1786  000000                     
  1787  000000                     
  1788  000000                     
  1789  000000                     
  1790  000000                     
  1791  000000                     
  1792  000000                     
  1793  000000                     
  1794  000000                     
  1795  000000                     
  1796  000000                     
  1797  000000                     
  1798  000000                     
  1799  000000                     
  1800  000000                     
  1801  000000                     
  1802  000000                     
  1803  000000                     
  1804  000000                     
  1805  000000                     
  1806  000000                     
  1807  000000                     
  1808  000000                     
  1809  000000                     
  1810  000000                     
  1811  000000                     
  1812  000000                     
  1813  000000                     
  1814  000000                     
  1815  000000                     
  1816  000000                     
  1817  000000                     
  1818  000000                     
  1819  000000                     
  1820  000000                     
  1821  000000                     
  1822  000000                     
  1823  000000                     
  1824  000000                     
  1825  000000                     
  1826  000000                     
  1827  000000                     
  1828  000000                     
  1829  000000                     
  1830  000000                     
  1831  000000                     
  1832  000000                     
  1833  000000                     
  1834  000000                     
  1835  000000                     
  1836  000000                     
  1837  000000                     
  1838  000000                     
  1839  000000                     
  1840  000000                     
  1841  000000                     
  1842  000000                     
  1843                           
  1844                           	psect	bigbss
  1845  000797                     _vvv:
  1846  000797                     	ds	1
  1847  000797                     _xxy:
  1848  000797                     	ds	1
  1849  000797                     _zzz:
  1850  000797                     	ds	1
  1851  000000                     
  1852  000000                     
  1853  000000                     
  1854  000000                     
  1855  000000                     
  1856  000000                     
  1857  000000                     
  1858                           
  1859                           	psect	bss
  1860  0002EB                     _MGSD:
  1861  0002EB                     	ds	7
  1862                           
  1863                           	psect	temp
  1864  000000                     btemp:
  1865  000000                     	ds	4
  1866                           wreg	equ	0xFE8
  1867                           fsr2l	equ	0xFD9
  1868                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Fri Nov 21 09:58:04 2014

             _TrToUNI01 67AC       __end_of_TrToUNI01 6898  
                    l30 63E0                      l23 637E  
                    l15 63E8                      l40 651A  
                    l24 6390                      l16 6328  
                    l41 651E                      l33 6618  
                    l25 639E                      l17 6334  
                    l50 6886                      l42 6544  
                    l34 6412                      l26 63B4  
                    l18 633C                      l51 67B2  
                    l27 63BA                      l19 636A  
                    l60 6830                      l52 67B8  
                    l36 6510                      l28 63C8  
                    l61 6846                      l53 67C6  
                    l45 679C                      l29 63DA  
                    l54 67D0                      l46 662E  
                    l63 6856                      l55 681C  
                    l47 6696                      l39 6520  
                    l64 6862                      l56 6814  
                    l65 6866                      l57 67FC  
                    l66 6878                      l67 687C  
                    l59 6820                      u71 6356  
                    u90 6362          ?a_SaveDataToRS 00D0  
                   u400 6872                     u280 683C  
             _TransData 6322                     _vvv 0797  
                   _xxy 0798                     _zzz 0799  
     __end_of_TransData 6406  __end_of_StartTransData 6322  
                   wreg 000FE8                    _MGSD 02EB  
                  _UADt 02F2                    fsr2l 000FD9  
                  btemp 0000               _ZtnToNext 7C44  
            _StartRSTim 62EE      __end_of_StartRSTim 62F4  
           ?a_TrToUNI01 00CF           __end_of_RSTim 62FA  
                 l30003 6540                   l30004 6534  
                 _RSDT1 025C                   _RSTim 62F4  
           _VerifyRSACK 757E             _VerifyRSCHK 758A  
           ?a_TransData 00D0              used_btemp0 0001  
            used_btemp1 0001              used_btemp2 0001  
            used_btemp3 0001                   status 000FD8  
               __Lparam 00CF             _StopUSARTTR 74A6  
               __ramtop 0800              _IncRSTimer 62DE  
    __end_of_IncRSTimer 62EE               _GetRSRBuf 74FA  
          _StartUSARTTR 748E            _SaveRSToData 6406  
          _SaveDataToRS 662A           _InitTransProc 62FA  
            _SetNDatCHK 75C6    __end_of_SaveRSToData 662A  
  __end_of_SaveDataToRS 67AC          _StartTransData 631A  
             _SetRSTBuf 74E6                _SetRSCHK 7556  
 __end_of_InitTransProc 631A              ?_SetRSTBuf 00D2  
