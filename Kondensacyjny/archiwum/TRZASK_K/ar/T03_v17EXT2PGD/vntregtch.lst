

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Thu Jul 28 10:43:11 2016


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	const,global,class=CODE,delta=1
     6                           	psect	bss,global,class=RAM,space=1,delta=1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
    99                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   100                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   101                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   102                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   103                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   104                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   105                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   106                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   107                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   108                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   109                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   110                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   111                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   112                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   113                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   114                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   115                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   116                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   117                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   118                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   119                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   120                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   121                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   122                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   123                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   124                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   125                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   126                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   127                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   128                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   129                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   130                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   131                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   132                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   133                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   134                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   135                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   136                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   137                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   138                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   139                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   140                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   141                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   142                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   143                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   144                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   145                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   146                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   147                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   148                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   149                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   150                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   151                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   152                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   153                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   154                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   155                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   156                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   157                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   158                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   159                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   160                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   161                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   162                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   163                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   164                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   165                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   166                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   167                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   168                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   169                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   170                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   171                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   172                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   173                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   174                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   175                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   176                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   177                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   178                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   179                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   180                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   181                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   182                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   183                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   184                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   185                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   186                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   187                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   188                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   189                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   190                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   191                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   192                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   193                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   194                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   195                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   196                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   197                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   198  000000                     _SetKalPWM$pwm	set	?_SetKalPWM
   199                           
   200                           	psect	text
   201                           ;vntregtch.c: 60: unsigned char SetKalPWM(unsign
      +                          ed char krk,unsigned char pwm)
   202                           ;vntregtch.c: 61: {
   203  00A50C  00A9               	dw	?_SetKalPWM
   204                           ;	_w assigned to ?a_CalkTimStr+1
   205  000000                     _CalkTimStr$w	set	?a_CalkTimStr+1
   206                           ;	_minv assigned to ?a_CalkTimStr+0
   207  000000                     _CalkTimStr$minv	set	?a_CalkTimStr
   208                           ;	_tmp assigned to ?a_VNTToProc+0
   209  000000                     _VNTToProc$tmp	set	?a_VNTToProc
   210                           ;	_tmp assigned to ?a_ProcToVNT+0
   211  000000                     _ProcToVNT$tmp	set	?a_ProcToVNT
   212                           ;	_nst assigned to ?a_CalkVNTtoPopPWM+0
   213  000000                     _CalkVNTtoPopPWM$nst	set	?a_CalkVNTtoPopPWM
   214                           ;       param _pop assigned to ?_CalkVNTtoPopPWM
      +                          +0
   215  000000                     _CalkVNTtoPopPWM$pop	set	?_CalkVNTtoPopPWM
   216                           ;	_nst assigned to ?a_CalkVNTtoPWM+0
   217  000000                     _CalkVNTtoPWM$nst	set	?a_CalkVNTtoPWM
   218                           ;	_pw assigned to ?a_DVNTtoPopPWM+9
   219  000000                     _DVNTtoPopPWM$pw	set	?a_DVNTtoPopPWM+9
   220                           ;	_wsp assigned to ?a_DVNTtoPopPWM+5
   221  000000                     _DVNTtoPopPWM$wsp	set	?a_DVNTtoPopPWM+5
   222                           ;	_v1 assigned to ?a_DVNTtoPopPWM+4
   223  000000                     _DVNTtoPopPWM$v1	set	?a_DVNTtoPopPWM+4
   224                           ;	_dv assigned to ?a_DVNTtoPopPWM+3
   225  000000                     _DVNTtoPopPWM$dv	set	?a_DVNTtoPopPWM+3
   226                           ;	_v2 assigned to ?a_DVNTtoPopPWM+2
   227  000000                     _DVNTtoPopPWM$v2	set	?a_DVNTtoPopPWM+2
   228                           ;	_p1 assigned to ?a_DVNTtoPopPWM+1
   229  000000                     _DVNTtoPopPWM$p1	set	?a_DVNTtoPopPWM+1
   230                           ;	_p2 assigned to ?a_DVNTtoPopPWM+0
   231  000000                     _DVNTtoPopPWM$p2	set	?a_DVNTtoPopPWM
   232                           ;       param _pop assigned to ?_DVNTtoPopPWM+0
   233  000000                     _DVNTtoPopPWM$pop	set	?_DVNTtoPopPWM
   234                           ;	_pw assigned to ?a_DVNTtoPWM+9
   235  000000                     _DVNTtoPWM$pw	set	?a_DVNTtoPWM+9
   236                           ;	_wsp assigned to ?a_DVNTtoPWM+5
   237  000000                     _DVNTtoPWM$wsp	set	?a_DVNTtoPWM+5
   238                           ;	_v1 assigned to ?a_DVNTtoPWM+4
   239  000000                     _DVNTtoPWM$v1	set	?a_DVNTtoPWM+4
   240                           ;	_dv assigned to ?a_DVNTtoPWM+3
   241  000000                     _DVNTtoPWM$dv	set	?a_DVNTtoPWM+3
   242                           ;	_v2 assigned to ?a_DVNTtoPWM+2
   243  000000                     _DVNTtoPWM$v2	set	?a_DVNTtoPWM+2
   244                           ;	_p1 assigned to ?a_DVNTtoPWM+1
   245  000000                     _DVNTtoPWM$p1	set	?a_DVNTtoPWM+1
   246                           ;	_p2 assigned to ?a_DVNTtoPWM+0
   247  000000                     _DVNTtoPWM$p2	set	?a_DVNTtoPWM
   248                           ;	_p assigned to ?a_KalibracjaVNT+0
   249  000000                     _KalibracjaVNT$p	set	?a_KalibracjaVNT
   250                           ;	_krk assigned to ?a_SetKalPWM+1
   251  000000                     _SetKalPWM$krk	set	?a_SetKalPWM+1
   252                           ;	_tim assigned to ?a_SetKalPWM+0
   253  000000                     _SetKalPWM$tim	set	?a_SetKalPWM
   254  00A50E                     _SetKalPWM:
   255  000000                     
   256                           ; _krk loaded to fsr2l
   257  00A50E  6ED9               	movwf	fsr2l,c
   258                           ;_krk stored from fsr2l
   259                           ;vntregtch.c: 62: unsigned char tim,ppp;
   260  00A510  50D9               	movf	fsr2l,w,c
   261  00A512  0D05               	mullw	5
   262  00A514  50F3               	movf	prodl,w,c
   263  00A516  0F23               	addlw	35
   264  00A518  0100               	movlb	__Lparam shr (0+8)
   265  00A51A  6FAA               	movwf	?a_SetKalPWM^(__Lparam& (0+65280)),b
   266                           ;_krk stored from fsr2l
   267  00A51C  50D9               	movf	fsr2l,w,c
   268  00A51E  6FAB               	movwf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),b
   269                           ;vntregtch.c: 66: if(RTdS(10)<tim)
   270  00A520  0E0A               	movlw	10
   271  00A522  ECC9  F063         	call	_RTdS
   272  00A526  6E00               	movwf	btemp,c
   273  00A528  0100               	movlb	__Lparam shr (0+8)
   274  00A52A  51AA               	movf	?a_SetKalPWM^(__Lparam& (0+65280)),w
   275  00A52C  5C00               	subwf	btemp,w,c
   276  00A52E  E204               	bc	l15
   277                           ;vntregtch.c: 67: {
   278  00A530  51A9               	movf	?_SetKalPWM^(__Lparam& (0+65280)),w
   279  00A532  ECDF  F067         	call	_WritePWM
   280                           ;vntregtch.c: 69: return 0;
   281  00A536  0C00               	retlw	0
   282  00A538                     l15:
   283                           ;vntregtch.c: 71: else
   284  00A538  0E0A               	movlw	10
   285  00A53A  ECB7  F063         	call	_StartRTdS
   286                           ;vntregtch.c: 74: Kvnt[krk].dvnt=(unsigned char)
      +                           (round(M.rVVNT/100.0));
   287  00A53E  6A00               	clrf	btemp,c
   288  00A540  0EC8               	movlw	200
   289  00A542  6E01               	movwf	btemp+1,c
   290  00A544  0E42               	movlw	66
   291  00A546  6E02               	movwf	btemp+2,c
   292  00A548  C000  F0AC         	movff	btemp,?a_SetKalPWM+2
   293  00A54C  C001  F0AD         	movff	btemp+1,?a_SetKalPWM+3
   294  00A550  C002  F0AE         	movff	btemp+2,?a_SetKalPWM+4
   295  00A554  EE03  F023         	lfsr	0,_M+29
   296  00A558  CFEE F000          	movff	postinc0,btemp
   297  00A55C  CFED F001          	movff	postdec0,btemp+1
   298  00A560  ECE7  F06D         	call	lwtoft
   299  00A564  C0AC  F003         	movff	?a_SetKalPWM+2,btemp+3
   300  00A568  C0AD  F004         	movff	?a_SetKalPWM+3,btemp+4
   301  00A56C  C0AE  F005         	movff	?a_SetKalPWM+4,btemp+5
   302  00A570  ECAD  F06B         	call	ftdiv
   303  00A574  C000  F0B6         	movff	btemp,?_round
   304  00A578  C001  F0B7         	movff	btemp+1,?_round+1
   305  00A57C  C002  F0B8         	movff	btemp+2,?_round+2
   306  00A580  EC30  F06C         	call	_round	;wreg free
   307  00A584  ECCD  F06C         	call	fttol
   308  00A588  0100               	movlb	__Lparam shr (0+8)
   309  00A58A  51AB               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   310  00A58C  0D02               	mullw	2
   311  00A58E  0EDD               	movlw	low _Kvnt
   312  00A590  24F3               	addwf	prodl,w,c
   313  00A592  6EE9               	movwf	fsr0l,c
   314  00A594  0E02               	movlw	high _Kvnt
   315  00A596  20F4               	addwfc	prodh,w,c
   316  00A598  6EEA               	movwf	fsr0h,c
   317  00A59A  C000  FFEF         	movff	btemp,indf0
   318                           ;vntregtch.c: 75: ppp=2;
   319  00A59E  0E02               	movlw	2
   320  00A5A0  6ED9               	movwf	fsr2l,c
   321                           ;vntregtch.c: 76: if((krk>2)||(Kvnt[krk].dvnt>12
      +                          )) ppp=0;
   322  00A5A2  65AB               	cpfsgt	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),b
   323  00A5A4  D001               	goto	u21
   324  00A5A6  D00D               	goto	u40
   325  00A5A8                     u21:
   326  00A5A8  51AB               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   327  00A5AA  0D02               	mullw	2
   328  00A5AC  0EDD               	movlw	low _Kvnt
   329  00A5AE  24F3               	addwf	prodl,w,c
   330  00A5B0  6EE9               	movwf	fsr0l,c
   331  00A5B2  0E02               	movlw	high _Kvnt
   332  00A5B4  20F4               	addwfc	prodh,w,c
   333  00A5B6  6EEA               	movwf	fsr0h,c
   334  00A5B8  50EF               	movf	indf0,w,c
   335  00A5BA  6E00               	movwf	btemp,c
   336  00A5BC  0E0D               	movlw	13
   337  00A5BE  5C00               	subwf	btemp,w,c
   338  00A5C0  B0D8               	btfsc	status,0,c
   339  00A5C2                     u40:
   340  00A5C2  6AD9               	clrf	fsr2l,c
   341                           ;vntregtch.c: 77: if((pwm+ppp)<=0xff)
   342  00A5C4  50D9               	movf	fsr2l,w,c
   343  00A5C6  C0A9  F000         	movff	?_SetKalPWM,btemp
   344  00A5CA  6A01               	clrf	btemp+1,c
   345  00A5CC  2600               	addwf	btemp,f,c
   346  00A5CE  0E00               	movlw	0
   347  00A5D0  2201               	addwfc	btemp+1,f,c
   348  00A5D2  5001               	movf	btemp+1,w,c
   349  00A5D4  0A80               	xorlw	128
   350  00A5D6  0F7F               	addlw	-129
   351  00A5D8  0E00               	movlw	0
   352  00A5DA  B4D8               	btfsc	status,2,c
   353  00A5DC  5C00               	subwf	btemp,w,c
   354  00A5DE  E20C               	bc	l18
   355                           ;vntregtch.c: 78: {
   356  00A5E0  0100               	movlb	__Lparam shr (0+8)
   357  00A5E2  51AB               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   358  00A5E4  0D02               	mullw	2
   359  00A5E6  0EDE               	movlw	low (_Kvnt+1)
   360  00A5E8  24F3               	addwf	prodl,w,c
   361  00A5EA  6EE9               	movwf	fsr0l,c
   362  00A5EC  0E02               	movlw	high (_Kvnt+1)
   363  00A5EE  20F4               	addwfc	prodh,w,c
   364  00A5F0  6EEA               	movwf	fsr0h,c
   365  00A5F2  50D9               	movf	fsr2l,w,c
   366  00A5F4  25A9               	addwf	?_SetKalPWM^(__Lparam& (0+65280)),w
   367  00A5F6  D00A               	goto	L2
   368                           ;vntregtch.c: 80: }
   369  00A5F8                     l18:
   370                           ;vntregtch.c: 81: else
   371  00A5F8  0100               	movlb	__Lparam shr (0+8)
   372  00A5FA  51AB               	movf	(?a_SetKalPWM+1)^(__Lparam& (0+65280)),w
   373  00A5FC  0D02               	mullw	2
   374  00A5FE  0EDE               	movlw	low (_Kvnt+1)
   375  00A600  24F3               	addwf	prodl,w,c
   376  00A602  6EE9               	movwf	fsr0l,c
   377  00A604  0E02               	movlw	high (_Kvnt+1)
   378  00A606  20F4               	addwfc	prodh,w,c
   379  00A608  6EEA               	movwf	fsr0h,c
   380  00A60A  0EFF               	movlw	-1
   381  00A60C                     L2:
   382  00A60C  6EEF               	movwf	indf0,c
   383                           ;vntregtch.c: 84: }
   384  00A60E  0C01               	retlw	1
   385                           ;vntregtch.c: 87: }
   386  00A610                     __end_of_SetKalPWM:
   387                           ;vntregtch.c: 92: unsigned char KalibracjaVNT(vo
      +                          id)
   388                           ;vntregtch.c: 93: {
   389  00A610                     _KalibracjaVNT:
   390  000000                     
   391                           ;vntregtch.c: 94: static unsigned char k=0,krok=
      +                          0;
   392  00A610  0100               	movlb	__Lparam shr (0+8)
   393  00A612  6BA7               	clrf	?a_KalibracjaVNT^(__Lparam& (0+65280)),b
   394  00A614  6BA8               	clrf	(?a_KalibracjaVNT+1)^(__Lparam& (0+65280))
      +                          ,b
   395                           ;vntregtch.c: 102: if(!M._LCD||!GetBit2(RSDT1.in
      +                          STAT1,2))
   396  00A616  0103               	movlb	(_M+5) shr (0+8)
   397  00A618  A90B               	btfss	(_M+5)& (0+255),4,b
   398  00A61A  D008               	goto	u80
   399  00A61C  0E02               	movlw	2
   400  00A61E  0100               	movlb	__Lparam shr (0+8)
   401  00A620  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   402  00A622  C366  FFE8         	movff	_RSDT1+64,wreg
   403  00A626  EC24  F06A         	call	_GetBit2
   404  00A62A  E203               	bc	l21
   405  00A62C                     u80:
   406                           ;vntregtch.c: 103: {
   407  00A62C  0E0E               	movlw	14
   408  00A62E  ECD5  F063         	call	_StartRTS
   409  00A632                     l21:
   410                           ;vntregtch.c: 105: }
   411  00A632  0103               	movlb	(_M+4) shr (0+8)
   412  00A634  A10A               	btfss	(_M+4)& (0+255),0,b
   413  00A636  D23F               	goto	l24
   414  00A638  0103               	movlb	(_M+5) shr (0+8)
   415  00A63A  A90B               	btfss	(_M+5)& (0+255),4,b
   416  00A63C  D23C               	goto	l24
   417  00A63E  0E0E               	movlw	14
   418  00A640  ECE7  F063         	call	_RTS
   419  00A644  6E00               	movwf	btemp,c
   420  00A646  0E03               	movlw	3
   421  00A648  5C00               	subwf	btemp,w,c
   422  00A64A  E201 D234          	bnc	l24
   423                           ;vntregtch.c: 109: {
   424  00A64E  0100               	movlb	__Lparam shr (0+8)
   425  00A650  0E3E               	movlw	low (_RSDT1+24)
   426  00A652  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   427  00A654  0E03               	movlw	high (_RSDT1+24)
   428  00A656  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   429  00A658  0E07               	movlw	7
   430  00A65A  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   431  00A65C  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   432  00A65E  EC57  F06A         	call	_BitSet2	;wreg free
   433                           ;vntregtch.c: 114: Kvnt[0].dvnt=0;
   434  00A662  0102               	movlb	_Kvnt shr (0+8)
   435  00A664  6BDD               	clrf	_Kvnt& (0+255),b
   436                           ;vntregtch.c: 115: Kvnt[0].dpwm=18;
   437  00A666  0E12               	movlw	18
   438  00A668  CFE8 F2DE          	movff	wreg,_Kvnt+1
   439                           ;vntregtch.c: 117: Kvnt[1].dvnt=20;
   440  00A66C  0E14               	movlw	20
   441  00A66E  CFE8 F2DF          	movff	wreg,_Kvnt+2
   442                           ;vntregtch.c: 118: Kvnt[1].dpwm=51;
   443  00A672  0E33               	movlw	51
   444  00A674  CFE8 F2E0          	movff	wreg,_Kvnt+3
   445                           ;vntregtch.c: 120: Kvnt[2].dvnt=38;
   446  00A678  0E26               	movlw	38
   447  00A67A  CFE8 F2E1          	movff	wreg,_Kvnt+4
   448                           ;vntregtch.c: 121: Kvnt[2].dpwm=84;
   449  00A67E  0E54               	movlw	84
   450  00A680  CFE8 F2E2          	movff	wreg,_Kvnt+5
   451                           ;vntregtch.c: 123: Kvnt[3].dvnt=48;
   452  00A684  0E30               	movlw	48
   453  00A686  CFE8 F2E3          	movff	wreg,_Kvnt+6
   454                           ;vntregtch.c: 124: Kvnt[3].dpwm=117;
   455  00A68A  0E75               	movlw	117
   456  00A68C  CFE8 F2E4          	movff	wreg,_Kvnt+7
   457                           ;vntregtch.c: 126: Kvnt[4].dvnt=56;
   458  00A690  0E38               	movlw	56
   459  00A692  CFE8 F2E5          	movff	wreg,_Kvnt+8
   460                           ;vntregtch.c: 127: Kvnt[4].dpwm=150;
   461  00A696  0E96               	movlw	-106
   462  00A698  CFE8 F2E6          	movff	wreg,_Kvnt+9
   463                           ;vntregtch.c: 129: Kvnt[5].dvnt=62;
   464  00A69C  0E3E               	movlw	62
   465  00A69E  CFE8 F2E7          	movff	wreg,_Kvnt+10
   466                           ;vntregtch.c: 130: Kvnt[5].dpwm=183;
   467  00A6A2  0EB7               	movlw	-73
   468  00A6A4  CFE8 F2E8          	movff	wreg,_Kvnt+11
   469                           ;vntregtch.c: 132: Kvnt[6].dvnt=67;
   470  00A6A8  0E43               	movlw	67
   471  00A6AA  CFE8 F2E9          	movff	wreg,_Kvnt+12
   472                           ;vntregtch.c: 133: Kvnt[6].dpwm=216;
   473  00A6AE  0ED8               	movlw	-40
   474  00A6B0  CFE8 F2EA          	movff	wreg,_Kvnt+13
   475                           ;vntregtch.c: 135: Kvnt[7].dvnt=71;
   476  00A6B4  0E47               	movlw	71
   477  00A6B6  CFE8 F2EB          	movff	wreg,_Kvnt+14
   478                           ;vntregtch.c: 136: Kvnt[7].dpwm=249;
   479  00A6BA  0EF9               	movlw	-7
   480  00A6BC  CFE8 F2EC          	movff	wreg,_Kvnt+15
   481                           ;vntregtch.c: 138: WriteEEVNT0(Kvnt[0].dvnt,Kvnt
      +                          [0].dpwm);
   482  00A6C0  C2DE  F0A9         	movff	_Kvnt+1,?_WriteEEVNT0
   483  00A6C4  C2DD  FFE8         	movff	_Kvnt,wreg
   484  00A6C8  EC73  F045         	call	_WriteEEVNT0
   485                           ;vntregtch.c: 139: WriteEEVNT1(Kvnt[1].dvnt,Kvnt
      +                          [1].dpwm);
   486  00A6CC  C2E0  F0A9         	movff	_Kvnt+3,?_WriteEEVNT1
   487  00A6D0  C2DF  FFE8         	movff	_Kvnt+2,wreg
   488  00A6D4  EC87  F045         	call	_WriteEEVNT1
   489                           ;vntregtch.c: 140: WriteEEVNT2(Kvnt[2].dvnt,Kvnt
      +                          [2].dpwm);
   490  00A6D8  C2E2  F0A9         	movff	_Kvnt+5,?_WriteEEVNT2
   491  00A6DC  C2E1  FFE8         	movff	_Kvnt+4,wreg
   492  00A6E0  EC9B  F045         	call	_WriteEEVNT2
   493                           ;vntregtch.c: 141: WriteEEVNT3(Kvnt[3].dvnt,Kvnt
      +                          [3].dpwm);
   494  00A6E4  C2E4  F0A9         	movff	_Kvnt+7,?_WriteEEVNT3
   495  00A6E8  C2E3  FFE8         	movff	_Kvnt+6,wreg
   496  00A6EC  ECAF  F045         	call	_WriteEEVNT3
   497                           ;vntregtch.c: 142: WriteEEVNT4(Kvnt[4].dvnt,Kvnt
      +                          [4].dpwm);
   498  00A6F0  C2E6  F0A9         	movff	_Kvnt+9,?_WriteEEVNT4
   499  00A6F4  C2E5  FFE8         	movff	_Kvnt+8,wreg
   500  00A6F8  ECC3  F045         	call	_WriteEEVNT4
   501                           ;vntregtch.c: 143: WriteEEVNT5(Kvnt[5].dvnt,Kvnt
      +                          [5].dpwm);
   502  00A6FC  C2E8  F0A9         	movff	_Kvnt+11,?_WriteEEVNT5
   503  00A700  C2E7  FFE8         	movff	_Kvnt+10,wreg
   504  00A704  ECD7  F045         	call	_WriteEEVNT5
   505                           ;vntregtch.c: 144: WriteEEVNT6(Kvnt[6].dvnt,Kvnt
      +                          [6].dpwm);
   506  00A708  C2EA  F0A9         	movff	_Kvnt+13,?_WriteEEVNT6
   507  00A70C  C2E9  FFE8         	movff	_Kvnt+12,wreg
   508  00A710  ECEB  F045         	call	_WriteEEVNT6
   509                           ;vntregtch.c: 145: WriteEEVNT7(Kvnt[7].dvnt,Kvnt
      +                          [7].dpwm);
   510  00A714  C2EC  F0A9         	movff	_Kvnt+15,?_WriteEEVNT7
   511  00A718  C2EB  FFE8         	movff	_Kvnt+14,wreg
   512  00A71C  ECFF  F045         	call	_WriteEEVNT7
   513                           ;vntregtch.c: 146: ModParam();
   514  00A720  ECDF  F066         	call	_ModParam	;wreg free
   515                           ;vntregtch.c: 149: PFN._zima=0;
   516  00A724  0100               	movlb	_PFN shr (0+8)
   517  00A726  996B               	bcf	_PFN& (0+255),4,b
   518                           ;vntregtch.c: 150: PFN._lato=0;
   519  00A728  976B               	bcf	_PFN& (0+255),3,b
   520                           ;vntregtch.c: 151: PFN._off=1;
   521  00A72A  856B               	bsf	_PFN& (0+255),2,b
   522                           ;vntregtch.c: 152: PFN._csn=0;
   523  00A72C  936B               	bcf	_PFN& (0+255),1,b
   524                           ;vntregtch.c: 153: PFN.poz=1;
   525  00A72E  0100               	movlb	(_PFN+1) shr (0+8)
   526  00A730  0E01               	movlw	1
   527  00A732  6F6C               	movwf	(_PFN+1)& (0+255),b
   528  00A734  6B6D               	clrf	(_PFN+2)& (0+255),b
   529                           ;vntregtch.c: 154: BitSet2(&RSDT1.outSTAT2,4,0);
   530  00A736  0100               	movlb	__Lparam shr (0+8)
   531  00A738  0E3E               	movlw	low (_RSDT1+24)
   532  00A73A  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   533  00A73C  0E03               	movlw	high (_RSDT1+24)
   534  00A73E  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   535  00A740  0E04               	movlw	4
   536  00A742  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   537  00A744  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   538  00A746  EC57  F06A         	call	_BitSet2	;wreg free
   539                           ;vntregtch.c: 155: BitSet2(&RSDT1.outSTAT2,5,0);
   540  00A74A  0100               	movlb	__Lparam shr (0+8)
   541  00A74C  0E3E               	movlw	low (_RSDT1+24)
   542  00A74E  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   543  00A750  0E03               	movlw	high (_RSDT1+24)
   544  00A752  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   545  00A754  0E05               	movlw	5
   546  00A756  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   547  00A758  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   548  00A75A  EC57  F06A         	call	_BitSet2	;wreg free
   549                           ;vntregtch.c: 156: BitSet2(&RSDT1.outSTAT2,6,1);
   550  00A75E  0100               	movlb	__Lparam shr (0+8)
   551  00A760  0E3E               	movlw	low (_RSDT1+24)
   552  00A762  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   553  00A764  0E03               	movlw	high (_RSDT1+24)
   554  00A766  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   555  00A768  0E06               	movlw	6
   556  00A76A  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   557  00A76C  0E01               	movlw	1
   558  00A76E  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   559  00A770  EC57  F06A         	call	_BitSet2	;wreg free
   560                           ;vntregtch.c: 157: WriteEEPFN();
   561  00A774  EC58  F045         	call	_WriteEEPFN	;wreg free
   562                           ;vntregtch.c: 159: k=0;
   563  00A778  010F               	movlb	F1688 shr (0+8)
   564  00A77A  6B41               	clrf	F1688& (0+255),b
   565                           ;vntregtch.c: 160: RD3=0;
   566  00A77C  9683               	bcf	3971,3,c	;volatile
   567                           ;vntregtch.c: 161: StartRTS(4);
   568  00A77E  0E04               	movlw	4
   569  00A780  ECD5  F063         	call	_StartRTS
   570                           ;vntregtch.c: 162: return 2;
   571  00A784  0C02               	retlw	2
   572                           ;vntregtch.c: 163: }
   573  00A786                     l25:
   574                           ;vntregtch.c: 166: {
   575                           ;vntregtch.c: 168: {
   576  00A786  0E00               	movlw	0
   577  00A788  ECDF  F067         	call	_WritePWM
   578                           ;vntregtch.c: 170: RD3=0;
   579  00A78C  9683               	bcf	3971,3,c	;volatile
   580                           ;vntregtch.c: 171: BitSet2(&RSDT1.outSTAT2,7,1);
   581  00A78E  0100               	movlb	__Lparam shr (0+8)
   582  00A790  0E3E               	movlw	low (_RSDT1+24)
   583  00A792  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   584  00A794  0E03               	movlw	high (_RSDT1+24)
   585  00A796  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   586  00A798  0E07               	movlw	7
   587  00A79A  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   588  00A79C  0E01               	movlw	1
   589  00A79E  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   590  00A7A0  EC57  F06A         	call	_BitSet2	;wreg free
   591                           ;vntregtch.c: 172: if(M._PW_START&&!RB6)
   592  00A7A4  0103               	movlb	(_M+4) shr (0+8)
   593  00A7A6  B10A               	btfsc	(_M+4)& (0+255),0,b
   594  00A7A8  BC81               	btfsc	3969,6,c	;volatile
   595  00A7AA  D005               	goto	l26
   596                           ;vntregtch.c: 173: {
   597  00A7AC  0E0A               	movlw	10
   598  00A7AE  ECB7  F063         	call	_StartRTdS
   599                           ;vntregtch.c: 175: k=1;
   600  00A7B2  0E01               	movlw	1
   601  00A7B4  D01C               	goto	L1
   602                           ;vntregtch.c: 176: }
   603  00A7B6                     l26:
   604                           ;vntregtch.c: 177: else
   605  00A7B6  6AD9               	clrf	fsr2l,c
   606  00A7B8  D013               	goto	l31
   607  00A7BA                     l28:
   608  00A7BA  50D9               	movf	fsr2l,w,c
   609  00A7BC  0D02               	mullw	2
   610  00A7BE  0EDD               	movlw	low _Kvnt
   611  00A7C0  24F3               	addwf	prodl,w,c
   612  00A7C2  6EE9               	movwf	fsr0l,c
   613  00A7C4  0E02               	movlw	high _Kvnt
   614  00A7C6  20F4               	addwfc	prodh,w,c
   615  00A7C8  6EEA               	movwf	fsr0h,c
   616  00A7CA  6AEF               	clrf	indf0,c
   617  00A7CC  50D9               	movf	fsr2l,w,c
   618  00A7CE  0D02               	mullw	2
   619  00A7D0  0EDE               	movlw	low (_Kvnt+1)
   620  00A7D2  24F3               	addwf	prodl,w,c
   621  00A7D4  6EE9               	movwf	fsr0l,c
   622  00A7D6  0E02               	movlw	high (_Kvnt+1)
   623  00A7D8  20F4               	addwfc	prodh,w,c
   624  00A7DA  6EEA               	movwf	fsr0h,c
   625  00A7DC  6AEF               	clrf	indf0,c
   626  00A7DE  2AD9               	incf	fsr2l,f,c
   627  00A7E0                     l31:
   628  00A7E0  0E07               	movlw	7
   629  00A7E2  64D9               	cpfsgt	fsr2l,c
   630  00A7E4  D7EA               	goto	l28
   631                           ;vntregtch.c: 180: StartRTdS(10);
   632  00A7E6  0E0A               	movlw	10
   633  00A7E8  ECB7  F063         	call	_StartRTdS
   634                           ;vntregtch.c: 181: k=2;
   635  00A7EC  0E02               	movlw	2
   636  00A7EE                     L1:
   637  00A7EE  CFE8 FF41          	movff	wreg,F1688
   638                           ;vntregtch.c: 182: }
   639  00A7F2  0C00               	retlw	0
   640  00A7F4                     l32:
   641                           ;vntregtch.c: 184: }
   642                           ;vntregtch.c: 186: {
   643  00A7F4  0E00               	movlw	0
   644  00A7F6  ECDF  F067         	call	_WritePWM
   645                           ;vntregtch.c: 188: RD3=0;
   646  00A7FA  9683               	bcf	3971,3,c	;volatile
   647                           ;vntregtch.c: 189: if(!RB6&&M._PW_START&&GetBit2
      +                          (RSDT1.inSTAT1,3)&&GetBit2(RSDT1.inSTAT1,4))
   648  00A7FC  BC81               	btfsc	3969,6,c	;volatile
   649  00A7FE  D04B               	goto	l33
   650  00A800  0103               	movlb	(_M+4) shr (0+8)
   651  00A802  A10A               	btfss	(_M+4)& (0+255),0,b
   652  00A804  D048               	goto	l33
   653  00A806  0E03               	movlw	3
   654  00A808  0100               	movlb	__Lparam shr (0+8)
   655  00A80A  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   656  00A80C  C366  FFE8         	movff	_RSDT1+64,wreg
   657  00A810  EC24  F06A         	call	_GetBit2
   658  00A814  E340               	bnc	l33
   659  00A816  0E04               	movlw	4
   660  00A818  0100               	movlb	__Lparam shr (0+8)
   661  00A81A  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   662  00A81C  C366  FFE8         	movff	_RSDT1+64,wreg
   663  00A820  EC24  F06A         	call	_GetBit2
   664  00A824  E338               	bnc	l33
   665                           ;vntregtch.c: 190: {
   666  00A826  0100               	movlb	__Lparam shr (0+8)
   667  00A828  0E3E               	movlw	low (_RSDT1+24)
   668  00A82A  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   669  00A82C  0E03               	movlw	high (_RSDT1+24)
   670  00A82E  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   671  00A830  0E07               	movlw	7
   672  00A832  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   673  00A834  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   674  00A836  EC57  F06A         	call	_BitSet2	;wreg free
   675                           ;vntregtch.c: 194: OdczytDanychKalibracji();
   676  00A83A  D951               	call	_OdczytDanychKalibracji	;wreg free
   677                           ;vntregtch.c: 197: PFN._zima=0;
   678  00A83C  0100               	movlb	_PFN shr (0+8)
   679  00A83E  996B               	bcf	_PFN& (0+255),4,b
   680                           ;vntregtch.c: 198: PFN._lato=0;
   681  00A840  976B               	bcf	_PFN& (0+255),3,b
   682                           ;vntregtch.c: 199: PFN._off=1;
   683  00A842  856B               	bsf	_PFN& (0+255),2,b
   684                           ;vntregtch.c: 200: PFN._csn=0;
   685  00A844  936B               	bcf	_PFN& (0+255),1,b
   686                           ;vntregtch.c: 201: PFN.poz=1;
   687  00A846  0100               	movlb	(_PFN+1) shr (0+8)
   688  00A848  0E01               	movlw	1
   689  00A84A  6F6C               	movwf	(_PFN+1)& (0+255),b
   690  00A84C  6B6D               	clrf	(_PFN+2)& (0+255),b
   691                           ;vntregtch.c: 202: BitSet2(&RSDT1.outSTAT2,4,0);
   692  00A84E  0100               	movlb	__Lparam shr (0+8)
   693  00A850  0E3E               	movlw	low (_RSDT1+24)
   694  00A852  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   695  00A854  0E03               	movlw	high (_RSDT1+24)
   696  00A856  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   697  00A858  0E04               	movlw	4
   698  00A85A  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   699  00A85C  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   700  00A85E  EC57  F06A         	call	_BitSet2	;wreg free
   701                           ;vntregtch.c: 203: BitSet2(&RSDT1.outSTAT2,5,0);
   702  00A862  0100               	movlb	__Lparam shr (0+8)
   703  00A864  0E3E               	movlw	low (_RSDT1+24)
   704  00A866  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   705  00A868  0E03               	movlw	high (_RSDT1+24)
   706  00A86A  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   707  00A86C  0E05               	movlw	5
   708  00A86E  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   709  00A870  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   710  00A872  EC57  F06A         	call	_BitSet2	;wreg free
   711                           ;vntregtch.c: 204: BitSet2(&RSDT1.outSTAT2,6,1);
   712  00A876  0100               	movlb	__Lparam shr (0+8)
   713  00A878  0E3E               	movlw	low (_RSDT1+24)
   714  00A87A  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   715  00A87C  0E03               	movlw	high (_RSDT1+24)
   716  00A87E  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   717  00A880  0E06               	movlw	6
   718  00A882  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   719  00A884  0E01               	movlw	1
   720  00A886  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   721  00A888  EC57  F06A         	call	_BitSet2	;wreg free
   722                           ;vntregtch.c: 205: WriteEEPFN();
   723  00A88C  EC58  F045         	call	_WriteEEPFN	;wreg free
   724                           ;vntregtch.c: 206: k=0;
   725  00A890  010F               	movlb	F1688 shr (0+8)
   726  00A892  6B41               	clrf	F1688& (0+255),b
   727                           ;vntregtch.c: 207: return 1;
   728  00A894  0C01               	retlw	1
   729  00A896                     l33:
   730                           ;vntregtch.c: 208: }
   731  00A896  BC81               	btfsc	3969,6,c	;volatile
   732  00A898  D008               	goto	l34
   733  00A89A  0E0A               	movlw	10
   734  00A89C  ECC9  F063         	call	_RTdS
   735  00A8A0  6E00               	movwf	btemp,c
   736  00A8A2  0E1F               	movlw	31
   737  00A8A4  5C00               	subwf	btemp,w,c
   738  00A8A6  E201               	bc	l34
   739  00A8A8  0C00               	retlw	0
   740  00A8AA                     l34:
   741                           ;vntregtch.c: 210: for(i=0;i<nkpkt;i++) {Kvnt[i]
      +                          .dvnt=0;Kvnt[i].dpwm=0;}
   742  00A8AA  6AD9               	clrf	fsr2l,c
   743  00A8AC  D013               	goto	l38
   744  00A8AE                     l35:
   745  00A8AE  50D9               	movf	fsr2l,w,c
   746  00A8B0  0D02               	mullw	2
   747  00A8B2  0EDD               	movlw	low _Kvnt
   748  00A8B4  24F3               	addwf	prodl,w,c
   749  00A8B6  6EE9               	movwf	fsr0l,c
   750  00A8B8  0E02               	movlw	high _Kvnt
   751  00A8BA  20F4               	addwfc	prodh,w,c
   752  00A8BC  6EEA               	movwf	fsr0h,c
   753  00A8BE  6AEF               	clrf	indf0,c
   754  00A8C0  50D9               	movf	fsr2l,w,c
   755  00A8C2  0D02               	mullw	2
   756  00A8C4  0EDE               	movlw	low (_Kvnt+1)
   757  00A8C6  24F3               	addwf	prodl,w,c
   758  00A8C8  6EE9               	movwf	fsr0l,c
   759  00A8CA  0E02               	movlw	high (_Kvnt+1)
   760  00A8CC  20F4               	addwfc	prodh,w,c
   761  00A8CE  6EEA               	movwf	fsr0h,c
   762  00A8D0  6AEF               	clrf	indf0,c
   763  00A8D2  2AD9               	incf	fsr2l,f,c
   764  00A8D4                     l38:
   765  00A8D4  0E07               	movlw	7
   766  00A8D6  64D9               	cpfsgt	fsr2l,c
   767  00A8D8  D7EA               	goto	l35
   768                           ;vntregtch.c: 211: StartRTdS(10);
   769  00A8DA  0E0A               	movlw	10
   770  00A8DC  ECB7  F063         	call	_StartRTdS
   771                           ;vntregtch.c: 212: k=2;
   772  00A8E0  0E02               	movlw	2
   773  00A8E2  CFE8 FF41          	movff	wreg,F1688
   774                           ;vntregtch.c: 213: return 0;
   775  00A8E6  0C00               	retlw	0
   776  00A8E8                     l39:
   777                           ;vntregtch.c: 214: }
   778                           ;vntregtch.c: 216: {
   779  00A8E8  0E00               	movlw	0
   780  00A8EA  ECDF  F067         	call	_WritePWM
   781                           ;vntregtch.c: 218: RD3=0;
   782  00A8EE  9683               	bcf	3971,3,c	;volatile
   783                           ;vntregtch.c: 219: if(RTdS(10)>10&&M.rVVNT<500)
   784  00A8F0  0E0A               	movlw	10
   785  00A8F2  ECC9  F063         	call	_RTdS
   786  00A8F6  6E00               	movwf	btemp,c
   787  00A8F8  0E0B               	movlw	11
   788  00A8FA  5C00               	subwf	btemp,w,c
   789  00A8FC  E310               	bnc	l40
   790  00A8FE  0103               	movlb	(_M+29) shr (0+8)
   791  00A900  0E01               	movlw	1
   792  00A902  5D24               	subwf	(_M+30)& (0+255),w,b
   793  00A904  0EF4               	movlw	244
   794  00A906  B4D8               	btfsc	status,2,c
   795  00A908  5D23               	subwf	(_M+29)& (0+255),w,b
   796                           ;vntregtch.c: 220: {
   797  00A90A  0E0A               	movlw	10
   798  00A90C  E209               	bc	L3
   799  00A90E  ECB7  F063         	call	_StartRTdS
   800                           ;vntregtch.c: 223: krok=0;
   801  00A912  010F               	movlb	F1689 shr (0+8)
   802  00A914  6B42               	clrf	F1689& (0+255),b
   803                           ;vntregtch.c: 224: k=3;
   804  00A916  0E03               	movlw	3
   805  00A918  CFE8 FF41          	movff	wreg,F1688
   806                           ;vntregtch.c: 225: return 0;
   807  00A91C  0C00               	retlw	0
   808  00A91E                     l40:
   809                           ;vntregtch.c: 226: }
   810  00A91E  0E0A               	movlw	10
   811  00A920                     L3:
   812  00A920  ECC9  F063         	call	_RTdS
   813  00A924  6E00               	movwf	btemp,c
   814  00A926  0E5B               	movlw	91
   815  00A928  5C00               	subwf	btemp,w,c
   816  00A92A  E201               	bc	l41
   817  00A92C  0C00               	retlw	0
   818  00A92E                     l41:
   819                           ;vntregtch.c: 228: StartRTdS(10);
   820  00A92E  0E0A               	movlw	10
   821  00A930  ECB7  F063         	call	_StartRTdS
   822                           ;vntregtch.c: 230: krok=0;
   823  00A934  010F               	movlb	F1689 shr (0+8)
   824  00A936  6B42               	clrf	F1689& (0+255),b
   825                           ;vntregtch.c: 231: k=3;
   826  00A938  0E03               	movlw	3
   827  00A93A  CFE8 FF41          	movff	wreg,F1688
   828                           ;vntregtch.c: 232: return 0;
   829  00A93E  0C00               	retlw	0
   830  00A940                     l42:
   831                           ;vntregtch.c: 233: }
   832                           ;vntregtch.c: 235: {
   833  00A940  8683               	bsf	3971,3,c	;volatile
   834                           ;vntregtch.c: 237: PMP.APROC=krok*99/(nkpkt-1);
   835  00A942  0E07               	movlw	7
   836  00A944  6E02               	movwf	btemp+2,c
   837  00A946  6A03               	clrf	btemp+3,c
   838  00A948  CF42  FFE8         	movff	F1689,wreg
   839  00A94C  0D63               	mullw	99
   840  00A94E  CFF3 F000          	movff	prodl,btemp
   841  00A952  CFF4 F001          	movff	prodh,btemp+1
   842  00A956  EC5C  F06D         	call	awdiv
   843  00A95A  C004  F2F3         	movff	btemp+4,_PMP+2
   844                           ;vntregtch.c: 238: WritePWM2(ProcToPmpPwm(99-PMP
      +                          .APROC));
   845  00A95E  C2F3  FFE8         	movff	_PMP+2,wreg
   846  00A962  0863               	sublw	99
   847  00A964  EC8D  F058         	call	_ProcToPmpPwm
   848  00A968  ECEC  F067         	call	_WritePWM2
   849                           ;vntregtch.c: 239: if(SetKalPWM(krok,31+krok*((P
      +                          WM.HIPWM-31)/(nkpkt-1))))
   850  00A96C  0E07               	movlw	7
   851  00A96E  6E02               	movwf	btemp+2,c
   852  00A970  6A03               	clrf	btemp+3,c
   853  00A972  C1DC  F000         	movff	_PWM+6,btemp
   854  00A976  6A01               	clrf	btemp+1,c
   855  00A978  0EE1               	movlw	225
   856  00A97A  2600               	addwf	btemp,f,c
   857  00A97C  0EFF               	movlw	255
   858  00A97E  2201               	addwfc	btemp+1,f,c
   859  00A980  EC5C  F06D         	call	awdiv
   860  00A984  5004               	movf	btemp+4,w,c
   861  00A986  CF42  F000         	movff	F1689,btemp
   862  00A98A  0200               	mulwf	btemp,c
   863  00A98C  50F3               	movf	prodl,w,c
   864  00A98E  0F1F               	addlw	31
   865  00A990  0100               	movlb	__Lparam shr (0+8)
   866  00A992  6FA9               	movwf	?_SetKalPWM^(__Lparam& (0+65280)),b
   867  00A994  CF42  FFE8         	movff	F1689,wreg
   868  00A998  DDBA               	call	_SetKalPWM
   869  00A99A  0A00               	xorlw	0
   870  00A99C  E008               	bz	l43
   871                           ;vntregtch.c: 240: {
   872  00A99E  010F               	movlb	F1689 shr (0+8)
   873  00A9A0  2B42               	incf	F1689& (0+255),f,b
   874                           ;vntregtch.c: 242: if (krok>=nkpkt) k=4;
   875  00A9A2  0E07               	movlw	7
   876  00A9A4  6542               	cpfsgt	F1689& (0+255),b
   877  00A9A6  0C00               	retlw	0
   878  00A9A8  0E04               	movlw	4
   879  00A9AA  CFE8 FF41          	movff	wreg,F1688
   880  00A9AE                     l43:
   881                           ;vntregtch.c: 243: }
   882  00A9AE  0C00               	retlw	0
   883  00A9B0                     l45:
   884                           ;vntregtch.c: 245: }
   885                           ;vntregtch.c: 247: {
   886  00A9B0  6AD9               	clrf	fsr2l,c
   887  00A9B2  D01E               	goto	l49
   888  00A9B4                     l46:
   889                           ;vntregtch.c: 250: {
   890  00A9B4  50D9               	movf	fsr2l,w,c
   891  00A9B6  0D02               	mullw	2
   892  00A9B8  0EDD               	movlw	low _Kvnt
   893  00A9BA  24F3               	addwf	prodl,w,c
   894  00A9BC  6EE9               	movwf	fsr0l,c
   895  00A9BE  0E02               	movlw	high _Kvnt
   896  00A9C0  20F4               	addwfc	prodh,w,c
   897  00A9C2  6EEA               	movwf	fsr0h,c
   898  00A9C4  50EF               	movf	indf0,w,c
   899  00A9C6  0100               	movlb	__Lparam shr (0+8)
   900  00A9C8  27A7               	addwf	?a_KalibracjaVNT^(__Lparam& (0+65280)),f,
      +                          b
   901  00A9CA  0E00               	movlw	0
   902  00A9CC  23A8               	addwfc	(?a_KalibracjaVNT+1)^(__Lparam& (0+65280
      +                          )),f,b
   903                           ;vntregtch.c: 252: if(i>1&&!Kvnt[i].dvnt)
   904  00A9CE  0E01               	movlw	1
   905  00A9D0  64D9               	cpfsgt	fsr2l,c
   906  00A9D2  D00D               	goto	l50
   907  00A9D4  50D9               	movf	fsr2l,w,c
   908  00A9D6  0D02               	mullw	2
   909  00A9D8  0EDD               	movlw	low _Kvnt
   910  00A9DA  24F3               	addwf	prodl,w,c
   911  00A9DC  6EE9               	movwf	fsr0l,c
   912  00A9DE  0E02               	movlw	high _Kvnt
   913  00A9E0  20F4               	addwfc	prodh,w,c
   914  00A9E2  6EEA               	movwf	fsr0h,c
   915  00A9E4  50EF               	movf	indf0,w,c
   916  00A9E6  E103               	bnz	l50
   917                           ;vntregtch.c: 253: {
   918  00A9E8  6BA7               	clrf	?a_KalibracjaVNT^(__Lparam& (0+65280)),b
   919  00A9EA  6BA8               	clrf	(?a_KalibracjaVNT+1)^(__Lparam& (0+65280))
      +                          ,b
   920                           ;vntregtch.c: 255: break;
   921  00A9EC  D004               	goto	l47
   922  00A9EE                     l50:
   923  00A9EE  2AD9               	incf	fsr2l,f,c
   924  00A9F0                     l49:
   925  00A9F0  0E07               	movlw	7
   926  00A9F2  64D9               	cpfsgt	fsr2l,c
   927  00A9F4  D7DF               	goto	l46
   928  00A9F6                     l47:
   929                           ;vntregtch.c: 256: }
   930  00A9F6  0100               	movlb	__Lparam shr (0+8)
   931  00A9F8  51A8               	movf	(?a_KalibracjaVNT+1)^(__Lparam& (0+65280))
      +                          ,w
   932  00A9FA  11A7               	iorwf	?a_KalibracjaVNT^(__Lparam& (0+65280)),w
   933  00A9FC  E03C               	bz	l51
   934                           ;vntregtch.c: 259: {
   935  00A9FE  0E3E               	movlw	low (_RSDT1+24)
   936  00AA00  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   937  00AA02  0E03               	movlw	high (_RSDT1+24)
   938  00AA04  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   939  00AA06  0E07               	movlw	7
   940  00AA08  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   941  00AA0A  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   942  00AA0C  EC57  F06A         	call	_BitSet2	;wreg free
   943                           ;vntregtch.c: 262: WriteEEVNT0(Kvnt[0].dvnt,Kvnt
      +                          [0].dpwm);
   944  00AA10  C2DE  F0A9         	movff	_Kvnt+1,?_WriteEEVNT0
   945  00AA14  C2DD  FFE8         	movff	_Kvnt,wreg
   946  00AA18  EC73  F045         	call	_WriteEEVNT0
   947                           ;vntregtch.c: 263: WriteEEVNT1(Kvnt[1].dvnt,Kvnt
      +                          [1].dpwm);
   948  00AA1C  C2E0  F0A9         	movff	_Kvnt+3,?_WriteEEVNT1
   949  00AA20  C2DF  FFE8         	movff	_Kvnt+2,wreg
   950  00AA24  EC87  F045         	call	_WriteEEVNT1
   951                           ;vntregtch.c: 264: WriteEEVNT2(Kvnt[2].dvnt,Kvnt
      +                          [2].dpwm);
   952  00AA28  C2E2  F0A9         	movff	_Kvnt+5,?_WriteEEVNT2
   953  00AA2C  C2E1  FFE8         	movff	_Kvnt+4,wreg
   954  00AA30  EC9B  F045         	call	_WriteEEVNT2
   955                           ;vntregtch.c: 265: WriteEEVNT3(Kvnt[3].dvnt,Kvnt
      +                          [3].dpwm);
   956  00AA34  C2E4  F0A9         	movff	_Kvnt+7,?_WriteEEVNT3
   957  00AA38  C2E3  FFE8         	movff	_Kvnt+6,wreg
   958  00AA3C  ECAF  F045         	call	_WriteEEVNT3
   959                           ;vntregtch.c: 266: WriteEEVNT4(Kvnt[4].dvnt,Kvnt
      +                          [4].dpwm);
   960  00AA40  C2E6  F0A9         	movff	_Kvnt+9,?_WriteEEVNT4
   961  00AA44  C2E5  FFE8         	movff	_Kvnt+8,wreg
   962  00AA48  ECC3  F045         	call	_WriteEEVNT4
   963                           ;vntregtch.c: 267: WriteEEVNT5(Kvnt[5].dvnt,Kvnt
      +                          [5].dpwm);
   964  00AA4C  C2E8  F0A9         	movff	_Kvnt+11,?_WriteEEVNT5
   965  00AA50  C2E7  FFE8         	movff	_Kvnt+10,wreg
   966  00AA54  ECD7  F045         	call	_WriteEEVNT5
   967                           ;vntregtch.c: 268: WriteEEVNT6(Kvnt[6].dvnt,Kvnt
      +                          [6].dpwm);
   968  00AA58  C2EA  F0A9         	movff	_Kvnt+13,?_WriteEEVNT6
   969  00AA5C  C2E9  FFE8         	movff	_Kvnt+12,wreg
   970  00AA60  ECEB  F045         	call	_WriteEEVNT6
   971                           ;vntregtch.c: 269: WriteEEVNT7(Kvnt[7].dvnt,Kvnt
      +                          [7].dpwm);
   972  00AA64  C2EC  F0A9         	movff	_Kvnt+15,?_WriteEEVNT7
   973  00AA68  C2EB  FFE8         	movff	_Kvnt+14,wreg
   974  00AA6C  ECFF  F045         	call	_WriteEEVNT7
   975                           ;vntregtch.c: 270: ModParam();
   976  00AA70  ECDF  F066         	call	_ModParam	;wreg free
   977                           ;vntregtch.c: 271: }
   978  00AA74  D017               	goto	l52
   979  00AA76                     l51:
   980                           ;vntregtch.c: 272: else
   981  00AA76  0100               	movlb	__Lparam shr (0+8)
   982  00AA78  0E3E               	movlw	low (_RSDT1+24)
   983  00AA7A  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   984  00AA7C  0E03               	movlw	high (_RSDT1+24)
   985  00AA7E  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   986  00AA80  0E07               	movlw	7
   987  00AA82  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   988  00AA84  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   989  00AA86  EC57  F06A         	call	_BitSet2	;wreg free
   990                           ;vntregtch.c: 275: M.ERR_BTY=0x07;
   991  00AA8A  0E07               	movlw	7
   992  00AA8C  CFE8 F311          	movff	wreg,_M+11
   993                           ;vntregtch.c: 276: PrintErr(0x07,1);
   994  00AA90  0E01               	movlw	1
   995  00AA92  0100               	movlb	__Lparam shr (0+8)
   996  00AA94  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
   997  00AA96  0E07               	movlw	7
   998  00AA98  ECA1  F069         	call	_PrintErr
   999                           ;vntregtch.c: 277: k=0;
  1000  00AA9C  010F               	movlb	F1688 shr (0+8)
  1001  00AA9E  6B41               	clrf	F1688& (0+255),b
  1002                           ;vntregtch.c: 278: ErrPTG();
  1003  00AAA0  EC73  F01A         	call	_ErrPTG	;wreg free
  1004  00AAA4                     l52:
  1005                           ;vntregtch.c: 279: }
  1006  00AAA4  0E05               	movlw	5
  1007  00AAA6  CFE8 FF41          	movff	wreg,F1688
  1008                           ;vntregtch.c: 281: return 0;
  1009  00AAAA  0C00               	retlw	0
  1010  00AAAC                     l53:
  1011                           ;vntregtch.c: 282: }
  1012                           ;vntregtch.c: 284: {
  1013  00AAAC  0103               	movlb	(_M+1) shr (0+8)
  1014  00AAAE  8D07               	bsf	(_M+1)& (0+255),6,b
  1015                           ;vntregtch.c: 286: k=0;
  1016  00AAB0  010F               	movlb	F1688 shr (0+8)
  1017  00AAB2  6B41               	clrf	F1688& (0+255),b
  1018                           ;vntregtch.c: 287: return 1;
  1019  00AAB4  0C01               	retlw	1
  1020  00AAB6                     l24:
  1021  00AAB6  CF41  FFE8         	movff	F1688,wreg
  1022  00AABA  0A00               	xorlw	0
  1023  00AABC  E101 D663          	bz	l25
  1024  00AAC0  0A01               	xorlw	1
  1025  00AAC2  E101 D697          	bz	l32
  1026  00AAC6  0A03               	xorlw	3
  1027  00AAC8  E101 D70E          	bz	l39
  1028  00AACC  0A01               	xorlw	1
  1029  00AACE  E101 D737          	bz	l42
  1030  00AAD2  0A07               	xorlw	7
  1031  00AAD4  E101 D76C          	bz	l45
  1032  00AAD8  0A01               	xorlw	1
  1033  00AADA  E0E8               	bz	l53
  1034                           ;vntregtch.c: 290: return 1;
  1035  00AADC  0C01               	retlw	1
  1036                           ;vntregtch.c: 291: }
  1037  00AADE                     __end_of_KalibracjaVNT:
  1038                           ;vntregtch.c: 295: void OdczytDanychKalibracji()
  1039                           ;vntregtch.c: 296: {
  1040  00AADE                     _OdczytDanychKalibracji:
  1041  000000                     
  1042                           ;vntregtch.c: 298: Kvnt[0].dvnt=ReadEEVNT0_V();
  1043  00AADE  EC82  F045         	call	_ReadEEVNT0_V	;wreg free
  1044  00AAE2  CFE8 F2DD          	movff	wreg,_Kvnt
  1045                           ;vntregtch.c: 299: Kvnt[0].dpwm=ReadEEVNT0_P();
  1046  00AAE6  EC84  F045         	call	_ReadEEVNT0_P	;wreg free
  1047  00AAEA  CFE8 F2DE          	movff	wreg,_Kvnt+1
  1048                           ;vntregtch.c: 300: Kvnt[1].dvnt=ReadEEVNT1_V();
  1049  00AAEE  EC96  F045         	call	_ReadEEVNT1_V	;wreg free
  1050  00AAF2  CFE8 F2DF          	movff	wreg,_Kvnt+2
  1051                           ;vntregtch.c: 301: Kvnt[1].dpwm=ReadEEVNT1_P();
  1052  00AAF6  EC98  F045         	call	_ReadEEVNT1_P	;wreg free
  1053  00AAFA  CFE8 F2E0          	movff	wreg,_Kvnt+3
  1054                           ;vntregtch.c: 302: Kvnt[2].dvnt=ReadEEVNT2_V();
  1055  00AAFE  ECAA  F045         	call	_ReadEEVNT2_V	;wreg free
  1056  00AB02  CFE8 F2E1          	movff	wreg,_Kvnt+4
  1057                           ;vntregtch.c: 303: Kvnt[2].dpwm=ReadEEVNT2_P();
  1058  00AB06  ECAC  F045         	call	_ReadEEVNT2_P	;wreg free
  1059  00AB0A  CFE8 F2E2          	movff	wreg,_Kvnt+5
  1060                           ;vntregtch.c: 304: Kvnt[3].dvnt=ReadEEVNT3_V();
  1061  00AB0E  ECBE  F045         	call	_ReadEEVNT3_V	;wreg free
  1062  00AB12  CFE8 F2E3          	movff	wreg,_Kvnt+6
  1063                           ;vntregtch.c: 305: Kvnt[3].dpwm=ReadEEVNT3_P();
  1064  00AB16  ECC0  F045         	call	_ReadEEVNT3_P	;wreg free
  1065  00AB1A  CFE8 F2E4          	movff	wreg,_Kvnt+7
  1066                           ;vntregtch.c: 306: Kvnt[4].dvnt=ReadEEVNT4_V();
  1067  00AB1E  ECD2  F045         	call	_ReadEEVNT4_V	;wreg free
  1068  00AB22  CFE8 F2E5          	movff	wreg,_Kvnt+8
  1069                           ;vntregtch.c: 307: Kvnt[4].dpwm=ReadEEVNT4_P();
  1070  00AB26  ECD4  F045         	call	_ReadEEVNT4_P	;wreg free
  1071  00AB2A  CFE8 F2E6          	movff	wreg,_Kvnt+9
  1072                           ;vntregtch.c: 308: Kvnt[5].dvnt=ReadEEVNT5_V();
  1073  00AB2E  ECE6  F045         	call	_ReadEEVNT5_V	;wreg free
  1074  00AB32  CFE8 F2E7          	movff	wreg,_Kvnt+10
  1075                           ;vntregtch.c: 309: Kvnt[5].dpwm=ReadEEVNT5_P();
  1076  00AB36  ECE8  F045         	call	_ReadEEVNT5_P	;wreg free
  1077  00AB3A  CFE8 F2E8          	movff	wreg,_Kvnt+11
  1078                           ;vntregtch.c: 310: Kvnt[6].dvnt=ReadEEVNT6_V();
  1079  00AB3E  ECFA  F045         	call	_ReadEEVNT6_V	;wreg free
  1080  00AB42  CFE8 F2E9          	movff	wreg,_Kvnt+12
  1081                           ;vntregtch.c: 311: Kvnt[6].dpwm=ReadEEVNT6_P();
  1082  00AB46  ECFC  F045         	call	_ReadEEVNT6_P	;wreg free
  1083  00AB4A  CFE8 F2EA          	movff	wreg,_Kvnt+13
  1084                           ;vntregtch.c: 312: Kvnt[7].dvnt=ReadEEVNT7_V();
  1085  00AB4E  EC10  F046         	call	_ReadEEVNT7_V	;wreg free
  1086  00AB52  CFE8 F2EB          	movff	wreg,_Kvnt+14
  1087                           ;vntregtch.c: 313: Kvnt[7].dpwm=ReadEEVNT7_P();
  1088  00AB56  EC12  F046         	call	_ReadEEVNT7_P	;wreg free
  1089  00AB5A  CFE8 F2EC          	movff	wreg,_Kvnt+15
  1090                           ;vntregtch.c: 314: ModParam();
  1091  00AB5E  EFDF  F066         	goto	_ModParam	;wreg free
  1092                           ;vntregtch.c: 315: }
  1093  00AB62                     __end_of_OdczytDanychKalibracji:
  1094                           ;vntregtch.c: 322: unsigned char DVNTtoPWM(unsig
      +                          ned char dvnt)
  1095                           ;vntregtch.c: 323: {
  1096  00AB62                     _DVNTtoPWM:
  1097  000000                     
  1098                           ;vntregtch.c: 324: unsigned char i,v1,v2,p1,p2,d
      +                          v;
  1099  00AB62  6A00               	clrf	btemp,c
  1100  00AB64  6A01               	clrf	btemp+1,c
  1101  00AB66  6A02               	clrf	btemp+2,c
  1102  00AB68  6A03               	clrf	btemp+3,c
  1103                           ;vntregtch.c: 328: dv=dvnt;
  1104  00AB6A  0100               	movlb	__Lparam shr (0+8)
  1105  00AB6C  6FAD               	movwf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),b
  1106                           ;vntregtch.c: 329: for(i=0;i<nkpkt;i++)
  1107  00AB6E  6AD9               	clrf	fsr2l,c
  1108  00AB70  D0D2               	goto	l59
  1109  00AB72                     l56:
  1110                           ;vntregtch.c: 330: {
  1111  00AB72  50D9               	movf	fsr2l,w,c
  1112  00AB74  0D02               	mullw	2
  1113  00AB76  0EDD               	movlw	low _Kvnt
  1114  00AB78  24F3               	addwf	prodl,w,c
  1115  00AB7A  6EE9               	movwf	fsr0l,c
  1116  00AB7C  0E02               	movlw	high _Kvnt
  1117  00AB7E  20F4               	addwfc	prodh,w,c
  1118  00AB80  6EEA               	movwf	fsr0h,c
  1119  00AB82  50EF               	movf	indf0,w,c
  1120  00AB84  0100               	movlb	__Lparam shr (0+8)
  1121  00AB86  6FAC               	movwf	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),b
  1122                           ;vntregtch.c: 332: p2=Kvnt[i].dpwm;
  1123  00AB88  50D9               	movf	fsr2l,w,c
  1124  00AB8A  0D02               	mullw	2
  1125  00AB8C  0EDE               	movlw	low (_Kvnt+1)
  1126  00AB8E  24F3               	addwf	prodl,w,c
  1127  00AB90  6EE9               	movwf	fsr0l,c
  1128  00AB92  0E02               	movlw	high (_Kvnt+1)
  1129  00AB94  20F4               	addwfc	prodh,w,c
  1130  00AB96  6EEA               	movwf	fsr0h,c
  1131  00AB98  50EF               	movf	indf0,w,c
  1132  00AB9A  6FAA               	movwf	?a_DVNTtoPWM^(__Lparam& (0+65280)),b
  1133                           ;vntregtch.c: 333: if(i!=0)
  1134  00AB9C  50D9               	movf	fsr2l,w,c
  1135  00AB9E  E015               	bz	l60
  1136                           ;vntregtch.c: 334: {
  1137  00ABA0  50D9               	movf	fsr2l,w,c
  1138  00ABA2  0D02               	mullw	2
  1139  00ABA4  0EDB               	movlw	low (_Kvnt+-2)
  1140  00ABA6  24F3               	addwf	prodl,w,c
  1141  00ABA8  6EE9               	movwf	fsr0l,c
  1142  00ABAA  0E02               	movlw	high (_Kvnt+-2)
  1143  00ABAC  20F4               	addwfc	prodh,w,c
  1144  00ABAE  6EEA               	movwf	fsr0h,c
  1145  00ABB0  50EF               	movf	indf0,w,c
  1146  00ABB2  6FAE               	movwf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),b
  1147                           ;vntregtch.c: 336: p1=Kvnt[i-1].dpwm;
  1148  00ABB4  50D9               	movf	fsr2l,w,c
  1149  00ABB6  0D02               	mullw	2
  1150  00ABB8  0EDC               	movlw	low (_Kvnt+-1)
  1151  00ABBA  24F3               	addwf	prodl,w,c
  1152  00ABBC  6EE9               	movwf	fsr0l,c
  1153  00ABBE  0E02               	movlw	high (_Kvnt+-1)
  1154  00ABC0  20F4               	addwfc	prodh,w,c
  1155  00ABC2  6EEA               	movwf	fsr0h,c
  1156  00ABC4  50EF               	movf	indf0,w,c
  1157  00ABC6  6FAB               	movwf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),b
  1158                           ;vntregtch.c: 337: }
  1159  00ABC8  D003               	goto	l61
  1160  00ABCA                     l60:
  1161                           ;vntregtch.c: 338: else
  1162  00ABCA  0100               	movlb	__Lparam shr (0+8)
  1163  00ABCC  6BAE               	clrf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),b
  1164                           ;vntregtch.c: 341: p1=0;
  1165  00ABCE  6BAB               	clrf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),b
  1166  00ABD0                     l61:
  1167                           ;vntregtch.c: 342: }
  1168  00ABD0  0100               	movlb	__Lparam shr (0+8)
  1169  00ABD2  51AC               	movf	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),w
  1170  00ABD4  61AD               	cpfslt	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),b
  1171  00ABD6  D004               	goto	u431
  1172  00ABD8  51AD               	movf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),w
  1173  00ABDA  61AE               	cpfslt	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),b
  1174  00ABDC  D001               	goto	u431
  1175  00ABDE  D004               	goto	u450
  1176  00ABE0                     u431:
  1177  00ABE0  0100               	movlb	__Lparam shr (0+8)
  1178  00ABE2  51AD               	movf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),w
  1179  00ABE4  63AC               	cpfseq	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),b
  1180  00ABE6  D096               	goto	l62
  1181  00ABE8                     u450:
  1182                           ;vntregtch.c: 344: {
  1183  00ABE8  0EE8               	movlw	232
  1184  00ABEA  6E04               	movwf	btemp+4,c
  1185  00ABEC  0E03               	movlw	3
  1186  00ABEE  6E05               	movwf	btemp+5,c
  1187  00ABF0  6A06               	clrf	btemp+6,c
  1188  00ABF2  6A07               	clrf	btemp+7,c
  1189  00ABF4  0100               	movlb	__Lparam shr (0+8)
  1190  00ABF6  51AB               	movf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),w
  1191  00ABF8  5DAA               	subwf	?a_DVNTtoPWM^(__Lparam& (0+65280)),w
  1192  00ABFA  6E00               	movwf	btemp,c
  1193  00ABFC  6A01               	clrf	btemp+1,c
  1194  00ABFE  A0D8               	btfss	status,0,c
  1195  00AC00  0601               	decf	btemp+1,f,c
  1196  00AC02  6A02               	clrf	btemp+2,c
  1197  00AC04  BE01               	btfsc	btemp+1,7,c
  1198  00AC06  0602               	decf	btemp+2,f,c
  1199  00AC08  5002               	movf	btemp+2,w,c
  1200  00AC0A  6E03               	movwf	btemp+3,c
  1201  00AC0C  EC69  F06B         	call	almul
  1202  00AC10  C000  F0AF         	movff	btemp,?a_DVNTtoPWM+5
  1203  00AC14  C001  F0B0         	movff	btemp+1,?a_DVNTtoPWM+6
  1204  00AC18  C002  F0B1         	movff	btemp+2,?a_DVNTtoPWM+7
  1205  00AC1C  C003  F0B2         	movff	btemp+3,?a_DVNTtoPWM+8
  1206                           ;vntregtch.c: 346: wsp/=(v2-v1);
  1207  00AC20  51AE               	movf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),w
  1208  00AC22  5DAC               	subwf	(?a_DVNTtoPWM+2)^(__Lparam& (0+65280)),w
  1209  00AC24  6E04               	movwf	btemp+4,c
  1210  00AC26  6A05               	clrf	btemp+5,c
  1211  00AC28  A0D8               	btfss	status,0,c
  1212  00AC2A  0605               	decf	btemp+5,f,c
  1213  00AC2C  6A06               	clrf	btemp+6,c
  1214  00AC2E  BE05               	btfsc	btemp+5,7,c
  1215  00AC30  0606               	decf	btemp+6,f,c
  1216  00AC32  5006               	movf	btemp+6,w,c
  1217  00AC34  6E07               	movwf	btemp+7,c
  1218  00AC36  0EAF               	movlw	low (?a_DVNTtoPWM+5)
  1219  00AC38  6EE9               	movwf	fsr0l,c
  1220  00AC3A  0E00               	movlw	high (?a_DVNTtoPWM+5)
  1221  00AC3C  6EEA               	movwf	fsr0h,c
  1222  00AC3E  ECF5  F06D         	call	aldiv_f
  1223                           ;vntregtch.c: 347: pw=(signed long int)(dv-v1)*w
      +                          sp;
  1224  00AC42  C0AF  F004         	movff	?a_DVNTtoPWM+5,btemp+4
  1225  00AC46  C0B0  F005         	movff	?a_DVNTtoPWM+6,btemp+5
  1226  00AC4A  C0B1  F006         	movff	?a_DVNTtoPWM+7,btemp+6
  1227  00AC4E  C0B2  F007         	movff	?a_DVNTtoPWM+8,btemp+7
  1228  00AC52  51AE               	movf	(?a_DVNTtoPWM+4)^(__Lparam& (0+65280)),w
  1229  00AC54  5DAD               	subwf	(?a_DVNTtoPWM+3)^(__Lparam& (0+65280)),w
  1230  00AC56  6E00               	movwf	btemp,c
  1231  00AC58  6A01               	clrf	btemp+1,c
  1232  00AC5A  A0D8               	btfss	status,0,c
  1233  00AC5C  0601               	decf	btemp+1,f,c
  1234  00AC5E  6A02               	clrf	btemp+2,c
  1235  00AC60  BE01               	btfsc	btemp+1,7,c
  1236  00AC62  0602               	decf	btemp+2,f,c
  1237  00AC64  5002               	movf	btemp+2,w,c
  1238  00AC66  6E03               	movwf	btemp+3,c
  1239  00AC68  EC69  F06B         	call	almul
  1240  00AC6C  C000  F0B3         	movff	btemp,?a_DVNTtoPWM+9
  1241  00AC70  C001  F0B4         	movff	btemp+1,?a_DVNTtoPWM+10
  1242  00AC74  C002  F0B5         	movff	btemp+2,?a_DVNTtoPWM+11
  1243  00AC78  C003  F0B6         	movff	btemp+3,?a_DVNTtoPWM+12
  1244                           ;vntregtch.c: 348: pw/=1000;
  1245  00AC7C  0EE8               	movlw	232
  1246  00AC7E  6E04               	movwf	btemp+4,c
  1247  00AC80  0E03               	movlw	3
  1248  00AC82  6E05               	movwf	btemp+5,c
  1249  00AC84  6A06               	clrf	btemp+6,c
  1250  00AC86  6A07               	clrf	btemp+7,c
  1251  00AC88  0EB3               	movlw	low (?a_DVNTtoPWM+9)
  1252  00AC8A  6EE9               	movwf	fsr0l,c
  1253  00AC8C  0E00               	movlw	high (?a_DVNTtoPWM+9)
  1254  00AC8E  6EEA               	movwf	fsr0h,c
  1255  00AC90  ECF5  F06D         	call	aldiv_f
  1256                           ;vntregtch.c: 350: pw+=p1;
  1257  00AC94  51AB               	movf	(?a_DVNTtoPWM+1)^(__Lparam& (0+65280)),w
  1258  00AC96  27B3               	addwf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),f,
      +                          b
  1259  00AC98  0E01               	movlw	1
  1260  00AC9A  B0D8               	btfsc	status,0,c
  1261  00AC9C  27B4               	addwf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),f
      +                          ,b
  1262  00AC9E  B0D8               	btfsc	status,0,c
  1263  00ACA0  27B5               	addwf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),f
      +                          ,b
  1264  00ACA2  B0D8               	btfsc	status,0,c
  1265  00ACA4  27B6               	addwf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),f
      +                          ,b
  1266                           ;vntregtch.c: 351: if(pw<0) pw=0;
  1267  00ACA6  AFB6               	btfss	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),7
      +                          ,b
  1268  00ACA8  D004               	goto	l63
  1269  00ACAA  6BB3               	clrf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),b
  1270  00ACAC  6BB4               	clrf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),b
  1271  00ACAE  6BB5               	clrf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),b
  1272  00ACB0  6BB6               	clrf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),b
  1273  00ACB2                     l63:
  1274                           ;vntregtch.c: 352: if(pw>PWM.HIPWM) pw=PWM.HIPWM
      +                          ;
  1275  00ACB2  C1DC  F000         	movff	_PWM+6,btemp
  1276  00ACB6  6A01               	clrf	btemp+1,c
  1277  00ACB8  6A02               	clrf	btemp+2,c
  1278  00ACBA  6A03               	clrf	btemp+3,c
  1279  00ACBC  0100               	movlb	__Lparam shr (0+8)
  1280  00ACBE  5003               	movf	btemp+3,w,c
  1281  00ACC0  0A80               	xorlw	128
  1282  00ACC2  6E04               	movwf	btemp+4,c
  1283  00ACC4  51B6               	movf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),w
  1284  00ACC6  0A80               	xorlw	128
  1285  00ACC8  5C04               	subwf	btemp+4,w,c
  1286  00ACCA  E108               	bnz	u475
  1287  00ACCC  51B5               	movf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),w
  1288  00ACCE  5C02               	subwf	btemp+2,w,c
  1289  00ACD0  E105               	bnz	u475
  1290  00ACD2  51B4               	movf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),w
  1291  00ACD4  5C01               	subwf	btemp+1,w,c
  1292  00ACD6  E102               	bnz	u475
  1293  00ACD8  51B3               	movf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),w
  1294  00ACDA  5C00               	subwf	btemp,w,c
  1295  00ACDC                     u475:
  1296  00ACDC  E205               	bc	l64
  1297  00ACDE  C1DC  F0B3         	movff	_PWM+6,?a_DVNTtoPWM+9
  1298  00ACE2  6BB4               	clrf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),b
  1299  00ACE4  6BB5               	clrf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),b
  1300  00ACE6  6BB6               	clrf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),b
  1301  00ACE8                     l64:
  1302                           ;vntregtch.c: 353: if(pw<31) pw=31;
  1303  00ACE8  0100               	movlb	__Lparam shr (0+8)
  1304  00ACEA  51B6               	movf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),w
  1305  00ACEC  0A80               	xorlw	128
  1306  00ACEE  0F80               	addlw	128
  1307  00ACF0  E108               	bnz	u485
  1308  00ACF2  0E00               	movlw	0
  1309  00ACF4  5DB5               	subwf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),w
  1310  00ACF6  E105               	bnz	u485
  1311  00ACF8  0E00               	movlw	0
  1312  00ACFA  5DB4               	subwf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),w
  1313  00ACFC  E102               	bnz	u485
  1314  00ACFE  0E1F               	movlw	31
  1315  00AD00  5DB3               	subwf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),w
  1316  00AD02                     u485:
  1317  00AD02  E205               	bc	l65
  1318  00AD04  0E1F               	movlw	31
  1319  00AD06  6FB3               	movwf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),b
  1320  00AD08  6BB4               	clrf	(?a_DVNTtoPWM+10)^(__Lparam& (0+65280)),b
  1321  00AD0A  6BB5               	clrf	(?a_DVNTtoPWM+11)^(__Lparam& (0+65280)),b
  1322  00AD0C  6BB6               	clrf	(?a_DVNTtoPWM+12)^(__Lparam& (0+65280)),b
  1323  00AD0E                     l65:
  1324                           ;vntregtch.c: 354: return (unsigned char) pw;
  1325  00AD0E  0100               	movlb	__Lparam shr (0+8)
  1326  00AD10  51B3               	movf	(?a_DVNTtoPWM+9)^(__Lparam& (0+65280)),w
  1327  00AD12  0012               	return	
  1328  00AD14                     l62:
  1329  00AD14  2AD9               	incf	fsr2l,f,c
  1330  00AD16                     l59:
  1331  00AD16  0E07               	movlw	7
  1332  00AD18  64D9               	cpfsgt	fsr2l,c
  1333  00AD1A  D72B               	goto	l56
  1334                           ;vntregtch.c: 355: }
  1335  00AD1C  0100               	movlb	__Lparam shr (0+8)
  1336  00AD1E  51AA               	movf	?a_DVNTtoPWM^(__Lparam& (0+65280)),w
  1337  00AD20  0012               	return	
  1338                           ;vntregtch.c: 358: }
  1339  00AD22                     __end_of_DVNTtoPWM:
  1340                           ;vntregtch.c: 366: unsigned char DVNTtoPopPWM(un
      +                          signed char dvnt,const unsigned char pop)
  1341                           ;vntregtch.c: 367: {
  1342  00AD22  00B4               	dw	?_DVNTtoPopPWM
  1343  00AD24                     _DVNTtoPopPWM:
  1344  000000                     
  1345                           ;vntregtch.c: 368: unsigned char i,v1,v2,p1,p2,d
      +                          v;
  1346  00AD24  6A00               	clrf	btemp,c
  1347  00AD26  6A01               	clrf	btemp+1,c
  1348  00AD28  6A02               	clrf	btemp+2,c
  1349  00AD2A  6A03               	clrf	btemp+3,c
  1350                           ;vntregtch.c: 372: dv=dvnt;
  1351  00AD2C  0100               	movlb	__Lparam shr (0+8)
  1352  00AD2E  6FB8               	movwf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280))
      +                          ,b
  1353                           ;vntregtch.c: 373: for(i=0;i<nkpkt;i++)
  1354  00AD30  6AD9               	clrf	fsr2l,c
  1355  00AD32  D101               	goto	l70
  1356  00AD34                     l67:
  1357                           ;vntregtch.c: 374: {
  1358  00AD34  50D9               	movf	fsr2l,w,c
  1359  00AD36  0D02               	mullw	2
  1360  00AD38  0EDD               	movlw	low _Kvnt
  1361  00AD3A  24F3               	addwf	prodl,w,c
  1362  00AD3C  6EE9               	movwf	fsr0l,c
  1363  00AD3E  0E02               	movlw	high _Kvnt
  1364  00AD40  20F4               	addwfc	prodh,w,c
  1365  00AD42  6EEA               	movwf	fsr0h,c
  1366  00AD44  50EF               	movf	indf0,w,c
  1367  00AD46  0100               	movlb	__Lparam shr (0+8)
  1368  00AD48  6FB7               	movwf	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280))
      +                          ,b
  1369                           ;vntregtch.c: 376: p2=Kvnt[i].dpwm;
  1370  00AD4A  50D9               	movf	fsr2l,w,c
  1371  00AD4C  0D02               	mullw	2
  1372  00AD4E  0EDE               	movlw	low (_Kvnt+1)
  1373  00AD50  24F3               	addwf	prodl,w,c
  1374  00AD52  6EE9               	movwf	fsr0l,c
  1375  00AD54  0E02               	movlw	high (_Kvnt+1)
  1376  00AD56  20F4               	addwfc	prodh,w,c
  1377  00AD58  6EEA               	movwf	fsr0h,c
  1378  00AD5A  50EF               	movf	indf0,w,c
  1379  00AD5C  6FB5               	movwf	?a_DVNTtoPopPWM^(__Lparam& (0+65280)),b
  1380                           ;vntregtch.c: 377: if(i!=0)
  1381  00AD5E  50D9               	movf	fsr2l,w,c
  1382  00AD60  E015               	bz	l71
  1383                           ;vntregtch.c: 378: {
  1384  00AD62  50D9               	movf	fsr2l,w,c
  1385  00AD64  0D02               	mullw	2
  1386  00AD66  0EDB               	movlw	low (_Kvnt+-2)
  1387  00AD68  24F3               	addwf	prodl,w,c
  1388  00AD6A  6EE9               	movwf	fsr0l,c
  1389  00AD6C  0E02               	movlw	high (_Kvnt+-2)
  1390  00AD6E  20F4               	addwfc	prodh,w,c
  1391  00AD70  6EEA               	movwf	fsr0h,c
  1392  00AD72  50EF               	movf	indf0,w,c
  1393  00AD74  6FB9               	movwf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280))
      +                          ,b
  1394                           ;vntregtch.c: 380: p1=Kvnt[i-1].dpwm;
  1395  00AD76  50D9               	movf	fsr2l,w,c
  1396  00AD78  0D02               	mullw	2
  1397  00AD7A  0EDC               	movlw	low (_Kvnt+-1)
  1398  00AD7C  24F3               	addwf	prodl,w,c
  1399  00AD7E  6EE9               	movwf	fsr0l,c
  1400  00AD80  0E02               	movlw	high (_Kvnt+-1)
  1401  00AD82  20F4               	addwfc	prodh,w,c
  1402  00AD84  6EEA               	movwf	fsr0h,c
  1403  00AD86  50EF               	movf	indf0,w,c
  1404  00AD88  6FB6               	movwf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280))
      +                          ,b
  1405                           ;vntregtch.c: 381: }
  1406  00AD8A  D003               	goto	l72
  1407  00AD8C                     l71:
  1408                           ;vntregtch.c: 382: else
  1409  00AD8C  0100               	movlb	__Lparam shr (0+8)
  1410  00AD8E  6BB9               	clrf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)),
      +                          b
  1411                           ;vntregtch.c: 385: p1=0;
  1412  00AD90  6BB6               	clrf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280)),
      +                          b
  1413  00AD92                     l72:
  1414                           ;vntregtch.c: 386: }
  1415  00AD92  0100               	movlb	__Lparam shr (0+8)
  1416  00AD94  51B7               	movf	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280)),
      +                          w
  1417  00AD96  61B8               	cpfslt	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280)
      +                          ),b
  1418  00AD98  D004               	goto	u531
  1419  00AD9A  51B8               	movf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280)),
      +                          w
  1420  00AD9C  61B9               	cpfslt	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)
      +                          ),b
  1421  00AD9E  D001               	goto	u531
  1422  00ADA0  D004               	goto	u550
  1423  00ADA2                     u531:
  1424  00ADA2  0100               	movlb	__Lparam shr (0+8)
  1425  00ADA4  51B8               	movf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280)),
      +                          w
  1426  00ADA6  63B7               	cpfseq	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280)
      +                          ),b
  1427  00ADA8  D0C5               	goto	l73
  1428  00ADAA                     u550:
  1429                           ;vntregtch.c: 388: {
  1430  00ADAA  0EE8               	movlw	232
  1431  00ADAC  6E04               	movwf	btemp+4,c
  1432  00ADAE  0E03               	movlw	3
  1433  00ADB0  6E05               	movwf	btemp+5,c
  1434  00ADB2  6A06               	clrf	btemp+6,c
  1435  00ADB4  6A07               	clrf	btemp+7,c
  1436  00ADB6  0100               	movlb	__Lparam shr (0+8)
  1437  00ADB8  51B6               	movf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280)),
      +                          w
  1438  00ADBA  5DB5               	subwf	?a_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1439  00ADBC  6E00               	movwf	btemp,c
  1440  00ADBE  6A01               	clrf	btemp+1,c
  1441  00ADC0  A0D8               	btfss	status,0,c
  1442  00ADC2  0601               	decf	btemp+1,f,c
  1443  00ADC4  6A02               	clrf	btemp+2,c
  1444  00ADC6  BE01               	btfsc	btemp+1,7,c
  1445  00ADC8  0602               	decf	btemp+2,f,c
  1446  00ADCA  5002               	movf	btemp+2,w,c
  1447  00ADCC  6E03               	movwf	btemp+3,c
  1448  00ADCE  EC69  F06B         	call	almul
  1449  00ADD2  C000  F0BA         	movff	btemp,?a_DVNTtoPopPWM+5
  1450  00ADD6  C001  F0BB         	movff	btemp+1,?a_DVNTtoPopPWM+6
  1451  00ADDA  C002  F0BC         	movff	btemp+2,?a_DVNTtoPopPWM+7
  1452  00ADDE  C003  F0BD         	movff	btemp+3,?a_DVNTtoPopPWM+8
  1453                           ;vntregtch.c: 390: wsp/=(v2-v1);
  1454  00ADE2  51B9               	movf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)),
      +                          w
  1455  00ADE4  5DB7               	subwf	(?a_DVNTtoPopPWM+2)^(__Lparam& (0+65280))
      +                          ,w
  1456  00ADE6  6E04               	movwf	btemp+4,c
  1457  00ADE8  6A05               	clrf	btemp+5,c
  1458  00ADEA  A0D8               	btfss	status,0,c
  1459  00ADEC  0605               	decf	btemp+5,f,c
  1460  00ADEE  6A06               	clrf	btemp+6,c
  1461  00ADF0  BE05               	btfsc	btemp+5,7,c
  1462  00ADF2  0606               	decf	btemp+6,f,c
  1463  00ADF4  5006               	movf	btemp+6,w,c
  1464  00ADF6  6E07               	movwf	btemp+7,c
  1465  00ADF8  0EBA               	movlw	low (?a_DVNTtoPopPWM+5)
  1466  00ADFA  6EE9               	movwf	fsr0l,c
  1467  00ADFC  0E00               	movlw	high (?a_DVNTtoPopPWM+5)
  1468  00ADFE  6EEA               	movwf	fsr0h,c
  1469  00AE00  ECF5  F06D         	call	aldiv_f
  1470                           ;vntregtch.c: 391: pw=(signed long int)(dv-v1)*w
      +                          sp;
  1471  00AE04  C0BA  F004         	movff	?a_DVNTtoPopPWM+5,btemp+4
  1472  00AE08  C0BB  F005         	movff	?a_DVNTtoPopPWM+6,btemp+5
  1473  00AE0C  C0BC  F006         	movff	?a_DVNTtoPopPWM+7,btemp+6
  1474  00AE10  C0BD  F007         	movff	?a_DVNTtoPopPWM+8,btemp+7
  1475  00AE14  51B9               	movf	(?a_DVNTtoPopPWM+4)^(__Lparam& (0+65280)),
      +                          w
  1476  00AE16  5DB8               	subwf	(?a_DVNTtoPopPWM+3)^(__Lparam& (0+65280))
      +                          ,w
  1477  00AE18  6E00               	movwf	btemp,c
  1478  00AE1A  6A01               	clrf	btemp+1,c
  1479  00AE1C  A0D8               	btfss	status,0,c
  1480  00AE1E  0601               	decf	btemp+1,f,c
  1481  00AE20  6A02               	clrf	btemp+2,c
  1482  00AE22  BE01               	btfsc	btemp+1,7,c
  1483  00AE24  0602               	decf	btemp+2,f,c
  1484  00AE26  5002               	movf	btemp+2,w,c
  1485  00AE28  6E03               	movwf	btemp+3,c
  1486  00AE2A  EC69  F06B         	call	almul
  1487  00AE2E  C000  F0BE         	movff	btemp,?a_DVNTtoPopPWM+9
  1488  00AE32  C001  F0BF         	movff	btemp+1,?a_DVNTtoPopPWM+10
  1489  00AE36  C002  F0C0         	movff	btemp+2,?a_DVNTtoPopPWM+11
  1490  00AE3A  C003  F0C1         	movff	btemp+3,?a_DVNTtoPopPWM+12
  1491                           ;vntregtch.c: 392: pw/=1000;
  1492  00AE3E  0EE8               	movlw	232
  1493  00AE40  6E04               	movwf	btemp+4,c
  1494  00AE42  0E03               	movlw	3
  1495  00AE44  6E05               	movwf	btemp+5,c
  1496  00AE46  6A06               	clrf	btemp+6,c
  1497  00AE48  6A07               	clrf	btemp+7,c
  1498  00AE4A  0EBE               	movlw	low (?a_DVNTtoPopPWM+9)
  1499  00AE4C  6EE9               	movwf	fsr0l,c
  1500  00AE4E  0E00               	movlw	high (?a_DVNTtoPopPWM+9)
  1501  00AE50  6EEA               	movwf	fsr0h,c
  1502  00AE52  ECF5  F06D         	call	aldiv_f
  1503                           ;vntregtch.c: 394: pw+=p1;
  1504  00AE56  51B6               	movf	(?a_DVNTtoPopPWM+1)^(__Lparam& (0+65280)),
      +                          w
  1505  00AE58  27BE               	addwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,f,b
  1506  00AE5A  0E01               	movlw	1
  1507  00AE5C  B0D8               	btfsc	status,0,c
  1508  00AE5E  27BF               	addwf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280)
      +                          ),f,b
  1509  00AE60  B0D8               	btfsc	status,0,c
  1510  00AE62  27C0               	addwf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280)
      +                          ),f,b
  1511  00AE64  B0D8               	btfsc	status,0,c
  1512  00AE66  27C1               	addwf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280)
      +                          ),f,b
  1513                           ;vntregtch.c: 395: if(pw<0) pw=0;
  1514  00AE68  AFC1               	btfss	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280)
      +                          ),7,b
  1515  00AE6A  D004               	goto	l74
  1516  00AE6C  6BBE               	clrf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280)),
      +                          b
  1517  00AE6E  6BBF               	clrf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,b
  1518  00AE70  6BC0               	clrf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,b
  1519  00AE72  6BC1               	clrf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,b
  1520  00AE74                     l74:
  1521                           ;vntregtch.c: 396: if(pw>PWM.HIPWM) pw=PWM.HIPWM
      +                          ;
  1522  00AE74  C1DC  F000         	movff	_PWM+6,btemp
  1523  00AE78  6A01               	clrf	btemp+1,c
  1524  00AE7A  6A02               	clrf	btemp+2,c
  1525  00AE7C  6A03               	clrf	btemp+3,c
  1526  00AE7E  0100               	movlb	__Lparam shr (0+8)
  1527  00AE80  5003               	movf	btemp+3,w,c
  1528  00AE82  0A80               	xorlw	128
  1529  00AE84  6E04               	movwf	btemp+4,c
  1530  00AE86  51C1               	movf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,w
  1531  00AE88  0A80               	xorlw	128
  1532  00AE8A  5C04               	subwf	btemp+4,w,c
  1533  00AE8C  E108               	bnz	u575
  1534  00AE8E  51C0               	movf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,w
  1535  00AE90  5C02               	subwf	btemp+2,w,c
  1536  00AE92  E105               	bnz	u575
  1537  00AE94  51BF               	movf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,w
  1538  00AE96  5C01               	subwf	btemp+1,w,c
  1539  00AE98  E102               	bnz	u575
  1540  00AE9A  51BE               	movf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280)),
      +                          w
  1541  00AE9C  5C00               	subwf	btemp,w,c
  1542  00AE9E                     u575:
  1543  00AE9E  E205               	bc	l75
  1544  00AEA0  C1DC  F0BE         	movff	_PWM+6,?a_DVNTtoPopPWM+9
  1545  00AEA4  6BBF               	clrf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,b
  1546  00AEA6  6BC0               	clrf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,b
  1547  00AEA8  6BC1               	clrf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,b
  1548  00AEAA                     l75:
  1549                           ;vntregtch.c: 397: if(pw<31) pw=31;
  1550  00AEAA  0100               	movlb	__Lparam shr (0+8)
  1551  00AEAC  51C1               	movf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,w
  1552  00AEAE  0A80               	xorlw	128
  1553  00AEB0  0F80               	addlw	128
  1554  00AEB2  E108               	bnz	u585
  1555  00AEB4  0E00               	movlw	0
  1556  00AEB6  5DC0               	subwf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280)
      +                          ),w
  1557  00AEB8  E105               	bnz	u585
  1558  00AEBA  0E00               	movlw	0
  1559  00AEBC  5DBF               	subwf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280)
      +                          ),w
  1560  00AEBE  E102               	bnz	u585
  1561  00AEC0  0E1F               	movlw	31
  1562  00AEC2  5DBE               	subwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,w
  1563  00AEC4                     u585:
  1564  00AEC4  E205               	bc	l76
  1565  00AEC6  0E1F               	movlw	31
  1566  00AEC8  6FBE               	movwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,b
  1567  00AECA  6BBF               	clrf	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280))
      +                          ,b
  1568  00AECC  6BC0               	clrf	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280))
      +                          ,b
  1569  00AECE  6BC1               	clrf	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280))
      +                          ,b
  1570  00AED0                     l76:
  1571                           ;vntregtch.c: 398: if(i>2||!pop)
  1572  00AED0  0E02               	movlw	2
  1573  00AED2  64D9               	cpfsgt	fsr2l,c
  1574  00AED4  D001               	goto	u591
  1575  00AED6  D003               	goto	u610
  1576  00AED8                     u591:
  1577  00AED8  0100               	movlb	__Lparam shr (0+8)
  1578  00AEDA  51B4               	movf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1579  00AEDC  E103               	bnz	l77
  1580  00AEDE                     u610:
  1581                           ;vntregtch.c: 399: {
  1582  00AEDE  0100               	movlb	__Lparam shr (0+8)
  1583  00AEE0  51BE               	movf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280)),
      +                          w
  1584  00AEE2  0012               	return	
  1585  00AEE4                     l77:
  1586                           ;vntregtch.c: 402: else
  1587  00AEE4  0100               	movlb	__Lparam shr (0+8)
  1588  00AEE6  51B4               	movf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1589  00AEE8  25BE               	addwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,w
  1590  00AEEA  6E00               	movwf	btemp,c
  1591  00AEEC  0E00               	movlw	0
  1592  00AEEE  21BF               	addwfc	(?a_DVNTtoPopPWM+10)^(__Lparam& (0+65280
      +                          )),w
  1593  00AEF0  6E01               	movwf	btemp+1,c
  1594  00AEF2  0E00               	movlw	0
  1595  00AEF4  21C0               	addwfc	(?a_DVNTtoPopPWM+11)^(__Lparam& (0+65280
      +                          )),w
  1596  00AEF6  6E02               	movwf	btemp+2,c
  1597  00AEF8  0E00               	movlw	0
  1598  00AEFA  21C1               	addwfc	(?a_DVNTtoPopPWM+12)^(__Lparam& (0+65280
      +                          )),w
  1599  00AEFC  6E03               	movwf	btemp+3,c
  1600  00AEFE  C1DC  F004         	movff	_PWM+6,btemp+4
  1601  00AF02  6A05               	clrf	btemp+5,c
  1602  00AF04  6A06               	clrf	btemp+6,c
  1603  00AF06  6A07               	clrf	btemp+7,c
  1604  00AF08  5007               	movf	btemp+7,w,c
  1605  00AF0A  0A80               	xorlw	128
  1606  00AF0C  6E08               	movwf	btemp+8,c
  1607  00AF0E  5003               	movf	btemp+3,w,c
  1608  00AF10  0A80               	xorlw	128
  1609  00AF12  5C08               	subwf	btemp+8,w,c
  1610  00AF14  E108               	bnz	u625
  1611  00AF16  5002               	movf	btemp+2,w,c
  1612  00AF18  5C06               	subwf	btemp+6,w,c
  1613  00AF1A  E105               	bnz	u625
  1614  00AF1C  5001               	movf	btemp+1,w,c
  1615  00AF1E  5C05               	subwf	btemp+5,w,c
  1616  00AF20  E102               	bnz	u625
  1617  00AF22  5000               	movf	btemp,w,c
  1618  00AF24  5C04               	subwf	btemp+4,w,c
  1619  00AF26                     u625:
  1620  00AF26  E303               	bnc	l79
  1621                           ;vntregtch.c: 405: {
  1622  00AF28  51B4               	movf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1623  00AF2A  25BE               	addwf	(?a_DVNTtoPopPWM+9)^(__Lparam& (0+65280))
      +                          ,w
  1624  00AF2C  0012               	return	
  1625  00AF2E                     l79:
  1626                           ;vntregtch.c: 408: else
  1627  00AF2E  C1DC  FFE8         	movff	_PWM+6,wreg
  1628  00AF32  0012               	return	
  1629  00AF34                     l73:
  1630  00AF34  2AD9               	incf	fsr2l,f,c
  1631  00AF36                     l70:
  1632  00AF36  0E07               	movlw	7
  1633  00AF38  64D9               	cpfsgt	fsr2l,c
  1634  00AF3A  D6FC               	goto	l67
  1635                           ;vntregtch.c: 411: }
  1636  00AF3C  0100               	movlb	__Lparam shr (0+8)
  1637  00AF3E  51B5               	movf	?a_DVNTtoPopPWM^(__Lparam& (0+65280)),w
  1638  00AF40  0012               	return	
  1639                           ;vntregtch.c: 416: }
  1640  00AF42                     __end_of_DVNTtoPopPWM:
  1641                           ;vntregtch.c: 421: unsigned char CalkVNTtoPWM(un
      +                          signed char nst)
  1642                           ;vntregtch.c: 422: {
  1643  00AF42                     _CalkVNTtoPWM:
  1644  000000                     
  1645                           ;_nst stored from wreg
  1646  00AF42  0100               	movlb	__Lparam shr (0+8)
  1647  00AF44  6FA9               	movwf	?a_CalkVNTtoPWM^(__Lparam& (0+65280)),b
  1648                           ;vntregtch.c: 423: unsigned char p;
  1649  00AF46  51A9               	movf	?a_CalkVNTtoPWM^(__Lparam& (0+65280)),w
  1650  00AF48  DE0C               	call	_DVNTtoPWM
  1651  00AF4A  6EE1               	movwf	fsr1l,c
  1652                           ;vntregtch.c: 425: return p;
  1653  00AF4C  50E1               	movf	fsr1l,w,c
  1654  00AF4E  0012               	return	
  1655                           ;vntregtch.c: 426: }
  1656  00AF50                     __end_of_CalkVNTtoPWM:
  1657                           ;vntregtch.c: 432: unsigned char CalkVNTtoPopPWM
      +                          (unsigned char nst,unsigned char pop)
  1658                           ;vntregtch.c: 433: {
  1659  00AF50  00B2               	dw	?_CalkVNTtoPopPWM
  1660  00AF52                     _CalkVNTtoPopPWM:
  1661  000000                     
  1662                           ;_nst stored from wreg
  1663  00AF52  0100               	movlb	__Lparam shr (0+8)
  1664  00AF54  6FB3               	movwf	?a_CalkVNTtoPopPWM^(__Lparam& (0+65280)),
      +                          b
  1665                           ;vntregtch.c: 434: unsigned char p;
  1666  00AF56  51B2               	movf	?_CalkVNTtoPopPWM^(__Lparam& (0+65280)),w
  1667  00AF58  6FB4               	movwf	?_DVNTtoPopPWM^(__Lparam& (0+65280)),b
  1668  00AF5A  51B3               	movf	?a_CalkVNTtoPopPWM^(__Lparam& (0+65280)),w
  1669  00AF5C  DEE3               	call	_DVNTtoPopPWM
  1670  00AF5E  6EE1               	movwf	fsr1l,c
  1671                           ;vntregtch.c: 436: zzz=p;
  1672  00AF60  CFE1 FEF5          	movff	fsr1l,_zzz
  1673                           ;vntregtch.c: 437: return p;
  1674  00AF64  50E1               	movf	fsr1l,w,c
  1675  00AF66  0012               	return	
  1676                           ;vntregtch.c: 438: }
  1677  00AF68                     __end_of_CalkVNTtoPopPWM:
  1678                           ;vntregtch.c: 442: unsigned char ProcToVNT(unsig
      +                          ned char wrt)
  1679                           ;vntregtch.c: 443: {
  1680  00AF68                     _ProcToVNT:
  1681  000000                     
  1682                           ; _wrt loaded to fsr2l
  1683  00AF68  6ED9               	movwf	fsr2l,c
  1684                           ;vntregtch.c: 444: unsigned long tmp;
  1685  00AF6A  0E63               	movlw	99
  1686  00AF6C  64D9               	cpfsgt	fsr2l,c
  1687  00AF6E  D001               	goto	l84
  1688  00AF70  6ED9               	movwf	fsr2l,c
  1689  00AF72                     l84:
  1690                           ;vntregtch.c: 446: wrt=wrt+1;
  1691  00AF72  2AD9               	incf	fsr2l,f,c
  1692                           ;vntregtch.c: 447: tmp=((DtKNF.mmax-DtKNF.mmin)*
      +                          100)/100;
  1693  00AF74  0E64               	movlw	100
  1694  00AF76  6E02               	movwf	btemp+2,c
  1695  00AF78  6A03               	clrf	btemp+3,c
  1696  00AF7A  C1CB  FFE8         	movff	_DtKNF+23,wreg
  1697  00AF7E  C1CC  F000         	movff	_DtKNF+24,btemp
  1698  00AF82  6A01               	clrf	btemp+1,c
  1699  00AF84  5E00               	subwf	btemp,f,c
  1700  00AF86  0E00               	movlw	0
  1701  00AF88  5A01               	subwfb	btemp+1,f,c
  1702  00AF8A  ECB7  F06D         	call	awmul
  1703  00AF8E  C004  F000         	movff	btemp+4,btemp
  1704  00AF92  C005  F001         	movff	btemp+5,btemp+1
  1705  00AF96  0E64               	movlw	100
  1706  00AF98  6E02               	movwf	btemp+2,c
  1707  00AF9A  6A03               	clrf	btemp+3,c
  1708  00AF9C  EC5C  F06D         	call	awdiv
  1709  00AFA0  0E00               	movlw	0
  1710  00AFA2  BE05               	btfsc	btemp+5,7,c
  1711  00AFA4  0EFF               	movlw	255
  1712  00AFA6  6E06               	movwf	btemp+6,c
  1713  00AFA8  6E07               	movwf	btemp+7,c
  1714  00AFAA  C004  F0AB         	movff	btemp+4,?a_ProcToVNT
  1715  00AFAE  C005  F0AC         	movff	btemp+5,?a_ProcToVNT+1
  1716  00AFB2  C006  F0AD         	movff	btemp+6,?a_ProcToVNT+2
  1717  00AFB6  C007  F0AE         	movff	btemp+7,?a_ProcToVNT+3
  1718                           ;vntregtch.c: 448: return (DtKNF.mmin+(unsigned 
      +                          char)((wrt*tmp)/100));
  1719  00AFBA  C1CB  F0AF         	movff	_DtKNF+23,?a_ProcToVNT+4
  1720  00AFBE  C0AB  F004         	movff	?a_ProcToVNT,btemp+4
  1721  00AFC2  C0AC  F005         	movff	?a_ProcToVNT+1,btemp+5
  1722  00AFC6  C0AD  F006         	movff	?a_ProcToVNT+2,btemp+6
  1723  00AFCA  C0AE  F007         	movff	?a_ProcToVNT+3,btemp+7
  1724  00AFCE  CFD9 F000          	movff	fsr2l,btemp
  1725  00AFD2  6A01               	clrf	btemp+1,c
  1726  00AFD4  6A02               	clrf	btemp+2,c
  1727  00AFD6  6A03               	clrf	btemp+3,c
  1728  00AFD8  EC69  F06B         	call	llmul
  1729  00AFDC  0E64               	movlw	100
  1730  00AFDE  6E04               	movwf	btemp+4,c
  1731  00AFE0  6A05               	clrf	btemp+5,c
  1732  00AFE2  6A06               	clrf	btemp+6,c
  1733  00AFE4  6A07               	clrf	btemp+7,c
  1734  00AFE6  EC76  F06A         	call	lldiv
  1735  00AFEA  0100               	movlb	__Lparam shr (0+8)
  1736  00AFEC  51AF               	movf	(?a_ProcToVNT+4)^(__Lparam& (0+65280)),w
  1737  00AFEE  2400               	addwf	btemp,w,c
  1738  00AFF0  0012               	return	
  1739                           ;vntregtch.c: 449: }
  1740  00AFF2                     __end_of_ProcToVNT:
  1741                           ;vntregtch.c: 453: unsigned char VNTToProc(unsig
      +                          ned char wrt)
  1742                           ;vntregtch.c: 454: {
  1743  00AFF2                     _VNTToProc:
  1744  000000                     
  1745                           ; _wrt loaded to fsr2l
  1746  00AFF2  6ED9               	movwf	fsr2l,c
  1747                           ;vntregtch.c: 455: unsigned long tmp;
  1748  00AFF4  C1CB  FFE8         	movff	_DtKNF+23,wreg
  1749  00AFF8  60D9               	cpfslt	fsr2l,c
  1750  00AFFA  D001               	goto	l86
  1751  00AFFC  0C00               	retlw	0
  1752  00AFFE                     l86:
  1753                           ;vntregtch.c: 457: if(wrt>DtKNF.mmax) return 99;
  1754  00AFFE  50D9               	movf	fsr2l,w,c
  1755  00B000  0101               	movlb	(_DtKNF+24) shr (0+8)
  1756  00B002  61CC               	cpfslt	(_DtKNF+24)& (0+255),b
  1757  00B004  D001               	goto	l87
  1758  00B006  0C63               	retlw	99
  1759  00B008                     l87:
  1760                           ;vntregtch.c: 458: tmp=(wrt-DtKNF.mmin)*100;
  1761  00B008  0E64               	movlw	100
  1762  00B00A  6E02               	movwf	btemp+2,c
  1763  00B00C  6A03               	clrf	btemp+3,c
  1764  00B00E  C1CB  FFE8         	movff	_DtKNF+23,wreg
  1765  00B012  CFD9 F000          	movff	fsr2l,btemp
  1766  00B016  6A01               	clrf	btemp+1,c
  1767  00B018  5E00               	subwf	btemp,f,c
  1768  00B01A  0E00               	movlw	0
  1769  00B01C  5A01               	subwfb	btemp+1,f,c
  1770  00B01E  ECB7  F06D         	call	awmul
  1771  00B022  0E00               	movlw	0
  1772  00B024  BE05               	btfsc	btemp+5,7,c
  1773  00B026  0EFF               	movlw	255
  1774  00B028  6E06               	movwf	btemp+6,c
  1775  00B02A  6E07               	movwf	btemp+7,c
  1776  00B02C  C004  F0A9         	movff	btemp+4,?a_VNTToProc
  1777  00B030  C005  F0AA         	movff	btemp+5,?a_VNTToProc+1
  1778  00B034  C006  F0AB         	movff	btemp+6,?a_VNTToProc+2
  1779  00B038  C007  F0AC         	movff	btemp+7,?a_VNTToProc+3
  1780                           ;vntregtch.c: 459: tmp/=(DtKNF.mmax-DtKNF.mmin);
  1781  00B03C  C1CB  FFE8         	movff	_DtKNF+23,wreg
  1782  00B040  C1CC  F000         	movff	_DtKNF+24,btemp
  1783  00B044  5C00               	subwf	btemp,w,c
  1784  00B046  6E04               	movwf	btemp+4,c
  1785  00B048  6A05               	clrf	btemp+5,c
  1786  00B04A  A0D8               	btfss	status,0,c
  1787  00B04C  0605               	decf	btemp+5,f,c
  1788  00B04E  6A06               	clrf	btemp+6,c
  1789  00B050  BE05               	btfsc	btemp+5,7,c
  1790  00B052  0606               	decf	btemp+6,f,c
  1791  00B054  5006               	movf	btemp+6,w,c
  1792  00B056  6E07               	movwf	btemp+7,c
  1793  00B058  0EA9               	movlw	low ?a_VNTToProc
  1794  00B05A  6EE9               	movwf	fsr0l,c
  1795  00B05C  0E00               	movlw	high ?a_VNTToProc
  1796  00B05E  6EEA               	movwf	fsr0h,c
  1797  00B060  EC09  F06E         	call	lldiv_f
  1798                           ;vntregtch.c: 460: if(tmp>=99) return 99;
  1799  00B064  0100               	movlb	__Lparam shr (0+8)
  1800  00B066  0E00               	movlw	0
  1801  00B068  5DAC               	subwf	(?a_VNTToProc+3)^(__Lparam& (0+65280)),w
  1802  00B06A  E108               	bnz	u675
  1803  00B06C  0E00               	movlw	0
  1804  00B06E  5DAB               	subwf	(?a_VNTToProc+2)^(__Lparam& (0+65280)),w
  1805  00B070  E105               	bnz	u675
  1806  00B072  0E00               	movlw	0
  1807  00B074  5DAA               	subwf	(?a_VNTToProc+1)^(__Lparam& (0+65280)),w
  1808  00B076  E102               	bnz	u675
  1809  00B078  0E63               	movlw	99
  1810  00B07A  5DA9               	subwf	?a_VNTToProc^(__Lparam& (0+65280)),w
  1811  00B07C                     u675:
  1812  00B07C  E301               	bnc	l88
  1813  00B07E  0C63               	retlw	99
  1814  00B080                     l88:
  1815                           ;vntregtch.c: 461: return (unsigned char)tmp;
  1816  00B080  0100               	movlb	__Lparam shr (0+8)
  1817  00B082  51A9               	movf	?a_VNTToProc^(__Lparam& (0+65280)),w
  1818  00B084  0012               	return	
  1819                           ;vntregtch.c: 462: }
  1820  00B086                     __end_of_VNTToProc:
  1821                           ;vntregtch.c: 467: unsigned char CalkTimStr(unsi
      +                          gned char vstr)
  1822                           ;vntregtch.c: 468: {
  1823  00B086                     _CalkTimStr:
  1824  000000                     
  1825                           ; _vstr loaded to fsr2l
  1826  00B086  6ED9               	movwf	fsr2l,c
  1827                           ;vntregtch.c: 469: unsigned char mint,maxt,minv,
      +                          maxv;
  1828  00B088  0E06               	movlw	6
  1829  00B08A  6EE1               	movwf	fsr1l,c
  1830                           ;vntregtch.c: 472: maxt=10;
  1831  00B08C  0E0A               	movlw	10
  1832  00B08E  6EF3               	movwf	prodl,c
  1833                           ;vntregtch.c: 474: minv=28;
  1834  00B090  0E1C               	movlw	28
  1835  00B092  0100               	movlb	__Lparam shr (0+8)
  1836  00B094  6FA6               	movwf	?a_CalkTimStr^(__Lparam& (0+65280)),b
  1837                           ;vntregtch.c: 475: maxv=50;
  1838  00B096  0E32               	movlw	50
  1839  00B098  6EE9               	movwf	fsr0l,c
  1840                           ;vntregtch.c: 477: if(vstr<minv) vstr=minv;
  1841  00B09A  0E1C               	movlw	28
  1842  00B09C  60D9               	cpfslt	fsr2l,c
  1843  00B09E  D001               	goto	l90
  1844  00B0A0  6ED9               	movwf	fsr2l,c
  1845  00B0A2                     l90:
  1846                           ;vntregtch.c: 478: if(vstr>maxv) vstr=maxv;
  1847  00B0A2  0E32               	movlw	50
  1848  00B0A4  6E00               	movwf	btemp,c
  1849  00B0A6  50D9               	movf	fsr2l,w,c
  1850  00B0A8  5C00               	subwf	btemp,w,c
  1851  00B0AA  E202               	bc	l91
  1852  00B0AC  0E32               	movlw	50
  1853  00B0AE  6ED9               	movwf	fsr2l,c
  1854  00B0B0                     l91:
  1855                           ;vntregtch.c: 480: w=(unsigned long int)((maxt-m
      +                          int)*(vstr-minv)*100);
  1856  00B0B0  0E64               	movlw	100
  1857  00B0B2  6E02               	movwf	btemp+2,c
  1858  00B0B4  6A03               	clrf	btemp+3,c
  1859  00B0B6  50D9               	movf	fsr2l,w,c
  1860  00B0B8  0D04               	mullw	4
  1861  00B0BA  0E90               	movlw	144
  1862  00B0BC  24F3               	addwf	prodl,w,c
  1863  00B0BE  6E00               	movwf	btemp,c
  1864  00B0C0  0EFF               	movlw	255
  1865  00B0C2  20F4               	addwfc	prodh,w,c
  1866  00B0C4  6E01               	movwf	btemp+1,c
  1867  00B0C6  ECB7  F06D         	call	awmul
  1868  00B0CA  0100               	movlb	__Lparam shr (0+8)
  1869  00B0CC  C004  F0A7         	movff	btemp+4,?a_CalkTimStr+1
  1870  00B0D0  C005  F0A8         	movff	btemp+5,?a_CalkTimStr+2
  1871  00B0D4  0E00               	movlw	0
  1872  00B0D6  BFA8               	btfsc	(?a_CalkTimStr+2)^(__Lparam& (0+65280)),7
      +                          ,b
  1873  00B0D8  0EFF               	movlw	-1
  1874  00B0DA  6FA9               	movwf	(?a_CalkTimStr+3)^(__Lparam& (0+65280)),b
  1875  00B0DC  6FAA               	movwf	(?a_CalkTimStr+4)^(__Lparam& (0+65280)),b
  1876                           ;vntregtch.c: 481: w/=(maxv-minv);
  1877  00B0DE  0E16               	movlw	22
  1878  00B0E0  6E04               	movwf	btemp+4,c
  1879  00B0E2  6A05               	clrf	btemp+5,c
  1880  00B0E4  6A06               	clrf	btemp+6,c
  1881  00B0E6  6A07               	clrf	btemp+7,c
  1882  00B0E8  0EA7               	movlw	low (?a_CalkTimStr+1)
  1883  00B0EA  6EE9               	movwf	fsr0l,c
  1884  00B0EC  0E00               	movlw	high (?a_CalkTimStr+1)
  1885  00B0EE  6EEA               	movwf	fsr0h,c
  1886  00B0F0  EC09  F06E         	call	lldiv_f
  1887                           ;vntregtch.c: 482: w/=100;
  1888  00B0F4  0E64               	movlw	100
  1889  00B0F6  6E04               	movwf	btemp+4,c
  1890  00B0F8  6A05               	clrf	btemp+5,c
  1891  00B0FA  6A06               	clrf	btemp+6,c
  1892  00B0FC  6A07               	clrf	btemp+7,c
  1893  00B0FE  0EA7               	movlw	low (?a_CalkTimStr+1)
  1894  00B100  6EE9               	movwf	fsr0l,c
  1895  00B102  0E00               	movlw	high (?a_CalkTimStr+1)
  1896  00B104  6EEA               	movwf	fsr0h,c
  1897  00B106  EC09  F06E         	call	lldiv_f
  1898                           ;vntregtch.c: 483: w+=mint;
  1899  00B10A  0E06               	movlw	6
  1900  00B10C  27A7               	addwf	(?a_CalkTimStr+1)^(__Lparam& (0+65280)),f
      +                          ,b
  1901  00B10E  0E00               	movlw	0
  1902  00B110  23A8               	addwfc	(?a_CalkTimStr+2)^(__Lparam& (0+65280)),
      +                          f,b
  1903  00B112  23A9               	addwfc	(?a_CalkTimStr+3)^(__Lparam& (0+65280)),
      +                          f,b
  1904  00B114  23AA               	addwfc	(?a_CalkTimStr+4)^(__Lparam& (0+65280)),
      +                          f,b
  1905                           ;vntregtch.c: 484: return (unsigned char) w;
  1906  00B116  51A7               	movf	(?a_CalkTimStr+1)^(__Lparam& (0+65280)),w
  1907  00B118  0012               	return	
  1908                           ;vntregtch.c: 485: }
  1909  00B11A                     __end_of_CalkTimStr:
  1910  000000                     
  1911  000000                     
  1912  000000                     
  1913  000000                     
  1914  000000                     
  1915  000000                     
  1916  000000                     
  1917  000000                     
  1918  000000                     
  1919  000000                     
  1920  000000                     
  1921  000000                     
  1922  000000                     
  1923  000000                     
  1924  000000                     
  1925  000000                     
  1926  000000                     
  1927  000000                     
  1928  000000                     
  1929  000000                     
  1930  000000                     
  1931  000000                     
  1932  000000                     
  1933  000000                     
  1934  000000                     
  1935  000000                     
  1936  000000                     
  1937  000000                     
  1938  000000                     
  1939  000000                     
  1940  000000                     
  1941  000000                     
  1942  000000                     
  1943  000000                     
  1944  000000                     
  1945  000000                     
  1946  000000                     
  1947  000000                     
  1948  000000                     
  1949  000000                     
  1950  000000                     
  1951  000000                     
  1952  000000                     
  1953  000000                     
  1954  000000                     
  1955  000000                     
  1956  000000                     
  1957  000000                     
  1958  000000                     
  1959  000000                     
  1960  000000                     
  1961  000000                     
  1962  000000                     
  1963  000000                     
  1964  000000                     
  1965  000000                     
  1966  000000                     
  1967  000000                     
  1968  000000                     
  1969  000000                     
  1970  000000                     
  1971  000000                     
  1972  000000                     
  1973  000000                     
  1974  000000                     
  1975  000000                     
  1976  000000                     
  1977  000000                     
  1978  000000                     
  1979  000000                     
  1980  000000                     
  1981  000000                     
  1982  000000                     
  1983  000000                     
  1984  000000                     
  1985  000000                     
  1986  000000                     
  1987  000000                     
  1988  000000                     
  1989  000000                     
  1990  000000                     
  1991  000000                     
  1992  000000                     
  1993  000000                     
  1994  000000                     
  1995  000000                     
  1996  000000                     
  1997  000000                     
  1998  000000                     
  1999  000000                     
  2000  000000                     
  2001  000000                     
  2002  000000                     
  2003  000000                     
  2004  000000                     
  2005  000000                     
  2006  000000                     
  2007  000000                     
  2008  000000                     
  2009  000000                     
  2010  000000                     
  2011  000000                     
  2012  000000                     
  2013  000000                     
  2014  000000                     
  2015  000000                     
  2016  000000                     
  2017  000000                     
  2018  000000                     
  2019  000000                     
  2020  000000                     
  2021  000000                     
  2022  000000                     
  2023  000000                     
  2024  000000                     
  2025  000000                     
  2026  000000                     
  2027  000000                     
  2028  000000                     
  2029  000000                     
  2030  000000                     
  2031  000000                     
  2032  000000                     
  2033  000000                     
  2034  000000                     
  2035  000000                     
  2036  000000                     
  2037  000000                     
  2038  000000                     
  2039  000000                     
  2040  000000                     
  2041  000000                     
  2042  000000                     
  2043  000000                     
  2044  000000                     
  2045  000000                     
  2046  000000                     
  2047  000000                     
  2048  000000                     
  2049  000000                     
  2050  000000                     
  2051  000000                     
  2052  000000                     
  2053  000000                     
  2054  000000                     
  2055  000000                     
  2056  000000                     
  2057  000000                     
  2058  000000                     
  2059  000000                     
  2060  000000                     
  2061  000000                     
  2062  000000                     
  2063  000000                     
  2064  000000                     
  2065  000000                     
  2066  000000                     
  2067  000000                     
  2068  000000                     
  2069  000000                     
  2070  000000                     
  2071  000000                     
  2072  000000                     
  2073  000000                     
  2074  000000                     
  2075  000000                     
  2076  000000                     
  2077  000000                     
  2078  000000                     
  2079  000000                     
  2080  000000                     
  2081  000000                     
  2082  000000                     
  2083  000000                     
  2084  000000                     
  2085  000000                     
  2086  000000                     
  2087  000000                     
  2088  000000                     
  2089  000000                     
  2090  000000                     
  2091  000000                     
  2092  000000                     
  2093  000000                     
  2094  000000                     
  2095  000000                     
  2096  000000                     
  2097  000000                     
  2098  000000                     
  2099  000000                     
  2100  000000                     
  2101  000000                     
  2102  000000                     
  2103  000000                     
  2104  000000                     
  2105  000000                     
  2106  000000                     
  2107  000000                     
  2108  000000                     
  2109  000000                     
  2110  000000                     
  2111  000000                     
  2112  000000                     
  2113  000000                     
  2114  000000                     
  2115  000000                     
  2116  000000                     
  2117  000000                     
  2118  000000                     
  2119  000000                     
  2120  000000                     
  2121  000000                     
  2122  000000                     
  2123  000000                     
  2124  000000                     
  2125  000000                     
  2126  000000                     
  2127  000000                     
  2128  000000                     
  2129  000000                     
  2130  000000                     
  2131  000000                     
  2132  000000                     
  2133  000000                     
  2134  000000                     
  2135  000000                     
  2136  000000                     
  2137  000000                     
  2138  000000                     
  2139  000000                     
  2140  000000                     
  2141  000000                     
  2142  000000                     
  2143  000000                     
  2144  000000                     
  2145  000000                     
  2146  000000                     
  2147  000000                     
  2148  000000                     
  2149  000000                     
  2150  000000                     
  2151  000000                     
  2152  000000                     
  2153  000000                     
  2154  000000                     
  2155  000000                     
  2156  000000                     
  2157  000000                     
  2158  000000                     
  2159  000000                     
  2160  000000                     
  2161  000000                     
  2162  000000                     
  2163  000000                     
  2164  000000                     
  2165  000000                     
  2166  000000                     
  2167  000000                     
  2168  000000                     
  2169  000000                     
  2170  000000                     
  2171  000000                     
  2172  000000                     
  2173  000000                     
  2174  000000                     
  2175  000000                     
  2176  000000                     
  2177  000000                     
  2178  000000                     
  2179  000000                     
  2180  000000                     
  2181  000000                     
  2182  000000                     
  2183  000000                     
  2184  000000                     
  2185  000000                     
  2186  000000                     
  2187  000000                     
  2188  000000                     
  2189  000000                     
  2190  000000                     
  2191  000000                     
  2192  000000                     
  2193  000000                     
  2194  000000                     
  2195  000000                     
  2196  000000                     
  2197  000000                     
  2198  000000                     
  2199  000000                     
  2200  000000                     
  2201  000000                     
  2202  000000                     
  2203  000000                     
  2204  000000                     
  2205  000000                     
  2206  000000                     
  2207  000000                     
  2208  000000                     
  2209  000000                     
  2210  000000                     
  2211  000000                     
  2212  000000                     
  2213  000000                     
  2214  000000                     
  2215  000000                     
  2216  000000                     
  2217  000000                     
  2218  000000                     
  2219  000000                     
  2220  000000                     
  2221  000000                     
  2222  000000                     
  2223  000000                     
  2224  000000                     
  2225  000000                     
  2226  000000                     
  2227  000000                     
  2228  000000                     
  2229  000000                     
  2230  000000                     
  2231  000000                     
  2232  000000                     
  2233  000000                     
  2234  000000                     
  2235  000000                     
  2236  000000                     
  2237  000000                     
  2238  000000                     
  2239  000000                     
  2240  000000                     
  2241  000000                     
  2242  000000                     
  2243  000000                     
  2244  000000                     
  2245  000000                     
  2246  000000                     
  2247  000000                     
  2248  000000                     
  2249  000000                     
  2250  000000                     
  2251  000000                     
  2252  000000                     
  2253  000000                     
  2254  000000                     
  2255  000000                     
  2256  000000                     
  2257  000000                     
  2258  000000                     
  2259  000000                     
  2260  000000                     
  2261  000000                     
  2262  000000                     
  2263  000000                     
  2264  000000                     
  2265  000000                     
  2266  000000                     
  2267  000000                     
  2268  000000                     
  2269  000000                     
  2270  000000                     
  2271  000000                     
  2272  000000                     
  2273  000000                     
  2274  000000                     
  2275  000000                     
  2276  000000                     
  2277  000000                     
  2278  000000                     
  2279  000000                     
  2280  000000                     
  2281  000000                     
  2282  000000                     
  2283  000000                     
  2284  000000                     
  2285  000000                     
  2286  000000                     
  2287  000000                     
  2288  000000                     
  2289  000000                     
  2290  000000                     
  2291  000000                     
  2292  000000                     
  2293  000000                     
  2294  000000                     
  2295  000000                     
  2296  000000                     
  2297  000000                     
  2298  000000                     
  2299  000000                     
  2300  000000                     
  2301  000000                     
  2302  000000                     
  2303  000000                     
  2304  000000                     
  2305  000000                     
  2306  000000                     
  2307  000000                     
  2308  000000                     
  2309  000000                     
  2310  000000                     
  2311  000000                     
  2312  000000                     
  2313  000000                     
  2314  000000                     
  2315  000000                     
  2316  000000                     
  2317  000000                     
  2318  000000                     
  2319  000000                     
  2320  000000                     
  2321  000000                     
  2322  000000                     
  2323  000000                     
  2324  000000                     
  2325  000000                     
  2326  000000                     
  2327  000000                     
  2328  000000                     
  2329  000000                     
  2330  000000                     
  2331  000000                     
  2332  000000                     
  2333  000000                     
  2334  000000                     
  2335  000000                     
  2336  000000                     
  2337  000000                     
  2338  000000                     
  2339  000000                     
  2340  000000                     
  2341  000000                     
  2342  000000                     
  2343  000000                     
  2344  000000                     
  2345  000000                     
  2346                           
  2347                           	psect	bigbss
  2348  000F41                     F1688:
  2349  000F41                     	ds	1
  2350  000F41                     F1689:
  2351  000F41                     	ds	1
  2352  000000                     
  2353  000000                     
  2354  000000                     
  2355  000000                     
  2356  000000                     
  2357  000000                     
  2358  000000                     
  2359  000000                     
  2360  000000                     
  2361  000000                     
  2362  000000                     
  2363  000000                     
  2364  000000                     
  2365  000000                     
  2366  000000                     
  2367  000000                     
  2368  000000                     
  2369  000000                     
  2370  000000                     
  2371  000000                     
  2372  000000                     
  2373  000000                     
  2374  000000                     
  2375  000000                     
  2376  000000                     
  2377  000000                     
  2378  000000                     
  2379  000000                     
  2380  000000                     
  2381  000000                     
  2382  000000                     
  2383  000000                     
  2384  000000                     
  2385  000000                     
  2386  000000                     
  2387  000000                     
  2388  000000                     
  2389  000000                     
  2390  000000                     
  2391  000000                     
  2392  000000                     
  2393  000000                     
  2394  000000                     
  2395  000000                     
  2396  000000                     
  2397  000000                     
  2398  000000                     
  2399  000000                     
  2400  000000                     
  2401  000000                     
  2402  000000                     
  2403  000000                     
  2404  000000                     
  2405  000000                     
  2406  000000                     
  2407  000000                     
  2408  000000                     
  2409  000000                     
  2410  000000                     
  2411  000000                     
  2412  000000                     
  2413  000000                     
  2414  000000                     
  2415  000000                     
  2416  000000                     
  2417  000000                     
  2418  000000                     
  2419  000000                     
  2420  000000                     
  2421  000000                     
  2422  000000                     
  2423  000000                     
  2424  000000                     
  2425  000000                     
  2426  000000                     
  2427  000000                     
  2428  000000                     
  2429  000000                     
  2430  000000                     
  2431  000000                     
  2432  000000                     
  2433  000000                     
  2434  000000                     
  2435  000000                     
  2436  000000                     
  2437  000000                     
  2438  000000                     
  2439  000000                     
  2440  000000                     
  2441  000000                     
  2442  000000                     
  2443  000000                     
  2444  000000                     
  2445  000000                     
  2446  000000                     
  2447  000000                     
  2448  000000                     
  2449  000000                     
  2450  000000                     
  2451  000000                     
  2452  000000                     
  2453  000000                     
  2454  000000                     
  2455  000000                     
  2456  000000                     
  2457  000000                     
  2458  000000                     
  2459  000000                     
  2460  000000                     
  2461  000000                     
  2462  000000                     
  2463  000000                     
  2464  000000                     
  2465  000000                     
  2466  000000                     
  2467  000000                     
  2468  000000                     
  2469  000000                     
  2470  000000                     
  2471  000000                     
  2472  000000                     
  2473  000000                     
  2474  000000                     
  2475  000000                     
  2476  000000                     
  2477                           
  2478                           	psect	const
  2479  001060                     _nkpkt:
  2480  001060  08                 	db	8
  2481  000000                     
  2482  000000                     
  2483  000000                     
  2484  000000                     
  2485  000000                     
  2486  000000                     
  2487  000000                     
  2488                           
  2489                           	psect	bss
  2490  0002DD                     _Kvnt:
  2491  0002DD                     	ds	20
  2492                           
  2493                           	psect	temp
  2494  000000                     btemp:
  2495  000000                     	ds	9
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           indf0	equ	0xFEF
  2499                           postinc0	equ	0xFEE
  2500                           postdec0	equ	0xFED
  2501                           fsr0h	equ	0xFEA
  2502                           fsr0l	equ	0xFE9
  2503                           wreg	equ	0xFE8
  2504                           fsr1l	equ	0xFE1
  2505                           fsr2l	equ	0xFD9
  2506                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Thu Jul 28 10:43:11 2016

                    ?_SetKalPWM 00A9                     ?a_VNTToProc 00A9  
                             _M 0306          _OdczytDanychKalibracji AADE  
                      _PrintErr D342                              l21 A632  
                            l31 A7E0                              l15 A538  
                            l40 A91E                              l32 A7F4  
                            l24 AAB6                              l41 A92E  
                            l33 A896                              l25 A786  
                            l50 A9EE                              l42 A940  
                            l34 A8AA                              l26 A7B6  
                            l18 A5F8                              l51 AA76  
                            l43 A9AE                              l35 A8AE  
                            l60 ABCA                              l52 AAA4  
                            l28 A7BA                              l61 ABD0  
                            l53 AAAC                              l45 A9B0  
                            l70 AF36                              l62 AD14  
                            l46 A9B4                              l38 A8D4  
                            l71 AD8C                              l63 ACB2  
                            l47 A9F6                              l39 A8E8  
                            l72 AD92                              l64 ACE8  
                            l56 AB72                              l73 AF34  
                            l65 AD0E                              l49 A9F0  
                            l90 B0A2                              l74 AE74  
                            l91 B0B0                              l75 AEAA  
                            l67 AD34                              l59 AD16  
                            l84 AF72                              l76 AED0  
                            l77 AEE4                              l86 AFFE  
                            l87 B008                              l79 AF2E  
                            l88 B080                              u21 A5A8  
                            u40 A5C2                              u80 A62C  
                     ?_PrintErr 00A9                       _ProcToVNT AF68  
                      _StartRTS C7AA               __end_of_ProcToVNT AFF2  
                           u431 ABE0                             u610 AEDE  
                           u450 ABE8                             _PFN 006B  
                           u531 ADA2                             u550 ADAA  
                           u625 AF26                             u475 ACDC  
                           u485 AD02                             u591 AED8  
                           u575 AE9E                             u585 AEC4  
                           _PMP 02F1                             u675 B07C  
                           _PWM 01D6                             _RTS C7CE  
                      _WritePWM CFBE                    _DVNTtoPopPWM AD24  
                           _zzz 0EF5                             wreg 000FE8  
                     _StartRTdS C76E                 ?a_KalibracjaVNT 00A7  
                          F1688 0F41                            F1689 0F42  
                  _ReadEEVNT0_P 8B08                    _ReadEEVNT1_P 8B30  
                  _ReadEEVNT0_V 8B04                    _ReadEEVNT2_P 8B58  
                  _ReadEEVNT1_V 8B2C                    _ReadEEVNT3_P 8B80  
                  _ReadEEVNT2_V 8B54                    _ReadEEVNT4_P 8BA8  
                  _ReadEEVNT3_V 8B7C                    _ReadEEVNT5_P 8BD0  
                  _ReadEEVNT4_V 8BA4                    _ReadEEVNT6_P 8BF8  
                  _ReadEEVNT5_V 8BCC                    _ReadEEVNT7_P 8C24  
                  _ReadEEVNT6_V 8BF4                    _ReadEEVNT7_V 8C20  
          __end_of_DVNTtoPopPWM AF42                            f6253 00AF  
                          f5713 00AC                       _WritePWM2 CFD8  
                          _RTdS C792                            _Kvnt 02DD  
                          almul D6D2                            fsr0h 000FEA  
                          indf0 000FEF                            fsr0l 000FE9  
                          fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 0000                            awdiv DAB8  
                          awmul DB6E                            ftdiv D75A  
                          lldiv D4EC                            fttol D99A  
                          llmul D6D2                            prodh 000FF4  
                          prodl 000FF3                 _CalkVNTtoPopPWM AF52  
                   ?a_SetKalPWM 00AA                ?_CalkVNTtoPopPWM 00B2  
                ?a_DVNTtoPopPWM 00B5                     ?a_ProcToVNT 00AB  
                    _WriteEEPFN 8AB0                           _RSDT1 0326  
                         _DtKNF 01B4                   ?_DVNTtoPopPWM 00B4  
                    used_btemp0 0001                      used_btemp1 0001  
                    used_btemp2 0001                      used_btemp3 0001  
                    used_btemp4 0001                      used_btemp5 0001  
                    used_btemp6 0001                      used_btemp7 0001  
                    used_btemp8 0001                           _nkpkt 1060  
                         _round D860                         _BitSet2 D4AE  
                    _CalkTimStr B086                         _GetBit2 D448  
                         lwtoft DBCE                        ?_BitSet2 00AA  
                         status 000FD8                        ?_GetBit2 00A9  
            __end_of_CalkTimStr B11A                    _ProcToPmpPwm B11A  
                       __Lparam 00A6                       _DVNTtoPWM AB62  
             __end_of_DVNTtoPWM AD22         __end_of_CalkVNTtoPopPWM AF68  
                       __ramtop 1000               ?a_CalkVNTtoPopPWM 00B3  
                  _CalkVNTtoPWM AF42                          ?_round 00B6  
                   _WriteEEVNT0 8AE6                     _WriteEEVNT1 8B0E  
                   _WriteEEVNT2 8B36                     _WriteEEVNT3 8B5E  
                   _WriteEEVNT4 8B86                     _WriteEEVNT5 8BAE  
                   _WriteEEVNT6 8BD6                     _WriteEEVNT7 8BFE  
          __end_of_CalkVNTtoPWM AF50                          _ErrPTG 34E6  
                     _VNTToProc AFF2               __end_of_VNTToProc B086  
                   ?a_DVNTtoPWM 00AA                         postdec0 000FED  
                 _KalibracjaVNT A610                         postinc0 000FEE  
                  ?_WriteEEVNT0 00A9                    ?_WriteEEVNT1 00A9  
                  ?_WriteEEVNT2 00A9                    ?_WriteEEVNT3 00A9  
                  ?_WriteEEVNT4 00A9                    ?_WriteEEVNT5 00A9  
                  ?_WriteEEVNT6 00A9                    ?_WriteEEVNT7 00A9  
                        aldiv_f DBEA                  ?a_CalkVNTtoPWM 00A9  
                        lldiv_f DC12  __end_of_OdczytDanychKalibracji AB62  
         __end_of_KalibracjaVNT AADE                        _ModParam CDBE  
                     _SetKalPWM A50E                    ?a_CalkTimStr 00A6  
             __end_of_SetKalPWM A610  
