

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:33:12 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	rbss,global,common,class=COMRAM,space=1,d
      +                          elta=1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	text
    99                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   146                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   167                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   168                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   169                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   170                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   171                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   172                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   173                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   174                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   175                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   176                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   177                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   178                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   179                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   180                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   181                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   182                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   183                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   184                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   185                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   186                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   187                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   188                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   189                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   190                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   191                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   192                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   193                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   194                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   195                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   196                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   197                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   198                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   199  00FC3E                     _StartRTcS:
   200  000000                     
   201                           ; _Index loaded to fsr2l
   202  00FC3E  6ED9               	movwf	fsr2l,c
   203                           ;rtimer.c: 42: if (Index>1-1) asm("RESET");
   204  00FC40  50D9               	movf	fsr2l,w,c
   205  00FC42  A4D8               	btfss	status,2,c
   206  00FC44  00FF               	reset		;#
   207                           ;rtimer.c: 43: cSk[Index]=0;
   208  00FC46  50D9               	movf	fsr2l,w,c
   209  00FC48  0F0F               	addlw	_cSk
   210  00FC4A  6EE9               	movwf	fsr0l,c
   211  00FC4C  6AEA               	clrf	fsr0h,c
   212  00FC4E  6AEF               	clrf	indf0,c
   213                           ;rtimer.c: 44: }
   214  00FC50  0C00               	retlw	0
   215  00FC52                     __end_of_StartRTcS:
   216                           ;rtimer.c: 45: unsigned char RTcS(const unsigned
      +                           char Index)
   217                           ;rtimer.c: 46: {
   218  00FC52                     _RTcS:
   219  000000                     
   220                           ; _Index loaded to fsr2l
   221  00FC52  6ED9               	movwf	fsr2l,c
   222                           ;rtimer.c: 47: if (Index>1-1) asm("RESET");
   223  00FC54  50D9               	movf	fsr2l,w,c
   224  00FC56  A4D8               	btfss	status,2,c
   225  00FC58  00FF               	reset		;#
   226                           ;rtimer.c: 48: return cSk[Index];
   227  00FC5A  50D9               	movf	fsr2l,w,c
   228  00FC5C  0F0F               	addlw	_cSk
   229  00FC5E  6EE9               	movwf	fsr0l,c
   230  00FC60  6AEA               	clrf	fsr0h,c
   231  00FC62  50EF               	movf	indf0,w,c
   232  00FC64  0012               	return	
   233                           ;rtimer.c: 49: }
   234  00FC66                     __end_of_RTcS:
   235                           ;rtimer.c: 54: void StartRTdS(const unsigned cha
      +                          r Index)
   236                           ;rtimer.c: 55: {
   237  00FC66                     _StartRTdS:
   238  000000                     
   239                           ; _Index loaded to fsr2l
   240  00FC66  6ED9               	movwf	fsr2l,c
   241                           ;rtimer.c: 56: if (Index>17-1) asm("RESET");
   242  00FC68  0E10               	movlw	16
   243  00FC6A  64D9               	cpfsgt	fsr2l,c
   244  00FC6C  D001               	goto	l11
   245  00FC6E  00FF               	reset		;#
   246  00FC70                     l11:
   247                           ;rtimer.c: 57: dSk[Index].cS=0;
   248  00FC70  50D9               	movf	fsr2l,w,c
   249  00FC72  24D9               	addwf	fsr2l,w,c
   250  00FC74  0F35               	addlw	_dSk
   251  00FC76  6EE9               	movwf	fsr0l,c
   252  00FC78  6AEA               	clrf	fsr0h,c
   253  00FC7A  6AEF               	clrf	indf0,c
   254                           ;rtimer.c: 58: dSk[Index].dS=0;
   255  00FC7C  50D9               	movf	fsr2l,w,c
   256  00FC7E  24D9               	addwf	fsr2l,w,c
   257  00FC80  0F36               	addlw	_dSk+1
   258  00FC82  6EE9               	movwf	fsr0l,c
   259  00FC84  6AEA               	clrf	fsr0h,c
   260  00FC86  6AEF               	clrf	indf0,c
   261                           ;rtimer.c: 59: }
   262  00FC88  0C00               	retlw	0
   263  00FC8A                     __end_of_StartRTdS:
   264                           ;rtimer.c: 60: unsigned char RTdS(const unsigned
      +                           char Index)
   265                           ;rtimer.c: 61: {
   266  00FC8A                     _RTdS:
   267  000000                     
   268                           ; _Index loaded to fsr2l
   269  00FC8A  6ED9               	movwf	fsr2l,c
   270                           ;rtimer.c: 62: if (Index>17-1) asm("RESET");
   271  00FC8C  0E10               	movlw	16
   272  00FC8E  64D9               	cpfsgt	fsr2l,c
   273  00FC90  D001               	goto	l13
   274  00FC92  00FF               	reset		;#
   275  00FC94                     l13:
   276                           ;rtimer.c: 63: return dSk[Index].dS;
   277  00FC94  50D9               	movf	fsr2l,w,c
   278  00FC96  24D9               	addwf	fsr2l,w,c
   279  00FC98  0F36               	addlw	_dSk+1
   280  00FC9A  6EE9               	movwf	fsr0l,c
   281  00FC9C  6AEA               	clrf	fsr0h,c
   282  00FC9E  50EF               	movf	indf0,w,c
   283  00FCA0  0012               	return	
   284                           ;rtimer.c: 64: }
   285  00FCA2                     __end_of_RTdS:
   286                           ;rtimer.c: 69: void StartRTS(const unsigned char
      +                           Index)
   287                           ;rtimer.c: 70: {
   288  00FCA2                     _StartRTS:
   289  000000                     
   290                           ; _Index loaded to fsr2l
   291  00FCA2  6ED9               	movwf	fsr2l,c
   292                           ;rtimer.c: 71: if (Index>17-1) asm("RESET");
   293  00FCA4  0E10               	movlw	16
   294  00FCA6  64D9               	cpfsgt	fsr2l,c
   295  00FCA8  D001               	goto	l15
   296  00FCAA  00FF               	reset		;#
   297  00FCAC                     l15:
   298                           ;rtimer.c: 72: Sk[Index].dS=0;
   299  00FCAC  50D9               	movf	fsr2l,w,c
   300  00FCAE  24D9               	addwf	fsr2l,w,c
   301  00FCB0  0F13               	addlw	_Sk
   302  00FCB2  6EE9               	movwf	fsr0l,c
   303  00FCB4  6AEA               	clrf	fsr0h,c
   304  00FCB6  6AEF               	clrf	indf0,c
   305                           ;rtimer.c: 73: Sk[Index].S=0;
   306  00FCB8  50D9               	movf	fsr2l,w,c
   307  00FCBA  24D9               	addwf	fsr2l,w,c
   308  00FCBC  0F14               	addlw	_Sk+1
   309  00FCBE  6EE9               	movwf	fsr0l,c
   310  00FCC0  6AEA               	clrf	fsr0h,c
   311  00FCC2  6AEF               	clrf	indf0,c
   312                           ;rtimer.c: 74: }
   313  00FCC4  0C00               	retlw	0
   314  00FCC6                     __end_of_StartRTS:
   315                           ;rtimer.c: 75: unsigned char RTS(const unsigned 
      +                          char Index)
   316                           ;rtimer.c: 76: {
   317  00FCC6                     _RTS:
   318  000000                     
   319                           ; _Index loaded to fsr2l
   320  00FCC6  6ED9               	movwf	fsr2l,c
   321                           ;rtimer.c: 77: if (Index>17-1) asm("RESET");
   322  00FCC8  0E10               	movlw	16
   323  00FCCA  64D9               	cpfsgt	fsr2l,c
   324  00FCCC  D001               	goto	l17
   325  00FCCE  00FF               	reset		;#
   326  00FCD0                     l17:
   327                           ;rtimer.c: 78: return Sk[Index].S;
   328  00FCD0  50D9               	movf	fsr2l,w,c
   329  00FCD2  24D9               	addwf	fsr2l,w,c
   330  00FCD4  0F14               	addlw	_Sk+1
   331  00FCD6  6EE9               	movwf	fsr0l,c
   332  00FCD8  6AEA               	clrf	fsr0h,c
   333  00FCDA  50EF               	movf	indf0,w,c
   334  00FCDC  0012               	return	
   335                           ;rtimer.c: 79: }
   336  00FCDE                     __end_of_RTS:
   337                           ;rtimer.c: 84: void StartRTM(const unsigned char
      +                           Index)
   338                           ;rtimer.c: 85: {
   339  00FCDE                     _StartRTM:
   340  000000                     
   341                           ; _Index loaded to fsr2l
   342  00FCDE  6ED9               	movwf	fsr2l,c
   343                           ;rtimer.c: 86: if (Index>7-1) asm("RESET");
   344  00FCE0  0E06               	movlw	6
   345  00FCE2  64D9               	cpfsgt	fsr2l,c
   346  00FCE4  D001               	goto	l19
   347  00FCE6  00FF               	reset		;#
   348  00FCE8                     l19:
   349                           ;rtimer.c: 87: Mn[Index].S=0;
   350  00FCE8  50D9               	movf	fsr2l,w,c
   351  00FCEA  0D02               	mullw	2
   352  00FCEC  0EF2               	movlw	low _Mn
   353  00FCEE  24F3               	addwf	prodl,w,c
   354  00FCF0  6EE9               	movwf	fsr0l,c
   355  00FCF2  0E01               	movlw	high _Mn
   356  00FCF4  20F4               	addwfc	prodh,w,c
   357  00FCF6  6EEA               	movwf	fsr0h,c
   358  00FCF8  6AEF               	clrf	indf0,c
   359                           ;rtimer.c: 88: Mn[Index].M=0;
   360  00FCFA  50D9               	movf	fsr2l,w,c
   361  00FCFC  0D02               	mullw	2
   362  00FCFE  0EF3               	movlw	low (_Mn+1)
   363  00FD00  24F3               	addwf	prodl,w,c
   364  00FD02  6EE9               	movwf	fsr0l,c
   365  00FD04  0E01               	movlw	high (_Mn+1)
   366  00FD06  20F4               	addwfc	prodh,w,c
   367  00FD08  6EEA               	movwf	fsr0h,c
   368  00FD0A  6AEF               	clrf	indf0,c
   369                           ;rtimer.c: 89: }
   370  00FD0C  0C00               	retlw	0
   371  00FD0E                     __end_of_StartRTM:
   372                           ;rtimer.c: 90: unsigned char RTM(const unsigned 
      +                          char Index)
   373                           ;rtimer.c: 91: {
   374  00FD0E                     _RTM:
   375  000000                     
   376                           ; _Index loaded to fsr2l
   377  00FD0E  6ED9               	movwf	fsr2l,c
   378                           ;rtimer.c: 92: if (Index>7-1) asm("RESET");
   379  00FD10  0E06               	movlw	6
   380  00FD12  64D9               	cpfsgt	fsr2l,c
   381  00FD14  D001               	goto	l21
   382  00FD16  00FF               	reset		;#
   383  00FD18                     l21:
   384                           ;rtimer.c: 93: return Mn[Index].M;
   385  00FD18  50D9               	movf	fsr2l,w,c
   386  00FD1A  0D02               	mullw	2
   387  00FD1C  0EF3               	movlw	low (_Mn+1)
   388  00FD1E  24F3               	addwf	prodl,w,c
   389  00FD20  6EE9               	movwf	fsr0l,c
   390  00FD22  0E01               	movlw	high (_Mn+1)
   391  00FD24  20F4               	addwfc	prodh,w,c
   392  00FD26  6EEA               	movwf	fsr0h,c
   393  00FD28  50EF               	movf	indf0,w,c
   394  00FD2A  0012               	return	
   395                           ;rtimer.c: 94: }
   396  00FD2C                     __end_of_RTM:
   397                           ;rtimer.c: 95: unsigned char RTMs(const unsigned
      +                           char Index)
   398                           ;rtimer.c: 96: {
   399  00FD2C                     _RTMs:
   400  000000                     
   401                           ; _Index loaded to fsr2l
   402  00FD2C  6ED9               	movwf	fsr2l,c
   403                           ;rtimer.c: 97: if (Index>7-1) asm("RESET");
   404  00FD2E  0E06               	movlw	6
   405  00FD30  64D9               	cpfsgt	fsr2l,c
   406  00FD32  D001               	goto	l23
   407  00FD34  00FF               	reset		;#
   408  00FD36                     l23:
   409                           ;rtimer.c: 98: return Mn[Index].S;
   410  00FD36  50D9               	movf	fsr2l,w,c
   411  00FD38  0D02               	mullw	2
   412  00FD3A  0EF2               	movlw	low _Mn
   413  00FD3C  24F3               	addwf	prodl,w,c
   414  00FD3E  6EE9               	movwf	fsr0l,c
   415  00FD40  0E01               	movlw	high _Mn
   416  00FD42  20F4               	addwfc	prodh,w,c
   417  00FD44  6EEA               	movwf	fsr0h,c
   418  00FD46  50EF               	movf	indf0,w,c
   419  00FD48  0012               	return	
   420                           ;rtimer.c: 99: }
   421  00FD4A                     __end_of_RTMs:
   422                           ;rtimer.c: 104: void StartRTG(const unsigned cha
      +                          r Index)
   423                           ;rtimer.c: 105: {
   424  00FD4A                     _StartRTG:
   425  000000                     
   426                           ; _Index loaded to fsr2l
   427  00FD4A  6ED9               	movwf	fsr2l,c
   428                           ;rtimer.c: 106: if (Index>4-1) asm("RESET");
   429  00FD4C  0E03               	movlw	3
   430  00FD4E  64D9               	cpfsgt	fsr2l,c
   431  00FD50  D001               	goto	l25
   432  00FD52  00FF               	reset		;#
   433  00FD54                     l25:
   434                           ;rtimer.c: 107: Gd[Index].M=0;
   435  00FD54  50D9               	movf	fsr2l,w,c
   436  00FD56  0D02               	mullw	2
   437  00FD58  0EEA               	movlw	low _Gd
   438  00FD5A  24F3               	addwf	prodl,w,c
   439  00FD5C  6EE9               	movwf	fsr0l,c
   440  00FD5E  0E01               	movlw	high _Gd
   441  00FD60  20F4               	addwfc	prodh,w,c
   442  00FD62  6EEA               	movwf	fsr0h,c
   443  00FD64  6AEF               	clrf	indf0,c
   444                           ;rtimer.c: 108: Gd[Index].G=0;
   445  00FD66  50D9               	movf	fsr2l,w,c
   446  00FD68  0D02               	mullw	2
   447  00FD6A  0EEB               	movlw	low (_Gd+1)
   448  00FD6C  24F3               	addwf	prodl,w,c
   449  00FD6E  6EE9               	movwf	fsr0l,c
   450  00FD70  0E01               	movlw	high (_Gd+1)
   451  00FD72  20F4               	addwfc	prodh,w,c
   452  00FD74  6EEA               	movwf	fsr0h,c
   453  00FD76  6AEF               	clrf	indf0,c
   454                           ;rtimer.c: 109: }
   455  00FD78  0C00               	retlw	0
   456  00FD7A                     __end_of_StartRTG:
   457                           ;rtimer.c: 110: unsigned char RTG(const unsigned
      +                           char Index)
   458                           ;rtimer.c: 111: {
   459  00FD7A                     _RTG:
   460  000000                     
   461                           ; _Index loaded to fsr2l
   462  00FD7A  6ED9               	movwf	fsr2l,c
   463                           ;rtimer.c: 112: if (Index>4-1) asm("RESET");
   464  00FD7C  0E03               	movlw	3
   465  00FD7E  64D9               	cpfsgt	fsr2l,c
   466  00FD80  D001               	goto	l27
   467  00FD82  00FF               	reset		;#
   468  00FD84                     l27:
   469                           ;rtimer.c: 113: return Gd[Index].G;
   470  00FD84  50D9               	movf	fsr2l,w,c
   471  00FD86  0D02               	mullw	2
   472  00FD88  0EEB               	movlw	low (_Gd+1)
   473  00FD8A  24F3               	addwf	prodl,w,c
   474  00FD8C  6EE9               	movwf	fsr0l,c
   475  00FD8E  0E01               	movlw	high (_Gd+1)
   476  00FD90  20F4               	addwfc	prodh,w,c
   477  00FD92  6EEA               	movwf	fsr0h,c
   478  00FD94  50EF               	movf	indf0,w,c
   479  00FD96  0012               	return	
   480                           ;rtimer.c: 114: }
   481  00FD98                     __end_of_RTG:
   482                           ;rtimer.c: 119: void IncRTimer(void)
   483                           ;rtimer.c: 120: {
   484  00FD98                     _IncRTimer:
   485  000000                     
   486                           ;rtimer.c: 122: unsigned char i;
   487  00FD98  6AD9               	clrf	fsr2l,c
   488  00FD9A                     l29:
   489                           ;rtimer.c: 129: if(cSk[i]<255) cSk[i]++;
   490  00FD9A  50D9               	movf	fsr2l,w,c
   491  00FD9C  0F0F               	addlw	_cSk
   492  00FD9E  6EE9               	movwf	fsr0l,c
   493  00FDA0  6AEA               	clrf	fsr0h,c
   494  00FDA2  50EF               	movf	indf0,w,c
   495  00FDA4  6E00               	movwf	btemp,c
   496  00FDA6  2800               	incf	btemp,w,c
   497  00FDA8  E005               	bz	l32
   498  00FDAA  50D9               	movf	fsr2l,w,c
   499  00FDAC  0F0F               	addlw	_cSk
   500  00FDAE  6EE9               	movwf	fsr0l,c
   501  00FDB0  6AEA               	clrf	fsr0h,c
   502  00FDB2  2AEF               	incf	indf0,f,c
   503  00FDB4                     l32:
   504  00FDB4  2AD9               	incf	fsr2l,f,c
   505  00FDB6  0E00               	movlw	0
   506  00FDB8  64D9               	cpfsgt	fsr2l,c
   507  00FDBA  D7EF               	goto	l29
   508                           ;rtimer.c: 135: for(i=0;i<17;i++)
   509  00FDBC  6AD9               	clrf	fsr2l,c
   510  00FDBE                     l33:
   511                           ;rtimer.c: 136: {
   512  00FDBE  50D9               	movf	fsr2l,w,c
   513  00FDC0  24D9               	addwf	fsr2l,w,c
   514  00FDC2  0F35               	addlw	_dSk
   515  00FDC4  6EE9               	movwf	fsr0l,c
   516  00FDC6  6AEA               	clrf	fsr0h,c
   517  00FDC8  2AEF               	incf	indf0,f,c
   518                           ;rtimer.c: 138: if(dSk[i].cS>9)
   519  00FDCA  50D9               	movf	fsr2l,w,c
   520  00FDCC  24D9               	addwf	fsr2l,w,c
   521  00FDCE  0F35               	addlw	_dSk
   522  00FDD0  6EE9               	movwf	fsr0l,c
   523  00FDD2  6AEA               	clrf	fsr0h,c
   524  00FDD4  50EF               	movf	indf0,w,c
   525  00FDD6  6E00               	movwf	btemp,c
   526  00FDD8  0E0A               	movlw	10
   527  00FDDA  5C00               	subwf	btemp,w,c
   528  00FDDC  E315               	bnc	l36
   529                           ;rtimer.c: 139: {
   530  00FDDE  50D9               	movf	fsr2l,w,c
   531  00FDE0  24D9               	addwf	fsr2l,w,c
   532  00FDE2  0F35               	addlw	_dSk
   533  00FDE4  6EE9               	movwf	fsr0l,c
   534  00FDE6  6AEA               	clrf	fsr0h,c
   535  00FDE8  6AEF               	clrf	indf0,c
   536                           ;rtimer.c: 141: if(dSk[i].dS<255) dSk[i].dS++;
   537  00FDEA  50D9               	movf	fsr2l,w,c
   538  00FDEC  24D9               	addwf	fsr2l,w,c
   539  00FDEE  0F36               	addlw	_dSk+1
   540  00FDF0  6EE9               	movwf	fsr0l,c
   541  00FDF2  6AEA               	clrf	fsr0h,c
   542  00FDF4  50EF               	movf	indf0,w,c
   543  00FDF6  6E00               	movwf	btemp,c
   544  00FDF8  2800               	incf	btemp,w,c
   545  00FDFA  E006               	bz	l36
   546  00FDFC  50D9               	movf	fsr2l,w,c
   547  00FDFE  24D9               	addwf	fsr2l,w,c
   548  00FE00  0F36               	addlw	_dSk+1
   549  00FE02  6EE9               	movwf	fsr0l,c
   550  00FE04  6AEA               	clrf	fsr0h,c
   551  00FE06  2AEF               	incf	indf0,f,c
   552  00FE08                     l36:
   553  00FE08  2AD9               	incf	fsr2l,f,c
   554  00FE0A  0E10               	movlw	16
   555  00FE0C  64D9               	cpfsgt	fsr2l,c
   556  00FE0E  D7D7               	goto	l33
   557                           ;rtimer.c: 142: }
   558  00FE10  2A10               	incf	_CommRT,f,c	;volatile
   559                           ;rtimer.c: 149: if(CommRT.cS>9)
   560  00FE12  0E09               	movlw	9
   561  00FE14  6410               	cpfsgt	_CommRT,c	;volatile
   562  00FE16  0C09               	retlw	9
   563                           ;rtimer.c: 150: {
   564  00FE18  6A10               	clrf	_CommRT,c	;volatile
   565                           ;rtimer.c: 152: CommRT.dS++;
   566  00FE1A  2A11               	incf	_CommRT+1,f,c	;volatile
   567                           ;rtimer.c: 157: for(i=0;i<17;i++)
   568  00FE1C  6AD9               	clrf	fsr2l,c
   569  00FE1E                     l39:
   570                           ;rtimer.c: 158: {
   571  00FE1E  50D9               	movf	fsr2l,w,c
   572  00FE20  24D9               	addwf	fsr2l,w,c
   573  00FE22  0F13               	addlw	_Sk
   574  00FE24  6EE9               	movwf	fsr0l,c
   575  00FE26  6AEA               	clrf	fsr0h,c
   576  00FE28  2AEF               	incf	indf0,f,c
   577                           ;rtimer.c: 160: if(Sk[i].dS>9)
   578  00FE2A  50D9               	movf	fsr2l,w,c
   579  00FE2C  24D9               	addwf	fsr2l,w,c
   580  00FE2E  0F13               	addlw	_Sk
   581  00FE30  6EE9               	movwf	fsr0l,c
   582  00FE32  6AEA               	clrf	fsr0h,c
   583  00FE34  50EF               	movf	indf0,w,c
   584  00FE36  6E00               	movwf	btemp,c
   585  00FE38  0E0A               	movlw	10
   586  00FE3A  5C00               	subwf	btemp,w,c
   587  00FE3C  E315               	bnc	l42
   588                           ;rtimer.c: 161: {
   589  00FE3E  50D9               	movf	fsr2l,w,c
   590  00FE40  24D9               	addwf	fsr2l,w,c
   591  00FE42  0F13               	addlw	_Sk
   592  00FE44  6EE9               	movwf	fsr0l,c
   593  00FE46  6AEA               	clrf	fsr0h,c
   594  00FE48  6AEF               	clrf	indf0,c
   595                           ;rtimer.c: 163: if(Sk[i].S<255) Sk[i].S++;
   596  00FE4A  50D9               	movf	fsr2l,w,c
   597  00FE4C  24D9               	addwf	fsr2l,w,c
   598  00FE4E  0F14               	addlw	_Sk+1
   599  00FE50  6EE9               	movwf	fsr0l,c
   600  00FE52  6AEA               	clrf	fsr0h,c
   601  00FE54  50EF               	movf	indf0,w,c
   602  00FE56  6E00               	movwf	btemp,c
   603  00FE58  2800               	incf	btemp,w,c
   604  00FE5A  E006               	bz	l42
   605  00FE5C  50D9               	movf	fsr2l,w,c
   606  00FE5E  24D9               	addwf	fsr2l,w,c
   607  00FE60  0F14               	addlw	_Sk+1
   608  00FE62  6EE9               	movwf	fsr0l,c
   609  00FE64  6AEA               	clrf	fsr0h,c
   610  00FE66  2AEF               	incf	indf0,f,c
   611  00FE68                     l42:
   612  00FE68  2AD9               	incf	fsr2l,f,c
   613  00FE6A  0E10               	movlw	16
   614  00FE6C  64D9               	cpfsgt	fsr2l,c
   615  00FE6E  D7D7               	goto	l39
   616                           ;rtimer.c: 164: }
   617  00FE70  0E09               	movlw	9
   618  00FE72  6411               	cpfsgt	_CommRT+1,c	;volatile
   619  00FE74  0C09               	retlw	9
   620                           ;rtimer.c: 169: {
   621  00FE76  6A11               	clrf	_CommRT+1,c	;volatile
   622                           ;rtimer.c: 171: CommRT.S++;
   623  00FE78  2A12               	incf	_CommRT+2,f,c	;volatile
   624                           ;rtimer.c: 176: for(i=0;i<7;i++)
   625  00FE7A  6AD9               	clrf	fsr2l,c
   626  00FE7C                     l45:
   627                           ;rtimer.c: 177: {
   628  00FE7C  50D9               	movf	fsr2l,w,c
   629  00FE7E  0D02               	mullw	2
   630  00FE80  0EF2               	movlw	low _Mn
   631  00FE82  24F3               	addwf	prodl,w,c
   632  00FE84  6EE9               	movwf	fsr0l,c
   633  00FE86  0E01               	movlw	high _Mn
   634  00FE88  20F4               	addwfc	prodh,w,c
   635  00FE8A  6EEA               	movwf	fsr0h,c
   636  00FE8C  2AEF               	incf	indf0,f,c
   637                           ;rtimer.c: 179: if(Mn[i].S>59)
   638  00FE8E  50D9               	movf	fsr2l,w,c
   639  00FE90  0D02               	mullw	2
   640  00FE92  0EF2               	movlw	low _Mn
   641  00FE94  24F3               	addwf	prodl,w,c
   642  00FE96  6EE9               	movwf	fsr0l,c
   643  00FE98  0E01               	movlw	high _Mn
   644  00FE9A  20F4               	addwfc	prodh,w,c
   645  00FE9C  6EEA               	movwf	fsr0h,c
   646  00FE9E  50EF               	movf	indf0,w,c
   647  00FEA0  6E00               	movwf	btemp,c
   648  00FEA2  0E3C               	movlw	60
   649  00FEA4  5C00               	subwf	btemp,w,c
   650  00FEA6  E31E               	bnc	l48
   651                           ;rtimer.c: 180: {
   652  00FEA8  50D9               	movf	fsr2l,w,c
   653  00FEAA  0D02               	mullw	2
   654  00FEAC  0EF2               	movlw	low _Mn
   655  00FEAE  24F3               	addwf	prodl,w,c
   656  00FEB0  6EE9               	movwf	fsr0l,c
   657  00FEB2  0E01               	movlw	high _Mn
   658  00FEB4  20F4               	addwfc	prodh,w,c
   659  00FEB6  6EEA               	movwf	fsr0h,c
   660  00FEB8  6AEF               	clrf	indf0,c
   661                           ;rtimer.c: 182: if(Mn[i].M<255) Mn[i].M++;
   662  00FEBA  50D9               	movf	fsr2l,w,c
   663  00FEBC  0D02               	mullw	2
   664  00FEBE  0EF3               	movlw	low (_Mn+1)
   665  00FEC0  24F3               	addwf	prodl,w,c
   666  00FEC2  6EE9               	movwf	fsr0l,c
   667  00FEC4  0E01               	movlw	high (_Mn+1)
   668  00FEC6  20F4               	addwfc	prodh,w,c
   669  00FEC8  6EEA               	movwf	fsr0h,c
   670  00FECA  50EF               	movf	indf0,w,c
   671  00FECC  6E00               	movwf	btemp,c
   672  00FECE  2800               	incf	btemp,w,c
   673  00FED0  E009               	bz	l48
   674  00FED2  50D9               	movf	fsr2l,w,c
   675  00FED4  0D02               	mullw	2
   676  00FED6  0EF3               	movlw	low (_Mn+1)
   677  00FED8  24F3               	addwf	prodl,w,c
   678  00FEDA  6EE9               	movwf	fsr0l,c
   679  00FEDC  0E01               	movlw	high (_Mn+1)
   680  00FEDE  20F4               	addwfc	prodh,w,c
   681  00FEE0  6EEA               	movwf	fsr0h,c
   682  00FEE2  2AEF               	incf	indf0,f,c
   683  00FEE4                     l48:
   684  00FEE4  2AD9               	incf	fsr2l,f,c
   685  00FEE6  0E06               	movlw	6
   686  00FEE8  64D9               	cpfsgt	fsr2l,c
   687  00FEEA  D7C8               	goto	l45
   688                           ;rtimer.c: 183: }
   689  00FEEC  0E3B               	movlw	59
   690  00FEEE  6412               	cpfsgt	_CommRT+2,c	;volatile
   691  00FEF0  0C3B               	retlw	59
   692                           ;rtimer.c: 188: {
   693  00FEF2  6A12               	clrf	_CommRT+2,c	;volatile
   694                           ;rtimer.c: 194: for(i=0;i<4;i++)
   695  00FEF4  6AD9               	clrf	fsr2l,c
   696  00FEF6                     l51:
   697                           ;rtimer.c: 195: {
   698  00FEF6  50D9               	movf	fsr2l,w,c
   699  00FEF8  0D02               	mullw	2
   700  00FEFA  0EEA               	movlw	low _Gd
   701  00FEFC  24F3               	addwf	prodl,w,c
   702  00FEFE  6EE9               	movwf	fsr0l,c
   703  00FF00  0E01               	movlw	high _Gd
   704  00FF02  20F4               	addwfc	prodh,w,c
   705  00FF04  6EEA               	movwf	fsr0h,c
   706  00FF06  2AEF               	incf	indf0,f,c
   707                           ;rtimer.c: 197: if(Gd[i].M>59)
   708  00FF08  50D9               	movf	fsr2l,w,c
   709  00FF0A  0D02               	mullw	2
   710  00FF0C  0EEA               	movlw	low _Gd
   711  00FF0E  24F3               	addwf	prodl,w,c
   712  00FF10  6EE9               	movwf	fsr0l,c
   713  00FF12  0E01               	movlw	high _Gd
   714  00FF14  20F4               	addwfc	prodh,w,c
   715  00FF16  6EEA               	movwf	fsr0h,c
   716  00FF18  50EF               	movf	indf0,w,c
   717  00FF1A  6E00               	movwf	btemp,c
   718  00FF1C  0E3C               	movlw	60
   719  00FF1E  5C00               	subwf	btemp,w,c
   720  00FF20  E31E               	bnc	l54
   721                           ;rtimer.c: 198: {
   722  00FF22  50D9               	movf	fsr2l,w,c
   723  00FF24  0D02               	mullw	2
   724  00FF26  0EEA               	movlw	low _Gd
   725  00FF28  24F3               	addwf	prodl,w,c
   726  00FF2A  6EE9               	movwf	fsr0l,c
   727  00FF2C  0E01               	movlw	high _Gd
   728  00FF2E  20F4               	addwfc	prodh,w,c
   729  00FF30  6EEA               	movwf	fsr0h,c
   730  00FF32  6AEF               	clrf	indf0,c
   731                           ;rtimer.c: 200: if(Gd[i].G<255) Gd[i].G++;
   732  00FF34  50D9               	movf	fsr2l,w,c
   733  00FF36  0D02               	mullw	2
   734  00FF38  0EEB               	movlw	low (_Gd+1)
   735  00FF3A  24F3               	addwf	prodl,w,c
   736  00FF3C  6EE9               	movwf	fsr0l,c
   737  00FF3E  0E01               	movlw	high (_Gd+1)
   738  00FF40  20F4               	addwfc	prodh,w,c
   739  00FF42  6EEA               	movwf	fsr0h,c
   740  00FF44  50EF               	movf	indf0,w,c
   741  00FF46  6E00               	movwf	btemp,c
   742  00FF48  2800               	incf	btemp,w,c
   743  00FF4A  E009               	bz	l54
   744  00FF4C  50D9               	movf	fsr2l,w,c
   745  00FF4E  0D02               	mullw	2
   746  00FF50  0EEB               	movlw	low (_Gd+1)
   747  00FF52  24F3               	addwf	prodl,w,c
   748  00FF54  6EE9               	movwf	fsr0l,c
   749  00FF56  0E01               	movlw	high (_Gd+1)
   750  00FF58  20F4               	addwfc	prodh,w,c
   751  00FF5A  6EEA               	movwf	fsr0h,c
   752  00FF5C  2AEF               	incf	indf0,f,c
   753  00FF5E                     l54:
   754  00FF5E  2AD9               	incf	fsr2l,f,c
   755  00FF60  0E03               	movlw	3
   756  00FF62  64D9               	cpfsgt	fsr2l,c
   757  00FF64  D7C8               	goto	l51
   758  00FF66  0C03               	retlw	3
   759                           ;rtimer.c: 201: }
   760  00FF68                     __end_of_IncRTimer:
   761  000000                     
   762  000000                     
   763  000000                     
   764  000000                     
   765  000000                     
   766  000000                     
   767  000000                     
   768  000000                     
   769  000000                     
   770  000000                     
   771  000000                     
   772  000000                     
   773  000000                     
   774  000000                     
   775  000000                     
   776  000000                     
   777  000000                     
   778  000000                     
   779  000000                     
   780  000000                     
   781  000000                     
   782  000000                     
   783  000000                     
   784  000000                     
   785  000000                     
   786  000000                     
   787  000000                     
   788  000000                     
   789  000000                     
   790  000000                     
   791  000000                     
   792  000000                     
   793  000000                     
   794  000000                     
   795  000000                     
   796  000000                     
   797  000000                     
   798  000000                     
   799  000000                     
   800  000000                     
   801  000000                     
   802  000000                     
   803  000000                     
   804  000000                     
   805  000000                     
   806  000000                     
   807  000000                     
   808  000000                     
   809  000000                     
   810  000000                     
   811  000000                     
   812  000000                     
   813  000000                     
   814  000000                     
   815  000000                     
   816  000000                     
   817  000000                     
   818  000000                     
   819  000000                     
   820  000000                     
   821  000000                     
   822  000000                     
   823  000000                     
   824  000000                     
   825  000000                     
   826  000000                     
   827  000000                     
   828  000000                     
   829  000000                     
   830  000000                     
   831  000000                     
   832  000000                     
   833  000000                     
   834  000000                     
   835  000000                     
   836  000000                     
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322                           
  1323                           	psect	rbss
  1324  00000F                     _cSk:
  1325  00000F                     	ds	1
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  00000F                     _CommRT:
  1334  00000F                     	ds	3
  1335  00000F                     _Sk:
  1336  00000F                     	ds	34
  1337  00000F                     _dSk:
  1338  00000F                     	ds	34
  1339                           
  1340                           	psect	bss
  1341  0001EA                     _Gd:
  1342  0001EA                     	ds	8
  1343  0001EA                     _Mn:
  1344  0001EA                     	ds	14
  1345                           
  1346                           	psect	temp
  1347  000000                     btemp:
  1348  000000                     	ds	1
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           indf0	equ	0xFEF
  1352                           fsr0h	equ	0xFEA
  1353                           fsr0l	equ	0xFE9
  1354                           fsr2l	equ	0xFD9
  1355                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:33:12 2020

               l11 FC70                 l21 FD18                 l13 FC94  
               l23 FD36                 l15 FCAC                 l32 FDB4  
               l33 FDBE                 l25 FD54                 l17 FCD0  
               l42 FE68                 l51 FEF6                 l27 FD84  
               l19 FCE8                 l36 FE08                 l45 FE7C  
               l29 FD9A                 l54 FF5E                 l39 FE1E  
               l48 FEE4                 _Gd 01EA                 _Mn 01F2  
               _Sk 0013           _StartRTG FD4A           _StartRTM FCDE  
         _StartRTS FCA2                _RTG FD7A                _RTM FD0E  
              _RTS FCC6                _cSk 000F                _dSk 0035  
        _StartRTcS FC3E          _StartRTdS FC66  __end_of_StartRTcS FC52  
__end_of_StartRTdS FC8A               _RTMs FD2C               _RTcS FC52  
             _RTdS FC8A               fsr0h 000FEA               indf0 000FEF  
             fsr0l 000FE9               fsr2l 000FD9               btemp 0000  
             prodh 000FF4               prodl 000FF3         used_btemp0 0001  
            status 000FD8            __Lparam 00A4   __end_of_StartRTG FD7A  
 __end_of_StartRTM FD0E   __end_of_StartRTS FCC6            __ramtop 1000  
     __end_of_RTMs FD4A       __end_of_RTcS FC66       __end_of_RTdS FCA2  
           _CommRT 0010        __end_of_RTG FD98        __end_of_RTM FD2C  
      __end_of_RTS FCDE          _IncRTimer FD98  __end_of_IncRTimer FF68  
