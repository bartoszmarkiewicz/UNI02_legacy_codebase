

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:33:15 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     	;#
    97                           
    98                           	psect	text
    99                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   146                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   167                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   168                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   169                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   170                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   171                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   172                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   173                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   174                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   175                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   176                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   177                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   178                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   179                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   180                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   181                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   182                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   183                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   184                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   185                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   186                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   187                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   188                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   189                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   190                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   191                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   192                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   193                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   194                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   195                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   196                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   197                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   198                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   199  000000                     	;#
   200                           ;	_i assigned to ?a_AddSTPoz+1
   201  000000                     _AddSTPoz$i	set	?a_AddSTPoz+1
   202                           ;	_j assigned to ?a_AddSTPoz+0
   203  000000                     _AddSTPoz$j	set	?a_AddSTPoz
   204                           ;	_hp assigned to ?a_RefBHist+3
   205  000000                     _RefBHist$hp	set	?a_RefBHist+3
   206                           ;	_e assigned to ?a_RefBHist+2
   207  000000                     _RefBHist$e	set	?a_RefBHist+2
   208                           ;	_s_hp assigned to ?a_RefBHist+1
   209  000000                     _RefBHist$s_hp	set	?a_RefBHist+1
   210                           ;	_res assigned to ?a_RefBHist+0
   211  000000                     _RefBHist$res	set	?a_RefBHist
   212                           ;	_i assigned to ?a_AddHPoz+2
   213  000000                     _AddHPoz$i	set	?a_AddHPoz+2
   214                           ;	_d assigned to ?a_AddHPoz+1
   215  000000                     _AddHPoz$d	set	?a_AddHPoz+1
   216                           ;main.h: 37: asm("\tglobal __config" "2"); asm("
      +                          \t__config" "2" " equ " "0xFFFF&0xFFFF&0xFFEF&0x
      +                          FFFF&0xEFFF");
   217  000000                     	;#
   218                           ;main.h: 38: asm("\tglobal __config" "3"); asm("
      +                          \t__config" "3" " equ " "0xFFFF&0x7FFF&0xFDFF&0x
      +                          FFFF");
   219  000000                     	;#
   220                           ;main.h: 39: asm("\tglobal __config" "4"); asm("
      +                          \t__config" "4" " equ " "0xFFFF&0xFFFF&0xFFFB&0x
      +                          FFFF");
   221  000000                     	;#
   222                           ;main.h: 42: asm("\tglobal __config" "5"); asm("
      +                          \t__config" "5" " equ " "0xFFF0");
   223  000000                     	;#
   224                           ;main.h: 43: asm("\tglobal __config" "6"); asm("
      +                          \t__config" "6" " equ " "0xFFF0&0xDFFF");
   225  000000                     	;#
   226                           ;main.h: 120: extern void GoldenEye(void);
   227                           ;main.h: 123: void InitGlobal(void);
   228                           ;main.h: 124: void ErrDTF(void);
   229                           ;main.h: 125: void ErrPTG(void);
   230                           ;main.h: 126: void ToReset(void);
   231                           ;main.h: 127: void DecWSW(void);
   232                           ;main.h: 128: void DecERR(void);
   233                           ;main.h: 129: void DecSTR(void);
   234                           ;main.h: 130: void DecRozruch(void);
   235                           ;main.h: 131: void SetRozruch(void);
   236                           ;main.h: 132: void DecWylacz(void);
   237                           ;main.h: 133: void SetWylacz(void);
   238                           ;main.h: 134: void RuszPlomien(void);
   239                           ;main.h: 135: void ReloadPlomien(void);
   240                           ;main.h: 136: void RuszCiag(void);
   241                           ;main.h: 137: void ReloadCiag(void);
   242                           ;main.h: 138: void Proba48(void);
   243                           ;main.h: 139: void Rusz48(void);
   244                           ;main.h: 140: void Proba48Z3(void);
   245                           ;main.h: 141: void Rusz48Z3(void);
   246                           ;main.h: 142: void Rozruch(void);
   247                           ;main.h: 143: void DecyzjaPLM(void);
   248                           ;main.h: 144: void DecyzjaPLM2(void);
   249                           ;main.h: 145: void VWybieg(void);
   250                           ;main.h: 146: void ZmienKCOKCW(void);
   251                           ;main.h: 147: void FunkcjaSerwisowa(void);
   252                           ;main.h: 148: void KolejkaPobudzen(void);
   253                           ;main.h: 149: void BlokadaL3(void);
   254                           ;main.h: 150: void Blokada15S(void);
   255                           ;main.h: 151: void ToObiegCW(void);
   256                           ;main.h: 152: void ToObiegCO(void);
   257                           ;main.h: 153: void Wylacz(void);
   258                           ;main.h: 154: void RuszPWR(void);
   259                           ;main.h: 155: void ClearData(void);
   260                           ;main.h: 156: void SetLoMod(void);
   261                           ;main.h: 157: void RestartFltPrt(void);
   262                           ;main.h: 158: void ClearDiode(void);
   263                           ;main.h: 159: void DecyzjaAntyLeg(void);
   264                           ;main.h: 160: void DetekcjaPrzeplywuWG(void);
   265                           ;main.h: 161: void OczekujNaPrzeplywWG(void);
   266                           ;main.h: 162: void RefLCDData(void);
   267                           ;main.h: 163: void GrzejON(void);
   268                           ;main.h: 164: void GrzejOFF(void);
   269                           ;main.h: 165: void KalibracjaWentylatora(void);
   270                           ;main.h: 166: void KontrolaWentylatora(void);
   271                           ;main.h: 167: void Odpowietrzenie(void);
   272                           ;main.h: 168: void DecyzjaOdp(void);
   273                           ;main.h: 170: extern void InitOsc(void);
   274                           ;main.h: 172: extern void InitAC(void);
   275                           ;main.h: 174: extern void InitWsw(void);
   276                           ;main.h: 175: extern bit GetPoz(const unsigned c
      +                          har nrkol,const unsigned char nrpoz);
   277                           ;main.h: 177: extern void InitPWM(void);
   278                           ;main.h: 178: extern void WritePWM(const unsigne
      +                          d char tpwm);
   279                           ;main.h: 179: extern void WritePWM2(const unsign
      +                          ed char tpwm);
   280                           ;main.h: 181: extern void ClsScr(void);
   281                           ;main.h: 182: extern void EndClsScr(void);
   282                           ;main.h: 183: extern void TestScr(void);
   283                           ;main.h: 184: extern void EndTestScr(void);
   284                           ;main.h: 185: extern void ClsScr(void);
   285                           ;main.h: 186: extern void EndClsScr(void);
   286                           ;main.h: 187: extern void PrintErr(const unsigne
      +                          d char kod, const unsigned char pls);
   287                           ;main.h: 188: extern void PrintErrCs(const unsig
      +                          ned char kod,const unsigned char cs, const unsig
      +                          ned char pls);
   288                           ;main.h: 189: extern void PrintErrTm(const unsig
      +                          ned char kod,const unsigned char tm, const unsig
      +                          ned char pls);
   289                           ;main.h: 190: extern void EndErr(void);
   290                           ;main.h: 191: extern void PrintPR(const unsigned
      +                           char lkod,unsigned char nkod,unsigned char tryb
      +                          );
   291                           ;main.h: 192: extern void EndPR(void);
   292                           ;main.h: 193: extern void PrintNstCO(const unsig
      +                          ned char nst);
   293                           ;main.h: 194: extern void PrintNstCW(const unsig
      +                          ned char nst);
   294                           ;main.h: 195: extern void PrintNstKt(const unsig
      +                          ned char nst);
   295                           ;main.h: 196: extern void EndNst(void);
   296                           ;main.h: 197: extern void PrintL3(void);
   297                           ;main.h: 198: extern void EndL3(void);
   298                           ;main.h: 199: extern void PrintTdzCO(const unsig
      +                          ned char tm);
   299                           ;main.h: 200: extern void EndTdzCO(void);
   300                           ;main.h: 201: extern void PrintTdzCW(const unsig
      +                          ned char tm);
   301                           ;main.h: 202: extern void EndTdzCW(void);
   302                           ;main.h: 203: extern void PrintOFF(void);
   303                           ;main.h: 204: extern void EndOFF(void);
   304                           ;main.h: 205: extern void PrintCS(const unsigned
      +                           char cs);
   305                           ;main.h: 206: extern void EndCS(void);
   306                           ;main.h: 207: extern void PrintCW(const unsigned
      +                           char tm);
   307                           ;main.h: 208: extern void EndCW(void);
   308                           ;main.h: 209: extern void PrintCO(const unsigned
      +                           char tm);
   309                           ;main.h: 210: extern void PrintHex(const unsigne
      +                          d char tm);
   310                           ;main.h: 211: extern void SetDiode(unsigned char
      +                           nrd, unsigned char stn);
   311                           ;main.h: 212: extern void RefreshNst(const unsig
      +                          ned char nst);
   312                           ;main.h: 214: extern bit GetBit(const unsigned c
      +                          har data,const unsigned char nbit);
   313                           ;main.h: 215: extern void BitSet(unsigned char *
      +                          data, const unsigned char nbit,const unsigned ch
      +                          ar bt);
   314                           ;main.h: 216: extern void BitSet2(unsigned char 
      +                          *data, const unsigned char nbit,const unsigned c
      +                          har bt);
   315                           ;main.h: 218: extern void StartRTG(const unsigne
      +                          d char Index);
   316                           ;main.h: 219: extern unsigned char RTG(const uns
      +                          igned char Index);
   317                           ;main.h: 220: extern void StartRTS(const unsigne
      +                          d char Index);
   318                           ;main.h: 221: extern unsigned char RTS(const uns
      +                          igned char Index);
   319                           ;main.h: 222: extern void StartRTdS(const unsign
      +                          ed char Index);
   320                           ;main.h: 223: extern unsigned char RTdS(const un
      +                          signed char Index);
   321                           ;main.h: 225: extern void InitTimer1(void);
   322                           ;main.h: 227: extern void InitTimer3(void);
   323                           ;main.h: 229: extern void InitPort(void);
   324                           ;main.h: 230: extern bit RdPrt(const unsigned ch
      +                          ar Index);
   325                           ;main.h: 231: extern void SetPrt(const unsigned 
      +                          char Index, const unsigned char nw);
   326  00F8E0                     _AddHPoz:
   327  000000                     
   328                           ;	_HP assigned to ?a_AddHPoz+0
   329  000000                     _AddHPoz$HP	set	?a_AddHPoz
   330                           ;_HP stored from wreg
   331  00F8E0  0100               	movlb	__Lparam shr (0+8)
   332  00F8E2  6FAE               	movwf	?a_AddHPoz^(__Lparam& (0+65280)),b
   333                           ;history.c: 21: volatile unsigned char i,d;
   334  00F8E4  0EE8               	movlw	232
   335  00F8E6  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   336  00F8E8  0E01               	movlw	1
   337  00F8EA  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   338  00F8EC  EC2F  F007         	call	_eeprom_read	;wreg free
   339  00F8F0  CFE8 FF42          	movff	wreg,_Hind	;volatile
   340                           ;history.c: 24: Hflg=eeprom_read(0x01ED);
   341  00F8F4  0100               	movlb	__Lparam shr (0+8)
   342  00F8F6  0EED               	movlw	237
   343  00F8F8  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   344  00F8FA  0E01               	movlw	1
   345  00F8FC  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   346  00F8FE  EC2F  F007         	call	_eeprom_read	;wreg free
   347  00F902  CFE8 FF41          	movff	wreg,_Hflg	;volatile
   348                           ;history.c: 26: if(Hind>(16-1))
   349  00F906  0E0F               	movlw	15
   350  00F908  010F               	movlb	_Hind shr (0+8)	;volatile
   351  00F90A  6542               	cpfsgt	_Hind& (0+255),b	;volatile
   352  00F90C  D029               	goto	l15
   353                           ;history.c: 27: {
   354  00F90E  0100               	movlb	__Lparam shr (0+8)
   355  00F910  6BB0               	clrf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),b	;vo
      +                          latile
   356  00F912  D017               	goto	L3
   357  00F914                     l16:
   358                           ;history.c: 29: {
   359  00F914  0100               	movlb	__Lparam shr (0+8)
   360  00F916  0EEF               	movlw	239
   361  00F918  25B0               	addwf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   362  00F91A  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   363  00F91C  6BB8               	clrf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   364  00F91E  0E01               	movlw	1
   365  00F920  23B8               	addwfc	(?_eeprom_read+1)^(__Lparam& (0+65280)),
      +                          f,b
   366  00F922  EC2F  F007         	call	_eeprom_read	;wreg free
   367  00F926  0100               	movlb	__Lparam shr (0+8)
   368  00F928  6FAF               	movwf	(?a_AddHPoz+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   369                           ;history.c: 31: if_eeprom_write(0x01EE+i,d);
   370  00F92A  0EEE               	movlw	238
   371  00F92C  25B0               	addwf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   372  00F92E  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   373  00F930  6BB5               	clrf	(?_if_eeprom_write+1)^(__Lparam& (0+65280)
      +                          ),b
   374  00F932  0E01               	movlw	1
   375  00F934  23B5               	addwfc	(?_if_eeprom_write+1)^(__Lparam& (0+6528
      +                          0)),f,b
   376  00F936  51AF               	movf	(?a_AddHPoz+1)^(__Lparam& (0+65280)),w	;vo
      +                          latile
   377  00F938  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   378  00F93A  EC85  F043         	call	_if_eeprom_write	;wreg free
   379  00F93E  0100               	movlb	__Lparam shr (0+8)
   380  00F940  2BB0               	incf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),f,b	;
      +                          volatile
   381  00F942                     L3:
   382  00F942  0E0E               	movlw	14
   383  00F944  65B0               	cpfsgt	(?a_AddHPoz+2)^(__Lparam& (0+65280)),b	;
      +                          volatile
   384  00F946  D7E6               	goto	l16
   385                           ;history.c: 32: }
   386  00F948  0100               	movlb	__Lparam shr (0+8)
   387  00F94A  0EEE               	movlw	238
   388  00F94C  25B0               	addwf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   389  00F94E  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   390  00F950  6BB5               	clrf	(?_if_eeprom_write+1)^(__Lparam& (0+65280)
      +                          ),b
   391  00F952  0E01               	movlw	1
   392  00F954  23B5               	addwfc	(?_if_eeprom_write+1)^(__Lparam& (0+6528
      +                          0)),f,b
   393  00F956  51AE               	movf	?a_AddHPoz^(__Lparam& (0+65280)),w
   394  00F958  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   395  00F95A  EC85  F043         	call	_if_eeprom_write	;wreg free
   396                           ;history.c: 34: }
   397  00F95E  D00D               	goto	l19
   398  00F960                     l15:
   399                           ;history.c: 35: else
   400  00F960  CF42  F000         	movff	_Hind,btemp	;volatile
   401  00F964  0EEE               	movlw	238
   402  00F966  2400               	addwf	btemp,w,c
   403  00F968  0100               	movlb	__Lparam shr (0+8)
   404  00F96A  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   405  00F96C  6BB5               	clrf	(?_if_eeprom_write+1)^(__Lparam& (0+65280)
      +                          ),b
   406  00F96E  0E01               	movlw	1
   407  00F970  23B5               	addwfc	(?_if_eeprom_write+1)^(__Lparam& (0+6528
      +                          0)),f,b
   408  00F972  51AE               	movf	?a_AddHPoz^(__Lparam& (0+65280)),w
   409  00F974  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   410  00F976  EC85  F043         	call	_if_eeprom_write	;wreg free
   411  00F97A                     l19:
   412                           ;history.c: 38: }
   413  00F97A  010F               	movlb	_Hind shr (0+8)	;volatile
   414  00F97C  2942               	incf	_Hind& (0+255),w,b	;volatile
   415  00F97E  CFE8 FF40          	movff	wreg,_HNPz	;volatile
   416                           ;history.c: 41: Hflg=Hflg+1;
   417  00F982  010F               	movlb	_Hflg shr (0+8)	;volatile
   418  00F984  2B41               	incf	_Hflg& (0+255),f,b	;volatile
   419                           ;history.c: 42: if(HNPz>16) HNPz=16;
   420  00F986  0E10               	movlw	16
   421  00F988  010F               	movlb	_HNPz shr (0+8)	;volatile
   422  00F98A  6540               	cpfsgt	_HNPz& (0+255),b	;volatile
   423  00F98C  D002               	goto	l20
   424  00F98E  CFE8 FF40          	movff	wreg,_HNPz	;volatile
   425  00F992                     l20:
   426                           ;history.c: 43: if(Hflg>16) Hflg=16;
   427  00F992  0E10               	movlw	16
   428  00F994  010F               	movlb	_Hflg shr (0+8)	;volatile
   429  00F996  6541               	cpfsgt	_Hflg& (0+255),b	;volatile
   430  00F998  D002               	goto	l21
   431  00F99A  CFE8 FF41          	movff	wreg,_Hflg	;volatile
   432  00F99E                     l21:
   433                           ;history.c: 44: if(Hind<16) Hind++;
   434  00F99E  0E10               	movlw	16
   435  00F9A0  010F               	movlb	_Hind shr (0+8)	;volatile
   436  00F9A2  6142               	cpfslt	_Hind& (0+255),b	;volatile
   437  00F9A4  D001               	goto	l22
   438  00F9A6  2B42               	incf	_Hind& (0+255),f,b	;volatile
   439  00F9A8                     l22:
   440                           ;history.c: 45: if_eeprom_write(0x01E8,Hind);
   441  00F9A8  0100               	movlb	__Lparam shr (0+8)
   442  00F9AA  0EE8               	movlw	232
   443  00F9AC  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   444  00F9AE  0E01               	movlw	1
   445  00F9B0  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   446  00F9B2  CF42  F0B6         	movff	_Hind,?_if_eeprom_write+2	;volatile
   447  00F9B6  EC85  F043         	call	_if_eeprom_write	;wreg free
   448                           ;history.c: 46: if_eeprom_write(0x01EA,HNPz);
   449  00F9BA  0100               	movlb	__Lparam shr (0+8)
   450  00F9BC  0EEA               	movlw	234
   451  00F9BE  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   452  00F9C0  0E01               	movlw	1
   453  00F9C2  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   454  00F9C4  CF40  F0B6         	movff	_HNPz,?_if_eeprom_write+2	;volatile
   455  00F9C8  EC85  F043         	call	_if_eeprom_write	;wreg free
   456  00F9CC  D12F               	goto	L4
   457                           ;history.c: 47: if_eeprom_write(0x01ED,Hflg);
   458                           ;history.c: 48: }
   459  00F9CE                     __end_of_AddHPoz:
   460                           ;history.c: 51: unsigned char RefBHist(const uns
      +                          igned char res)
   461                           ;history.c: 52: {
   462  00F9CE                     _RefBHist:
   463  000000                     
   464                           ;_res stored from wreg
   465  00F9CE  0100               	movlb	__Lparam shr (0+8)
   466  00F9D0  6FA9               	movwf	?a_RefBHist^(__Lparam& (0+65280)),b
   467                           ;history.c: 53: volatile HIST_POZ s_hp;
   468  00F9D2  0EE9               	movlw	233
   469  00F9D4  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   470  00F9D6  0E01               	movlw	1
   471  00F9D8  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   472  00F9DA  EC2F  F007         	call	_eeprom_read	;wreg free
   473  00F9DE  0100               	movlb	__Lparam shr (0+8)
   474  00F9E0  6FAA               	movwf	(?a_RefBHist+1)^(__Lparam& (0+65280)),b	;
      +                          volatile
   475                           ;history.c: 58: if(res)
   476  00F9E2  51A9               	movf	?a_RefBHist^(__Lparam& (0+65280)),w
   477  00F9E4  E037               	bz	l24
   478                           ;history.c: 59: {
   479  00F9E6  6BAC               	clrf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   480                           ;history.c: 61: if(!eeprom_read(0x01EA))
   481  00F9E8  0EEA               	movlw	234
   482  00F9EA  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   483  00F9EC  0E01               	movlw	1
   484  00F9EE  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   485  00F9F0  EC2F  F007         	call	_eeprom_read	;wreg free
   486  00F9F4  0A00               	xorlw	0
   487  00F9F6  E12D               	bnz	l26
   488                           ;history.c: 62: {
   489  00F9F8  0100               	movlb	__Lparam shr (0+8)
   490  00F9FA  6BAA               	clrf	(?a_RefBHist+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   491                           ;history.c: 64: if_eeprom_write(0x01E9,0);
   492  00F9FC  0EE9               	movlw	233
   493  00F9FE  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   494  00FA00  0E01               	movlw	1
   495  00FA02  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   496  00FA04  6BB6               	clrf	(?_if_eeprom_write+2)^(__Lparam& (0+65280)
      +                          ),b
   497  00FA06  EC85  F043         	call	_if_eeprom_write	;wreg free
   498                           ;history.c: 66: HRef=0;
   499  00FA0A  EE03  F0E1         	lfsr	0,_HRef	;volatile
   500  00FA0E  6AEE               	clrf	postinc0,c
   501  00FA10  6AEE               	clrf	postinc0,c
   502                           ;history.c: 68: e=(unsigned char)(HRef&0x00ff);
   503  00FA12  C3E1  F0AB         	movff	_HRef,?a_RefBHist+2	;volatile
   504                           ;history.c: 69: if_eeprom_write(0x01EB,e);
   505  00FA16  0100               	movlb	__Lparam shr (0+8)
   506  00FA18  0EEB               	movlw	235
   507  00FA1A  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   508  00FA1C  0E01               	movlw	1
   509  00FA1E  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   510  00FA20  51AB               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   511  00FA22  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   512  00FA24  EC85  F043         	call	_if_eeprom_write	;wreg free
   513                           ;history.c: 70: e=(unsigned char)((HRef&0xff00)>
      +                          >8);
   514  00FA28  C3E1  F000         	movff	_HRef,btemp	;volatile
   515  00FA2C  C3E2  F001         	movff	_HRef+1,btemp+1	;volatile
   516  00FA30  6A02               	clrf	btemp+2,c
   517  00FA32  5001               	movf	btemp+1,w,c
   518  00FA34  6E03               	movwf	btemp+3,c
   519  00FA36  C003  F002         	movff	btemp+3,btemp+2
   520  00FA3A  6A03               	clrf	btemp+3,c
   521  00FA3C  5002               	movf	btemp+2,w,c
   522  00FA3E  0100               	movlb	__Lparam shr (0+8)
   523  00FA40  6FAB               	movwf	(?a_RefBHist+2)^(__Lparam& (0+65280)),b	;
      +                          volatile
   524                           ;history.c: 71: if_eeprom_write(0x01EC,e);
   525  00FA42  0EEC               	movlw	236
   526  00FA44  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   527  00FA46  0E01               	movlw	1
   528  00FA48  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   529  00FA4A  51AB               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   530  00FA4C  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   531  00FA4E  EC85  F043         	call	_if_eeprom_write	;wreg free
   532                           ;history.c: 72: }
   533  00FA52                     l26:
   534                           ;history.c: 73: else
   535                           ;history.c: 76: }
   536  00FA52  0C00               	retlw	0
   537  00FA54                     l24:
   538                           ;history.c: 78: }
   539  00FA54  EE03  F02C         	lfsr	0,_M+38
   540  00FA58  50EF               	movf	indf0,w,c
   541  00FA5A  E001               	bz	l27
   542  00FA5C  0C00               	retlw	0
   543  00FA5E                     l27:
   544                           ;history.c: 82: hp.EST.rST=0;
   545  00FA5E  0100               	movlb	__Lparam shr (0+8)
   546  00FA60  0E3F               	movlw	-193
   547  00FA62  17AC               	andwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),f,b
      +                          	;volatile
   548                           ;history.c: 83: hp.EST.wST=0;
   549  00FA64  0EC0               	movlw	-64
   550  00FA66  17AC               	andwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),f,b
      +                          	;volatile
   551                           ;history.c: 85: if(GetBit2(RSDT1.outSTAT1,3))
   552  00FA68  0E03               	movlw	3
   553  00FA6A  6FAE               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   554  00FA6C  C345  FFE8         	movff	_RSDT1+24,wreg
   555  00FA70  ECB9  F003         	call	_GetBit2
   556  00FA74  E315               	bnc	l28
   557                           ;history.c: 86: {
   558  00FA76  0100               	movlb	__Lparam shr (0+8)
   559  00FA78  6BAE               	clrf	?_GetBit2^(__Lparam& (0+65280)),b
   560  00FA7A  C344  FFE8         	movff	_RSDT1+23,wreg
   561  00FA7E  ECB9  F003         	call	_GetBit2
   562  00FA82  E305               	bnc	l29
   563                           ;history.c: 88: {
   564  00FA84  0100               	movlb	__Lparam shr (0+8)
   565  00FA86  51AC               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   566  00FA88  0B3F               	andlw	-193
   567  00FA8A  0980               	iorlw	128
   568  00FA8C  D004               	goto	L1
   569                           ;history.c: 90: }
   570  00FA8E                     l29:
   571                           ;history.c: 91: else
   572  00FA8E  0100               	movlb	__Lparam shr (0+8)
   573  00FA90  51AC               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   574  00FA92  0B3F               	andlw	-193
   575  00FA94  09C0               	iorlw	192
   576  00FA96                     L1:
   577  00FA96  6FAC               	movwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;
      +                          volatile
   578                           ;history.c: 94: }
   579  00FA98  C33F  F000         	movff	_RSDT1+18,btemp
   580  00FA9C  0100               	movlb	__Lparam shr (0+8)
   581  00FA9E  D00F               	goto	L2
   582                           ;history.c: 96: }
   583  00FAA0                     l28:
   584                           ;history.c: 97: else
   585  00FAA0  0E02               	movlw	2
   586  00FAA2  0100               	movlb	__Lparam shr (0+8)
   587  00FAA4  6FAE               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   588  00FAA6  C345  FFE8         	movff	_RSDT1+24,wreg
   589  00FAAA  ECB9  F003         	call	_GetBit2
   590  00FAAE  E30D               	bnc	l32
   591                           ;history.c: 99: {
   592  00FAB0  0100               	movlb	__Lparam shr (0+8)
   593  00FAB2  51AC               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   594  00FAB4  0B3F               	andlw	-193
   595  00FAB6  0940               	iorlw	64
   596  00FAB8  6FAC               	movwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;
      +                          volatile
   597                           ;history.c: 101: hp.EST.wST=RSDT1.outAWR;
   598  00FABA  C340  F000         	movff	_RSDT1+19,btemp
   599  00FABE                     L2:
   600  00FABE  51AC               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   601  00FAC0  1800               	xorwf	btemp,w,c
   602  00FAC2  0BC0               	andlw	-64
   603  00FAC4  1800               	xorwf	btemp,w,c
   604  00FAC6  6FAC               	movwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;
      +                          volatile
   605                           ;history.c: 102: }
   606  00FAC8  D009               	goto	l31
   607  00FACA                     l32:
   608                           ;history.c: 103: else
   609  00FACA  0100               	movlb	__Lparam shr (0+8)
   610  00FACC  6BAA               	clrf	(?a_RefBHist+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   611                           ;history.c: 106: if_eeprom_write(0x01E9,0);
   612  00FACE  0EE9               	movlw	233
   613  00FAD0  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   614  00FAD2  0E01               	movlw	1
   615  00FAD4  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   616  00FAD6  6BB6               	clrf	(?_if_eeprom_write+2)^(__Lparam& (0+65280)
      +                          ),b
   617  00FAD8  EC85  F043         	call	_if_eeprom_write	;wreg free
   618  00FADC                     l31:
   619                           ;history.c: 107: }
   620  00FADC  0100               	movlb	__Lparam shr (0+8)
   621  00FADE  51AC               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   622  00FAE0  E05D               	bz	l34
   623  00FAE2  51AC               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   624  00FAE4  19AA               	xorwf	(?a_RefBHist+1)^(__Lparam& (0+65280)),w	;
      +                          volatile
   625  00FAE6  E05A               	bz	l34
   626                           ;history.c: 110: {
   627  00FAE8  C0AC  F0AA         	movff	?a_RefBHist+3,?a_RefBHist+1	;volatile
   628                           ;history.c: 112: if_eeprom_write(0x01E9,s_hp.war
      +                          );
   629  00FAEC  0EE9               	movlw	233
   630  00FAEE  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   631  00FAF0  0E01               	movlw	1
   632  00FAF2  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   633  00FAF4  51AA               	movf	(?a_RefBHist+1)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   634  00FAF6  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   635  00FAF8  EC85  F043         	call	_if_eeprom_write	;wreg free
   636                           ;history.c: 113: AddHPoz(hp);
   637  00FAFC  0100               	movlb	__Lparam shr (0+8)
   638  00FAFE  51AC               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   639  00FB00  DEEF               	call	_AddHPoz
   640                           ;history.c: 114: HRef=eeprom_read(0x01EB)+(eepro
      +                          m_read(0x01EC)*256);
   641  00FB02  0100               	movlb	__Lparam shr (0+8)
   642  00FB04  0EEB               	movlw	235
   643  00FB06  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   644  00FB08  0E01               	movlw	1
   645  00FB0A  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   646  00FB0C  EC2F  F007         	call	_eeprom_read	;wreg free
   647  00FB10  0100               	movlb	__Lparam shr (0+8)
   648  00FB12  6FAD               	movwf	(?a_RefBHist+4)^(?a_RefBHist& (0+65280)),
      +                          b
   649  00FB14  0EEC               	movlw	236
   650  00FB16  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   651  00FB18  0E01               	movlw	1
   652  00FB1A  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   653  00FB1C  EC2F  F007         	call	_eeprom_read	;wreg free
   654  00FB20  6E00               	movwf	btemp,c
   655  00FB22  C000  F002         	movff	btemp,btemp+2
   656  00FB26  6A03               	clrf	btemp+3,c
   657  00FB28  C002  F3E2         	movff	btemp+2,_HRef+1	;volatile
   658  00FB2C  C0AD  F3E1         	movff	?a_RefBHist+4,_HRef
   659                           ;history.c: 115: if(HRef<0xFFFF) HRef++;
   660  00FB30  0103               	movlb	_HRef shr (0+8)	;volatile
   661  00FB32  1DE2               	comf	(_HRef+1)& (0+255),w,b	;volatile
   662  00FB34  0EFF               	movlw	255
   663  00FB36  B4D8               	btfsc	status,2,c
   664  00FB38  19E1               	xorwf	_HRef& (0+255),w,b	;volatile
   665  00FB3A  E003               	bz	l35
   666  00FB3C  4BE1               	infsnz	_HRef& (0+255),f,b	;volatile
   667  00FB3E  2BE2               	incf	(_HRef+1)& (0+255),f,b	;volatile
   668  00FB40  D00C               	goto	l36
   669  00FB42                     l35:
   670                           ;history.c: 116: else HRef=eeprom_read(0x01EA);
   671  00FB42  0100               	movlb	__Lparam shr (0+8)
   672  00FB44  0EEA               	movlw	234
   673  00FB46  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   674  00FB48  0E01               	movlw	1
   675  00FB4A  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   676  00FB4C  EC2F  F007         	call	_eeprom_read	;wreg free
   677  00FB50  6E00               	movwf	btemp,c
   678  00FB52  0103               	movlb	_HRef shr (0+8)	;volatile
   679  00FB54  C000  F3E1         	movff	btemp,_HRef	;volatile
   680  00FB58  6BE2               	clrf	(_HRef+1)& (0+255),b	;volatile
   681  00FB5A                     l36:
   682                           ;history.c: 118: e=(unsigned char)(HRef&0x00ff);
   683  00FB5A  C3E1  F0AB         	movff	_HRef,?a_RefBHist+2	;volatile
   684                           ;history.c: 119: if_eeprom_write(0x01EB,e);
   685  00FB5E  0100               	movlb	__Lparam shr (0+8)
   686  00FB60  0EEB               	movlw	235
   687  00FB62  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   688  00FB64  0E01               	movlw	1
   689  00FB66  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   690  00FB68  51AB               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   691  00FB6A  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   692  00FB6C  EC85  F043         	call	_if_eeprom_write	;wreg free
   693                           ;history.c: 120: e=(unsigned char)((HRef&0xff00)
      +                          >>8);
   694  00FB70  C3E1  F000         	movff	_HRef,btemp	;volatile
   695  00FB74  C3E2  F001         	movff	_HRef+1,btemp+1	;volatile
   696  00FB78  6A02               	clrf	btemp+2,c
   697  00FB7A  5001               	movf	btemp+1,w,c
   698  00FB7C  6E03               	movwf	btemp+3,c
   699  00FB7E  C003  F002         	movff	btemp+3,btemp+2
   700  00FB82  6A03               	clrf	btemp+3,c
   701  00FB84  5002               	movf	btemp+2,w,c
   702  00FB86  0100               	movlb	__Lparam shr (0+8)
   703  00FB88  6FAB               	movwf	(?a_RefBHist+2)^(__Lparam& (0+65280)),b	;
      +                          volatile
   704                           ;history.c: 121: if_eeprom_write(0x01EC,e);
   705  00FB8A  0EEC               	movlw	236
   706  00FB8C  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   707  00FB8E  0E01               	movlw	1
   708  00FB90  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   709  00FB92  51AB               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   710  00FB94  6FB6               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   711  00FB96  EC85  F043         	call	_if_eeprom_write	;wreg free
   712                           ;history.c: 122: }
   713  00FB9A  0C01               	retlw	1
   714  00FB9C                     l34:
   715                           ;history.c: 123: else return 0;
   716  00FB9C  0C00               	retlw	0
   717                           ;history.c: 124: return 1;
   718                           ;history.c: 125: }
   719  00FB9E                     __end_of_RefBHist:
   720                           ;history.c: 129: void AddSTPoz(void)
   721                           ;history.c: 130: {
   722  00FB9E                     _AddSTPoz:
   723  000000                     
   724                           ;history.c: 131: volatile unsigned char i,j;
   725  00FB9E  0100               	movlb	__Lparam shr (0+8)
   726  00FBA0  0E02               	movlw	2
   727  00FBA2  6FB7               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   728  00FBA4  6FB8               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   729  00FBA6  EC2F  F007         	call	_eeprom_read	;wreg free
   730  00FBAA  CFE8 FF43          	movff	wreg,_STPz	;volatile
   731                           ;history.c: 134: if(STPz)
   732  00FBAE  010F               	movlb	_STPz shr (0+8)	;volatile
   733  00FBB0  5343               	movf	_STPz& (0+255),f,b	;volatile
   734  00FBB2  E016               	bz	l39
   735                           ;history.c: 135: {
   736  00FBB4  0100               	movlb	__Lparam shr (0+8)
   737  00FBB6  6BAA               	clrf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   738  00FBB8                     l43:
   739  00FBB8  0100               	movlb	__Lparam shr (0+8)
   740  00FBBA  CF43  FFE8         	movff	_STPz,wreg	;volatile
   741  00FBBE  5DAA               	subwf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),w	;
      +                          volatile
   742  00FBC0  E20F               	bc	l39
   743                           ;history.c: 137: {
   744  00FBC2  CF43  F000         	movff	_STPz,btemp	;volatile
   745  00FBC6  0EFF               	movlw	-1
   746  00FBC8  2600               	addwf	btemp,f,c
   747  00FBCA  51AA               	movf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   748  00FBCC  5C00               	subwf	btemp,w,c
   749  00FBCE  6FA9               	movwf	?a_AddSTPoz^(__Lparam& (0+65280)),b	;vola
      +                          tile
   750                           ;history.c: 139: CopyEESTAT(j,j+1);
   751  00FBD0  29A9               	incf	?a_AddSTPoz^(__Lparam& (0+65280)),w	;volat
      +                          ile
   752  00FBD2  6FAB               	movwf	?_CopyEESTAT^(__Lparam& (0+65280)),b
   753  00FBD4  51A9               	movf	?a_AddSTPoz^(__Lparam& (0+65280)),w	;volat
      +                          ile
   754  00FBD6  EC20  F045         	call	_CopyEESTAT
   755  00FBDA  0100               	movlb	__Lparam shr (0+8)
   756  00FBDC  2BAA               	incf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),f,b	
      +                          ;volatile
   757  00FBDE  D7EC               	goto	l43
   758  00FBE0                     l39:
   759                           ;history.c: 140: }
   760  00FBE0  0E00               	movlw	0
   761  00FBE2  EC39  F044         	call	_WriteEESTAT
   762                           ;history.c: 143: if(STPz<4) STPz++;
   763  00FBE6  0E04               	movlw	4
   764  00FBE8  010F               	movlb	_STPz shr (0+8)	;volatile
   765  00FBEA  6143               	cpfslt	_STPz& (0+255),b	;volatile
   766  00FBEC  D001               	goto	l44
   767  00FBEE  2B43               	incf	_STPz& (0+255),f,b	;volatile
   768  00FBF0                     l44:
   769                           ;history.c: 144: if_eeprom_write(0x0202,STPz);
   770  00FBF0  0100               	movlb	__Lparam shr (0+8)
   771  00FBF2  0E02               	movlw	2
   772  00FBF4  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   773  00FBF6  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   774  00FBF8  CF43  F0B6         	movff	_STPz,?_if_eeprom_write+2	;volatile
   775  00FBFC  EF85  F043         	goto	_if_eeprom_write	;wreg free
   776                           ;history.c: 146: }
   777  00FC00                     __end_of_AddSTPoz:
   778                           ;history.c: 150: void ToWriteESTAT(void)
   779                           ;history.c: 151: {
   780  00FC00                     _ToWriteESTAT:
   781  000000                     
   782                           ;history.c: 152: WrST=1;
   783  00FC00  0E01               	movlw	1
   784  00FC02  CFE8 FF44          	movff	wreg,_WrST	;volatile
   785                           ;history.c: 153: }
   786  00FC06  0C01               	retlw	1
   787  00FC08                     __end_of_ToWriteESTAT:
   788                           ;history.c: 156: void RefBStat(const unsigned ch
      +                          ar res)
   789                           ;history.c: 157: {
   790  00FC08                     _RefBStat:
   791  000000                     
   792                           ;history.c: 158: if(res)
   793  00FC08  52E8               	movf	wreg,f,c
   794  00FC0A  E003               	bz	l47
   795                           ;history.c: 159: {
   796  00FC0C  010F               	movlb	_WrST shr (0+8)	;volatile
   797  00FC0E  6B44               	clrf	_WrST& (0+255),b	;volatile
   798                           ;history.c: 161: return;
   799  00FC10  0012               	return	
   800  00FC12                     l47:
   801                           ;history.c: 162: }
   802  00FC12  EE03  F02C         	lfsr	0,_M+38
   803  00FC16  50EF               	movf	indf0,w,c
   804  00FC18  A4D8               	btfss	status,2,c
   805  00FC1A  0012               	return	
   806                           ;history.c: 164: if(WrST)
   807  00FC1C  010F               	movlb	_WrST shr (0+8)	;volatile
   808  00FC1E  5344               	movf	_WrST& (0+255),f,b	;volatile
   809  00FC20  B4D8               	btfsc	status,2,c
   810  00FC22  0012               	return	
   811                           ;history.c: 165: {
   812  00FC24  6B44               	clrf	_WrST& (0+255),b	;volatile
   813                           ;history.c: 167: AddSTPoz();
   814  00FC26  D7BB               	goto	_AddSTPoz	;wreg free
   815                           ;history.c: 168: }
   816  00FC28                     __end_of_RefBStat:
   817                           ;history.c: 173: void ClrHFLG(void)
   818                           ;history.c: 174: {
   819  00FC28                     _ClrHFLG:
   820  000000                     
   821                           ;history.c: 175: Hflg=0;
   822  00FC28  010F               	movlb	_Hflg shr (0+8)	;volatile
   823  00FC2A  6B41               	clrf	_Hflg& (0+255),b	;volatile
   824  00FC2C                     L4:
   825                           ;history.c: 176: if_eeprom_write(0x01ED,Hflg);
   826  00FC2C  0100               	movlb	__Lparam shr (0+8)
   827  00FC2E  0EED               	movlw	237
   828  00FC30  6FB4               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   829  00FC32  0E01               	movlw	1
   830  00FC34  6FB5               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   831  00FC36  CF41  F0B6         	movff	_Hflg,?_if_eeprom_write+2	;volatile
   832  00FC3A  EF85  F043         	goto	_if_eeprom_write	;wreg free
   833                           ;history.c: 177: }
   834  00FC3E                     __end_of_ClrHFLG:
   835  000000                     
   836  000000                     
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304                           
  1305                           	psect	bigbss
  1306  000F40                     _HNPz:
  1307  000F40                     	ds	1
  1308  000F40                     _Hflg:
  1309  000F40                     	ds	1
  1310  000F40                     _Hind:
  1311  000F40                     	ds	1
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000F40                     _STPz:
  1375  000F40                     	ds	1
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000F40                     _WrST:
  1407  000F40                     	ds	1
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411                           
  1412                           	psect	bss
  1413  0003E1                     _HRef:
  1414  0003E1                     	ds	2
  1415  000000                     
  1416  000000                     
  1417  000000                     
  1418  000000                     
  1419                           
  1420                           	psect	temp
  1421  000000                     btemp:
  1422  000000                     	ds	4
  1423                           indf0	equ	0xFEF
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:33:15 2020

                   _M 0306                    l20 F992  
                  l21 F99E                    l22 F9A8  
                  l31 FADC                    l15 F960  
                  l32 FACA                    l24 FA54  
                  l16 F914                    l34 FB9C  
                  l26 FA52                    l43 FBB8  
                  l35 FB42                    l27 FA5E  
                  l19 F97A                    l44 FBF0  
                  l36 FB5A                    l28 FAA0  
                  l29 FA8E                    l47 FC12  
                  l39 FBE0            ?a_RefBHist 00A9  
            __config1 0030FF              __config2 00EFEF  
            __config3 007DFF              __config4 00FFFB  
            __config5 00FFF0              __config6 00DFF0  
                 wreg 000FE8       _if_eeprom_write 870A  
     __end_of_AddHPoz F9CE                  f5783 00AD  
    ?_if_eeprom_write 00B4                  _HNPz 0F40  
                _HRef 03E1                  _STPz 0F43  
                _Hflg 0F41       __end_of_ClrHFLG FC3E  
                _Hind 0F42                  _WrST 0F44  
                indf0 000FEF                  btemp 0000  
    __end_of_AddSTPoz FC00                 _RSDT1 032D  
          used_btemp0 0001            used_btemp1 0001  
          used_btemp2 0001            used_btemp3 0001  
             _AddHPoz F8E0           _eeprom_read 0E5E  
             _ClrHFLG FC28          _ToWriteESTAT FC00  
    __end_of_RefBHist FB9E               _GetBit2 0772  
    __end_of_RefBStat FC28                 status 000FD8  
            ?_GetBit2 00AE  __end_of_ToWriteESTAT FC08  
             __Lparam 00A4          ?_eeprom_read 00B7  
             __ramtop 1000            _CopyEESTAT 8A40  
         _WriteEESTAT 8872           ?_CopyEESTAT 00AB  
             postinc0 000FEE              _AddSTPoz FB9E  
            _RefBHist F9CE              _RefBStat FC08  
          ?a_AddSTPoz 00A9             ?a_AddHPoz 00AE  
          ??_RefBHist 00A9  
