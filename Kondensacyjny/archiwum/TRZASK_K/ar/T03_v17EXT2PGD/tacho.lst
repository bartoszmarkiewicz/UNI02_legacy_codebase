

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Thu Jul 28 10:43:11 2016


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	bigdata,global,class=BIGRAM,space=1,delta
      +                          =1
     4                           	psect	ibigdata,global,class=CODE,delta=1
     5                           	psect	text,global,reloc=2,class=CODE,delta=1
     6                           	psect	rbit,global,bit,common,class=COMRAM,space
      +                          =1,delta=1
     7                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     8                           	psect	bss,global,class=RAM,space=1,delta=1
     9                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
    10                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98  000000                     
    99  000000                     
   100                           
   101                           	psect	bigdata
   102                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   103                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   104                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   105                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   106                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   107                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   108                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   109                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   110                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   111                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   112                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   113                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   114                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   115                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   116                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   117                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   118                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   119                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   120                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   121                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   122                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   123                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   124                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   125                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   126                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   127                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   128                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   129                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   130                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   131                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   132                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   133                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   134                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   135                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   136                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   137                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   138                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   139                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   140                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   141                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   142                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   143                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   144                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   145                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   146                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   147                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   148                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   149                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   150                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   151                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   152                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   153                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   154                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   155                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   156                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   157                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   158                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   159                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   160                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   161                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   162                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   163                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   164                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   165                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   166                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   167                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   168                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   169                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   170                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   171                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   172                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   173                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   174                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   175                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   176                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   177                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   178                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   179                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   180                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   181                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   182                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   183                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   184                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   185                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   186                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   187                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   188                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   189                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   190                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   191                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   192                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   193                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   194                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   195                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   196                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   197                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   198                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   199                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   200                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   201                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   202  000E71                     _nokrobr:
   203  000E71                     	ds	1
   204                           
   205                           	psect	ibigdata
   206  0010E6  02                 	db	2
   207                           
   208                           	psect	text
   209                           ;tacho.c: 24: unsigned char nokrobr=2;
   210                           ;tacho.c: 25: bit stn,new,zero;
   211                           ;tacho.c: 27: unsigned char tkrk=0;
   212                           ;tacho.c: 28: volatile signed int wvv[12];
   213                           ;tacho.c: 29: volatile signed int wv[12];
   214                           ;tacho.c: 30: volatile unsigned int VDoc;
   215                           ;tacho.c: 31: volatile signed long ddDVNT,v_ddt;
   216                           ;tacho.c: 32: volatile signed int DVNT,dDVNT,tdD
      +                          VNT,v_t,v_dt,v_tdt;
   217                           ;tacho.c: 35: volatile unsigned int zr0,ni0,ip0,
      +                          in0,bin0,nw0,tm0;
   218                           ;tacho.c: 40: void IntTacho(void)
   219                           ;tacho.c: 41: {
   220  008C30                     _IntTacho:
   221                           ;       param _t assigned to ?_Vwyzsza+0
   222  000000                     _Vwyzsza$t	set	?_Vwyzsza
   223                           ;       param _t assigned to ?_Vnizsza+0
   224  000000                     _Vnizsza$t	set	?_Vnizsza
   225                           ;       param _t assigned to ?_Vmaleje+0
   226  000000                     _Vmaleje$t	set	?_Vmaleje
   227                           ;	_www assigned to ?a_FltParVNT+0
   228  000000                     _FltParVNT$www	set	?a_FltParVNT
   229                           ;	_w assigned to ?a_PredkoscZmianVNT+0
   230  000000                     _PredkoscZmianVNT$w	set	?a_PredkoscZmianVNT
   231                           ;	_wnk2 assigned to ?a_PomiarVNT+2
   232  000000                     _PomiarVNT$wnk2	set	?a_PomiarVNT+2
   233                           ;	_wnk assigned to ?a_PomiarVNT+0
   234  000000                     _PomiarVNT$wnk	set	?a_PomiarVNT
   235                           ;       param _wnk assigned to ?_TFlt+0
   236  000000                     _TFlt$wnk	set	?_TFlt
   237                           ;	_wb assigned to ?a_HistVal+0
   238  000000                     _HistVal$wb	set	?a_HistVal
   239                           ;       param _ndat assigned to ?_HistVal+2
   240  000000                     _HistVal$ndat	set	?_HistVal+2
   241                           ;       param _tbb assigned to ?_HistVal+0
   242  000000                     _HistVal$tbb	set	?_HistVal
   243                           ;	_tmx assigned to ?a_FindPropVal+22
   244  000000                     _FindPropVal$tmx	set	?a_FindPropVal+22
   245                           ;	_wb assigned to ?a_FindPropVal+2
   246  000000                     _FindPropVal$wb	set	?a_FindPropVal+2
   247                           ;	_min assigned to ?a_FindPropVal+0
   248  000000                     _FindPropVal$min	set	?a_FindPropVal
   249                           ;       param _ndat assigned to ?_FindPropVal+2
   250  000000                     _FindPropVal$ndat	set	?_FindPropVal+2
   251                           ;       param _tbb assigned to ?_FindPropVal+0
   252  000000                     _FindPropVal$tbb	set	?_FindPropVal
   253                           ;       param _wnk assigned to ?_AddTab+3
   254  000000                     _AddTab$wnk	set	?_AddTab+3
   255                           ;       param _ndat assigned to ?_AddTab+2
   256  000000                     _AddTab$ndat	set	?_AddTab+2
   257                           ;       param _tbb assigned to ?_AddTab+0
   258  000000                     _AddTab$tbb	set	?_AddTab
   259  000000                     
   260                           ;tacho.c: 42: if(ip0<4*1000) ip0++;
   261  008C30  0102               	movlb	_ip0 shr (0+8)	;volatile
   262  008C32  0E0F               	movlw	15
   263  008C34  5D13               	subwf	(_ip0+1)& (0+255),w,b	;volatile
   264  008C36  0EA0               	movlw	160
   265  008C38  B4D8               	btfsc	status,2,c
   266  008C3A  5D12               	subwf	_ip0& (0+255),w,b	;volatile
   267  008C3C  E202               	bc	l7
   268  008C3E  4B12               	infsnz	_ip0& (0+255),f,b	;volatile
   269  008C40  2B13               	incf	(_ip0+1)& (0+255),f,b	;volatile
   270  008C42                     l7:
   271                           ;tacho.c: 43: if(ip0>=4*1000)
   272  008C42  0102               	movlb	_ip0 shr (0+8)	;volatile
   273  008C44  0E0F               	movlw	15
   274  008C46  5D13               	subwf	(_ip0+1)& (0+255),w,b	;volatile
   275  008C48  0EA0               	movlw	160
   276  008C4A  B4D8               	btfsc	status,2,c
   277  008C4C  5D12               	subwf	_ip0& (0+255),w,b	;volatile
   278  008C4E  A0D8               	btfss	status,0,c
   279  008C50  0012               	return	
   280                           ;tacho.c: 44: {
   281  008C52  0E01               	movlw	1
   282  008C54  6F24               	movwf	_zr0& (0+255),b	;volatile
   283  008C56  6B25               	clrf	(_zr0+1)& (0+255),b	;volatile
   284                           ;tacho.c: 46: nw0=1;
   285  008C58  6F16               	movwf	_nw0& (0+255),b	;volatile
   286  008C5A  6B17               	clrf	(_nw0+1)& (0+255),b	;volatile
   287                           ;tacho.c: 47: }
   288  008C5C  0C00               	retlw	0
   289  008C5E                     __end_of_IntTacho:
   290                           ;tacho.c: 53: unsigned char IntINT0(void)
   291                           ;tacho.c: 54: {
   292  008C5E                     _IntINT0:
   293  000000                     
   294                           ;tacho.c: 55: if(zr0)
   295  008C5E  0102               	movlb	_zr0 shr (0+8)	;volatile
   296  008C60  5124               	movf	_zr0& (0+255),w,b	;volatile
   297  008C62  1125               	iorwf	(_zr0+1)& (0+255),w,b	;volatile
   298  008C64  E011               	bz	l10
   299                           ;tacho.c: 56: {
   300  008C66  90B1               	bcf	4017,0,c
   301                           ;tacho.c: 58: zr0=0;
   302  008C68  EE02  F024         	lfsr	0,_zr0	;volatile
   303  008C6C  6AEE               	clrf	postinc0,c
   304  008C6E  6AEE               	clrf	postinc0,c
   305                           ;tacho.c: 59: ip0=0;
   306  008C70  EE02  F012         	lfsr	0,_ip0	;volatile
   307  008C74  6AEE               	clrf	postinc0,c
   308  008C76  6AEE               	clrf	postinc0,c
   309                           ;tacho.c: 60: ni0=DtKNF.nokr;
   310  008C78  C1CA  F214         	movff	_DtKNF+22,_ni0	;volatile
   311  008C7C  6B15               	clrf	(_ni0+1)& (0+255),b	;volatile
   312                           ;tacho.c: 61: nw0=0;
   313  008C7E  EE02  F016         	lfsr	0,_nw0	;volatile
   314  008C82  6AEE               	clrf	postinc0,c
   315  008C84  6AEE               	clrf	postinc0,c
   316                           ;tacho.c: 62: return 1;
   317  008C86  0C01               	retlw	1
   318  008C88                     l10:
   319                           ;tacho.c: 64: else
   320  008C88  0102               	movlb	_ni0 shr (0+8)	;volatile
   321  008C8A  5114               	movf	_ni0& (0+255),w,b	;volatile
   322  008C8C  1115               	iorwf	(_ni0+1)& (0+255),w,b	;volatile
   323  008C8E  E004               	bz	l12
   324  008C90  0714               	decf	_ni0& (0+255),f,b	;volatile
   325  008C92  0E00               	movlw	0
   326  008C94  5B15               	subwfb	(_ni0+1)& (0+255),f,b	;volatile
   327  008C96  0C00               	retlw	0
   328  008C98                     l12:
   329                           ;tacho.c: 67: else
   330  008C98  90B1               	bcf	4017,0,c
   331                           ;tacho.c: 70: if(!nw0)
   332  008C9A  0102               	movlb	_nw0 shr (0+8)	;volatile
   333  008C9C  5116               	movf	_nw0& (0+255),w,b	;volatile
   334  008C9E  1117               	iorwf	(_nw0+1)& (0+255),w,b	;volatile
   335  008CA0  E117               	bnz	l14
   336                           ;tacho.c: 71: {
   337  008CA2  C212  F000         	movff	_ip0,btemp	;volatile
   338  008CA6  C213  F001         	movff	_ip0+1,btemp+1	;volatile
   339  008CAA  C20C  FFE8         	movff	_bin0,wreg	;volatile
   340  008CAE  2400               	addwf	btemp,w,c
   341  008CB0  6E02               	movwf	btemp+2,c
   342  008CB2  C20D  FFE8         	movff	_bin0+1,wreg	;volatile
   343  008CB6  2001               	addwfc	btemp+1,w,c
   344  008CB8  6E03               	movwf	btemp+3,c
   345  008CBA  90D8               	bcf	status,0,c
   346  008CBC  3003               	rrcf	btemp+3,w,c
   347  008CBE  CFE8 F211          	movff	wreg,_in0+1	;volatile
   348  008CC2  3002               	rrcf	btemp+2,w,c
   349  008CC4  CFE8 F210          	movff	wreg,_in0	;volatile
   350                           ;tacho.c: 73: bin0=in0;
   351  008CC8  C210  F20C         	movff	_in0,_bin0	;volatile
   352  008CCC  C211  F20D         	movff	_in0+1,_bin0+1	;volatile
   353  008CD0                     l14:
   354                           ;tacho.c: 74: }
   355  008CD0  0102               	movlb	_nw0 shr (0+8)	;volatile
   356  008CD2  0E01               	movlw	1
   357  008CD4  6F16               	movwf	_nw0& (0+255),b	;volatile
   358  008CD6  6B17               	clrf	(_nw0+1)& (0+255),b	;volatile
   359                           ;tacho.c: 76: ip0=0;
   360  008CD8  EE02  F012         	lfsr	0,_ip0	;volatile
   361  008CDC  6AEE               	clrf	postinc0,c
   362  008CDE  6AEE               	clrf	postinc0,c
   363                           ;tacho.c: 77: ni0=DtKNF.nokr;
   364  008CE0  C1CA  F214         	movff	_DtKNF+22,_ni0	;volatile
   365  008CE4  6B15               	clrf	(_ni0+1)& (0+255),b	;volatile
   366                           ;tacho.c: 78: return 1;
   367  008CE6  0C01               	retlw	1
   368                           ;tacho.c: 79: }
   369                           ;tacho.c: 82: }
   370  008CE8                     __end_of_IntINT0:
   371                           ;tacho.c: 87: void IncTimTacho(void)
   372                           ;tacho.c: 88: {
   373  008CE8                     _IncTimTacho:
   374  000000                     
   375                           ;tacho.c: 89: if(tm0<0xFFFF) tm0++;
   376  008CE8  0102               	movlb	_tm0 shr (0+8)	;volatile
   377  008CEA  1D1B               	comf	(_tm0+1)& (0+255),w,b	;volatile
   378  008CEC  0EFF               	movlw	255
   379  008CEE  B4D8               	btfsc	status,2,c
   380  008CF0  191A               	xorwf	_tm0& (0+255),w,b	;volatile
   381  008CF2  B4D8               	btfsc	status,2,c
   382  008CF4  0012               	return	
   383  008CF6  4B1A               	infsnz	_tm0& (0+255),f,b	;volatile
   384  008CF8  2B1B               	incf	(_tm0+1)& (0+255),f,b	;volatile
   385                           ;tacho.c: 90: }
   386  008CFA  0012               	return	
   387  008CFC                     __end_of_IncTimTacho:
   388                           ;tacho.c: 91: void StartTimTacho(void)
   389                           ;tacho.c: 92: {
   390  008CFC                     _StartTimTacho:
   391  000000                     
   392                           ;tacho.c: 93: tm0=0;
   393  008CFC  EE02  F01A         	lfsr	0,_tm0	;volatile
   394  008D00  6AEE               	clrf	postinc0,c
   395  008D02  6AEE               	clrf	postinc0,c
   396                           ;tacho.c: 94: }
   397  008D04  0012               	return	
   398  008D06                     __end_of_StartTimTacho:
   399                           ;tacho.c: 95: unsigned char TimTacho(void)
   400                           ;tacho.c: 96: {
   401  008D06                     _TimTacho:
   402  000000                     
   403                           ;tacho.c: 97: return tm0;
   404  008D06  C21A  FFE8         	movff	_tm0,wreg	;volatile
   405  008D0A  0012               	return	
   406                           ;tacho.c: 98: }
   407  008D0C                     __end_of_TimTacho:
   408                           ;tacho.c: 102: void AddTab(unsigned int *tbb,uns
      +                          igned char ndat,unsigned int wnk)
   409                           ;tacho.c: 103: {
   410  008D0C  00B6               	dw	?_AddTab
   411  008D0E                     _AddTab:
   412  000000                     
   413                           ;tacho.c: 104: unsigned char i;
   414  008D0E  0100               	movlb	__Lparam shr (0+8)
   415  008D10  51B8               	movf	(?_AddTab+2)^(__Lparam& (0+65280)),w
   416  008D12  0E14               	movlw	20
   417  008D14  E002               	bz	L2
   418  008D16  65B8               	cpfsgt	(?_AddTab+2)^(__Lparam& (0+65280)),b
   419  008D18  D002               	goto	l20
   420  008D1A                     L2:
   421  008D1A  0100               	movlb	__Lparam shr (0+8)
   422  008D1C  6FB8               	movwf	(?_AddTab+2)^(__Lparam& (0+65280)),b
   423  008D1E                     l20:
   424                           ;tacho.c: 107: for(i=1;i<ndat;i++) tbb[i-1]=tbb[
      +                          i];
   425  008D1E  0E01               	movlw	1
   426  008D20  6ED9               	movwf	fsr2l,c
   427  008D22                     l24:
   428  008D22  0100               	movlb	__Lparam shr (0+8)
   429  008D24  51B8               	movf	(?_AddTab+2)^(__Lparam& (0+65280)),w
   430  008D26  5CD9               	subwf	fsr2l,w,c
   431  008D28  E21A               	bc	u100
   432  008D2A  50D9               	movf	fsr2l,w,c
   433  008D2C  0D02               	mullw	2
   434  008D2E  51B6               	movf	?_AddTab^(__Lparam& (0+65280)),w
   435  008D30  24F3               	addwf	prodl,w,c
   436  008D32  6EE9               	movwf	fsr0l,c
   437  008D34  51B7               	movf	(?_AddTab+1)^(__Lparam& (0+65280)),w
   438  008D36  20F4               	addwfc	prodh,w,c
   439  008D38  6EEA               	movwf	fsr0h,c
   440  008D3A  50D9               	movf	fsr2l,w,c
   441  008D3C  0D02               	mullw	2
   442  008D3E  51B6               	movf	?_AddTab^(__Lparam& (0+65280)),w
   443  008D40  26F3               	addwf	prodl,f,c
   444  008D42  51B7               	movf	(?_AddTab+1)^(__Lparam& (0+65280)),w
   445  008D44  22F4               	addwfc	prodh,f,c
   446  008D46  0EFE               	movlw	254
   447  008D48  24F3               	addwf	prodl,w,c
   448  008D4A  6EE1               	movwf	fsr1l,c
   449  008D4C  0EFF               	movlw	255
   450  008D4E  20F4               	addwfc	prodh,w,c
   451  008D50  6EE2               	movwf	fsr1h,c
   452  008D52  CFEE FFE6          	movff	postinc0,postinc1
   453  008D56  CFED FFE5          	movff	postdec0,postdec1
   454  008D5A  2AD9               	incf	fsr2l,f,c
   455  008D5C  D7E2               	goto	l24
   456  008D5E                     u100:
   457                           ;tacho.c: 108: tbb[ndat-1]=wnk;
   458  008D5E  0100               	movlb	__Lparam shr (0+8)
   459  008D60  51B8               	movf	(?_AddTab+2)^(__Lparam& (0+65280)),w
   460  008D62  0D02               	mullw	2
   461  008D64  51B6               	movf	?_AddTab^(__Lparam& (0+65280)),w
   462  008D66  26F3               	addwf	prodl,f,c
   463  008D68  51B7               	movf	(?_AddTab+1)^(__Lparam& (0+65280)),w
   464  008D6A  22F4               	addwfc	prodh,f,c
   465  008D6C  0EFE               	movlw	254
   466  008D6E  24F3               	addwf	prodl,w,c
   467  008D70  6EE9               	movwf	fsr0l,c
   468  008D72  0EFF               	movlw	255
   469  008D74  20F4               	addwfc	prodh,w,c
   470  008D76  6EEA               	movwf	fsr0h,c
   471  008D78  C0B9  FFEE         	movff	?_AddTab+3,postinc0
   472  008D7C  C0BA  FFED         	movff	?_AddTab+4,postdec0
   473                           ;tacho.c: 109: }
   474  008D80  0012               	return	
   475  008D82                     __end_of_AddTab:
   476                           ;tacho.c: 112: unsigned int FindPropVal(unsigned
      +                           int *tbb,unsigned char ndat)
   477                           ;tacho.c: 113: {
   478  008D82  00B6               	dw	?_FindPropVal
   479  008D84                     _FindPropVal:
   480  000000                     
   481                           ;tacho.c: 114: unsigned int wrt;
   482  008D84  0100               	movlb	__Lparam shr (0+8)
   483  008D86  51B8               	movf	(?_FindPropVal+2)^(__Lparam& (0+65280)),w
   484  008D88  0E14               	movlw	20
   485  008D8A  E002               	bz	L3
   486  008D8C  65B8               	cpfsgt	(?_FindPropVal+2)^(__Lparam& (0+65280)),
      +                          b
   487  008D8E  D002               	goto	l26
   488  008D90                     L3:
   489  008D90  0100               	movlb	__Lparam shr (0+8)
   490  008D92  6FB8               	movwf	(?_FindPropVal+2)^(__Lparam& (0+65280)),b
   491  008D94                     l26:
   492                           ;tacho.c: 123: for(i=0;i<ndat;i++) tmx[i]=tbb[i]
      +                          ;
   493  008D94  6AD9               	clrf	fsr2l,c
   494  008D96                     l30:
   495  008D96  0100               	movlb	__Lparam shr (0+8)
   496  008D98  51B8               	movf	(?_FindPropVal+2)^(__Lparam& (0+65280)),w
   497  008D9A  5CD9               	subwf	fsr2l,w,c
   498  008D9C  E216               	bc	u140
   499  008D9E  50D9               	movf	fsr2l,w,c
   500  008DA0  0D02               	mullw	2
   501  008DA2  51B6               	movf	?_FindPropVal^(__Lparam& (0+65280)),w
   502  008DA4  24F3               	addwf	prodl,w,c
   503  008DA6  6EE1               	movwf	fsr1l,c
   504  008DA8  51B7               	movf	(?_FindPropVal+1)^(__Lparam& (0+65280)),w
   505  008DAA  20F4               	addwfc	prodh,w,c
   506  008DAC  6EE2               	movwf	fsr1h,c
   507  008DAE  50D9               	movf	fsr2l,w,c
   508  008DB0  0D02               	mullw	2
   509  008DB2  0ECF               	movlw	low (?a_FindPropVal+22)
   510  008DB4  24F3               	addwf	prodl,w,c
   511  008DB6  6EE9               	movwf	fsr0l,c
   512  008DB8  0E00               	movlw	high (?a_FindPropVal+22)
   513  008DBA  20F4               	addwfc	prodh,w,c
   514  008DBC  6EEA               	movwf	fsr0h,c
   515  008DBE  CFE6 FFEE          	movff	postinc1,postinc0
   516  008DC2  CFE5 FFED          	movff	postdec1,postdec0
   517  008DC6  2AD9               	incf	fsr2l,f,c
   518  008DC8  D7E6               	goto	l30
   519  008DCA                     u140:
   520                           ;tacho.c: 126: for(i=0;i<ndat;i++) wb[i]=0;
   521  008DCA  6AD9               	clrf	fsr2l,c
   522  008DCC                     l34:
   523  008DCC  0100               	movlb	__Lparam shr (0+8)
   524  008DCE  51B8               	movf	(?_FindPropVal+2)^(__Lparam& (0+65280)),w
   525  008DD0  5CD9               	subwf	fsr2l,w,c
   526  008DD2  E209               	bc	u150
   527  008DD4  50D9               	movf	fsr2l,w,c
   528  008DD6  EE00  F0BB         	lfsr	0,?a_FindPropVal+2
   529  008DDA  26E9               	addwf	fsr0l,f,c
   530  008DDC  0E00               	movlw	0
   531  008DDE  22EA               	addwfc	fsr0h,f,c
   532  008DE0  6AEF               	clrf	indf0,c
   533  008DE2  2AD9               	incf	fsr2l,f,c
   534  008DE4  D7F3               	goto	l34
   535  008DE6                     u150:
   536                           ;tacho.c: 127: for(j=0;j<(ndat/2);j++)
   537  008DE6  6AE1               	clrf	fsr1l,c
   538  008DE8                     l38:
   539  008DE8  0100               	movlb	__Lparam shr (0+8)
   540  008DEA  90D8               	bcf	status,0,c
   541  008DEC  31B8               	rrcf	(?_FindPropVal+2)^(__Lparam& (0+65280)),w
   542  008DEE  5CE1               	subwf	fsr1l,w,c
   543  008DF0  E26A               	bc	u210
   544                           ;tacho.c: 128: {
   545  008DF2  69B9               	setf	?a_FindPropVal^(__Lparam& (0+65280)),b
   546  008DF4  69BA               	setf	(?a_FindPropVal+1)^(__Lparam& (0+65280)),b
   547                           ;tacho.c: 130: max=0;
   548  008DF6  6A00               	clrf	btemp,c
   549  008DF8  6A01               	clrf	btemp+1,c
   550                           ;tacho.c: 131: for(i=0;i<ndat;i++)
   551  008DFA  6AD9               	clrf	fsr2l,c
   552  008DFC                     l42:
   553  008DFC  0100               	movlb	__Lparam shr (0+8)
   554  008DFE  51B8               	movf	(?_FindPropVal+2)^(__Lparam& (0+65280)),w
   555  008E00  5CD9               	subwf	fsr2l,w,c
   556  008E02  E22F               	bc	u190
   557                           ;tacho.c: 132: {
   558  008E04  50D9               	movf	fsr2l,w,c
   559  008E06  EE00  F0BB         	lfsr	0,?a_FindPropVal+2
   560  008E0A  26E9               	addwf	fsr0l,f,c
   561  008E0C  0E00               	movlw	0
   562  008E0E  22EA               	addwfc	fsr0h,f,c
   563  008E10  50EF               	movf	indf0,w,c
   564  008E12  E125               	bnz	l41
   565                           ;tacho.c: 134: wrt=tmx[i];
   566  008E14  50D9               	movf	fsr2l,w,c
   567  008E16  0D02               	mullw	2
   568  008E18  0ECF               	movlw	low (?a_FindPropVal+22)
   569  008E1A  24F3               	addwf	prodl,w,c
   570  008E1C  6EE9               	movwf	fsr0l,c
   571  008E1E  0E00               	movlw	high (?a_FindPropVal+22)
   572  008E20  20F4               	addwfc	prodh,w,c
   573  008E22  6EEA               	movwf	fsr0h,c
   574  008E24  CFEE FFF6          	movff	postinc0,tblptrl
   575  008E28  CFED FFF7          	movff	postdec0,tblptrh
   576                           ;tacho.c: 135: if(max<wrt)
   577  008E2C  50F7               	movf	tblptrh,w,c
   578  008E2E  5C01               	subwf	btemp+1,w,c
   579  008E30  E102               	bnz	u175
   580  008E32  50F6               	movf	tblptrl,w,c
   581  008E34  5C00               	subwf	btemp,w,c
   582  008E36                     u175:
   583  008E36  E206               	bc	l44
   584                           ;tacho.c: 136: {
   585  008E38  CFF6 F000          	movff	tblptrl,btemp
   586  008E3C  CFF7 F001          	movff	tblptrh,btemp+1
   587                           ;tacho.c: 138: ix=i;
   588  008E40  50D9               	movf	fsr2l,w,c
   589  008E42  6E02               	movwf	btemp+2,c
   590  008E44                     l44:
   591                           ;tacho.c: 139: }
   592  008E44  0100               	movlb	__Lparam shr (0+8)
   593  008E46  51BA               	movf	(?a_FindPropVal+1)^(__Lparam& (0+65280)),w
   594  008E48  5CF7               	subwf	tblptrh,w,c
   595  008E4A  E102               	bnz	u185
   596  008E4C  51B9               	movf	?a_FindPropVal^(__Lparam& (0+65280)),w
   597  008E4E  5CF6               	subwf	tblptrl,w,c
   598  008E50                     u185:
   599  008E50  E206               	bc	l41
   600                           ;tacho.c: 141: {
   601  008E52  CFF6 F0B9          	movff	tblptrl,?a_FindPropVal
   602  008E56  CFF7 F0BA          	movff	tblptrh,?a_FindPropVal+1
   603                           ;tacho.c: 143: im=i;
   604  008E5A  50D9               	movf	fsr2l,w,c
   605  008E5C  6E03               	movwf	btemp+3,c
   606  008E5E                     l41:
   607  008E5E  2AD9               	incf	fsr2l,f,c
   608  008E60  D7CD               	goto	l42
   609  008E62                     u190:
   610                           ;tacho.c: 144: }
   611  008E62  5003               	movf	btemp+3,w,c
   612  008E64  6202               	cpfseq	btemp+2,c
   613  008E66  D009               	goto	l46
   614                           ;tacho.c: 147: {
   615  008E68  50E1               	movf	fsr1l,w,c
   616  008E6A  6E03               	movwf	btemp+3,c
   617                           ;tacho.c: 149: ix=(ndat-1-j);
   618  008E6C  C0B8  F000         	movff	?_FindPropVal+2,btemp
   619  008E70  0EFF               	movlw	-1
   620  008E72  2600               	addwf	btemp,f,c
   621  008E74  50E1               	movf	fsr1l,w,c
   622  008E76  5C00               	subwf	btemp,w,c
   623  008E78  6E02               	movwf	btemp+2,c
   624  008E7A                     l46:
   625                           ;tacho.c: 150: }
   626  008E7A  5002               	movf	btemp+2,w,c
   627  008E7C  EE00  F0BB         	lfsr	0,?a_FindPropVal+2
   628  008E80  26E9               	addwf	fsr0l,f,c
   629  008E82  0E00               	movlw	0
   630  008E84  22EA               	addwfc	fsr0h,f,c
   631  008E86  0E01               	movlw	1
   632  008E88  6EEF               	movwf	indf0,c
   633                           ;tacho.c: 152: wb[im]=1;
   634  008E8A  5003               	movf	btemp+3,w,c
   635  008E8C  EE00  F0BB         	lfsr	0,?a_FindPropVal+2
   636  008E90  26E9               	addwf	fsr0l,f,c
   637  008E92  0E00               	movlw	0
   638  008E94  22EA               	addwfc	fsr0h,f,c
   639  008E96  0E01               	movlw	1
   640  008E98  6EEF               	movwf	indf0,c
   641                           ;tacho.c: 153: tmx[ix]=0;
   642  008E9A  5002               	movf	btemp+2,w,c
   643  008E9C  0D02               	mullw	2
   644  008E9E  0ECF               	movlw	low (?a_FindPropVal+22)
   645  008EA0  24F3               	addwf	prodl,w,c
   646  008EA2  6EE9               	movwf	fsr0l,c
   647  008EA4  0E00               	movlw	high (?a_FindPropVal+22)
   648  008EA6  20F4               	addwfc	prodh,w,c
   649  008EA8  6EEA               	movwf	fsr0h,c
   650  008EAA  6AEE               	clrf	postinc0,c
   651  008EAC  6AED               	clrf	postdec0,c
   652                           ;tacho.c: 154: tmx[im]=0;
   653  008EAE  5003               	movf	btemp+3,w,c
   654  008EB0  0D02               	mullw	2
   655  008EB2  0ECF               	movlw	low (?a_FindPropVal+22)
   656  008EB4  24F3               	addwf	prodl,w,c
   657  008EB6  6EE9               	movwf	fsr0l,c
   658  008EB8  0E00               	movlw	high (?a_FindPropVal+22)
   659  008EBA  20F4               	addwfc	prodh,w,c
   660  008EBC  6EEA               	movwf	fsr0h,c
   661  008EBE  6AEE               	clrf	postinc0,c
   662  008EC0  6AED               	clrf	postdec0,c
   663  008EC2  2AE1               	incf	fsr1l,f,c
   664  008EC4  D791               	goto	l38
   665  008EC6                     u210:
   666                           ;tacho.c: 155: }
   667  008EC6  6AD9               	clrf	fsr2l,c
   668  008EC8                     l50:
   669  008EC8  0100               	movlb	__Lparam shr (0+8)
   670  008ECA  51B8               	movf	(?_FindPropVal+2)^(__Lparam& (0+65280)),w
   671  008ECC  5CD9               	subwf	fsr2l,w,c
   672  008ECE  E211               	bc	l48
   673                           ;tacho.c: 158: {
   674  008ED0  50D9               	movf	fsr2l,w,c
   675  008ED2  0D02               	mullw	2
   676  008ED4  0ECF               	movlw	low (?a_FindPropVal+22)
   677  008ED6  24F3               	addwf	prodl,w,c
   678  008ED8  6EE9               	movwf	fsr0l,c
   679  008EDA  0E00               	movlw	high (?a_FindPropVal+22)
   680  008EDC  20F4               	addwfc	prodh,w,c
   681  008EDE  6EEA               	movwf	fsr0h,c
   682  008EE0  CFEE FFF6          	movff	postinc0,tblptrl
   683  008EE4  CFED FFF7          	movff	postdec0,tblptrh
   684                           ;tacho.c: 160: if(wrt) break;
   685  008EE8  50F7               	movf	tblptrh,w,c
   686  008EEA  10F6               	iorwf	tblptrl,w,c
   687  008EEC  E102               	bnz	l48
   688  008EEE  2AD9               	incf	fsr2l,f,c
   689  008EF0  D7EB               	goto	l50
   690  008EF2                     l48:
   691                           ;tacho.c: 161: }
   692  008EF2  CFF6 F000          	movff	tblptrl,btemp
   693  008EF6  CFF7 F001          	movff	tblptrh,btemp+1
   694  008EFA  0012               	return	
   695                           ;tacho.c: 163: }
   696  008EFC                     __end_of_FindPropVal:
   697                           ;tacho.c: 166: unsigned int HistVal(unsigned int
      +                           *tbb,unsigned char ndat)
   698                           ;tacho.c: 167: {
   699  008EFC  00B6               	dw	?_HistVal
   700  008EFE                     _HistVal:
   701  000000                     
   702                           ;tacho.c: 168: unsigned int wrt;
   703  008EFE  0100               	movlb	__Lparam shr (0+8)
   704  008F00  51B8               	movf	(?_HistVal+2)^(__Lparam& (0+65280)),w
   705  008F02  0E14               	movlw	20
   706  008F04  E002               	bz	L4
   707  008F06  65B8               	cpfsgt	(?_HistVal+2)^(__Lparam& (0+65280)),b
   708  008F08  D002               	goto	l53
   709  008F0A                     L4:
   710  008F0A  0100               	movlb	__Lparam shr (0+8)
   711  008F0C  6FB8               	movwf	(?_HistVal+2)^(__Lparam& (0+65280)),b
   712  008F0E                     l53:
   713                           ;tacho.c: 176: for(i=0;i<ndat;i++) wb[i]=0;
   714  008F0E  6AD9               	clrf	fsr2l,c
   715  008F10                     l57:
   716  008F10  0100               	movlb	__Lparam shr (0+8)
   717  008F12  51B8               	movf	(?_HistVal+2)^(__Lparam& (0+65280)),w
   718  008F14  5CD9               	subwf	fsr2l,w,c
   719  008F16  E209               	bc	u270
   720  008F18  50D9               	movf	fsr2l,w,c
   721  008F1A  EE00  F0B9         	lfsr	0,?a_HistVal
   722  008F1E  26E9               	addwf	fsr0l,f,c
   723  008F20  0E00               	movlw	0
   724  008F22  22EA               	addwfc	fsr0h,f,c
   725  008F24  6AEF               	clrf	indf0,c
   726  008F26  2AD9               	incf	fsr2l,f,c
   727  008F28  D7F3               	goto	l57
   728  008F2A                     u270:
   729                           ;tacho.c: 177: for(j=0;j<ndat;j++)
   730  008F2A  6AD9               	clrf	fsr2l,c
   731  008F2C                     l61:
   732  008F2C  0100               	movlb	__Lparam shr (0+8)
   733  008F2E  51B8               	movf	(?_HistVal+2)^(__Lparam& (0+65280)),w
   734  008F30  5CD9               	subwf	fsr2l,w,c
   735  008F32  E22C               	bc	u300
   736                           ;tacho.c: 178: {
   737                           ; _wrt allocated to tablreg
   738  008F34  50D9               	movf	fsr2l,w,c
   739  008F36  0D02               	mullw	2
   740  008F38  51B6               	movf	?_HistVal^(__Lparam& (0+65280)),w
   741  008F3A  24F3               	addwf	prodl,w,c
   742  008F3C  6EE9               	movwf	fsr0l,c
   743  008F3E  51B7               	movf	(?_HistVal+1)^(__Lparam& (0+65280)),w
   744  008F40  20F4               	addwfc	prodh,w,c
   745  008F42  6EEA               	movwf	fsr0h,c
   746  008F44  CFEE FFF6          	movff	postinc0,tblptrl
   747  008F48  CFED FFF7          	movff	postdec0,tblptrh
   748                           ;tacho.c: 180: for(i=0;i<ndat;i++)
   749                           ; _i allocated to btemp
   750  008F4C  6A00               	clrf	btemp,c
   751  008F4E                     l65:
   752  008F4E  0100               	movlb	__Lparam shr (0+8)
   753  008F50  51B8               	movf	(?_HistVal+2)^(__Lparam& (0+65280)),w
   754  008F52  5C00               	subwf	btemp,w,c
   755  008F54  E219               	bc	u290
   756                           ;tacho.c: 181: {
   757  008F56  5000               	movf	btemp,w,c
   758  008F58  0D02               	mullw	2
   759  008F5A  51B6               	movf	?_HistVal^(__Lparam& (0+65280)),w
   760  008F5C  24F3               	addwf	prodl,w,c
   761  008F5E  6EE9               	movwf	fsr0l,c
   762  008F60  51B7               	movf	(?_HistVal+1)^(__Lparam& (0+65280)),w
   763  008F62  20F4               	addwfc	prodh,w,c
   764  008F64  6EEA               	movwf	fsr0h,c
   765  008F66  52EE               	movf	postinc0,f,c
   766  008F68  50F7               	movf	tblptrh,w,c
   767  008F6A  18ED               	xorwf	postdec0,w,c
   768  008F6C  CFF6 FFE8          	movff	tblptrl,wreg
   769  008F70  B4D8               	btfsc	status,2,c
   770  008F72  18EF               	xorwf	indf0,w,c
   771  008F74  E107               	bnz	l66
   772  008F76  50D9               	movf	fsr2l,w,c
   773  008F78  EE00  F0B9         	lfsr	0,?a_HistVal
   774  008F7C  26E9               	addwf	fsr0l,f,c
   775  008F7E  0E00               	movlw	0
   776  008F80  22EA               	addwfc	fsr0h,f,c
   777  008F82  2AEF               	incf	indf0,f,c
   778  008F84                     l66:
   779  008F84  2A00               	incf	btemp,f,c
   780  008F86  D7E3               	goto	l65
   781  008F88                     u290:
   782  008F88  2AD9               	incf	fsr2l,f,c
   783  008F8A  D7D0               	goto	l61
   784  008F8C                     u300:
   785                           ;tacho.c: 183: }
   786  008F8C  6AF6               	clrf	tblptrl,c
   787  008F8E  6AF7               	clrf	tblptrh,c
   788                           ;tacho.c: 187: im=ndat-1;
   789  008F90  0100               	movlb	__Lparam shr (0+8)
   790  008F92  05B8               	decf	(?_HistVal+2)^(__Lparam& (0+65280)),w
   791  008F94  6EE1               	movwf	fsr1l,c
   792                           ;tacho.c: 188: for(i=0;i<ndat;i++)
   793                           ; _i allocated to fsr2l
   794  008F96  6AD9               	clrf	fsr2l,c
   795  008F98                     l70:
   796  008F98  0100               	movlb	__Lparam shr (0+8)
   797  008F9A  51B8               	movf	(?_HistVal+2)^(__Lparam& (0+65280)),w
   798  008F9C  5CD9               	subwf	fsr2l,w,c
   799  008F9E  E217               	bc	u320
   800                           ;tacho.c: 189: {
   801                           ; _wrt allocated to wtemp0
   802  008FA0  50D9               	movf	fsr2l,w,c
   803  008FA2  EE00  F0B9         	lfsr	0,?a_HistVal
   804  008FA6  26E9               	addwf	fsr0l,f,c
   805  008FA8  0E00               	movlw	0
   806  008FAA  22EA               	addwfc	fsr0h,f,c
   807  008FAC  50EF               	movf	indf0,w,c
   808  008FAE  6E00               	movwf	btemp,c
   809  008FB0  6A01               	clrf	btemp+1,c
   810                           ;tacho.c: 191: if(max<=wrt)
   811  008FB2  50F7               	movf	tblptrh,w,c
   812  008FB4  5C01               	subwf	btemp+1,w,c
   813  008FB6  E102               	bnz	u315
   814  008FB8  50F6               	movf	tblptrl,w,c
   815  008FBA  5C00               	subwf	btemp,w,c
   816  008FBC                     u315:
   817  008FBC  E306               	bnc	l71
   818                           ;tacho.c: 192: {
   819  008FBE  C000  FFF6         	movff	btemp,tblptrl
   820  008FC2  C001  FFF7         	movff	btemp+1,tblptrh
   821                           ;tacho.c: 194: im=i;
   822  008FC6  50D9               	movf	fsr2l,w,c
   823  008FC8  6EE1               	movwf	fsr1l,c
   824  008FCA                     l71:
   825  008FCA  2AD9               	incf	fsr2l,f,c
   826  008FCC  D7E5               	goto	l70
   827  008FCE                     u320:
   828                           ;tacho.c: 195: }
   829  008FCE  6802               	setf	btemp+2,c
   830  008FD0  6A03               	clrf	btemp+3,c
   831                           ;tacho.c: 199: for(i=0;i<ndat;i++)
   832  008FD2  6AD9               	clrf	fsr2l,c
   833  008FD4                     l75:
   834  008FD4  0100               	movlb	__Lparam shr (0+8)
   835  008FD6  51B8               	movf	(?_HistVal+2)^(__Lparam& (0+65280)),w
   836  008FD8  5CD9               	subwf	fsr2l,w,c
   837  008FDA  E227               	bc	u350
   838                           ;tacho.c: 200: {
   839  008FDC  50D9               	movf	fsr2l,w,c
   840  008FDE  EE00  F0B9         	lfsr	0,?a_HistVal
   841  008FE2  26E9               	addwf	fsr0l,f,c
   842  008FE4  0E00               	movlw	0
   843  008FE6  22EA               	addwfc	fsr0h,f,c
   844  008FE8  50EF               	movf	indf0,w,c
   845  008FEA  6E00               	movwf	btemp,c
   846  008FEC  18F6               	xorwf	tblptrl,w,c
   847  008FEE  E101               	bnz	u335
   848  008FF0  52F7               	movf	tblptrh,f,c
   849  008FF2                     u335:
   850  008FF2  E119               	bnz	l76
   851                           ;tacho.c: 202: {
   852  008FF4  50D9               	movf	fsr2l,w,c
   853  008FF6  0D02               	mullw	2
   854  008FF8  0100               	movlb	__Lparam shr (0+8)
   855  008FFA  51B6               	movf	?_HistVal^(__Lparam& (0+65280)),w
   856  008FFC  24F3               	addwf	prodl,w,c
   857  008FFE  6EE9               	movwf	fsr0l,c
   858  009000  51B7               	movf	(?_HistVal+1)^(__Lparam& (0+65280)),w
   859  009002  20F4               	addwfc	prodh,w,c
   860  009004  6EEA               	movwf	fsr0h,c
   861  009006  CFEE F000          	movff	postinc0,btemp
   862  00900A  CFED F001          	movff	postdec0,btemp+1
   863                           ;tacho.c: 204: if(min>=wrt)
   864  00900E  5001               	movf	btemp+1,w,c
   865  009010  5C03               	subwf	btemp+3,w,c
   866  009012  E102               	bnz	u345
   867  009014  5000               	movf	btemp,w,c
   868  009016  5C02               	subwf	btemp+2,w,c
   869  009018                     u345:
   870  009018  E306               	bnc	l76
   871                           ;tacho.c: 205: {
   872  00901A  C000  F002         	movff	btemp,btemp+2
   873  00901E  C001  F003         	movff	btemp+1,btemp+3
   874                           ;tacho.c: 207: im=i;
   875  009022  50D9               	movf	fsr2l,w,c
   876  009024  6EE1               	movwf	fsr1l,c
   877  009026                     l76:
   878  009026  2AD9               	incf	fsr2l,f,c
   879  009028  D7D5               	goto	l75
   880  00902A                     u350:
   881                           ;tacho.c: 208: }
   882  00902A  50E1               	movf	fsr1l,w,c
   883  00902C  0D02               	mullw	2
   884  00902E  0100               	movlb	__Lparam shr (0+8)
   885  009030  51B6               	movf	?_HistVal^(__Lparam& (0+65280)),w
   886  009032  24F3               	addwf	prodl,w,c
   887  009034  6EE9               	movwf	fsr0l,c
   888  009036  51B7               	movf	(?_HistVal+1)^(__Lparam& (0+65280)),w
   889  009038  20F4               	addwfc	prodh,w,c
   890  00903A  6EEA               	movwf	fsr0h,c
   891  00903C  CFEE F000          	movff	postinc0,btemp
   892  009040  CFED F001          	movff	postdec0,btemp+1
   893  009044  0012               	return	
   894                           ;tacho.c: 212: }
   895  009046                     __end_of_HistVal:
   896                           ;tacho.c: 216: unsigned int TFlt(unsigned int wn
      +                          k)
   897                           ;tacho.c: 217: {
   898  009046  00B6               	dw	?_TFlt
   899  009048                     _TFlt:
   900  000000                     
   901                           ;tacho.c: 218: static unsigned int bwnk=0;
   902  009048  C200  F000         	movff	F1431,btemp
   903  00904C  C201  F001         	movff	F1431+1,btemp+1
   904  009050  0100               	movlb	__Lparam shr (0+8)
   905  009052  51B7               	movf	(?_TFlt+1)^(__Lparam& (0+65280)),w
   906  009054  5C01               	subwf	btemp+1,w,c
   907  009056  E102               	bnz	u365
   908  009058  51B6               	movf	?_TFlt^(__Lparam& (0+65280)),w
   909  00905A  5C00               	subwf	btemp,w,c
   910  00905C                     u365:
   911  00905C  E219               	bc	l79
   912                           ;tacho.c: 222: {
   913  00905E  C200  FFE8         	movff	F1431,wreg
   914  009062  5DB6               	subwf	?_TFlt^(__Lparam& (0+65280)),w
   915  009064  6E00               	movwf	btemp,c
   916  009066  C201  FFE8         	movff	F1431+1,wreg
   917  00906A  59B7               	subwfb	(?_TFlt+1)^(__Lparam& (0+65280)),w
   918  00906C  6E01               	movwf	btemp+1,c
   919  00906E  0E00               	movlw	0
   920  009070  5C01               	subwf	btemp+1,w,c
   921  009072  0EC8               	movlw	200
   922  009074  B4D8               	btfsc	status,2,c
   923  009076  5C00               	subwf	btemp,w,c
   924  009078  E336               	bnc	l84
   925                           ;tacho.c: 224: {
   926  00907A  010F               	movlb	F1432 shr (0+8)
   927  00907C  6B3C               	clrf	F1432& (0+255),b
   928                           ;tacho.c: 226: bwnk=wnk;
   929  00907E  C0B6  F200         	movff	?_TFlt,F1431
   930  009082  C0B7  F201         	movff	?_TFlt+1,F1431+1
   931                           ;tacho.c: 227: return wnk;
   932  009086  C0B6  F000         	movff	?_TFlt,btemp
   933  00908A  C0B7  F001         	movff	?_TFlt+1,btemp+1
   934  00908E  0012               	return	
   935                           ;tacho.c: 228: }
   936  009090                     l79:
   937                           ;tacho.c: 230: else
   938  009090  C200  F000         	movff	F1431,btemp
   939  009094  C201  F001         	movff	F1431+1,btemp+1
   940  009098  0100               	movlb	__Lparam shr (0+8)
   941  00909A  51B6               	movf	?_TFlt^(__Lparam& (0+65280)),w
   942  00909C  5E00               	subwf	btemp,f,c
   943  00909E  51B7               	movf	(?_TFlt+1)^(__Lparam& (0+65280)),w
   944  0090A0  5A01               	subwfb	btemp+1,f,c
   945  0090A2  0E00               	movlw	0
   946  0090A4  5C01               	subwf	btemp+1,w,c
   947  0090A6  0EC8               	movlw	200
   948  0090A8  B4D8               	btfsc	status,2,c
   949  0090AA  5C00               	subwf	btemp,w,c
   950  0090AC  E31C               	bnc	l84
   951                           ;tacho.c: 233: {
   952  0090AE  010F               	movlb	F1432 shr (0+8)
   953  0090B0  6B3C               	clrf	F1432& (0+255),b
   954                           ;tacho.c: 235: bwnk=wnk;
   955  0090B2  C0B6  F200         	movff	?_TFlt,F1431
   956  0090B6  C0B7  F201         	movff	?_TFlt+1,F1431+1
   957                           ;tacho.c: 236: return wnk;
   958  0090BA  C0B6  F000         	movff	?_TFlt,btemp
   959  0090BE  C0B7  F001         	movff	?_TFlt+1,btemp+1
   960  0090C2  0012               	return	
   961                           ;tacho.c: 237: }
   962  0090C4                     l85:
   963                           ;tacho.c: 241: {
   964                           ;tacho.c: 243: {
   965  0090C4  C0B6  F200         	movff	?_TFlt,F1431
   966  0090C8  C0B7  F201         	movff	?_TFlt+1,F1431+1
   967                           ;tacho.c: 245: StartTimTacho();
   968  0090CC  DE17               	call	_StartTimTacho	;wreg free
   969                           ;tacho.c: 246: krok=1;
   970  0090CE  0E01               	movlw	1
   971  0090D0  CFE8 FF3C          	movff	wreg,F1432
   972                           ;tacho.c: 247: break;
   973  0090D4  D00E               	goto	l83
   974  0090D6                     l86:
   975                           ;tacho.c: 248: }
   976                           ;tacho.c: 250: {
   977  0090D6  DE17               	call	_TimTacho	;wreg free
   978  0090D8  6E00               	movwf	btemp,c
   979  0090DA  0E21               	movlw	33
   980  0090DC  5C00               	subwf	btemp,w,c
   981  0090DE  E309               	bnc	l83
   982                           ;tacho.c: 252: {
   983                           ;tacho.c: 254: }
   984  0090E0  010F               	movlb	F1432 shr (0+8)
   985  0090E2  6B3C               	clrf	F1432& (0+255),b
   986                           ;tacho.c: 256: }
   987  0090E4  D006               	goto	l83
   988  0090E6                     l84:
   989  0090E6  CF3C  FFE8         	movff	F1432,wreg
   990  0090EA  0A00               	xorlw	0
   991  0090EC  E0EB               	bz	l85
   992  0090EE  0A01               	xorlw	1
   993  0090F0  E0F2               	bz	l86
   994  0090F2                     l83:
   995                           ;tacho.c: 258: return bwnk;
   996  0090F2  C200  F000         	movff	F1431,btemp
   997  0090F6  C201  F001         	movff	F1431+1,btemp+1
   998  0090FA  0012               	return	
   999                           ;tacho.c: 259: }
  1000  0090FC                     __end_of_TFlt:
  1001                           ;tacho.c: 263: void PomiarVNT(void)
  1002                           ;tacho.c: 264: {
  1003  0090FC                     _PomiarVNT:
  1004  000000                     
  1005                           ;tacho.c: 265: static unsigned int tvv[20];
  1006  0090FC  0102               	movlb	_nw0 shr (0+8)	;volatile
  1007  0090FE  5116               	movf	_nw0& (0+255),w,b	;volatile
  1008  009100  1117               	iorwf	(_nw0+1)& (0+255),w,b	;volatile
  1009  009102  E101 D143          	bz	l89
  1010                           ;tacho.c: 273: {
  1011  009106  EE02  F016         	lfsr	0,_nw0	;volatile
  1012  00910A  6AEE               	clrf	postinc0,c
  1013  00910C  6AEE               	clrf	postinc0,c
  1014                           ;tacho.c: 275: if(zr0) wynik=0;
  1015  00910E  5124               	movf	_zr0& (0+255),w,b	;volatile
  1016  009110  1125               	iorwf	(_zr0+1)& (0+255),w,b	;volatile
  1017  009112  E005               	bz	l90
  1018  009114  EE02  F022         	lfsr	0,_wynik
  1019  009118  6AEE               	clrf	postinc0,c
  1020  00911A  6AEE               	clrf	postinc0,c
  1021  00911C  D005               	goto	l91
  1022  00911E                     l90:
  1023                           ;tacho.c: 276: else
  1024  00911E  C210  F222         	movff	_in0,_wynik	;volatile
  1025  009122  C211  F223         	movff	_in0+1,_wynik+1	;volatile
  1026                           ;tacho.c: 279: zero=0;
  1027  009126  9457               	bcf	_zero/(0+8),_zero& (0+7),c
  1028  009128                     l91:
  1029                           ;tacho.c: 280: }
  1030  009128  C222  FFF3         	movff	_wynik,prodl
  1031  00912C  C223  FFF4         	movff	_wynik+1,prodh
  1032                           ;tacho.c: 283: if(zr0)
  1033  009130  0102               	movlb	_zr0 shr (0+8)	;volatile
  1034  009132  5124               	movf	_zr0& (0+255),w,b	;volatile
  1035  009134  1125               	iorwf	(_zr0+1)& (0+255),w,b	;volatile
  1036  009136  E020               	bz	l92
  1037                           ;tacho.c: 284: {
  1038  009138  8457               	bsf	_zero/(0+8),_zero& (0+7),c
  1039                           ;tacho.c: 286: for(i=0;i<20;i++)
  1040  00913A  6AD9               	clrf	fsr2l,c
  1041  00913C                     l93:
  1042                           ;tacho.c: 287: {
  1043  00913C  50D9               	movf	fsr2l,w,c
  1044  00913E  0D02               	mullw	2
  1045  009140  0E86               	movlw	low _tnp
  1046  009142  24F3               	addwf	prodl,w,c
  1047  009144  6EE9               	movwf	fsr0l,c
  1048  009146  0E02               	movlw	high _tnp
  1049  009148  20F4               	addwfc	prodh,w,c
  1050  00914A  6EEA               	movwf	fsr0h,c
  1051  00914C  68EE               	setf	postinc0,c
  1052  00914E  68ED               	setf	postdec0,c
  1053                           ;tacho.c: 289: tvv[i]=0;
  1054  009150  50D9               	movf	fsr2l,w,c
  1055  009152  0D02               	mullw	2
  1056  009154  0E5E               	movlw	low F1435
  1057  009156  24F3               	addwf	prodl,w,c
  1058  009158  6EE9               	movwf	fsr0l,c
  1059  00915A  0E02               	movlw	high F1435
  1060  00915C  20F4               	addwfc	prodh,w,c
  1061  00915E  6EEA               	movwf	fsr0h,c
  1062  009160  6AEE               	clrf	postinc0,c
  1063  009162  6AED               	clrf	postdec0,c
  1064  009164  2AD9               	incf	fsr2l,f,c
  1065  009166  0E13               	movlw	19
  1066  009168  64D9               	cpfsgt	fsr2l,c
  1067  00916A  D7E8               	goto	l93
  1068                           ;tacho.c: 290: }
  1069  00916C  EE02  F002         	lfsr	0,F1437
  1070  009170  6AEE               	clrf	postinc0,c
  1071  009172  6AEE               	clrf	postinc0,c
  1072                           ;tacho.c: 292: wnk=0xffff;
  1073  009174  68F3               	setf	prodl,c
  1074  009176  68F4               	setf	prodh,c
  1075  009178                     l92:
  1076                           ;tacho.c: 293: }
  1077  009178  0100               	movlb	__Lparam shr (0+8)
  1078  00917A  0E86               	movlw	low _tnp
  1079  00917C  6FB6               	movwf	?_AddTab^(__Lparam& (0+65280)),b
  1080  00917E  0E02               	movlw	high _tnp
  1081  009180  6FB7               	movwf	(?_AddTab+1)^(__Lparam& (0+65280)),b
  1082  009182  0E0B               	movlw	11
  1083  009184  6FB8               	movwf	(?_AddTab+2)^(__Lparam& (0+65280)),b
  1084  009186  CFF3 F0B9          	movff	prodl,?_AddTab+3
  1085  00918A  CFF4 F0BA          	movff	prodh,?_AddTab+4
  1086  00918E  DDBF               	call	_AddTab	;wreg free
  1087                           ;tacho.c: 296: wnk=FindPropVal(tnp,11);
  1088  009190  0100               	movlb	__Lparam shr (0+8)
  1089  009192  0E86               	movlw	low _tnp
  1090  009194  6FB6               	movwf	?_FindPropVal^(__Lparam& (0+65280)),b
  1091  009196  0E02               	movlw	high _tnp
  1092  009198  6FB7               	movwf	(?_FindPropVal+1)^(__Lparam& (0+65280)),b
  1093  00919A  0E0B               	movlw	11
  1094  00919C  6FB8               	movwf	(?_FindPropVal+2)^(__Lparam& (0+65280)),b
  1095  00919E  DDF2               	call	_FindPropVal	;wreg free
  1096  0091A0  C000  F0A9         	movff	btemp,?a_PomiarVNT
  1097  0091A4  C001  F0AA         	movff	btemp+1,?a_PomiarVNT+1
  1098                           ;tacho.c: 297: wnk2=(unsigned int)(round(((1000.
      +                          0/((float)wnk/4))*60.0)));
  1099  0091A8  6A00               	clrf	btemp,c
  1100  0091AA  0E70               	movlw	112
  1101  0091AC  6E01               	movwf	btemp+1,c
  1102  0091AE  0E42               	movlw	66
  1103  0091B0  6E02               	movwf	btemp+2,c
  1104  0091B2  C000  F0AD         	movff	btemp,?a_PomiarVNT+4
  1105  0091B6  C001  F0AE         	movff	btemp+1,?a_PomiarVNT+5
  1106  0091BA  C002  F0AF         	movff	btemp+2,?a_PomiarVNT+6
  1107  0091BE  6A00               	clrf	btemp,c
  1108  0091C0  0E80               	movlw	128
  1109  0091C2  6E01               	movwf	btemp+1,c
  1110  0091C4  0E40               	movlw	64
  1111  0091C6  6E02               	movwf	btemp+2,c
  1112  0091C8  C000  F0B0         	movff	btemp,?a_PomiarVNT+7
  1113  0091CC  C001  F0B1         	movff	btemp+1,?a_PomiarVNT+8
  1114  0091D0  C002  F0B2         	movff	btemp+2,?a_PomiarVNT+9
  1115  0091D4  C0A9  F000         	movff	?a_PomiarVNT,btemp
  1116  0091D8  C0AA  F001         	movff	?a_PomiarVNT+1,btemp+1
  1117  0091DC  ECE7  F06D         	call	lwtoft
  1118  0091E0  C0B0  F003         	movff	?a_PomiarVNT+7,btemp+3
  1119  0091E4  C0B1  F004         	movff	?a_PomiarVNT+8,btemp+4
  1120  0091E8  C0B2  F005         	movff	?a_PomiarVNT+9,btemp+5
  1121  0091EC  ECAD  F06B         	call	ftdiv
  1122  0091F0  C000  F0B3         	movff	btemp,?a_PomiarVNT+10
  1123  0091F4  C001  F0B4         	movff	btemp+1,?a_PomiarVNT+11
  1124  0091F8  C002  F0B5         	movff	btemp+2,?a_PomiarVNT+12
  1125  0091FC  6A00               	clrf	btemp,c
  1126  0091FE  0E7A               	movlw	122
  1127  009200  6E01               	movwf	btemp+1,c
  1128  009202  0E44               	movlw	68
  1129  009204  6E02               	movwf	btemp+2,c
  1130  009206  C0B3  F003         	movff	?a_PomiarVNT+10,btemp+3
  1131  00920A  C0B4  F004         	movff	?a_PomiarVNT+11,btemp+4
  1132  00920E  C0B5  F005         	movff	?a_PomiarVNT+12,btemp+5
  1133  009212  ECAD  F06B         	call	ftdiv
  1134  009216  C0AD  F003         	movff	?a_PomiarVNT+4,btemp+3
  1135  00921A  C0AE  F004         	movff	?a_PomiarVNT+5,btemp+4
  1136  00921E  C0AF  F005         	movff	?a_PomiarVNT+6,btemp+5
  1137  009222  ECD1  F06A         	call	ftmul
  1138  009226  C000  F0B6         	movff	btemp,?_round
  1139  00922A  C001  F0B7         	movff	btemp+1,?_round+1
  1140  00922E  C002  F0B8         	movff	btemp+2,?_round+2
  1141  009232  EC30  F06C         	call	_round	;wreg free
  1142  009236  ECCD  F06C         	call	fttol
  1143  00923A  C000  F0AB         	movff	btemp,?a_PomiarVNT+2
  1144  00923E  C001  F0AC         	movff	btemp+1,?a_PomiarVNT+3
  1145                           ;tacho.c: 299: if(wnk2&&bwnk2!=wnk2)
  1146  009242  0100               	movlb	__Lparam shr (0+8)
  1147  009244  51AC               	movf	(?a_PomiarVNT+3)^(__Lparam& (0+65280)),w
  1148  009246  11AB               	iorwf	(?a_PomiarVNT+2)^(__Lparam& (0+65280)),w
  1149  009248  E048               	bz	l96
  1150  00924A  C202  F000         	movff	F1437,btemp
  1151  00924E  C203  F001         	movff	F1437+1,btemp+1
  1152  009252  51AC               	movf	(?a_PomiarVNT+3)^(__Lparam& (0+65280)),w
  1153  009254  1801               	xorwf	btemp+1,w,c
  1154  009256  E102               	bnz	u455
  1155  009258  51AB               	movf	(?a_PomiarVNT+2)^(__Lparam& (0+65280)),w
  1156  00925A  1800               	xorwf	btemp,w,c
  1157  00925C                     u455:
  1158  00925C  E03E               	bz	l96
  1159                           ;tacho.c: 300: {
  1160  00925E  C202  F000         	movff	F1437,btemp
  1161  009262  C203  F001         	movff	F1437+1,btemp+1
  1162  009266  0100               	movlb	__Lparam shr (0+8)
  1163  009268  5001               	movf	btemp+1,w,c
  1164  00926A  5DAC               	subwf	(?a_PomiarVNT+3)^(__Lparam& (0+65280)),w
  1165  00926C  E102               	bnz	u475
  1166  00926E  5000               	movf	btemp,w,c
  1167  009270  5DAB               	subwf	(?a_PomiarVNT+2)^(__Lparam& (0+65280)),w
  1168  009272                     u475:
  1169  009272  E218               	bc	l97
  1170                           ;tacho.c: 302: {
  1171  009274  C202  F000         	movff	F1437,btemp
  1172  009278  C203  F001         	movff	F1437+1,btemp+1
  1173  00927C  51AB               	movf	(?a_PomiarVNT+2)^(__Lparam& (0+65280)),w
  1174  00927E  5E00               	subwf	btemp,f,c
  1175  009280  51AC               	movf	(?a_PomiarVNT+3)^(__Lparam& (0+65280)),w
  1176  009282  5A01               	subwfb	btemp+1,f,c
  1177  009284  0E13               	movlw	19
  1178  009286  5C01               	subwf	btemp+1,w,c
  1179  009288  0E89               	movlw	137
  1180  00928A  B4D8               	btfsc	status,2,c
  1181  00928C  5C00               	subwf	btemp,w,c
  1182  00928E  E325               	bnc	l96
  1183                           ;tacho.c: 304: {
  1184  009290  0102               	movlb	F1437 shr (0+8)
  1185  009292  5102               	movf	F1437& (0+255),w,b
  1186  009294  1103               	iorwf	(F1437+1)& (0+255),w,b
  1187  009296  E003               	bz	l99
  1188  009298  0702               	decf	F1437& (0+255),f,b
  1189  00929A  0E00               	movlw	0
  1190  00929C  5B03               	subwfb	(F1437+1)& (0+255),f,b
  1191  00929E                     l99:
  1192                           ;tacho.c: 306: tkrk=0;
  1193  00929E  010F               	movlb	_tkrk shr (0+8)
  1194  0092A0  6B40               	clrf	_tkrk& (0+255),b
  1195                           ;tacho.c: 307: return;
  1196  0092A2  0012               	return	
  1197                           ;tacho.c: 308: }
  1198  0092A4                     l97:
  1199                           ;tacho.c: 310: else
  1200  0092A4  0100               	movlb	__Lparam shr (0+8)
  1201  0092A6  C202  FFE8         	movff	F1437,wreg
  1202  0092AA  5DAB               	subwf	(?a_PomiarVNT+2)^(__Lparam& (0+65280)),w
  1203  0092AC  6E00               	movwf	btemp,c
  1204  0092AE  C203  FFE8         	movff	F1437+1,wreg
  1205  0092B2  59AC               	subwfb	(?a_PomiarVNT+3)^(__Lparam& (0+65280)),w
  1206  0092B4  6E01               	movwf	btemp+1,c
  1207  0092B6  0E13               	movlw	19
  1208  0092B8  5C01               	subwf	btemp+1,w,c
  1209  0092BA  0E89               	movlw	137
  1210  0092BC  B4D8               	btfsc	status,2,c
  1211  0092BE  5C00               	subwf	btemp,w,c
  1212  0092C0  E30C               	bnc	l96
  1213                           ;tacho.c: 313: {
  1214  0092C2  0102               	movlb	F1437 shr (0+8)
  1215  0092C4  0E00               	movlw	0
  1216  0092C6  5D03               	subwf	(F1437+1)& (0+255),w,b
  1217  0092C8  0EFF               	movlw	255
  1218  0092CA  B4D8               	btfsc	status,2,c
  1219  0092CC  5D02               	subwf	F1437& (0+255),w,b
  1220  0092CE  E202               	bc	l102
  1221  0092D0  4B02               	infsnz	F1437& (0+255),f,b
  1222  0092D2  2B03               	incf	(F1437+1)& (0+255),f,b
  1223  0092D4                     l102:
  1224                           ;tacho.c: 315: tkrk=0;
  1225  0092D4  010F               	movlb	_tkrk shr (0+8)
  1226  0092D6  6B40               	clrf	_tkrk& (0+255),b
  1227                           ;tacho.c: 316: return;
  1228  0092D8  0012               	return	
  1229  0092DA                     l96:
  1230                           ;tacho.c: 317: }
  1231  0092DA  C0AB  F202         	movff	?a_PomiarVNT+2,F1437
  1232  0092DE  C0AC  F203         	movff	?a_PomiarVNT+3,F1437+1
  1233                           ;tacho.c: 322: AddTab(tvv,11,wnk2);
  1234  0092E2  0100               	movlb	__Lparam shr (0+8)
  1235  0092E4  0E5E               	movlw	low F1435
  1236  0092E6  6FB6               	movwf	?_AddTab^(__Lparam& (0+65280)),b
  1237  0092E8  0E02               	movlw	high F1435
  1238  0092EA  6FB7               	movwf	(?_AddTab+1)^(__Lparam& (0+65280)),b
  1239  0092EC  0E0B               	movlw	11
  1240  0092EE  6FB8               	movwf	(?_AddTab+2)^(__Lparam& (0+65280)),b
  1241  0092F0  C0AB  F0B9         	movff	?a_PomiarVNT+2,?_AddTab+3
  1242  0092F4  C0AC  F0BA         	movff	?a_PomiarVNT+3,?_AddTab+4
  1243  0092F8  DD0A               	call	_AddTab	;wreg free
  1244                           ;tacho.c: 323: wnk2=HistVal(tvv,11);
  1245  0092FA  0100               	movlb	__Lparam shr (0+8)
  1246  0092FC  0E5E               	movlw	low F1435
  1247  0092FE  6FB6               	movwf	?_HistVal^(__Lparam& (0+65280)),b
  1248  009300  0E02               	movlw	high F1435
  1249  009302  6FB7               	movwf	(?_HistVal+1)^(__Lparam& (0+65280)),b
  1250  009304  0E0B               	movlw	11
  1251  009306  6FB8               	movwf	(?_HistVal+2)^(__Lparam& (0+65280)),b
  1252  009308  DDFA               	call	_HistVal	;wreg free
  1253  00930A  C000  F0AB         	movff	btemp,?a_PomiarVNT+2
  1254  00930E  C001  F0AC         	movff	btemp+1,?a_PomiarVNT+3
  1255                           ;tacho.c: 324: M.rVVNT=TFlt(wnk2);
  1256  009312  C0AB  F0B6         	movff	?a_PomiarVNT+2,?_TFlt
  1257  009316  C0AC  F0B7         	movff	?a_PomiarVNT+3,?_TFlt+1
  1258  00931A  DE96               	call	_TFlt	;wreg free
  1259  00931C  C000  F323         	movff	btemp,_M+29
  1260  009320  C001  F324         	movff	btemp+1,_M+30
  1261                           ;tacho.c: 325: M.VVNT=(unsigned char)((M.rVVNT/1
      +                          00.0));
  1262  009324  6A00               	clrf	btemp,c
  1263  009326  0EC8               	movlw	200
  1264  009328  6E01               	movwf	btemp+1,c
  1265  00932A  0E42               	movlw	66
  1266  00932C  6E02               	movwf	btemp+2,c
  1267  00932E  C000  F0AD         	movff	btemp,?a_PomiarVNT+4
  1268  009332  C001  F0AE         	movff	btemp+1,?a_PomiarVNT+5
  1269  009336  C002  F0AF         	movff	btemp+2,?a_PomiarVNT+6
  1270  00933A  EE03  F023         	lfsr	0,_M+29
  1271  00933E  CFEE F000          	movff	postinc0,btemp
  1272  009342  CFED F001          	movff	postdec0,btemp+1
  1273  009346  ECE7  F06D         	call	lwtoft
  1274  00934A  C0AD  F003         	movff	?a_PomiarVNT+4,btemp+3
  1275  00934E  C0AE  F004         	movff	?a_PomiarVNT+5,btemp+4
  1276  009352  C0AF  F005         	movff	?a_PomiarVNT+6,btemp+5
  1277  009356  ECAD  F06B         	call	ftdiv
  1278  00935A  ECCD  F06C         	call	fttol
  1279  00935E  C000  F322         	movff	btemp,_M+28
  1280                           ;tacho.c: 326: if((M.rVVNT%100)>=70) M.VVNT+=1;
  1281  009362  0E64               	movlw	100
  1282  009364  6E02               	movwf	btemp+2,c
  1283  009366  6A03               	clrf	btemp+3,c
  1284  009368  EE03  F023         	lfsr	0,_M+29
  1285  00936C  CFEE F000          	movff	postinc0,btemp
  1286  009370  CFED F001          	movff	postdec0,btemp+1
  1287  009374  EC9A  F06C         	call	lwmod
  1288  009378  0E00               	movlw	0
  1289  00937A  5C01               	subwf	btemp+1,w,c
  1290  00937C  0E46               	movlw	70
  1291  00937E  B4D8               	btfsc	status,2,c
  1292  009380  5C00               	subwf	btemp,w,c
  1293  009382  E302               	bnc	l103
  1294  009384  0103               	movlb	(_M+28) shr (0+8)
  1295  009386  2B22               	incf	(_M+28)& (0+255),f,b
  1296  009388                     l103:
  1297                           ;tacho.c: 327: tkrk=0;
  1298  009388  010F               	movlb	_tkrk shr (0+8)
  1299  00938A  6B40               	clrf	_tkrk& (0+255),b
  1300  00938C                     l89:
  1301                           ;tacho.c: 328: }
  1302  00938C  D9CD               	call	_FPmVNT	;wreg free
  1303                           ;tacho.c: 331: RSDT1.outVNT=M.VVNT;
  1304  00938E  C322  F32E         	movff	_M+28,_RSDT1+8
  1305                           ;tacho.c: 332: }
  1306  009392  0012               	return	
  1307  009394                     __end_of_PomiarVNT:
  1308                           ;tacho.c: 336: void ClrDtV(void)
  1309                           ;tacho.c: 337: {
  1310  009394                     _ClrDtV:
  1311  000000                     
  1312                           ;tacho.c: 338: DVNT=0;
  1313  009394  EE02  F008         	lfsr	0,_DVNT	;volatile
  1314  009398  6AEE               	clrf	postinc0,c
  1315  00939A  6AEE               	clrf	postinc0,c
  1316                           ;tacho.c: 339: dDVNT=0;
  1317  00939C  EE02  F00E         	lfsr	0,_dDVNT	;volatile
  1318  0093A0  6AEE               	clrf	postinc0,c
  1319  0093A2  6AEE               	clrf	postinc0,c
  1320                           ;tacho.c: 340: tdDVNT=0;
  1321  0093A4  EE02  F018         	lfsr	0,_tdDVNT	;volatile
  1322  0093A8  6AEE               	clrf	postinc0,c
  1323  0093AA  6AEE               	clrf	postinc0,c
  1324                           ;tacho.c: 341: ddDVNT=0;
  1325  0093AC  EE02  F026         	lfsr	0,_ddDVNT	;volatile
  1326  0093B0  6AEE               	clrf	postinc0,c
  1327  0093B2  6AEE               	clrf	postinc0,c
  1328  0093B4  6AEE               	clrf	postinc0,c
  1329  0093B6  6AEE               	clrf	postinc0,c
  1330                           ;tacho.c: 342: v_t=0;
  1331  0093B8  EE02  F01E         	lfsr	0,_v_t	;volatile
  1332  0093BC  6AEE               	clrf	postinc0,c
  1333  0093BE  6AEE               	clrf	postinc0,c
  1334                           ;tacho.c: 343: v_dt=0;
  1335  0093C0  EE02  F01C         	lfsr	0,_v_dt	;volatile
  1336  0093C4  6AEE               	clrf	postinc0,c
  1337  0093C6  6AEE               	clrf	postinc0,c
  1338                           ;tacho.c: 344: v_tdt=0;
  1339  0093C8  EE02  F020         	lfsr	0,_v_tdt	;volatile
  1340  0093CC  6AEE               	clrf	postinc0,c
  1341  0093CE  6AEE               	clrf	postinc0,c
  1342                           ;tacho.c: 345: v_ddt=0;
  1343  0093D0  EE02  F02A         	lfsr	0,_v_ddt	;volatile
  1344  0093D4  6AEE               	clrf	postinc0,c
  1345  0093D6  6AEE               	clrf	postinc0,c
  1346  0093D8  6AEE               	clrf	postinc0,c
  1347  0093DA  6AEE               	clrf	postinc0,c
  1348                           ;tacho.c: 346: }
  1349  0093DC  0012               	return	
  1350  0093DE                     __end_of_ClrDtV:
  1351                           ;tacho.c: 348: void PredkoscZmianVNT(void)
  1352                           ;tacho.c: 349: {
  1353  0093DE                     _PredkoscZmianVNT:
  1354  000000                     
  1355                           ;tacho.c: 350: static unsigned int ffv;
  1356  0093DE  B683               	btfsc	3971,3,c	;volatile
  1357  0093E0  D007               	goto	l106
  1358                           ;tacho.c: 356: {
  1359  0093E2  EE02  F004         	lfsr	0,F1447
  1360  0093E6  6AEE               	clrf	postinc0,c
  1361  0093E8  6AEE               	clrf	postinc0,c
  1362                           ;tacho.c: 358: indff=0;
  1363  0093EA  010F               	movlb	F1448 shr (0+8)
  1364  0093EC  6B3D               	clrf	F1448& (0+255),b
  1365                           ;tacho.c: 359: }
  1366  0093EE  D04E               	goto	l107
  1367  0093F0                     l106:
  1368                           ;tacho.c: 360: else
  1369  0093F0  010F               	movlb	F1448 shr (0+8)
  1370  0093F2  533D               	movf	F1448& (0+255),f,b
  1371  0093F4  E10F               	bnz	l108
  1372                           ;tacho.c: 363: {
  1373  0093F6  6AD9               	clrf	fsr2l,c
  1374  0093F8                     l109:
  1375  0093F8  50D9               	movf	fsr2l,w,c
  1376  0093FA  0D02               	mullw	2
  1377  0093FC  0E46               	movlw	low _wvv
  1378  0093FE  24F3               	addwf	prodl,w,c
  1379  009400  6EE9               	movwf	fsr0l,c
  1380  009402  0E02               	movlw	high _wvv
  1381  009404  20F4               	addwfc	prodh,w,c
  1382  009406  6EEA               	movwf	fsr0h,c
  1383  009408  6AEE               	clrf	postinc0,c
  1384  00940A  6AED               	clrf	postdec0,c
  1385  00940C  2AD9               	incf	fsr2l,f,c
  1386  00940E  0E09               	movlw	9
  1387  009410  64D9               	cpfsgt	fsr2l,c
  1388  009412  D7F2               	goto	l109
  1389  009414                     l108:
  1390                           ;tacho.c: 365: }
  1391  009414  010F               	movlb	F1448 shr (0+8)
  1392  009416  2B3D               	incf	F1448& (0+255),f,b
  1393                           ;tacho.c: 367: if(indff>=9)
  1394  009418  0E08               	movlw	8
  1395  00941A  653D               	cpfsgt	F1448& (0+255),b
  1396  00941C  D01C               	goto	l112
  1397                           ;tacho.c: 368: {
  1398  00941E  0E09               	movlw	9
  1399  009420  CFE8 FF3D          	movff	wreg,F1448
  1400                           ;tacho.c: 370: for(i=0;i<9;i++) wvv[i]=wvv[i+1];
  1401  009424  6AD9               	clrf	fsr2l,c
  1402  009426                     l113:
  1403  009426  50D9               	movf	fsr2l,w,c
  1404  009428  0D02               	mullw	2
  1405  00942A  0E48               	movlw	low (_wvv+2)
  1406  00942C  24F3               	addwf	prodl,w,c
  1407  00942E  6EE1               	movwf	fsr1l,c
  1408  009430  0E02               	movlw	high (_wvv+2)
  1409  009432  20F4               	addwfc	prodh,w,c
  1410  009434  6EE2               	movwf	fsr1h,c
  1411  009436  50D9               	movf	fsr2l,w,c
  1412  009438  0D02               	mullw	2
  1413  00943A  0E46               	movlw	low _wvv
  1414  00943C  24F3               	addwf	prodl,w,c
  1415  00943E  6EE9               	movwf	fsr0l,c
  1416  009440  0E02               	movlw	high _wvv
  1417  009442  20F4               	addwfc	prodh,w,c
  1418  009444  6EEA               	movwf	fsr0h,c
  1419  009446  CFE6 FFEE          	movff	postinc1,postinc0
  1420  00944A  CFE5 FFED          	movff	postdec1,postdec0
  1421  00944E  2AD9               	incf	fsr2l,f,c
  1422  009450  0E08               	movlw	8
  1423  009452  64D9               	cpfsgt	fsr2l,c
  1424  009454  D7E8               	goto	l113
  1425  009456                     l112:
  1426                           ;tacho.c: 371: }
  1427  009456  EE03  F023         	lfsr	0,_M+29
  1428  00945A  CFEE F000          	movff	postinc0,btemp
  1429  00945E  CFED F001          	movff	postdec0,btemp+1
  1430  009462  C204  FFE8         	movff	F1447,wreg
  1431  009466  5C00               	subwf	btemp,w,c
  1432  009468  6E02               	movwf	btemp+2,c
  1433  00946A  C205  FFE8         	movff	F1447+1,wreg
  1434  00946E  5801               	subwfb	btemp+1,w,c
  1435  009470  6E03               	movwf	btemp+3,c
  1436  009472  CF3D  FFE8         	movff	F1448,wreg
  1437  009476  0D02               	mullw	2
  1438  009478  0E46               	movlw	low _wvv
  1439  00947A  24F3               	addwf	prodl,w,c
  1440  00947C  6EE9               	movwf	fsr0l,c
  1441  00947E  0E02               	movlw	high _wvv
  1442  009480  20F4               	addwfc	prodh,w,c
  1443  009482  6EEA               	movwf	fsr0h,c
  1444  009484  C002  FFEE         	movff	btemp+2,postinc0
  1445  009488  C003  FFED         	movff	btemp+3,postdec0
  1446  00948C                     l107:
  1447                           ;tacho.c: 373: }
  1448  00948C  C323  F204         	movff	_M+29,F1447
  1449  009490  C324  F205         	movff	_M+30,F1447+1
  1450                           ;tacho.c: 375: w=0;
  1451  009494  0100               	movlb	__Lparam shr (0+8)
  1452  009496  6BBA               	clrf	?a_PredkoscZmianVNT^(__Lparam& (0+65280)),
      +                          b
  1453  009498  6BBB               	clrf	(?a_PredkoscZmianVNT+1)^(__Lparam& (0+6528
      +                          0)),b
  1454  00949A  6BBC               	clrf	(?a_PredkoscZmianVNT+2)^(__Lparam& (0+6528
      +                          0)),b
  1455  00949C  6BBD               	clrf	(?a_PredkoscZmianVNT+3)^(__Lparam& (0+6528
      +                          0)),b
  1456                           ;tacho.c: 376: for(i=0;i<10;i++) {if(w+wvv[i]<=0
      +                          xff) w+=wvv[i];}
  1457  00949E  6AD9               	clrf	fsr2l,c
  1458  0094A0                     l116:
  1459  0094A0  50D9               	movf	fsr2l,w,c
  1460  0094A2  0D02               	mullw	2
  1461  0094A4  0E46               	movlw	low _wvv
  1462  0094A6  24F3               	addwf	prodl,w,c
  1463  0094A8  6EE9               	movwf	fsr0l,c
  1464  0094AA  0E02               	movlw	high _wvv
  1465  0094AC  20F4               	addwfc	prodh,w,c
  1466  0094AE  6EEA               	movwf	fsr0h,c
  1467  0094B0  CFEE F000          	movff	postinc0,btemp
  1468  0094B4  CFED F001          	movff	postdec0,btemp+1
  1469  0094B8  0E00               	movlw	0
  1470  0094BA  BE01               	btfsc	btemp+1,7,c
  1471  0094BC  0EFF               	movlw	255
  1472  0094BE  6E02               	movwf	btemp+2,c
  1473  0094C0  6E03               	movwf	btemp+3,c
  1474  0094C2  0100               	movlb	__Lparam shr (0+8)
  1475  0094C4  51BA               	movf	?a_PredkoscZmianVNT^(__Lparam& (0+65280)),
      +                          w
  1476  0094C6  2400               	addwf	btemp,w,c
  1477  0094C8  6E04               	movwf	btemp+4,c
  1478  0094CA  51BB               	movf	(?a_PredkoscZmianVNT+1)^(__Lparam& (0+6528
      +                          0)),w
  1479  0094CC  2001               	addwfc	btemp+1,w,c
  1480  0094CE  6E05               	movwf	btemp+5,c
  1481  0094D0  51BC               	movf	(?a_PredkoscZmianVNT+2)^(__Lparam& (0+6528
      +                          0)),w
  1482  0094D2  2002               	addwfc	btemp+2,w,c
  1483  0094D4  6E06               	movwf	btemp+6,c
  1484  0094D6  51BD               	movf	(?a_PredkoscZmianVNT+3)^(__Lparam& (0+6528
      +                          0)),w
  1485  0094D8  2003               	addwfc	btemp+3,w,c
  1486  0094DA  6E07               	movwf	btemp+7,c
  1487  0094DC  5007               	movf	btemp+7,w,c
  1488  0094DE  0A80               	xorlw	128
  1489  0094E0  0F80               	addlw	128
  1490  0094E2  E108               	bnz	u585
  1491  0094E4  0E00               	movlw	0
  1492  0094E6  5C06               	subwf	btemp+6,w,c
  1493  0094E8  E105               	bnz	u585
  1494  0094EA  0E01               	movlw	1
  1495  0094EC  5C05               	subwf	btemp+5,w,c
  1496  0094EE  E102               	bnz	u585
  1497  0094F0  0E00               	movlw	0
  1498  0094F2  5C04               	subwf	btemp+4,w,c
  1499  0094F4                     u585:
  1500  0094F4  E219               	bc	l119
  1501  0094F6  50D9               	movf	fsr2l,w,c
  1502  0094F8  0D02               	mullw	2
  1503  0094FA  0E46               	movlw	low _wvv
  1504  0094FC  24F3               	addwf	prodl,w,c
  1505  0094FE  6EE9               	movwf	fsr0l,c
  1506  009500  0E02               	movlw	high _wvv
  1507  009502  20F4               	addwfc	prodh,w,c
  1508  009504  6EEA               	movwf	fsr0h,c
  1509  009506  CFEE F000          	movff	postinc0,btemp
  1510  00950A  CFED F001          	movff	postdec0,btemp+1
  1511  00950E  0E00               	movlw	0
  1512  009510  BE01               	btfsc	btemp+1,7,c
  1513  009512  0EFF               	movlw	255
  1514  009514  6E02               	movwf	btemp+2,c
  1515  009516  6E03               	movwf	btemp+3,c
  1516  009518  5000               	movf	btemp,w,c
  1517  00951A  27BA               	addwf	?a_PredkoscZmianVNT^(__Lparam& (0+65280))
      +                          ,f,b
  1518  00951C  5001               	movf	btemp+1,w,c
  1519  00951E  23BB               	addwfc	(?a_PredkoscZmianVNT+1)^(__Lparam& (0+65
      +                          280)),f,b
  1520  009520  5002               	movf	btemp+2,w,c
  1521  009522  23BC               	addwfc	(?a_PredkoscZmianVNT+2)^(__Lparam& (0+65
      +                          280)),f,b
  1522  009524  5003               	movf	btemp+3,w,c
  1523  009526  23BD               	addwfc	(?a_PredkoscZmianVNT+3)^(__Lparam& (0+65
      +                          280)),f,b
  1524  009528                     l119:
  1525  009528  2AD9               	incf	fsr2l,f,c
  1526  00952A  0E09               	movlw	9
  1527  00952C  64D9               	cpfsgt	fsr2l,c
  1528  00952E  D7B8               	goto	l116
  1529                           ;tacho.c: 377: ddDVNT=w;
  1530  009530  C0BA  F226         	movff	?a_PredkoscZmianVNT,_ddDVNT	;volatile
  1531  009534  C0BB  F227         	movff	?a_PredkoscZmianVNT+1,_ddDVNT+1	;volatile
  1532  009538  C0BC  F228         	movff	?a_PredkoscZmianVNT+2,_ddDVNT+2	;volatile
  1533  00953C  C0BD  F229         	movff	?a_PredkoscZmianVNT+3,_ddDVNT+3	;volatile
  1534                           ;tacho.c: 378: }
  1535  009540  0C09               	retlw	9
  1536  009542                     __end_of_PredkoscZmianVNT:
  1537                           ;tacho.c: 381: void FltParVNT(void)
  1538                           ;tacho.c: 382: {
  1539  009542                     _FltParVNT:
  1540  000000                     
  1541                           ;tacho.c: 383: static unsigned char indv,indtm;
  1542  009542  EE03  F023         	lfsr	0,_M+29
  1543  009546  CFEE F002          	movff	postinc0,btemp+2
  1544  00954A  CFED F003          	movff	postdec0,btemp+3
  1545  00954E  C206  F000         	movff	F1455,btemp
  1546  009552  C207  F001         	movff	F1455+1,btemp+1
  1547  009556  5003               	movf	btemp+3,w,c
  1548  009558  5C01               	subwf	btemp+1,w,c
  1549  00955A  E102               	bnz	u605
  1550  00955C  5002               	movf	btemp+2,w,c
  1551  00955E  5C00               	subwf	btemp,w,c
  1552  009560                     u605:
  1553  009560  E20D               	bc	l121
  1554  009562  EE03  F023         	lfsr	0,_M+29
  1555  009566  CFEE F000          	movff	postinc0,btemp
  1556  00956A  CFED F001          	movff	postdec0,btemp+1
  1557  00956E  C206  FFE8         	movff	F1455,wreg
  1558  009572  5C00               	subwf	btemp,w,c
  1559  009574  6EF3               	movwf	prodl,c
  1560  009576  C207  FFE8         	movff	F1455+1,wreg
  1561  00957A  D00A               	goto	L1
  1562  00957C                     l121:
  1563                           ;tacho.c: 391: else wr=fv-M.rVVNT;
  1564  00957C  C206  F000         	movff	F1455,btemp
  1565  009580  C207  F001         	movff	F1455+1,btemp+1
  1566  009584  C323  FFE8         	movff	_M+29,wreg
  1567  009588  5C00               	subwf	btemp,w,c
  1568  00958A  6EF3               	movwf	prodl,c
  1569  00958C  C324  FFE8         	movff	_M+30,wreg
  1570  009590                     L1:
  1571  009590  5801               	subwfb	btemp+1,w,c
  1572  009592  6EF4               	movwf	prodh,c
  1573                           ;tacho.c: 392: if(wr) indv++;
  1574  009594  50F4               	movf	prodh,w,c
  1575  009596  10F3               	iorwf	prodl,w,c
  1576  009598  E002               	bz	l123
  1577  00959A  010F               	movlb	F1453 shr (0+8)
  1578  00959C  2B3E               	incf	F1453& (0+255),f,b
  1579  00959E                     l123:
  1580                           ;tacho.c: 393: if(wr>=2) indv=10;
  1581  00959E  0E00               	movlw	0
  1582  0095A0  5CF4               	subwf	prodh,w,c
  1583  0095A2  0E02               	movlw	2
  1584  0095A4  B4D8               	btfsc	status,2,c
  1585  0095A6  5CF3               	subwf	prodl,w,c
  1586  0095A8  E303               	bnc	l124
  1587  0095AA  0E0A               	movlw	10
  1588  0095AC  CFE8 FF3E          	movff	wreg,F1453
  1589  0095B0                     l124:
  1590                           ;tacho.c: 394: PredkoscZmianVNT();
  1591  0095B0  DF16               	call	_PredkoscZmianVNT	;wreg free
  1592                           ;tacho.c: 399: for(i=0;i<9;i++) wv[i]=wv[i+1];
  1593  0095B2  6AF3               	clrf	prodl,c
  1594  0095B4  6AF4               	clrf	prodh,c
  1595  0095B6                     l125:
  1596  0095B6  90D8               	bcf	status,0,c
  1597  0095B8  34F3               	rlcf	prodl,w,c
  1598  0095BA  6E00               	movwf	btemp,c
  1599  0095BC  34F4               	rlcf	prodh,w,c
  1600  0095BE  6E01               	movwf	btemp+1,c
  1601  0095C0  0E30               	movlw	low (_wv+2)
  1602  0095C2  2400               	addwf	btemp,w,c
  1603  0095C4  6EE1               	movwf	fsr1l,c
  1604  0095C6  0E02               	movlw	high (_wv+2)
  1605  0095C8  2001               	addwfc	btemp+1,w,c
  1606  0095CA  6EE2               	movwf	fsr1h,c
  1607  0095CC  90D8               	bcf	status,0,c
  1608  0095CE  34F3               	rlcf	prodl,w,c
  1609  0095D0  6E00               	movwf	btemp,c
  1610  0095D2  34F4               	rlcf	prodh,w,c
  1611  0095D4  6E01               	movwf	btemp+1,c
  1612  0095D6  0E2E               	movlw	low _wv
  1613  0095D8  2400               	addwf	btemp,w,c
  1614  0095DA  6EE9               	movwf	fsr0l,c
  1615  0095DC  0E02               	movlw	high _wv
  1616  0095DE  2001               	addwfc	btemp+1,w,c
  1617  0095E0  6EEA               	movwf	fsr0h,c
  1618  0095E2  CFE6 FFEE          	movff	postinc1,postinc0
  1619  0095E6  CFE5 FFED          	movff	postdec1,postdec0
  1620  0095EA  4AF3               	infsnz	prodl,f,c
  1621  0095EC  2AF4               	incf	prodh,f,c
  1622  0095EE  0E00               	movlw	0
  1623  0095F0  5CF4               	subwf	prodh,w,c
  1624  0095F2  0E09               	movlw	9
  1625  0095F4  B4D8               	btfsc	status,2,c
  1626  0095F6  5CF3               	subwf	prodl,w,c
  1627  0095F8  E3DE               	bnc	l125
  1628                           ;tacho.c: 400: wv[9]=M.rVVNT;
  1629  0095FA  C323  F240         	movff	_M+29,_wv+18
  1630  0095FE  C324  F241         	movff	_M+30,_wv+19
  1631                           ;tacho.c: 401: www=0;
  1632  009602  0100               	movlb	__Lparam shr (0+8)
  1633  009604  6BB6               	clrf	?a_FltParVNT^(__Lparam& (0+65280)),b
  1634  009606  6BB7               	clrf	(?a_FltParVNT+1)^(__Lparam& (0+65280)),b
  1635  009608  6BB8               	clrf	(?a_FltParVNT+2)^(__Lparam& (0+65280)),b
  1636  00960A  6BB9               	clrf	(?a_FltParVNT+3)^(__Lparam& (0+65280)),b
  1637                           ;tacho.c: 402: for(i=0;i<9;i++) www+=wv[i];
  1638  00960C  6AF3               	clrf	prodl,c
  1639  00960E  6AF4               	clrf	prodh,c
  1640  009610                     l128:
  1641  009610  90D8               	bcf	status,0,c
  1642  009612  34F3               	rlcf	prodl,w,c
  1643  009614  6E00               	movwf	btemp,c
  1644  009616  34F4               	rlcf	prodh,w,c
  1645  009618  6E01               	movwf	btemp+1,c
  1646  00961A  0E2E               	movlw	low _wv
  1647  00961C  2400               	addwf	btemp,w,c
  1648  00961E  6EE9               	movwf	fsr0l,c
  1649  009620  0E02               	movlw	high _wv
  1650  009622  2001               	addwfc	btemp+1,w,c
  1651  009624  6EEA               	movwf	fsr0h,c
  1652  009626  CFEE F000          	movff	postinc0,btemp
  1653  00962A  CFED F001          	movff	postdec0,btemp+1
  1654  00962E  0E00               	movlw	0
  1655  009630  BE01               	btfsc	btemp+1,7,c
  1656  009632  0EFF               	movlw	255
  1657  009634  6E02               	movwf	btemp+2,c
  1658  009636  6E03               	movwf	btemp+3,c
  1659  009638  0100               	movlb	__Lparam shr (0+8)
  1660  00963A  5000               	movf	btemp,w,c
  1661  00963C  27B6               	addwf	?a_FltParVNT^(__Lparam& (0+65280)),f,b
  1662  00963E  5001               	movf	btemp+1,w,c
  1663  009640  23B7               	addwfc	(?a_FltParVNT+1)^(__Lparam& (0+65280)),f
      +                          ,b
  1664  009642  5002               	movf	btemp+2,w,c
  1665  009644  23B8               	addwfc	(?a_FltParVNT+2)^(__Lparam& (0+65280)),f
      +                          ,b
  1666  009646  5003               	movf	btemp+3,w,c
  1667  009648  23B9               	addwfc	(?a_FltParVNT+3)^(__Lparam& (0+65280)),f
      +                          ,b
  1668  00964A  4AF3               	infsnz	prodl,f,c
  1669  00964C  2AF4               	incf	prodh,f,c
  1670  00964E  0E00               	movlw	0
  1671  009650  5CF4               	subwf	prodh,w,c
  1672  009652  0E09               	movlw	9
  1673  009654  B4D8               	btfsc	status,2,c
  1674  009656  5CF3               	subwf	prodl,w,c
  1675  009658  E3DB               	bnc	l128
  1676                           ;tacho.c: 403: tdDVNT=wv[9]-www/9;
  1677  00965A  0E09               	movlw	9
  1678  00965C  6E04               	movwf	btemp+4,c
  1679  00965E  6A05               	clrf	btemp+5,c
  1680  009660  6A06               	clrf	btemp+6,c
  1681  009662  6A07               	clrf	btemp+7,c
  1682  009664  C0B6  F000         	movff	?a_FltParVNT,btemp
  1683  009668  C0B7  F001         	movff	?a_FltParVNT+1,btemp+1
  1684  00966C  C0B8  F002         	movff	?a_FltParVNT+2,btemp+2
  1685  009670  C0B9  F003         	movff	?a_FltParVNT+3,btemp+3
  1686  009674  EC76  F06A         	call	lldiv
  1687  009678  C000  F004         	movff	btemp,btemp+4
  1688  00967C  C001  F005         	movff	btemp+1,btemp+5
  1689  009680  C002  F006         	movff	btemp+2,btemp+6
  1690  009684  C003  F007         	movff	btemp+3,btemp+7
  1691  009688  EE02  F040         	lfsr	0,_wv+18
  1692  00968C  CFEE F000          	movff	postinc0,btemp
  1693  009690  CFED F001          	movff	postdec0,btemp+1
  1694  009694  5004               	movf	btemp+4,w,c
  1695  009696  5C00               	subwf	btemp,w,c
  1696  009698  CFE8 F218          	movff	wreg,_tdDVNT	;volatile
  1697  00969C  5005               	movf	btemp+5,w,c
  1698  00969E  5801               	subwfb	btemp+1,w,c
  1699  0096A0  CFE8 F219          	movff	wreg,_tdDVNT+1	;volatile
  1700                           ;tacho.c: 404: if(tdDVNT>0&&tdDVNT<=3) tdDVNT=0;
  1701  0096A4  0102               	movlb	_tdDVNT shr (0+8)	;volatile
  1702  0096A6  5119               	movf	(_tdDVNT+1)& (0+255),w,b	;volatile
  1703  0096A8  0A80               	xorlw	128
  1704  0096AA  0F80               	addlw	128
  1705  0096AC  0E01               	movlw	1
  1706  0096AE  B4D8               	btfsc	status,2,c
  1707  0096B0  5D18               	subwf	_tdDVNT& (0+255),w,b	;volatile
  1708  0096B2  E30B               	bnc	l131
  1709  0096B4  5119               	movf	(_tdDVNT+1)& (0+255),w,b	;volatile
  1710  0096B6  0A80               	xorlw	128
  1711  0096B8  0F80               	addlw	128
  1712  0096BA  0E04               	movlw	4
  1713  0096BC  B4D8               	btfsc	status,2,c
  1714  0096BE  5D18               	subwf	_tdDVNT& (0+255),w,b	;volatile
  1715  0096C0  E204               	bc	l131
  1716  0096C2  EE02  F018         	lfsr	0,_tdDVNT	;volatile
  1717  0096C6  6AEE               	clrf	postinc0,c
  1718  0096C8  6AEE               	clrf	postinc0,c
  1719  0096CA                     l131:
  1720                           ;tacho.c: 405: if(tdDVNT<0&&tdDVNT>=-3) tdDVNT=0
      +                          ;
  1721  0096CA  0102               	movlb	_tdDVNT shr (0+8)	;volatile
  1722  0096CC  AF19               	btfss	(_tdDVNT+1)& (0+255),7,b	;volatile
  1723  0096CE  D00B               	goto	l132
  1724  0096D0  5119               	movf	(_tdDVNT+1)& (0+255),w,b	;volatile
  1725  0096D2  0A80               	xorlw	128
  1726  0096D4  0F81               	addlw	-127
  1727  0096D6  0EFD               	movlw	253
  1728  0096D8  B4D8               	btfsc	status,2,c
  1729  0096DA  5D18               	subwf	_tdDVNT& (0+255),w,b	;volatile
  1730  0096DC  E304               	bnc	l132
  1731  0096DE  EE02  F018         	lfsr	0,_tdDVNT	;volatile
  1732  0096E2  6AEE               	clrf	postinc0,c
  1733  0096E4  6AEE               	clrf	postinc0,c
  1734  0096E6                     l132:
  1735                           ;tacho.c: 409: indtm++;
  1736  0096E6  010F               	movlb	F1454 shr (0+8)
  1737  0096E8  2B3F               	incf	F1454& (0+255),f,b
  1738                           ;tacho.c: 410: if(indtm>9)
  1739  0096EA  0E09               	movlw	9
  1740  0096EC  653F               	cpfsgt	F1454& (0+255),b
  1741  0096EE  0C09               	retlw	9
  1742                           ;tacho.c: 411: {
  1743  0096F0  6B3F               	clrf	F1454& (0+255),b
  1744                           ;tacho.c: 414: if(indv<=7)
  1745  0096F2  0E08               	movlw	8
  1746  0096F4  010F               	movlb	F1453 shr (0+8)
  1747  0096F6  613E               	cpfslt	F1453& (0+255),b
  1748  0096F8  D005               	goto	l134
  1749                           ;tacho.c: 415: {
  1750  0096FA  EE02  F00E         	lfsr	0,_dDVNT	;volatile
  1751  0096FE  6AEE               	clrf	postinc0,c
  1752  009700  6AEE               	clrf	postinc0,c
  1753                           ;tacho.c: 417: }
  1754  009702  D00F               	goto	l135
  1755  009704                     l134:
  1756                           ;tacho.c: 418: else
  1757  009704  0103               	movlb	(_M+29) shr (0+8)
  1758  009706  C206  FFE8         	movff	F1455,wreg
  1759  00970A  5D23               	subwf	(_M+29)& (0+255),w,b
  1760  00970C  CFE8 F20E          	movff	wreg,_dDVNT	;volatile
  1761  009710  C207  FFE8         	movff	F1455+1,wreg
  1762  009714  5924               	subwfb	(_M+30)& (0+255),w,b
  1763  009716  CFE8 F20F          	movff	wreg,_dDVNT+1	;volatile
  1764                           ;tacho.c: 421: fv=M.rVVNT;
  1765  00971A  C323  F206         	movff	_M+29,F1455
  1766  00971E  C324  F207         	movff	_M+30,F1455+1
  1767  009722                     l135:
  1768                           ;tacho.c: 422: }
  1769  009722  010F               	movlb	F1453 shr (0+8)
  1770  009724  6B3E               	clrf	F1453& (0+255),b
  1771                           ;tacho.c: 424: }
  1772  009726  0012               	return	
  1773  009728                     __end_of_FltParVNT:
  1774                           ;tacho.c: 428: void FPmVNT(void)
  1775                           ;tacho.c: 429: {
  1776  009728                     _FPmVNT:
  1777  000000                     
  1778                           ;tacho.c: 432: DVNT=VDoc-M.rVVNT;
  1779  009728  0102               	movlb	_VDoc shr (0+8)	;volatile
  1780  00972A  C323  FFE8         	movff	_M+29,wreg
  1781  00972E  5D0A               	subwf	_VDoc& (0+255),w,b	;volatile
  1782  009730  CFE8 F208          	movff	wreg,_DVNT	;volatile
  1783  009734  C324  FFE8         	movff	_M+30,wreg
  1784  009738  590B               	subwfb	(_VDoc+1)& (0+255),w,b
  1785  00973A  CFE8 F209          	movff	wreg,_DVNT+1	;volatile
  1786                           ;tacho.c: 433: v_t=DVNT;
  1787  00973E  C208  F21E         	movff	_DVNT,_v_t	;volatile
  1788  009742  C209  F21F         	movff	_DVNT+1,_v_t+1	;volatile
  1789                           ;tacho.c: 434: if(RTdS(9)>1)
  1790  009746  0E09               	movlw	9
  1791  009748  ECC9  F063         	call	_RTdS
  1792  00974C  6E00               	movwf	btemp,c
  1793  00974E  0E02               	movlw	2
  1794  009750  5C00               	subwf	btemp,w,c
  1795  009752  A0D8               	btfss	status,0,c
  1796  009754  0012               	return	
  1797                           ;tacho.c: 435: {
  1798  009756  0E09               	movlw	9
  1799  009758  ECB7  F063         	call	_StartRTdS
  1800                           ;tacho.c: 437: FltParVNT();
  1801  00975C  DEF2               	call	_FltParVNT	;wreg free
  1802                           ;tacho.c: 438: v_dt=dDVNT;
  1803  00975E  C20E  F21C         	movff	_dDVNT,_v_dt	;volatile
  1804  009762  C20F  F21D         	movff	_dDVNT+1,_v_dt+1	;volatile
  1805                           ;tacho.c: 439: v_tdt=tdDVNT;
  1806  009766  C218  F220         	movff	_tdDVNT,_v_tdt	;volatile
  1807  00976A  C219  F221         	movff	_tdDVNT+1,_v_tdt+1	;volatile
  1808                           ;tacho.c: 440: v_ddt=ddDVNT;
  1809  00976E  C226  F22A         	movff	_ddDVNT,_v_ddt	;volatile
  1810  009772  C227  F22B         	movff	_ddDVNT+1,_v_ddt+1	;volatile
  1811  009776  C228  F22C         	movff	_ddDVNT+2,_v_ddt+2	;volatile
  1812  00977A  C229  F22D         	movff	_ddDVNT+3,_v_ddt+3	;volatile
  1813                           ;tacho.c: 441: }
  1814  00977E  0012               	return	
  1815  009780                     __end_of_FPmVNT:
  1816                           ;tacho.c: 447: void SetNstVNT(unsigned char doc)
  1817                           ;tacho.c: 448: {
  1818  009780                     _SetNstVNT:
  1819  000000                     
  1820                           ; _doc loaded to fsr2l
  1821  009780  6ED9               	movwf	fsr2l,c
  1822                           ;tacho.c: 449: VDoc=doc*100;
  1823  009782  50D9               	movf	fsr2l,w,c
  1824  009784  0D64               	mullw	100
  1825  009786  CFF3 F20A          	movff	prodl,_VDoc	;volatile
  1826  00978A  CFF4 F20B          	movff	prodh,_VDoc+1	;volatile
  1827                           ;tacho.c: 450: }
  1828  00978E  0012               	return	
  1829  009790                     __end_of_SetNstVNT:
  1830                           ;tacho.c: 456: bit Vrosnie(const unsigned char t
      +                          )
  1831                           ;tacho.c: 457: {
  1832  009790                     _Vrosnie:
  1833  000000                     
  1834                           ; _t loaded to fsr2l
  1835  009790  6ED9               	movwf	fsr2l,c
  1836                           ;tacho.c: 461: return (v_dt>t)?1:0;
  1837  009792  C21C  F000         	movff	_v_dt,btemp	;volatile
  1838  009796  C21D  F001         	movff	_v_dt+1,btemp+1	;volatile
  1839  00979A  CFD9 F002          	movff	fsr2l,btemp+2
  1840  00979E  6A03               	clrf	btemp+3,c
  1841  0097A0  5003               	movf	btemp+3,w,c
  1842  0097A2  0A80               	xorlw	128
  1843  0097A4  6E04               	movwf	btemp+4,c
  1844  0097A6  5001               	movf	btemp+1,w,c
  1845  0097A8  0A80               	xorlw	128
  1846  0097AA  5C04               	subwf	btemp+4,w,c
  1847  0097AC  E102               	bnz	u745
  1848  0097AE  5000               	movf	btemp,w,c
  1849  0097B0  5C02               	subwf	btemp+2,w,c
  1850  0097B2                     u745:
  1851  0097B2  E202               	bc	u740
  1852  0097B4  80D8               	bsf	status,0,c
  1853  0097B6  0012               	return	
  1854  0097B8                     u740:
  1855  0097B8  90D8               	bcf	status,0,c
  1856  0097BA  0012               	return	
  1857                           ;tacho.c: 462: }
  1858  0097BC                     __end_of_Vrosnie:
  1859                           ;tacho.c: 468: bit Vmaleje(const unsigned int t)
  1860                           ;tacho.c: 469: {
  1861  0097BC  00B2               	dw	?_Vmaleje
  1862  0097BE                     _Vmaleje:
  1863  000000                     
  1864                           ;tacho.c: 470: signed char w;
  1865  0097BE  0100               	movlb	__Lparam shr (0+8)
  1866  0097C0  51B2               	movf	?_Vmaleje^(__Lparam& (0+65280)),w
  1867  0097C2  0800               	sublw	0
  1868  0097C4  6ED9               	movwf	fsr2l,c
  1869                           ;tacho.c: 472: return (v_dt<w)?1:0;
  1870  0097C6  CFD9 F002          	movff	fsr2l,btemp+2
  1871  0097CA  6A03               	clrf	btemp+3,c
  1872  0097CC  BE02               	btfsc	btemp+2,7,c
  1873  0097CE  0603               	decf	btemp+3,f,c
  1874  0097D0  C21C  F000         	movff	_v_dt,btemp	;volatile
  1875  0097D4  C21D  F001         	movff	_v_dt+1,btemp+1	;volatile
  1876  0097D8  5001               	movf	btemp+1,w,c
  1877  0097DA  0A80               	xorlw	128
  1878  0097DC  6E04               	movwf	btemp+4,c
  1879  0097DE  5003               	movf	btemp+3,w,c
  1880  0097E0  0A80               	xorlw	128
  1881  0097E2  5C04               	subwf	btemp+4,w,c
  1882  0097E4  E102               	bnz	u765
  1883  0097E6  5002               	movf	btemp+2,w,c
  1884  0097E8  5C00               	subwf	btemp,w,c
  1885  0097EA                     u765:
  1886  0097EA  E202               	bc	u760
  1887  0097EC  80D8               	bsf	status,0,c
  1888  0097EE  0012               	return	
  1889  0097F0                     u760:
  1890  0097F0  90D8               	bcf	status,0,c
  1891  0097F2  0012               	return	
  1892                           ;tacho.c: 474: }
  1893  0097F4                     __end_of_Vmaleje:
  1894                           ;tacho.c: 478: bit Vstoi(void)
  1895                           ;tacho.c: 479: {
  1896  0097F4                     _Vstoi:
  1897  000000                     
  1898                           ;tacho.c: 480: return (!v_dt)?1:0;
  1899  0097F4  0102               	movlb	_v_dt shr (0+8)	;volatile
  1900  0097F6  511C               	movf	_v_dt& (0+255),w,b	;volatile
  1901  0097F8  111D               	iorwf	(_v_dt+1)& (0+255),w,b	;volatile
  1902  0097FA  90D8               	bcf	status,0,c
  1903  0097FC  B4D8               	btfsc	status,2,c
  1904  0097FE  80D8               	bsf	status,0,c
  1905  009800  0012               	return	
  1906                           ;tacho.c: 481: }
  1907  009802                     __end_of_Vstoi:
  1908                           ;tacho.c: 487: bit Vnizsza(const unsigned int t)
  1909                           ;tacho.c: 488: {
  1910  009802  00A6               	dw	?_Vnizsza
  1911  009804                     _Vnizsza:
  1912  000000                     
  1913                           ;tacho.c: 489: return (v_t>t)?1:0;
  1914  009804  C21E  F000         	movff	_v_t,btemp	;volatile
  1915  009808  C21F  F001         	movff	_v_t+1,btemp+1	;volatile
  1916  00980C  0100               	movlb	__Lparam shr (0+8)
  1917  00980E  5001               	movf	btemp+1,w,c
  1918  009810  5DA7               	subwf	(?_Vnizsza+1)^(__Lparam& (0+65280)),w
  1919  009812  E102               	bnz	u785
  1920  009814  5000               	movf	btemp,w,c
  1921  009816  5DA6               	subwf	?_Vnizsza^(__Lparam& (0+65280)),w
  1922  009818                     u785:
  1923  009818  E202               	bc	u780
  1924  00981A  80D8               	bsf	status,0,c
  1925  00981C  0012               	return	
  1926  00981E                     u780:
  1927  00981E  90D8               	bcf	status,0,c
  1928  009820  0012               	return	
  1929                           ;tacho.c: 490: }
  1930  009822                     __end_of_Vnizsza:
  1931                           ;tacho.c: 496: bit Vwyzsza(const unsigned int t)
  1932                           ;tacho.c: 497: {
  1933  009822  00A6               	dw	?_Vwyzsza
  1934  009824                     _Vwyzsza:
  1935  000000                     
  1936                           ;tacho.c: 498: signed char w;
  1937  009824  0100               	movlb	__Lparam shr (0+8)
  1938  009826  51A6               	movf	?_Vwyzsza^(__Lparam& (0+65280)),w
  1939  009828  0800               	sublw	0
  1940  00982A  6ED9               	movwf	fsr2l,c
  1941                           ;tacho.c: 500: return (v_t<w)?1:0;
  1942  00982C  CFD9 F002          	movff	fsr2l,btemp+2
  1943  009830  6A03               	clrf	btemp+3,c
  1944  009832  BE02               	btfsc	btemp+2,7,c
  1945  009834  0603               	decf	btemp+3,f,c
  1946  009836  C21E  F000         	movff	_v_t,btemp	;volatile
  1947  00983A  C21F  F001         	movff	_v_t+1,btemp+1	;volatile
  1948  00983E  5001               	movf	btemp+1,w,c
  1949  009840  0A80               	xorlw	128
  1950  009842  6E04               	movwf	btemp+4,c
  1951  009844  5003               	movf	btemp+3,w,c
  1952  009846  0A80               	xorlw	128
  1953  009848  5C04               	subwf	btemp+4,w,c
  1954  00984A  E102               	bnz	u805
  1955  00984C  5002               	movf	btemp+2,w,c
  1956  00984E  5C00               	subwf	btemp,w,c
  1957  009850                     u805:
  1958  009850  E202               	bc	u800
  1959  009852  80D8               	bsf	status,0,c
  1960  009854  0012               	return	
  1961  009856                     u800:
  1962  009856  90D8               	bcf	status,0,c
  1963  009858  0012               	return	
  1964                           ;tacho.c: 501: }
  1965  00985A                     __end_of_Vwyzsza:
  1966                           ;tacho.c: 505: bit Vrowna(void)
  1967                           ;tacho.c: 506: {
  1968  00985A                     _Vrowna:
  1969  000000                     
  1970                           ;tacho.c: 507: return (!v_t)?1:0;
  1971  00985A  0102               	movlb	_v_t shr (0+8)	;volatile
  1972  00985C  511E               	movf	_v_t& (0+255),w,b	;volatile
  1973  00985E  111F               	iorwf	(_v_t+1)& (0+255),w,b	;volatile
  1974  009860  90D8               	bcf	status,0,c
  1975  009862  B4D8               	btfsc	status,2,c
  1976  009864  80D8               	bsf	status,0,c
  1977  009866  0012               	return	
  1978                           ;tacho.c: 508: }
  1979  009868                     __end_of_Vrowna:
  1980                           ;tacho.c: 514: bit VTrosnacy(const unsigned char
      +                           t)
  1981                           ;tacho.c: 515: {
  1982  009868                     _VTrosnacy:
  1983  000000                     
  1984                           ; _t loaded to fsr2l
  1985  009868  6ED9               	movwf	fsr2l,c
  1986                           ;tacho.c: 516: return (v_tdt>t)?1:0;
  1987  00986A  C220  F000         	movff	_v_tdt,btemp	;volatile
  1988  00986E  C221  F001         	movff	_v_tdt+1,btemp+1	;volatile
  1989  009872  CFD9 F002          	movff	fsr2l,btemp+2
  1990  009876  6A03               	clrf	btemp+3,c
  1991  009878  5003               	movf	btemp+3,w,c
  1992  00987A  0A80               	xorlw	128
  1993  00987C  6E04               	movwf	btemp+4,c
  1994  00987E  5001               	movf	btemp+1,w,c
  1995  009880  0A80               	xorlw	128
  1996  009882  5C04               	subwf	btemp+4,w,c
  1997  009884  E102               	bnz	u825
  1998  009886  5000               	movf	btemp,w,c
  1999  009888  5C02               	subwf	btemp+2,w,c
  2000  00988A                     u825:
  2001  00988A  E202               	bc	u820
  2002  00988C  80D8               	bsf	status,0,c
  2003  00988E  0012               	return	
  2004  009890                     u820:
  2005  009890  90D8               	bcf	status,0,c
  2006  009892  0012               	return	
  2007                           ;tacho.c: 517: }
  2008  009894                     __end_of_VTrosnacy:
  2009                           ;tacho.c: 523: bit VTmalejacy(const unsigned cha
      +                          r t)
  2010                           ;tacho.c: 524: {
  2011  009894                     _VTmalejacy:
  2012  000000                     
  2013                           ; _t loaded to fsr1l
  2014  009894  6EE1               	movwf	fsr1l,c
  2015                           ;tacho.c: 525: signed char w;
  2016  009896  50E1               	movf	fsr1l,w,c
  2017  009898  0800               	sublw	0
  2018  00989A  6ED9               	movwf	fsr2l,c
  2019                           ;tacho.c: 527: return (v_tdt<w)?1:0;
  2020  00989C  CFD9 F002          	movff	fsr2l,btemp+2
  2021  0098A0  6A03               	clrf	btemp+3,c
  2022  0098A2  BE02               	btfsc	btemp+2,7,c
  2023  0098A4  0603               	decf	btemp+3,f,c
  2024  0098A6  C220  F000         	movff	_v_tdt,btemp	;volatile
  2025  0098AA  C221  F001         	movff	_v_tdt+1,btemp+1	;volatile
  2026  0098AE  5001               	movf	btemp+1,w,c
  2027  0098B0  0A80               	xorlw	128
  2028  0098B2  6E04               	movwf	btemp+4,c
  2029  0098B4  5003               	movf	btemp+3,w,c
  2030  0098B6  0A80               	xorlw	128
  2031  0098B8  5C04               	subwf	btemp+4,w,c
  2032  0098BA  E102               	bnz	u845
  2033  0098BC  5002               	movf	btemp+2,w,c
  2034  0098BE  5C00               	subwf	btemp,w,c
  2035  0098C0                     u845:
  2036  0098C0  E202               	bc	u840
  2037  0098C2  80D8               	bsf	status,0,c
  2038  0098C4  0012               	return	
  2039  0098C6                     u840:
  2040  0098C6  90D8               	bcf	status,0,c
  2041  0098C8  0012               	return	
  2042                           ;tacho.c: 528: }
  2043  0098CA                     __end_of_VTmalejacy:
  2044                           ;tacho.c: 532: bit VTzerowy(void)
  2045                           ;tacho.c: 533: {
  2046  0098CA                     _VTzerowy:
  2047  000000                     
  2048                           ;tacho.c: 534: return (!v_tdt)?1:0;
  2049  0098CA  0102               	movlb	_v_tdt shr (0+8)	;volatile
  2050  0098CC  5120               	movf	_v_tdt& (0+255),w,b	;volatile
  2051  0098CE  1121               	iorwf	(_v_tdt+1)& (0+255),w,b	;volatile
  2052  0098D0  90D8               	bcf	status,0,c
  2053  0098D2  B4D8               	btfsc	status,2,c
  2054  0098D4  80D8               	bsf	status,0,c
  2055  0098D6  0012               	return	
  2056                           ;tacho.c: 535: }
  2057  0098D8                     __end_of_VTzerowy:
  2058  000000                     
  2059  000000                     
  2060  000000                     
  2061  000000                     
  2062  000000                     
  2063  000000                     
  2064  000000                     
  2065  000000                     
  2066  000000                     
  2067  000000                     
  2068  000000                     
  2069  000000                     
  2070  000000                     
  2071  000000                     
  2072  000000                     
  2073  000000                     
  2074  000000                     
  2075  000000                     
  2076  000000                     
  2077  000000                     
  2078  000000                     
  2079  000000                     
  2080  000000                     
  2081  000000                     
  2082  000000                     
  2083  000000                     
  2084  000000                     
  2085  000000                     
  2086  000000                     
  2087  000000                     
  2088  000000                     
  2089  000000                     
  2090  000000                     
  2091  000000                     
  2092  000000                     
  2093  000000                     
  2094  000000                     
  2095  000000                     
  2096  000000                     
  2097  000000                     
  2098  000000                     
  2099  000000                     
  2100  000000                     
  2101  000000                     
  2102  000000                     
  2103  000000                     
  2104  000000                     
  2105  000000                     
  2106  000000                     
  2107  000000                     
  2108  000000                     
  2109  000000                     
  2110  000000                     
  2111  000000                     
  2112  000000                     
  2113  000000                     
  2114  000000                     
  2115  000000                     
  2116  000000                     
  2117  000000                     
  2118  000000                     
  2119  000000                     
  2120  000000                     
  2121  000000                     
  2122  000000                     
  2123  000000                     
  2124  000000                     
  2125  000000                     
  2126  000000                     
  2127  000000                     
  2128  000000                     
  2129  000000                     
  2130  000000                     
  2131  000000                     
  2132  000000                     
  2133  000000                     
  2134  000000                     
  2135  000000                     
  2136  000000                     
  2137  000000                     
  2138  000000                     
  2139  000000                     
  2140  000000                     
  2141  000000                     
  2142  000000                     
  2143  000000                     
  2144  000000                     
  2145  000000                     
  2146  000000                     
  2147  000000                     
  2148  000000                     
  2149  000000                     
  2150  000000                     
  2151  000000                     
  2152  000000                     
  2153  000000                     
  2154  000000                     
  2155  000000                     
  2156  000000                     
  2157  000000                     
  2158  000000                     
  2159  000000                     
  2160  000000                     
  2161  000000                     
  2162  000000                     
  2163  000000                     
  2164  000000                     
  2165  000000                     
  2166  000000                     
  2167  000000                     
  2168  000000                     
  2169  000000                     
  2170  000000                     
  2171  000000                     
  2172  000000                     
  2173  000000                     
  2174  000000                     
  2175  000000                     
  2176  000000                     
  2177  000000                     
  2178  000000                     
  2179  000000                     
  2180  000000                     
  2181  000000                     
  2182  000000                     
  2183  000000                     
  2184  000000                     
  2185  000000                     
  2186  000000                     
  2187  000000                     
  2188  000000                     
  2189  000000                     
  2190  000000                     
  2191  000000                     
  2192  000000                     
  2193  000000                     
  2194  000000                     
  2195  000000                     
  2196  000000                     
  2197  000000                     
  2198  000000                     
  2199  000000                     
  2200  000000                     
  2201  000000                     
  2202  000000                     
  2203  000000                     
  2204  000000                     
  2205  000000                     
  2206  000000                     
  2207  000000                     
  2208  000000                     
  2209  000000                     
  2210  000000                     
  2211  000000                     
  2212  000000                     
  2213  000000                     
  2214  000000                     
  2215  000000                     
  2216  000000                     
  2217  000000                     
  2218  000000                     
  2219  000000                     
  2220  000000                     
  2221  000000                     
  2222  000000                     
  2223  000000                     
  2224  000000                     
  2225  000000                     
  2226  000000                     
  2227  000000                     
  2228  000000                     
  2229  000000                     
  2230  000000                     
  2231  000000                     
  2232  000000                     
  2233  000000                     
  2234  000000                     
  2235  000000                     
  2236  000000                     
  2237  000000                     
  2238  000000                     
  2239  000000                     
  2240  000000                     
  2241  000000                     
  2242  000000                     
  2243  000000                     
  2244  000000                     
  2245  000000                     
  2246  000000                     
  2247  000000                     
  2248  000000                     
  2249  000000                     
  2250  000000                     
  2251  000000                     
  2252  000000                     
  2253  000000                     
  2254  000000                     
  2255  000000                     
  2256  000000                     
  2257  000000                     
  2258  000000                     
  2259  000000                     
  2260  000000                     
  2261  000000                     
  2262  000000                     
  2263  000000                     
  2264  000000                     
  2265  000000                     
  2266  000000                     
  2267  000000                     
  2268  000000                     
  2269  000000                     
  2270  000000                     
  2271  000000                     
  2272  000000                     
  2273  000000                     
  2274  000000                     
  2275  000000                     
  2276  000000                     
  2277  000000                     
  2278  000000                     
  2279  000000                     
  2280  000000                     
  2281  000000                     
  2282  000000                     
  2283  000000                     
  2284  000000                     
  2285  000000                     
  2286  000000                     
  2287  000000                     
  2288  000000                     
  2289  000000                     
  2290  000000                     
  2291  000000                     
  2292  000000                     
  2293  000000                     
  2294  000000                     
  2295  000000                     
  2296  000000                     
  2297  000000                     
  2298  000000                     
  2299  000000                     
  2300  000000                     
  2301  000000                     
  2302  000000                     
  2303  000000                     
  2304  000000                     
  2305  000000                     
  2306  000000                     
  2307  000000                     
  2308  000000                     
  2309  000000                     
  2310  000000                     
  2311  000000                     
  2312  000000                     
  2313  000000                     
  2314  000000                     
  2315  000000                     
  2316  000000                     
  2317  000000                     
  2318  000000                     
  2319  000000                     
  2320  000000                     
  2321  000000                     
  2322  000000                     
  2323  000000                     
  2324  000000                     
  2325  000000                     
  2326  000000                     
  2327  000000                     
  2328  000000                     
  2329  000000                     
  2330  000000                     
  2331  000000                     
  2332  000000                     
  2333  000000                     
  2334  000000                     
  2335  000000                     
  2336  000000                     
  2337  000000                     
  2338  000000                     
  2339  000000                     
  2340  000000                     
  2341  000000                     
  2342  000000                     
  2343  000000                     
  2344  000000                     
  2345  000000                     
  2346  000000                     
  2347  000000                     
  2348  000000                     
  2349  000000                     
  2350  000000                     
  2351  000000                     
  2352  000000                     
  2353  000000                     
  2354  000000                     
  2355  000000                     
  2356  000000                     
  2357  000000                     
  2358  000000                     
  2359  000000                     
  2360  000000                     
  2361  000000                     
  2362  000000                     
  2363  000000                     
  2364  000000                     
  2365  000000                     
  2366  000000                     
  2367  000000                     
  2368  000000                     
  2369  000000                     
  2370  000000                     
  2371  000000                     
  2372  000000                     
  2373  000000                     
  2374  000000                     
  2375  000000                     
  2376  000000                     
  2377  000000                     
  2378  000000                     
  2379  000000                     
  2380  000000                     
  2381  000000                     
  2382  000000                     
  2383  000000                     
  2384  000000                     
  2385  000000                     
  2386  000000                     
  2387  000000                     
  2388  000000                     
  2389  000000                     
  2390  000000                     
  2391  000000                     
  2392  000000                     
  2393  000000                     
  2394  000000                     
  2395  000000                     
  2396  000000                     
  2397  000000                     
  2398  000000                     
  2399  000000                     
  2400  000000                     
  2401  000000                     
  2402  000000                     
  2403  000000                     
  2404  000000                     
  2405  000000                     
  2406  000000                     
  2407  000000                     
  2408  000000                     
  2409  000000                     
  2410  000000                     
  2411  000000                     
  2412  000000                     
  2413  000000                     
  2414  000000                     
  2415  000000                     
  2416  000000                     
  2417  000000                     
  2418  000000                     
  2419  000000                     
  2420  000000                     
  2421  000000                     
  2422  000000                     
  2423  000000                     
  2424  000000                     
  2425  000000                     
  2426  000000                     
  2427  000000                     
  2428  000000                     
  2429  000000                     
  2430  000000                     
  2431  000000                     
  2432  000000                     
  2433  000000                     
  2434  000000                     
  2435  000000                     
  2436  000000                     
  2437  000000                     
  2438  000000                     
  2439  000000                     
  2440  000000                     
  2441  000000                     
  2442  000000                     
  2443  000000                     
  2444  000000                     
  2445  000000                     
  2446  000000                     
  2447  000000                     
  2448  000000                     
  2449  000000                     
  2450  000000                     
  2451  000000                     
  2452  000000                     
  2453  000000                     
  2454  000000                     
  2455  000000                     
  2456  000000                     
  2457  000000                     
  2458  000000                     
  2459  000000                     
  2460  000000                     
  2461  000000                     
  2462  000000                     
  2463  000000                     
  2464  000000                     
  2465  000000                     
  2466  000000                     
  2467  000000                     
  2468  000000                     
  2469  000000                     
  2470  000000                     
  2471  000000                     
  2472  000000                     
  2473  000000                     
  2474  000000                     
  2475  000000                     
  2476  000000                     
  2477  000000                     
  2478  000000                     
  2479  000000                     
  2480  000000                     
  2481  000000                     
  2482  000000                     
  2483  000000                     
  2484  000000                     
  2485  000000                     
  2486  000000                     
  2487  000000                     
  2488  000000                     
  2489  000000                     
  2490  000000                     
  2491  000000                     
  2492  000000                     
  2493  000000                     
  2494                           
  2495                           	psect	rbit
  2496  0002B8                     _new:
  2497  0002B8                     	ds	1
  2498  0002B8                     _stn:
  2499  0002B8                     	ds	1
  2500  0002B8                     _zero:
  2501  0002B8                     	ds	1
  2502                           
  2503                           	psect	bigbss
  2504  000F3C                     F1432:
  2505  000F3C                     	ds	1
  2506  000F3C                     F1448:
  2507  000F3C                     	ds	1
  2508  000F3C                     F1453:
  2509  000F3C                     	ds	1
  2510  000F3C                     F1454:
  2511  000F3C                     	ds	1
  2512  000000                     
  2513  000000                     
  2514  000000                     
  2515  000000                     
  2516  000000                     
  2517  000000                     
  2518  000000                     
  2519  000000                     
  2520  000000                     
  2521  000000                     
  2522  000000                     
  2523  000000                     
  2524  000000                     
  2525  000000                     
  2526  000000                     
  2527  000000                     
  2528  000000                     
  2529  000000                     
  2530  000000                     
  2531  000000                     
  2532  000000                     
  2533  000000                     
  2534  000000                     
  2535  000000                     
  2536  000000                     
  2537  000000                     
  2538  000000                     
  2539  000000                     
  2540  000000                     
  2541  000000                     
  2542  000000                     
  2543  000000                     
  2544  000000                     
  2545  000000                     
  2546  000000                     
  2547  000000                     
  2548  000000                     
  2549  000000                     
  2550  000000                     
  2551  000000                     
  2552  000000                     
  2553  000000                     
  2554  000000                     
  2555  000000                     
  2556  000000                     
  2557  000000                     
  2558  000000                     
  2559  000000                     
  2560  000000                     
  2561  000000                     
  2562  000000                     
  2563  000000                     
  2564  000000                     
  2565  000000                     
  2566  000000                     
  2567  000000                     
  2568  000000                     
  2569  000000                     
  2570  000000                     
  2571  000000                     
  2572  000000                     
  2573  000000                     
  2574  000000                     
  2575  000000                     
  2576  000000                     
  2577  000000                     
  2578  000000                     
  2579  000000                     
  2580  000000                     
  2581  000000                     
  2582  000000                     
  2583  000000                     
  2584  000000                     
  2585  000000                     
  2586  000000                     
  2587  000000                     
  2588  000000                     
  2589  000000                     
  2590  000000                     
  2591  000000                     
  2592  000000                     
  2593  000000                     
  2594  000000                     
  2595  000000                     
  2596  000000                     
  2597  000000                     
  2598  000000                     
  2599  000000                     
  2600  000000                     
  2601  000000                     
  2602  000000                     
  2603  000000                     
  2604  000000                     
  2605  000000                     
  2606  000000                     
  2607  000000                     
  2608  000000                     
  2609  000000                     
  2610  000000                     
  2611  000000                     
  2612  000000                     
  2613  000000                     
  2614  000000                     
  2615  000000                     
  2616  000000                     
  2617  000000                     
  2618  000000                     
  2619  000000                     
  2620  000000                     
  2621  000000                     
  2622  000000                     
  2623  000000                     
  2624  000000                     
  2625  000000                     
  2626  000000                     
  2627  000000                     
  2628  000000                     
  2629  000000                     
  2630  000000                     
  2631  000000                     
  2632  000000                     
  2633  000000                     
  2634  000000                     
  2635  000000                     
  2636  000000                     
  2637  000F3C                     _tkrk:
  2638  000F3C                     	ds	1
  2639                           
  2640                           	psect	bss
  2641  000200                     F1431:
  2642  000200                     	ds	2
  2643  000200                     F1437:
  2644  000200                     	ds	2
  2645  000200                     F1447:
  2646  000200                     	ds	2
  2647  000200                     F1455:
  2648  000200                     	ds	2
  2649  000000                     
  2650  000000                     
  2651  000000                     
  2652  000200                     _DVNT:
  2653  000200                     	ds	2
  2654  000000                     
  2655  000000                     
  2656  000000                     
  2657  000000                     
  2658  000200                     _VDoc:
  2659  000200                     	ds	2
  2660  000200                     _bin0:
  2661  000200                     	ds	2
  2662  000200                     _dDVNT:
  2663  000200                     	ds	2
  2664  000200                     _in0:
  2665  000200                     	ds	2
  2666  000200                     _ip0:
  2667  000200                     	ds	2
  2668  000200                     _ni0:
  2669  000200                     	ds	2
  2670  000200                     _nw0:
  2671  000200                     	ds	2
  2672  000200                     _tdDVNT:
  2673  000200                     	ds	2
  2674  000200                     _tm0:
  2675  000200                     	ds	2
  2676  000200                     _v_dt:
  2677  000200                     	ds	2
  2678  000200                     _v_t:
  2679  000200                     	ds	2
  2680  000200                     _v_tdt:
  2681  000200                     	ds	2
  2682  000200                     _wynik:
  2683  000200                     	ds	2
  2684  000200                     _zr0:
  2685  000200                     	ds	2
  2686  000200                     _ddDVNT:
  2687  000200                     	ds	4
  2688  000200                     _v_ddt:
  2689  000200                     	ds	4
  2690  000200                     _wv:
  2691  000200                     	ds	24
  2692  000200                     _wvv:
  2693  000200                     	ds	24
  2694  000200                     F1435:
  2695  000200                     	ds	40
  2696  000200                     _tnp:
  2697  000200                     	ds	40
  2698                           
  2699                           	psect	temp
  2700  000000                     btemp:
  2701  000000                     	ds	8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           indf0	equ	0xFEF
  2707                           postinc0	equ	0xFEE
  2708                           postdec0	equ	0xFED
  2709                           fsr0h	equ	0xFEA
  2710                           fsr0l	equ	0xFE9
  2711                           wreg	equ	0xFE8
  2712                           postinc1	equ	0xFE6
  2713                           postdec1	equ	0xFE5
  2714                           fsr1h	equ	0xFE2
  2715                           fsr1l	equ	0xFE1
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Thu Jul 28 10:43:11 2016

               _SetNstVNT 9780                  _TimTacho 8D06  
   __end_of_StartTimTacho 8D06         __end_of_SetNstVNT 9790  
                       _M 0306                         l7 8C42  
                      l10 8C88                        l20 8D1E  
                      l12 8C98                        l30 8D96  
                      l14 8CD0                        l24 8D22  
                      l41 8E5E                        l50 8EC8  
                      l42 8DFC                        l34 8DCC  
                      l26 8D94                        l44 8E44  
                      l61 8F2C                        l53 8F0E  
                      l70 8F98                        l46 8E7A  
                      l38 8DE8                        l71 8FCA  
                      l48 8EF2                        l65 8F4E  
                      l57 8F10                        l90 911E  
                      l66 8F84                        l91 9128  
                      l83 90F2                        l75 8FD4  
                      l92 9178                        l84 90E6  
                      l76 9026                        l93 913C  
                      l85 90C4                        l86 90D6  
                      l79 9090                        l96 92DA  
                      l97 92A4                        l89 938C  
                      l99 929E                 ?a_HistVal 00B9  
               _PomiarVNT 90FC                        _wv 022E  
       __end_of_PomiarVNT 9394                       l102 92D4  
                     l103 9388                       l112 9456  
                     l121 957C                       l113 9426  
                     l106 93F0                       l131 96CA  
                     l123 959E                       l107 948C  
                     l132 96E6                       l124 95B0  
                     l116 94A0                       l108 9414  
                     l125 95B6                       l109 93F8  
                     l134 9704                       l135 9722  
                     l119 9528                       l128 9610  
                     u100 8D5E                       u210 8EC6  
                     u300 8F8C                       u140 8DCA  
                     u150 8DE6                       u320 8FCE  
                     u315 8FBC                       u350 902A  
                     u270 8F2A                       u190 8E62  
                     u335 8FF2                       u175 8E36  
                     u345 9018                       u185 8E50  
                     u290 8F88                       u605 9560  
                     u365 905C                       u455 925C  
                     u800 9856                       u475 9272  
                     u820 9890                       u740 97B8  
                     u805 9850                       u840 98C6  
                     u760 97F0                       u825 988A  
                     u745 97B2                       u585 94F4  
                     u780 981E                       u845 98C0  
                     u765 97EA                       u785 9818  
                     _in0 0210                       _ip0 0212  
                     _ni0 0214                       _nw0 0216  
                     _tm0 021A                       _new 02B8  
                     _zr0 0224                       _v_t 021E  
                     _tnp 0286                       _stn 02B9  
                     _wvv 0246                       wreg 000FE8  
               _StartRTdS C76E               ?a_FltParVNT 00B6  
                    F1431 0200                      F1432 0F3C  
                    F1435 025E                      F1453 0F3E  
                    F1437 0202                      F1454 0F3F  
                    F1455 0206                      F1447 0204  
                    F1448 0F3D                      f6063 00AD  
                    _DVNT 0208                      _RTdS C792  
                    _VDoc 020A                      _TFlt 9048  
                    _bin0 020C                      _v_dt 021C  
                    fsr0h 000FEA                      fsr1h 000FE2  
                    _tkrk 0F40                      indf0 000FEF  
                    fsr0l 000FE9                      fsr1l 000FE1  
                    fsr2l 000FD9                      btemp 0000  
                    _zero 02BA                   ?_AddTab 00B6  
                    ftdiv D75A                      lldiv D4EC  
                    ftmul D5A2           __end_of_IntINT0 8CE8  
                    fttol D99A                      lwmod D934  
                    prodh 000FF4                      prodl 000FF3  
         __end_of_HistVal 9046  __end_of_PredkoscZmianVNT 9542  
         __end_of_Vmaleje 97F4        ?a_PredkoscZmianVNT 00BA  
         __end_of_Vnizsza 9822           __end_of_Vrosnie 97BC  
                   ?_TFlt 00B6               _FindPropVal 8D84  
             ?a_PomiarVNT 00A9             __end_of_Vstoi 9802  
         __end_of_Vwyzsza 985A       __end_of_FindPropVal 8EFC  
                   _RSDT1 0326                     _DtKNF 01B4  
                   _dDVNT 020E                used_btemp0 0001  
              used_btemp1 0001                used_btemp2 0001  
              used_btemp3 0001                used_btemp4 0001  
              used_btemp5 0001                used_btemp6 0001  
              used_btemp7 0001                     _Vstoi 97F4  
           ?a_FindPropVal 00B9                     _v_ddt 022A  
                   _v_tdt 0220                     _round D860  
                   _wynik 0222               _IncTimTacho 8CE8  
                   lwtoft DBCE              ?_FindPropVal 00B6  
     __end_of_IncTimTacho 8CFC                     status 000FD8  
        __end_of_IntTacho 8C5E                   _IntINT0 8C5E  
                 _HistVal 8EFE                  ?_HistVal 00B6  
        __end_of_VTzerowy 98D8                   __Lparam 00A6  
        __end_of_TimTacho 8D0C                   _Vmaleje 97BE  
                ?_Vmaleje 00B2                   _Vnizsza 9804  
                 _Vrosnie 9790                  ?_Vnizsza 00A6  
          __end_of_FPmVNT 9780                   __ramtop 1000  
                 _Vwyzsza 9824            __end_of_AddTab 8D82  
        _PredkoscZmianVNT 93DE                  ?_Vwyzsza 00A6  
          __end_of_ClrDtV 93DE                   _nokrobr 0E71  
            __end_of_TFlt 90FC            __end_of_Vrowna 9868  
                  ?_round 00B6                    _FPmVNT 9728  
                  _AddTab 8D0E                    _ClrDtV 9394  
                  _ddDVNT 0226                    _Vrowna 985A  
                 postdec0 000FED                   postdec1 000FE5  
                 postinc0 000FEE                   postinc1 000FE6  
                  _tdDVNT 0218                 _FltParVNT 9542  
       __end_of_FltParVNT 9728                _VTmalejacy 9894  
      __end_of_VTmalejacy 98CA                    tblptrl 000FF6  
           _StartTimTacho 8CFC                  _IntTacho 8C30  
               _VTrosnacy 9868         __end_of_VTrosnacy 9894  
                _VTzerowy 98CA  
