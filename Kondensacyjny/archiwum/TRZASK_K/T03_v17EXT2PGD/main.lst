

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Thu Jul 28 10:43:08 2016


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	eeprom_data,global,class=EEDATA,delta=1
     5                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     6                           	psect	bss,global,class=RAM,space=1,delta=1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     	;#
    98                           
    99                           	psect	text
   100                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   101                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   102                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   103                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   104                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   105                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   106                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   107                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   108                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   109                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   110                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   111                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   112                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   113                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   114                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   115                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   116                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   117                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   118                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   119                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   120                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   121                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   122                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   123                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   124                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   125                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   126                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   127                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   128                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   129                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   130                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   131                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   132                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   133                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   134                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   135                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   136                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   137                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   138                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   139                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   140                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   141                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   142                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   143                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   144                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   145                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   146                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   147                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   148                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   149                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   150                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   151                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   152                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   153                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   154                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   155                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   156                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   157                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   158                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   159                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   160                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   161                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   162                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   163                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   164                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   165                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   166                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   167                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   168                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   169                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   170                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   171                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   172                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   173                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   174                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   175                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   176                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   177                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   178                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   179                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   180                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   181                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   182                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   183                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   184                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   185                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   186                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   187                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   188                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   189                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   190                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   191                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   192                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   193                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   194                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   195                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   196                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   197                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   198                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   199                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   200  000000                     	;#
   201                           ;	_prz assigned to ?a_OczekujNaPrzeplywWG+1
   202  000000                     _OczekujNaPrzeplywWG$prz	set	?a_OczekujNaPrzeply
      +                          wWG+1
   203                           ;	_pmp assigned to ?a_OczekujNaPrzeplywWG+0
   204  000000                     _OczekujNaPrzeplywWG$pmp	set	?a_OczekujNaPrzeply
      +                          wWG
   205                           ;	_prz assigned to ?a_DetekcjaPrzeplywuWG+1
   206  000000                     _DetekcjaPrzeplywuWG$prz	set	?a_DetekcjaPrzeplyw
      +                          uWG+1
   207                           ;	_pmp assigned to ?a_DetekcjaPrzeplywuWG+0
   208  000000                     _DetekcjaPrzeplywuWG$pmp	set	?a_DetekcjaPrzeplyw
      +                          uWG
   209                           ;	_KnfDisErr assigned to ?a_DecERR+1
   210  000000                     _DecERR$KnfDisErr	set	?a_DecERR+1
   211                           ;	_w assigned to ?a_DecERR+0
   212  000000                     _DecERR$w	set	?a_DecERR
   213                           ;	_wr assigned to ?a_KolejkaPobudzen+0
   214  000000                     _KolejkaPobudzen$wr	set	?a_KolejkaPobudzen
   215                           ;	_x assigned to ?a_KalibracjaWentylatora+0
   216  000000                     _KalibracjaWentylatora$x	set	?a_KalibracjaWentyl
      +                          atora
   217                           ;main.h: 37: asm("\tglobal __config" "2"); asm("
      +                          \t__config" "2" " equ " "0xFFFF&0xFFFF&0xFFEF&0x
      +                          FFFF&0xEFFF");
   218  000000                     	;#
   219                           ;main.h: 38: asm("\tglobal __config" "3"); asm("
      +                          \t__config" "3" " equ " "0xFFFF&0x7FFF&0xFDFF&0x
      +                          FFFF");
   220  000000                     	;#
   221                           ;main.h: 39: asm("\tglobal __config" "4"); asm("
      +                          \t__config" "4" " equ " "0xFFFF&0xFFFF&0xFFFB&0x
      +                          FFFF");
   222  000000                     	;#
   223                           ;main.h: 42: asm("\tglobal __config" "5"); asm("
      +                          \t__config" "5" " equ " "0xFFF0");
   224  000000                     	;#
   225                           ;main.h: 43: asm("\tglobal __config" "6"); asm("
      +                          \t__config" "6" " equ " "0xFFF0&0xDFFF");
   226  000000                     	;#
   227                           ;pwm.tp.h: 7: typedef struct {
   228                           ;pwm.tp.h: 9: unsigned _ENPWM:1;
   229                           ;pwm.tp.h: 10: volatile near unsigned char BufPW
      +                          M;
   230                           ;pwm.tp.h: 11: near unsigned char NewPWM;
   231                           ;pwm.tp.h: 14: unsigned _ENPWM2:1;
   232                           ;pwm.tp.h: 15: volatile near unsigned char BufPW
      +                          M2;
   233                           ;pwm.tp.h: 16: near unsigned char NewPWM2;
   234                           ;pwm.tp.h: 18: unsigned char HIPWM;
   235                           ;pwm.tp.h: 20: unsigned char MDMOD;
   236                           ;pwm.tp.h: 21: unsigned char DKNF_MDMOD;
   237                           ;pwm.tp.h: 22: unsigned char DV16_MDMOD;
   238                           ;pwm.tp.h: 23: unsigned char MGMOD;
   239                           ;pwm.tp.h: 25: unsigned char MDSTART;
   240                           ;pwm.tp.h: 26: unsigned char MGSTART;
   241                           ;pwm.tp.h: 28: unsigned char MDMAXCO;
   242                           ;pwm.tp.h: 29: unsigned char MGMAXCO;
   243                           ;pwm.tp.h: 32: unsigned char MDMAXCW;
   244                           ;pwm.tp.h: 33: unsigned char MGMAXCW;
   245                           ;pwm.tp.h: 34: unsigned char FIRSTPB;
   246                           ;pwm.tp.h: 35: unsigned char PROP1;
   247                           ;pwm.tp.h: 36: unsigned char PROP2;
   248                           ;pwm.tp.h: 37: unsigned char PROP3;
   249                           ;pwm.tp.h: 38: unsigned char APROC;
   250                           ;pwm.tp.h: 40: unsigned _TMAXCO:1;
   251                           ;pwm.tp.h: 41: unsigned char MSTART;
   252                           ;pwm.tp.h: 42: unsigned char MMAXCO;
   253                           ;pwm.tp.h: 43: unsigned char MMAXCW;
   254                           ;pwm.tp.h: 44: unsigned char PGD;
   255                           ;pwm.tp.h: 45: unsigned char MINPWM;
   256                           ;pwm.tp.h: 46: unsigned char MAXPWM;
   257                           ;pwm.tp.h: 49: }DtPWM;
   258                           ;pwm.h: 230: void SetOsc(void);
   259                           ;pwm.h: 231: extern unsigned char CalkVNTtoPWM(u
      +                          nsigned char nst);
   260                           ;pwm.h: 232: extern unsigned char ReadEEMDMOD(vo
      +                          id);
   261                           ;pwm.h: 233: extern unsigned char ReadEEMSTART(v
      +                          oid);
   262                           ;pwm.h: 234: extern unsigned char ReadEEMAXCO(vo
      +                          id);
   263                           ;pwm.h: 235: extern unsigned char ReadEEMAXCW(vo
      +                          id);
   264                           ;pwm.h: 236: extern unsigned char ProcToVNT(unsi
      +                          gned char wrt);
   265                           ;czcw.tp.h: 7: typedef struct {
   266                           ;czcw.tp.h: 8: unsigned _ltrUP:1;
   267                           ;czcw.tp.h: 9: unsigned _ltrDW:1;
   268                           ;czcw.tp.h: 10: unsigned S_CW:1;
   269                           ;czcw.tp.h: 11: unsigned char przCW;
   270                           ;czcw.tp.h: 12: }DataPrCW;
   271                           ;keypad.tp.h: 7: typedef struct {
   272                           ;keypad.tp.h: 8: unsigned bk:1;
   273                           ;keypad.tp.h: 9: unsigned sbk:1;
   274                           ;keypad.tp.h: 10: unsigned ap:1;
   275                           ;keypad.tp.h: 11: unsigned dk:1;
   276                           ;keypad.tp.h: 12: unsigned fl:1;
   277                           ;keypad.tp.h: 13: }StPin;
   278                           ;keypad.h: 15: extern void StartRTdS(const unsig
      +                          ned char Index);
   279                           ;keypad.h: 16: extern unsigned char RTdS(const u
      +                          nsigned char Index);
   280                           ;pompa.tp.h: 7: typedef struct {
   281                           ;pompa.tp.h: 8: unsigned char MGPROC;
   282                           ;pompa.tp.h: 9: unsigned char MDPROC;
   283                           ;pompa.tp.h: 10: unsigned char APROC;
   284                           ;pompa.tp.h: 12: unsigned char MGPROC2;
   285                           ;pompa.tp.h: 13: }DtPMP;
   286                           ;vntregtch.tp.h: 7: typedef struct {
   287                           ;vntregtch.tp.h: 8: unsigned char dvnt;
   288                           ;vntregtch.tp.h: 9: unsigned char dpwm;
   289                           ;vntregtch.tp.h: 10: }KALVnt;
   290                           ;rgl.tp.h: 4: typedef struct {
   291                           ;rgl.tp.h: 5: unsigned btco:1;
   292                           ;rgl.tp.h: 6: unsigned btcw:1;
   293                           ;rgl.tp.h: 7: unsigned fz:1;
   294                           ;rgl.tp.h: 8: unsigned med_up:1;
   295                           ;rgl.tp.h: 9: unsigned fast_up:1;
   296                           ;rgl.tp.h: 10: unsigned nmod:1;
   297                           ;rgl.tp.h: 11: unsigned del1s:1;
   298                           ;rgl.tp.h: 12: unsigned deln1:1;
   299                           ;rgl.tp.h: 13: unsigned inv_mod:1;
   300                           ;rgl.tp.h: 14: unsigned slow_inc:1;
   301                           ;rgl.tp.h: 16: signed char x_t;
   302                           ;rgl.tp.h: 17: signed char x_f;
   303                           ;rgl.tp.h: 18: signed char x_dt;
   304                           ;rgl.tp.h: 19: signed char x_df;
   305                           ;rgl.tp.h: 21: unsigned char ytmp;
   306                           ;rgl.tp.h: 22: unsigned char srp;
   307                           ;rgl.tp.h: 23: unsigned char xmod;
   308                           ;rgl.tp.h: 24: unsigned char tmp_pwm;
   309                           ;rgl.tp.h: 26: }DtRgl;
   310                           ;rgl.h: 56: void StartMCO1F(void);
   311                           ;rgl.h: 57: void ModZgCO(void);
   312                           ;rgl.h: 58: void ModDkCO(void);
   313                           ;rgl.h: 59: void ModPruCO(void);
   314                           ;rgl.h: 60: void IncMaxCO(void);
   315                           ;rgl.h: 61: void ModPrzCO(void);
   316                           ;rgl.h: 62: void PropOPT(void);
   317                           ;rgl.h: 64: void StartCO(void);
   318                           ;rgl.h: 65: void StartMCW(void);
   319                           ;rgl.h: 67: unsigned char FirstPCW(void);
   320                           ;rgl.h: 68: void ClrMod(void);
   321                           ;rgl.h: 69: void ModToCW(void);
   322                           ;rgl.h: 70: void ModToCO(void);
   323                           ;rgl.h: 71: void IncConstCOCW(void);
   324                           ;rgl.h: 72: void ReadDataCO(void);
   325                           ;rgl.h: 73: void ReadDataCW(void);
   326                           ;rgl.h: 74: void ModZgCW(void);
   327  001102                     _main:
   328  000000                     
   329                           ;main.c: 56: InitOsc();
   330  001102  EC1D  F06E         	call	_InitOsc	;wreg free
   331                           ;main.c: 57: InitGlobal();
   332  001106  ECF3  F01B         	call	_InitGlobal	;wreg free
   333                           ;main.c: 58: InitTimer1();
   334  00110A  EC85  F06D         	call	_InitTimer1	;wreg free
   335                           ;main.c: 59: InitTimer3();
   336  00110E  EC71  F06D         	call	_InitTimer3	;wreg free
   337                           ;main.c: 60: InitPort();
   338  001112  EC9E  F062         	call	_InitPort	;wreg free
   339                           ;main.c: 61: InitAC();
   340  001116  EC20  F068         	call	_InitAC	;wreg free
   341                           ;main.c: 62: InitPWM();
   342  00111A  ECC1  F066         	call	_InitPWM	;wreg free
   343                           ;main.c: 63: InitI2C();
   344  00111E  EC6C  F04C         	call	_InitI2C	;wreg free
   345                           ;main.c: 64: InitReceptProc();
   346  001122  EC5D  F060         	call	_InitReceptProc	;wreg free
   347                           ;main.c: 65: InitUart();
   348  001126  EC38  F065         	call	_InitUart	;wreg free
   349                           ;main.c: 66: InitDataPmr();
   350  00112A  EC3D  F02F         	call	_InitDataPmr	;wreg free
   351                           ;main.c: 67: ClearData();
   352  00112E  DA0F               	call	_ClearData	;wreg free
   353                           ;main.c: 68: BitSet2(&RSDT1.outSTAT0,1,0);
   354  001130  0100               	movlb	__Lparam shr (0+8)
   355  001132  0E3C               	movlw	low (_RSDT1+22)
   356  001134  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   357  001136  0E03               	movlw	high (_RSDT1+22)
   358  001138  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   359  00113A  0E01               	movlw	1
   360  00113C  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   361  00113E  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   362  001140  EC57  F06A         	call	_BitSet2	;wreg free
   363                           ;main.c: 69: BitSet2(&RSDT1.outSTAT0,0,0);
   364  001144  0100               	movlb	__Lparam shr (0+8)
   365  001146  0E3C               	movlw	low (_RSDT1+22)
   366  001148  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   367  00114A  0E03               	movlw	high (_RSDT1+22)
   368  00114C  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   369  00114E  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   370  001150  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   371  001152  EC57  F06A         	call	_BitSet2	;wreg free
   372                           ;main.c: 72: if (!POR||!BOR)
   373  001156  A2D0               	btfss	4048,1,c	;volatile
   374  001158  D002               	goto	u30
   375  00115A  B0D0               	btfsc	4048,0,c	;volatile
   376  00115C  D005               	goto	l33
   377  00115E                     u30:
   378                           ;main.c: 73: {
   379  00115E  0103               	movlb	(_M+4) shr (0+8)
   380  001160  810A               	bsf	(_M+4)& (0+255),0,b
   381                           ;main.c: 75: PwrOnDelay();
   382  001162  ECD3  F06D         	call	_PwrOnDelay	;wreg free
   383                           ;main.c: 76: }
   384  001166  D004               	goto	l34
   385  001168                     l33:
   386                           ;main.c: 77: else
   387  001168  0103               	movlb	(_M+3) shr (0+8)
   388  00116A  8F09               	bsf	(_M+3)& (0+255),7,b
   389                           ;main.c: 80: PwrOnDelay();
   390  00116C  ECD3  F06D         	call	_PwrOnDelay	;wreg free
   391  001170                     l34:
   392                           ;main.c: 81: }
   393  001170  ECBD  F042         	call	_RdEEParam	;wreg free
   394                           ;main.c: 86: if (!POR||!BOR)
   395  001174  A2D0               	btfss	4048,1,c	;volatile
   396  001176  D002               	goto	u60
   397  001178  B0D0               	btfsc	4048,0,c	;volatile
   398  00117A  D002               	goto	l35
   399  00117C                     u60:
   400                           ;main.c: 87: {
   401  00117C  82D0               	bsf	4048,1,c	;volatile
   402                           ;main.c: 89: BOR=1;
   403  00117E  80D0               	bsf	4048,0,c	;volatile
   404  001180                     l35:
   405                           ;main.c: 91: }
   406  001180  9483               	bcf	3971,2,c	;volatile
   407                           ;main.c: 96: switch(DtKNF.tpkt)
   408  001182  D001               	goto	l37
   409  001184                     l39:
   410  001184  D006               	goto	l40
   411                           ;main.c: 107: break;
   412  001186                     l37:
   413  001186  C1C2  FFE8         	movff	_DtKNF+14,wreg
   414  00118A  0A00               	xorlw	0
   415  00118C  E0FB               	bz	l39
   416  00118E  0A03               	xorlw	3
   417  001190  E0F9               	bz	l39
   418                           ;main.c: 99: case 3:
   419                           ;main.c: 102: break;
   420  001192                     l40:
   421                           ;main.c: 103: }
   422                           ;main.c: 105: {
   423  001192  0E00               	movlw	0
   424  001194  A283               	btfss	3971,1,c	;volatile
   425  001196  0E01               	movlw	1
   426  001198  6E00               	movwf	btemp,c
   427  00119A  EE03  F00A         	lfsr	0,_M+4
   428  00119E  3A00               	swapf	btemp,f,c
   429  0011A0  3600               	rlcf	btemp,f,c
   430  0011A2  3600               	rlcf	btemp,f,c
   431  0011A4  50EF               	movf	indf0,w,c
   432  0011A6  1800               	xorwf	btemp,w,c
   433  0011A8  0BBF               	andlw	-65
   434  0011AA  1800               	xorwf	btemp,w,c
   435  0011AC  6EEF               	movwf	indf0,c
   436                           ;main.c: 113: if(M.ERR_BTY=eeprom_read(0x00C0))
   437  0011AE  0EC0               	movlw	192
   438  0011B0  0100               	movlb	__Lparam shr (0+8)
   439  0011B2  6FAD               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   440  0011B4  6BAE               	clrf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   441  0011B6  ECC7  F06D         	call	_eeprom_read	;wreg free
   442  0011BA  EE03  F011         	lfsr	0,_M+11
   443  0011BE  6EEF               	movwf	indf0,c
   444  0011C0  50EF               	movf	indf0,w,c
   445  0011C2  E02D               	bz	l41
   446                           ;main.c: 114: {
   447  0011C4  EE01  F0C9         	lfsr	0,_DtKNF+21
   448  0011C8  50EF               	movf	indf0,w,c
   449  0011CA  E10D               	bnz	l42
   450                           ;main.c: 116: {
   451  0011CC  C311  FFE8         	movff	_M+11,wreg
   452  0011D0  0A05               	xorlw	5
   453  0011D2  E109               	bnz	l42
   454                           ;main.c: 118: {
   455  0011D4  0E01               	movlw	1
   456  0011D6  0100               	movlb	__Lparam shr (0+8)
   457  0011D8  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
   458  0011DA  C311  FFE8         	movff	_M+11,wreg
   459  0011DE  ECA1  F069         	call	_PrintErr
   460                           ;main.c: 120: ErrPTG();
   461  0011E2  EC73  F01A         	call	_ErrPTG	;wreg free
   462  0011E6                     l42:
   463                           ;main.c: 121: }
   464  0011E6  0E00               	movlw	0
   465  0011E8  0103               	movlb	(_M+11) shr (0+8)
   466  0011EA  6511               	cpfsgt	(_M+11)& (0+255),b
   467  0011EC  D004               	goto	u121
   468  0011EE  0E04               	movlw	4
   469  0011F0  6111               	cpfslt	(_M+11)& (0+255),b
   470  0011F2  D001               	goto	u121
   471  0011F4  D008               	goto	u150
   472  0011F6                     u121:
   473  0011F6  C311  FFE8         	movff	_M+11,wreg
   474  0011FA  0A07               	xorlw	7
   475  0011FC  E004               	bz	u150
   476  0011FE  C311  FFE8         	movff	_M+11,wreg
   477  001202  0A0D               	xorlw	13
   478  001204  E10A               	bnz	l44
   479  001206                     u150:
   480                           ;main.c: 124: {
   481  001206  0E01               	movlw	1
   482  001208  0100               	movlb	__Lparam shr (0+8)
   483  00120A  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
   484  00120C  C311  FFE8         	movff	_M+11,wreg
   485  001210  ECA1  F069         	call	_PrintErr
   486                           ;main.c: 126: ErrPTG();
   487  001214  EC73  F01A         	call	_ErrPTG	;wreg free
   488                           ;main.c: 127: }
   489  001218  D002               	goto	l41
   490  00121A                     l44:
   491                           ;main.c: 128: else M.ERR_BTY=0;
   492  00121A  0103               	movlb	(_M+11) shr (0+8)
   493  00121C  6B11               	clrf	(_M+11)& (0+255),b
   494  00121E                     l41:
   495                           ;main.c: 129: }
   496  00121E  EC38  F032         	call	_PomiarCO	;wreg free
   497                           ;main.c: 134: PomiarCW();
   498  001222  ECA3  F034         	call	_PomiarCW	;wreg free
   499                           ;main.c: 135: PomiarZW();
   500  001226  EC39  F035         	call	_PomiarZW	;wreg free
   501                           ;main.c: 136: PomiarCS();
   502  00122A  ECC4  F039         	call	_PomiarCS	;wreg free
   503                           ;main.c: 137: PomiarPCO();
   504  00122E  EC54  F037         	call	_PomiarPCO	;wreg free
   505                           ;main.c: 138: PomiarPCW();
   506  001232  ECEE  F037         	call	_PomiarPCW	;wreg free
   507                           ;main.c: 139: PomiarPFN();
   508  001236  ECD4  F038         	call	_PomiarPFN	;wreg free
   509                           ;main.c: 140: PomiarECO();
   510  00123A  EC80  F038         	call	_PomiarECO	;wreg free
   511                           ;main.c: 141: PomiarIN();
   512  00123E  EC88  F034         	call	_PomiarIN	;wreg free
   513                           ;main.c: 142: DtCO._newPCO=0;
   514  001242  0100               	movlb	(_DtCO+1) shr (0+8)
   515  001244  9F80               	bcf	(_DtCO+1)& (0+255),7,b
   516                           ;main.c: 143: DtCW._newPCW=0;
   517  001246  0100               	movlb	(_DtCW+1) shr (0+8)
   518  001248  9171               	bcf	(_DtCW+1)& (0+255),0,b
   519                           ;main.c: 146: RD3=0;
   520  00124A  9683               	bcf	3971,3,c	;volatile
   521                           ;main.c: 147: RD0=0;
   522  00124C  9083               	bcf	3971,0,c	;volatile
   523                           ;main.c: 148: WritePWM(0);
   524  00124E  0E00               	movlw	0
   525  001250  ECDF  F067         	call	_WritePWM
   526                           ;main.c: 150: RestartFltPrt();
   527  001254  D9CB               	call	_RestartFltPrt	;wreg free
   528                           ;main.c: 151: StartRTS(9);
   529  001256  0E09               	movlw	9
   530  001258  ECD5  F063         	call	_StartRTS
   531                           ;main.c: 155: DtCW.PCW=65;
   532  00125C  0E41               	movlw	65
   533  00125E  CFE8 F073          	movff	wreg,_DtCW+3
   534                           ;main.c: 156: DtCO.PCO=85;
   535  001262  0E55               	movlw	85
   536  001264  CFE8 F083          	movff	wreg,_DtCO+4
   537                           ;main.c: 159: PomiarVNT();
   538  001268  EC7E  F048         	call	_PomiarVNT	;wreg free
   539                           ;main.c: 160: WritePWM2(0);
   540  00126C  0E00               	movlw	0
   541  00126E  ECEC  F067         	call	_WritePWM2
   542                           ;main.c: 162: if(M._PW_START)
   543  001272  0103               	movlb	(_M+4) shr (0+8)
   544  001274  A10A               	btfss	(_M+4)& (0+255),0,b
   545  001276  D002               	goto	l46
   546                           ;main.c: 163: {
   547  001278  D8EE               	call	_KalibracjaWentylatora	;wreg free
   548                           ;main.c: 165: }
   549  00127A  D002               	goto	l47
   550  00127C                     l46:
   551                           ;main.c: 166: else
   552  00127C  EC6F  F055         	call	_OdczytDanychKalibracji	;wreg free
   553  001280                     l47:
   554                           ;main.c: 169: }
   555  001280  0103               	movlb	(_M+4) shr (0+8)
   556  001282  B10A               	btfsc	(_M+4)& (0+255),0,b
   557                           ;main.c: 173: {
   558  001284  ECB5  F03A         	call	_EnKonf	;wreg free
   559  001288                     l50:
   560                           ;main.c: 175: }
   561                           ;main.c: 181: {
   562  001288  0004               	clrwdt		;#
   563                           ;main.c: 184: BitSet2(&RSDT1.outSTAT0,1,1);
   564  00128A  0100               	movlb	__Lparam shr (0+8)
   565  00128C  0E3C               	movlw	low (_RSDT1+22)
   566  00128E  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   567  001290  0E03               	movlw	high (_RSDT1+22)
   568  001292  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   569  001294  0E01               	movlw	1
   570  001296  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   571  001298  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   572  00129A  EC57  F06A         	call	_BitSet2	;wreg free
   573                           ;main.c: 185: BitSet2(&RSDT1.outSTAT0,0,0);
   574  00129E  0100               	movlb	__Lparam shr (0+8)
   575  0012A0  0E3C               	movlw	low (_RSDT1+22)
   576  0012A2  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   577  0012A4  0E03               	movlw	high (_RSDT1+22)
   578  0012A6  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   579  0012A8  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   580  0012AA  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   581  0012AC  EC57  F06A         	call	_BitSet2	;wreg free
   582                           ;main.c: 186: M._PRACA=M._ROZRUCH||RD0;
   583  0012B0  0103               	movlb	(_M+1) shr (0+8)
   584  0012B2  A507               	btfss	(_M+1)& (0+255),2,b
   585  0012B4  B083               	btfsc	3971,0,c	;volatile
   586  0012B6  D001               	goto	u211
   587  0012B8  D002               	goto	u210
   588  0012BA                     u211:
   589  0012BA  0E01               	movlw	1
   590  0012BC  D001               	goto	u220
   591  0012BE                     u210:
   592  0012BE  0E00               	movlw	0
   593  0012C0                     u220:
   594  0012C0  6E00               	movwf	btemp,c
   595  0012C2  EE03  F00A         	lfsr	0,_M+4
   596  0012C6  3600               	rlcf	btemp,f,c
   597  0012C8  50EF               	movf	indf0,w,c
   598  0012CA  1800               	xorwf	btemp,w,c
   599  0012CC  0BFD               	andlw	-3
   600  0012CE  1800               	xorwf	btemp,w,c
   601  0012D0  6EEF               	movwf	indf0,c
   602                           ;main.c: 190: ReceptDataLCD();
   603  0012D2  ECDE  F060         	call	_ReceptDataLCD	;wreg free
   604                           ;main.c: 191: MKonfiguracja();
   605  0012D6  ECBD  F03A         	call	_MKonfiguracja	;wreg free
   606                           ;main.c: 193: PomiarVNT();
   607  0012DA  EC7E  F048         	call	_PomiarVNT	;wreg free
   608                           ;main.c: 194: PomiarPCO();
   609  0012DE  EC54  F037         	call	_PomiarPCO	;wreg free
   610                           ;main.c: 195: PomiarPCW();
   611  0012E2  ECEE  F037         	call	_PomiarPCW	;wreg free
   612                           ;main.c: 196: PomiarPFN();
   613  0012E6  ECD4  F038         	call	_PomiarPFN	;wreg free
   614                           ;main.c: 197: PomiarECO();
   615  0012EA  EC80  F038         	call	_PomiarECO	;wreg free
   616                           ;main.c: 198: PomiarCO();
   617  0012EE  EC38  F032         	call	_PomiarCO	;wreg free
   618                           ;main.c: 199: PomiarCW();
   619  0012F2  ECA3  F034         	call	_PomiarCW	;wreg free
   620                           ;main.c: 200: PomiarZW();
   621  0012F6  EC39  F035         	call	_PomiarZW	;wreg free
   622                           ;main.c: 201: FiltrPomiarowyCOCW();
   623  0012FA  ECDF  F031         	call	_FiltrPomiarowyCOCW	;wreg free
   624                           ;main.c: 202: PomiarCS();
   625  0012FE  ECC4  F039         	call	_PomiarCS	;wreg free
   626                           ;main.c: 203: PomiarIN();
   627  001302  EC88  F034         	call	_PomiarIN	;wreg free
   628                           ;main.c: 205: DecERR();
   629  001306  EC1B  F00E         	call	_DecERR	;wreg free
   630                           ;main.c: 206: DecSTR();
   631  00130A  EC67  F00F         	call	_DecSTR	;wreg free
   632                           ;main.c: 207: DecRozruch();
   633  00130E  EC0A  F012         	call	_DecRozruch	;wreg free
   634                           ;main.c: 208: DecWylacz();
   635  001312  ECCB  F012         	call	_DecWylacz	;wreg free
   636                           ;main.c: 209: FunkcjaSerwisowa();
   637  001316  ECEC  F013         	call	_FunkcjaSerwisowa	;wreg free
   638                           ;main.c: 210: DecyzjaAntyLeg();
   639  00131A  DBFE               	call	_DecyzjaAntyLeg	;wreg free
   640                           ;main.c: 211: KolejkaPobudzen();
   641  00131C  DB54               	call	_KolejkaPobudzen	;wreg free
   642                           ;main.c: 212: KontrolaWentylatora();
   643  00131E  EC75  F018         	call	_KontrolaWentylatora	;wreg free
   644                           ;main.c: 213: RefLCDData();
   645  001322  D991               	call	_RefLCDData	;wreg free
   646                           ;main.c: 216: RglPmp();
   647  001324  ECBE  F05D         	call	_RglPmp	;wreg free
   648                           ;main.c: 217: if(M._ZMKCOCW) ZmienKCOKCW();
   649  001328  0103               	movlb	(_M+1) shr (0+8)
   650  00132A  B307               	btfsc	(_M+1)& (0+255),1,b
   651  00132C  ECAB  F017         	call	_ZmienKCOKCW	;wreg free
   652                           ;main.c: 218: if(M._WYLACZ) Wylacz();
   653  001330  0103               	movlb	(_M+1) shr (0+8)
   654  001332  B107               	btfsc	(_M+1)& (0+255),0,b
   655  001334  ECC2  F015         	call	_Wylacz	;wreg free
   656                           ;main.c: 219: if(M._ROZRUCH) Rozruch();
   657  001338  0103               	movlb	(_M+1) shr (0+8)
   658  00133A  B507               	btfsc	(_M+1)& (0+255),2,b
   659  00133C  EC8F  F014         	call	_Rozruch	;wreg free
   660                           ;main.c: 220: if(M._VWYBIEG) VWybieg();
   661  001340  0103               	movlb	(_M+1) shr (0+8)
   662  001342  BD07               	btfsc	(_M+1)& (0+255),6,b
   663  001344  ECEC  F016         	call	_VWybieg	;wreg free
   664                           ;main.c: 221: ReloadPlomien();
   665  001348  EC53  F018         	call	_ReloadPlomien	;wreg free
   666                           ;main.c: 222: if(M._RUSZ_PLOMIEN) RuszPlomien();
   667  00134C  0103               	movlb	(_M+1) shr (0+8)
   668  00134E  BF07               	btfsc	(_M+1)& (0+255),7,b
   669  001350  EC2A  F018         	call	_RuszPlomien	;wreg free
   670                           ;main.c: 223: Proba48();
   671  001354  ECA4  F018         	call	_Proba48	;wreg free
   672                           ;main.c: 224: if(M._RUSZ_48) Rusz48();
   673  001358  0103               	movlb	(_M+1) shr (0+8)
   674  00135A  B707               	btfsc	(_M+1)& (0+255),3,b
   675  00135C  ECBB  F018         	call	_Rusz48	;wreg free
   676                           ;main.c: 225: Proba48Z3();
   677  001360  EC07  F019         	call	_Proba48Z3	;wreg free
   678                           ;main.c: 226: if(M._RUSZ_48Z3) Rusz48Z3();
   679  001364  0103               	movlb	(_M+1) shr (0+8)
   680  001366  B907               	btfsc	(_M+1)& (0+255),4,b
   681  001368  EC2B  F019         	call	_Rusz48Z3	;wreg free
   682                           ;main.c: 227: if(M._BLOKUJ_3M) BlokadaL3();
   683  00136C  0103               	movlb	(_M+2) shr (0+8)
   684  00136E  B508               	btfsc	(_M+2)& (0+255),2,b
   685  001370  EC23  F014         	call	_BlokadaL3	;wreg free
   686                           ;main.c: 228: if(M._BLOKUJ_15S)
   687  001374  0103               	movlb	(_M+2) shr (0+8)
   688  001376  B708               	btfsc	(_M+2)& (0+255),3,b
   689                           ;main.c: 229: {
   690  001378  B30A               	btfsc	(_M+4)& (0+255),1,b
   691  00137A  D002               	goto	l60
   692  00137C  EC57  F014         	call	_Blokada15S	;wreg free
   693  001380                     l60:
   694                           ;main.c: 231: }
   695  001380  0103               	movlb	(_M+2) shr (0+8)
   696  001382  B908               	btfsc	(_M+2)& (0+255),4,b
   697  001384  ECF7  F01B         	call	_Moduluj	;wreg free
   698                           ;main.c: 233: if(DtKNF.robg==0)
   699  001388  EE01  F0C9         	lfsr	0,_DtKNF+21
   700  00138C  50EF               	movf	indf0,w,c
   701  00138E  E107               	bnz	l63
   702                           ;main.c: 234: {
   703  001390  EC2A  F017         	call	_DetekcjaPrzeplywuWG	;wreg free
   704                           ;main.c: 236: if(M._RUSZ_POMPE) OczekujNaPrzeply
      +                          wWG();
   705  001394  0103               	movlb	(_M+2) shr (0+8)
   706  001396  B308               	btfsc	(_M+2)& (0+255),1,b
   707  001398  EC70  F017         	call	_OczekujNaPrzeplywWG	;wreg free
   708                           ;main.c: 237: }
   709  00139C  D003               	goto	l65
   710  00139E                     l63:
   711                           ;main.c: 238: else
   712  00139E  0103               	movlb	(_M+2) shr (0+8)
   713  0013A0  9308               	bcf	(_M+2)& (0+255),1,b
   714                           ;main.c: 241: M._prb_PRZ=0;
   715  0013A2  910B               	bcf	(_M+5)& (0+255),0,b
   716  0013A4                     l65:
   717                           ;main.c: 242: }
   718  0013A4  EC54  F019         	call	_DecyzjaOdp	;wreg free
   719                           ;main.c: 244: if(M._BLOKUJ_ODP) Odpowietrzenie()
      +                          ;
   720  0013A8  0103               	movlb	(_M+6) shr (0+8)
   721  0013AA  B10C               	btfsc	(_M+6)& (0+255),0,b
   722  0013AC  EC7C  F019         	call	_Odpowietrzenie	;wreg free
   723  0013B0  D76B               	goto	l50
   724  0013B2                     __end_of_main:
   725                           ;main.c: 251: void InitPFN(const unsigned char p
      +                          os)
   726                           ;main.c: 252: {
   727  0013B2                     _InitPFN:
   728  000000                     
   729                           ;main.c: 253: PFN.poz=pos;
   730  0013B2  0100               	movlb	(_PFN+1) shr (0+8)
   731  0013B4  CFE8 F06C          	movff	wreg,_PFN+1
   732  0013B8  6B6D               	clrf	(_PFN+2)& (0+255),b
   733                           ;main.c: 254: SetPFN();
   734  0013BA  ECAC  F044         	call	_SetPFN	;wreg free
   735                           ;main.c: 255: WriteEEPFN();
   736  0013BE  EC58  F045         	call	_WriteEEPFN	;wreg free
   737                           ;main.c: 256: if(MGSD._CON)
   738  0013C2  0102               	movlb	_MGSD shr (0+8)
   739  0013C4  ADAE               	btfss	_MGSD& (0+255),6,b
   740  0013C6  0012               	return	
   741                           ;main.c: 257: {
   742  0013C8  0100               	movlb	__Lparam shr (0+8)
   743  0013CA  0E3C               	movlw	low (_RSDT1+22)
   744  0013CC  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   745  0013CE  0E03               	movlw	high (_RSDT1+22)
   746  0013D0  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   747  0013D2  0E01               	movlw	1
   748  0013D4  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   749  0013D6  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   750  0013D8  EC57  F06A         	call	_BitSet2	;wreg free
   751                           ;main.c: 259: BitSet2(&RSDT1.outSTAT0,0,0);
   752  0013DC  0100               	movlb	__Lparam shr (0+8)
   753  0013DE  0E3C               	movlw	low (_RSDT1+22)
   754  0013E0  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   755  0013E2  0E03               	movlw	high (_RSDT1+22)
   756  0013E4  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   757  0013E6  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   758  0013E8  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   759  0013EA  EC57  F06A         	call	_BitSet2	;wreg free
   760                           ;main.c: 260: while(!GetBit2(RSDT1.inSTAT0,7)&&M
      +                          GSD._CON)
   761  0013EE  D004               	goto	l69
   762  0013F0                     l70:
   763                           ;main.c: 261: {
   764  0013F0  0004               	clrwdt		;#
   765                           ;main.c: 263: RefLCDData();
   766  0013F2  D929               	call	_RefLCDData	;wreg free
   767                           ;main.c: 264: ReceptDataLCD();
   768  0013F4  ECDE  F060         	call	_ReceptDataLCD	;wreg free
   769  0013F8                     l69:
   770  0013F8  0E07               	movlw	7
   771  0013FA  0100               	movlb	__Lparam shr (0+8)
   772  0013FC  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   773  0013FE  C365  FFE8         	movff	_RSDT1+63,wreg
   774  001402  EC24  F06A         	call	_GetBit2
   775  001406  E203               	bc	u400
   776  001408  0102               	movlb	_MGSD shr (0+8)
   777  00140A  BDAE               	btfsc	_MGSD& (0+255),6,b
   778  00140C  D7F1               	goto	l70
   779  00140E                     u400:
   780                           ;main.c: 266: }
   781  00140E  0100               	movlb	__Lparam shr (0+8)
   782  001410  0E3C               	movlw	low (_RSDT1+22)
   783  001412  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   784  001414  0E03               	movlw	high (_RSDT1+22)
   785  001416  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   786  001418  0E01               	movlw	1
   787  00141A  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   788  00141C  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   789  00141E  EC57  F06A         	call	_BitSet2	;wreg free
   790                           ;main.c: 268: BitSet2(&RSDT1.outSTAT0,0,0);
   791  001422  0100               	movlb	__Lparam shr (0+8)
   792  001424  0E3C               	movlw	low (_RSDT1+22)
   793  001426  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   794  001428  0E03               	movlw	high (_RSDT1+22)
   795  00142A  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   796  00142C  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   797  00142E  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   798  001430  EC57  F06A         	call	_BitSet2	;wreg free
   799                           ;main.c: 269: while(GetBit2(RSDT1.inSTAT0,7)&&MG
      +                          SD._CON)
   800  001434                     l72:
   801  001434  0E07               	movlw	7
   802  001436  0100               	movlb	__Lparam shr (0+8)
   803  001438  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   804  00143A  C365  FFE8         	movff	_RSDT1+63,wreg
   805  00143E  EC24  F06A         	call	_GetBit2
   806  001442  A0D8               	btfss	status,0,c
   807  001444  0012               	return	
   808  001446  0102               	movlb	_MGSD shr (0+8)
   809  001448  ADAE               	btfss	_MGSD& (0+255),6,b
   810                           ;main.c: 275: }
   811  00144A  0012               	return	
   812                           ;main.c: 270: {
   813  00144C  0004               	clrwdt		;#
   814                           ;main.c: 272: RefLCDData();
   815  00144E  D8FB               	call	_RefLCDData	;wreg free
   816                           ;main.c: 273: ReceptDataLCD();
   817  001450  ECDE  F060         	call	_ReceptDataLCD	;wreg free
   818  001454  D7EF               	goto	l72
   819  001456                     __end_of_InitPFN:
   820                           ;main.c: 279: void KalibracjaWentylatora(void)
   821                           ;main.c: 280: {
   822  001456                     _KalibracjaWentylatora:
   823  000000                     
   824                           ;main.c: 281: volatile unsigned char x;
   825  001456  0103               	movlb	(_M+5) shr (0+8)
   826  001458  950B               	bcf	(_M+5)& (0+255),2,b
   827                           ;main.c: 285: RD3=0;
   828  00145A  9683               	bcf	3971,3,c	;volatile
   829                           ;main.c: 286: WritePWM(0);
   830  00145C  0E00               	movlw	0
   831  00145E  ECDF  F067         	call	_WritePWM
   832                           ;main.c: 287: PomiarVNT();
   833  001462  EC7E  F048         	call	_PomiarVNT	;wreg free
   834                           ;main.c: 288: M.R48=0;
   835  001466  0103               	movlb	(_M+13) shr (0+8)
   836  001468  6B13               	clrf	(_M+13)& (0+255),b
   837                           ;main.c: 289: M._RUSZ_48=0;
   838  00146A  9707               	bcf	(_M+1)& (0+255),3,b
   839                           ;main.c: 290: while(!(x=KalibracjaVNT()))
   840  00146C                     l76:
   841  00146C  EC08  F053         	call	_KalibracjaVNT	;wreg free
   842  001470  0100               	movlb	__Lparam shr (0+8)
   843  001472  6FA6               	movwf	?a_KalibracjaWentylatora^(__Lparam& (0+65
      +                          280)),b	;volatile
   844  001474  51A6               	movf	?a_KalibracjaWentylatora^(__Lparam& (0+652
      +                          80)),w	;volatile
   845  001476  E150               	bnz	u490
   846                           ;main.c: 291: {
   847  001478  0004               	clrwdt		;#
   848                           ;main.c: 308: if(RTS(9)>9&&RTS(9)<11)
   849  00147A  0E09               	movlw	9
   850  00147C  ECE7  F063         	call	_RTS
   851  001480  6E00               	movwf	btemp,c
   852  001482  0E0A               	movlw	10
   853  001484  5C00               	subwf	btemp,w,c
   854  001486  E315               	bnc	l79
   855  001488  0E09               	movlw	9
   856  00148A  ECE7  F063         	call	_RTS
   857  00148E  6E00               	movwf	btemp,c
   858  001490  0E0B               	movlw	11
   859  001492  5C00               	subwf	btemp,w,c
   860  001494  E20E               	bc	l79
   861                           ;main.c: 309: {
   862  001496  ECBA  F011         	call	_ToObiegCO	;wreg free
   863                           ;main.c: 311: RD2=1;
   864  00149A  8483               	bsf	3971,2,c	;volatile
   865                           ;main.c: 312: M._WYLACZ=1;
   866  00149C  0103               	movlb	(_M+1) shr (0+8)
   867  00149E  8107               	bsf	(_M+1)& (0+255),0,b
   868                           ;main.c: 313: PMP.APROC=99;
   869  0014A0  0E63               	movlw	99
   870  0014A2  CFE8 F2F3          	movff	wreg,_PMP+2
   871                           ;main.c: 314: WritePWM2(ProcToPmpPwm(PMP.APROC))
      +                          ;
   872  0014A6  C2F3  FFE8         	movff	_PMP+2,wreg
   873  0014AA  EC8D  F058         	call	_ProcToPmpPwm
   874  0014AE  ECEC  F067         	call	_WritePWM2
   875  0014B2                     l79:
   876                           ;main.c: 315: }
   877  0014B2  0103               	movlb	(_M+1) shr (0+8)
   878  0014B4  B307               	btfsc	(_M+1)& (0+255),1,b
   879  0014B6  ECAB  F017         	call	_ZmienKCOKCW	;wreg free
   880                           ;main.c: 317: if(M._WYLACZ) Wylacz();
   881  0014BA  0103               	movlb	(_M+1) shr (0+8)
   882  0014BC  B107               	btfsc	(_M+1)& (0+255),0,b
   883  0014BE  ECC2  F015         	call	_Wylacz	;wreg free
   884                           ;main.c: 320: BitSet2(&RSDT1.outSTAT0,1,1);
   885  0014C2  0100               	movlb	__Lparam shr (0+8)
   886  0014C4  0E3C               	movlw	low (_RSDT1+22)
   887  0014C6  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   888  0014C8  0E03               	movlw	high (_RSDT1+22)
   889  0014CA  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   890  0014CC  0E01               	movlw	1
   891  0014CE  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   892  0014D0  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   893  0014D2  EC57  F06A         	call	_BitSet2	;wreg free
   894                           ;main.c: 321: BitSet2(&RSDT1.outSTAT0,0,0);
   895  0014D6  0100               	movlb	__Lparam shr (0+8)
   896  0014D8  0E3C               	movlw	low (_RSDT1+22)
   897  0014DA  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
   898  0014DC  0E03               	movlw	high (_RSDT1+22)
   899  0014DE  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
   900  0014E0  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
   901  0014E2  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
   902  0014E4  EC57  F06A         	call	_BitSet2	;wreg free
   903                           ;main.c: 322: PomiarCO();
   904  0014E8  EC38  F032         	call	_PomiarCO	;wreg free
   905                           ;main.c: 323: PomiarCW();
   906  0014EC  ECA3  F034         	call	_PomiarCW	;wreg free
   907                           ;main.c: 324: PomiarZW();
   908  0014F0  EC39  F035         	call	_PomiarZW	;wreg free
   909                           ;main.c: 325: PomiarCS();
   910  0014F4  ECC4  F039         	call	_PomiarCS	;wreg free
   911                           ;main.c: 326: PomiarPCO();
   912  0014F8  EC54  F037         	call	_PomiarPCO	;wreg free
   913                           ;main.c: 327: PomiarPCW();
   914  0014FC  ECEE  F037         	call	_PomiarPCW	;wreg free
   915                           ;main.c: 328: PomiarPFN();
   916  001500  ECD4  F038         	call	_PomiarPFN	;wreg free
   917                           ;main.c: 329: PomiarECO();
   918  001504  EC80  F038         	call	_PomiarECO	;wreg free
   919                           ;main.c: 330: PomiarIN();
   920  001508  EC88  F034         	call	_PomiarIN	;wreg free
   921                           ;main.c: 331: PomiarVNT();
   922  00150C  EC7E  F048         	call	_PomiarVNT	;wreg free
   923                           ;main.c: 332: ReceptDataLCD();
   924  001510  ECDE  F060         	call	_ReceptDataLCD	;wreg free
   925                           ;main.c: 333: RefLCDData();
   926  001514  D898               	call	_RefLCDData	;wreg free
   927  001516  D7AA               	goto	l76
   928  001518                     u490:
   929                           ;main.c: 334: };
   930  001518  0E02               	movlw	2
   931  00151A  0100               	movlb	__Lparam shr (0+8)
   932  00151C  61A6               	cpfslt	?a_KalibracjaWentylatora^(__Lparam& (0+6
      +                          5280)),b	;volatile
   933  00151E  D011               	goto	l82
   934                           ;main.c: 337: {
   935  001520  0102               	movlb	_MGSD shr (0+8)
   936  001522  ADAE               	btfss	_MGSD& (0+255),6,b
   937  001524  D007               	goto	u550
   938  001526  0102               	movlb	_MGSD shr (0+8)
   939  001528  ADAE               	btfss	_MGSD& (0+255),6,b
   940  00152A  D008               	goto	l83
   941  00152C  EE03  F061         	lfsr	0,_RSDT1+59
   942  001530  50EF               	movf	indf0,w,c
   943  001532  E004               	bz	l83
   944  001534                     u550:
   945                           ;main.c: 339: {
   946  001534  0103               	movlb	(_M+6) shr (0+8)
   947  001536  810C               	bsf	(_M+6)& (0+255),0,b
   948                           ;main.c: 341: M._WYM_ODP=1;
   949  001538  850C               	bsf	(_M+6)& (0+255),2,b
   950                           ;main.c: 342: }
   951  00153A  D003               	goto	l82
   952  00153C                     l83:
   953                           ;main.c: 343: else
   954  00153C  0103               	movlb	(_M+6) shr (0+8)
   955  00153E  910C               	bcf	(_M+6)& (0+255),0,b
   956                           ;main.c: 346: M._WYM_ODP=0;
   957  001540  950C               	bcf	(_M+6)& (0+255),2,b
   958  001542                     l82:
   959                           ;main.c: 358: }
   960  001542  0E0C               	movlw	12
   961  001544  ECD5  F063         	call	_StartRTS
   962                           ;main.c: 361: M._PO_KAL=1;
   963  001548  0103               	movlb	(_M+5) shr (0+8)
   964  00154A  850B               	bsf	(_M+5)& (0+255),2,b
   965                           ;main.c: 362: }
   966  00154C  0012               	return	
   967  00154E                     __end_of_KalibracjaWentylatora:
   968                           ;main.c: 367: void ClearData(void)
   969                           ;main.c: 368: {
   970  00154E                     _ClearData:
   971  000000                     
   972                           ;main.c: 369: DtKNF.enknf=0;
   973  00154E  0101               	movlb	_DtKNF shr (0+8)
   974  001550  91B4               	bcf	_DtKNF& (0+255),0,b
   975                           ;main.c: 370: M._pob_KCO=0;
   976  001552  0103               	movlb	_M shr (0+8)
   977  001554  9106               	bcf	_M& (0+255),0,b
   978                           ;main.c: 371: M._pob_KCW=0;
   979  001556  9306               	bcf	_M& (0+255),1,b
   980                           ;main.c: 372: M._pob_AL=0;
   981  001558  9706               	bcf	_M& (0+255),3,b
   982                           ;main.c: 373: M._pob_SRW=0;
   983  00155A  9506               	bcf	_M& (0+255),2,b
   984                           ;main.c: 374: M._pob_CO=0;
   985  00155C  9B06               	bcf	_M& (0+255),5,b
   986                           ;main.c: 375: M._pob_CW=0;
   987  00155E  9906               	bcf	_M& (0+255),4,b
   988                           ;main.c: 376: M._pob_DzCO=0;
   989  001560  9D06               	bcf	_M& (0+255),6,b
   990                           ;main.c: 377: M._pob_DzCW=0;
   991  001562  9F06               	bcf	_M& (0+255),7,b
   992                           ;main.c: 379: M._WYLACZ=0;
   993  001564  9107               	bcf	(_M+1)& (0+255),0,b
   994                           ;main.c: 380: M._ZMKCOCW=0;
   995  001566  9307               	bcf	(_M+1)& (0+255),1,b
   996                           ;main.c: 381: M._ROZRUCH=0;
   997  001568  9507               	bcf	(_M+1)& (0+255),2,b
   998                           ;main.c: 382: M._RUSZ_48=0;
   999  00156A  9707               	bcf	(_M+1)& (0+255),3,b
  1000                           ;main.c: 383: M._RUSZ_48Z3=0;
  1001  00156C  9907               	bcf	(_M+1)& (0+255),4,b
  1002                           ;main.c: 384: M._RUSZ_PWR=0;
  1003  00156E  9B07               	bcf	(_M+1)& (0+255),5,b
  1004                           ;main.c: 385: M._VWYBIEG=0;
  1005  001570  9D07               	bcf	(_M+1)& (0+255),6,b
  1006                           ;main.c: 386: M._MODULUJ=0;
  1007  001572  9908               	bcf	(_M+2)& (0+255),4,b
  1008                           ;main.c: 387: M._RUSZ_PLOMIEN=0;
  1009  001574  9F07               	bcf	(_M+1)& (0+255),7,b
  1010                           ;main.c: 388: M._RUSZ_RPLM=0;
  1011  001576  9108               	bcf	(_M+2)& (0+255),0,b
  1012                           ;main.c: 389: M._RUSZ_POMPE=0;
  1013  001578  9308               	bcf	(_M+2)& (0+255),1,b
  1014                           ;main.c: 390: M._BLOKUJ_3M=0;
  1015  00157A  9508               	bcf	(_M+2)& (0+255),2,b
  1016                           ;main.c: 391: M._BLOKUJ_15S=0;
  1017  00157C  9708               	bcf	(_M+2)& (0+255),3,b
  1018                           ;main.c: 392: M._BLOKUJ_ODP=0;
  1019  00157E  910C               	bcf	(_M+6)& (0+255),0,b
  1020                           ;main.c: 393: M._PROC_ODP=0;
  1021  001580  930C               	bcf	(_M+6)& (0+255),1,b
  1022                           ;main.c: 394: M._WYM_ODP=0;
  1023  001582  950C               	bcf	(_M+6)& (0+255),2,b
  1024                           ;main.c: 395: M._MODULUJ=0;
  1025  001584  9908               	bcf	(_M+2)& (0+255),4,b
  1026                           ;main.c: 397: M._AKTYWNE_AL=0;
  1027  001586  9D08               	bcf	(_M+2)& (0+255),6,b
  1028                           ;main.c: 398: M._AKTYWNE_SRW=0;
  1029  001588  9B08               	bcf	(_M+2)& (0+255),5,b
  1030                           ;main.c: 399: M._AKTYWNE_PGD=0;
  1031  00158A  9F08               	bcf	(_M+2)& (0+255),7,b
  1032                           ;main.c: 400: M._AKTYWNE_KNF=0;
  1033  00158C  9109               	bcf	(_M+3)& (0+255),0,b
  1034                           ;main.c: 401: M._RUSZ_NTC_CO=0;
  1035  00158E  9309               	bcf	(_M+3)& (0+255),1,b
  1036                           ;main.c: 402: M._RUSZ_NTC_CW=0;
  1037  001590  9509               	bcf	(_M+3)& (0+255),2,b
  1038                           ;main.c: 403: M._RUSZ_STB=0;
  1039  001592  9909               	bcf	(_M+3)& (0+255),4,b
  1040                           ;main.c: 404: M._RUSZ_CISN=0;
  1041  001594  9B09               	bcf	(_M+3)& (0+255),5,b
  1042                           ;main.c: 405: M._RUSZ_NCISN=0;
  1043  001596  9D09               	bcf	(_M+3)& (0+255),6,b
  1044                           ;main.c: 407: M._PW_START=0;
  1045  001598  910A               	bcf	(_M+4)& (0+255),0,b
  1046                           ;main.c: 408: M._RS_START=0;
  1047  00159A  9F09               	bcf	(_M+3)& (0+255),7,b
  1048                           ;main.c: 409: M._PRACA=0;
  1049  00159C  930A               	bcf	(_M+4)& (0+255),1,b
  1050                           ;main.c: 410: M._OST_PL=0;
  1051  00159E  950A               	bcf	(_M+4)& (0+255),2,b
  1052                           ;main.c: 411: M._RUN_MNMOD=0;
  1053  0015A0  970A               	bcf	(_M+4)& (0+255),3,b
  1054                           ;main.c: 412: M._KCW_PMP=0;
  1055  0015A2  990A               	bcf	(_M+4)& (0+255),4,b
  1056                           ;main.c: 413: M._DE_VNT=0;
  1057  0015A4  9B0A               	bcf	(_M+4)& (0+255),5,b
  1058                           ;main.c: 414: M._DE_PMP=0;
  1059  0015A6  930B               	bcf	(_M+5)& (0+255),1,b
  1060                           ;main.c: 415: M._RPM_CW=0;
  1061  0015A8  9D0A               	bcf	(_M+4)& (0+255),6,b
  1062                           ;main.c: 416: M._RUSZ_NTC_IN=0;
  1063  0015AA  9709               	bcf	(_M+3)& (0+255),3,b
  1064                           ;main.c: 418: M._LCD=0;
  1065  0015AC  990B               	bcf	(_M+5)& (0+255),4,b
  1066                           ;main.c: 419: M._LIN=0;
  1067  0015AE  970B               	bcf	(_M+5)& (0+255),3,b
  1068                           ;main.c: 420: M._LIN_RT=0;
  1069  0015B0  9B0B               	bcf	(_M+5)& (0+255),5,b
  1070                           ;main.c: 421: M._LIN_CW=0;
  1071  0015B2  9D0B               	bcf	(_M+5)& (0+255),6,b
  1072                           ;main.c: 422: M._HWB_CW=0;
  1073  0015B4  970C               	bcf	(_M+6)& (0+255),3,b
  1074                           ;main.c: 424: M.ERR_BTY=0;
  1075  0015B6  6B11               	clrf	(_M+11)& (0+255),b
  1076                           ;main.c: 425: M.ROZ=0;
  1077  0015B8  6B12               	clrf	(_M+12)& (0+255),b
  1078                           ;main.c: 426: M.R48=0;
  1079  0015BA  6B13               	clrf	(_M+13)& (0+255),b
  1080                           ;main.c: 427: M.R48Z3=0;
  1081  0015BC  6B14               	clrf	(_M+14)& (0+255),b
  1082                           ;main.c: 428: M.BL3=0;
  1083  0015BE  6B15               	clrf	(_M+15)& (0+255),b
  1084                           ;main.c: 429: M.BL15=0;
  1085  0015C0  6B16               	clrf	(_M+16)& (0+255),b
  1086                           ;main.c: 430: M.WYL=0;
  1087  0015C2  6B17               	clrf	(_M+17)& (0+255),b
  1088                           ;main.c: 431: M.RPR=0;
  1089  0015C4  6B18               	clrf	(_M+18)& (0+255),b
  1090                           ;main.c: 432: M.RPL=0;
  1091  0015C6  6B19               	clrf	(_M+19)& (0+255),b
  1092                           ;main.c: 433: M.RCI=0;
  1093  0015C8  6B1A               	clrf	(_M+20)& (0+255),b
  1094                           ;main.c: 434: M.MNM=0;
  1095  0015CA  6B1B               	clrf	(_M+21)& (0+255),b
  1096                           ;main.c: 435: M.ZKP=0;
  1097  0015CC  6B1C               	clrf	(_M+22)& (0+255),b
  1098                           ;main.c: 436: M.VWB=0;
  1099  0015CE  6B1D               	clrf	(_M+23)& (0+255),b
  1100                           ;main.c: 437: M.SRV=0;
  1101  0015D0  6B1E               	clrf	(_M+24)& (0+255),b
  1102                           ;main.c: 438: M.KRS=0;
  1103  0015D2  6B1F               	clrf	(_M+25)& (0+255),b
  1104                           ;main.c: 439: M.HVZ=0;
  1105  0015D4  6B20               	clrf	(_M+26)& (0+255),b
  1106                           ;main.c: 440: M.LICZNIK_PL=0;
  1107  0015D6  6B0D               	clrf	(_M+7)& (0+255),b
  1108                           ;main.c: 441: M.LICZNIK_PL2=0;
  1109  0015D8  6B0E               	clrf	(_M+8)& (0+255),b
  1110                           ;main.c: 442: M.LICZNIK_ODP=0;
  1111  0015DA  6B10               	clrf	(_M+10)& (0+255),b
  1112                           ;main.c: 443: M.DPR=0;
  1113  0015DC  6B21               	clrf	(_M+27)& (0+255),b
  1114                           ;main.c: 444: M.VVNT=0;
  1115  0015DE  6B22               	clrf	(_M+28)& (0+255),b
  1116                           ;main.c: 445: M.ODP=0;
  1117  0015E0  6B25               	clrf	(_M+31)& (0+255),b
  1118                           ;main.c: 447: RD3=0;
  1119  0015E2  9683               	bcf	3971,3,c	;volatile
  1120                           ;main.c: 448: RD0=0;
  1121  0015E4  9083               	bcf	3971,0,c	;volatile
  1122                           ;main.c: 449: RD2=0;
  1123  0015E6  9483               	bcf	3971,2,c	;volatile
  1124                           ;main.c: 450: ClrDtV();
  1125  0015E8  EFCA  F049         	goto	_ClrDtV	;wreg free
  1126                           ;main.c: 451: }
  1127  0015EC                     __end_of_ClearData:
  1128                           ;main.c: 453: void RestartFltPrt(void)
  1129                           ;main.c: 454: {
  1130  0015EC                     _RestartFltPrt:
  1131  000000                     
  1132                           ;main.c: 455: SetPrt(13,0);
  1133  0015EC  0100               	movlb	__Lparam shr (0+8)
  1134  0015EE  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  1135  0015F0  0E0D               	movlw	13
  1136  0015F2  EC61  F063         	call	_SetPrt
  1137                           ;main.c: 456: SetPrt(17,0);
  1138  0015F6  0100               	movlb	__Lparam shr (0+8)
  1139  0015F8  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  1140  0015FA  0E11               	movlw	17
  1141  0015FC  EC61  F063         	call	_SetPrt
  1142                           ;main.c: 457: SetPrt(9,0);
  1143  001600  0100               	movlb	__Lparam shr (0+8)
  1144  001602  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  1145  001604  0E09               	movlw	9
  1146  001606  EC61  F063         	call	_SetPrt
  1147                           ;main.c: 458: SetPrt(10,0);
  1148  00160A  0100               	movlb	__Lparam shr (0+8)
  1149  00160C  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  1150  00160E  0E0A               	movlw	10
  1151  001610  EC61  F063         	call	_SetPrt
  1152                           ;main.c: 459: SetPrt(12,0);
  1153  001614  0100               	movlb	__Lparam shr (0+8)
  1154  001616  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  1155  001618  0E0C               	movlw	12
  1156  00161A  EC61  F063         	call	_SetPrt
  1157                           ;main.c: 460: SetPrt(11,0);
  1158  00161E  0100               	movlb	__Lparam shr (0+8)
  1159  001620  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  1160  001622  0E0B               	movlw	11
  1161  001624  EC61  F063         	call	_SetPrt
  1162                           ;main.c: 461: SetPrt(7,0);
  1163  001628  0100               	movlb	__Lparam shr (0+8)
  1164  00162A  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  1165  00162C  0E07               	movlw	7
  1166  00162E  EF61  F063         	goto	_SetPrt
  1167                           ;main.c: 462: }
  1168  001632                     __end_of_RestartFltPrt:
  1169                           ;main.c: 465: unsigned char KodSterownika(void)
  1170                           ;main.c: 466: {
  1171  001632                     _KodSterownika:
  1172  000000                     
  1173                           ;main.c: 468: switch(DtKNF.tpkt)
  1174  001632  D002               	goto	l89
  1175  001634                     l90:
  1176                           ;main.c: 469: {
  1177                           ;main.c: 471: return 0x11;
  1178  001634  0C11               	retlw	17
  1179  001636                     l91:
  1180                           ;main.c: 472: case 3:
  1181                           ;main.c: 473: return 0x17;
  1182  001636  0C17               	retlw	23
  1183                           ;main.c: 474: default:
  1184                           ;main.c: 475: return 0x17;
  1185  001638                     l89:
  1186  001638  C1C2  FFE8         	movff	_DtKNF+14,wreg
  1187  00163C  0A00               	xorlw	0
  1188  00163E  E0FA               	bz	l90
  1189  001640  0A03               	xorlw	3
  1190  001642  E0F9               	bz	l91
  1191  001644  0C17               	retlw	23
  1192                           ;main.c: 477: }
  1193  001646                     __end_of_KodSterownika:
  1194                           ;main.c: 481: void RefLCDData(void)
  1195                           ;main.c: 482: {
  1196  001646                     _RefLCDData:
  1197  000000                     
  1198                           ;main.c: 483: RSDT1.outRDZ0=(KodSterownika()&0b0
      +                          0011111)|((DtKNF.alin&0b00000111)<<5);
  1199  001646  C1D2  F001         	movff	_DtKNF+30,btemp+1
  1200  00164A  0E07               	movlw	7
  1201  00164C  1601               	andwf	btemp+1,f,c
  1202  00164E  0E05               	movlw	5
  1203  001650  6E00               	movwf	btemp,c
  1204  001652                     u565:
  1205  001652  90D8               	bcf	status,0,c
  1206  001654  3601               	rlcf	btemp+1,f,c
  1207  001656  2E00               	decfsz	btemp,f,c
  1208  001658  D7FC               	goto	u565
  1209  00165A  DFEB               	call	_KodSterownika	;wreg free
  1210  00165C  6E00               	movwf	btemp,c
  1211  00165E  0E1F               	movlw	31
  1212  001660  1600               	andwf	btemp,f,c
  1213  001662  5001               	movf	btemp+1,w,c
  1214  001664  1000               	iorwf	btemp,w,c
  1215  001666  CFE8 F328          	movff	wreg,_RSDT1+2
  1216                           ;main.c: 484: RSDT1.outRDZ1=(DtKNF.tpkt&0x0F)|((
      +                          7&0x0F)<<4);
  1217  00166A  C1C2  FFE8         	movff	_DtKNF+14,wreg
  1218  00166E  0B0F               	andlw	15
  1219  001670  0970               	iorlw	112
  1220  001672  CFE8 F329          	movff	wreg,_RSDT1+3
  1221                           ;main.c: 485: BitSet2(&RSDT1.outSTAT0,2,M._PRACA
      +                          &&!M._RPM_CW&&RdPrt(5));
  1222  001676  0100               	movlb	__Lparam shr (0+8)
  1223  001678  0E3C               	movlw	low (_RSDT1+22)
  1224  00167A  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1225  00167C  0E03               	movlw	high (_RSDT1+22)
  1226  00167E  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1227  001680  0E02               	movlw	2
  1228  001682  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1229  001684  0103               	movlb	(_M+4) shr (0+8)
  1230  001686  B30A               	btfsc	(_M+4)& (0+255),1,b
  1231  001688  BD0A               	btfsc	(_M+4)& (0+255),6,b
  1232  00168A  D006               	goto	u610
  1233  00168C  0E05               	movlw	5
  1234  00168E  EC50  F063         	call	_RdPrt
  1235  001692  E302               	bnc	u610
  1236  001694  0E01               	movlw	1
  1237  001696  D001               	goto	u620
  1238  001698                     u610:
  1239  001698  0E00               	movlw	0
  1240  00169A                     u620:
  1241  00169A  0100               	movlb	__Lparam shr (0+8)
  1242  00169C  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1243  00169E  EC57  F06A         	call	_BitSet2	;wreg free
  1244                           ;main.c: 486: BitSet2(&RSDT1.outSTAT0,3,M._PRACA
      +                          &&M._RPM_CW&&RdPrt(5));
  1245  0016A2  0100               	movlb	__Lparam shr (0+8)
  1246  0016A4  0E3C               	movlw	low (_RSDT1+22)
  1247  0016A6  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1248  0016A8  0E03               	movlw	high (_RSDT1+22)
  1249  0016AA  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1250  0016AC  0E03               	movlw	3
  1251  0016AE  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1252  0016B0  0103               	movlb	(_M+4) shr (0+8)
  1253  0016B2  B30A               	btfsc	(_M+4)& (0+255),1,b
  1254  0016B4  AD0A               	btfss	(_M+4)& (0+255),6,b
  1255  0016B6  D006               	goto	u670
  1256  0016B8  0E05               	movlw	5
  1257  0016BA  EC50  F063         	call	_RdPrt
  1258  0016BE  E302               	bnc	u670
  1259  0016C0  0E01               	movlw	1
  1260  0016C2  D001               	goto	u680
  1261  0016C4                     u670:
  1262  0016C4  0E00               	movlw	0
  1263  0016C6                     u680:
  1264  0016C6  0100               	movlb	__Lparam shr (0+8)
  1265  0016C8  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1266  0016CA  EC57  F06A         	call	_BitSet2	;wreg free
  1267                           ;main.c: 487: BitSet2(&RSDT1.outSTAT0,4,M._AKTYW
      +                          NE_SRW);
  1268  0016CE  0100               	movlb	__Lparam shr (0+8)
  1269  0016D0  0E3C               	movlw	low (_RSDT1+22)
  1270  0016D2  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1271  0016D4  0E03               	movlw	high (_RSDT1+22)
  1272  0016D6  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1273  0016D8  0E04               	movlw	4
  1274  0016DA  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1275  0016DC  EE03  F008         	lfsr	0,_M+2
  1276  0016E0  38EF               	swapf	indf0,w,c
  1277  0016E2  6E00               	movwf	btemp,c
  1278  0016E4  3000               	rrcf	btemp,w,c
  1279  0016E6  0B01               	andlw	1
  1280  0016E8  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1281  0016EA  EC57  F06A         	call	_BitSet2	;wreg free
  1282                           ;main.c: 488: BitSet2(&RSDT1.outSTAT0,5,M._AKTYW
      +                          NE_AL);
  1283  0016EE  0100               	movlb	__Lparam shr (0+8)
  1284  0016F0  0E3C               	movlw	low (_RSDT1+22)
  1285  0016F2  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1286  0016F4  0E03               	movlw	high (_RSDT1+22)
  1287  0016F6  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1288  0016F8  0E05               	movlw	5
  1289  0016FA  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1290  0016FC  EE03  F008         	lfsr	0,_M+2
  1291  001700  38EF               	swapf	indf0,w,c
  1292  001702  6E00               	movwf	btemp,c
  1293  001704  3200               	rrcf	btemp,f,c
  1294  001706  3000               	rrcf	btemp,w,c
  1295  001708  0B01               	andlw	1
  1296  00170A  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1297  00170C  EC57  F06A         	call	_BitSet2	;wreg free
  1298                           ;main.c: 489: BitSet2(&RSDT1.outSTAT0,6,M._AKTYW
      +                          NE_KNF);
  1299  001710  0100               	movlb	__Lparam shr (0+8)
  1300  001712  0E3C               	movlw	low (_RSDT1+22)
  1301  001714  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1302  001716  0E03               	movlw	high (_RSDT1+22)
  1303  001718  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1304  00171A  0E06               	movlw	6
  1305  00171C  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1306  00171E  EE03  F009         	lfsr	0,_M+3
  1307  001722  50EF               	movf	indf0,w,c
  1308  001724  0B01               	andlw	1
  1309  001726  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1310  001728  EC57  F06A         	call	_BitSet2	;wreg free
  1311                           ;main.c: 490: BitSet2(&RSDT1.outSTAT0,7,DtKNF.en
      +                          knf);
  1312  00172C  0100               	movlb	__Lparam shr (0+8)
  1313  00172E  0E3C               	movlw	low (_RSDT1+22)
  1314  001730  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1315  001732  0E03               	movlw	high (_RSDT1+22)
  1316  001734  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1317  001736  0E07               	movlw	7
  1318  001738  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1319  00173A  EE01  F0B4         	lfsr	0,_DtKNF
  1320  00173E  50EF               	movf	indf0,w,c
  1321  001740  0B01               	andlw	1
  1322  001742  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1323  001744  EC57  F06A         	call	_BitSet2	;wreg free
  1324                           ;main.c: 492: BitSet2(&RSDT1.outSTAT1,0,M._pob_D
      +                          zCW);
  1325  001748  0100               	movlb	__Lparam shr (0+8)
  1326  00174A  0E3D               	movlw	low (_RSDT1+23)
  1327  00174C  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1328  00174E  0E03               	movlw	high (_RSDT1+23)
  1329  001750  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1330  001752  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1331  001754  EE03  F006         	lfsr	0,_M
  1332  001758  34EF               	rlcf	indf0,w,c
  1333  00175A  34EF               	rlcf	indf0,w,c
  1334  00175C  0B01               	andlw	1
  1335  00175E  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1336  001760  EC57  F06A         	call	_BitSet2	;wreg free
  1337                           ;main.c: 493: BitSet2(&RSDT1.outSTAT1,1,M._pob_D
      +                          zCO);
  1338  001764  0100               	movlb	__Lparam shr (0+8)
  1339  001766  0E3D               	movlw	low (_RSDT1+23)
  1340  001768  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1341  00176A  0E03               	movlw	high (_RSDT1+23)
  1342  00176C  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1343  00176E  0E01               	movlw	1
  1344  001770  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1345  001772  EE03  F006         	lfsr	0,_M
  1346  001776  38EF               	swapf	indf0,w,c
  1347  001778  6E00               	movwf	btemp,c
  1348  00177A  3200               	rrcf	btemp,f,c
  1349  00177C  3000               	rrcf	btemp,w,c
  1350  00177E  0B01               	andlw	1
  1351  001780  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1352  001782  EC57  F06A         	call	_BitSet2	;wreg free
  1353                           ;main.c: 494: BitSet2(&RSDT1.outSTAT1,5,M._AKTYW
      +                          NE_PGD);
  1354  001786  0100               	movlb	__Lparam shr (0+8)
  1355  001788  0E3D               	movlw	low (_RSDT1+23)
  1356  00178A  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1357  00178C  0E03               	movlw	high (_RSDT1+23)
  1358  00178E  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1359  001790  0E05               	movlw	5
  1360  001792  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1361  001794  EE03  F008         	lfsr	0,_M+2
  1362  001798  34EF               	rlcf	indf0,w,c
  1363  00179A  34EF               	rlcf	indf0,w,c
  1364  00179C  0B01               	andlw	1
  1365  00179E  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1366  0017A0  EC57  F06A         	call	_BitSet2	;wreg free
  1367                           ;main.c: 495: BitSet2(&RSDT1.outSTAT1,6,M._PRACA
      +                          &&!M._RPM_CW);
  1368  0017A4  0100               	movlb	__Lparam shr (0+8)
  1369  0017A6  0E3D               	movlw	low (_RSDT1+23)
  1370  0017A8  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1371  0017AA  0E03               	movlw	high (_RSDT1+23)
  1372  0017AC  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1373  0017AE  0E06               	movlw	6
  1374  0017B0  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1375  0017B2  0103               	movlb	(_M+4) shr (0+8)
  1376  0017B4  B30A               	btfsc	(_M+4)& (0+255),1,b
  1377  0017B6  BD0A               	btfsc	(_M+4)& (0+255),6,b
  1378  0017B8  D002               	goto	u710
  1379  0017BA  0E01               	movlw	1
  1380  0017BC  D001               	goto	u720
  1381  0017BE                     u710:
  1382  0017BE  0E00               	movlw	0
  1383  0017C0                     u720:
  1384  0017C0  0100               	movlb	__Lparam shr (0+8)
  1385  0017C2  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1386  0017C4  EC57  F06A         	call	_BitSet2	;wreg free
  1387                           ;main.c: 496: BitSet2(&RSDT1.outSTAT1,7,M._PRACA
      +                          &&M._RPM_CW);
  1388  0017C8  0100               	movlb	__Lparam shr (0+8)
  1389  0017CA  0E3D               	movlw	low (_RSDT1+23)
  1390  0017CC  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1391  0017CE  0E03               	movlw	high (_RSDT1+23)
  1392  0017D0  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1393  0017D2  0E07               	movlw	7
  1394  0017D4  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1395  0017D6  0103               	movlb	(_M+4) shr (0+8)
  1396  0017D8  B30A               	btfsc	(_M+4)& (0+255),1,b
  1397  0017DA  AD0A               	btfss	(_M+4)& (0+255),6,b
  1398  0017DC  D002               	goto	u750
  1399  0017DE  0E01               	movlw	1
  1400  0017E0  D001               	goto	u760
  1401  0017E2                     u750:
  1402  0017E2  0E00               	movlw	0
  1403  0017E4                     u760:
  1404  0017E4  0100               	movlb	__Lparam shr (0+8)
  1405  0017E6  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1406  0017E8  EC57  F06A         	call	_BitSet2	;wreg free
  1407                           ;main.c: 499: BitSet2(&RSDT1.outSTAT2,1,DtCO._er
      +                          r_CO);
  1408  0017EC  0100               	movlb	__Lparam shr (0+8)
  1409  0017EE  0E3E               	movlw	low (_RSDT1+24)
  1410  0017F0  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1411  0017F2  0E03               	movlw	high (_RSDT1+24)
  1412  0017F4  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1413  0017F6  0E01               	movlw	1
  1414  0017F8  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1415  0017FA  EE00  F07F         	lfsr	0,_DtCO
  1416  0017FE  50EF               	movf	indf0,w,c
  1417  001800  0B01               	andlw	1
  1418  001802  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1419  001804  EC57  F06A         	call	_BitSet2	;wreg free
  1420                           ;main.c: 500: BitSet2(&RSDT1.outSTAT2,0,DtCW._er
      +                          r_CW);
  1421  001808  0100               	movlb	__Lparam shr (0+8)
  1422  00180A  0E3E               	movlw	low (_RSDT1+24)
  1423  00180C  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1424  00180E  0E03               	movlw	high (_RSDT1+24)
  1425  001810  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1426  001812  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1427  001814  EE00  F070         	lfsr	0,_DtCW
  1428  001818  50EF               	movf	indf0,w,c
  1429  00181A  0B01               	andlw	1
  1430  00181C  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1431  00181E  EC57  F06A         	call	_BitSet2	;wreg free
  1432                           ;main.c: 501: BitSet2(&RSDT1.outSTAT2,2,DtCS._er
      +                          ror);
  1433  001822  0100               	movlb	__Lparam shr (0+8)
  1434  001824  0E3E               	movlw	low (_RSDT1+24)
  1435  001826  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1436  001828  0E03               	movlw	high (_RSDT1+24)
  1437  00182A  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1438  00182C  0E02               	movlw	2
  1439  00182E  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1440  001830  EE00  F063         	lfsr	0,_DtCS
  1441  001834  30EF               	rrcf	indf0,w,c
  1442  001836  6E00               	movwf	btemp,c
  1443  001838  3200               	rrcf	btemp,f,c
  1444  00183A  3000               	rrcf	btemp,w,c
  1445  00183C  0B01               	andlw	1
  1446  00183E  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1447  001840  EC57  F06A         	call	_BitSet2	;wreg free
  1448                           ;main.c: 502: BitSet2(&RSDT1.outSTAT2,3,DtCS._no
      +                          _mont);
  1449  001844  0100               	movlb	__Lparam shr (0+8)
  1450  001846  0E3E               	movlw	low (_RSDT1+24)
  1451  001848  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1452  00184A  0E03               	movlw	high (_RSDT1+24)
  1453  00184C  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1454  00184E  0E03               	movlw	3
  1455  001850  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1456  001852  C064  F0AD         	movff	_DtCS+1,?_BitSet2+3
  1457  001856  EC57  F06A         	call	_BitSet2	;wreg free
  1458                           ;main.c: 504: BitSet2(&RSDT1.outSTAT3,0,(RB6)?0:
      +                          1);
  1459  00185A  0100               	movlb	__Lparam shr (0+8)
  1460  00185C  0E3F               	movlw	low (_RSDT1+25)
  1461  00185E  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1462  001860  0E03               	movlw	high (_RSDT1+25)
  1463  001862  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1464  001864  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1465  001866  0E00               	movlw	0
  1466  001868  AC81               	btfss	3969,6,c	;volatile
  1467  00186A  0E01               	movlw	1
  1468  00186C  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1469  00186E  EC57  F06A         	call	_BitSet2	;wreg free
  1470                           ;main.c: 505: BitSet2(&RSDT1.outSTAT3,1,RD3);
  1471  001872  0100               	movlb	__Lparam shr (0+8)
  1472  001874  0E3F               	movlw	low (_RSDT1+25)
  1473  001876  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1474  001878  0E03               	movlw	high (_RSDT1+25)
  1475  00187A  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1476  00187C  0E01               	movlw	1
  1477  00187E  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1478  001880  0E00               	movlw	0
  1479  001882  B683               	btfsc	3971,3,c	;volatile
  1480  001884  0E01               	movlw	1
  1481  001886  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1482  001888  EC57  F06A         	call	_BitSet2	;wreg free
  1483                           ;main.c: 506: BitSet2(&RSDT1.outSTAT3,2,M._ROZRU
      +                          CH);
  1484  00188C  0100               	movlb	__Lparam shr (0+8)
  1485  00188E  0E3F               	movlw	low (_RSDT1+25)
  1486  001890  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1487  001892  0E03               	movlw	high (_RSDT1+25)
  1488  001894  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1489  001896  0E02               	movlw	2
  1490  001898  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1491  00189A  EE03  F007         	lfsr	0,_M+1
  1492  00189E  30EF               	rrcf	indf0,w,c
  1493  0018A0  6E00               	movwf	btemp,c
  1494  0018A2  3000               	rrcf	btemp,w,c
  1495  0018A4  0B01               	andlw	1
  1496  0018A6  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1497  0018A8  EC57  F06A         	call	_BitSet2	;wreg free
  1498                           ;main.c: 507: BitSet2(&RSDT1.outSTAT3,3,DtIN._er
      +                          r_IN);
  1499  0018AC  0100               	movlb	__Lparam shr (0+8)
  1500  0018AE  0E3F               	movlw	low (_RSDT1+25)
  1501  0018B0  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1502  0018B2  0E03               	movlw	high (_RSDT1+25)
  1503  0018B4  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1504  0018B6  0E03               	movlw	3
  1505  0018B8  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1506  0018BA  EE00  F092         	lfsr	0,_DtIN
  1507  0018BE  50EF               	movf	indf0,w,c
  1508  0018C0  0B01               	andlw	1
  1509  0018C2  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1510  0018C4  EC57  F06A         	call	_BitSet2	;wreg free
  1511                           ;main.c: 508: BitSet2(&RSDT1.outSTAT3,4,(DtKNF.r
      +                          dpm!=0)?1:0);
  1512  0018C8  0100               	movlb	__Lparam shr (0+8)
  1513  0018CA  0E3F               	movlw	low (_RSDT1+25)
  1514  0018CC  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1515  0018CE  0E03               	movlw	high (_RSDT1+25)
  1516  0018D0  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1517  0018D2  0E04               	movlw	4
  1518  0018D4  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1519  0018D6  EE01  F0C4         	lfsr	0,_DtKNF+16
  1520  0018DA  50EF               	movf	indf0,w,c
  1521  0018DC  0E00               	movlw	0
  1522  0018DE  A4D8               	btfss	status,2,c
  1523  0018E0  0E01               	movlw	1
  1524  0018E2  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1525  0018E4  EC57  F06A         	call	_BitSet2	;wreg free
  1526                           ;main.c: 509: BitSet2(&RSDT1.outSTAT3,5,((DtKNF.
      +                          teco!=0)&&(DtKNF.robg!=0))?1:0);
  1527  0018E8  0100               	movlb	__Lparam shr (0+8)
  1528  0018EA  0E3F               	movlw	low (_RSDT1+25)
  1529  0018EC  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1530  0018EE  0E03               	movlw	high (_RSDT1+25)
  1531  0018F0  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1532  0018F2  0E05               	movlw	5
  1533  0018F4  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1534  0018F6  EE01  F0C7         	lfsr	0,_DtKNF+19
  1535  0018FA  50EF               	movf	indf0,w,c
  1536  0018FC  E006               	bz	u790
  1537  0018FE  EE01  F0C9         	lfsr	0,_DtKNF+21
  1538  001902  50EF               	movf	indf0,w,c
  1539  001904  E002               	bz	u790
  1540  001906  0E01               	movlw	1
  1541  001908  D001               	goto	u800
  1542  00190A                     u790:
  1543  00190A  0E00               	movlw	0
  1544  00190C                     u800:
  1545  00190C  0100               	movlb	__Lparam shr (0+8)
  1546  00190E  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1547  001910  EC57  F06A         	call	_BitSet2	;wreg free
  1548                           ;main.c: 510: BitSet2(&RSDT1.outSTAT3,6,(RdPrt(1
      +                          1)!=0)?1:0);
  1549  001914  0100               	movlb	__Lparam shr (0+8)
  1550  001916  0E3F               	movlw	low (_RSDT1+25)
  1551  001918  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1552  00191A  0E03               	movlw	high (_RSDT1+25)
  1553  00191C  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1554  00191E  0E06               	movlw	6
  1555  001920  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1556  001922  0E0B               	movlw	11
  1557  001924  EC50  F063         	call	_RdPrt
  1558  001928  0E00               	movlw	0
  1559  00192A  B0D8               	btfsc	status,0,c
  1560  00192C  0E01               	movlw	1
  1561  00192E  0100               	movlb	__Lparam shr (0+8)
  1562  001930  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1563  001932  EC57  F06A         	call	_BitSet2	;wreg free
  1564                           ;main.c: 511: BitSet2(&RSDT1.outSTAT3,7,(RdPrt(1
      +                          2)!=0)?1:0);
  1565  001936  0100               	movlb	__Lparam shr (0+8)
  1566  001938  0E3F               	movlw	low (_RSDT1+25)
  1567  00193A  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1568  00193C  0E03               	movlw	high (_RSDT1+25)
  1569  00193E  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1570  001940  0E07               	movlw	7
  1571  001942  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1572  001944  0E0C               	movlw	12
  1573  001946  EC50  F063         	call	_RdPrt
  1574  00194A  0E00               	movlw	0
  1575  00194C  B0D8               	btfsc	status,0,c
  1576  00194E  0E01               	movlw	1
  1577  001950  0100               	movlb	__Lparam shr (0+8)
  1578  001952  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1579  001954  EC57  F06A         	call	_BitSet2	;wreg free
  1580                           ;main.c: 513: BitSet2(&RSDT1.outSTAT4,0,M._PROC_
      +                          ODP);
  1581  001958  0100               	movlb	__Lparam shr (0+8)
  1582  00195A  0E40               	movlw	low (_RSDT1+26)
  1583  00195C  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1584  00195E  0E03               	movlw	high (_RSDT1+26)
  1585  001960  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1586  001962  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1587  001964  EE03  F00C         	lfsr	0,_M+6
  1588  001968  30EF               	rrcf	indf0,w,c
  1589  00196A  0B01               	andlw	1
  1590  00196C  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1591  00196E  EC57  F06A         	call	_BitSet2	;wreg free
  1592                           ;main.c: 515: BitSet2(&RSDT1.outKSTAT0,0,(RB6)?0
      +                          :1);
  1593  001972  0100               	movlb	__Lparam shr (0+8)
  1594  001974  0E44               	movlw	low (_RSDT1+30)
  1595  001976  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1596  001978  0E03               	movlw	high (_RSDT1+30)
  1597  00197A  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1598  00197C  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1599  00197E  0E00               	movlw	0
  1600  001980  AC81               	btfss	3969,6,c	;volatile
  1601  001982  0E01               	movlw	1
  1602  001984  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1603  001986  EC57  F06A         	call	_BitSet2	;wreg free
  1604                           ;main.c: 516: BitSet2(&RSDT1.outKSTAT0,1,(DtKNF.
      +                          tpkt==0)?1:0);
  1605  00198A  0100               	movlb	__Lparam shr (0+8)
  1606  00198C  0E44               	movlw	low (_RSDT1+30)
  1607  00198E  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  1608  001990  0E03               	movlw	high (_RSDT1+30)
  1609  001992  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  1610  001994  0E01               	movlw	1
  1611  001996  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  1612  001998  EE01  F0C2         	lfsr	0,_DtKNF+14
  1613  00199C  50EF               	movf	indf0,w,c
  1614  00199E  0E00               	movlw	0
  1615  0019A0  B4D8               	btfsc	status,2,c
  1616  0019A2  0E01               	movlw	1
  1617  0019A4  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  1618  0019A6  EC57  F06A         	call	_BitSet2	;wreg free
  1619                           ;main.c: 517: RSDT1.outPP=PMP.APROC;
  1620  0019AA  C2F3  F33A         	movff	_PMP+2,_RSDT1+20
  1621                           ;main.c: 518: RSDT1.outPG=VNTToProc(M.VVNT);
  1622  0019AE  C322  FFE8         	movff	_M+28,wreg
  1623  0019B2  ECF9  F057         	call	_VNTToProc
  1624  0019B6  CFE8 F33B          	movff	wreg,_RSDT1+21
  1625                           ;main.c: 526: M._LIN=0;
  1626  0019BA  0103               	movlb	(_M+5) shr (0+8)
  1627  0019BC  970B               	bcf	(_M+5)& (0+255),3,b
  1628                           ;main.c: 527: M._LIN_RT=0;
  1629  0019BE  9B0B               	bcf	(_M+5)& (0+255),5,b
  1630                           ;main.c: 528: M._LIN_CW=0;
  1631  0019C0  9D0B               	bcf	(_M+5)& (0+255),6,b
  1632                           ;main.c: 529: M._LIN_KSK=0;
  1633  0019C2  9F0B               	bcf	(_M+5)& (0+255),7,b
  1634                           ;main.c: 531: }
  1635  0019C4  0012               	return	
  1636  0019C6                     __end_of_RefLCDData:
  1637                           ;main.c: 535: void KolejkaPobudzen(void)
  1638                           ;main.c: 536: {
  1639  0019C6                     _KolejkaPobudzen:
  1640  000000                     
  1641                           ;main.c: 537: unsigned char wr=0;
  1642  0019C6  6AD9               	clrf	fsr2l,c
  1643                           ;main.c: 540: if(M._AKTYWNE_KNF)
  1644  0019C8  0103               	movlb	(_M+3) shr (0+8)
  1645  0019CA  A109               	btfss	(_M+3)& (0+255),0,b
  1646  0019CC  D025               	goto	l95
  1647                           ;main.c: 541: {
  1648  0019CE  9506               	bcf	_M& (0+255),2,b
  1649                           ;main.c: 543: M._pob_AL=0;
  1650  0019D0  9706               	bcf	_M& (0+255),3,b
  1651                           ;main.c: 544: M._pob_CO=0;
  1652  0019D2  9B06               	bcf	_M& (0+255),5,b
  1653                           ;main.c: 545: M._pob_CW=0;
  1654  0019D4  9906               	bcf	_M& (0+255),4,b
  1655                           ;main.c: 546: M._pob_DzCO=0;
  1656  0019D6  9D06               	bcf	_M& (0+255),6,b
  1657                           ;main.c: 547: M._pob_DzCW=0;
  1658  0019D8  9F06               	bcf	_M& (0+255),7,b
  1659                           ;main.c: 548: if((PFN.poz==2)||(PFN.poz==3))
  1660  0019DA  0100               	movlb	(_PFN+1) shr (0+8)
  1661  0019DC  516C               	movf	(_PFN+1)& (0+255),w,b
  1662  0019DE  0A02               	xorlw	2
  1663  0019E0  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1664  0019E2  E004               	bz	u840
  1665  0019E4  516C               	movf	(_PFN+1)& (0+255),w,b
  1666  0019E6  0A03               	xorlw	3
  1667  0019E8  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1668  0019EA  E112               	bnz	l96
  1669  0019EC                     u840:
  1670                           ;main.c: 549: {
  1671  0019EC  0101               	movlb	_DtKNF shr (0+8)
  1672  0019EE  A5B4               	btfss	_DtKNF& (0+255),2,b
  1673  0019F0  D003               	goto	l97
  1674  0019F2  0103               	movlb	_M shr (0+8)
  1675  0019F4  8306               	bsf	_M& (0+255),1,b
  1676  0019F6  D002               	goto	l98
  1677  0019F8                     l97:
  1678                           ;main.c: 551: else M._pob_KCW=0;
  1679  0019F8  0103               	movlb	_M shr (0+8)
  1680  0019FA  9306               	bcf	_M& (0+255),1,b
  1681  0019FC                     l98:
  1682                           ;main.c: 552: if(DtKNF.wymCO)
  1683  0019FC  0101               	movlb	_DtKNF shr (0+8)
  1684  0019FE  A3B4               	btfss	_DtKNF& (0+255),1,b
  1685  001A00  D004               	goto	l99
  1686                           ;main.c: 553: {
  1687  001A02  0103               	movlb	_M shr (0+8)
  1688  001A04  8106               	bsf	_M& (0+255),0,b
  1689                           ;main.c: 555: M._BLOKUJ_15S=0;
  1690  001A06  9708               	bcf	(_M+2)& (0+255),3,b
  1691                           ;main.c: 556: }
  1692  001A08  0012               	return	
  1693  001A0A                     l99:
  1694                           ;main.c: 557: else M._pob_KCO=0;
  1695  001A0A  0103               	movlb	_M shr (0+8)
  1696  001A0C  9106               	bcf	_M& (0+255),0,b
  1697                           ;main.c: 558: }
  1698  001A0E  0012               	return	
  1699  001A10                     l96:
  1700                           ;main.c: 559: else
  1701  001A10  0103               	movlb	_M shr (0+8)
  1702  001A12  9306               	bcf	_M& (0+255),1,b
  1703                           ;main.c: 562: M._pob_KCO=0;
  1704  001A14  9106               	bcf	_M& (0+255),0,b
  1705                           ;main.c: 563: }
  1706  001A16  0012               	return	
  1707  001A18                     l95:
  1708                           ;main.c: 565: else
  1709  001A18  0103               	movlb	_M shr (0+8)
  1710  001A1A  9306               	bcf	_M& (0+255),1,b
  1711                           ;main.c: 569: M._pob_KCO=0;
  1712  001A1C  9106               	bcf	_M& (0+255),0,b
  1713                           ;main.c: 570: if(M._AKTYWNE_SRW&&(PFN.poz==3))
  1714  001A1E  AB08               	btfss	(_M+2)& (0+255),5,b
  1715  001A20  D00E               	goto	l103
  1716  001A22  0100               	movlb	(_PFN+1) shr (0+8)
  1717  001A24  516C               	movf	(_PFN+1)& (0+255),w,b
  1718  001A26  0A03               	xorlw	3
  1719  001A28  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1720                           ;main.c: 571: {
  1721  001A2A  0103               	movlb	_M shr (0+8)
  1722  001A2C  E109               	bnz	L14
  1723  001A2E  8506               	bsf	_M& (0+255),2,b
  1724                           ;main.c: 573: M._pob_AL=0;
  1725  001A30  9706               	bcf	_M& (0+255),3,b
  1726                           ;main.c: 574: M._pob_CW=0;
  1727  001A32  9906               	bcf	_M& (0+255),4,b
  1728                           ;main.c: 575: M._pob_CO=0;
  1729  001A34  9B06               	bcf	_M& (0+255),5,b
  1730                           ;main.c: 576: M._pob_DzCO=0;
  1731  001A36  9D06               	bcf	_M& (0+255),6,b
  1732                           ;main.c: 577: M._pob_DzCW=0;
  1733  001A38  9F06               	bcf	_M& (0+255),7,b
  1734                           ;main.c: 578: M._BLOKUJ_15S=0;
  1735  001A3A  9708               	bcf	(_M+2)& (0+255),3,b
  1736                           ;main.c: 579: }
  1737  001A3C  0012               	return	
  1738  001A3E                     l103:
  1739                           ;main.c: 580: else
  1740  001A3E  0103               	movlb	_M shr (0+8)
  1741  001A40                     L14:
  1742  001A40  9506               	bcf	_M& (0+255),2,b
  1743                           ;main.c: 584: if(M._AKTYWNE_AL)
  1744  001A42  AD08               	btfss	(_M+2)& (0+255),6,b
  1745  001A44  D010               	goto	l105
  1746                           ;main.c: 585: {
  1747  001A46  0E46               	movlw	70
  1748  001A48  0100               	movlb	(_DtCW+2) shr (0+8)
  1749  001A4A  6172               	cpfslt	(_DtCW+2)& (0+255),b
  1750  001A4C  D003               	goto	l106
  1751  001A4E  0103               	movlb	_M shr (0+8)
  1752  001A50  8706               	bsf	_M& (0+255),3,b
  1753  001A52  D003               	goto	l107
  1754  001A54                     l106:
  1755                           ;main.c: 587: else
  1756  001A54  0103               	movlb	_M shr (0+8)
  1757  001A56  9706               	bcf	_M& (0+255),3,b
  1758                           ;main.c: 590: M._AKTYWNE_AL=0;
  1759  001A58  9D08               	bcf	(_M+2)& (0+255),6,b
  1760  001A5A                     l107:
  1761                           ;main.c: 591: }
  1762  001A5A  0103               	movlb	_M shr (0+8)
  1763  001A5C  9906               	bcf	_M& (0+255),4,b
  1764                           ;main.c: 593: M._pob_CO=0;
  1765  001A5E  9B06               	bcf	_M& (0+255),5,b
  1766                           ;main.c: 594: M._pob_DzCO=0;
  1767  001A60  9D06               	bcf	_M& (0+255),6,b
  1768                           ;main.c: 595: M._pob_DzCW=0;
  1769  001A62  9F06               	bcf	_M& (0+255),7,b
  1770                           ;main.c: 596: }
  1771  001A64  0012               	return	
  1772  001A66                     l105:
  1773                           ;main.c: 597: else
  1774  001A66  0103               	movlb	_M shr (0+8)
  1775  001A68  9706               	bcf	_M& (0+255),3,b
  1776                           ;main.c: 601: if(DtKNF.tpkt!=0) wr=RdPrt(11)&&((
      +                          PFN.poz==2)||(PFN.poz==3));
  1777  001A6A  EE01  F0C2         	lfsr	0,_DtKNF+14
  1778  001A6E  50EF               	movf	indf0,w,c
  1779  001A70  E00F               	bz	l109
  1780  001A72  0E0B               	movlw	11
  1781  001A74  EC50  F063         	call	_RdPrt
  1782  001A78  E31A               	bnc	u1050
  1783  001A7A  0100               	movlb	(_PFN+1) shr (0+8)
  1784  001A7C  516C               	movf	(_PFN+1)& (0+255),w,b
  1785  001A7E  0A02               	xorlw	2
  1786  001A80  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1787  001A82  E004               	bz	u971
  1788  001A84  516C               	movf	(_PFN+1)& (0+255),w,b
  1789  001A86  0A03               	xorlw	3
  1790  001A88  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1791  001A8A  E111               	bnz	u1050
  1792  001A8C                     u971:
  1793  001A8C  0E01               	movlw	1
  1794  001A8E  D010               	goto	u1060
  1795  001A90                     l109:
  1796                           ;main.c: 602: else wr=DtCW._wpz_CW&&DtCO._pz_CO&
      +                          &((PFN.poz==2)||(PFN.poz==3));
  1797  001A90  0100               	movlb	_DtCW shr (0+8)
  1798  001A92  A770               	btfss	_DtCW& (0+255),3,b
  1799  001A94  D00C               	goto	u1050
  1800  001A96  0100               	movlb	(_DtCO+1) shr (0+8)
  1801  001A98  A380               	btfss	(_DtCO+1)& (0+255),1,b
  1802  001A9A  D009               	goto	u1050
  1803  001A9C  0100               	movlb	(_PFN+1) shr (0+8)
  1804  001A9E  516C               	movf	(_PFN+1)& (0+255),w,b
  1805  001AA0  0A02               	xorlw	2
  1806  001AA2  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1807  001AA4  E0F3               	bz	u971
  1808  001AA6  516C               	movf	(_PFN+1)& (0+255),w,b
  1809  001AA8  0A03               	xorlw	3
  1810  001AAA  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1811  001AAC  E0EF               	bz	u971
  1812  001AAE                     u1050:
  1813  001AAE  0E00               	movlw	0
  1814  001AB0                     u1060:
  1815  001AB0  0100               	movlb	__Lparam shr (0+8)
  1816  001AB2  6FA6               	movwf	?a_KolejkaPobudzen^(__Lparam& (0+65280)),
      +                          b
  1817                           ;main.c: 603: if(wr!=0)
  1818  001AB4  51A6               	movf	?a_KolejkaPobudzen^(__Lparam& (0+65280)),w
  1819                           ;main.c: 604: {
  1820  001AB6  0103               	movlb	_M shr (0+8)
  1821  001AB8  E005               	bz	L15
  1822  001ABA  8906               	bsf	_M& (0+255),4,b
  1823                           ;main.c: 606: M._pob_CO=0;
  1824  001ABC  9B06               	bcf	_M& (0+255),5,b
  1825                           ;main.c: 607: M._pob_DzCO=0;
  1826  001ABE  9D06               	bcf	_M& (0+255),6,b
  1827                           ;main.c: 608: M._pob_DzCW=0;
  1828  001AC0  9F06               	bcf	_M& (0+255),7,b
  1829                           ;main.c: 609: }
  1830  001AC2  0012               	return	
  1831                           ;main.c: 610: else
  1832  001AC4                     L15:
  1833  001AC4  9906               	bcf	_M& (0+255),4,b
  1834                           ;main.c: 614: if(RdPrt(12)&&(PFN.poz==3))
  1835  001AC6  0E0C               	movlw	12
  1836  001AC8  EC50  F063         	call	_RdPrt
  1837  001ACC  E30A               	bnc	l113
  1838  001ACE  0100               	movlb	(_PFN+1) shr (0+8)
  1839  001AD0  516C               	movf	(_PFN+1)& (0+255),w,b
  1840  001AD2  0A03               	xorlw	3
  1841  001AD4  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1842                           ;main.c: 615: {
  1843  001AD6  0103               	movlb	_M shr (0+8)
  1844  001AD8  E105               	bnz	L16
  1845  001ADA  8B06               	bsf	_M& (0+255),5,b
  1846                           ;main.c: 617: M._pob_DzCO=0;
  1847  001ADC  9D06               	bcf	_M& (0+255),6,b
  1848                           ;main.c: 618: M._pob_DzCW=0;
  1849  001ADE  9F06               	bcf	_M& (0+255),7,b
  1850                           ;main.c: 619: }
  1851  001AE0  0012               	return	
  1852  001AE2                     l113:
  1853                           ;main.c: 620: else
  1854  001AE2  0103               	movlb	_M shr (0+8)
  1855  001AE4                     L16:
  1856  001AE4  9B06               	bcf	_M& (0+255),5,b
  1857                           ;main.c: 624: if(RdPrt(9))
  1858  001AE6  0E09               	movlw	9
  1859  001AE8  EC50  F063         	call	_RdPrt
  1860                           ;main.c: 625: {
  1861  001AEC  0103               	movlb	_M shr (0+8)
  1862  001AEE  E303               	bnc	L17
  1863  001AF0  8D06               	bsf	_M& (0+255),6,b
  1864                           ;main.c: 627: M._pob_DzCW=0;
  1865  001AF2  9F06               	bcf	_M& (0+255),7,b
  1866                           ;main.c: 628: }
  1867  001AF4  0012               	return	
  1868                           ;main.c: 629: else
  1869  001AF6                     L17:
  1870  001AF6  9D06               	bcf	_M& (0+255),6,b
  1871                           ;main.c: 632: if(DtKNF.tpkt==0)
  1872  001AF8  EE01  F0C2         	lfsr	0,_DtKNF+14
  1873  001AFC  50EF               	movf	indf0,w,c
  1874  001AFE  E109               	bnz	l117
  1875                           ;main.c: 633: {
  1876  001B00  0E0A               	movlw	10
  1877  001B02  EC50  F063         	call	_RdPrt
  1878  001B06  0103               	movlb	_M shr (0+8)
  1879  001B08  E302               	bnc	L18
  1880  001B0A  8F06               	bsf	_M& (0+255),7,b
  1881  001B0C  0012               	return	
  1882                           ;main.c: 636: else M._pob_DzCW=0;
  1883  001B0E                     L18:
  1884  001B0E  9F06               	bcf	_M& (0+255),7,b
  1885                           ;main.c: 637: }
  1886  001B10  0012               	return	
  1887  001B12                     l117:
  1888                           ;main.c: 638: else M._pob_DzCW=0;
  1889  001B12  0103               	movlb	_M shr (0+8)
  1890  001B14  9F06               	bcf	_M& (0+255),7,b
  1891                           ;main.c: 639: }
  1892  001B16  0012               	return	
  1893  001B18                     __end_of_KolejkaPobudzen:
  1894                           ;main.c: 649: void DecyzjaAntyLeg(void)
  1895                           ;main.c: 650: {
  1896  001B18                     _DecyzjaAntyLeg:
  1897  000000                     
  1898                           ;main.c: 746: if(DtKNF.tpkt==0)
  1899  001B18  EE01  F0C2         	lfsr	0,_DtKNF+14
  1900  001B1C  50EF               	movf	indf0,w,c
  1901  001B1E  E001 D087          	bnz	l122
  1902                           ;main.c: 747: {
  1903  001B22  0103               	movlb	(_M+2) shr (0+8)
  1904  001B24  AD08               	btfss	(_M+2)& (0+255),6,b
  1905  001B26  D02D               	goto	l123
  1906                           ;main.c: 751: {
  1907  001B28  EE01  F0CD         	lfsr	0,_DtKNF+25
  1908  001B2C  50EF               	movf	indf0,w,c
  1909  001B2E  E005               	bz	l124
  1910                           ;main.c: 753: {
  1911  001B30  0E01               	movlw	1
  1912  001B32  EC29  F064         	call	_StartRTG
  1913                           ;main.c: 755: M.LICZNIK_ANL=0;
  1914  001B36  0103               	movlb	(_M+9) shr (0+8)
  1915  001B38  6B0F               	clrf	(_M+9)& (0+255),b
  1916  001B3A                     l124:
  1917                           ;main.c: 756: }
  1918  001B3A  0103               	movlb	(_M+3) shr (0+8)
  1919  001B3C  B109               	btfsc	(_M+3)& (0+255),0,b
  1920  001B3E  D002               	goto	u1190
  1921  001B40  AB08               	btfss	(_M+2)& (0+255),5,b
  1922  001B42  D003               	goto	l125
  1923  001B44                     u1190:
  1924                           ;main.c: 758: {
  1925  001B44  0103               	movlb	(_M+2) shr (0+8)
  1926  001B46  9D08               	bcf	(_M+2)& (0+255),6,b
  1927                           ;main.c: 760: return;
  1928  001B48  0012               	return	
  1929  001B4A                     l125:
  1930                           ;main.c: 761: }
  1931  001B4A  0100               	movlb	(_PFN+1) shr (0+8)
  1932  001B4C  516C               	movf	(_PFN+1)& (0+255),w,b
  1933  001B4E  0A02               	xorlw	2
  1934  001B50  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1935  001B52  E007               	bz	l126
  1936  001B54  516C               	movf	(_PFN+1)& (0+255),w,b
  1937  001B56  0A03               	xorlw	3
  1938  001B58  116D               	iorwf	(_PFN+2)& (0+255),w,b
  1939  001B5A  E003               	bz	l126
  1940                           ;main.c: 764: {
  1941  001B5C  0103               	movlb	(_M+2) shr (0+8)
  1942  001B5E  9D08               	bcf	(_M+2)& (0+255),6,b
  1943                           ;main.c: 766: return;
  1944  001B60  0012               	return	
  1945  001B62                     l126:
  1946                           ;main.c: 767: }
  1947  001B62  0E03               	movlw	3
  1948  001B64  EC0B  F064         	call	_RTM
  1949  001B68  6E00               	movwf	btemp,c
  1950  001B6A  0E3C               	movlw	60
  1951  001B6C  5C00               	subwf	btemp,w,c
  1952  001B6E  E303               	bnc	l127
  1953                           ;main.c: 770: {
  1954  001B70  0103               	movlb	(_M+2) shr (0+8)
  1955  001B72  9D08               	bcf	(_M+2)& (0+255),6,b
  1956                           ;main.c: 772: return;
  1957  001B74  0012               	return	
  1958  001B76                     l127:
  1959                           ;main.c: 773: }
  1960  001B76  0100               	movlb	_PFN shr (0+8)
  1961  001B78  AB6B               	btfss	_PFN& (0+255),5,b
  1962  001B7A  D003               	goto	l123
  1963                           ;main.c: 777: {
  1964  001B7C  0103               	movlb	(_M+2) shr (0+8)
  1965  001B7E  9D08               	bcf	(_M+2)& (0+255),6,b
  1966                           ;main.c: 779: return;
  1967  001B80  0012               	return	
  1968  001B82                     l123:
  1969                           ;main.c: 780: }
  1970  001B82  0103               	movlb	(_M+2) shr (0+8)
  1971  001B84  BD08               	btfsc	(_M+2)& (0+255),6,b
  1972  001B86  D04E               	goto	l129
  1973                           ;main.c: 785: {
  1974  001B88  A109               	btfss	(_M+3)& (0+255),0,b
  1975  001B8A  BB08               	btfsc	(_M+2)& (0+255),5,b
  1976  001B8C  0012               	return	
  1977                           ;main.c: 787: {
  1978                           ;main.c: 789: }
  1979  001B8E  EE01  F0CD         	lfsr	0,_DtKNF+25
  1980  001B92  50EF               	movf	indf0,w,c
  1981  001B94  E027               	bz	l131
  1982                           ;main.c: 793: {
  1983  001B96  0E01               	movlw	1
  1984  001B98  EC41  F064         	call	_RTG
  1985  001B9C  6E00               	movwf	btemp,c
  1986  001B9E  0E01               	movlw	1
  1987  001BA0  5C00               	subwf	btemp,w,c
  1988  001BA2  E320               	bnc	l131
  1989                           ;main.c: 795: {
  1990  001BA4  0E01               	movlw	1
  1991  001BA6  EC29  F064         	call	_StartRTG
  1992                           ;main.c: 797: M.LICZNIK_ANL++;
  1993  001BAA  0103               	movlb	(_M+9) shr (0+8)
  1994  001BAC  2B0F               	incf	(_M+9)& (0+255),f,b
  1995                           ;main.c: 798: if(M.LICZNIK_ANL>=168)
  1996  001BAE  0EA7               	movlw	-89
  1997  001BB0  650F               	cpfsgt	(_M+9)& (0+255),b
  1998  001BB2  D010               	goto	l133
  1999                           ;main.c: 799: {
  2000  001BB4  6B0F               	clrf	(_M+9)& (0+255),b
  2001                           ;main.c: 801: if((PFN.poz==2)||(PFN.poz==3)) M._
      +                          AKTYWNE_AL=1;
  2002  001BB6  0100               	movlb	(_PFN+1) shr (0+8)
  2003  001BB8  516C               	movf	(_PFN+1)& (0+255),w,b
  2004  001BBA  0A02               	xorlw	2
  2005  001BBC  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2006  001BBE  E004               	bz	u1340
  2007  001BC0  516C               	movf	(_PFN+1)& (0+255),w,b
  2008  001BC2  0A03               	xorlw	3
  2009  001BC4  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2010  001BC6  E102               	bnz	l134
  2011  001BC8                     u1340:
  2012  001BC8  0103               	movlb	(_M+2) shr (0+8)
  2013  001BCA  8D08               	bsf	(_M+2)& (0+255),6,b
  2014  001BCC                     l134:
  2015                           ;main.c: 802: StartRTM(3);
  2016  001BCC  0E03               	movlw	3
  2017  001BCE  ECF3  F063         	call	_StartRTM
  2018  001BD2  D021               	goto	L30
  2019                           ;main.c: 803: eeprom_write(0x00C7,0);
  2020                           ;main.c: 804: return;
  2021  001BD4                     l133:
  2022                           ;main.c: 806: else
  2023  001BD4  0EC7               	movlw	199
  2024  001BD6  0100               	movlb	__Lparam shr (0+8)
  2025  001BD8  6FAA               	movwf	?_eeprom_write^(__Lparam& (0+65280)),b
  2026  001BDA  6BAB               	clrf	(?_eeprom_write+1)^(__Lparam& (0+65280)),b
  2027  001BDC  C30F  F0AC         	movff	_M+9,?_eeprom_write+2
  2028  001BE0  EC13  F06D         	call	_eeprom_write	;wreg free
  2029  001BE4                     l131:
  2030                           ;main.c: 809: }
  2031  001BE4  0100               	movlb	(_PFN+1) shr (0+8)
  2032  001BE6  516C               	movf	(_PFN+1)& (0+255),w,b
  2033  001BE8  0A02               	xorlw	2
  2034  001BEA  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2035  001BEC  E005               	bz	l136
  2036  001BEE  516C               	movf	(_PFN+1)& (0+255),w,b
  2037  001BF0  0A03               	xorlw	3
  2038  001BF2  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2039  001BF4  A4D8               	btfss	status,2,c
  2040  001BF6  0012               	return	
  2041                           ;main.c: 814: {
  2042  001BF8                     l136:
  2043                           ;main.c: 816: }
  2044  001BF8  0E02               	movlw	2
  2045  001BFA  0100               	movlb	__Lparam shr (0+8)
  2046  001BFC  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
  2047  001BFE  C365  FFE8         	movff	_RSDT1+63,wreg
  2048  001C02  EC24  F06A         	call	_GetBit2
  2049  001C06  A0D8               	btfss	status,0,c
  2050  001C08  0012               	return	
  2051                           ;main.c: 820: {
  2052  001C0A  0103               	movlb	(_M+9) shr (0+8)
  2053  001C0C  6B0F               	clrf	(_M+9)& (0+255),b
  2054                           ;main.c: 822: M._AKTYWNE_AL=1;
  2055  001C0E  8D08               	bsf	(_M+2)& (0+255),6,b
  2056                           ;main.c: 823: StartRTM(3);
  2057  001C10  0E03               	movlw	3
  2058  001C12  ECF3  F063         	call	_StartRTM
  2059  001C16                     L30:
  2060                           ;main.c: 824: eeprom_write(0x00C7,0);
  2061  001C16  0EC7               	movlw	199
  2062  001C18  0100               	movlb	__Lparam shr (0+8)
  2063  001C1A  6FAA               	movwf	?_eeprom_write^(__Lparam& (0+65280)),b
  2064  001C1C  6BAB               	clrf	(?_eeprom_write+1)^(__Lparam& (0+65280)),b
  2065  001C1E  6BAC               	clrf	(?_eeprom_write+2)^(__Lparam& (0+65280)),b
  2066  001C20  EF13  F06D         	goto	_eeprom_write	;wreg free
  2067                           ;main.c: 825: }
  2068  001C24                     l129:
  2069                           ;main.c: 827: else
  2070  001C24  0E01               	movlw	1
  2071  001C26  EC29  F064         	call	_StartRTG
  2072                           ;main.c: 830: M.LICZNIK_ANL=0;
  2073  001C2A  0103               	movlb	(_M+9) shr (0+8)
  2074  001C2C  6B0F               	clrf	(_M+9)& (0+255),b
  2075                           ;main.c: 831: }
  2076  001C2E  0012               	return	
  2077  001C30                     l122:
  2078                           ;main.c: 833: else M._AKTYWNE_AL=0;
  2079  001C30  0103               	movlb	(_M+2) shr (0+8)
  2080  001C32  9D08               	bcf	(_M+2)& (0+255),6,b
  2081                           ;main.c: 835: }
  2082  001C34  0012               	return	
  2083  001C36                     __end_of_DecyzjaAntyLeg:
  2084                           ;main.c: 842: void DecERR(void)
  2085                           ;main.c: 843: {
  2086  001C36                     _DecERR:
  2087  000000                     
  2088                           ;main.c: 844: unsigned char KnfDisErr=0;
  2089  001C36  6AD9               	clrf	fsr2l,c
  2090                           ;main.c: 845: unsigned char w;
  2091  001C38  0103               	movlb	(_M+3) shr (0+8)
  2092  001C3A  A109               	btfss	(_M+3)& (0+255),0,b
  2093  001C3C  D00F               	goto	u1450
  2094  001C3E  C1B6  F000         	movff	_DtKNF+2,btemp
  2095  001C42  0400               	decf	btemp,w,c
  2096  001C44  E009               	bz	u1451
  2097  001C46  C1B6  FFE8         	movff	_DtKNF+2,wreg
  2098  001C4A  0A02               	xorlw	2
  2099  001C4C  E107               	bnz	u1450
  2100  001C4E  0E03               	movlw	3
  2101  001C50  0101               	movlb	(_DtKNF+1) shr (0+8)
  2102  001C52  61B5               	cpfslt	(_DtKNF+1)& (0+255),b
  2103  001C54  D001               	goto	u1451
  2104  001C56  D002               	goto	u1450
  2105  001C58                     u1451:
  2106  001C58  0E01               	movlw	1
  2107  001C5A  D001               	goto	u1460
  2108  001C5C                     u1450:
  2109  001C5C  0E00               	movlw	0
  2110  001C5E                     u1460:
  2111  001C5E  0100               	movlb	__Lparam shr (0+8)
  2112  001C60  6FA7               	movwf	(?a_DecERR+1)^(__Lparam& (0+65280)),b
  2113                           ;main.c: 854: if(!RdPrt(4))
  2114  001C62  0E04               	movlw	4
  2115  001C64  EC50  F063         	call	_RdPrt
  2116                           ;main.c: 855: {
  2117  001C68  0E02               	movlw	2
  2118  001C6A  E20B               	bc	L19
  2119  001C6C  CFE8 F311          	movff	wreg,_M+11
  2120                           ;main.c: 857: PrintErr(0x02,1);
  2121  001C70  0E01               	movlw	1
  2122  001C72  0100               	movlb	__Lparam shr (0+8)
  2123  001C74  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  2124  001C76  0E02               	movlw	2
  2125  001C78  ECA1  F069         	call	_PrintErr
  2126                           ;main.c: 858: ErrPTG();
  2127  001C7C  EC73  F01A         	call	_ErrPTG	;wreg free
  2128                           ;main.c: 859: }
  2129  001C80  0E02               	movlw	2
  2130  001C82                     L19:
  2131  001C82  EC50  F063         	call	_RdPrt
  2132  001C86  E20B               	bc	l142
  2133                           ;main.c: 862: {
  2134  001C88  0E03               	movlw	3
  2135  001C8A  CFE8 F311          	movff	wreg,_M+11
  2136                           ;main.c: 864: PrintErr(0x03,1);
  2137  001C8E  0E01               	movlw	1
  2138  001C90  0100               	movlb	__Lparam shr (0+8)
  2139  001C92  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  2140  001C94  0E03               	movlw	3
  2141  001C96  ECA1  F069         	call	_PrintErr
  2142                           ;main.c: 865: ErrPTG();
  2143  001C9A  EC73  F01A         	call	_ErrPTG	;wreg free
  2144  001C9E                     l142:
  2145                           ;main.c: 866: }
  2146  001C9E  0103               	movlb	(_M+1) shr (0+8)
  2147  001CA0  AF07               	btfss	(_M+1)& (0+255),7,b
  2148  001CA2  D00F               	goto	l143
  2149                           ;main.c: 869: {
  2150  001CA4  6B11               	clrf	(_M+11)& (0+255),b
  2151                           ;main.c: 871: if(KnfDisErr) EndErr();
  2152  001CA6  0100               	movlb	__Lparam shr (0+8)
  2153  001CA8  51A7               	movf	(?a_DecERR+1)^(__Lparam& (0+65280)),w
  2154  001CAA  E003               	bz	l144
  2155  001CAC  ECE9  F069         	call	_EndErr	;wreg free
  2156  001CB0  D005               	goto	l145
  2157  001CB2                     l144:
  2158                           ;main.c: 872: else PrintErr(0x01,0);
  2159  001CB2  0100               	movlb	__Lparam shr (0+8)
  2160  001CB4  6BA9               	clrf	?_PrintErr^(__Lparam& (0+65280)),b
  2161  001CB6  0E01               	movlw	1
  2162  001CB8  ECA1  F069         	call	_PrintErr
  2163  001CBC                     l145:
  2164                           ;main.c: 873: M._RUSZ_NTC_CO=0;
  2165  001CBC  0103               	movlb	(_M+3) shr (0+8)
  2166  001CBE  9309               	bcf	(_M+3)& (0+255),1,b
  2167  001CC0  D02A               	goto	L2
  2168                           ;main.c: 874: M._RUSZ_CISN=0;
  2169                           ;main.c: 875: M._RUSZ_NCISN=0;
  2170                           ;main.c: 876: M._RUSZ_NTC_CW=0;
  2171                           ;main.c: 877: }
  2172  001CC2                     l143:
  2173                           ;main.c: 878: else
  2174  001CC2  0E12               	movlw	18
  2175  001CC4  EC50  F063         	call	_RdPrt
  2176  001CC8  E312               	bnc	l147
  2177                           ;main.c: 881: {
  2178  001CCA  0E04               	movlw	4
  2179  001CCC  CFE8 F311          	movff	wreg,_M+11
  2180                           ;main.c: 883: if(KnfDisErr) EndErr();
  2181  001CD0  0100               	movlb	__Lparam shr (0+8)
  2182  001CD2  51A7               	movf	(?a_DecERR+1)^(__Lparam& (0+65280)),w
  2183  001CD4  E003               	bz	l148
  2184  001CD6  ECE9  F069         	call	_EndErr	;wreg free
  2185  001CDA  D006               	goto	l149
  2186  001CDC                     l148:
  2187                           ;main.c: 884: else PrintErr(0x04,1);
  2188  001CDC  0E01               	movlw	1
  2189  001CDE  0100               	movlb	__Lparam shr (0+8)
  2190  001CE0  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  2191  001CE2  0E04               	movlw	4
  2192  001CE4  ECA1  F069         	call	_PrintErr
  2193  001CE8                     l149:
  2194                           ;main.c: 885: M._RUSZ_NTC_CO=1;
  2195  001CE8  0103               	movlb	(_M+3) shr (0+8)
  2196  001CEA  8309               	bsf	(_M+3)& (0+255),1,b
  2197  001CEC  D014               	goto	L2
  2198                           ;main.c: 886: M._RUSZ_CISN=0;
  2199                           ;main.c: 887: M._RUSZ_NCISN=0;
  2200                           ;main.c: 888: M._RUSZ_NTC_CW=0;
  2201                           ;main.c: 889: }
  2202  001CEE                     l147:
  2203                           ;main.c: 890: else
  2204  001CEE  0103               	movlb	(_M+3) shr (0+8)
  2205  001CF0  9309               	bcf	(_M+3)& (0+255),1,b
  2206                           ;main.c: 894: if(M._RUSZ_POMPE)
  2207  001CF2  A308               	btfss	(_M+2)& (0+255),1,b
  2208  001CF4  D013               	goto	l151
  2209                           ;main.c: 895: {
  2210  001CF6  6B11               	clrf	(_M+11)& (0+255),b
  2211                           ;main.c: 897: if(KnfDisErr) EndErr();
  2212  001CF8  0100               	movlb	__Lparam shr (0+8)
  2213  001CFA  51A7               	movf	(?a_DecERR+1)^(__Lparam& (0+65280)),w
  2214  001CFC  E003               	bz	l152
  2215  001CFE  ECE9  F069         	call	_EndErr	;wreg free
  2216  001D02  D008               	goto	l153
  2217  001D04                     l152:
  2218                           ;main.c: 898: else
  2219  001D04  0103               	movlb	(_M+5) shr (0+8)
  2220  001D06  A10B               	btfss	(_M+5)& (0+255),0,b
  2221  001D08  D005               	goto	l153
  2222  001D0A  0100               	movlb	__Lparam shr (0+8)
  2223  001D0C  6BA9               	clrf	?_PrintErr^(__Lparam& (0+65280)),b
  2224  001D0E  0E05               	movlw	5
  2225  001D10  ECA1  F069         	call	_PrintErr
  2226  001D14                     l153:
  2227                           ;main.c: 901: }
  2228  001D14  0103               	movlb	(_M+3) shr (0+8)
  2229  001D16                     L2:
  2230  001D16  9B09               	bcf	(_M+3)& (0+255),5,b
  2231                           ;main.c: 903: M._RUSZ_NCISN=0;
  2232  001D18  9D09               	bcf	(_M+3)& (0+255),6,b
  2233  001D1A  D030               	goto	L4
  2234                           ;main.c: 904: M._RUSZ_NTC_CW=0;
  2235                           ;main.c: 905: }
  2236  001D1C                     l151:
  2237                           ;main.c: 906: else
  2238  001D1C  0E0E               	movlw	14
  2239  001D1E  EC50  F063         	call	_RdPrt
  2240  001D22  E313               	bnc	l156
  2241                           ;main.c: 910: {
  2242  001D24  0E08               	movlw	8
  2243  001D26  CFE8 F311          	movff	wreg,_M+11
  2244                           ;main.c: 912: if(KnfDisErr) EndErr();
  2245  001D2A  0100               	movlb	__Lparam shr (0+8)
  2246  001D2C  51A7               	movf	(?a_DecERR+1)^(__Lparam& (0+65280)),w
  2247  001D2E  E003               	bz	l157
  2248  001D30  ECE9  F069         	call	_EndErr	;wreg free
  2249  001D34  D006               	goto	l158
  2250  001D36                     l157:
  2251                           ;main.c: 913: else PrintErr(0x08,1);
  2252  001D36  0E01               	movlw	1
  2253  001D38  0100               	movlb	__Lparam shr (0+8)
  2254  001D3A  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  2255  001D3C  0E08               	movlw	8
  2256  001D3E  ECA1  F069         	call	_PrintErr
  2257  001D42                     l158:
  2258                           ;main.c: 914: M._RUSZ_NCISN=1;
  2259  001D42  0103               	movlb	(_M+3) shr (0+8)
  2260  001D44  8D09               	bsf	(_M+3)& (0+255),6,b
  2261                           ;main.c: 915: M._RUSZ_CISN=0;
  2262  001D46  9B09               	bcf	(_M+3)& (0+255),5,b
  2263  001D48  D019               	goto	L4
  2264                           ;main.c: 916: M._RUSZ_NTC_CW=0;
  2265                           ;main.c: 917: }
  2266  001D4A                     l156:
  2267                           ;main.c: 918: else
  2268  001D4A  0103               	movlb	(_M+3) shr (0+8)
  2269  001D4C  9D09               	bcf	(_M+3)& (0+255),6,b
  2270                           ;main.c: 922: if(!RdPrt(15))
  2271  001D4E  0E0F               	movlw	15
  2272  001D50  EC50  F063         	call	_RdPrt
  2273  001D54  E215               	bc	l160
  2274                           ;main.c: 923: {
  2275  001D56  0E09               	movlw	9
  2276  001D58  CFE8 F311          	movff	wreg,_M+11
  2277                           ;main.c: 926: if(KnfDisErr) EndErr();
  2278  001D5C  0100               	movlb	__Lparam shr (0+8)
  2279  001D5E  51A7               	movf	(?a_DecERR+1)^(__Lparam& (0+65280)),w
  2280  001D60  E003               	bz	l161
  2281  001D62  ECE9  F069         	call	_EndErr	;wreg free
  2282  001D66  D008               	goto	l162
  2283  001D68                     l161:
  2284                           ;main.c: 927: else PrintErrCs(0x09,DtCS.CS,1);
  2285  001D68  C066  F0A8         	movff	_DtCS+3,?_PrintErrCs
  2286  001D6C  0E01               	movlw	1
  2287  001D6E  0100               	movlb	__Lparam shr (0+8)
  2288  001D70  6FA9               	movwf	(?_PrintErrCs+1)^(__Lparam& (0+65280)),b
  2289  001D72  0E09               	movlw	9
  2290  001D74  ECC3  F069         	call	_PrintErrCs
  2291  001D78                     l162:
  2292                           ;main.c: 928: M._RUSZ_CISN=1;
  2293  001D78  0103               	movlb	(_M+3) shr (0+8)
  2294  001D7A  8B09               	bsf	(_M+3)& (0+255),5,b
  2295  001D7C                     L4:
  2296                           ;main.c: 929: M._RUSZ_NTC_CW=0;
  2297  001D7C  9509               	bcf	(_M+3)& (0+255),2,b
  2298                           ;main.c: 930: }
  2299  001D7E  D06E               	goto	l146
  2300  001D80                     l160:
  2301                           ;main.c: 931: else
  2302  001D80  0103               	movlb	(_M+3) shr (0+8)
  2303  001D82  9B09               	bcf	(_M+3)& (0+255),5,b
  2304                           ;main.c: 934: if(DtKNF.tpkt!=0)
  2305  001D84  EE01  F0C2         	lfsr	0,_DtKNF+14
  2306  001D88  50EF               	movf	indf0,w,c
  2307  001D8A  E018               	bz	l164
  2308                           ;main.c: 935: {
  2309  001D8C  0100               	movlb	_DtCW shr (0+8)
  2310  001D8E  A170               	btfss	_DtCW& (0+255),0,b
  2311  001D90  D005               	goto	u1630
  2312  001D92  0100               	movlb	(_PFN+1) shr (0+8)
  2313  001D94  516C               	movf	(_PFN+1)& (0+255),w,b
  2314  001D96  0A02               	xorlw	2
  2315  001D98  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2316  001D9A  E00E               	bz	u1731
  2317  001D9C                     u1630:
  2318  001D9C  0100               	movlb	(_PFN+1) shr (0+8)
  2319  001D9E  516C               	movf	(_PFN+1)& (0+255),w,b
  2320  001DA0  0A03               	xorlw	3
  2321  001DA2  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2322  001DA4  E11F               	bnz	u1830
  2323  001DA6  0100               	movlb	_DtCW shr (0+8)
  2324  001DA8  A170               	btfss	_DtCW& (0+255),0,b
  2325  001DAA  D01C               	goto	u1830
  2326  001DAC  0103               	movlb	_M shr (0+8)
  2327  001DAE  A906               	btfss	_M& (0+255),4,b
  2328  001DB0  B306               	btfsc	_M& (0+255),1,b
  2329  001DB2  D002               	goto	u1731
  2330  001DB4  A706               	btfss	_M& (0+255),3,b
  2331  001DB6  D016               	goto	u1830
  2332  001DB8                     u1731:
  2333  001DB8  0E01               	movlw	1
  2334  001DBA  D015               	goto	u1840
  2335                           ;main.c: 937: }
  2336  001DBC                     l164:
  2337                           ;main.c: 938: else
  2338  001DBC  0100               	movlb	_DtCW shr (0+8)
  2339  001DBE  A170               	btfss	_DtCW& (0+255),0,b
  2340  001DC0  D005               	goto	u1770
  2341  001DC2  0100               	movlb	(_PFN+1) shr (0+8)
  2342  001DC4  516C               	movf	(_PFN+1)& (0+255),w,b
  2343  001DC6  0A02               	xorlw	2
  2344  001DC8  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2345  001DCA  E0F6               	bz	u1731
  2346  001DCC                     u1770:
  2347  001DCC  0100               	movlb	(_PFN+1) shr (0+8)
  2348  001DCE  516C               	movf	(_PFN+1)& (0+255),w,b
  2349  001DD0  0A03               	xorlw	3
  2350  001DD2  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2351  001DD4  E107               	bnz	u1830
  2352  001DD6  0100               	movlb	_DtCW shr (0+8)
  2353  001DD8  A170               	btfss	_DtCW& (0+255),0,b
  2354  001DDA  D004               	goto	u1830
  2355  001DDC  0E0B               	movlw	11
  2356  001DDE  EC50  F063         	call	_RdPrt
  2357  001DE2  E2EA               	bc	u1731
  2358  001DE4                     u1830:
  2359  001DE4  0E00               	movlw	0
  2360  001DE6                     u1840:
  2361  001DE6  0100               	movlb	__Lparam shr (0+8)
  2362  001DE8  6FA6               	movwf	?a_DecERR^(__Lparam& (0+65280)),b
  2363                           ;main.c: 941: }
  2364  001DEA  51A6               	movf	?a_DecERR^(__Lparam& (0+65280)),w
  2365  001DEC  E011               	bz	l166
  2366                           ;main.c: 944: {
  2367  001DEE  0E0A               	movlw	10
  2368  001DF0  CFE8 F311          	movff	wreg,_M+11
  2369                           ;main.c: 946: if(KnfDisErr) EndErr();
  2370  001DF4  51A7               	movf	(?a_DecERR+1)^(__Lparam& (0+65280)),w
  2371  001DF6  E003               	bz	l167
  2372  001DF8  ECE9  F069         	call	_EndErr	;wreg free
  2373  001DFC  D006               	goto	l168
  2374  001DFE                     l167:
  2375                           ;main.c: 947: else PrintErr(0x0A,1);
  2376  001DFE  0E01               	movlw	1
  2377  001E00  0100               	movlb	__Lparam shr (0+8)
  2378  001E02  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  2379  001E04  0E0A               	movlw	10
  2380  001E06  ECA1  F069         	call	_PrintErr
  2381  001E0A                     l168:
  2382                           ;main.c: 948: M._RUSZ_NTC_CW=1;
  2383  001E0A  0103               	movlb	(_M+3) shr (0+8)
  2384  001E0C  8509               	bsf	(_M+3)& (0+255),2,b
  2385                           ;main.c: 949: }
  2386  001E0E  D026               	goto	l146
  2387  001E10                     l166:
  2388                           ;main.c: 950: else
  2389  001E10  0103               	movlb	(_M+3) shr (0+8)
  2390  001E12  9509               	bcf	(_M+3)& (0+255),2,b
  2391                           ;main.c: 953: if(DtKNF.rdpm!=0)
  2392  001E14  EE01  F0C4         	lfsr	0,_DtKNF+16
  2393  001E18  50EF               	movf	indf0,w,c
  2394  001E1A  E01E               	bz	l170
  2395                           ;main.c: 954: {
  2396  001E1C  0100               	movlb	(_PFN+1) shr (0+8)
  2397  001E1E  516C               	movf	(_PFN+1)& (0+255),w,b
  2398  001E20  0A03               	xorlw	3
  2399  001E22  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2400  001E24  E119               	bnz	l170
  2401  001E26  0103               	movlb	(_M+4) shr (0+8)
  2402  001E28  B30A               	btfsc	(_M+4)& (0+255),1,b
  2403  001E2A  BD0A               	btfsc	(_M+4)& (0+255),6,b
  2404  001E2C  D015               	goto	l170
  2405  001E2E  0100               	movlb	_DtIN shr (0+8)
  2406  001E30  A192               	btfss	_DtIN& (0+255),0,b
  2407  001E32  D012               	goto	l170
  2408                           ;main.c: 956: {
  2409  001E34  0E0E               	movlw	14
  2410  001E36  CFE8 F311          	movff	wreg,_M+11
  2411                           ;main.c: 958: if(KnfDisErr) EndErr();
  2412  001E3A  0100               	movlb	__Lparam shr (0+8)
  2413  001E3C  51A7               	movf	(?a_DecERR+1)^(__Lparam& (0+65280)),w
  2414  001E3E  E003               	bz	l172
  2415  001E40  ECE9  F069         	call	_EndErr	;wreg free
  2416  001E44  D006               	goto	l173
  2417  001E46                     l172:
  2418                           ;main.c: 959: else PrintErr(0x0E,1);
  2419  001E46  0E01               	movlw	1
  2420  001E48  0100               	movlb	__Lparam shr (0+8)
  2421  001E4A  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  2422  001E4C  0E0E               	movlw	14
  2423  001E4E  ECA1  F069         	call	_PrintErr
  2424  001E52                     l173:
  2425                           ;main.c: 960: M._RUSZ_NTC_IN=1;
  2426  001E52  0103               	movlb	(_M+3) shr (0+8)
  2427  001E54  8709               	bsf	(_M+3)& (0+255),3,b
  2428                           ;main.c: 961: }
  2429  001E56  D002               	goto	l146
  2430                           ;main.c: 962: else
  2431                           ;main.c: 965: }
  2432  001E58                     l170:
  2433                           ;main.c: 967: else
  2434  001E58  0103               	movlb	(_M+3) shr (0+8)
  2435  001E5A  9709               	bcf	(_M+3)& (0+255),3,b
  2436  001E5C                     l146:
  2437                           ;main.c: 970: }
  2438  001E5C  0103               	movlb	(_M+1) shr (0+8)
  2439  001E5E  BF07               	btfsc	(_M+1)& (0+255),7,b
  2440  001E60  D023               	goto	l176
  2441  001E62  0E05               	movlw	5
  2442  001E64  EC50  F063         	call	_RdPrt
  2443  001E68  E21F               	bc	l176
  2444  001E6A  0103               	movlb	(_M+1) shr (0+8)
  2445  001E6C  A507               	btfss	(_M+1)& (0+255),2,b
  2446  001E6E  A083               	btfss	3971,0,c	;volatile
  2447  001E70  D01B               	goto	l176
  2448                           ;main.c: 981: {
  2449  001E72  0E02               	movlw	2
  2450  001E74  EC50  F063         	call	_RdPrt
  2451  001E78  E317               	bnc	l176
  2452  001E7A  0E04               	movlw	4
  2453  001E7C  EC50  F063         	call	_RdPrt
  2454  001E80  E313               	bnc	l176
  2455                           ;main.c: 983: {
  2456  001E82  0103               	movlb	(_M+19) shr (0+8)
  2457  001E84  6B19               	clrf	(_M+19)& (0+255),b
  2458                           ;main.c: 985: M._RUSZ_PLOMIEN=1;
  2459  001E86  8F07               	bsf	(_M+1)& (0+255),7,b
  2460                           ;main.c: 986: M.LICZNIK_PL2++;
  2461  001E88  2B0E               	incf	(_M+8)& (0+255),f,b
  2462                           ;main.c: 987: if(M.LICZNIK_PL2>=5)
  2463  001E8A  0E04               	movlw	4
  2464  001E8C  650E               	cpfsgt	(_M+8)& (0+255),b
  2465  001E8E  D00C               	goto	l176
  2466                           ;main.c: 988: {
  2467  001E90  6B0E               	clrf	(_M+8)& (0+255),b
  2468                           ;main.c: 990: M.ERR_BTY=0x0D;
  2469  001E92  0E0D               	movlw	13
  2470  001E94  CFE8 F311          	movff	wreg,_M+11
  2471                           ;main.c: 991: PrintErr(0x0D,1);
  2472  001E98  0E01               	movlw	1
  2473  001E9A  0100               	movlb	__Lparam shr (0+8)
  2474  001E9C  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  2475  001E9E  0E0D               	movlw	13
  2476  001EA0  ECA1  F069         	call	_PrintErr
  2477                           ;main.c: 992: ErrPTG();
  2478  001EA4  EC73  F01A         	call	_ErrPTG	;wreg free
  2479  001EA8                     l176:
  2480                           ;main.c: 993: }
  2481  001EA8  0103               	movlb	(_M+1) shr (0+8)
  2482  001EAA  BF07               	btfsc	(_M+1)& (0+255),7,b
  2483  001EAC  0012               	return	
  2484                           ;main.c: 1001: if(!M._RUSZ_NTC_CO&&!M._RUSZ_NCIS
      +                          N&&!M._RUSZ_CISN)
  2485  001EAE  A309               	btfss	(_M+3)& (0+255),1,b
  2486  001EB0  BD09               	btfsc	(_M+3)& (0+255),6,b
  2487  001EB2  0012               	return	
  2488  001EB4  0103               	movlb	(_M+3) shr (0+8)
  2489  001EB6  BB09               	btfsc	(_M+3)& (0+255),5,b
  2490  001EB8  0012               	return	
  2491                           ;main.c: 1002: if(!M._RUSZ_NTC_CW&&!M._RUSZ_NTC_
      +                          IN&&!M._RUSZ_POMPE)
  2492  001EBA  A509               	btfss	(_M+3)& (0+255),2,b
  2493  001EBC  B709               	btfsc	(_M+3)& (0+255),3,b
  2494  001EBE  0012               	return	
  2495  001EC0  0103               	movlb	(_M+2) shr (0+8)
  2496  001EC2  B308               	btfsc	(_M+2)& (0+255),1,b
  2497  001EC4  0012               	return	
  2498                           ;main.c: 1003: {
  2499  001EC6  0103               	movlb	(_M+11) shr (0+8)
  2500  001EC8  6B11               	clrf	(_M+11)& (0+255),b
  2501                           ;main.c: 1005: EndErr();
  2502  001ECA  EFE9  F069         	goto	_EndErr	;wreg free
  2503                           ;main.c: 1006: }
  2504  001ECE                     __end_of_DecERR:
  2505                           ;main.c: 1011: void DecSTR(void)
  2506                           ;main.c: 1012: {
  2507  001ECE                     _DecSTR:
  2508  000000                     
  2509                           ;main.c: 1018: if(RTS(9)>=3)
  2510  001ECE  0E09               	movlw	9
  2511  001ED0  ECE7  F063         	call	_RTS
  2512  001ED4  6E00               	movwf	btemp,c
  2513  001ED6  0E03               	movlw	3
  2514  001ED8  5C00               	subwf	btemp,w,c
  2515  001EDA  E303               	bnc	l183
  2516                           ;main.c: 1019: {
  2517  001EDC  0103               	movlb	(_M+4) shr (0+8)
  2518  001EDE  910A               	bcf	(_M+4)& (0+255),0,b
  2519                           ;main.c: 1021: M._RS_START=0;
  2520  001EE0  9F09               	bcf	(_M+3)& (0+255),7,b
  2521  001EE2                     l183:
  2522                           ;main.c: 1022: }
  2523  001EE2  0E14               	movlw	20
  2524  001EE4  EC50  F063         	call	_RdPrt
  2525  001EE8  0103               	movlb	(_M+2) shr (0+8)
  2526  001EEA  9F08               	bcf	(_M+2)& (0+255),7,b
  2527  001EEC  B0D8               	btfsc	status,0,c
  2528  001EEE  8F08               	bsf	(_M+2)& (0+255),7,b
  2529                           ;main.c: 1026: if(!M._ROZRUCH&&RD0&&DtCO._ldDCO)
      +                           M._RUN_MNMOD=1;
  2530  001EF0  A507               	btfss	(_M+1)& (0+255),2,b
  2531  001EF2  A083               	btfss	3971,0,c	;volatile
  2532  001EF4  D006               	goto	l184
  2533  001EF6  0100               	movlb	(_DtCO+1) shr (0+8)
  2534  001EF8  A980               	btfss	(_DtCO+1)& (0+255),4,b
  2535  001EFA  D003               	goto	l184
  2536  001EFC  0103               	movlb	(_M+4) shr (0+8)
  2537  001EFE  870A               	bsf	(_M+4)& (0+255),3,b
  2538  001F00  D002               	goto	l185
  2539  001F02                     l184:
  2540                           ;main.c: 1027: else M._RUN_MNMOD=0;
  2541  001F02  0103               	movlb	(_M+4) shr (0+8)
  2542  001F04  970A               	bcf	(_M+4)& (0+255),3,b
  2543  001F06                     l185:
  2544                           ;main.c: 1030: if(!M._ZMKCOCW)
  2545  001F06  0103               	movlb	(_M+1) shr (0+8)
  2546  001F08  B307               	btfsc	(_M+1)& (0+255),1,b
  2547  001F0A  D0DD               	goto	l186
  2548                           ;main.c: 1031: {
  2549  001F0C  A30A               	btfss	(_M+4)& (0+255),1,b
  2550  001F0E  D00B               	goto	l187
  2551  001F10  A306               	btfss	_M& (0+255),1,b
  2552  001F12  B906               	btfsc	_M& (0+255),4,b
  2553  001F14  D006               	goto	u2340
  2554  001F16  0103               	movlb	_M shr (0+8)
  2555  001F18  BF06               	btfsc	_M& (0+255),7,b
  2556  001F1A  D003               	goto	u2340
  2557  001F1C  0103               	movlb	_M shr (0+8)
  2558  001F1E  A706               	btfss	_M& (0+255),3,b
  2559  001F20  D002               	goto	l187
  2560  001F22                     u2340:
  2561  001F22  DA42               	call	_ToObiegCW	;wreg free
  2562  001F24  D0D0               	goto	l186
  2563  001F26                     l187:
  2564                           ;main.c: 1034: else
  2565  001F26  0103               	movlb	(_M+4) shr (0+8)
  2566  001F28  B30A               	btfsc	(_M+4)& (0+255),1,b
  2567  001F2A  B708               	btfsc	(_M+2)& (0+255),3,b
  2568  001F2C  D00B               	goto	l189
  2569  001F2E  0103               	movlb	_M shr (0+8)
  2570  001F30  A106               	btfss	_M& (0+255),0,b
  2571  001F32  B506               	btfsc	_M& (0+255),2,b
  2572  001F34  D005               	goto	u2450
  2573  001F36  BB06               	btfsc	_M& (0+255),5,b
  2574  001F38  D003               	goto	u2450
  2575  001F3A  0103               	movlb	_M shr (0+8)
  2576  001F3C  AD06               	btfss	_M& (0+255),6,b
  2577  001F3E  D002               	goto	l189
  2578  001F40                     u2450:
  2579  001F40  DA19               	call	_ToObiegCO	;wreg free
  2580  001F42  D0C1               	goto	l186
  2581  001F44                     l189:
  2582                           ;main.c: 1037: else
  2583  001F44  0103               	movlb	(_M+4) shr (0+8)
  2584  001F46  A30A               	btfss	(_M+4)& (0+255),1,b
  2585  001F48  A107               	btfss	(_M+1)& (0+255),0,b
  2586  001F4A  D012               	goto	l191
  2587  001F4C  0103               	movlb	(_M+6) shr (0+8)
  2588  001F4E  B30C               	btfsc	(_M+6)& (0+255),1,b
  2589  001F50  D00F               	goto	l191
  2590  001F52  C1C2  FFE8         	movff	_DtKNF+14,wreg
  2591  001F56  0A03               	xorlw	3
  2592  001F58  E10B               	bnz	l191
  2593  001F5A  0100               	movlb	_DtCO shr (0+8)
  2594  001F5C  B17F               	btfsc	_DtCO& (0+255),0,b
  2595  001F5E  D008               	goto	l191
  2596  001F60  0100               	movlb	(_DtCO+1) shr (0+8)
  2597  001F62  B180               	btfsc	(_DtCO+1)& (0+255),0,b
  2598  001F64  D005               	goto	l191
  2599  001F66  0103               	movlb	_M shr (0+8)
  2600  001F68  A906               	btfss	_M& (0+255),4,b
  2601  001F6A  D002               	goto	l191
  2602  001F6C  DA1D               	call	_ToObiegCW	;wreg free
  2603  001F6E  D0AB               	goto	l186
  2604  001F70                     l191:
  2605                           ;main.c: 1040: else
  2606  001F70  0103               	movlb	(_M+4) shr (0+8)
  2607  001F72  A30A               	btfss	(_M+4)& (0+255),1,b
  2608  001F74  A107               	btfss	(_M+1)& (0+255),0,b
  2609  001F76  D01B               	goto	l193
  2610  001F78  0103               	movlb	(_M+6) shr (0+8)
  2611  001F7A  B30C               	btfsc	(_M+6)& (0+255),1,b
  2612  001F7C  D018               	goto	l193
  2613  001F7E  EE01  F0C2         	lfsr	0,_DtKNF+14
  2614  001F82  50EF               	movf	indf0,w,c
  2615  001F84  E114               	bnz	l193
  2616  001F86  0100               	movlb	_DtCO shr (0+8)
  2617  001F88  B17F               	btfsc	_DtCO& (0+255),0,b
  2618  001F8A  D011               	goto	l193
  2619  001F8C  0100               	movlb	(_DtCO+1) shr (0+8)
  2620  001F8E  B180               	btfsc	(_DtCO+1)& (0+255),0,b
  2621  001F90  D00E               	goto	l193
  2622  001F92  0100               	movlb	(_PFN+1) shr (0+8)
  2623  001F94  516C               	movf	(_PFN+1)& (0+255),w,b
  2624  001F96  0A02               	xorlw	2
  2625  001F98  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2626  001F9A  E004               	bz	u2730
  2627  001F9C  516C               	movf	(_PFN+1)& (0+255),w,b
  2628  001F9E  0A03               	xorlw	3
  2629  001FA0  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2630  001FA2  E105               	bnz	l193
  2631  001FA4                     u2730:
  2632  001FA4  0100               	movlb	_DtCW shr (0+8)
  2633  001FA6  A770               	btfss	_DtCW& (0+255),3,b
  2634  001FA8  D002               	goto	l193
  2635  001FAA  D9FE               	call	_ToObiegCW	;wreg free
  2636  001FAC  D08C               	goto	l186
  2637  001FAE                     l193:
  2638                           ;main.c: 1042: else
  2639  001FAE  0103               	movlb	(_M+4) shr (0+8)
  2640  001FB0  A30A               	btfss	(_M+4)& (0+255),1,b
  2641  001FB2  B708               	btfsc	(_M+2)& (0+255),3,b
  2642  001FB4  D043               	goto	l195
  2643  001FB6  0103               	movlb	(_M+6) shr (0+8)
  2644  001FB8  B30C               	btfsc	(_M+6)& (0+255),1,b
  2645  001FBA  D040               	goto	l195
  2646  001FBC  0E0D               	movlw	13
  2647  001FBE  EC50  F063         	call	_RdPrt
  2648  001FC2  E203               	bc	u2840
  2649  001FC4  0103               	movlb	(_M+1) shr (0+8)
  2650  001FC6  A707               	btfss	(_M+1)& (0+255),3,b
  2651  001FC8  D039               	goto	l195
  2652  001FCA                     u2840:
  2653                           ;main.c: 1045: {
  2654  001FCA  0100               	movlb	(_PFN+1) shr (0+8)
  2655  001FCC  516C               	movf	(_PFN+1)& (0+255),w,b
  2656  001FCE  0A01               	xorlw	1
  2657  001FD0  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2658  001FD2  E102               	bnz	l196
  2659  001FD4  D9CF               	call	_ToObiegCO	;wreg free
  2660  001FD6  D077               	goto	l186
  2661  001FD8                     l196:
  2662                           ;main.c: 1047: else
  2663  001FD8  0100               	movlb	(_PFN+1) shr (0+8)
  2664  001FDA  516C               	movf	(_PFN+1)& (0+255),w,b
  2665  001FDC  0A02               	xorlw	2
  2666  001FDE  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2667  001FE0  E107               	bnz	l198
  2668                           ;main.c: 1049: {
  2669  001FE2  0100               	movlb	(_DtCO+1) shr (0+8)
  2670  001FE4  A580               	btfss	(_DtCO+1)& (0+255),2,b
  2671  001FE6  D002               	goto	l199
  2672  001FE8  D9C5               	call	_ToObiegCO	;wreg free
  2673  001FEA  D06D               	goto	l186
  2674  001FEC                     l199:
  2675                           ;main.c: 1051: else ToObiegCW();
  2676  001FEC  D9DD               	call	_ToObiegCW	;wreg free
  2677                           ;main.c: 1052: }
  2678  001FEE  D06B               	goto	l186
  2679  001FF0                     l198:
  2680                           ;main.c: 1053: else
  2681  001FF0  EE01  F0C2         	lfsr	0,_DtKNF+14
  2682  001FF4  50EF               	movf	indf0,w,c
  2683  001FF6  E115               	bnz	l202
  2684                           ;main.c: 1056: {
  2685  001FF8  0103               	movlb	(_M+1) shr (0+8)
  2686  001FFA  A107               	btfss	(_M+1)& (0+255),0,b
  2687  001FFC  970C               	bcf	(_M+6)& (0+255),3,b
  2688                           ;main.c: 1058: if(M._HWB_CW) ToObiegCW();
  2689  001FFE  0103               	movlb	(_M+6) shr (0+8)
  2690  002000  A70C               	btfss	(_M+6)& (0+255),3,b
  2691  002002  D002               	goto	l204
  2692  002004  D9D1               	call	_ToObiegCW	;wreg free
  2693  002006  D05F               	goto	l186
  2694  002008                     l204:
  2695                           ;main.c: 1059: else
  2696  002008  0103               	movlb	_M shr (0+8)
  2697  00200A  A306               	btfss	_M& (0+255),1,b
  2698  00200C  B906               	btfsc	_M& (0+255),4,b
  2699  00200E  D007               	goto	l206
  2700  002010  BF06               	btfsc	_M& (0+255),7,b
  2701  002012  D005               	goto	l206
  2702  002014  0103               	movlb	_M shr (0+8)
  2703  002016  B706               	btfsc	_M& (0+255),3,b
  2704  002018  D002               	goto	l206
  2705  00201A  D9AC               	call	_ToObiegCO	;wreg free
  2706  00201C  D054               	goto	l186
  2707  00201E                     l206:
  2708                           ;main.c: 1062: else ToObiegCW();
  2709  00201E  D9C4               	call	_ToObiegCW	;wreg free
  2710                           ;main.c: 1063: }
  2711  002020  D052               	goto	l186
  2712  002022                     l202:
  2713                           ;main.c: 1065: else
  2714  002022  0103               	movlb	_M shr (0+8)
  2715  002024  A306               	btfss	_M& (0+255),1,b
  2716  002026  B906               	btfsc	_M& (0+255),4,b
  2717  002028  D007               	goto	l209
  2718  00202A  BF06               	btfsc	_M& (0+255),7,b
  2719  00202C  D005               	goto	l209
  2720  00202E  0103               	movlb	_M shr (0+8)
  2721  002030  B706               	btfsc	_M& (0+255),3,b
  2722  002032  D002               	goto	l209
  2723  002034  D99F               	call	_ToObiegCO	;wreg free
  2724  002036  D047               	goto	l186
  2725  002038                     l209:
  2726                           ;main.c: 1068: else ToObiegCW();
  2727  002038  D9B7               	call	_ToObiegCW	;wreg free
  2728                           ;main.c: 1069: }
  2729  00203A  D045               	goto	l186
  2730  00203C                     l195:
  2731                           ;main.c: 1072: else
  2732  00203C  0103               	movlb	(_M+4) shr (0+8)
  2733  00203E  A30A               	btfss	(_M+4)& (0+255),1,b
  2734  002040  B708               	btfsc	(_M+2)& (0+255),3,b
  2735  002042  D02F               	goto	l215
  2736  002044  0103               	movlb	(_M+6) shr (0+8)
  2737  002046  B30C               	btfsc	(_M+6)& (0+255),1,b
  2738  002048  D02C               	goto	l215
  2739  00204A  0103               	movlb	_M shr (0+8)
  2740  00204C  AB06               	btfss	_M& (0+255),5,b
  2741  00204E  D029               	goto	l215
  2742  002050  0100               	movlb	_DtCO shr (0+8)
  2743  002052  B37F               	btfsc	_DtCO& (0+255),1,b
  2744  002054  D026               	goto	l215
  2745  002056  D98E               	call	_ToObiegCO	;wreg free
  2746  002058  D036               	goto	l186
  2747                           ;main.c: 1075: else
  2748  00205A                     l216:
  2749                           ;main.c: 1078: {
  2750                           ;main.c: 1080: {
  2751  00205A  0103               	movlb	(_M+4) shr (0+8)
  2752  00205C  A30A               	btfss	(_M+4)& (0+255),1,b
  2753  00205E  B107               	btfsc	(_M+1)& (0+255),0,b
  2754  002060  D032               	goto	l186
  2755  002062  0103               	movlb	(_M+6) shr (0+8)
  2756  002064  B30C               	btfsc	(_M+6)& (0+255),1,b
  2757  002066  D02F               	goto	l186
  2758  002068  0103               	movlb	(_M+1) shr (0+8)
  2759  00206A  B707               	btfsc	(_M+1)& (0+255),3,b
  2760  00206C  D02C               	goto	l186
  2761  00206E  A483               	btfss	3971,2,c	;volatile
  2762  002070  D003               	goto	u3240
  2763  002072  0103               	movlb	(_M+1) shr (0+8)
  2764  002074  A907               	btfss	(_M+1)& (0+255),4,b
  2765  002076  D027               	goto	l186
  2766  002078                     u3240:
  2767  002078  D997               	call	_ToObiegCW	;wreg free
  2768                           ;main.c: 1083: break;
  2769  00207A  D025               	goto	l186
  2770  00207C                     l218:
  2771                           ;main.c: 1084: }
  2772                           ;main.c: 1086: {
  2773  00207C  0103               	movlb	(_M+4) shr (0+8)
  2774  00207E  A30A               	btfss	(_M+4)& (0+255),1,b
  2775  002080  B30C               	btfsc	(_M+6)& (0+255),1,b
  2776  002082  D021               	goto	l186
  2777  002084  0E11               	movlw	17
  2778  002086  EC50  F063         	call	_RdPrt
  2779  00208A  E209               	bc	u3370
  2780  00208C  0103               	movlb	(_M+1) shr (0+8)
  2781  00208E  A107               	btfss	(_M+1)& (0+255),0,b
  2782  002090  B707               	btfsc	(_M+1)& (0+255),3,b
  2783  002092  D019               	goto	l186
  2784  002094  B483               	btfsc	3971,2,c	;volatile
  2785  002096  D017               	goto	l186
  2786  002098  0103               	movlb	(_M+6) shr (0+8)
  2787  00209A  B30C               	btfsc	(_M+6)& (0+255),1,b
  2788  00209C  D014               	goto	l186
  2789  00209E                     u3370:
  2790  00209E  D984               	call	_ToObiegCW	;wreg free
  2791                           ;main.c: 1089: break;
  2792  0020A0  D012               	goto	l186
  2793                           ;main.c: 1095: break;
  2794  0020A2                     l215:
  2795  0020A2  C1C2  FFE8         	movff	_DtKNF+14,wreg
  2796  0020A6  0A00               	xorlw	0
  2797  0020A8  E0E9               	bz	l218
  2798  0020AA  0A03               	xorlw	3
  2799  0020AC  E0D6               	bz	l216
  2800                           ;main.c: 1090: }
  2801                           ;main.c: 1092: {
  2802  0020AE  0103               	movlb	(_M+4) shr (0+8)
  2803  0020B0  A30A               	btfss	(_M+4)& (0+255),1,b
  2804  0020B2  B107               	btfsc	(_M+1)& (0+255),0,b
  2805  0020B4  D008               	goto	l186
  2806  0020B6  0103               	movlb	(_M+6) shr (0+8)
  2807  0020B8  B30C               	btfsc	(_M+6)& (0+255),1,b
  2808  0020BA  D005               	goto	l186
  2809  0020BC  0103               	movlb	(_M+1) shr (0+8)
  2810  0020BE  A707               	btfss	(_M+1)& (0+255),3,b
  2811  0020C0  B483               	btfsc	3971,2,c	;volatile
  2812  0020C2  D001               	goto	l186
  2813  0020C4  D971               	call	_ToObiegCW	;wreg free
  2814  0020C6                     l186:
  2815                           ;main.c: 1098: }
  2816  0020C6  0103               	movlb	(_M+1) shr (0+8)
  2817  0020C8  A307               	btfss	(_M+1)& (0+255),1,b
  2818  0020CA  D049               	goto	l224
  2819  0020CC  D066               	goto	l222
  2820                           ;main.c: 1103: {
  2821  0020CE                     l225:
  2822                           ;main.c: 1105: {
  2823                           ;main.c: 1107: {
  2824  0020CE  B483               	btfsc	3971,2,c	;volatile
  2825  0020D0  D064               	goto	l222
  2826  0020D2  0103               	movlb	(_M+1) shr (0+8)
  2827  0020D4  B107               	btfsc	(_M+1)& (0+255),0,b
  2828  0020D6  D061               	goto	l222
  2829  0020D8  0103               	movlb	(_M+6) shr (0+8)
  2830  0020DA  B30C               	btfsc	(_M+6)& (0+255),1,b
  2831  0020DC  D05E               	goto	l222
  2832  0020DE  0103               	movlb	(_M+1) shr (0+8)
  2833  0020E0  B707               	btfsc	(_M+1)& (0+255),3,b
  2834  0020E2  D05B               	goto	l222
  2835  0020E4  0103               	movlb	(_M+1) shr (0+8)
  2836  0020E6  B907               	btfsc	(_M+1)& (0+255),4,b
  2837  0020E8  D058               	goto	l222
  2838  0020EA  0103               	movlb	(_M+4) shr (0+8)
  2839  0020EC  B30A               	btfsc	(_M+4)& (0+255),1,b
  2840  0020EE  D055               	goto	l222
  2841                           ;main.c: 1109: {
  2842  0020F0  0E0D               	movlw	13
  2843  0020F2  EC50  F063         	call	_RdPrt
  2844  0020F6                     L31:
  2845  0020F6  E24E               	bc	u3990
  2846  0020F8                     L13:
  2847                           ;main.c: 1112: {
  2848                           ;main.c: 1114: RD2=1;
  2849                           ;main.c: 1115: }
  2850                           ;main.c: 1116: else
  2851  0020F8  0100               	movlb	(_PFN+1) shr (0+8)
  2852  0020FA  516C               	movf	(_PFN+1)& (0+255),w,b
  2853  0020FC  0A01               	xorlw	1
  2854  0020FE  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2855  002100  E04C               	bz	l222
  2856  002102  516C               	movf	(_PFN+1)& (0+255),w,b
  2857  002104  0A02               	xorlw	2
  2858  002106  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2859  002108  E048               	bz	l222
  2860  00210A                     L11:
  2861  00210A  0103               	movlb	_M shr (0+8)
  2862  00210C  AB06               	btfss	_M& (0+255),5,b
  2863  00210E  D045               	goto	l222
  2864  002110  0100               	movlb	_DtCO shr (0+8)
  2865  002112  B37F               	btfsc	_DtCO& (0+255),1,b
  2866  002114  D042               	goto	l222
  2867  002116  D03E               	goto	u3990
  2868                           ;main.c: 1119: {
  2869                           ;main.c: 1121: RD2=1;
  2870                           ;main.c: 1122: }
  2871  002118                     l230:
  2872                           ;main.c: 1125: }
  2873                           ;main.c: 1127: {
  2874  002118  B483               	btfsc	3971,2,c	;volatile
  2875  00211A  D03F               	goto	l222
  2876  00211C  0103               	movlb	(_M+1) shr (0+8)
  2877  00211E  B107               	btfsc	(_M+1)& (0+255),0,b
  2878  002120  D03C               	goto	l222
  2879  002122  0103               	movlb	(_M+6) shr (0+8)
  2880  002124  B30C               	btfsc	(_M+6)& (0+255),1,b
  2881  002126  D039               	goto	l222
  2882  002128  0103               	movlb	(_M+1) shr (0+8)
  2883  00212A  B707               	btfsc	(_M+1)& (0+255),3,b
  2884  00212C  D036               	goto	l222
  2885  00212E  0103               	movlb	(_M+4) shr (0+8)
  2886  002130  B30A               	btfsc	(_M+4)& (0+255),1,b
  2887  002132  D033               	goto	l222
  2888                           ;main.c: 1129: {
  2889  002134  0E0D               	movlw	13
  2890  002136  EC50  F063         	call	_RdPrt
  2891  00213A  E22C               	bc	u3990
  2892  00213C  0103               	movlb	(_M+4) shr (0+8)
  2893  00213E  AD0A               	btfss	(_M+4)& (0+255),6,b
  2894  002140  D7DB               	goto	L13
  2895  002142  0E11               	movlw	17
  2896  002144  EC50  F063         	call	_RdPrt
  2897  002148  D7D6               	goto	L31
  2898                           ;main.c: 1132: {
  2899                           ;main.c: 1134: RD2=1;
  2900                           ;main.c: 1135: }
  2901                           ;main.c: 1136: else
  2902                           ;main.c: 1155: }
  2903  00214A                     l237:
  2904                           ;main.c: 1156: else
  2905  00214A  0100               	movlb	(_PFN+1) shr (0+8)
  2906  00214C  516C               	movf	(_PFN+1)& (0+255),w,b
  2907  00214E  0A01               	xorlw	1
  2908  002150  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2909  002152  E023               	bz	l222
  2910  002154  516C               	movf	(_PFN+1)& (0+255),w,b
  2911  002156  0A02               	xorlw	2
  2912  002158  116D               	iorwf	(_PFN+2)& (0+255),w,b
  2913  00215A  E1D7               	bnz	L11
  2914                           ;main.c: 1159: {
  2915                           ;main.c: 1161: RD2=1;
  2916                           ;main.c: 1162: }
  2917  00215C  D01E               	goto	l222
  2918  00215E                     l224:
  2919  00215E  C1C2  FFE8         	movff	_DtKNF+14,wreg
  2920  002162  0A00               	xorlw	0
  2921  002164  E0D9               	bz	l230
  2922  002166  0A03               	xorlw	3
  2923  002168  E0B2               	bz	l225
  2924                           ;main.c: 1139: {
  2925                           ;main.c: 1141: RD2=1;
  2926                           ;main.c: 1142: }
  2927                           ;main.c: 1145: }
  2928                           ;main.c: 1147: {
  2929  00216A  B483               	btfsc	3971,2,c	;volatile
  2930  00216C  D016               	goto	l222
  2931  00216E  0103               	movlb	(_M+1) shr (0+8)
  2932  002170  B107               	btfsc	(_M+1)& (0+255),0,b
  2933  002172  D013               	goto	l222
  2934  002174  0103               	movlb	(_M+6) shr (0+8)
  2935  002176  B30C               	btfsc	(_M+6)& (0+255),1,b
  2936  002178  D010               	goto	l222
  2937  00217A  0103               	movlb	(_M+1) shr (0+8)
  2938  00217C  B707               	btfsc	(_M+1)& (0+255),3,b
  2939  00217E  D00D               	goto	l222
  2940  002180  0103               	movlb	(_M+1) shr (0+8)
  2941  002182  B907               	btfsc	(_M+1)& (0+255),4,b
  2942  002184  D00A               	goto	l222
  2943  002186  0103               	movlb	(_M+4) shr (0+8)
  2944  002188  B30A               	btfsc	(_M+4)& (0+255),1,b
  2945  00218A  D007               	goto	l222
  2946                           ;main.c: 1149: {
  2947  00218C  0E0D               	movlw	13
  2948  00218E  EC50  F063         	call	_RdPrt
  2949  002192  E3DB               	bnc	l237
  2950  002194                     u3990:
  2951                           ;main.c: 1152: {
  2952  002194  0103               	movlb	(_M+1) shr (0+8)
  2953  002196  8107               	bsf	(_M+1)& (0+255),0,b
  2954                           ;main.c: 1154: RD2=1;
  2955  002198  8483               	bsf	3971,2,c	;volatile
  2956  00219A                     l222:
  2957                           ;main.c: 1167: }
  2958  00219A  0103               	movlb	(_M+4) shr (0+8)
  2959  00219C  A30A               	btfss	(_M+4)& (0+255),1,b
  2960  00219E  D027               	goto	l240
  2961  0021A0  AB06               	btfss	_M& (0+255),5,b
  2962  0021A2  BD06               	btfsc	_M& (0+255),6,b
  2963  0021A4  D003               	goto	u4130
  2964  0021A6  0103               	movlb	_M shr (0+8)
  2965  0021A8  AF06               	btfss	_M& (0+255),7,b
  2966  0021AA  D021               	goto	l240
  2967  0021AC                     u4130:
  2968  0021AC  0103               	movlb	_M shr (0+8)
  2969  0021AE  B506               	btfsc	_M& (0+255),2,b
  2970  0021B0  D01E               	goto	l240
  2971  0021B2  0103               	movlb	(_M+3) shr (0+8)
  2972  0021B4  B109               	btfsc	(_M+3)& (0+255),0,b
  2973  0021B6  D01B               	goto	l240
  2974  0021B8  0103               	movlb	_M shr (0+8)
  2975  0021BA  B106               	btfsc	_M& (0+255),0,b
  2976  0021BC  D018               	goto	l240
  2977  0021BE  0103               	movlb	_M shr (0+8)
  2978  0021C0  B306               	btfsc	_M& (0+255),1,b
  2979  0021C2  D015               	goto	l240
  2980  0021C4  0103               	movlb	_M shr (0+8)
  2981  0021C6  B906               	btfsc	_M& (0+255),4,b
  2982  0021C8  D012               	goto	l240
  2983  0021CA  0103               	movlb	_M shr (0+8)
  2984  0021CC  B706               	btfsc	_M& (0+255),3,b
  2985  0021CE  D00F               	goto	l240
  2986                           ;main.c: 1171: {
  2987  0021D0  C1DF  FFE8         	movff	_PWM+9,wreg
  2988  0021D4  0101               	movlb	(_PWM+8) shr (0+8)
  2989  0021D6  61DE               	cpfslt	(_PWM+8)& (0+255),b
  2990  0021D8  D00A               	goto	l240
  2991  0021DA  0E0E               	movlw	14
  2992  0021DC  ECE7  F063         	call	_RTS
  2993  0021E0  6E00               	movwf	btemp,c
  2994  0021E2  0E05               	movlw	5
  2995  0021E4  5C00               	subwf	btemp,w,c
  2996  0021E6  E203               	bc	l240
  2997                           ;main.c: 1173: {
  2998  0021E8  C1DF  F1DD         	movff	_PWM+9,_PWM+7
  2999                           ;main.c: 1175: }
  3000  0021EC  D002               	goto	l243
  3001                           ;main.c: 1176: else
  3002                           ;main.c: 1179: }
  3003  0021EE                     l240:
  3004                           ;main.c: 1181: else
  3005  0021EE  C1DE  F1DD         	movff	_PWM+8,_PWM+7
  3006  0021F2                     l243:
  3007                           ;main.c: 1184: }
  3008  0021F2  0103               	movlb	(_M+1) shr (0+8)
  3009  0021F4  A507               	btfss	(_M+1)& (0+255),2,b
  3010  0021F6  A083               	btfss	3971,0,c	;volatile
  3011  0021F8  D038               	goto	l244
  3012  0021FA  0103               	movlb	_M shr (0+8)
  3013  0021FC  AB06               	btfss	_M& (0+255),5,b
  3014  0021FE  D035               	goto	l244
  3015  002200  0103               	movlb	_M shr (0+8)
  3016  002202  B506               	btfsc	_M& (0+255),2,b
  3017  002204  D032               	goto	l244
  3018  002206  0103               	movlb	(_M+3) shr (0+8)
  3019  002208  B109               	btfsc	(_M+3)& (0+255),0,b
  3020  00220A  D02F               	goto	l244
  3021  00220C  0103               	movlb	_M shr (0+8)
  3022  00220E  B106               	btfsc	_M& (0+255),0,b
  3023  002210  D02C               	goto	l244
  3024  002212  0103               	movlb	_M shr (0+8)
  3025  002214  B306               	btfsc	_M& (0+255),1,b
  3026  002216  D029               	goto	l244
  3027  002218  0103               	movlb	_M shr (0+8)
  3028  00221A  B906               	btfsc	_M& (0+255),4,b
  3029  00221C  D026               	goto	l244
  3030  00221E  0103               	movlb	_M shr (0+8)
  3031  002220  BF06               	btfsc	_M& (0+255),7,b
  3032  002222  D023               	goto	l244
  3033  002224  0103               	movlb	_M shr (0+8)
  3034  002226  B706               	btfsc	_M& (0+255),3,b
  3035  002228  D020               	goto	l244
  3036                           ;main.c: 1189: {
  3037  00222A  EE01  F0BF         	lfsr	0,_DtKNF+11
  3038  00222E  50EF               	movf	indf0,w,c
  3039  002230  E014               	bz	l245
  3040  002232  0E05               	movlw	5
  3041  002234  EC0B  F064         	call	_RTM
  3042  002238  6E00               	movwf	btemp,c
  3043  00223A  C1BF  FFE8         	movff	_DtKNF+11,wreg
  3044  00223E  5C00               	subwf	btemp,w,c
  3045  002240  E20C               	bc	l245
  3046                           ;main.c: 1191: {
  3047  002242  0101               	movlb	(_PWM+22) shr (0+8)
  3048  002244  B1EC               	btfsc	(_PWM+22)& (0+255),0,b
  3049  002246  D006               	goto	l246
  3050                           ;main.c: 1193: {
  3051  002248  C1BE  F1BC         	movff	_DtKNF+10,_DtKNF+8
  3052                           ;main.c: 1195: rgl.slow_inc=1;
  3053  00224C  0101               	movlb	(_rgl+1) shr (0+8)
  3054  00224E  83F4               	bsf	(_rgl+1)& (0+255),1,b
  3055                           ;main.c: 1196: ModParam();
  3056  002250  ECDF  F066         	call	_ModParam	;wreg free
  3057  002254                     l246:
  3058                           ;main.c: 1197: }
  3059  002254  0101               	movlb	(_PWM+22) shr (0+8)
  3060  002256  81EC               	bsf	(_PWM+22)& (0+255),0,b
  3061                           ;main.c: 1200: }
  3062  002258  D013               	goto	l249
  3063  00225A                     l245:
  3064                           ;main.c: 1201: else
  3065  00225A  0101               	movlb	(_PWM+22) shr (0+8)
  3066  00225C  A1EC               	btfss	(_PWM+22)& (0+255),0,b
  3067  00225E  D00E               	goto	L5
  3068                           ;main.c: 1204: {
  3069  002260  C1BD  F1BC         	movff	_DtKNF+9,_DtKNF+8
  3070                           ;main.c: 1206: ModParam();
  3071  002264  ECDF  F066         	call	_ModParam	;wreg free
  3072  002268  D009               	goto	L5
  3073                           ;main.c: 1207: }
  3074                           ;main.c: 1210: }
  3075  00226A                     l244:
  3076                           ;main.c: 1212: else
  3077  00226A  0101               	movlb	(_PWM+22) shr (0+8)
  3078  00226C  A1EC               	btfss	(_PWM+22)& (0+255),0,b
  3079  00226E  D004               	goto	l250
  3080                           ;main.c: 1215: {
  3081  002270  C1BD  F1BC         	movff	_DtKNF+9,_DtKNF+8
  3082                           ;main.c: 1217: ModParam();
  3083  002274  ECDF  F066         	call	_ModParam	;wreg free
  3084  002278                     l250:
  3085                           ;main.c: 1218: }
  3086  002278  0101               	movlb	(_rgl+1) shr (0+8)
  3087  00227A  93F4               	bcf	(_rgl+1)& (0+255),1,b
  3088  00227C                     L5:
  3089                           ;main.c: 1220: PWM._TMAXCO=0;
  3090  00227C  0101               	movlb	(_PWM+22) shr (0+8)
  3091  00227E  91EC               	bcf	(_PWM+22)& (0+255),0,b
  3092  002280                     l249:
  3093                           ;main.c: 1222: }
  3094  002280  0103               	movlb	_M shr (0+8)
  3095  002282  AB06               	btfss	_M& (0+255),5,b
  3096  002284  B906               	btfsc	_M& (0+255),4,b
  3097  002286  D002               	goto	u4570
  3098  002288  A706               	btfss	_M& (0+255),3,b
  3099  00228A  D00B               	goto	l251
  3100  00228C                     u4570:
  3101                           ;main.c: 1227: {
  3102  00228C  0103               	movlb	(_M+1) shr (0+8)
  3103  00228E  A507               	btfss	(_M+1)& (0+255),2,b
  3104  002290  A083               	btfss	3971,0,c	;volatile
  3105  002292  D007               	goto	l251
  3106                           ;main.c: 1229: {
  3107  002294  0103               	movlb	(_M+2) shr (0+8)
  3108  002296  B908               	btfsc	(_M+2)& (0+255),4,b
  3109  002298  D006               	goto	l255
  3110                           ;main.c: 1231: {
  3111  00229A  8908               	bsf	(_M+2)& (0+255),4,b
  3112                           ;main.c: 1233: RestartMod();
  3113  00229C  EC32  F02F         	call	_RestartMod	;wreg free
  3114                           ;main.c: 1235: }
  3115  0022A0  D002               	goto	l255
  3116                           ;main.c: 1237: else M._MODULUJ=0;
  3117                           ;main.c: 1238: }
  3118  0022A2                     l251:
  3119                           ;main.c: 1239: else M._MODULUJ=0;
  3120  0022A2  0103               	movlb	(_M+2) shr (0+8)
  3121  0022A4  9908               	bcf	(_M+2)& (0+255),4,b
  3122  0022A6                     l255:
  3123                           ;main.c: 1242: if(!M._PRACA||M._RUN_MNMOD||(!M._
      +                          PRACA&&M._VWYBIEG))
  3124  0022A6  0103               	movlb	(_M+4) shr (0+8)
  3125  0022A8  B30A               	btfsc	(_M+4)& (0+255),1,b
  3126  0022AA  B70A               	btfsc	(_M+4)& (0+255),3,b
  3127  0022AC  D003               	goto	u4690
  3128  0022AE  A30A               	btfss	(_M+4)& (0+255),1,b
  3129  0022B0  AD07               	btfss	(_M+1)& (0+255),6,b
  3130  0022B2  D01C               	goto	l256
  3131  0022B4                     u4690:
  3132                           ;main.c: 1243: {
  3133  0022B4  0103               	movlb	(_M+2) shr (0+8)
  3134  0022B6  9908               	bcf	(_M+2)& (0+255),4,b
  3135                           ;main.c: 1245: if(M._RUN_MNMOD)
  3136  0022B8  A70A               	btfss	(_M+4)& (0+255),3,b
  3137  0022BA  D006               	goto	l257
  3138                           ;main.c: 1246: {
  3139  0022BC  0E00               	movlw	0
  3140  0022BE  EC8E  F02E         	call	_ProcToMod
  3141  0022C2  ECDF  F067         	call	_WritePWM
  3142                           ;main.c: 1248: }
  3143  0022C6  D012               	goto	l256
  3144  0022C8                     l257:
  3145                           ;main.c: 1249: else
  3146  0022C8  0103               	movlb	(_M+1) shr (0+8)
  3147  0022CA  AD07               	btfss	(_M+1)& (0+255),6,b
  3148  0022CC  D006               	goto	l259
  3149                           ;main.c: 1251: {
  3150  0022CE  0E00               	movlw	0
  3151  0022D0  EC8E  F02E         	call	_ProcToMod
  3152  0022D4  ECDF  F067         	call	_WritePWM
  3153                           ;main.c: 1253: }
  3154  0022D8  D009               	goto	l256
  3155  0022DA                     l259:
  3156                           ;main.c: 1254: else
  3157  0022DA  0103               	movlb	(_M+4) shr (0+8)
  3158                           ;main.c: 1256: {
  3159  0022DC  0E00               	movlw	0
  3160  0022DE  B30A               	btfsc	(_M+4)& (0+255),1,b
  3161  0022E0  D003               	goto	L20
  3162  0022E2  ECDF  F067         	call	_WritePWM
  3163                           ;main.c: 1258: }
  3164  0022E6  D002               	goto	l256
  3165                           ;main.c: 1259: else WritePWM(0);
  3166  0022E8                     L20:
  3167  0022E8  ECDF  F067         	call	_WritePWM
  3168  0022EC                     l256:
  3169                           ;main.c: 1260: }
  3170  0022EC  0103               	movlb	_M shr (0+8)
  3171  0022EE  B306               	btfsc	_M& (0+255),1,b
  3172  0022F0  B507               	btfsc	(_M+1)& (0+255),2,b
  3173  0022F2  D008               	goto	l263
  3174  0022F4  A083               	btfss	3971,0,c	;volatile
  3175  0022F6  D006               	goto	l263
  3176  0022F8  C1B8  FFE8         	movff	_DtKNF+4,wreg
  3177  0022FC  EC8E  F02E         	call	_ProcToMod
  3178  002300  ECDF  F067         	call	_WritePWM
  3179  002304                     l263:
  3180                           ;main.c: 1263: if(M._pob_KCO&&!M._ROZRUCH&&RD0) 
      +                          WritePWM(ProcToMod(DtKNF.dmxco));
  3181  002304  0103               	movlb	_M shr (0+8)
  3182  002306  B106               	btfsc	_M& (0+255),0,b
  3183  002308  B507               	btfsc	(_M+1)& (0+255),2,b
  3184  00230A  D008               	goto	l264
  3185  00230C  A083               	btfss	3971,0,c	;volatile
  3186  00230E  D006               	goto	l264
  3187  002310  C1B9  FFE8         	movff	_DtKNF+5,wreg
  3188  002314  EC8E  F02E         	call	_ProcToMod
  3189  002318  ECDF  F067         	call	_WritePWM
  3190  00231C                     l264:
  3191                           ;main.c: 1267: if(M._pob_SRW&&!M._ROZRUCH&&RD0)
  3192  00231C  0103               	movlb	_M shr (0+8)
  3193  00231E  B506               	btfsc	_M& (0+255),2,b
  3194  002320  B507               	btfsc	(_M+1)& (0+255),2,b
  3195  002322  D014               	goto	l265
  3196  002324  A083               	btfss	3971,0,c	;volatile
  3197  002326  D012               	goto	l265
  3198                           ;main.c: 1268: {
  3199  002328  0100               	movlb	__Lparam shr (0+8)
  3200  00232A  6BA9               	clrf	?_GetBit2^(__Lparam& (0+65280)),b
  3201  00232C  C366  FFE8         	movff	_RSDT1+64,wreg
  3202  002330  EC24  F06A         	call	_GetBit2
  3203  002334  E306               	bnc	l266
  3204  002336  0E63               	movlw	99
  3205  002338  EC8E  F02E         	call	_ProcToMod
  3206  00233C  ECDF  F067         	call	_WritePWM
  3207  002340  D005               	goto	l265
  3208  002342                     l266:
  3209                           ;main.c: 1270: else WritePWM(ProcToMod(0));
  3210  002342  0E00               	movlw	0
  3211  002344  EC8E  F02E         	call	_ProcToMod
  3212  002348  ECDF  F067         	call	_WritePWM
  3213  00234C                     l265:
  3214                           ;main.c: 1271: }
  3215  00234C  0103               	movlb	_M shr (0+8)
  3216  00234E  BD06               	btfsc	_M& (0+255),6,b
  3217  002350  B507               	btfsc	(_M+1)& (0+255),2,b
  3218  002352  D006               	goto	l268
  3219  002354  A083               	btfss	3971,0,c	;volatile
  3220  002356  D004               	goto	l268
  3221  002358  C1DD  FFE8         	movff	_PWM+7,wreg
  3222  00235C  ECDF  F067         	call	_WritePWM
  3223  002360                     l268:
  3224                           ;main.c: 1274: if(M._pob_DzCW&&!M._ROZRUCH&&RD0)
      +                           WritePWM(PWM.MDMOD);
  3225  002360  0103               	movlb	_M shr (0+8)
  3226  002362  BF06               	btfsc	_M& (0+255),7,b
  3227  002364  B507               	btfsc	(_M+1)& (0+255),2,b
  3228  002366  0012               	return	
  3229  002368  A083               	btfss	3971,0,c	;volatile
  3230  00236A  0012               	return	
  3231  00236C  C1DD  FFE8         	movff	_PWM+7,wreg
  3232  002370  EFDF  F067         	goto	_WritePWM
  3233                           ;main.c: 1275: }
  3234  002374                     __end_of_DecSTR:
  3235                           ;main.c: 1279: void ToObiegCO(void)
  3236                           ;main.c: 1280: {
  3237  002374                     _ToObiegCO:
  3238  000000                     
  3239                           ;main.c: 1281: switch(DtKNF.tpkt)
  3240  002374  D012               	goto	l272
  3241  002376                     l274:
  3242                           ;main.c: 1284: case 3:
  3243  002376  0103               	movlb	(_M+1) shr (0+8)
  3244  002378  A307               	btfss	(_M+1)& (0+255),1,b
  3245  00237A  B283               	btfsc	3971,1,c	;volatile
  3246  00237C  0012               	return	
  3247                           ;main.c: 1287: {
  3248  00237E  0103               	movlb	(_M+4) shr (0+8)
  3249  002380  9D0A               	bcf	(_M+4)& (0+255),6,b
  3250                           ;main.c: 1289: M._ZMKCOCW=1;
  3251  002382  8307               	bsf	(_M+1)& (0+255),1,b
  3252                           ;main.c: 1290: M.ZKP=0;
  3253  002384  6B1C               	clrf	(_M+22)& (0+255),b
  3254                           ;main.c: 1291: }
  3255  002386  0012               	return	
  3256  002388                     l276:
  3257                           ;main.c: 1293: }
  3258                           ;main.c: 1295: {
  3259  002388  0103               	movlb	(_M+1) shr (0+8)
  3260  00238A  A307               	btfss	(_M+1)& (0+255),1,b
  3261  00238C  B283               	btfsc	3971,1,c	;volatile
  3262  00238E  0012               	return	
  3263                           ;main.c: 1297: {
  3264  002390  0103               	movlb	(_M+4) shr (0+8)
  3265  002392  9D0A               	bcf	(_M+4)& (0+255),6,b
  3266                           ;main.c: 1299: M._ZMKCOCW=1;
  3267  002394  8307               	bsf	(_M+1)& (0+255),1,b
  3268                           ;main.c: 1300: M.ZKP=0;
  3269  002396  6B1C               	clrf	(_M+22)& (0+255),b
  3270                           ;main.c: 1301: }
  3271  002398  0012               	return	
  3272  00239A                     l272:
  3273  00239A  C1C2  FFE8         	movff	_DtKNF+14,wreg
  3274  00239E  0A00               	xorlw	0
  3275  0023A0  E0EA               	bz	l274
  3276  0023A2  0A03               	xorlw	3
  3277  0023A4  E0E8               	bz	l274
  3278  0023A6  D7F0               	goto	l276
  3279                           ;main.c: 1305: }
  3280  0023A8                     __end_of_ToObiegCO:
  3281                           ;main.c: 1307: void ToObiegCW(void)
  3282                           ;main.c: 1308: {
  3283  0023A8                     _ToObiegCW:
  3284  000000                     
  3285                           ;main.c: 1309: switch(DtKNF.tpkt)
  3286  0023A8  D02E               	goto	l280
  3287  0023AA                     l282:
  3288                           ;main.c: 1312: case 3:
  3289  0023AA  0103               	movlb	(_M+1) shr (0+8)
  3290  0023AC  A307               	btfss	(_M+1)& (0+255),1,b
  3291  0023AE  A283               	btfss	3971,1,c	;volatile
  3292  0023B0  0012               	return	
  3293                           ;main.c: 1315: {
  3294  0023B2  0103               	movlb	(_M+4) shr (0+8)
  3295  0023B4  8D0A               	bsf	(_M+4)& (0+255),6,b
  3296                           ;main.c: 1317: M._ZMKCOCW=1;
  3297  0023B6  8307               	bsf	(_M+1)& (0+255),1,b
  3298                           ;main.c: 1318: M.ZKP=0;
  3299  0023B8  6B1C               	clrf	(_M+22)& (0+255),b
  3300                           ;main.c: 1319: if(M._pob_KCW||M._pob_CW||M._pob_
      +                          DzCW||M._pob_AL)
  3301  0023BA  A306               	btfss	_M& (0+255),1,b
  3302  0023BC  B906               	btfsc	_M& (0+255),4,b
  3303  0023BE  D006               	goto	u5140
  3304  0023C0  0103               	movlb	_M shr (0+8)
  3305  0023C2  BF06               	btfsc	_M& (0+255),7,b
  3306  0023C4  D003               	goto	u5140
  3307  0023C6  0103               	movlb	_M shr (0+8)
  3308  0023C8  A706               	btfss	_M& (0+255),3,b
  3309  0023CA  0012               	return	
  3310  0023CC                     u5140:
  3311                           ;main.c: 1320: {
  3312  0023CC  0103               	movlb	(_M+4) shr (0+8)
  3313  0023CE  A30A               	btfss	(_M+4)& (0+255),1,b
  3314  0023D0  0012               	return	
  3315                           ;main.c: 1322: {
  3316  0023D2  8708               	bsf	(_M+2)& (0+255),3,b
  3317                           ;main.c: 1324: M.BL15=0;
  3318  0023D4  6B16               	clrf	(_M+16)& (0+255),b
  3319                           ;main.c: 1325: }
  3320  0023D6  0012               	return	
  3321  0023D8                     l286:
  3322                           ;main.c: 1329: }
  3323                           ;main.c: 1331: {
  3324  0023D8  0103               	movlb	(_M+1) shr (0+8)
  3325  0023DA  A307               	btfss	(_M+1)& (0+255),1,b
  3326  0023DC  A283               	btfss	3971,1,c	;volatile
  3327  0023DE  0012               	return	
  3328                           ;main.c: 1333: {
  3329  0023E0  0103               	movlb	(_M+4) shr (0+8)
  3330  0023E2  8D0A               	bsf	(_M+4)& (0+255),6,b
  3331                           ;main.c: 1335: M._ZMKCOCW=1;
  3332  0023E4  8307               	bsf	(_M+1)& (0+255),1,b
  3333                           ;main.c: 1336: M.ZKP=0;
  3334  0023E6  6B1C               	clrf	(_M+22)& (0+255),b
  3335                           ;main.c: 1337: if(M._pob_KCW||M._pob_CW||M._pob_
      +                          DzCW||M._pob_AL)
  3336  0023E8  A306               	btfss	_M& (0+255),1,b
  3337  0023EA  B906               	btfsc	_M& (0+255),4,b
  3338  0023EC  D006               	goto	u5250
  3339  0023EE  0103               	movlb	_M shr (0+8)
  3340  0023F0  BF06               	btfsc	_M& (0+255),7,b
  3341  0023F2  D003               	goto	u5250
  3342  0023F4  0103               	movlb	_M shr (0+8)
  3343  0023F6  A706               	btfss	_M& (0+255),3,b
  3344  0023F8  0012               	return	
  3345  0023FA                     u5250:
  3346                           ;main.c: 1338: {
  3347  0023FA  0103               	movlb	(_M+4) shr (0+8)
  3348  0023FC  A30A               	btfss	(_M+4)& (0+255),1,b
  3349  0023FE  0012               	return	
  3350                           ;main.c: 1340: {
  3351  002400  8708               	bsf	(_M+2)& (0+255),3,b
  3352                           ;main.c: 1342: M.BL15=0;
  3353  002402  6B16               	clrf	(_M+16)& (0+255),b
  3354                           ;main.c: 1343: }
  3355  002404  0012               	return	
  3356  002406                     l280:
  3357  002406  C1C2  FFE8         	movff	_DtKNF+14,wreg
  3358  00240A  0A00               	xorlw	0
  3359  00240C  E0CE               	bz	l282
  3360  00240E  0A03               	xorlw	3
  3361  002410  E0CC               	bz	l282
  3362  002412  D7E2               	goto	l286
  3363                           ;main.c: 1349: }
  3364  002414                     __end_of_ToObiegCW:
  3365                           ;main.c: 1354: void DecRozruch(void)
  3366                           ;main.c: 1355: {
  3367  002414                     _DecRozruch:
  3368  000000                     
  3369                           ;main.c: 1356: switch(DtKNF.tpkt)
  3370  002414  D0A1               	goto	l292
  3371  002416                     l294:
  3372                           ;main.c: 1359: case 3:
  3373  002416  0103               	movlb	(_M+1) shr (0+8)
  3374  002418  A507               	btfss	(_M+1)& (0+255),2,b
  3375  00241A  B083               	btfsc	3971,0,c	;volatile
  3376  00241C  0012               	return	
  3377  00241E  0103               	movlb	(_M+6) shr (0+8)
  3378  002420  B10C               	btfsc	(_M+6)& (0+255),0,b
  3379  002422  0012               	return	
  3380                           ;main.c: 1362: if(!M._ZMKCOCW&&!M._RUSZ_PWR&&!M.
      +                          _RUSZ_PLOMIEN&&!M._RUSZ_STB&&!M._RUSZ_NTC_CO&&!M
      +                          ._RUSZ_NTC_CW)
  3381  002424  0103               	movlb	(_M+1) shr (0+8)
  3382  002426  A307               	btfss	(_M+1)& (0+255),1,b
  3383  002428  BB07               	btfsc	(_M+1)& (0+255),5,b
  3384  00242A  0012               	return	
  3385  00242C  BF07               	btfsc	(_M+1)& (0+255),7,b
  3386  00242E  0012               	return	
  3387  002430  0103               	movlb	(_M+3) shr (0+8)
  3388  002432  A909               	btfss	(_M+3)& (0+255),4,b
  3389  002434  B309               	btfsc	(_M+3)& (0+255),1,b
  3390  002436  0012               	return	
  3391  002438  B509               	btfsc	(_M+3)& (0+255),2,b
  3392  00243A  0012               	return	
  3393                           ;main.c: 1363: if(!M._RUSZ_POMPE&&!M._RUSZ_CISN&
      +                          &!M._RUSZ_NCISN)
  3394  00243C  0103               	movlb	(_M+2) shr (0+8)
  3395  00243E  A308               	btfss	(_M+2)& (0+255),1,b
  3396  002440  BB09               	btfsc	(_M+3)& (0+255),5,b
  3397  002442  0012               	return	
  3398  002444  0103               	movlb	(_M+3) shr (0+8)
  3399  002446  BD09               	btfsc	(_M+3)& (0+255),6,b
  3400  002448  0012               	return	
  3401                           ;main.c: 1364: {
  3402  00244A  0103               	movlb	_M shr (0+8)
  3403  00244C  B306               	btfsc	_M& (0+255),1,b
  3404  00244E  D014               	goto	L34
  3405                           ;main.c: 1366: {
  3406                           ;main.c: 1368: {
  3407                           ;main.c: 1370: M.BL15=0;
  3408                           ;main.c: 1371: SetRozruch();
  3409                           ;main.c: 1372: }
  3410                           ;main.c: 1374: else
  3411  002450  0103               	movlb	_M shr (0+8)
  3412  002452  A106               	btfss	_M& (0+255),0,b
  3413  002454  D004               	goto	l301
  3414                           ;main.c: 1376: {
  3415  002456  0100               	movlb	_DtCO shr (0+8)
  3416  002458  B37F               	btfsc	_DtCO& (0+255),1,b
  3417  00245A  D887               	call	_SetRozruch	;wreg free
  3418                           ;main.c: 1378: }
  3419  00245C  0012               	return	
  3420  00245E                     l301:
  3421                           ;main.c: 1379: else
  3422  00245E  0103               	movlb	_M shr (0+8)
  3423  002460  A506               	btfss	_M& (0+255),2,b
  3424  002462  D004               	goto	l304
  3425                           ;main.c: 1381: {
  3426  002464  0100               	movlb	_DtCO shr (0+8)
  3427  002466  B77F               	btfsc	_DtCO& (0+255),3,b
  3428  002468  D880               	call	_SetRozruch	;wreg free
  3429                           ;main.c: 1383: }
  3430  00246A  0012               	return	
  3431  00246C                     l304:
  3432                           ;main.c: 1384: else
  3433  00246C  0103               	movlb	_M shr (0+8)
  3434  00246E  B706               	btfsc	_M& (0+255),3,b
  3435  002470  D006               	goto	L33
  3436                           ;main.c: 1386: {
  3437                           ;main.c: 1388: {
  3438                           ;main.c: 1390: M.BL15=0;
  3439                           ;main.c: 1391: SetRozruch();
  3440                           ;main.c: 1392: }
  3441                           ;main.c: 1394: else
  3442  002472  0103               	movlb	_M shr (0+8)
  3443  002474  A906               	btfss	_M& (0+255),4,b
  3444  002476  D00A               	goto	l310
  3445  002478                     L34:
  3446                           ;main.c: 1431: {
  3447  002478  0100               	movlb	_DtCW shr (0+8)
  3448  00247A  A370               	btfss	_DtCW& (0+255),1,b
  3449  00247C  0012               	return	
  3450                           ;main.c: 1396: {
  3451  00247E                     L33:
  3452  00247E  0100               	movlb	(_DtCO+1) shr (0+8)
  3453  002480  A380               	btfss	(_DtCO+1)& (0+255),1,b
  3454  002482  0012               	return	
  3455                           ;main.c: 1398: {
  3456  002484  0103               	movlb	(_M+2) shr (0+8)
  3457  002486  8708               	bsf	(_M+2)& (0+255),3,b
  3458                           ;main.c: 1400: M.BL15=0;
  3459  002488  6B16               	clrf	(_M+16)& (0+255),b
  3460                           ;main.c: 1401: SetRozruch();
  3461  00248A  D06F               	goto	_SetRozruch	;wreg free
  3462                           ;main.c: 1402: }
  3463  00248C                     l310:
  3464                           ;main.c: 1404: else
  3465  00248C  0103               	movlb	_M shr (0+8)
  3466  00248E  AB06               	btfss	_M& (0+255),5,b
  3467  002490  D009               	goto	l313
  3468  002492  0100               	movlb	_DtCO shr (0+8)
  3469  002494  A37F               	btfss	_DtCO& (0+255),1,b
  3470  002496  D006               	goto	l313
  3471  002498  0103               	movlb	(_M+2) shr (0+8)
  3472  00249A  B508               	btfsc	(_M+2)& (0+255),2,b
  3473  00249C  D003               	goto	l313
  3474  00249E  0103               	movlb	(_M+2) shr (0+8)
  3475  0024A0  A708               	btfss	(_M+2)& (0+255),3,b
  3476                           ;main.c: 1406: {
  3477  0024A2  D063               	goto	_SetRozruch	;wreg free
  3478                           ;main.c: 1408: }
  3479  0024A4                     l313:
  3480                           ;main.c: 1409: else
  3481  0024A4  0103               	movlb	_M shr (0+8)
  3482  0024A6  AD06               	btfss	_M& (0+255),6,b
  3483  0024A8  D006               	goto	l315
  3484  0024AA  0100               	movlb	_DtCO shr (0+8)
  3485  0024AC  AD7F               	btfss	_DtCO& (0+255),6,b
  3486  0024AE  D003               	goto	l315
  3487  0024B0  0103               	movlb	(_M+2) shr (0+8)
  3488  0024B2  A508               	btfss	(_M+2)& (0+255),2,b
  3489  0024B4  D04D               	goto	L42
  3490                           ;main.c: 1411: {
  3491                           ;main.c: 1413: }
  3492  0024B6                     l315:
  3493                           ;main.c: 1414: else
  3494  0024B6  0103               	movlb	_M shr (0+8)
  3495  0024B8  AF06               	btfss	_M& (0+255),7,b
  3496  0024BA  0012               	return	
  3497  0024BC  0100               	movlb	_DtCW shr (0+8)
  3498  0024BE  AB70               	btfss	_DtCW& (0+255),5,b
  3499  0024C0  0012               	return	
  3500  0024C2  D7DD               	goto	L33
  3501                           ;main.c: 1416: {
  3502                           ;main.c: 1418: M.BL15=0;
  3503                           ;main.c: 1419: SetRozruch();
  3504                           ;main.c: 1420: }
  3505  0024C4                     l318:
  3506                           ;main.c: 1423: }
  3507                           ;main.c: 1425: {
  3508  0024C4  0103               	movlb	(_M+1) shr (0+8)
  3509  0024C6  A507               	btfss	(_M+1)& (0+255),2,b
  3510  0024C8  B083               	btfsc	3971,0,c	;volatile
  3511  0024CA  0012               	return	
  3512  0024CC  0103               	movlb	(_M+6) shr (0+8)
  3513  0024CE  B10C               	btfsc	(_M+6)& (0+255),0,b
  3514  0024D0  0012               	return	
  3515                           ;main.c: 1427: if(!M._ZMKCOCW&&!M._RUSZ_PWR&&!M.
      +                          _RUSZ_PLOMIEN&&!M._RUSZ_STB&&!M._RUSZ_NTC_CO&&!M
      +                          ._RUSZ_NTC_CW)
  3516  0024D2  0103               	movlb	(_M+1) shr (0+8)
  3517  0024D4  A307               	btfss	(_M+1)& (0+255),1,b
  3518  0024D6  BB07               	btfsc	(_M+1)& (0+255),5,b
  3519  0024D8  0012               	return	
  3520  0024DA  BF07               	btfsc	(_M+1)& (0+255),7,b
  3521  0024DC  0012               	return	
  3522  0024DE  0103               	movlb	(_M+3) shr (0+8)
  3523  0024E0  A909               	btfss	(_M+3)& (0+255),4,b
  3524  0024E2  B309               	btfsc	(_M+3)& (0+255),1,b
  3525  0024E4  0012               	return	
  3526  0024E6  B509               	btfsc	(_M+3)& (0+255),2,b
  3527  0024E8  0012               	return	
  3528                           ;main.c: 1428: if(!M._RUSZ_POMPE&&!M._RUSZ_CISN&
      +                          &!M._RUSZ_NCISN)
  3529  0024EA  0103               	movlb	(_M+2) shr (0+8)
  3530  0024EC  A308               	btfss	(_M+2)& (0+255),1,b
  3531  0024EE  BB09               	btfsc	(_M+3)& (0+255),5,b
  3532  0024F0  0012               	return	
  3533  0024F2  0103               	movlb	(_M+3) shr (0+8)
  3534  0024F4  BD09               	btfsc	(_M+3)& (0+255),6,b
  3535  0024F6  0012               	return	
  3536                           ;main.c: 1429: {
  3537  0024F8  0103               	movlb	_M shr (0+8)
  3538  0024FA  B306               	btfsc	_M& (0+255),1,b
  3539  0024FC  D7BD               	goto	L34
  3540                           ;main.c: 1433: {
  3541                           ;main.c: 1435: M.BL15=0;
  3542                           ;main.c: 1436: SetRozruch();
  3543                           ;main.c: 1437: }
  3544                           ;main.c: 1439: else
  3545  0024FE  0103               	movlb	_M shr (0+8)
  3546  002500  A106               	btfss	_M& (0+255),0,b
  3547  002502  D004               	goto	l325
  3548                           ;main.c: 1441: {
  3549  002504  0100               	movlb	_DtCO shr (0+8)
  3550  002506  B37F               	btfsc	_DtCO& (0+255),1,b
  3551  002508  D830               	call	_SetRozruch	;wreg free
  3552                           ;main.c: 1443: }
  3553  00250A  0012               	return	
  3554  00250C                     l325:
  3555                           ;main.c: 1444: else
  3556  00250C  0103               	movlb	_M shr (0+8)
  3557  00250E  A506               	btfss	_M& (0+255),2,b
  3558  002510  D004               	goto	l328
  3559                           ;main.c: 1446: {
  3560  002512  0100               	movlb	_DtCO shr (0+8)
  3561  002514  B77F               	btfsc	_DtCO& (0+255),3,b
  3562  002516  D829               	call	_SetRozruch	;wreg free
  3563                           ;main.c: 1448: }
  3564  002518  0012               	return	
  3565  00251A                     l328:
  3566                           ;main.c: 1449: else
  3567  00251A  0103               	movlb	_M shr (0+8)
  3568  00251C  B706               	btfsc	_M& (0+255),3,b
  3569  00251E  D7AF               	goto	L33
  3570                           ;main.c: 1451: {
  3571                           ;main.c: 1453: {
  3572                           ;main.c: 1455: M.BL15=0;
  3573                           ;main.c: 1456: SetRozruch();
  3574                           ;main.c: 1457: }
  3575                           ;main.c: 1459: else
  3576  002520  0103               	movlb	_M shr (0+8)
  3577  002522  B906               	btfsc	_M& (0+255),4,b
  3578  002524  D7A9               	goto	L34
  3579                           ;main.c: 1461: {
  3580                           ;main.c: 1463: {
  3581                           ;main.c: 1465: M.BL15=0;
  3582                           ;main.c: 1466: SetRozruch();
  3583                           ;main.c: 1467: }
  3584                           ;main.c: 1469: else
  3585  002526  0103               	movlb	_M shr (0+8)
  3586  002528  AB06               	btfss	_M& (0+255),5,b
  3587  00252A  D009               	goto	l337
  3588  00252C  0100               	movlb	_DtCO shr (0+8)
  3589  00252E  A37F               	btfss	_DtCO& (0+255),1,b
  3590  002530  D006               	goto	l337
  3591  002532  0103               	movlb	(_M+2) shr (0+8)
  3592  002534  B508               	btfsc	(_M+2)& (0+255),2,b
  3593  002536  D003               	goto	l337
  3594  002538  0103               	movlb	(_M+2) shr (0+8)
  3595  00253A  A708               	btfss	(_M+2)& (0+255),3,b
  3596                           ;main.c: 1471: {
  3597  00253C  D016               	goto	_SetRozruch	;wreg free
  3598                           ;main.c: 1473: }
  3599  00253E                     l337:
  3600                           ;main.c: 1474: else
  3601  00253E  0103               	movlb	_M shr (0+8)
  3602  002540  AD06               	btfss	_M& (0+255),6,b
  3603  002542  D7B9               	goto	l315
  3604  002544  0100               	movlb	_DtCO shr (0+8)
  3605  002546  AD7F               	btfss	_DtCO& (0+255),6,b
  3606  002548  D7B6               	goto	l315
  3607  00254A  0103               	movlb	(_M+2) shr (0+8)
  3608  00254C  B508               	btfsc	(_M+2)& (0+255),2,b
  3609  00254E  D7B3               	goto	l315
  3610  002550                     L42:
  3611  002550  0103               	movlb	(_M+2) shr (0+8)
  3612  002552  A708               	btfss	(_M+2)& (0+255),3,b
  3613                           ;main.c: 1476: {
  3614  002554  D00A               	goto	_SetRozruch	;wreg free
  3615                           ;main.c: 1478: }
  3616  002556  D7AF               	goto	l315
  3617                           ;main.c: 1479: else
  3618                           ;main.c: 1481: {
  3619                           ;main.c: 1483: M.BL15=0;
  3620                           ;main.c: 1484: SetRozruch();
  3621                           ;main.c: 1485: }
  3622  002558                     l292:
  3623  002558  C1C2  FFE8         	movff	_DtKNF+14,wreg
  3624  00255C  0A00               	xorlw	0
  3625  00255E  E101 D75A          	bz	l294
  3626  002562  0A03               	xorlw	3
  3627  002564  E101 D757          	bz	l294
  3628  002568  D7AD               	goto	l318
  3629                           ;main.c: 1490: }
  3630  00256A                     __end_of_DecRozruch:
  3631                           ;main.c: 1492: void SetRozruch(void)
  3632                           ;main.c: 1493: {
  3633  00256A                     _SetRozruch:
  3634  000000                     
  3635                           ;main.c: 1494: M._BLOKUJ_3M=0;
  3636  00256A  0103               	movlb	(_M+2) shr (0+8)
  3637  00256C  9508               	bcf	(_M+2)& (0+255),2,b
  3638                           ;main.c: 1495: M.BL3=0;
  3639  00256E  6B15               	clrf	(_M+15)& (0+255),b
  3640                           ;main.c: 1496: EndL3();
  3641  002570  EC06  F06A         	call	_EndL3	;wreg free
  3642                           ;main.c: 1497: M._RUSZ_48=0;
  3643  002574  0103               	movlb	(_M+1) shr (0+8)
  3644  002576  9707               	bcf	(_M+1)& (0+255),3,b
  3645                           ;main.c: 1498: M.R48=0;
  3646  002578  6B13               	clrf	(_M+13)& (0+255),b
  3647                           ;main.c: 1499: M._RUSZ_48Z3=0;
  3648  00257A  9907               	bcf	(_M+1)& (0+255),4,b
  3649                           ;main.c: 1500: M.R48Z3=0;
  3650  00257C  6B14               	clrf	(_M+14)& (0+255),b
  3651                           ;main.c: 1501: M._VWYBIEG=0;
  3652  00257E  9D07               	bcf	(_M+1)& (0+255),6,b
  3653                           ;main.c: 1502: M._DE_VNT=0;
  3654  002580  9B0A               	bcf	(_M+4)& (0+255),5,b
  3655                           ;main.c: 1503: M.VWB=0;
  3656  002582  6B1D               	clrf	(_M+23)& (0+255),b
  3657                           ;main.c: 1505: M._KCW_PMP=0;
  3658  002584  990A               	bcf	(_M+4)& (0+255),4,b
  3659                           ;main.c: 1506: M.WYL=0;
  3660  002586  6B17               	clrf	(_M+17)& (0+255),b
  3661                           ;main.c: 1507: M.RPR=0;
  3662  002588  6B18               	clrf	(_M+18)& (0+255),b
  3663                           ;main.c: 1508: M._WYLACZ=0;
  3664  00258A  9107               	bcf	(_M+1)& (0+255),0,b
  3665                           ;main.c: 1509: M._HWB_CW=0;
  3666  00258C  970C               	bcf	(_M+6)& (0+255),3,b
  3667                           ;main.c: 1510: M._RUSZ_POMPE=0;
  3668  00258E  9308               	bcf	(_M+2)& (0+255),1,b
  3669                           ;main.c: 1511: M._ROZRUCH=1;
  3670  002590  8507               	bsf	(_M+1)& (0+255),2,b
  3671                           ;main.c: 1512: M.ROZ=0;
  3672  002592  6B12               	clrf	(_M+12)& (0+255),b
  3673                           ;main.c: 1514: }
  3674  002594  0012               	return	
  3675  002596                     __end_of_SetRozruch:
  3676                           ;main.c: 1518: void DecWylacz(void)
  3677                           ;main.c: 1519: {
  3678  002596                     _DecWylacz:
  3679  000000                     
  3680                           ;main.c: 1520: switch(DtKNF.tpkt)
  3681  002596  D086               	goto	l345
  3682  002598                     l347:
  3683                           ;main.c: 1523: case 3:
  3684  002598  0103               	movlb	(_M+1) shr (0+8)
  3685  00259A  B107               	btfsc	(_M+1)& (0+255),0,b
  3686  00259C  0012               	return	
  3687                           ;main.c: 1526: if(M._ROZRUCH||RD0)
  3688  00259E  B507               	btfsc	(_M+1)& (0+255),2,b
  3689  0025A0  D002               	goto	u6380
  3690  0025A2  A083               	btfss	3971,0,c	;volatile
  3691  0025A4  0012               	return	
  3692  0025A6                     u6380:
  3693                           ;main.c: 1527: {
  3694  0025A6  0103               	movlb	_M shr (0+8)
  3695  0025A8  A306               	btfss	_M& (0+255),1,b
  3696  0025AA  B706               	btfsc	_M& (0+255),3,b
  3697  0025AC  D011               	goto	l350
  3698  0025AE  B106               	btfsc	_M& (0+255),0,b
  3699  0025B0  D00F               	goto	l350
  3700  0025B2  0103               	movlb	_M shr (0+8)
  3701  0025B4  B506               	btfsc	_M& (0+255),2,b
  3702  0025B6  D00C               	goto	l350
  3703  0025B8  0103               	movlb	_M shr (0+8)
  3704  0025BA  B906               	btfsc	_M& (0+255),4,b
  3705  0025BC  D009               	goto	l350
  3706  0025BE  0103               	movlb	_M shr (0+8)
  3707  0025C0  BB06               	btfsc	_M& (0+255),5,b
  3708  0025C2  D006               	goto	l350
  3709  0025C4  0103               	movlb	_M shr (0+8)
  3710  0025C6  BD06               	btfsc	_M& (0+255),6,b
  3711  0025C8  D003               	goto	l350
  3712  0025CA  0103               	movlb	_M shr (0+8)
  3713  0025CC  AF06               	btfss	_M& (0+255),7,b
  3714                           ;main.c: 1529: {
  3715  0025CE  D0DD               	goto	_SetWylacz	;wreg free
  3716                           ;main.c: 1531: return;
  3717  0025D0                     l350:
  3718                           ;main.c: 1532: }
  3719  0025D0  0103               	movlb	(_M+1) shr (0+8)
  3720  0025D2  AB07               	btfss	(_M+1)& (0+255),5,b
  3721  0025D4  BF07               	btfsc	(_M+1)& (0+255),7,b
  3722  0025D6  D0D9               	goto	_SetWylacz
  3723  0025D8  0103               	movlb	(_M+3) shr (0+8)
  3724  0025DA  B909               	btfsc	(_M+3)& (0+255),4,b
  3725  0025DC  D0D6               	goto	_SetWylacz
  3726  0025DE  0103               	movlb	(_M+3) shr (0+8)
  3727  0025E0  B309               	btfsc	(_M+3)& (0+255),1,b
  3728  0025E2  D0D3               	goto	_SetWylacz
  3729  0025E4  0103               	movlb	(_M+3) shr (0+8)
  3730  0025E6  B509               	btfsc	(_M+3)& (0+255),2,b
  3731  0025E8  D0D0               	goto	_SetWylacz
  3732  0025EA  0103               	movlb	(_M+2) shr (0+8)
  3733  0025EC  B308               	btfsc	(_M+2)& (0+255),1,b
  3734  0025EE  D0CD               	goto	_SetWylacz
  3735  0025F0  0103               	movlb	(_M+3) shr (0+8)
  3736  0025F2  BB09               	btfsc	(_M+3)& (0+255),5,b
  3737  0025F4  D0CA               	goto	_SetWylacz
  3738  0025F6  0103               	movlb	(_M+3) shr (0+8)
  3739  0025F8  BD09               	btfsc	(_M+3)& (0+255),6,b
  3740                           ;main.c: 1534: {
  3741  0025FA  D0C7               	goto	_SetWylacz	;wreg free
  3742                           ;main.c: 1536: }
  3743                           ;main.c: 1537: else
  3744  0025FC  0103               	movlb	_M shr (0+8)
  3745  0025FE  A306               	btfss	_M& (0+255),1,b
  3746  002600  D004               	goto	l353
  3747  002602                     L45:
  3748                           ;main.c: 1539: {
  3749  002602  0100               	movlb	_DtCW shr (0+8)
  3750  002604  B570               	btfsc	_DtCW& (0+255),2,b
  3751  002606  D0C1               	goto	_SetWylacz
  3752  002608  D049               	goto	L39
  3753                           ;main.c: 1541: }
  3754  00260A                     l353:
  3755                           ;main.c: 1542: else
  3756  00260A  0103               	movlb	_M shr (0+8)
  3757  00260C  A706               	btfss	_M& (0+255),3,b
  3758  00260E  D004               	goto	l356
  3759                           ;main.c: 1544: {
  3760  002610  0100               	movlb	(_DtCO+1) shr (0+8)
  3761  002612  A380               	btfss	(_DtCO+1)& (0+255),1,b
  3762  002614  D8BA               	call	_SetWylacz	;wreg free
  3763                           ;main.c: 1546: }
  3764  002616  0012               	return	
  3765  002618                     l356:
  3766                           ;main.c: 1547: else
  3767  002618  0103               	movlb	_M shr (0+8)
  3768  00261A  A106               	btfss	_M& (0+255),0,b
  3769  00261C  D006               	goto	l359
  3770                           ;main.c: 1549: {
  3771  00261E  0E13               	movlw	19
  3772  002620  EC50  F063         	call	_RdPrt
  3773  002624  B0D8               	btfsc	status,0,c
  3774  002626  D8B1               	call	_SetWylacz	;wreg free
  3775                           ;main.c: 1551: }
  3776  002628  0012               	return	
  3777  00262A                     l359:
  3778                           ;main.c: 1552: else
  3779  00262A  0103               	movlb	_M shr (0+8)
  3780  00262C  A506               	btfss	_M& (0+255),2,b
  3781  00262E  D004               	goto	l362
  3782                           ;main.c: 1554: {
  3783  002630  0100               	movlb	_DtCO shr (0+8)
  3784  002632  B97F               	btfsc	_DtCO& (0+255),4,b
  3785  002634  D8AA               	call	_SetWylacz	;wreg free
  3786                           ;main.c: 1556: }
  3787  002636  0012               	return	
  3788  002638                     l362:
  3789                           ;main.c: 1557: else
  3790  002638  0103               	movlb	_M shr (0+8)
  3791  00263A  B906               	btfsc	_M& (0+255),4,b
  3792  00263C  D7E2               	goto	L45
  3793                           ;main.c: 1559: {
  3794                           ;main.c: 1561: }
  3795                           ;main.c: 1562: else
  3796  00263E  0103               	movlb	_M shr (0+8)
  3797  002640  AB06               	btfss	_M& (0+255),5,b
  3798  002642  D01A               	goto	l395
  3799  002644  0E13               	movlw	19
  3800  002646  EC50  F063         	call	_RdPrt
  3801  00264A  E206               	bc	u6890
  3802  00264C  0103               	movlb	(_M+2) shr (0+8)
  3803  00264E  B508               	btfsc	(_M+2)& (0+255),2,b
  3804  002650  D003               	goto	u6890
  3805  002652  0103               	movlb	(_M+2) shr (0+8)
  3806  002654  A708               	btfss	(_M+2)& (0+255),3,b
  3807  002656  D010               	goto	l395
  3808  002658                     u6890:
  3809                           ;main.c: 1564: {
  3810  002658  0E13               	movlw	19
  3811  00265A  EC50  F063         	call	_RdPrt
  3812  00265E  E30B               	bnc	l369
  3813  002660  0103               	movlb	(_M+2) shr (0+8)
  3814  002662  B508               	btfsc	(_M+2)& (0+255),2,b
  3815  002664  D092               	goto	_SetWylacz
  3816  002666  0103               	movlb	(_M+2) shr (0+8)
  3817  002668  B708               	btfsc	(_M+2)& (0+255),3,b
  3818  00266A  D08F               	goto	_SetWylacz
  3819                           ;main.c: 1566: {
  3820  00266C  0103               	movlb	(_M+2) shr (0+8)
  3821  00266E  8508               	bsf	(_M+2)& (0+255),2,b
  3822                           ;main.c: 1568: M.BL3=0;
  3823  002670  6B15               	clrf	(_M+15)& (0+255),b
  3824                           ;main.c: 1569: PrintL3();
  3825  002672  ECFE  F069         	call	_PrintL3	;wreg free
  3826  002676                     l369:
  3827                           ;main.c: 1570: }
  3828  002676  D089               	goto	_SetWylacz	;wreg free
  3829                           ;main.c: 1572: }
  3830                           ;main.c: 1633: }
  3831                           ;main.c: 1635: }
  3832  002678                     l395:
  3833                           ;main.c: 1636: else
  3834  002678  0103               	movlb	_M shr (0+8)
  3835  00267A  AD06               	btfss	_M& (0+255),6,b
  3836  00267C  D009               	goto	l398
  3837  00267E  0100               	movlb	_DtCO shr (0+8)
  3838  002680  BF7F               	btfsc	_DtCO& (0+255),7,b
  3839  002682  D083               	goto	_SetWylacz
  3840  002684  0103               	movlb	(_M+2) shr (0+8)
  3841  002686  B508               	btfsc	(_M+2)& (0+255),2,b
  3842  002688  D080               	goto	_SetWylacz
  3843  00268A  0103               	movlb	(_M+2) shr (0+8)
  3844  00268C  B708               	btfsc	(_M+2)& (0+255),3,b
  3845                           ;main.c: 1638: {
  3846  00268E  D07D               	goto	_SetWylacz	;wreg free
  3847                           ;main.c: 1640: }
  3848  002690                     l398:
  3849                           ;main.c: 1641: else
  3850  002690  0103               	movlb	_M shr (0+8)
  3851  002692  AF06               	btfss	_M& (0+255),7,b
  3852  002694  0012               	return	
  3853  002696  0100               	movlb	_DtCW shr (0+8)
  3854  002698  BD70               	btfsc	_DtCW& (0+255),6,b
  3855  00269A  D077               	goto	_SetWylacz
  3856  00269C                     L39:
  3857  00269C  0100               	movlb	(_DtCO+1) shr (0+8)
  3858  00269E  B380               	btfsc	(_DtCO+1)& (0+255),1,b
  3859  0026A0  0012               	return	
  3860                           ;main.c: 1643: {
  3861  0026A2  D073               	goto	_SetWylacz	;wreg free
  3862                           ;main.c: 1645: }
  3863  0026A4                     l345:
  3864  0026A4  C1C2  FFE8         	movff	_DtKNF+14,wreg
  3865  0026A8  0A00               	xorlw	0
  3866  0026AA  E101 D775          	bz	l347
  3867  0026AE  0A03               	xorlw	3
  3868  0026B0  E101 D772          	bz	l347
  3869                           ;main.c: 1585: }
  3870                           ;main.c: 1587: {
  3871  0026B4  0103               	movlb	(_M+1) shr (0+8)
  3872  0026B6  B107               	btfsc	(_M+1)& (0+255),0,b
  3873                           ;main.c: 1650: }
  3874  0026B8  0012               	return	
  3875                           ;main.c: 1573: else
  3876                           ;main.c: 1575: {
  3877                           ;main.c: 1577: }
  3878                           ;main.c: 1578: else
  3879                           ;main.c: 1580: {
  3880                           ;main.c: 1582: }
  3881                           ;main.c: 1589: if(M._ROZRUCH||RD0)
  3882  0026BA  B507               	btfsc	(_M+1)& (0+255),2,b
  3883  0026BC  D002               	goto	u7100
  3884  0026BE  A083               	btfss	3971,0,c	;volatile
  3885  0026C0  0012               	return	
  3886  0026C2                     u7100:
  3887                           ;main.c: 1590: {
  3888  0026C2  0103               	movlb	_M shr (0+8)
  3889  0026C4  A306               	btfss	_M& (0+255),1,b
  3890  0026C6  B706               	btfsc	_M& (0+255),3,b
  3891  0026C8  D011               	goto	l377
  3892  0026CA  B106               	btfsc	_M& (0+255),0,b
  3893  0026CC  D00F               	goto	l377
  3894  0026CE  0103               	movlb	_M shr (0+8)
  3895  0026D0  B506               	btfsc	_M& (0+255),2,b
  3896  0026D2  D00C               	goto	l377
  3897  0026D4  0103               	movlb	_M shr (0+8)
  3898  0026D6  B906               	btfsc	_M& (0+255),4,b
  3899  0026D8  D009               	goto	l377
  3900  0026DA  0103               	movlb	_M shr (0+8)
  3901  0026DC  BB06               	btfsc	_M& (0+255),5,b
  3902  0026DE  D006               	goto	l377
  3903  0026E0  0103               	movlb	_M shr (0+8)
  3904  0026E2  BD06               	btfsc	_M& (0+255),6,b
  3905  0026E4  D003               	goto	l377
  3906  0026E6  0103               	movlb	_M shr (0+8)
  3907  0026E8  AF06               	btfss	_M& (0+255),7,b
  3908                           ;main.c: 1592: {
  3909  0026EA  D04F               	goto	_SetWylacz	;wreg free
  3910                           ;main.c: 1594: return;
  3911  0026EC                     l377:
  3912                           ;main.c: 1595: }
  3913  0026EC  0103               	movlb	(_M+1) shr (0+8)
  3914  0026EE  AB07               	btfss	(_M+1)& (0+255),5,b
  3915  0026F0  BF07               	btfsc	(_M+1)& (0+255),7,b
  3916  0026F2  D04B               	goto	_SetWylacz
  3917  0026F4  0103               	movlb	(_M+3) shr (0+8)
  3918  0026F6  B909               	btfsc	(_M+3)& (0+255),4,b
  3919  0026F8  D048               	goto	_SetWylacz
  3920  0026FA  0103               	movlb	(_M+3) shr (0+8)
  3921  0026FC  B309               	btfsc	(_M+3)& (0+255),1,b
  3922  0026FE  D045               	goto	_SetWylacz
  3923  002700  0103               	movlb	(_M+3) shr (0+8)
  3924  002702  B509               	btfsc	(_M+3)& (0+255),2,b
  3925  002704  D042               	goto	_SetWylacz
  3926  002706  0103               	movlb	(_M+2) shr (0+8)
  3927  002708  B308               	btfsc	(_M+2)& (0+255),1,b
  3928  00270A  D03F               	goto	_SetWylacz
  3929  00270C  0103               	movlb	(_M+3) shr (0+8)
  3930  00270E  BB09               	btfsc	(_M+3)& (0+255),5,b
  3931  002710  D03C               	goto	_SetWylacz
  3932  002712  0103               	movlb	(_M+3) shr (0+8)
  3933  002714  BD09               	btfsc	(_M+3)& (0+255),6,b
  3934                           ;main.c: 1597: {
  3935  002716  D039               	goto	_SetWylacz	;wreg free
  3936                           ;main.c: 1599: }
  3937                           ;main.c: 1600: else
  3938  002718  0103               	movlb	_M shr (0+8)
  3939  00271A  B306               	btfsc	_M& (0+255),1,b
  3940  00271C  D772               	goto	L45
  3941                           ;main.c: 1602: {
  3942                           ;main.c: 1604: }
  3943                           ;main.c: 1605: else
  3944  00271E  0103               	movlb	_M shr (0+8)
  3945  002720  A706               	btfss	_M& (0+255),3,b
  3946  002722  D004               	goto	l383
  3947                           ;main.c: 1607: {
  3948  002724  0100               	movlb	(_DtCO+1) shr (0+8)
  3949  002726  A380               	btfss	(_DtCO+1)& (0+255),1,b
  3950  002728  D830               	call	_SetWylacz	;wreg free
  3951                           ;main.c: 1609: }
  3952  00272A  0012               	return	
  3953  00272C                     l383:
  3954                           ;main.c: 1610: else
  3955  00272C  0103               	movlb	_M shr (0+8)
  3956  00272E  A106               	btfss	_M& (0+255),0,b
  3957  002730  D006               	goto	l386
  3958                           ;main.c: 1612: {
  3959  002732  0E13               	movlw	19
  3960  002734  EC50  F063         	call	_RdPrt
  3961  002738  B0D8               	btfsc	status,0,c
  3962  00273A  D827               	call	_SetWylacz	;wreg free
  3963                           ;main.c: 1614: }
  3964  00273C  0012               	return	
  3965  00273E                     l386:
  3966                           ;main.c: 1615: else
  3967  00273E  0103               	movlb	_M shr (0+8)
  3968  002740  A506               	btfss	_M& (0+255),2,b
  3969  002742  D004               	goto	l389
  3970                           ;main.c: 1617: {
  3971  002744  0100               	movlb	_DtCO shr (0+8)
  3972  002746  B97F               	btfsc	_DtCO& (0+255),4,b
  3973  002748  D820               	call	_SetWylacz	;wreg free
  3974                           ;main.c: 1619: }
  3975  00274A  0012               	return	
  3976  00274C                     l389:
  3977                           ;main.c: 1620: else
  3978  00274C  0103               	movlb	_M shr (0+8)
  3979  00274E  B906               	btfsc	_M& (0+255),4,b
  3980  002750  D758               	goto	L45
  3981                           ;main.c: 1622: {
  3982                           ;main.c: 1624: }
  3983                           ;main.c: 1625: else
  3984  002752  0103               	movlb	_M shr (0+8)
  3985  002754  AB06               	btfss	_M& (0+255),5,b
  3986  002756  D790               	goto	l395
  3987  002758  0E13               	movlw	19
  3988  00275A  EC50  F063         	call	_RdPrt
  3989  00275E  E206               	bc	u7610
  3990  002760  0103               	movlb	(_M+2) shr (0+8)
  3991  002762  B508               	btfsc	(_M+2)& (0+255),2,b
  3992  002764  D003               	goto	u7610
  3993  002766  0103               	movlb	(_M+2) shr (0+8)
  3994  002768  A708               	btfss	(_M+2)& (0+255),3,b
  3995  00276A  D786               	goto	l395
  3996  00276C                     u7610:
  3997                           ;main.c: 1627: {
  3998  00276C  0E13               	movlw	19
  3999  00276E  EC50  F063         	call	_RdPrt
  4000  002772  E30B               	bnc	l396
  4001  002774  0103               	movlb	(_M+2) shr (0+8)
  4002  002776  B508               	btfsc	(_M+2)& (0+255),2,b
  4003  002778  D008               	goto	_SetWylacz
  4004  00277A  0103               	movlb	(_M+2) shr (0+8)
  4005  00277C  B708               	btfsc	(_M+2)& (0+255),3,b
  4006  00277E  D005               	goto	_SetWylacz
  4007                           ;main.c: 1629: {
  4008  002780  0103               	movlb	(_M+2) shr (0+8)
  4009  002782  8508               	bsf	(_M+2)& (0+255),2,b
  4010                           ;main.c: 1631: M.BL3=0;
  4011  002784  6B15               	clrf	(_M+15)& (0+255),b
  4012                           ;main.c: 1632: PrintL3();
  4013  002786  ECFE  F069         	call	_PrintL3	;wreg free
  4014  00278A                     l396:
  4015  00278A                     __end_of_DecWylacz:
  4016                           ;main.c: 1652: void SetWylacz(void)
  4017                           ;main.c: 1653: {
  4018  00278A                     _SetWylacz:
  4019  000000                     
  4020                           ;main.c: 1654: GrzejOFF();
  4021  00278A  D8C7               	call	_GrzejOFF	;wreg free
  4022                           ;main.c: 1657: switch(DtKNF.tpkt)
  4023  00278C  D006               	goto	l403
  4024  00278E                     l405:
  4025                           ;main.c: 1660: case 3:
  4026  00278E  B283               	btfsc	3971,1,c	;volatile
  4027  002790  D00C               	goto	l402
  4028  002792                     u7800:
  4029                           ;main.c: 1672: {
  4030  002792  0103               	movlb	(_M+2) shr (0+8)
  4031  002794  8708               	bsf	(_M+2)& (0+255),3,b
  4032                           ;main.c: 1674: M.BL15=0;
  4033  002796  6B16               	clrf	(_M+16)& (0+255),b
  4034                           ;main.c: 1675: }
  4035  002798  D008               	goto	l402
  4036  00279A                     l403:
  4037  00279A  C1C2  FFE8         	movff	_DtKNF+14,wreg
  4038  00279E  0A00               	xorlw	0
  4039  0027A0  E0F6               	bz	l405
  4040  0027A2  0A03               	xorlw	3
  4041  0027A4  E0F4               	bz	l405
  4042                           ;main.c: 1663: {
  4043                           ;main.c: 1665: M.BL15=0;
  4044                           ;main.c: 1666: }
  4045                           ;main.c: 1668: }
  4046                           ;main.c: 1670: {
  4047  0027A6  A283               	btfss	3971,1,c	;volatile
  4048  0027A8  D7F4               	goto	u7800
  4049  0027AA                     l402:
  4050                           ;main.c: 1680: M._WYLACZ=1;
  4051  0027AA  0103               	movlb	(_M+1) shr (0+8)
  4052  0027AC  8107               	bsf	(_M+1)& (0+255),0,b
  4053                           ;main.c: 1681: if(RD3) M._VWYBIEG=1;
  4054  0027AE  B683               	btfsc	3971,3,c	;volatile
  4055  0027B0  8D07               	bsf	(_M+1)& (0+255),6,b
  4056                           ;main.c: 1682: M.ROZ=0;
  4057  0027B2  0103               	movlb	(_M+12) shr (0+8)
  4058  0027B4  6B12               	clrf	(_M+12)& (0+255),b
  4059                           ;main.c: 1683: M.MNM=0;
  4060  0027B6  6B1B               	clrf	(_M+21)& (0+255),b
  4061                           ;main.c: 1684: M._ROZRUCH=0;
  4062  0027B8  9507               	bcf	(_M+1)& (0+255),2,b
  4063                           ;main.c: 1685: M._RUN_MNMOD=0;
  4064  0027BA  970A               	bcf	(_M+4)& (0+255),3,b
  4065                           ;main.c: 1688: DtCO._on_DZ_CO=0;
  4066  0027BC  0100               	movlb	_DtCO shr (0+8)
  4067  0027BE  9B7F               	bcf	_DtCO& (0+255),5,b
  4068                           ;main.c: 1689: SetPrt(9,0);
  4069  0027C0  0100               	movlb	__Lparam shr (0+8)
  4070  0027C2  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  4071  0027C4  0E09               	movlw	9
  4072  0027C6  EC61  F063         	call	_SetPrt
  4073                           ;main.c: 1690: DtCW._on_DZ_CW=0;
  4074  0027CA  0100               	movlb	_DtCW shr (0+8)
  4075  0027CC  9970               	bcf	_DtCW& (0+255),4,b
  4076                           ;main.c: 1691: SetPrt(10,0);
  4077  0027CE  0100               	movlb	__Lparam shr (0+8)
  4078  0027D0  6BA6               	clrf	?_SetPrt^(__Lparam& (0+65280)),b
  4079  0027D2  0E0A               	movlw	10
  4080  0027D4  EF61  F063         	goto	_SetPrt
  4081                           ;main.c: 1692: }
  4082  0027D8                     __end_of_SetWylacz:
  4083                           ;main.c: 1695: void FunkcjaSerwisowa(void)
  4084                           ;main.c: 1696: {
  4085  0027D8                     _FunkcjaSerwisowa:
  4086  000000                     
  4087                           ;main.c: 1697: if(M._AKTYWNE_KNF)
  4088  0027D8  0103               	movlb	(_M+3) shr (0+8)
  4089  0027DA  A109               	btfss	(_M+3)& (0+255),0,b
  4090  0027DC  D02D               	goto	l414
  4091                           ;main.c: 1698: {
  4092  0027DE  6B1E               	clrf	(_M+24)& (0+255),b
  4093                           ;main.c: 1700: M._AKTYWNE_SRW=0;
  4094  0027E0  9B08               	bcf	(_M+2)& (0+255),5,b
  4095                           ;main.c: 1701: }
  4096  0027E2  0012               	return	
  4097                           ;main.c: 1702: else
  4098  0027E4                     l415:
  4099                           ;main.c: 1704: {
  4100                           ;main.c: 1706: {
  4101  0027E4  0100               	movlb	(_PFN+1) shr (0+8)
  4102  0027E6  516C               	movf	(_PFN+1)& (0+255),w,b
  4103  0027E8  0A03               	xorlw	3
  4104  0027EA  116D               	iorwf	(_PFN+2)& (0+255),w,b
  4105  0027EC  A4D8               	btfss	status,2,c
  4106  0027EE  0012               	return	
  4107  0027F0  0E01               	movlw	1
  4108  0027F2  0100               	movlb	__Lparam shr (0+8)
  4109  0027F4  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
  4110  0027F6  C365  FFE8         	movff	_RSDT1+63,wreg
  4111  0027FA  EC24  F06A         	call	_GetBit2
  4112  0027FE  A0D8               	btfss	status,0,c
  4113  002800  0012               	return	
  4114                           ;main.c: 1708: {
  4115  002802  0E01               	movlw	1
  4116  002804  CFE8 F31E          	movff	wreg,_M+24
  4117                           ;main.c: 1710: M._AKTYWNE_SRW=1;
  4118  002808  0103               	movlb	(_M+2) shr (0+8)
  4119  00280A  8B08               	bsf	(_M+2)& (0+255),5,b
  4120                           ;main.c: 1711: StartRTM(1);
  4121  00280C  EFF3  F063         	goto	_StartRTM
  4122                           ;main.c: 1712: }
  4123  002810                     l417:
  4124                           ;main.c: 1714: }
  4125                           ;main.c: 1716: {
  4126  002810  0100               	movlb	(_PFN+1) shr (0+8)
  4127  002812  516C               	movf	(_PFN+1)& (0+255),w,b
  4128  002814  0A03               	xorlw	3
  4129  002816  116D               	iorwf	(_PFN+2)& (0+255),w,b
  4130  002818  E10B               	bnz	l418
  4131  00281A  0100               	movlb	_PFN shr (0+8)
  4132  00281C  BB6B               	btfsc	_PFN& (0+255),5,b
  4133  00281E  D008               	goto	l418
  4134  002820  0E01               	movlw	1
  4135  002822  EC0B  F064         	call	_RTM
  4136  002826  6E00               	movwf	btemp,c
  4137  002828  0E3C               	movlw	60
  4138  00282A  5C00               	subwf	btemp,w,c
  4139  00282C  A0D8               	btfss	status,0,c
  4140  00282E  0012               	return	
  4141  002830                     l418:
  4142                           ;main.c: 1719: else
  4143  002830  0103               	movlb	(_M+24) shr (0+8)
  4144  002832  6B1E               	clrf	(_M+24)& (0+255),b
  4145                           ;main.c: 1722: M._AKTYWNE_SRW=0;
  4146  002834  9B08               	bcf	(_M+2)& (0+255),5,b
  4147                           ;main.c: 1723: }
  4148  002836  0012               	return	
  4149  002838                     l414:
  4150  002838  C31E  FFE8         	movff	_M+24,wreg
  4151  00283C  0A00               	xorlw	0
  4152  00283E  E0D2               	bz	l415
  4153  002840  0A01               	xorlw	1
  4154  002842  E0E6               	bz	l417
  4155  002844  0012               	return	
  4156                           ;main.c: 1727: }
  4157  002846                     __end_of_FunkcjaSerwisowa:
  4158                           ;main.c: 1732: void BlokadaL3(void)
  4159                           ;main.c: 1733: {
  4160  002846                     _BlokadaL3:
  4161  000000                     
  4162                           ;main.c: 1734: switch(M.BL3)
  4163  002846  D02C               	goto	l422
  4164  002848                     l423:
  4165                           ;main.c: 1735: {
  4166                           ;main.c: 1737: {
  4167  002848  0E01               	movlw	1
  4168  00284A  CFE8 F315          	movff	wreg,_M+15
  4169                           ;main.c: 1739: StartRTM(2);
  4170  00284E  0E02               	movlw	2
  4171  002850  ECF3  F063         	call	_StartRTM
  4172  002854                     l424:
  4173                           ;main.c: 1740: }
  4174                           ;main.c: 1742: {
  4175  002854  ECFE  F069         	call	_PrintL3	;wreg free
  4176                           ;main.c: 1744: if((PFN.poz!=3&&!M._ZMKCOCW)||M._
      +                          pob_CW||(DtKNF.tpkt==0&&DtCW._wpz_CW))
  4177  002858  0100               	movlb	(_PFN+1) shr (0+8)
  4178  00285A  516C               	movf	(_PFN+1)& (0+255),w,b
  4179  00285C  0A03               	xorlw	3
  4180  00285E  116D               	iorwf	(_PFN+2)& (0+255),w,b
  4181  002860  E003               	bz	u7931
  4182  002862  0103               	movlb	(_M+1) shr (0+8)
  4183  002864  A307               	btfss	(_M+1)& (0+255),1,b
  4184  002866  D00A               	goto	u7990
  4185  002868                     u7931:
  4186  002868  0103               	movlb	_M shr (0+8)
  4187  00286A  B906               	btfsc	_M& (0+255),4,b
  4188  00286C  D007               	goto	u7990
  4189  00286E  EE01  F0C2         	lfsr	0,_DtKNF+14
  4190  002872  50EF               	movf	indf0,w,c
  4191  002874  E108               	bnz	l425
  4192  002876  0100               	movlb	_DtCW shr (0+8)
  4193  002878  A770               	btfss	_DtCW& (0+255),3,b
  4194  00287A  D005               	goto	l425
  4195  00287C                     u7990:
  4196                           ;main.c: 1745: {
  4197  00287C  0103               	movlb	(_M+2) shr (0+8)
  4198  00287E  9508               	bcf	(_M+2)& (0+255),2,b
  4199                           ;main.c: 1747: M.BL3=0;
  4200  002880  6B15               	clrf	(_M+15)& (0+255),b
  4201                           ;main.c: 1748: EndL3();
  4202  002882  EC06  F06A         	call	_EndL3	;wreg free
  4203  002886                     l425:
  4204                           ;main.c: 1749: }
  4205  002886  0E02               	movlw	2
  4206  002888  EC0B  F064         	call	_RTM
  4207  00288C  6E00               	movwf	btemp,c
  4208  00288E  0E03               	movlw	3
  4209  002890  5C00               	subwf	btemp,w,c
  4210  002892  A0D8               	btfss	status,0,c
  4211  002894  0012               	return	
  4212                           ;main.c: 1751: M._BLOKUJ_3M=0;
  4213  002896  0103               	movlb	(_M+2) shr (0+8)
  4214  002898  9508               	bcf	(_M+2)& (0+255),2,b
  4215                           ;main.c: 1752: M.BL3=0;
  4216  00289A  6B15               	clrf	(_M+15)& (0+255),b
  4217                           ;main.c: 1753: EndL3();
  4218  00289C  EF06  F06A         	goto	_EndL3	;wreg free
  4219                           ;main.c: 1754: }
  4220  0028A0                     l422:
  4221  0028A0  C315  FFE8         	movff	_M+15,wreg
  4222  0028A4  0A00               	xorlw	0
  4223  0028A6  E0D0               	bz	l423
  4224  0028A8  0A01               	xorlw	1
  4225  0028AA  E0D4               	bz	l424
  4226  0028AC  0012               	return	
  4227                           ;main.c: 1756: }
  4228  0028AE                     __end_of_BlokadaL3:
  4229                           ;main.c: 1760: void Blokada15S(void)
  4230                           ;main.c: 1761: {
  4231  0028AE                     _Blokada15S:
  4232  000000                     
  4233                           ;main.c: 1762: switch(M.BL15)
  4234  0028AE  D023               	goto	l429
  4235  0028B0                     l430:
  4236                           ;main.c: 1763: {
  4237                           ;main.c: 1765: {
  4238  0028B0  0E01               	movlw	1
  4239  0028B2  CFE8 F316          	movff	wreg,_M+16
  4240                           ;main.c: 1767: StartRTdS(4);
  4241  0028B6  0E04               	movlw	4
  4242  0028B8  ECB7  F063         	call	_StartRTdS
  4243  0028BC                     l431:
  4244                           ;main.c: 1768: }
  4245                           ;main.c: 1770: {
  4246  0028BC  0E04               	movlw	4
  4247  0028BE  ECC9  F063         	call	_RTdS
  4248  0028C2  6E00               	movwf	btemp,c
  4249  0028C4  0E02               	movlw	2
  4250  0028C6  5C00               	subwf	btemp,w,c
  4251  0028C8  E308               	bnc	l432
  4252  0028CA  0100               	movlb	(_PFN+1) shr (0+8)
  4253  0028CC  516C               	movf	(_PFN+1)& (0+255),w,b
  4254  0028CE  0A03               	xorlw	3
  4255  0028D0  116D               	iorwf	(_PFN+2)& (0+255),w,b
  4256  0028D2  E003               	bz	l432
  4257                           ;main.c: 1772: {
  4258  0028D4  0103               	movlb	(_M+2) shr (0+8)
  4259  0028D6  9708               	bcf	(_M+2)& (0+255),3,b
  4260                           ;main.c: 1774: M.BL15=0;
  4261  0028D8  6B16               	clrf	(_M+16)& (0+255),b
  4262  0028DA                     l432:
  4263                           ;main.c: 1775: }
  4264  0028DA  0E04               	movlw	4
  4265  0028DC  ECC9  F063         	call	_RTdS
  4266  0028E0  6E00               	movwf	btemp,c
  4267  0028E2  0E96               	movlw	150
  4268  0028E4  5C00               	subwf	btemp,w,c
  4269  0028E6  E203               	bc	l433
  4270  0028E8  0103               	movlb	_M shr (0+8)
  4271  0028EA  A506               	btfss	_M& (0+255),2,b
  4272  0028EC  0012               	return	
  4273  0028EE                     l433:
  4274                           ;main.c: 1777: M._BLOKUJ_15S=0;
  4275  0028EE  0103               	movlb	(_M+2) shr (0+8)
  4276  0028F0  9708               	bcf	(_M+2)& (0+255),3,b
  4277                           ;main.c: 1778: M.BL15=0;
  4278  0028F2  6B16               	clrf	(_M+16)& (0+255),b
  4279                           ;main.c: 1779: }
  4280  0028F4  0012               	return	
  4281  0028F6                     l429:
  4282  0028F6  C316  FFE8         	movff	_M+16,wreg
  4283  0028FA  0A00               	xorlw	0
  4284  0028FC  E0D9               	bz	l430
  4285  0028FE  0A01               	xorlw	1
  4286  002900  E0DD               	bz	l431
  4287  002902  0012               	return	
  4288                           ;main.c: 1781: }
  4289  002904                     __end_of_Blokada15S:
  4290                           ;main.c: 1785: void GrzejON(void)
  4291                           ;main.c: 1786: {
  4292  002904                     _GrzejON:
  4293  000000                     
  4294                           ;main.c: 1787: RD0=1;
  4295  002904  8083               	bsf	3971,0,c	;volatile
  4296                           ;main.c: 1788: asm("nop");
  4297  002906  F000               	nop		;#
  4298                           ;main.c: 1789: asm("nop");
  4299  002908  F000               	nop		;#
  4300                           ;main.c: 1790: asm("nop");
  4301  00290A  F000               	nop		;#
  4302                           ;main.c: 1791: asm("nop");
  4303  00290C  F000               	nop		;#
  4304                           ;main.c: 1792: asm("nop");
  4305  00290E  F000               	nop		;#
  4306                           ;main.c: 1793: asm("nop");
  4307  002910  F000               	nop		;#
  4308                           ;main.c: 1794: asm("nop");
  4309  002912  F000               	nop		;#
  4310                           ;main.c: 1795: asm("nop");
  4311  002914  F000               	nop		;#
  4312                           ;main.c: 1796: RD3=1;
  4313  002916  8683               	bsf	3971,3,c	;volatile
  4314                           ;main.c: 1797: }
  4315  002918  0012               	return	
  4316  00291A                     __end_of_GrzejON:
  4317                           ;main.c: 1801: void GrzejOFF(void)
  4318                           ;main.c: 1802: {
  4319  00291A                     _GrzejOFF:
  4320  000000                     
  4321                           ;main.c: 1803: RD0=0;
  4322  00291A  9083               	bcf	3971,0,c	;volatile
  4323                           ;main.c: 1804: }
  4324  00291C  0012               	return	
  4325  00291E                     __end_of_GrzejOFF:
  4326                           ;main.c: 1809: void Rozruch(void)
  4327                           ;main.c: 1810: {
  4328  00291E                     _Rozruch:
  4329  000000                     
  4330                           ;main.c: 1811: static unsigned char tim;
  4331  00291E  0E0E               	movlw	14
  4332  002920  ECD5  F063         	call	_StartRTS
  4333                           ;main.c: 1814: StartRTM(5);
  4334  002924  0E05               	movlw	5
  4335  002926  ECF3  F063         	call	_StartRTM
  4336                           ;main.c: 1815: switch(M.ROZ)
  4337  00292A  D0E2               	goto	l438
  4338  00292C                     l439:
  4339                           ;main.c: 1816: {
  4340                           ;main.c: 1819: {
  4341  00292C  EE01  F0C9         	lfsr	0,_DtKNF+21
  4342  002930  50EF               	movf	indf0,w,c
  4343  002932  E103               	bnz	l440
  4344                           ;main.c: 1821: {
  4345  002934  0103               	movlb	(_M+1) shr (0+8)
  4346  002936  B307               	btfsc	(_M+1)& (0+255),1,b
  4347  002938  0012               	return	
  4348  00293A                     l440:
  4349                           ;main.c: 1823: }
  4350  00293A  0E01               	movlw	1
  4351  00293C  CFE8 F312          	movff	wreg,_M+12
  4352                           ;main.c: 1825: StartRTS(2);
  4353  002940  0E02               	movlw	2
  4354  002942  ECD5  F063         	call	_StartRTS
  4355  002946                     l442:
  4356                           ;main.c: 1826: }
  4357                           ;main.c: 1829: {
  4358  002946  EE01  F0C9         	lfsr	0,_DtKNF+21
  4359  00294A  50EF               	movf	indf0,w,c
  4360                           ;main.c: 1831: {
  4361  00294C  0E02               	movlw	2
  4362  00294E  E123               	bnz	L21
  4363  002950  ECE7  F063         	call	_RTS
  4364  002954  6E00               	movwf	btemp,c
  4365  002956  0E01               	movlw	1
  4366  002958  5C00               	subwf	btemp,w,c
  4367  00295A  A0D8               	btfss	status,0,c
  4368  00295C  0012               	return	
  4369                           ;main.c: 1833: RD2=0;
  4370  00295E  9483               	bcf	3971,2,c	;volatile
  4371                           ;main.c: 1834: if(!RdPrt(1))
  4372  002960  0E01               	movlw	1
  4373  002962  EC50  F063         	call	_RdPrt
  4374                           ;main.c: 1835: {
  4375  002966  0E02               	movlw	2
  4376  002968  E204               	bc	L22
  4377  00296A  CFE8 F312          	movff	wreg,_M+12
  4378                           ;main.c: 1837: StartRTS(2);
  4379  00296E  EFD5  F063         	goto	_StartRTS
  4380                           ;main.c: 1838: return;
  4381                           ;main.c: 1839: }
  4382  002972                     L22:
  4383  002972  ECE7  F063         	call	_RTS
  4384  002976  6E00               	movwf	btemp,c
  4385  002978  0E05               	movlw	5
  4386  00297A  5C00               	subwf	btemp,w,c
  4387  00297C  A0D8               	btfss	status,0,c
  4388  00297E  0012               	return	
  4389                           ;main.c: 1841: M.ERR_BTY=0x05;
  4390  002980  0E05               	movlw	5
  4391  002982  CFE8 F311          	movff	wreg,_M+11
  4392                           ;main.c: 1842: PrintErr(0x05,1);
  4393  002986  0E01               	movlw	1
  4394  002988  0100               	movlb	__Lparam shr (0+8)
  4395  00298A  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  4396  00298C  0E05               	movlw	5
  4397  00298E  ECA1  F069         	call	_PrintErr
  4398                           ;main.c: 1843: ErrPTG();
  4399  002992  EF73  F01A         	goto	_ErrPTG	;wreg free
  4400                           ;main.c: 1844: return;
  4401                           ;main.c: 1845: }
  4402  002996                     L21:
  4403  002996  CFE8 F312          	movff	wreg,_M+12
  4404                           ;main.c: 1847: StartRTS(2);
  4405  00299A  0E02               	movlw	2
  4406  00299C  ECD5  F063         	call	_StartRTS
  4407  0029A0                     l447:
  4408                           ;main.c: 1848: }
  4409                           ;main.c: 1851: {
  4410  0029A0  D005               	goto	l449
  4411  0029A2                     l451:
  4412                           ;main.c: 1855: case 3:
  4413  0029A2  0103               	movlb	(_M+1) shr (0+8)
  4414  0029A4  B307               	btfsc	(_M+1)& (0+255),1,b
  4415  0029A6  D00B               	goto	l448
  4416  0029A8                     u8140:
  4417  0029A8  8483               	bsf	3971,2,c	;volatile
  4418                           ;main.c: 1863: break;
  4419  0029AA  D009               	goto	l448
  4420  0029AC                     l449:
  4421  0029AC  C1C2  FFE8         	movff	_DtKNF+14,wreg
  4422  0029B0  0A00               	xorlw	0
  4423  0029B2  E0F7               	bz	l451
  4424  0029B4  0A03               	xorlw	3
  4425  0029B6  E0F5               	bz	l451
  4426                           ;main.c: 1858: break;
  4427                           ;main.c: 1859: }
  4428                           ;main.c: 1861: {
  4429  0029B8  0103               	movlb	(_M+1) shr (0+8)
  4430  0029BA  A307               	btfss	(_M+1)& (0+255),1,b
  4431  0029BC  D7F5               	goto	u8140
  4432  0029BE                     l448:
  4433                           ;main.c: 1867: M.ROZ=3;
  4434  0029BE  0E03               	movlw	3
  4435  0029C0  CFE8 F312          	movff	wreg,_M+12
  4436                           ;main.c: 1868: StartRTS(2);
  4437  0029C4  0E02               	movlw	2
  4438  0029C6  ECD5  F063         	call	_StartRTS
  4439  0029CA                     l455:
  4440                           ;main.c: 1869: }
  4441                           ;main.c: 1872: {
  4442  0029CA  0E05               	movlw	5
  4443  0029CC  EC50  F063         	call	_RdPrt
  4444  0029D0  B0D8               	btfsc	status,0,c
  4445  0029D2  B083               	btfsc	3971,0,c	;volatile
  4446  0029D4  D013               	goto	l456
  4447                           ;main.c: 1874: {
  4448  0029D6  0E02               	movlw	2
  4449  0029D8  ECE7  F063         	call	_RTS
  4450  0029DC  6E00               	movwf	btemp,c
  4451  0029DE  0E05               	movlw	5
  4452  0029E0  5C00               	subwf	btemp,w,c
  4453  0029E2  A0D8               	btfss	status,0,c
  4454  0029E4  0012               	return	
  4455                           ;main.c: 1876: M.ERR_BTY=0x06;
  4456  0029E6  0E06               	movlw	6
  4457  0029E8  CFE8 F311          	movff	wreg,_M+11
  4458                           ;main.c: 1877: PrintErr(0x06,1);
  4459  0029EC  0E01               	movlw	1
  4460  0029EE  0100               	movlb	__Lparam shr (0+8)
  4461  0029F0  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  4462  0029F2  0E06               	movlw	6
  4463  0029F4  ECA1  F069         	call	_PrintErr
  4464                           ;main.c: 1878: ErrPTG();
  4465  0029F8  EC73  F01A         	call	_ErrPTG	;wreg free
  4466  0029FC                     l456:
  4467                           ;main.c: 1879: }
  4468  0029FC  DF83               	call	_GrzejON	;wreg free
  4469                           ;main.c: 1881: M.ROZ=4;
  4470  0029FE  0E04               	movlw	4
  4471  002A00  CFE8 F312          	movff	wreg,_M+12
  4472  002A04                     l458:
  4473                           ;main.c: 1882: }
  4474                           ;main.c: 1885: {
  4475  002A04  0E0A               	movlw	10
  4476  002A06  ECB7  F063         	call	_StartRTdS
  4477                           ;main.c: 1887: M.ROZ=5;
  4478  002A0A  0E05               	movlw	5
  4479  002A0C  CFE8 F312          	movff	wreg,_M+12
  4480  002A10                     l459:
  4481                           ;main.c: 1888: }
  4482                           ;main.c: 1891: {
  4483  002A10  C1CC  FFE8         	movff	_DtKNF+24,wreg
  4484  002A14  ECA1  F057         	call	_CalkVNTtoPWM
  4485  002A18  ECDF  F067         	call	_WritePWM
  4486                           ;main.c: 1894: tim=CalkTimStr(ProcToVNT(DtKNF.ms
      +                          tr));
  4487  002A1C  C1BA  FFE8         	movff	_DtKNF+6,wreg
  4488  002A20  ECB4  F057         	call	_ProcToVNT
  4489  002A24  EC43  F058         	call	_CalkTimStr
  4490  002A28  CFE8 FE73          	movff	wreg,F2472
  4491                           ;main.c: 1895: if(RTdS(10)<tim) return;
  4492  002A2C  0E0A               	movlw	10
  4493  002A2E  ECC9  F063         	call	_RTdS
  4494  002A32  6E00               	movwf	btemp,c
  4495  002A34  CE73  FFE8         	movff	F2472,wreg
  4496  002A38  5C00               	subwf	btemp,w,c
  4497  002A3A  A0D8               	btfss	status,0,c
  4498  002A3C  0012               	return	
  4499                           ;main.c: 1896: WritePWM(ProcToMod(DtKNF.mstr));
  4500  002A3E  C1BA  FFE8         	movff	_DtKNF+6,wreg
  4501  002A42  EC8E  F02E         	call	_ProcToMod
  4502  002A46  ECDF  F067         	call	_WritePWM
  4503                           ;main.c: 1897: StartRTS(2);
  4504  002A4A  0E02               	movlw	2
  4505  002A4C  ECD5  F063         	call	_StartRTS
  4506                           ;main.c: 1898: M.ROZ=6;
  4507  002A50  0E06               	movlw	6
  4508  002A52  CFE8 F312          	movff	wreg,_M+12
  4509  002A56                     l461:
  4510                           ;main.c: 1899: }
  4511                           ;main.c: 1903: {
  4512  002A56  D005               	goto	l463
  4513  002A58                     l465:
  4514                           ;main.c: 1907: case 3:
  4515  002A58  0103               	movlb	(_M+1) shr (0+8)
  4516  002A5A  B307               	btfsc	(_M+1)& (0+255),1,b
  4517  002A5C  D00B               	goto	l462
  4518  002A5E                     u8210:
  4519  002A5E  8483               	bsf	3971,2,c	;volatile
  4520                           ;main.c: 1915: break;
  4521  002A60  D009               	goto	l462
  4522  002A62                     l463:
  4523  002A62  C1C2  FFE8         	movff	_DtKNF+14,wreg
  4524  002A66  0A00               	xorlw	0
  4525  002A68  E0F7               	bz	l465
  4526  002A6A  0A03               	xorlw	3
  4527  002A6C  E0F5               	bz	l465
  4528                           ;main.c: 1910: break;
  4529                           ;main.c: 1911: }
  4530                           ;main.c: 1913: {
  4531  002A6E  0103               	movlb	(_M+1) shr (0+8)
  4532  002A70  A307               	btfss	(_M+1)& (0+255),1,b
  4533  002A72  D7F5               	goto	u8210
  4534  002A74                     l462:
  4535                           ;main.c: 1918: WritePWM(ProcToMod(DtKNF.mstr));
  4536  002A74  C1BA  FFE8         	movff	_DtKNF+6,wreg
  4537  002A78  EC8E  F02E         	call	_ProcToMod
  4538  002A7C  ECDF  F067         	call	_WritePWM
  4539                           ;main.c: 1920: if(RTS(2)<2) return;
  4540  002A80  0E02               	movlw	2
  4541  002A82  ECE7  F063         	call	_RTS
  4542  002A86  6E00               	movwf	btemp,c
  4543  002A88  0E02               	movlw	2
  4544  002A8A  5C00               	subwf	btemp,w,c
  4545  002A8C  A0D8               	btfss	status,0,c
  4546  002A8E  0012               	return	
  4547                           ;main.c: 1922: if(RTS(2)<7)
  4548  002A90  0E02               	movlw	2
  4549  002A92  ECE7  F063         	call	_RTS
  4550  002A96  6E00               	movwf	btemp,c
  4551  002A98  0E07               	movlw	7
  4552  002A9A  5C00               	subwf	btemp,w,c
  4553  002A9C  E20B               	bc	l470
  4554                           ;main.c: 1923: {
  4555  002A9E  0E05               	movlw	5
  4556  002AA0  EC50  F063         	call	_RdPrt
  4557  002AA4  A0D8               	btfss	status,0,c
  4558  002AA6  0012               	return	
  4559                           ;main.c: 1925: {
  4560  002AA8  0E07               	movlw	7
  4561  002AAA  CFE8 F312          	movff	wreg,_M+12
  4562                           ;main.c: 1927: StartRTS(2);
  4563  002AAE  0E02               	movlw	2
  4564  002AB0  EFD5  F063         	goto	_StartRTS
  4565                           ;main.c: 1928: }
  4566  002AB4                     l470:
  4567                           ;main.c: 1931: else
  4568  002AB4  D036               	goto	_DecyzjaPLM	;wreg free
  4569                           ;main.c: 1934: return;
  4570  002AB6                     l473:
  4571                           ;main.c: 1935: }
  4572                           ;main.c: 1939: {
  4573  002AB6  C1BA  FFE8         	movff	_DtKNF+6,wreg
  4574  002ABA  EC8E  F02E         	call	_ProcToMod
  4575  002ABE  ECDF  F067         	call	_WritePWM
  4576                           ;main.c: 1941: if(M._RPM_CW)
  4577  002AC2  0103               	movlb	(_M+4) shr (0+8)
  4578  002AC4  AD0A               	btfss	(_M+4)& (0+255),6,b
  4579  002AC6  D003               	goto	l474
  4580                           ;main.c: 1942: {
  4581  002AC8  9507               	bcf	(_M+1)& (0+255),2,b
  4582                           ;main.c: 1944: M.ROZ=0;
  4583  002ACA  6B12               	clrf	(_M+12)& (0+255),b
  4584                           ;main.c: 1945: return;
  4585  002ACC  0012               	return	
  4586  002ACE                     l474:
  4587                           ;main.c: 1946: }
  4588  002ACE  0E05               	movlw	5
  4589  002AD0  EC50  F063         	call	_RdPrt
  4590  002AD4  A0D8               	btfss	status,0,c
  4591                           ;main.c: 1948: {
  4592  002AD6  D83B               	call	_DecyzjaPLM2	;wreg free
  4593                           ;main.c: 1950: }
  4594  002AD8  0E02               	movlw	2
  4595  002ADA  ECE7  F063         	call	_RTS
  4596  002ADE  6E00               	movwf	btemp,c
  4597  002AE0  0E02               	movlw	2
  4598  002AE2  5C00               	subwf	btemp,w,c
  4599  002AE4  A0D8               	btfss	status,0,c
  4600  002AE6  0012               	return	
  4601                           ;main.c: 1952: M._ROZRUCH=0;
  4602  002AE8  0103               	movlb	(_M+1) shr (0+8)
  4603  002AEA  9507               	bcf	(_M+1)& (0+255),2,b
  4604                           ;main.c: 1953: M.ROZ=0;
  4605  002AEC  6B12               	clrf	(_M+12)& (0+255),b
  4606                           ;main.c: 1954: }
  4607  002AEE  0012               	return	
  4608  002AF0                     l438:
  4609  002AF0  C312  FFE8         	movff	_M+12,wreg
  4610  002AF4  0A00               	xorlw	0
  4611  002AF6  E101 D719          	bz	l439
  4612  002AFA  0A01               	xorlw	1
  4613  002AFC  E101 D723          	bz	l442
  4614  002B00  0A03               	xorlw	3
  4615  002B02  E101 D74D          	bz	l447
  4616  002B06  0A01               	xorlw	1
  4617  002B08  E101 D75F          	bz	l455
  4618  002B0C  0A07               	xorlw	7
  4619  002B0E  E101 D779          	bz	l458
  4620  002B12  0A01               	xorlw	1
  4621  002B14  E101 D77C          	bz	l459
  4622  002B18  0A03               	xorlw	3
  4623  002B1A  E09D               	bz	l461
  4624  002B1C  0A01               	xorlw	1
  4625  002B1E  E0CB               	bz	l473
  4626  002B20  0012               	return	
  4627                           ;main.c: 1956: }
  4628  002B22                     __end_of_Rozruch:
  4629                           ;main.c: 1957: void DecyzjaPLM(void)
  4630                           ;main.c: 1958: {
  4631  002B22                     _DecyzjaPLM:
  4632  000000                     
  4633                           ;main.c: 1959: if(M._OST_PL)
  4634  002B22  0103               	movlb	(_M+4) shr (0+8)
  4635  002B24  A50A               	btfss	(_M+4)& (0+255),2,b
  4636  002B26  D009               	goto	l478
  4637                           ;main.c: 1960: {
  4638  002B28  0E01               	movlw	1
  4639  002B2A  CFE8 F311          	movff	wreg,_M+11
  4640                           ;main.c: 1962: PrintErr(0x01,1);
  4641  002B2E  0100               	movlb	__Lparam shr (0+8)
  4642  002B30  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  4643  002B32  ECA1  F069         	call	_PrintErr
  4644                           ;main.c: 1963: ErrPTG();
  4645  002B36  EF73  F01A         	goto	_ErrPTG	;wreg free
  4646                           ;main.c: 1964: }
  4647  002B3A                     l478:
  4648                           ;main.c: 1965: else
  4649  002B3A  0103               	movlb	(_M+1) shr (0+8)
  4650  002B3C  8F07               	bsf	(_M+1)& (0+255),7,b
  4651                           ;main.c: 1968: if(!M.LICZNIK_PL) M._RUSZ_RPLM=1;
  4652  002B3E  EE03  F00D         	lfsr	0,_M+7
  4653  002B42  50EF               	movf	indf0,w,c
  4654  002B44  B4D8               	btfsc	status,2,c
  4655  002B46  8108               	bsf	(_M+2)& (0+255),0,b
  4656                           ;main.c: 1969: M._ROZRUCH=0;
  4657  002B48  9507               	bcf	(_M+1)& (0+255),2,b
  4658                           ;main.c: 1970: M.ROZ=0;
  4659  002B4A  6B12               	clrf	(_M+12)& (0+255),b
  4660                           ;main.c: 1971: }
  4661  002B4C  0012               	return	
  4662  002B4E                     __end_of_DecyzjaPLM:
  4663                           ;main.c: 1973: void DecyzjaPLM2(void)
  4664                           ;main.c: 1974: {
  4665  002B4E                     _DecyzjaPLM2:
  4666  000000                     
  4667                           ;main.c: 1975: if(RA7&&RC0)
  4668  002B4E  BE80               	btfsc	3968,7,c	;volatile
  4669  002B50  A082               	btfss	3970,0,c	;volatile
  4670  002B52  0012               	return	
  4671                           ;main.c: 1976: {
  4672  002B54  0103               	movlb	(_M+4) shr (0+8)
  4673  002B56  A50A               	btfss	(_M+4)& (0+255),2,b
  4674  002B58  D009               	goto	l483
  4675                           ;main.c: 1978: {
  4676  002B5A  0E01               	movlw	1
  4677  002B5C  CFE8 F311          	movff	wreg,_M+11
  4678                           ;main.c: 1980: PrintErr(0x01,1);
  4679  002B60  0100               	movlb	__Lparam shr (0+8)
  4680  002B62  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  4681  002B64  ECA1  F069         	call	_PrintErr
  4682                           ;main.c: 1981: ErrPTG();
  4683  002B68  EF73  F01A         	goto	_ErrPTG	;wreg free
  4684                           ;main.c: 1982: }
  4685  002B6C                     l483:
  4686                           ;main.c: 1983: else
  4687  002B6C  0103               	movlb	(_M+19) shr (0+8)
  4688  002B6E  6B19               	clrf	(_M+19)& (0+255),b
  4689                           ;main.c: 1986: M._RUSZ_PLOMIEN=1;
  4690  002B70  8F07               	bsf	(_M+1)& (0+255),7,b
  4691                           ;main.c: 1987: if(!M.LICZNIK_PL) M._RUSZ_RPLM=1;
  4692  002B72  EE03  F00D         	lfsr	0,_M+7
  4693  002B76  50EF               	movf	indf0,w,c
  4694  002B78  B4D8               	btfsc	status,2,c
  4695  002B7A  8108               	bsf	(_M+2)& (0+255),0,b
  4696                           ;main.c: 1988: M._ROZRUCH=0;
  4697  002B7C  0103               	movlb	(_M+1) shr (0+8)
  4698  002B7E  9507               	bcf	(_M+1)& (0+255),2,b
  4699                           ;main.c: 1989: M.ROZ=0;
  4700  002B80  6B12               	clrf	(_M+12)& (0+255),b
  4701                           ;main.c: 1990: }
  4702  002B82  0012               	return	
  4703  002B84                     __end_of_DecyzjaPLM2:
  4704                           ;main.c: 1996: void Wylacz(void)
  4705                           ;main.c: 1997: {
  4706  002B84                     _Wylacz:
  4707  000000                     
  4708                           ;main.c: 1998: switch(DtKNF.tpkt)
  4709  002B84  D120               	goto	l488
  4710  002B86                     l489:
  4711                           ;main.c: 1999: {
  4712                           ;main.c: 2001: {
  4713  002B86  D055               	goto	l491
  4714  002B88                     l492:
  4715                           ;main.c: 2003: {
  4716                           ;main.c: 2005: {
  4717  002B88  0E01               	movlw	1
  4718  002B8A  CFE8 F317          	movff	wreg,_M+17
  4719                           ;main.c: 2007: StartRTS(7);
  4720  002B8E  0E07               	movlw	7
  4721  002B90  ECD5  F063         	call	_StartRTS
  4722  002B94                     l493:
  4723                           ;main.c: 2008: }
  4724                           ;main.c: 2010: {
  4725  002B94  0103               	movlb	(_M+4) shr (0+8)
  4726                           ;main.c: 2012: {
  4727  002B96  0E07               	movlw	7
  4728  002B98  AD0A               	btfss	(_M+4)& (0+255),6,b
  4729  002B9A  D01C               	goto	L23
  4730  002B9C  ECE7  F063         	call	_RTS
  4731  002BA0  6E00               	movwf	btemp,c
  4732  002BA2  0E14               	movlw	20
  4733  002BA4  5C00               	subwf	btemp,w,c
  4734  002BA6  E30A               	bnc	l495
  4735                           ;main.c: 2014: {
  4736  002BA8  0100               	movlb	_DtCO shr (0+8)
  4737  002BAA  B17F               	btfsc	_DtCO& (0+255),0,b
  4738  002BAC  D007               	goto	l495
  4739  002BAE  0100               	movlb	(_DtCO+1) shr (0+8)
  4740  002BB0  A180               	btfss	(_DtCO+1)& (0+255),0,b
  4741  002BB2  D004               	goto	l495
  4742                           ;main.c: 2016: {
  4743  002BB4  0E02               	movlw	2
  4744  002BB6  CFE8 F317          	movff	wreg,_M+17
  4745                           ;main.c: 2018: return;
  4746  002BBA  0C02               	retlw	2
  4747  002BBC                     l495:
  4748                           ;main.c: 2019: }
  4749  002BBC  0E07               	movlw	7
  4750  002BBE  ECE7  F063         	call	_RTS
  4751  002BC2  6E00               	movwf	btemp,c
  4752  002BC4  0EB4               	movlw	180
  4753  002BC6  5C00               	subwf	btemp,w,c
  4754  002BC8  A0D8               	btfss	status,0,c
  4755  002BCA  0012               	return	
  4756                           ;main.c: 2022: M.WYL=2;
  4757  002BCC  0E02               	movlw	2
  4758  002BCE  CFE8 F317          	movff	wreg,_M+17
  4759                           ;main.c: 2023: return;
  4760  002BD2  0C02               	retlw	2
  4761                           ;main.c: 2025: else
  4762  002BD4                     L23:
  4763  002BD4  ECE7  F063         	call	_RTS
  4764  002BD8  6E00               	movwf	btemp,c
  4765  002BDA  0EB4               	movlw	180
  4766  002BDC  5C00               	subwf	btemp,w,c
  4767  002BDE  A0D8               	btfss	status,0,c
  4768  002BE0  0012               	return	
  4769                           ;main.c: 2028: M.WYL=2;
  4770  002BE2  0E02               	movlw	2
  4771  002BE4  CFE8 F317          	movff	wreg,_M+17
  4772  002BE8                     l500:
  4773                           ;main.c: 2029: }
  4774                           ;main.c: 2032: {
  4775  002BE8  0103               	movlb	(_M+4) shr (0+8)
  4776  002BEA  BD0A               	btfsc	(_M+4)& (0+255),6,b
  4777  002BEC  D00C               	goto	l501
  4778                           ;main.c: 2034: {
  4779  002BEE  0E0D               	movlw	13
  4780  002BF0  EC50  F063         	call	_RdPrt
  4781  002BF4  B0D8               	btfsc	status,0,c
  4782  002BF6  0012               	return	
  4783                           ;main.c: 2036: if(!DtCO._err_CO&&!DtCO._su_CO) r
      +                          eturn;
  4784  002BF8  0100               	movlb	_DtCO shr (0+8)
  4785  002BFA  B17F               	btfsc	_DtCO& (0+255),0,b
  4786  002BFC  D00D               	goto	l504
  4787  002BFE  0100               	movlb	_DtCO shr (0+8)
  4788  002C00  A37F               	btfss	_DtCO& (0+255),1,b
  4789  002C02  0012               	return	
  4790  002C04  D009               	goto	l504
  4791                           ;main.c: 2037: }
  4792  002C06                     l501:
  4793                           ;main.c: 2038: else
  4794  002C06  0100               	movlb	_DtCO shr (0+8)
  4795  002C08  B17F               	btfsc	_DtCO& (0+255),0,b
  4796  002C0A  D006               	goto	l504
  4797  002C0C  0100               	movlb	(_DtCO+1) shr (0+8)
  4798  002C0E  B180               	btfsc	(_DtCO+1)& (0+255),0,b
  4799  002C10  D003               	goto	l504
  4800  002C12  0103               	movlb	_M shr (0+8)
  4801  002C14  B906               	btfsc	_M& (0+255),4,b
  4802  002C16  0012               	return	
  4803  002C18                     l504:
  4804                           ;main.c: 2041: }
  4805  002C18  EE01  F0C9         	lfsr	0,_DtKNF+21
  4806  002C1C  50EF               	movf	indf0,w,c
  4807  002C1E  E103               	bnz	l506
  4808                           ;main.c: 2043: {
  4809  002C20  0103               	movlb	(_M+2) shr (0+8)
  4810  002C22  B308               	btfsc	(_M+2)& (0+255),1,b
  4811  002C24  0012               	return	
  4812  002C26                     l506:
  4813                           ;main.c: 2045: }
  4814  002C26  0103               	movlb	(_M+1) shr (0+8)
  4815  002C28  A307               	btfss	(_M+1)& (0+255),1,b
  4816  002C2A  9483               	bcf	3971,2,c	;volatile
  4817                           ;main.c: 2047: M._WYLACZ=0;
  4818  002C2C  9107               	bcf	(_M+1)& (0+255),0,b
  4819                           ;main.c: 2048: M.WYL=0;
  4820  002C2E  6B17               	clrf	(_M+17)& (0+255),b
  4821                           ;main.c: 2049: }
  4822  002C30  0012               	return	
  4823  002C32                     l491:
  4824  002C32  C317  FFE8         	movff	_M+17,wreg
  4825  002C36  0A00               	xorlw	0
  4826  002C38  E0A7               	bz	l492
  4827  002C3A  0A01               	xorlw	1
  4828  002C3C  E0AB               	bz	l493
  4829  002C3E  0A03               	xorlw	3
  4830  002C40  E0D3               	bz	l500
  4831  002C42  0012               	return	
  4832                           ;main.c: 2051: return;
  4833  002C44                     l509:
  4834                           ;main.c: 2052: }
  4835                           ;main.c: 2054: {
  4836  002C44  D059               	goto	l511
  4837  002C46                     l512:
  4838                           ;main.c: 2056: {
  4839                           ;main.c: 2058: {
  4840  002C46  0E01               	movlw	1
  4841  002C48  CFE8 F317          	movff	wreg,_M+17
  4842                           ;main.c: 2060: StartRTS(7);
  4843  002C4C  0E07               	movlw	7
  4844  002C4E  ECD5  F063         	call	_StartRTS
  4845  002C52                     l513:
  4846                           ;main.c: 2061: }
  4847                           ;main.c: 2063: {
  4848  002C52  0103               	movlb	(_M+4) shr (0+8)
  4849  002C54  AD0A               	btfss	(_M+4)& (0+255),6,b
  4850  002C56  D013               	goto	l514
  4851                           ;main.c: 2065: {
  4852  002C58  870C               	bsf	(_M+6)& (0+255),3,b
  4853                           ;main.c: 2067: if(RTS(7)<60) return;
  4854  002C5A  0E07               	movlw	7
  4855  002C5C  ECE7  F063         	call	_RTS
  4856  002C60  6E00               	movwf	btemp,c
  4857  002C62  0E3C               	movlw	60
  4858  002C64  5C00               	subwf	btemp,w,c
  4859  002C66  A0D8               	btfss	status,0,c
  4860  002C68  0012               	return	
  4861                           ;main.c: 2068: if(!DtCO._err_CO)
  4862  002C6A  0100               	movlb	_DtCO shr (0+8)
  4863  002C6C  B17F               	btfsc	_DtCO& (0+255),0,b
  4864  002C6E  D011               	goto	L6
  4865                           ;main.c: 2069: {
  4866  002C70  0100               	movlb	(_DtCO+1) shr (0+8)
  4867  002C72  A180               	btfss	(_DtCO+1)& (0+255),0,b
  4868  002C74  0012               	return	
  4869                           ;main.c: 2071: {
  4870  002C76  0E02               	movlw	2
  4871  002C78  CFE8 F317          	movff	wreg,_M+17
  4872                           ;main.c: 2073: return;
  4873  002C7C  0C02               	retlw	2
  4874                           ;main.c: 2074: }
  4875                           ;main.c: 2077: else
  4876                           ;main.c: 2080: }
  4877  002C7E                     l514:
  4878                           ;main.c: 2082: else
  4879  002C7E  0103               	movlb	(_M+6) shr (0+8)
  4880  002C80  970C               	bcf	(_M+6)& (0+255),3,b
  4881                           ;main.c: 2085: if(RTS(7)<180) return;
  4882  002C82  0E07               	movlw	7
  4883  002C84  ECE7  F063         	call	_RTS
  4884  002C88  6E00               	movwf	btemp,c
  4885  002C8A  0EB4               	movlw	180
  4886  002C8C  5C00               	subwf	btemp,w,c
  4887  002C8E  A0D8               	btfss	status,0,c
  4888  002C90  0012               	return	
  4889  002C92                     L6:
  4890                           ;main.c: 2086: M.WYL=2;
  4891  002C92  0E02               	movlw	2
  4892  002C94  CFE8 F317          	movff	wreg,_M+17
  4893  002C98                     l521:
  4894                           ;main.c: 2087: }
  4895                           ;main.c: 2090: {
  4896  002C98  0103               	movlb	(_M+4) shr (0+8)
  4897  002C9A  AD0A               	btfss	(_M+4)& (0+255),6,b
  4898  002C9C  D014               	goto	l522
  4899                           ;main.c: 2092: {
  4900  002C9E  0E11               	movlw	17
  4901  002CA0  EC50  F063         	call	_RdPrt
  4902  002CA4  B0D8               	btfsc	status,0,c
  4903  002CA6  0012               	return	
  4904                           ;main.c: 2094: if(RdPrt(13)&&(PFN.poz==3)&&!RdPr
      +                          t(12)) return;
  4905  002CA8  0E0D               	movlw	13
  4906  002CAA  EC50  F063         	call	_RdPrt
  4907  002CAE  E316               	bnc	l525
  4908  002CB0  0100               	movlb	(_PFN+1) shr (0+8)
  4909  002CB2  516C               	movf	(_PFN+1)& (0+255),w,b
  4910  002CB4  0A03               	xorlw	3
  4911  002CB6  116D               	iorwf	(_PFN+2)& (0+255),w,b
  4912  002CB8  E111               	bnz	l525
  4913  002CBA  0E0C               	movlw	12
  4914  002CBC  EC50  F063         	call	_RdPrt
  4915  002CC0  A0D8               	btfss	status,0,c
  4916  002CC2  0012               	return	
  4917  002CC4  D00B               	goto	l525
  4918                           ;main.c: 2095: }
  4919  002CC6                     l522:
  4920                           ;main.c: 2096: else
  4921  002CC6  0E0D               	movlw	13
  4922  002CC8  EC50  F063         	call	_RdPrt
  4923  002CCC  B0D8               	btfsc	status,0,c
  4924  002CCE  0012               	return	
  4925                           ;main.c: 2099: if(!DtCO._err_CO&&!DtCO._su_CO) r
      +                          eturn;
  4926  002CD0  0100               	movlb	_DtCO shr (0+8)
  4927  002CD2  B17F               	btfsc	_DtCO& (0+255),0,b
  4928  002CD4  D003               	goto	l525
  4929  002CD6  0100               	movlb	_DtCO shr (0+8)
  4930  002CD8  A37F               	btfss	_DtCO& (0+255),1,b
  4931  002CDA  0012               	return	
  4932  002CDC                     l525:
  4933                           ;main.c: 2100: }
  4934  002CDC  0103               	movlb	(_M+6) shr (0+8)
  4935  002CDE  970C               	bcf	(_M+6)& (0+255),3,b
  4936                           ;main.c: 2102: if(DtKNF.robg==0)
  4937  002CE0  EE01  F0C9         	lfsr	0,_DtKNF+21
  4938  002CE4  50EF               	movf	indf0,w,c
  4939  002CE6  E102               	bnz	l528
  4940                           ;main.c: 2103: {
  4941  002CE8  B308               	btfsc	(_M+2)& (0+255),1,b
  4942  002CEA  0012               	return	
  4943  002CEC                     l528:
  4944                           ;main.c: 2105: }
  4945  002CEC  0103               	movlb	(_M+1) shr (0+8)
  4946  002CEE  A307               	btfss	(_M+1)& (0+255),1,b
  4947                           ;main.c: 2107: {
  4948  002CF0  9483               	bcf	3971,2,c	;volatile
  4949                           ;main.c: 2109: }
  4950  002CF2  9107               	bcf	(_M+1)& (0+255),0,b
  4951                           ;main.c: 2111: M.WYL=0;
  4952  002CF4  6B17               	clrf	(_M+17)& (0+255),b
  4953                           ;main.c: 2112: }
  4954  002CF6  0012               	return	
  4955  002CF8                     l511:
  4956  002CF8  C317  FFE8         	movff	_M+17,wreg
  4957  002CFC  0A00               	xorlw	0
  4958  002CFE  E0A3               	bz	l512
  4959  002D00  0A01               	xorlw	1
  4960  002D02  E0A7               	bz	l513
  4961  002D04  0A03               	xorlw	3
  4962  002D06  E0C8               	bz	l521
  4963  002D08  0012               	return	
  4964                           ;main.c: 2114: return;
  4965                           ;main.c: 2115: }
  4966                           ;main.c: 2117: {
  4967  002D0A                     l534:
  4968                           ;main.c: 2119: {
  4969                           ;main.c: 2121: {
  4970  002D0A  0E01               	movlw	1
  4971  002D0C  CFE8 F317          	movff	wreg,_M+17
  4972                           ;main.c: 2123: StartRTS(7);
  4973  002D10  0E07               	movlw	7
  4974  002D12  ECD5  F063         	call	_StartRTS
  4975  002D16                     l535:
  4976                           ;main.c: 2124: }
  4977                           ;main.c: 2126: {
  4978  002D16  0103               	movlb	(_M+4) shr (0+8)
  4979                           ;main.c: 2128: {
  4980  002D18  0E07               	movlw	7
  4981  002D1A  AD0A               	btfss	(_M+4)& (0+255),6,b
  4982  002D1C  D01C               	goto	L24
  4983  002D1E  ECE7  F063         	call	_RTS
  4984  002D22  6E00               	movwf	btemp,c
  4985  002D24  0E14               	movlw	20
  4986  002D26  5C00               	subwf	btemp,w,c
  4987  002D28  E30A               	bnc	l537
  4988                           ;main.c: 2130: {
  4989  002D2A  0100               	movlb	_DtCO shr (0+8)
  4990  002D2C  B17F               	btfsc	_DtCO& (0+255),0,b
  4991  002D2E  D007               	goto	l537
  4992  002D30  0100               	movlb	(_DtCO+1) shr (0+8)
  4993  002D32  A180               	btfss	(_DtCO+1)& (0+255),0,b
  4994  002D34  D004               	goto	l537
  4995                           ;main.c: 2132: {
  4996  002D36  0E02               	movlw	2
  4997  002D38  CFE8 F317          	movff	wreg,_M+17
  4998                           ;main.c: 2134: return;
  4999  002D3C  0C02               	retlw	2
  5000  002D3E                     l537:
  5001                           ;main.c: 2135: }
  5002  002D3E  0E07               	movlw	7
  5003  002D40  ECE7  F063         	call	_RTS
  5004  002D44  6E00               	movwf	btemp,c
  5005  002D46  0EB4               	movlw	180
  5006  002D48  5C00               	subwf	btemp,w,c
  5007  002D4A  A0D8               	btfss	status,0,c
  5008  002D4C  0012               	return	
  5009                           ;main.c: 2138: M.WYL=2;
  5010  002D4E  0E02               	movlw	2
  5011  002D50  CFE8 F317          	movff	wreg,_M+17
  5012                           ;main.c: 2139: return;
  5013  002D54  0C02               	retlw	2
  5014                           ;main.c: 2141: else
  5015  002D56                     L24:
  5016  002D56  ECE7  F063         	call	_RTS
  5017  002D5A  6E00               	movwf	btemp,c
  5018  002D5C  0EB4               	movlw	180
  5019  002D5E  5C00               	subwf	btemp,w,c
  5020  002D60  A0D8               	btfss	status,0,c
  5021  002D62  0012               	return	
  5022                           ;main.c: 2144: M.WYL=2;
  5023  002D64  0E02               	movlw	2
  5024  002D66  CFE8 F317          	movff	wreg,_M+17
  5025  002D6A                     l542:
  5026                           ;main.c: 2145: }
  5027                           ;main.c: 2148: {
  5028  002D6A  0103               	movlb	(_M+4) shr (0+8)
  5029  002D6C  BD0A               	btfsc	(_M+4)& (0+255),6,b
  5030  002D6E  D00C               	goto	l543
  5031                           ;main.c: 2150: {
  5032  002D70  0E0D               	movlw	13
  5033  002D72  EC50  F063         	call	_RdPrt
  5034  002D76  B0D8               	btfsc	status,0,c
  5035  002D78  0012               	return	
  5036                           ;main.c: 2152: if(!DtCO._err_CO&&!DtCO._su_CO) r
      +                          eturn;
  5037  002D7A  0100               	movlb	_DtCO shr (0+8)
  5038  002D7C  B17F               	btfsc	_DtCO& (0+255),0,b
  5039  002D7E  D00D               	goto	l546
  5040  002D80  0100               	movlb	_DtCO shr (0+8)
  5041  002D82  A37F               	btfss	_DtCO& (0+255),1,b
  5042  002D84  0012               	return	
  5043  002D86  D009               	goto	l546
  5044                           ;main.c: 2153: }
  5045  002D88                     l543:
  5046                           ;main.c: 2154: else
  5047  002D88  0100               	movlb	_DtCO shr (0+8)
  5048  002D8A  B17F               	btfsc	_DtCO& (0+255),0,b
  5049  002D8C  D006               	goto	l546
  5050  002D8E  0100               	movlb	(_DtCO+1) shr (0+8)
  5051  002D90  B180               	btfsc	(_DtCO+1)& (0+255),0,b
  5052  002D92  D003               	goto	l546
  5053  002D94  0103               	movlb	_M shr (0+8)
  5054  002D96  B906               	btfsc	_M& (0+255),4,b
  5055  002D98  0012               	return	
  5056  002D9A                     l546:
  5057                           ;main.c: 2157: }
  5058  002D9A  EE01  F0C9         	lfsr	0,_DtKNF+21
  5059  002D9E  50EF               	movf	indf0,w,c
  5060  002DA0  E103               	bnz	l548
  5061                           ;main.c: 2159: {
  5062  002DA2  0103               	movlb	(_M+2) shr (0+8)
  5063  002DA4  B308               	btfsc	(_M+2)& (0+255),1,b
  5064  002DA6  0012               	return	
  5065  002DA8                     l548:
  5066                           ;main.c: 2161: }
  5067  002DA8  0103               	movlb	(_M+1) shr (0+8)
  5068  002DAA  A307               	btfss	(_M+1)& (0+255),1,b
  5069  002DAC  9483               	bcf	3971,2,c	;volatile
  5070                           ;main.c: 2163: M._WYLACZ=0;
  5071  002DAE  9107               	bcf	(_M+1)& (0+255),0,b
  5072                           ;main.c: 2164: M.WYL=0;
  5073  002DB0  6B17               	clrf	(_M+17)& (0+255),b
  5074                           ;main.c: 2165: }
  5075  002DB2  0012               	return	
  5076  002DB4                     l533:
  5077  002DB4  C317  FFE8         	movff	_M+17,wreg
  5078  002DB8  0A00               	xorlw	0
  5079  002DBA  E0A7               	bz	l534
  5080  002DBC  0A01               	xorlw	1
  5081  002DBE  E0AB               	bz	l535
  5082  002DC0  0A03               	xorlw	3
  5083  002DC2  E0D3               	bz	l542
  5084  002DC4  0012               	return	
  5085                           ;main.c: 2167: return;
  5086  002DC6                     l488:
  5087  002DC6  C1C2  FFE8         	movff	_DtKNF+14,wreg
  5088  002DCA  0A00               	xorlw	0
  5089  002DCC  E101 D73A          	bz	l509
  5090  002DD0  0A03               	xorlw	3
  5091  002DD2  E101 D6D8          	bz	l489
  5092  002DD6  D7EE               	goto	l533
  5093                           ;main.c: 2170: }
  5094  002DD8                     __end_of_Wylacz:
  5095                           ;main.c: 2174: void VWybieg(void)
  5096                           ;main.c: 2175: {
  5097  002DD8                     _VWybieg:
  5098  000000                     
  5099                           ;main.c: 2176: switch(M.VWB)
  5100  002DD8  D034               	goto	l553
  5101  002DDA                     l554:
  5102                           ;main.c: 2177: {
  5103                           ;main.c: 2179: {
  5104  002DDA  0E01               	movlw	1
  5105  002DDC  CFE8 F31D          	movff	wreg,_M+23
  5106                           ;main.c: 2181: M._DE_VNT=1;
  5107  002DE0  0103               	movlb	(_M+4) shr (0+8)
  5108  002DE2  8B0A               	bsf	(_M+4)& (0+255),5,b
  5109                           ;main.c: 2182: StartRTS(6);
  5110  002DE4  0E06               	movlw	6
  5111  002DE6  ECD5  F063         	call	_StartRTS
  5112                           ;main.c: 2183: WritePWM(ProcToMod(0));
  5113  002DEA  0E00               	movlw	0
  5114  002DEC  EC8E  F02E         	call	_ProcToMod
  5115  002DF0  ECDF  F067         	call	_WritePWM
  5116  002DF4                     l555:
  5117                           ;main.c: 2184: }
  5118                           ;main.c: 2186: {
  5119  002DF4  0E06               	movlw	6
  5120  002DF6  ECE7  F063         	call	_RTS
  5121  002DFA  6E00               	movwf	btemp,c
  5122  002DFC  0E02               	movlw	2
  5123  002DFE  5C00               	subwf	btemp,w,c
  5124  002E00  E302               	bnc	l556
  5125  002E02  0103               	movlb	(_M+4) shr (0+8)
  5126  002E04  9B0A               	bcf	(_M+4)& (0+255),5,b
  5127  002E06                     l556:
  5128                           ;main.c: 2188: if(RTS(6)<15) return;
  5129  002E06  0E06               	movlw	6
  5130  002E08  ECE7  F063         	call	_RTS
  5131  002E0C  6E00               	movwf	btemp,c
  5132  002E0E  0E0F               	movlw	15
  5133  002E10  5C00               	subwf	btemp,w,c
  5134  002E12  A0D8               	btfss	status,0,c
  5135  002E14  0012               	return	
  5136                           ;main.c: 2189: WritePWM(0);
  5137  002E16  0E00               	movlw	0
  5138  002E18  ECDF  F067         	call	_WritePWM
  5139                           ;main.c: 2190: RD3=0;
  5140  002E1C  9683               	bcf	3971,3,c	;volatile
  5141                           ;main.c: 2191: M._DE_VNT=1;
  5142  002E1E  0103               	movlb	(_M+4) shr (0+8)
  5143  002E20  8B0A               	bsf	(_M+4)& (0+255),5,b
  5144                           ;main.c: 2192: M.VWB=2;
  5145  002E22  0E02               	movlw	2
  5146  002E24  CFE8 F31D          	movff	wreg,_M+23
  5147  002E28                     l558:
  5148                           ;main.c: 2193: }
  5149                           ;main.c: 2195: {
  5150  002E28  0E06               	movlw	6
  5151  002E2A  ECE7  F063         	call	_RTS
  5152  002E2E  6E00               	movwf	btemp,c
  5153  002E30  0E11               	movlw	17
  5154  002E32  5C00               	subwf	btemp,w,c
  5155  002E34  A0D8               	btfss	status,0,c
  5156  002E36  0012               	return	
  5157                           ;main.c: 2197: M._DE_VNT=0;
  5158  002E38  0103               	movlb	(_M+4) shr (0+8)
  5159  002E3A  9B0A               	bcf	(_M+4)& (0+255),5,b
  5160                           ;main.c: 2198: M._VWYBIEG=0;
  5161  002E3C  9D07               	bcf	(_M+1)& (0+255),6,b
  5162                           ;main.c: 2199: M.VWB=0;
  5163  002E3E  6B1D               	clrf	(_M+23)& (0+255),b
  5164                           ;main.c: 2201: }
  5165  002E40  0012               	return	
  5166  002E42                     l553:
  5167  002E42  C31D  FFE8         	movff	_M+23,wreg
  5168  002E46  0A00               	xorlw	0
  5169  002E48  E0C8               	bz	l554
  5170  002E4A  0A01               	xorlw	1
  5171  002E4C  E0D3               	bz	l555
  5172  002E4E  0A03               	xorlw	3
  5173  002E50  E0EB               	bz	l558
  5174  002E52  0012               	return	
  5175                           ;main.c: 2203: }
  5176  002E54                     __end_of_VWybieg:
  5177                           ;main.c: 2207: void DetekcjaPrzeplywuWG(void)
  5178                           ;main.c: 2208: {
  5179  002E54                     _DetekcjaPrzeplywuWG:
  5180  000000                     
  5181                           ;main.c: 2209: unsigned char pmp,prz;
  5182  002E54  0E00               	movlw	0
  5183  002E56  B483               	btfsc	3971,2,c	;volatile
  5184  002E58  0E01               	movlw	1
  5185  002E5A  0100               	movlb	__Lparam shr (0+8)
  5186  002E5C  6FA6               	movwf	?a_DetekcjaPrzeplywuWG^(__Lparam& (0+6528
      +                          0)),b
  5187                           ;main.c: 2212: prz=(RdPrt(1))?1:0;
  5188  002E5E  0E01               	movlw	1
  5189  002E60  EC50  F063         	call	_RdPrt
  5190  002E64  0E00               	movlw	0
  5191  002E66  B0D8               	btfsc	status,0,c
  5192  002E68  0E01               	movlw	1
  5193  002E6A  0100               	movlb	__Lparam shr (0+8)
  5194  002E6C  6FA7               	movwf	(?a_DetekcjaPrzeplywuWG+1)^(__Lparam& (0+
      +                          65280)),b
  5195                           ;main.c: 2214: if(pmp)
  5196  002E6E  51A6               	movf	?a_DetekcjaPrzeplywuWG^(__Lparam& (0+65280
      +                          )),w
  5197  002E70  E033               	bz	l561
  5198                           ;main.c: 2215: {
  5199  002E72  51A7               	movf	(?a_DetekcjaPrzeplywuWG+1)^(__Lparam& (0+6
      +                          5280)),w
  5200  002E74  E106               	bnz	l562
  5201  002E76  0103               	movlb	(_M+5) shr (0+8)
  5202  002E78  B30B               	btfsc	(_M+5)& (0+255),1,b
  5203  002E7A  D003               	goto	l562
  5204                           ;main.c: 2217: {
  5205  002E7C  0103               	movlb	(_M+5) shr (0+8)
  5206  002E7E  830B               	bsf	(_M+5)& (0+255),1,b
  5207                           ;main.c: 2219: M.DPR=0;
  5208  002E80  6B21               	clrf	(_M+27)& (0+255),b
  5209  002E82                     l562:
  5210                           ;main.c: 2220: }
  5211  002E82  0103               	movlb	(_M+5) shr (0+8)
  5212  002E84  A30B               	btfss	(_M+5)& (0+255),1,b
  5213  002E86  0012               	return	
  5214  002E88  D020               	goto	l565
  5215                           ;main.c: 2222: {
  5216  002E8A                     l566:
  5217                           ;main.c: 2224: {
  5218                           ;main.c: 2226: {
  5219  002E8A  0E0A               	movlw	10
  5220  002E8C  ECD5  F063         	call	_StartRTS
  5221                           ;main.c: 2228: M.DPR=1;
  5222  002E90  0E01               	movlw	1
  5223  002E92  CFE8 F321          	movff	wreg,_M+27
  5224  002E96                     l567:
  5225                           ;main.c: 2229: }
  5226                           ;main.c: 2231: {
  5227  002E96  0100               	movlb	__Lparam shr (0+8)
  5228  002E98  51A7               	movf	(?a_DetekcjaPrzeplywuWG+1)^(__Lparam& (0+6
      +                          5280)),w
  5229  002E9A  E004               	bz	l568
  5230                           ;main.c: 2233: {
  5231  002E9C  0103               	movlb	(_M+5) shr (0+8)
  5232  002E9E  930B               	bcf	(_M+5)& (0+255),1,b
  5233                           ;main.c: 2235: M.DPR=0;
  5234  002EA0  6B21               	clrf	(_M+27)& (0+255),b
  5235                           ;main.c: 2236: return;
  5236  002EA2  0012               	return	
  5237  002EA4                     l568:
  5238                           ;main.c: 2237: }
  5239  002EA4  0E0A               	movlw	10
  5240  002EA6  ECE7  F063         	call	_RTS
  5241  002EAA  6E00               	movwf	btemp,c
  5242  002EAC  0E03               	movlw	3
  5243  002EAE  5C00               	subwf	btemp,w,c
  5244  002EB0  A0D8               	btfss	status,0,c
  5245  002EB2  0012               	return	
  5246                           ;main.c: 2239: if(!M._RUSZ_POMPE&&!M._PROC_ODP)
  5247  002EB4  0103               	movlb	(_M+2) shr (0+8)
  5248  002EB6  A308               	btfss	(_M+2)& (0+255),1,b
  5249  002EB8  B30C               	btfsc	(_M+6)& (0+255),1,b
  5250  002EBA  D003               	goto	l570
  5251                           ;main.c: 2240: {
  5252  002EBC  0103               	movlb	(_M+18) shr (0+8)
  5253  002EBE  6B18               	clrf	(_M+18)& (0+255),b
  5254                           ;main.c: 2242: M._RUSZ_POMPE=1;
  5255  002EC0  8308               	bsf	(_M+2)& (0+255),1,b
  5256  002EC2                     l570:
  5257                           ;main.c: 2243: }
  5258  002EC2  0103               	movlb	(_M+5) shr (0+8)
  5259  002EC4  930B               	bcf	(_M+5)& (0+255),1,b
  5260                           ;main.c: 2245: M.DPR=0;
  5261  002EC6  6B21               	clrf	(_M+27)& (0+255),b
  5262                           ;main.c: 2246: }
  5263  002EC8  0012               	return	
  5264  002ECA                     l565:
  5265  002ECA  C321  FFE8         	movff	_M+27,wreg
  5266  002ECE  0A00               	xorlw	0
  5267  002ED0  E0DC               	bz	l566
  5268  002ED2  0A01               	xorlw	1
  5269  002ED4  E0E0               	bz	l567
  5270  002ED6  0012               	return	
  5271                           ;main.c: 2248: }
  5272  002ED8                     l561:
  5273                           ;main.c: 2250: else
  5274  002ED8  0103               	movlb	(_M+5) shr (0+8)
  5275  002EDA  930B               	bcf	(_M+5)& (0+255),1,b
  5276                           ;main.c: 2253: M.DPR=0;
  5277  002EDC  6B21               	clrf	(_M+27)& (0+255),b
  5278                           ;main.c: 2254: }
  5279  002EDE  0012               	return	
  5280  002EE0                     __end_of_DetekcjaPrzeplywuWG:
  5281                           ;main.c: 2259: void OczekujNaPrzeplywWG(void)
  5282                           ;main.c: 2260: {
  5283  002EE0                     _OczekujNaPrzeplywWG:
  5284  000000                     
  5285                           ;main.c: 2261: unsigned char pmp,prz;
  5286  002EE0  0E00               	movlw	0
  5287  002EE2  B483               	btfsc	3971,2,c	;volatile
  5288  002EE4  0E01               	movlw	1
  5289  002EE6  0100               	movlb	__Lparam shr (0+8)
  5290  002EE8  6FA6               	movwf	?a_OczekujNaPrzeplywWG^(__Lparam& (0+6528
      +                          0)),b
  5291                           ;main.c: 2264: prz=(RdPrt(1))?1:0;
  5292  002EEA  0E01               	movlw	1
  5293  002EEC  EC50  F063         	call	_RdPrt
  5294  002EF0  0E00               	movlw	0
  5295  002EF2  B0D8               	btfsc	status,0,c
  5296  002EF4  0E01               	movlw	1
  5297  002EF6  0100               	movlb	__Lparam shr (0+8)
  5298  002EF8  6FA7               	movwf	(?a_OczekujNaPrzeplywWG+1)^(__Lparam& (0+
      +                          65280)),b
  5299                           ;main.c: 2266: switch(M.RPR)
  5300  002EFA  D026               	goto	l574
  5301  002EFC                     l575:
  5302                           ;main.c: 2267: {
  5303                           ;main.c: 2269: {
  5304  002EFC  0E01               	movlw	1
  5305  002EFE  CFE8 F318          	movff	wreg,_M+18
  5306                           ;main.c: 2271: M._prb_PRZ=1;
  5307  002F02  0103               	movlb	(_M+5) shr (0+8)
  5308  002F04  810B               	bsf	(_M+5)& (0+255),0,b
  5309                           ;main.c: 2272: StartRTS(11);
  5310  002F06  0E0B               	movlw	11
  5311  002F08  ECD5  F063         	call	_StartRTS
  5312  002F0C                     l576:
  5313                           ;main.c: 2273: }
  5314                           ;main.c: 2275: {
  5315  002F0C  0100               	movlb	__Lparam shr (0+8)
  5316  002F0E  51A7               	movf	(?a_OczekujNaPrzeplywWG+1)^(__Lparam& (0+6
      +                          5280)),w
  5317  002F10  E007               	bz	l577
  5318  002F12  51A6               	movf	?a_OczekujNaPrzeplywWG^(__Lparam& (0+65280
      +                          )),w
  5319  002F14  E005               	bz	l577
  5320                           ;main.c: 2277: {
  5321  002F16  0103               	movlb	(_M+18) shr (0+8)
  5322  002F18  6B18               	clrf	(_M+18)& (0+255),b
  5323                           ;main.c: 2279: M._RUSZ_POMPE=0;
  5324  002F1A  9308               	bcf	(_M+2)& (0+255),1,b
  5325                           ;main.c: 2280: M._prb_PRZ=0;
  5326  002F1C  910B               	bcf	(_M+5)& (0+255),0,b
  5327                           ;main.c: 2281: return;
  5328  002F1E  0012               	return	
  5329  002F20                     l577:
  5330                           ;main.c: 2282: }
  5331  002F20  0E0B               	movlw	11
  5332  002F22  ECE7  F063         	call	_RTS
  5333  002F26  6E00               	movwf	btemp,c
  5334  002F28  0EF0               	movlw	240
  5335  002F2A  5C00               	subwf	btemp,w,c
  5336  002F2C  A0D8               	btfss	status,0,c
  5337  002F2E  0012               	return	
  5338                           ;main.c: 2284: M._RUSZ_POMPE=0;
  5339  002F30  0103               	movlb	(_M+2) shr (0+8)
  5340  002F32  9308               	bcf	(_M+2)& (0+255),1,b
  5341                           ;main.c: 2285: M.ERR_BTY=0x05;
  5342  002F34  0E05               	movlw	5
  5343  002F36  CFE8 F311          	movff	wreg,_M+11
  5344                           ;main.c: 2286: PrintErr(0x05,1);
  5345  002F3A  0E01               	movlw	1
  5346  002F3C  0100               	movlb	__Lparam shr (0+8)
  5347  002F3E  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  5348  002F40  0E05               	movlw	5
  5349  002F42  ECA1  F069         	call	_PrintErr
  5350                           ;main.c: 2287: ErrPTG();
  5351  002F46  D2CF               	goto	_ErrPTG	;wreg free
  5352                           ;main.c: 2288: }
  5353  002F48                     l574:
  5354  002F48  C318  FFE8         	movff	_M+18,wreg
  5355  002F4C  0A00               	xorlw	0
  5356  002F4E  E0D6               	bz	l575
  5357  002F50  0A01               	xorlw	1
  5358  002F52  E0DC               	bz	l576
  5359  002F54  0012               	return	
  5360                           ;main.c: 2290: }
  5361  002F56                     __end_of_OczekujNaPrzeplywWG:
  5362                           ;main.c: 2294: void ZmienKCOKCW(void)
  5363                           ;main.c: 2295: {
  5364  002F56                     _ZmienKCOKCW:
  5365  000000                     
  5366                           ;main.c: 2296: switch(DtKNF.tpkt)
  5367  002F56  D077               	goto	l581
  5368  002F58                     l583:
  5369                           ;main.c: 2299: case 3:
  5370  002F58  D032               	goto	l585
  5371  002F5A                     l586:
  5372                           ;main.c: 2302: {
  5373                           ;main.c: 2304: {
  5374  002F5A  0E01               	movlw	1
  5375  002F5C  CFE8 F31C          	movff	wreg,_M+22
  5376                           ;main.c: 2306: RD2=0;
  5377  002F60  9483               	bcf	3971,2,c	;volatile
  5378                           ;main.c: 2307: StartRTdS(2);
  5379  002F62  0E02               	movlw	2
  5380  002F64  ECB7  F063         	call	_StartRTdS
  5381  002F68                     l587:
  5382                           ;main.c: 2308: }
  5383                           ;main.c: 2310: {
  5384  002F68  0E02               	movlw	2
  5385  002F6A  ECC9  F063         	call	_RTdS
  5386  002F6E  6E00               	movwf	btemp,c
  5387  002F70  0E05               	movlw	5
  5388  002F72  5C00               	subwf	btemp,w,c
  5389  002F74  A0D8               	btfss	status,0,c
  5390  002F76  0012               	return	
  5391                           ;main.c: 2312: RD1=!RD1;
  5392  002F78  7283               	btg	3971,1,c	;volatile
  5393                           ;main.c: 2313: M.ZKP=2;
  5394  002F7A  0E02               	movlw	2
  5395  002F7C  CFE8 F31C          	movff	wreg,_M+22
  5396  002F80                     l589:
  5397                           ;main.c: 2314: }
  5398                           ;main.c: 2316: {
  5399  002F80  0E02               	movlw	2
  5400  002F82  ECC9  F063         	call	_RTdS
  5401  002F86  6E00               	movwf	btemp,c
  5402  002F88  0E0A               	movlw	10
  5403  002F8A  5C00               	subwf	btemp,w,c
  5404  002F8C  A0D8               	btfss	status,0,c
  5405  002F8E  0012               	return	
  5406                           ;main.c: 2318: M._ZMKCOCW=0;
  5407  002F90  0103               	movlb	(_M+1) shr (0+8)
  5408  002F92  9307               	bcf	(_M+1)& (0+255),1,b
  5409                           ;main.c: 2319: M.ZKP=0;
  5410  002F94  6B1C               	clrf	(_M+22)& (0+255),b
  5411                           ;main.c: 2322: if(M._ROZRUCH||RD0||M._WYLACZ||M.
      +                          _RUSZ_48||M._RUSZ_48Z3) RD2=1;
  5412  002F96  A507               	btfss	(_M+1)& (0+255),2,b
  5413  002F98  B083               	btfsc	3971,0,c	;volatile
  5414  002F9A  D007               	goto	u9210
  5415  002F9C  B107               	btfsc	(_M+1)& (0+255),0,b
  5416  002F9E  D005               	goto	u9210
  5417  002FA0  0103               	movlb	(_M+1) shr (0+8)
  5418  002FA2  B707               	btfsc	(_M+1)& (0+255),3,b
  5419  002FA4  D002               	goto	u9210
  5420  002FA6  0103               	movlb	(_M+1) shr (0+8)
  5421  002FA8  B907               	btfsc	(_M+1)& (0+255),4,b
  5422  002FAA                     u9210:
  5423  002FAA  8483               	bsf	3971,2,c	;volatile
  5424                           ;main.c: 2323: if(DtKNF.robg==0)
  5425  002FAC  EE01  F0C9         	lfsr	0,_DtKNF+21
  5426  002FB0  50EF               	movf	indf0,w,c
  5427  002FB2  A4D8               	btfss	status,2,c
  5428  002FB4  0012               	return	
  5429                           ;main.c: 2324: {
  5430  002FB6  0103               	movlb	(_M+2) shr (0+8)
  5431  002FB8  B308               	btfsc	(_M+2)& (0+255),1,b
  5432  002FBA  8483               	bsf	3971,2,c	;volatile
  5433                           ;main.c: 2326: }
  5434  002FBC  0012               	return	
  5435  002FBE                     l585:
  5436  002FBE  C31C  FFE8         	movff	_M+22,wreg
  5437  002FC2  0A00               	xorlw	0
  5438  002FC4  E0CA               	bz	l586
  5439  002FC6  0A01               	xorlw	1
  5440  002FC8  E0CF               	bz	l587
  5441  002FCA  0A03               	xorlw	3
  5442  002FCC  E0D9               	bz	l589
  5443  002FCE  0012               	return	
  5444                           ;main.c: 2329: return;
  5445                           ;main.c: 2330: }
  5446                           ;main.c: 2332: {
  5447  002FD0                     l597:
  5448                           ;main.c: 2334: {
  5449                           ;main.c: 2336: {
  5450  002FD0  0E01               	movlw	1
  5451  002FD2  CFE8 F31C          	movff	wreg,_M+22
  5452                           ;main.c: 2338: RD2=0;
  5453  002FD6  9483               	bcf	3971,2,c	;volatile
  5454                           ;main.c: 2339: StartRTdS(2);
  5455  002FD8  0E02               	movlw	2
  5456  002FDA  ECB7  F063         	call	_StartRTdS
  5457  002FDE                     l598:
  5458                           ;main.c: 2340: }
  5459                           ;main.c: 2342: {
  5460  002FDE  0E02               	movlw	2
  5461  002FE0  ECC9  F063         	call	_RTdS
  5462  002FE4  6E00               	movwf	btemp,c
  5463  002FE6  0E05               	movlw	5
  5464  002FE8  5C00               	subwf	btemp,w,c
  5465  002FEA  A0D8               	btfss	status,0,c
  5466  002FEC  0012               	return	
  5467                           ;main.c: 2344: RD1=!RD1;
  5468  002FEE  7283               	btg	3971,1,c	;volatile
  5469                           ;main.c: 2345: M.ZKP=2;
  5470  002FF0  0E02               	movlw	2
  5471  002FF2  CFE8 F31C          	movff	wreg,_M+22
  5472  002FF6                     l600:
  5473                           ;main.c: 2346: }
  5474                           ;main.c: 2348: {
  5475  002FF6  0E02               	movlw	2
  5476  002FF8  ECC9  F063         	call	_RTdS
  5477  002FFC  6E00               	movwf	btemp,c
  5478  002FFE  0E0A               	movlw	10
  5479  003000  5C00               	subwf	btemp,w,c
  5480  003002  A0D8               	btfss	status,0,c
  5481  003004  0012               	return	
  5482                           ;main.c: 2350: M._ZMKCOCW=0;
  5483  003006  0103               	movlb	(_M+1) shr (0+8)
  5484  003008  9307               	bcf	(_M+1)& (0+255),1,b
  5485                           ;main.c: 2351: M.ZKP=0;
  5486  00300A  6B1C               	clrf	(_M+22)& (0+255),b
  5487                           ;main.c: 2354: if(M._ROZRUCH||RD0||M._WYLACZ||M.
      +                          _RUSZ_48||M._RUSZ_48Z3) RD2=1;
  5488  00300C  A507               	btfss	(_M+1)& (0+255),2,b
  5489  00300E  B083               	btfsc	3971,0,c	;volatile
  5490  003010  D007               	goto	u9340
  5491  003012  B107               	btfsc	(_M+1)& (0+255),0,b
  5492  003014  D005               	goto	u9340
  5493  003016  0103               	movlb	(_M+1) shr (0+8)
  5494  003018  B707               	btfsc	(_M+1)& (0+255),3,b
  5495  00301A  D002               	goto	u9340
  5496  00301C  0103               	movlb	(_M+1) shr (0+8)
  5497  00301E  B907               	btfsc	(_M+1)& (0+255),4,b
  5498  003020                     u9340:
  5499  003020  8483               	bsf	3971,2,c	;volatile
  5500                           ;main.c: 2355: if(DtKNF.robg==0)
  5501  003022  EE01  F0C9         	lfsr	0,_DtKNF+21
  5502  003026  50EF               	movf	indf0,w,c
  5503  003028  A4D8               	btfss	status,2,c
  5504  00302A  0012               	return	
  5505                           ;main.c: 2356: {
  5506  00302C  0103               	movlb	(_M+2) shr (0+8)
  5507  00302E  B308               	btfsc	(_M+2)& (0+255),1,b
  5508  003030  8483               	bsf	3971,2,c	;volatile
  5509                           ;main.c: 2358: }
  5510  003032  0012               	return	
  5511  003034                     l596:
  5512  003034  C31C  FFE8         	movff	_M+22,wreg
  5513  003038  0A00               	xorlw	0
  5514  00303A  E0CA               	bz	l597
  5515  00303C  0A01               	xorlw	1
  5516  00303E  E0CF               	bz	l598
  5517  003040  0A03               	xorlw	3
  5518  003042  E0D9               	bz	l600
  5519  003044  0012               	return	
  5520                           ;main.c: 2361: return;
  5521  003046                     l581:
  5522  003046  C1C2  FFE8         	movff	_DtKNF+14,wreg
  5523  00304A  0A00               	xorlw	0
  5524  00304C  E085               	bz	l583
  5525  00304E  0A03               	xorlw	3
  5526  003050  E083               	bz	l583
  5527  003052  D7F0               	goto	l596
  5528                           ;main.c: 2364: }
  5529  003054                     __end_of_ZmienKCOKCW:
  5530                           ;main.c: 2368: void RuszPlomien(void)
  5531                           ;main.c: 2369: {
  5532  003054                     _RuszPlomien:
  5533  000000                     
  5534                           ;main.c: 2370: switch(M.RPL)
  5535  003054  D021               	goto	l607
  5536  003056                     l608:
  5537                           ;main.c: 2371: {
  5538                           ;main.c: 2373: {
  5539  003056  0E01               	movlw	1
  5540  003058  CFE8 F319          	movff	wreg,_M+19
  5541                           ;main.c: 2375: StartRTS(3);
  5542  00305C  0E03               	movlw	3
  5543  00305E  ECD5  F063         	call	_StartRTS
  5544  003062                     l609:
  5545                           ;main.c: 2376: }
  5546                           ;main.c: 2378: {
  5547  003062  0E03               	movlw	3
  5548  003064  ECE7  F063         	call	_RTS
  5549  003068  6E00               	movwf	btemp,c
  5550  00306A  0E1E               	movlw	30
  5551  00306C  5C00               	subwf	btemp,w,c
  5552  00306E  A0D8               	btfss	status,0,c
  5553  003070  0012               	return	
  5554                           ;main.c: 2380: M.LICZNIK_PL++;
  5555  003072  0103               	movlb	(_M+7) shr (0+8)
  5556  003074  2B0D               	incf	(_M+7)& (0+255),f,b
  5557                           ;main.c: 2381: if(M._RUSZ_RPLM)
  5558  003076  A108               	btfss	(_M+2)& (0+255),0,b
  5559  003078  D002               	goto	l611
  5560                           ;main.c: 2382: {
  5561  00307A  0E01               	movlw	1
  5562  00307C  D002               	goto	L7
  5563                           ;main.c: 2384: {
  5564                           ;main.c: 2386: M._RUSZ_RPLM=0;
  5565                           ;main.c: 2387: }
  5566  00307E                     l611:
  5567                           ;main.c: 2389: else
  5568  00307E  0E02               	movlw	2
  5569  003080  0103               	movlb	(_M+7) shr (0+8)
  5570  003082                     L7:
  5571  003082  650D               	cpfsgt	(_M+7)& (0+255),b
  5572  003084  D002               	goto	l613
  5573                           ;main.c: 2392: {
  5574  003086  850A               	bsf	(_M+4)& (0+255),2,b
  5575                           ;main.c: 2394: M._RUSZ_RPLM=0;
  5576  003088  9108               	bcf	(_M+2)& (0+255),0,b
  5577  00308A                     l613:
  5578                           ;main.c: 2395: }
  5579  00308A  0E05               	movlw	5
  5580  00308C  ECB7  F063         	call	_StartRTdS
  5581                           ;main.c: 2398: M._RUSZ_PLOMIEN=0;
  5582  003090  0103               	movlb	(_M+1) shr (0+8)
  5583  003092  9F07               	bcf	(_M+1)& (0+255),7,b
  5584                           ;main.c: 2399: M.RPL=0;
  5585  003094  6B19               	clrf	(_M+19)& (0+255),b
  5586                           ;main.c: 2400: }
  5587  003096  0012               	return	
  5588  003098                     l607:
  5589  003098  C319  FFE8         	movff	_M+19,wreg
  5590  00309C  0A00               	xorlw	0
  5591  00309E  E0DB               	bz	l608
  5592  0030A0  0A01               	xorlw	1
  5593  0030A2  E0DF               	bz	l609
  5594  0030A4  0012               	return	
  5595                           ;main.c: 2402: }
  5596  0030A6                     __end_of_RuszPlomien:
  5597                           ;main.c: 2406: void ReloadPlomien(void)
  5598                           ;main.c: 2407: {
  5599  0030A6                     _ReloadPlomien:
  5600  000000                     
  5601                           ;main.c: 2408: if(!M._RUSZ_PLOMIEN&&!M._ZMKCOCW&
      +                          &!M._ROZRUCH&&(RTdS(5)>9))
  5602  0030A6  0103               	movlb	(_M+1) shr (0+8)
  5603  0030A8  AF07               	btfss	(_M+1)& (0+255),7,b
  5604  0030AA  B307               	btfsc	(_M+1)& (0+255),1,b
  5605  0030AC  D00D               	goto	l616
  5606  0030AE  B507               	btfsc	(_M+1)& (0+255),2,b
  5607  0030B0  D00B               	goto	l616
  5608  0030B2  0E05               	movlw	5
  5609  0030B4  ECC9  F063         	call	_RTdS
  5610  0030B8  6E00               	movwf	btemp,c
  5611  0030BA  0E0A               	movlw	10
  5612  0030BC  5C00               	subwf	btemp,w,c
  5613  0030BE  E304               	bnc	l616
  5614                           ;main.c: 2409: {
  5615  0030C0  0103               	movlb	(_M+2) shr (0+8)
  5616  0030C2  9108               	bcf	(_M+2)& (0+255),0,b
  5617                           ;main.c: 2411: M._OST_PL=0;
  5618  0030C4  950A               	bcf	(_M+4)& (0+255),2,b
  5619                           ;main.c: 2412: M.LICZNIK_PL=0;
  5620  0030C6  6B0D               	clrf	(_M+7)& (0+255),b
  5621  0030C8                     l616:
  5622                           ;main.c: 2413: }
  5623  0030C8  0103               	movlb	(_M+1) shr (0+8)
  5624  0030CA  0E0D               	movlw	13
  5625  0030CC  AF07               	btfss	(_M+1)& (0+255),7,b
  5626  0030CE  D003               	goto	L25
  5627  0030D0  ECD5  F063         	call	_StartRTS
  5628                           ;main.c: 2415: if(RTS(13)>60)
  5629  0030D4  0E0D               	movlw	13
  5630  0030D6                     L25:
  5631  0030D6  ECE7  F063         	call	_RTS
  5632  0030DA  6E00               	movwf	btemp,c
  5633  0030DC  0E3D               	movlw	61
  5634  0030DE  5C00               	subwf	btemp,w,c
  5635  0030E0  A0D8               	btfss	status,0,c
  5636  0030E2  0012               	return	
  5637                           ;main.c: 2416: {
  5638  0030E4  0103               	movlb	(_M+8) shr (0+8)
  5639  0030E6  6B0E               	clrf	(_M+8)& (0+255),b
  5640                           ;main.c: 2418: }
  5641  0030E8  0012               	return	
  5642  0030EA                     __end_of_ReloadPlomien:
  5643                           ;main.c: 2424: void KontrolaWentylatora(void)
  5644                           ;main.c: 2425: {
  5645  0030EA                     _KontrolaWentylatora:
  5646  000000                     
  5647                           ;main.c: 2426: if(!RD3||!PWM.BufPWM)
  5648  0030EA  A683               	btfss	3971,3,c	;volatile
  5649  0030EC  D004               	goto	u9520
  5650  0030EE  EE01  F0D7         	lfsr	0,_PWM+1
  5651  0030F2  50EF               	movf	indf0,w,c
  5652  0030F4  E103               	bnz	l620
  5653  0030F6                     u9520:
  5654                           ;main.c: 2427: {
  5655  0030F6  0E04               	movlw	4
  5656  0030F8  EFD5  F063         	goto	_StartRTS
  5657                           ;main.c: 2429: }
  5658  0030FC                     l620:
  5659                           ;main.c: 2430: else
  5660  0030FC  EE03  F022         	lfsr	0,_M+28
  5661  003100  50EF               	movf	indf0,w,c
  5662                           ;main.c: 2433: {
  5663  003102  0E04               	movlw	4
  5664  003104  E002               	bz	L26
  5665  003106  EFD5  F063         	goto	_StartRTS
  5666                           ;main.c: 2435: }
  5667                           ;main.c: 2436: else
  5668  00310A                     L26:
  5669  00310A  ECE7  F063         	call	_RTS
  5670  00310E  6E00               	movwf	btemp,c
  5671  003110  0E06               	movlw	6
  5672  003112  5C00               	subwf	btemp,w,c
  5673  003114  A0D8               	btfss	status,0,c
  5674  003116  0012               	return	
  5675                           ;main.c: 2439: {
  5676  003118  0100               	movlb	__Lparam shr (0+8)
  5677  00311A  0E3E               	movlw	low (_RSDT1+24)
  5678  00311C  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  5679  00311E  0E03               	movlw	high (_RSDT1+24)
  5680  003120  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  5681  003122  0E07               	movlw	7
  5682  003124  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  5683  003126  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  5684  003128  EC57  F06A         	call	_BitSet2	;wreg free
  5685                           ;main.c: 2441: RD3=0;
  5686  00312C  9683               	bcf	3971,3,c	;volatile
  5687                           ;main.c: 2442: WritePWM(0);
  5688  00312E  0E00               	movlw	0
  5689  003130  ECDF  F067         	call	_WritePWM
  5690                           ;main.c: 2443: M.ERR_BTY=0x07;
  5691  003134  0E07               	movlw	7
  5692  003136  CFE8 F311          	movff	wreg,_M+11
  5693                           ;main.c: 2444: PrintErr(0x07,1);
  5694  00313A  0E01               	movlw	1
  5695  00313C  0100               	movlb	__Lparam shr (0+8)
  5696  00313E  6FA9               	movwf	?_PrintErr^(__Lparam& (0+65280)),b
  5697  003140  0E07               	movlw	7
  5698  003142  ECA1  F069         	call	_PrintErr
  5699                           ;main.c: 2445: ErrPTG();
  5700  003146  D1CF               	goto	_ErrPTG	;wreg free
  5701                           ;main.c: 2446: }
  5702  003148                     __end_of_KontrolaWentylatora:
  5703                           ;main.c: 2453: void Proba48(void)
  5704                           ;main.c: 2454: {
  5705  003148                     _Proba48:
  5706  000000                     
  5707                           ;main.c: 2456: if(M._RUSZ_48||M._RUSZ_48Z3) retu
      +                          rn;
  5708  003148  0103               	movlb	(_M+1) shr (0+8)
  5709  00314A  A707               	btfss	(_M+1)& (0+255),3,b
  5710  00314C  B907               	btfsc	(_M+1)& (0+255),4,b
  5711  00314E  0012               	return	
  5712                           ;main.c: 2457: if(RD2) StartRTG(0);
  5713  003150  B483               	btfsc	3971,2,c	;volatile
  5714  003152  D00E               	goto	L40
  5715                           ;main.c: 2458: else
  5716  003154  0103               	movlb	(_M+6) shr (0+8)
  5717  003156  B30C               	btfsc	(_M+6)& (0+255),1,b
  5718  003158  0012               	return	
  5719                           ;main.c: 2461: if(RTG(0)>=24)
  5720  00315A  0E00               	movlw	0
  5721  00315C  EC41  F064         	call	_RTG
  5722  003160  6E00               	movwf	btemp,c
  5723  003162  0E18               	movlw	24
  5724  003164  5C00               	subwf	btemp,w,c
  5725  003166  A0D8               	btfss	status,0,c
  5726  003168  0012               	return	
  5727                           ;main.c: 2462: {
  5728  00316A  0103               	movlb	(_M+13) shr (0+8)
  5729  00316C  6B13               	clrf	(_M+13)& (0+255),b
  5730                           ;main.c: 2464: M._RUSZ_48=1;
  5731  00316E  8707               	bsf	(_M+1)& (0+255),3,b
  5732  003170                     L40:
  5733                           ;main.c: 2465: StartRTG(0);
  5734  003170  0E00               	movlw	0
  5735  003172  EF29  F064         	goto	_StartRTG
  5736                           ;main.c: 2466: }
  5737  003176                     __end_of_Proba48:
  5738                           ;main.c: 2487: void Rusz48(void)
  5739                           ;main.c: 2488: {
  5740  003176                     _Rusz48:
  5741  000000                     
  5742                           ;main.c: 2489: switch(DtKNF.tpkt)
  5743  003176  D03E               	goto	l633
  5744  003178                     l635:
  5745                           ;main.c: 2492: case 3:
  5746  003178  D01B               	goto	l637
  5747  00317A                     l638:
  5748                           ;main.c: 2495: {
  5749                           ;main.c: 2497: {
  5750  00317A  ECBA  F011         	call	_ToObiegCO	;wreg free
  5751                           ;main.c: 2499: if(M._ZMKCOCW) return;
  5752  00317E  0103               	movlb	(_M+1) shr (0+8)
  5753  003180  B307               	btfsc	(_M+1)& (0+255),1,b
  5754  003182  0012               	return	
  5755                           ;main.c: 2500: StartRTS(5);
  5756  003184  0E05               	movlw	5
  5757  003186  ECD5  F063         	call	_StartRTS
  5758                           ;main.c: 2501: RD2=1;
  5759  00318A  8483               	bsf	3971,2,c	;volatile
  5760                           ;main.c: 2502: M.R48=1;
  5761  00318C  0E01               	movlw	1
  5762  00318E  CFE8 F313          	movff	wreg,_M+13
  5763  003192                     l640:
  5764                           ;main.c: 2503: }
  5765                           ;main.c: 2505: {
  5766  003192  0E05               	movlw	5
  5767  003194  ECE7  F063         	call	_RTS
  5768  003198  6E00               	movwf	btemp,c
  5769  00319A  0EB4               	movlw	180
  5770  00319C  5C00               	subwf	btemp,w,c
  5771  00319E  A0D8               	btfss	status,0,c
  5772  0031A0  0012               	return	
  5773                           ;main.c: 2507: if(M._ZMKCOCW) return;
  5774  0031A2  0103               	movlb	(_M+1) shr (0+8)
  5775  0031A4  B307               	btfsc	(_M+1)& (0+255),1,b
  5776  0031A6  0012               	return	
  5777                           ;main.c: 2508: RD2=0;
  5778  0031A8  9483               	bcf	3971,2,c	;volatile
  5779                           ;main.c: 2509: M._RUSZ_48=0;
  5780  0031AA  9707               	bcf	(_M+1)& (0+255),3,b
  5781                           ;main.c: 2510: M.R48=0;
  5782  0031AC  6B13               	clrf	(_M+13)& (0+255),b
  5783                           ;main.c: 2511: }
  5784  0031AE  0012               	return	
  5785  0031B0                     l637:
  5786  0031B0  C313  FFE8         	movff	_M+13,wreg
  5787  0031B4  0A00               	xorlw	0
  5788  0031B6  E0E1               	bz	l638
  5789  0031B8  0A01               	xorlw	1
  5790  0031BA  E0EB               	bz	l640
  5791  0031BC  0012               	return	
  5792                           ;main.c: 2513: break;
  5793                           ;main.c: 2514: }
  5794                           ;main.c: 2516: {
  5795  0031BE                     l646:
  5796                           ;main.c: 2518: {
  5797                           ;main.c: 2520: {
  5798  0031BE  ECBA  F011         	call	_ToObiegCO	;wreg free
  5799                           ;main.c: 2522: if(M._ZMKCOCW) return;
  5800  0031C2  0103               	movlb	(_M+1) shr (0+8)
  5801  0031C4  B307               	btfsc	(_M+1)& (0+255),1,b
  5802  0031C6  0012               	return	
  5803                           ;main.c: 2523: StartRTS(5);
  5804  0031C8  0E05               	movlw	5
  5805  0031CA  ECD5  F063         	call	_StartRTS
  5806                           ;main.c: 2524: RD2=1;
  5807  0031CE  8483               	bsf	3971,2,c	;volatile
  5808                           ;main.c: 2525: M.R48=1;
  5809  0031D0  0E01               	movlw	1
  5810  0031D2  CFE8 F313          	movff	wreg,_M+13
  5811  0031D6                     l648:
  5812                           ;main.c: 2526: }
  5813                           ;main.c: 2528: {
  5814  0031D6  0E05               	movlw	5
  5815  0031D8  ECE7  F063         	call	_RTS
  5816  0031DC  6E00               	movwf	btemp,c
  5817  0031DE  0EB4               	movlw	180
  5818  0031E0  5C00               	subwf	btemp,w,c
  5819  0031E2  A0D8               	btfss	status,0,c
  5820  0031E4  0012               	return	
  5821                           ;main.c: 2530: if(M._ZMKCOCW) return;
  5822  0031E6  0103               	movlb	(_M+1) shr (0+8)
  5823  0031E8  B307               	btfsc	(_M+1)& (0+255),1,b
  5824  0031EA  0012               	return	
  5825                           ;main.c: 2531: RD2=0;
  5826  0031EC  9483               	bcf	3971,2,c	;volatile
  5827                           ;main.c: 2532: M._RUSZ_48=0;
  5828  0031EE  9707               	bcf	(_M+1)& (0+255),3,b
  5829                           ;main.c: 2533: M.R48=0;
  5830  0031F0  6B13               	clrf	(_M+13)& (0+255),b
  5831                           ;main.c: 2534: }
  5832  0031F2  0012               	return	
  5833                           ;main.c: 2536: break;
  5834  0031F4                     l633:
  5835  0031F4  C1C2  FFE8         	movff	_DtKNF+14,wreg
  5836  0031F8  0A00               	xorlw	0
  5837  0031FA  E0BE               	bz	l635
  5838  0031FC  0A03               	xorlw	3
  5839  0031FE  E0BC               	bz	l635
  5840  003200  C313  FFE8         	movff	_M+13,wreg
  5841  003204  0A00               	xorlw	0
  5842  003206  E0DB               	bz	l646
  5843  003208  0A01               	xorlw	1
  5844  00320A  E0E5               	bz	l648
  5845                           ;main.c: 2539: }
  5846  00320C  0012               	return	
  5847  00320E                     __end_of_Rusz48:
  5848                           ;main.c: 2542: void Proba48Z3(void)
  5849                           ;main.c: 2543: {
  5850  00320E                     _Proba48Z3:
  5851  000000                     
  5852                           ;main.c: 2545: switch(DtKNF.tpkt)
  5853  00320E  D01E               	goto	l653
  5854  003210                     l654:
  5855                           ;main.c: 2546: {
  5856                           ;main.c: 2548: {
  5857  003210  0103               	movlb	(_M+1) shr (0+8)
  5858  003212  A907               	btfss	(_M+1)& (0+255),4,b
  5859  003214  B707               	btfsc	(_M+1)& (0+255),3,b
  5860  003216  0012               	return	
  5861                           ;main.c: 2550: if(RD2&&!RD1) StartRTG(2);
  5862  003218  B483               	btfsc	3971,2,c	;volatile
  5863  00321A  B283               	btfsc	3971,1,c	;volatile
  5864  00321C  D001               	goto	l656
  5865  00321E  D013               	goto	L41
  5866  003220                     l656:
  5867                           ;main.c: 2551: else
  5868  003220  B483               	btfsc	3971,2,c	;volatile
  5869  003222  0012               	return	
  5870  003224  0103               	movlb	(_M+1) shr (0+8)
  5871  003226  B307               	btfsc	(_M+1)& (0+255),1,b
  5872  003228  0012               	return	
  5873  00322A  0103               	movlb	(_M+6) shr (0+8)
  5874  00322C  B30C               	btfsc	(_M+6)& (0+255),1,b
  5875  00322E  0012               	return	
  5876                           ;main.c: 2554: if(RTG(2)>=47)
  5877  003230  0E02               	movlw	2
  5878  003232  EC41  F064         	call	_RTG
  5879  003236  6E00               	movwf	btemp,c
  5880  003238  0E2F               	movlw	47
  5881  00323A  5C00               	subwf	btemp,w,c
  5882  00323C  A0D8               	btfss	status,0,c
  5883  00323E  0012               	return	
  5884                           ;main.c: 2555: {
  5885  003240  0103               	movlb	(_M+14) shr (0+8)
  5886  003242  6B14               	clrf	(_M+14)& (0+255),b
  5887                           ;main.c: 2557: M._RUSZ_48Z3=1;
  5888  003244  8907               	bsf	(_M+1)& (0+255),4,b
  5889  003246                     L41:
  5890                           ;main.c: 2558: StartRTG(2);
  5891  003246  0E02               	movlw	2
  5892  003248  EF29  F064         	goto	_StartRTG
  5893                           ;main.c: 2559: }
  5894  00324C                     l653:
  5895  00324C  C1C2  FFE8         	movff	_DtKNF+14,wreg
  5896  003250  0A03               	xorlw	3
  5897  003252  E0DE               	bz	l654
  5898  003254  0012               	return	
  5899                           ;main.c: 2585: }
  5900  003256                     __end_of_Proba48Z3:
  5901                           ;main.c: 2589: void Rusz48Z3(void)
  5902                           ;main.c: 2590: {
  5903  003256                     _Rusz48Z3:
  5904  000000                     
  5905                           ;main.c: 2591: switch(DtKNF.tpkt)
  5906  003256  D023               	goto	l662
  5907  003258                     l663:
  5908                           ;main.c: 2592: {
  5909                           ;main.c: 2594: {
  5910  003258  D01B               	goto	l665
  5911  00325A                     l666:
  5912                           ;main.c: 2596: {
  5913                           ;main.c: 2598: {
  5914  00325A  ECD4  F011         	call	_ToObiegCW	;wreg free
  5915                           ;main.c: 2600: if(M._ZMKCOCW) return;
  5916  00325E  0103               	movlb	(_M+1) shr (0+8)
  5917  003260  B307               	btfsc	(_M+1)& (0+255),1,b
  5918  003262  0012               	return	
  5919                           ;main.c: 2601: StartRTS(5);
  5920  003264  0E05               	movlw	5
  5921  003266  ECD5  F063         	call	_StartRTS
  5922                           ;main.c: 2602: RD2=1;
  5923  00326A  8483               	bsf	3971,2,c	;volatile
  5924                           ;main.c: 2603: M.R48Z3=1;
  5925  00326C  0E01               	movlw	1
  5926  00326E  CFE8 F314          	movff	wreg,_M+14
  5927  003272                     l668:
  5928                           ;main.c: 2604: }
  5929                           ;main.c: 2606: {
  5930  003272  0E05               	movlw	5
  5931  003274  ECE7  F063         	call	_RTS
  5932  003278  6E00               	movwf	btemp,c
  5933  00327A  0E0F               	movlw	15
  5934  00327C  5C00               	subwf	btemp,w,c
  5935  00327E  A0D8               	btfss	status,0,c
  5936  003280  0012               	return	
  5937                           ;main.c: 2608: if(M._ZMKCOCW) return;
  5938  003282  0103               	movlb	(_M+1) shr (0+8)
  5939  003284  B307               	btfsc	(_M+1)& (0+255),1,b
  5940  003286  0012               	return	
  5941                           ;main.c: 2609: RD2=0;
  5942  003288  9483               	bcf	3971,2,c	;volatile
  5943                           ;main.c: 2610: M._RUSZ_48Z3=0;
  5944  00328A  9907               	bcf	(_M+1)& (0+255),4,b
  5945                           ;main.c: 2611: M.R48Z3=0;
  5946  00328C  6B14               	clrf	(_M+14)& (0+255),b
  5947                           ;main.c: 2612: }
  5948  00328E  0012               	return	
  5949  003290                     l665:
  5950  003290  C314  FFE8         	movff	_M+14,wreg
  5951  003294  0A00               	xorlw	0
  5952  003296  E0E1               	bz	l666
  5953  003298  0A01               	xorlw	1
  5954  00329A  E0EB               	bz	l668
  5955  00329C  0012               	return	
  5956                           ;main.c: 2614: break;
  5957  00329E                     l662:
  5958  00329E  C1C2  FFE8         	movff	_DtKNF+14,wreg
  5959  0032A2  0A03               	xorlw	3
  5960  0032A4  E0D9               	bz	l663
  5961  0032A6  0012               	return	
  5962                           ;main.c: 2617: }
  5963  0032A8                     __end_of_Rusz48Z3:
  5964                           ;main.c: 2621: void DecyzjaOdp(void)
  5965                           ;main.c: 2622: {
  5966  0032A8                     _DecyzjaOdp:
  5967  000000                     
  5968                           ;main.c: 2623: static krok=0;
  5969  0032A8  EE01  F0C9         	lfsr	0,_DtKNF+21
  5970  0032AC  50EF               	movf	indf0,w,c
  5971  0032AE  B4D8               	btfsc	status,2,c
  5972  0032B0  0012               	return	
  5973                           ;main.c: 2626: {
  5974  0032B2  0102               	movlb	_MGSD shr (0+8)
  5975  0032B4  ADAE               	btfss	_MGSD& (0+255),6,b
  5976  0032B6  D008               	goto	u9870
  5977  0032B8  0102               	movlb	_MGSD shr (0+8)
  5978  0032BA  ADAE               	btfss	_MGSD& (0+255),6,b
  5979  0032BC  0012               	return	
  5980  0032BE  EE03  F061         	lfsr	0,_RSDT1+59
  5981  0032C2  50EF               	movf	indf0,w,c
  5982  0032C4  B4D8               	btfsc	status,2,c
  5983  0032C6  0012               	return	
  5984  0032C8                     u9870:
  5985                           ;main.c: 2628: {
  5986  0032C8  0103               	movlb	(_M+6) shr (0+8)
  5987  0032CA  A10C               	btfss	(_M+6)& (0+255),0,b
  5988  0032CC  B308               	btfsc	(_M+2)& (0+255),1,b
  5989  0032CE  0012               	return	
  5990  0032D0  0103               	movlb	(_M+1) shr (0+8)
  5991  0032D2  A707               	btfss	(_M+1)& (0+255),3,b
  5992  0032D4  B907               	btfsc	(_M+1)& (0+255),4,b
  5993  0032D6  0012               	return	
  5994  0032D8  0103               	movlb	(_M+3) shr (0+8)
  5995  0032DA  A109               	btfss	(_M+3)& (0+255),0,b
  5996                           ;main.c: 2630: if(M._RUSZ_CISN&&!RdPrt(15)&&(DtC
      +                          S.CS<=4))
  5997  0032DC  AB09               	btfss	(_M+3)& (0+255),5,b
  5998  0032DE  0012               	return	
  5999  0032E0  0E0F               	movlw	15
  6000  0032E2  EC50  F063         	call	_RdPrt
  6001  0032E6  B0D8               	btfsc	status,0,c
  6002  0032E8  0012               	return	
  6003  0032EA  0E05               	movlw	5
  6004  0032EC  0100               	movlb	(_DtCS+3) shr (0+8)
  6005  0032EE  6166               	cpfslt	(_DtCS+3)& (0+255),b
  6006  0032F0  0C05               	retlw	5
  6007                           ;main.c: 2631: {
  6008  0032F2  0103               	movlb	(_M+6) shr (0+8)
  6009  0032F4  810C               	bsf	(_M+6)& (0+255),0,b
  6010                           ;main.c: 2633: }
  6011  0032F6  0C05               	retlw	5
  6012  0032F8                     __end_of_DecyzjaOdp:
  6013                           ;main.c: 2637: void Odpowietrzenie(void)
  6014                           ;main.c: 2638: {
  6015  0032F8                     _Odpowietrzenie:
  6016  000000                     
  6017                           ;main.c: 2639: static unsigned char obg=0;
  6018  0032F8  0103               	movlb	(_M+6) shr (0+8)
  6019  0032FA  B10C               	btfsc	(_M+6)& (0+255),0,b
  6020  0032FC  A109               	btfss	(_M+3)& (0+255),0,b
  6021  0032FE  D00B               	goto	l677
  6022                           ;main.c: 2643: {
  6023  003300  910C               	bcf	(_M+6)& (0+255),0,b
  6024                           ;main.c: 2645: M._PROC_ODP=0;
  6025  003302  930C               	bcf	(_M+6)& (0+255),1,b
  6026                           ;main.c: 2646: M.LICZNIK_ODP=0;
  6027  003304  6B10               	clrf	(_M+10)& (0+255),b
  6028                           ;main.c: 2647: M.ODP=0;
  6029  003306  6B25               	clrf	(_M+31)& (0+255),b
  6030                           ;main.c: 2648: ToObiegCO();
  6031  003308  ECBA  F011         	call	_ToObiegCO	;wreg free
  6032                           ;main.c: 2649: RD2=1;
  6033  00330C  8483               	bsf	3971,2,c	;volatile
  6034                           ;main.c: 2650: M._WYLACZ=1;
  6035  00330E  0103               	movlb	(_M+1) shr (0+8)
  6036  003310  8107               	bsf	(_M+1)& (0+255),0,b
  6037                           ;main.c: 2651: M.WYL=0;
  6038  003312  6B17               	clrf	(_M+17)& (0+255),b
  6039                           ;main.c: 2652: return;
  6040  003314  0012               	return	
  6041  003316                     l677:
  6042                           ;main.c: 2653: }
  6043  003316  0103               	movlb	(_M+6) shr (0+8)
  6044  003318  B10C               	btfsc	(_M+6)& (0+255),0,b
  6045  00331A  A30C               	btfss	(_M+6)& (0+255),1,b
  6046  00331C  D0A0               	goto	l681
  6047                           ;main.c: 2657: {
  6048  00331E  0E04               	movlw	4
  6049  003320  0100               	movlb	__Lparam shr (0+8)
  6050  003322  6FA9               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
  6051  003324  C366  FFE8         	movff	_RSDT1+64,wreg
  6052  003328  EC24  F06A         	call	_GetBit2
  6053  00332C  E201 D097          	bnc	l681
  6054                           ;main.c: 2659: {
  6055  003330  0103               	movlb	(_M+6) shr (0+8)
  6056  003332  910C               	bcf	(_M+6)& (0+255),0,b
  6057                           ;main.c: 2661: M._PROC_ODP=0;
  6058  003334  930C               	bcf	(_M+6)& (0+255),1,b
  6059                           ;main.c: 2662: M.LICZNIK_ODP=0;
  6060  003336  6B10               	clrf	(_M+10)& (0+255),b
  6061                           ;main.c: 2663: M.ODP=0;
  6062  003338  6B25               	clrf	(_M+31)& (0+255),b
  6063                           ;main.c: 2664: ToObiegCO();
  6064  00333A  ECBA  F011         	call	_ToObiegCO	;wreg free
  6065                           ;main.c: 2665: RD2=1;
  6066  00333E  8483               	bsf	3971,2,c	;volatile
  6067                           ;main.c: 2666: M._WYLACZ=1;
  6068  003340  0103               	movlb	(_M+1) shr (0+8)
  6069  003342  8107               	bsf	(_M+1)& (0+255),0,b
  6070                           ;main.c: 2667: M.WYL=0;
  6071  003344  6B17               	clrf	(_M+17)& (0+255),b
  6072                           ;main.c: 2668: return;
  6073  003346  0012               	return	
  6074                           ;main.c: 2669: }
  6075  003348                     l682:
  6076                           ;main.c: 2673: {
  6077                           ;main.c: 2676: {
  6078  003348  010E               	movlb	F2494 shr (0+8)
  6079  00334A  6B74               	clrf	F2494& (0+255),b
  6080                           ;main.c: 2678: StartRTS(5);
  6081  00334C  0E05               	movlw	5
  6082  00334E  ECD5  F063         	call	_StartRTS
  6083                           ;main.c: 2679: if(M._ZMKCOCW) return;
  6084  003352  0103               	movlb	(_M+1) shr (0+8)
  6085  003354  B307               	btfsc	(_M+1)& (0+255),1,b
  6086  003356  0012               	return	
  6087                           ;main.c: 2680: if(!M._WYM_ODP)
  6088  003358  0103               	movlb	(_M+6) shr (0+8)
  6089  00335A  B50C               	btfsc	(_M+6)& (0+255),2,b
  6090  00335C  D007               	goto	l684
  6091                           ;main.c: 2681: {
  6092  00335E  BB09               	btfsc	(_M+3)& (0+255),5,b
  6093  003360  D00A               	goto	l686
  6094  003362  0E0F               	movlw	15
  6095  003364  EC50  F063         	call	_RdPrt
  6096  003368  E306               	bnc	l686
  6097  00336A  D002               	goto	L10
  6098                           ;main.c: 2683: {
  6099                           ;main.c: 2685: }
  6100  00336C                     l684:
  6101                           ;main.c: 2687: else
  6102  00336C  0103               	movlb	(_M+6) shr (0+8)
  6103  00336E  950C               	bcf	(_M+6)& (0+255),2,b
  6104  003370                     L10:
  6105                           ;main.c: 2690: M.ODP=1;
  6106  003370  0E01               	movlw	1
  6107  003372  CFE8 F325          	movff	wreg,_M+31
  6108  003376                     l686:
  6109                           ;main.c: 2691: }
  6110  003376  EE03  F025         	lfsr	0,_M+31
  6111  00337A  50EF               	movf	indf0,w,c
  6112  00337C  B4D8               	btfsc	status,2,c
  6113  00337E  0012               	return	
  6114                           ;main.c: 2693: {
  6115  003380  0103               	movlb	(_M+6) shr (0+8)
  6116  003382  830C               	bsf	(_M+6)& (0+255),1,b
  6117                           ;main.c: 2696: M._RUSZ_48=0;
  6118  003384  9707               	bcf	(_M+1)& (0+255),3,b
  6119                           ;main.c: 2697: M.R48=0;
  6120  003386  6B13               	clrf	(_M+13)& (0+255),b
  6121                           ;main.c: 2698: StartRTG(0);
  6122  003388  0E00               	movlw	0
  6123  00338A  EC29  F064         	call	_StartRTG
  6124                           ;main.c: 2700: M._RUSZ_48Z3=0;
  6125  00338E  0103               	movlb	(_M+1) shr (0+8)
  6126  003390  9907               	bcf	(_M+1)& (0+255),4,b
  6127                           ;main.c: 2701: M.R48Z3=0;
  6128  003392  6B14               	clrf	(_M+14)& (0+255),b
  6129                           ;main.c: 2702: StartRTG(2);
  6130  003394  0E02               	movlw	2
  6131  003396  EC29  F064         	call	_StartRTG
  6132                           ;main.c: 2704: M._WYLACZ=0;
  6133  00339A  0103               	movlb	(_M+1) shr (0+8)
  6134  00339C  9107               	bcf	(_M+1)& (0+255),0,b
  6135                           ;main.c: 2705: M.WYL=0;
  6136  00339E  6B17               	clrf	(_M+17)& (0+255),b
  6137                           ;main.c: 2706: }
  6138  0033A0  0012               	return	
  6139  0033A2                     l688:
  6140                           ;main.c: 2708: }
  6141                           ;main.c: 2711: {
  6142  0033A2  010E               	movlb	F2494 shr (0+8)
  6143  0033A4  5374               	movf	F2494& (0+255),f,b
  6144  0033A6  E103               	bnz	l689
  6145  0033A8  ECBA  F011         	call	_ToObiegCO	;wreg free
  6146  0033AC  D002               	goto	l690
  6147  0033AE                     l689:
  6148                           ;main.c: 2713: else ToObiegCW();
  6149  0033AE  ECD4  F011         	call	_ToObiegCW	;wreg free
  6150  0033B2                     l690:
  6151                           ;main.c: 2714: if(M._ZMKCOCW) return;
  6152  0033B2  0103               	movlb	(_M+1) shr (0+8)
  6153  0033B4  B307               	btfsc	(_M+1)& (0+255),1,b
  6154  0033B6  0012               	return	
  6155                           ;main.c: 2715: PMP.APROC=99;
  6156  0033B8  0E63               	movlw	99
  6157  0033BA  CFE8 F2F3          	movff	wreg,_PMP+2
  6158                           ;main.c: 2716: WritePWM2(ProcToPmpPwm(PMP.APROC)
      +                          );
  6159  0033BE  C2F3  FFE8         	movff	_PMP+2,wreg
  6160  0033C2  EC8D  F058         	call	_ProcToPmpPwm
  6161  0033C6  ECEC  F067         	call	_WritePWM2
  6162                           ;main.c: 2717: RD2=1;
  6163  0033CA  8483               	bsf	3971,2,c	;volatile
  6164                           ;main.c: 2718: if(RTS(5)<15) return;
  6165  0033CC  0E05               	movlw	5
  6166  0033CE  ECE7  F063         	call	_RTS
  6167  0033D2  6E00               	movwf	btemp,c
  6168  0033D4  0E0F               	movlw	15
  6169  0033D6  5C00               	subwf	btemp,w,c
  6170  0033D8  A0D8               	btfss	status,0,c
  6171  0033DA  0012               	return	
  6172                           ;main.c: 2719: StartRTS(5);
  6173  0033DC  0E05               	movlw	5
  6174  0033DE  ECD5  F063         	call	_StartRTS
  6175                           ;main.c: 2720: M.ODP=2;
  6176  0033E2  0E02               	movlw	2
  6177  0033E4  CFE8 F325          	movff	wreg,_M+31
  6178                           ;main.c: 2721: break;
  6179  0033E8  0C02               	retlw	2
  6180  0033EA                     l693:
  6181                           ;main.c: 2722: }
  6182                           ;main.c: 2724: {
  6183  0033EA  0103               	movlb	(_M+1) shr (0+8)
  6184  0033EC  B307               	btfsc	(_M+1)& (0+255),1,b
  6185  0033EE  0012               	return	
  6186                           ;main.c: 2726: PMP.APROC=0;
  6187  0033F0  0102               	movlb	(_PMP+2) shr (0+8)
  6188  0033F2  6BF3               	clrf	(_PMP+2)& (0+255),b
  6189                           ;main.c: 2727: WritePWM2(ProcToPmpPwm(PMP.APROC)
      +                          );
  6190  0033F4  C2F3  FFE8         	movff	_PMP+2,wreg
  6191  0033F8  EC8D  F058         	call	_ProcToPmpPwm
  6192  0033FC  ECEC  F067         	call	_WritePWM2
  6193                           ;main.c: 2728: RD2=0;
  6194  003400  9483               	bcf	3971,2,c	;volatile
  6195                           ;main.c: 2729: if(RTS(5)<15) return;
  6196  003402  0E05               	movlw	5
  6197  003404  ECE7  F063         	call	_RTS
  6198  003408  6E00               	movwf	btemp,c
  6199  00340A  0E0F               	movlw	15
  6200  00340C  5C00               	subwf	btemp,w,c
  6201  00340E  A0D8               	btfss	status,0,c
  6202  003410  0012               	return	
  6203                           ;main.c: 2730: StartRTS(5);
  6204  003412  0E05               	movlw	5
  6205  003414  ECD5  F063         	call	_StartRTS
  6206                           ;main.c: 2731: M.LICZNIK_ODP++;
  6207  003418  0103               	movlb	(_M+10) shr (0+8)
  6208  00341A  2B10               	incf	(_M+10)& (0+255),f,b
  6209                           ;main.c: 2732: if(M.LICZNIK_ODP<6)
  6210  00341C  0E06               	movlw	6
  6211  00341E  6110               	cpfslt	(_M+10)& (0+255),b
  6212  003420  D011               	goto	l696
  6213                           ;main.c: 2733: {
  6214  003422  EE01  F0C2         	lfsr	0,_DtKNF+14
  6215  003426  50EF               	movf	indf0,w,c
  6216  003428  E103               	bnz	u10220
  6217                           ;main.c: 2735: {
  6218                           ;main.c: 2737: }
  6219                           ;main.c: 2738: else
  6220  00342A  010E               	movlb	F2494 shr (0+8)
  6221  00342C  5374               	movf	F2494& (0+255),f,b
  6222  00342E  E003               	bz	l699
  6223  003430                     u10220:
  6224  003430  010E               	movlb	F2494 shr (0+8)
  6225  003432  6B74               	clrf	F2494& (0+255),b
  6226  003434  D003               	goto	l698
  6227  003436                     l699:
  6228                           ;main.c: 2741: else obg=1;
  6229  003436  0E01               	movlw	1
  6230  003438  CFE8 FE74          	movff	wreg,F2494
  6231  00343C                     l698:
  6232                           ;main.c: 2742: }
  6233  00343C  0E01               	movlw	1
  6234  00343E  CFE8 F325          	movff	wreg,_M+31
  6235                           ;main.c: 2744: }
  6236  003442  0C01               	retlw	1
  6237  003444                     l696:
  6238                           ;main.c: 2745: else
  6239  003444  0103               	movlb	(_M+6) shr (0+8)
  6240  003446  910C               	bcf	(_M+6)& (0+255),0,b
  6241                           ;main.c: 2748: M._PROC_ODP=0;
  6242  003448  930C               	bcf	(_M+6)& (0+255),1,b
  6243                           ;main.c: 2749: M._WYM_ODP=0;
  6244  00344A  950C               	bcf	(_M+6)& (0+255),2,b
  6245                           ;main.c: 2750: M.LICZNIK_ODP=0;
  6246  00344C  6B10               	clrf	(_M+10)& (0+255),b
  6247                           ;main.c: 2751: M.ODP=0;
  6248  00344E  6B25               	clrf	(_M+31)& (0+255),b
  6249                           ;main.c: 2753: ToObiegCO();
  6250  003450  ECBA  F011         	call	_ToObiegCO	;wreg free
  6251                           ;main.c: 2754: RD2=1;
  6252  003454  8483               	bsf	3971,2,c	;volatile
  6253                           ;main.c: 2755: M._WYLACZ=1;
  6254  003456  0103               	movlb	(_M+1) shr (0+8)
  6255  003458  8107               	bsf	(_M+1)& (0+255),0,b
  6256                           ;main.c: 2756: M.WYL=0;
  6257  00345A  6B17               	clrf	(_M+17)& (0+255),b
  6258                           ;main.c: 2757: }
  6259  00345C  0012               	return	
  6260  00345E                     l681:
  6261  00345E  C325  FFE8         	movff	_M+31,wreg
  6262  003462  0A00               	xorlw	0
  6263  003464  E101 D770          	bz	l682
  6264  003468  0A01               	xorlw	1
  6265  00346A  E09B               	bz	l688
  6266  00346C  0A03               	xorlw	3
  6267  00346E  E0BD               	bz	l693
  6268  003470  0012               	return	
  6269                           ;main.c: 2761: }
  6270  003472                     __end_of_Odpowietrzenie:
  6271                           ;main.c: 2795: bit KeyRes(void)
  6272                           ;main.c: 2796: {
  6273  003472                     _KeyRes:
  6274  000000                     
  6275                           ;main.c: 2797: switch(M.KRS)
  6276  003472  D01B               	goto	l704
  6277  003474                     l705:
  6278                           ;main.c: 2798: {
  6279                           ;main.c: 2800: {
  6280  003474  0100               	movlb	_PFN shr (0+8)
  6281  003476  AB6B               	btfss	_PFN& (0+255),5,b
  6282  003478  D01E               	goto	l703
  6283                           ;main.c: 2802: {
  6284  00347A  0E01               	movlw	1
  6285  00347C  CFE8 F31F          	movff	wreg,_M+25
  6286                           ;main.c: 2804: StartRTS(8);
  6287  003480  0E08               	movlw	8
  6288  003482  ECD5  F063         	call	_StartRTS
  6289                           ;main.c: 2805: }
  6290  003486  D017               	goto	l703
  6291  003488                     l707:
  6292                           ;main.c: 2807: }
  6293                           ;main.c: 2809: {
  6294  003488  0100               	movlb	_PFN shr (0+8)
  6295  00348A  AB6B               	btfss	_PFN& (0+255),5,b
  6296  00348C  D00B               	goto	l708
  6297                           ;main.c: 2811: {
  6298  00348E  0E08               	movlw	8
  6299  003490  ECE7  F063         	call	_RTS
  6300  003494  6E00               	movwf	btemp,c
  6301  003496  0E01               	movlw	1
  6302  003498  5C00               	subwf	btemp,w,c
  6303  00349A  E202               	bc	l709
  6304  00349C  90D8               	bcf	status,0,c
  6305  00349E  0012               	return	
  6306  0034A0                     l709:
  6307                           ;main.c: 2813: return 1;
  6308  0034A0  80D8               	bsf	status,0,c
  6309  0034A2  0012               	return	
  6310  0034A4                     l708:
  6311                           ;main.c: 2816: else
  6312  0034A4  0103               	movlb	(_M+25) shr (0+8)
  6313  0034A6  6B1F               	clrf	(_M+25)& (0+255),b
  6314                           ;main.c: 2819: }
  6315  0034A8  D006               	goto	l703
  6316  0034AA                     l704:
  6317  0034AA  C31F  FFE8         	movff	_M+25,wreg
  6318  0034AE  0A00               	xorlw	0
  6319  0034B0  E0E1               	bz	l705
  6320  0034B2  0A01               	xorlw	1
  6321  0034B4  E0E9               	bz	l707
  6322  0034B6                     l703:
  6323                           ;main.c: 2822: return 0;
  6324  0034B6  90D8               	bcf	status,0,c
  6325  0034B8  0012               	return	
  6326                           ;main.c: 2823: }
  6327  0034BA                     __end_of_KeyRes:
  6328                           ;main.c: 2827: void VZPauza(void)
  6329                           ;main.c: 2828: {
  6330  0034BA                     _VZPauza:
  6331  000000                     
  6332                           ;main.c: 2829: StartRTS(2);
  6333  0034BA  0E02               	movlw	2
  6334  0034BC  ECD5  F063         	call	_StartRTS
  6335  0034C0                     l713:
  6336                           ;main.c: 2830: while(1)
  6337                           ;main.c: 2831: {
  6338  0034C0  0004               	clrwdt		;#
  6339                           ;main.c: 2833: if(M.ERR_BTY==2)
  6340  0034C2  C311  FFE8         	movff	_M+11,wreg
  6341  0034C6  0A02               	xorlw	2
  6342                           ;main.c: 2834: {
  6343  0034C8  0E02               	movlw	2
  6344  0034CA  E108               	bnz	L27
  6345  0034CC  ECE7  F063         	call	_RTS
  6346  0034D0  6E00               	movwf	btemp,c
  6347  0034D2  0E03               	movlw	3
  6348  0034D4                     L8:
  6349  0034D4  5C00               	subwf	btemp,w,c
  6350  0034D6  B0D8               	btfsc	status,0,c
  6351  0034D8  0012               	return	
  6352  0034DA  D7F2               	goto	l713
  6353                           ;main.c: 2836: }
  6354                           ;main.c: 2837: else
  6355  0034DC                     L27:
  6356  0034DC  ECE7  F063         	call	_RTS
  6357  0034E0  6E00               	movwf	btemp,c
  6358  0034E2  0E02               	movlw	2
  6359  0034E4  D7F7               	goto	L8
  6360                           ;main.c: 2840: }
  6361  0034E6                     __end_of_VZPauza:
  6362                           ;main.c: 2846: void ErrPTG(void)
  6363                           ;main.c: 2847: {
  6364  0034E6                     _ErrPTG:
  6365  000000                     
  6366                           ;main.c: 2851: GrzejOFF();
  6367  0034E6  EC8D  F014         	call	_GrzejOFF	;wreg free
  6368                           ;main.c: 2852: VZPauza();
  6369  0034EA  DFE7               	call	_VZPauza	;wreg free
  6370                           ;main.c: 2853: if(DtKNF.robg==0)
  6371  0034EC  EE01  F0C9         	lfsr	0,_DtKNF+21
  6372  0034F0  50EF               	movf	indf0,w,c
  6373  0034F2  E10C               	bnz	l720
  6374                           ;main.c: 2854: {
  6375  0034F4  C311  FFE8         	movff	_M+11,wreg
  6376  0034F8  0A05               	xorlw	5
  6377  0034FA  E108               	bnz	l720
  6378                           ;main.c: 2856: {
  6379  0034FC  0EC0               	movlw	192
  6380  0034FE  0100               	movlb	__Lparam shr (0+8)
  6381  003500  6FAA               	movwf	?_eeprom_write^(__Lparam& (0+65280)),b
  6382  003502  6BAB               	clrf	(?_eeprom_write+1)^(__Lparam& (0+65280)),b
  6383  003504  C311  F0AC         	movff	_M+11,?_eeprom_write+2
  6384  003508  EC13  F06D         	call	_eeprom_write	;wreg free
  6385  00350C                     l720:
  6386                           ;main.c: 2858: }
  6387  00350C  0E00               	movlw	0
  6388  00350E  0103               	movlb	(_M+11) shr (0+8)
  6389  003510  6511               	cpfsgt	(_M+11)& (0+255),b
  6390  003512  D004               	goto	u10331
  6391  003514  0E04               	movlw	4
  6392  003516  6111               	cpfslt	(_M+11)& (0+255),b
  6393  003518  D001               	goto	u10331
  6394  00351A  D008               	goto	u10360
  6395  00351C                     u10331:
  6396  00351C  C311  FFE8         	movff	_M+11,wreg
  6397  003520  0A07               	xorlw	7
  6398  003522  E004               	bz	u10360
  6399  003524  C311  FFE8         	movff	_M+11,wreg
  6400  003528  0A0D               	xorlw	13
  6401  00352A  E108               	bnz	l722
  6402  00352C                     u10360:
  6403  00352C  0EC0               	movlw	192
  6404  00352E  0100               	movlb	__Lparam shr (0+8)
  6405  003530  6FAA               	movwf	?_eeprom_write^(__Lparam& (0+65280)),b
  6406  003532  6BAB               	clrf	(?_eeprom_write+1)^(__Lparam& (0+65280)),b
  6407  003534  C311  F0AC         	movff	_M+11,?_eeprom_write+2
  6408  003538  EC13  F06D         	call	_eeprom_write	;wreg free
  6409  00353C                     l722:
  6410                           ;main.c: 2861: M._RUSZ_POMPE=0;
  6411  00353C  0103               	movlb	(_M+2) shr (0+8)
  6412  00353E  9308               	bcf	(_M+2)& (0+255),1,b
  6413                           ;main.c: 2862: M._ROZRUCH=0;
  6414  003540  9507               	bcf	(_M+1)& (0+255),2,b
  6415                           ;main.c: 2863: M._MODULUJ=0;
  6416  003542  9908               	bcf	(_M+2)& (0+255),4,b
  6417                           ;main.c: 2865: M._BLOKUJ_ODP=0;
  6418  003544  910C               	bcf	(_M+6)& (0+255),0,b
  6419                           ;main.c: 2866: M._PROC_ODP=0;
  6420  003546  930C               	bcf	(_M+6)& (0+255),1,b
  6421                           ;main.c: 2867: M._WYM_ODP=0;
  6422  003548  950C               	bcf	(_M+6)& (0+255),2,b
  6423                           ;main.c: 2869: WritePWM(0);
  6424  00354A  0E00               	movlw	0
  6425  00354C  ECDF  F067         	call	_WritePWM
  6426                           ;main.c: 2870: if(!M._WYLACZ)
  6427  003550  0103               	movlb	(_M+1) shr (0+8)
  6428  003552  B107               	btfsc	(_M+1)& (0+255),0,b
  6429  003554  D013               	goto	l723
  6430                           ;main.c: 2871: {
  6431  003556  6B17               	clrf	(_M+17)& (0+255),b
  6432                           ;main.c: 2873: switch(DtKNF.tpkt)
  6433  003558  D007               	goto	l725
  6434  00355A                     l727:
  6435                           ;main.c: 2876: case 3:
  6436  00355A  0103               	movlb	(_M+1) shr (0+8)
  6437  00355C  B307               	btfsc	(_M+1)& (0+255),1,b
  6438  00355E  D00D               	goto	u10410
  6439                           ;main.c: 2879: else
  6440  003560                     l732:
  6441  003560  0103               	movlb	(_M+1) shr (0+8)
  6442                           ;main.c: 2886: else
  6443  003562  A483               	btfss	3971,2,c	;volatile
  6444  003564  D00C               	goto	L29
  6445  003566  D009               	goto	u10410
  6446                           ;main.c: 2888: break;
  6447  003568                     l725:
  6448  003568  C1C2  FFE8         	movff	_DtKNF+14,wreg
  6449  00356C  0A00               	xorlw	0
  6450  00356E  E0F5               	bz	l727
  6451  003570  0A03               	xorlw	3
  6452  003572  E0F3               	bz	l727
  6453                           ;main.c: 2881: break;
  6454                           ;main.c: 2882: }
  6455                           ;main.c: 2884: {
  6456  003574  0103               	movlb	(_M+1) shr (0+8)
  6457  003576  A307               	btfss	(_M+1)& (0+255),1,b
  6458  003578  D7F3               	goto	l732
  6459  00357A                     u10410:
  6460  00357A  8107               	bsf	(_M+1)& (0+255),0,b
  6461  00357C                     l723:
  6462  00357C  0103               	movlb	(_M+1) shr (0+8)
  6463  00357E                     L29:
  6464                           ;main.c: 2891: }
  6465  00357E  B683               	btfsc	3971,3,c	;volatile
  6466  003580  8D07               	bsf	(_M+1)& (0+255),6,b
  6467                           ;main.c: 2893: M._RUSZ_PWR=0;
  6468  003582  9B07               	bcf	(_M+1)& (0+255),5,b
  6469                           ;main.c: 2894: M.HVZ=0;
  6470  003584  6B20               	clrf	(_M+26)& (0+255),b
  6471                           ;main.c: 2895: M.KRS=0;
  6472  003586  6B1F               	clrf	(_M+25)& (0+255),b
  6473  003588                     l737:
  6474                           ;main.c: 2898: while(1)
  6475                           ;main.c: 2899: {
  6476  003588  0004               	clrwdt		;#
  6477                           ;main.c: 2901: BitSet2(&RSDT1.outSTAT2,7,0);
  6478  00358A  0100               	movlb	__Lparam shr (0+8)
  6479  00358C  0E3E               	movlw	low (_RSDT1+24)
  6480  00358E  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  6481  003590  0E03               	movlw	high (_RSDT1+24)
  6482  003592  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  6483  003594  0E07               	movlw	7
  6484  003596  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  6485  003598  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  6486  00359A  EC57  F06A         	call	_BitSet2	;wreg free
  6487                           ;main.c: 2902: BitSet2(&RSDT1.outSTAT0,1,0);
  6488  00359E  0100               	movlb	__Lparam shr (0+8)
  6489  0035A0  0E3C               	movlw	low (_RSDT1+22)
  6490  0035A2  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  6491  0035A4  0E03               	movlw	high (_RSDT1+22)
  6492  0035A6  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  6493  0035A8  0E01               	movlw	1
  6494  0035AA  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  6495  0035AC  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  6496  0035AE  EC57  F06A         	call	_BitSet2	;wreg free
  6497                           ;main.c: 2903: BitSet2(&RSDT1.outSTAT0,0,1);
  6498  0035B2  0100               	movlb	__Lparam shr (0+8)
  6499  0035B4  0E3C               	movlw	low (_RSDT1+22)
  6500  0035B6  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  6501  0035B8  0E03               	movlw	high (_RSDT1+22)
  6502  0035BA  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  6503  0035BC  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  6504  0035BE  0E01               	movlw	1
  6505  0035C0  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  6506  0035C2  EC57  F06A         	call	_BitSet2	;wreg free
  6507                           ;main.c: 2904: BitSet2(&RSDT1.outSTAT1,3,1);
  6508  0035C6  0100               	movlb	__Lparam shr (0+8)
  6509  0035C8  0E3D               	movlw	low (_RSDT1+23)
  6510  0035CA  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  6511  0035CC  0E03               	movlw	high (_RSDT1+23)
  6512  0035CE  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  6513  0035D0  0E03               	movlw	3
  6514  0035D2  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  6515  0035D4  0E01               	movlw	1
  6516  0035D6  6FAD               	movwf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  6517  0035D8  EC57  F06A         	call	_BitSet2	;wreg free
  6518                           ;main.c: 2905: ReceptDataLCD();
  6519  0035DC  ECDE  F060         	call	_ReceptDataLCD	;wreg free
  6520                           ;main.c: 2907: PomiarPCO();
  6521  0035E0  EC54  F037         	call	_PomiarPCO	;wreg free
  6522                           ;main.c: 2908: PomiarPCW();
  6523  0035E4  ECEE  F037         	call	_PomiarPCW	;wreg free
  6524                           ;main.c: 2909: PomiarPFN();
  6525  0035E8  ECD4  F038         	call	_PomiarPFN	;wreg free
  6526                           ;main.c: 2910: PomiarCO();
  6527  0035EC  EC38  F032         	call	_PomiarCO	;wreg free
  6528                           ;main.c: 2911: PomiarCW();
  6529  0035F0  ECA3  F034         	call	_PomiarCW	;wreg free
  6530                           ;main.c: 2912: PomiarZW();
  6531  0035F4  EC39  F035         	call	_PomiarZW	;wreg free
  6532                           ;main.c: 2913: FiltrPomiarowyCOCW();
  6533  0035F8  ECDF  F031         	call	_FiltrPomiarowyCOCW	;wreg free
  6534                           ;main.c: 2914: PomiarCS();
  6535  0035FC  ECC4  F039         	call	_PomiarCS	;wreg free
  6536                           ;main.c: 2915: PomiarIN();
  6537  003600  EC88  F034         	call	_PomiarIN	;wreg free
  6538                           ;main.c: 2916: PomiarVNT();
  6539  003604  EC7E  F048         	call	_PomiarVNT	;wreg free
  6540                           ;main.c: 2919: Proba48();
  6541  003608  DD9F               	call	_Proba48	;wreg free
  6542                           ;main.c: 2920: Proba48Z3();
  6543  00360A  DE01               	call	_Proba48Z3	;wreg free
  6544                           ;main.c: 2922: RefLCDData();
  6545  00360C  EC23  F00B         	call	_RefLCDData	;wreg free
  6546                           ;main.c: 2925: switch(DtKNF.tpkt)
  6547  003610  D08F               	goto	l740
  6548  003612                     l741:
  6549                           ;main.c: 2926: {
  6550                           ;main.c: 2928: {
  6551  003612  0103               	movlb	(_M+1) shr (0+8)
  6552  003614  B307               	btfsc	(_M+1)& (0+255),1,b
  6553  003616  D007               	goto	l742
  6554  003618  0E0D               	movlw	13
  6555  00361A  EC50  F063         	call	_RdPrt
  6556  00361E  E303               	bnc	l742
  6557  003620  ECBA  F011         	call	_ToObiegCO	;wreg free
  6558  003624  D00C               	goto	l743
  6559  003626                     l742:
  6560                           ;main.c: 2931: else
  6561  003626  0103               	movlb	(_M+1) shr (0+8)
  6562  003628  A307               	btfss	(_M+1)& (0+255),1,b
  6563  00362A  B107               	btfsc	(_M+1)& (0+255),0,b
  6564  00362C  D008               	goto	l743
  6565  00362E  B707               	btfsc	(_M+1)& (0+255),3,b
  6566  003630  D006               	goto	l743
  6567  003632  A483               	btfss	3971,2,c	;volatile
  6568  003634  D002               	goto	u10550
  6569  003636  0103               	movlb	(_M+1) shr (0+8)
  6570  003638  B907               	btfsc	(_M+1)& (0+255),4,b
  6571  00363A                     u10550:
  6572  00363A  ECD4  F011         	call	_ToObiegCW	;wreg free
  6573  00363E                     l743:
  6574                           ;main.c: 2934: if(!M._RUSZ_PWR&&!M._ZMKCOCW&&!RD
      +                          2&&!M._WYLACZ&&!M._RUSZ_48&&!M._RUSZ_48Z3)
  6575  00363E  0103               	movlb	(_M+1) shr (0+8)
  6576  003640  AB07               	btfss	(_M+1)& (0+255),5,b
  6577  003642  B307               	btfsc	(_M+1)& (0+255),1,b
  6578  003644  D07D               	goto	l739
  6579  003646  B483               	btfsc	3971,2,c	;volatile
  6580  003648  D07B               	goto	l739
  6581  00364A  0103               	movlb	(_M+1) shr (0+8)
  6582  00364C  B107               	btfsc	(_M+1)& (0+255),0,b
  6583  00364E  D078               	goto	l739
  6584  003650  0103               	movlb	(_M+1) shr (0+8)
  6585  003652  B707               	btfsc	(_M+1)& (0+255),3,b
  6586  003654  D075               	goto	l739
  6587  003656  0103               	movlb	(_M+1) shr (0+8)
  6588  003658  B907               	btfsc	(_M+1)& (0+255),4,b
  6589  00365A  D072               	goto	l739
  6590                           ;main.c: 2935: {
  6591  00365C  0103               	movlb	(_M+4) shr (0+8)
  6592  00365E  BD0A               	btfsc	(_M+4)& (0+255),6,b
  6593  003660  D06F               	goto	l739
  6594  003662  0E0D               	movlw	13
  6595  003664  EC50  F063         	call	_RdPrt
  6596  003668  D05E               	goto	L12
  6597                           ;main.c: 2937: {
  6598                           ;main.c: 2939: RD2=1;
  6599                           ;main.c: 2940: }
  6600  00366A                     l747:
  6601                           ;main.c: 2943: }
  6602                           ;main.c: 2945: {
  6603  00366A  0103               	movlb	(_M+1) shr (0+8)
  6604  00366C  B307               	btfsc	(_M+1)& (0+255),1,b
  6605  00366E  D007               	goto	l748
  6606  003670  0E0D               	movlw	13
  6607  003672  EC50  F063         	call	_RdPrt
  6608  003676  E303               	bnc	l748
  6609  003678  ECBA  F011         	call	_ToObiegCO	;wreg free
  6610  00367C  D014               	goto	l749
  6611  00367E                     l748:
  6612                           ;main.c: 2948: else
  6613  00367E  0103               	movlb	(_M+1) shr (0+8)
  6614  003680  B307               	btfsc	(_M+1)& (0+255),1,b
  6615  003682  D007               	goto	l750
  6616  003684  0E0A               	movlw	10
  6617  003686  EC50  F063         	call	_RdPrt
  6618  00368A  E303               	bnc	l750
  6619  00368C  ECD4  F011         	call	_ToObiegCW	;wreg free
  6620  003690  D00A               	goto	l749
  6621  003692                     l750:
  6622                           ;main.c: 2950: else
  6623  003692  0103               	movlb	(_M+1) shr (0+8)
  6624  003694  A307               	btfss	(_M+1)& (0+255),1,b
  6625  003696  B483               	btfsc	3971,2,c	;volatile
  6626  003698  D006               	goto	l749
  6627  00369A  B107               	btfsc	(_M+1)& (0+255),0,b
  6628  00369C  D004               	goto	l749
  6629  00369E  0103               	movlb	(_M+1) shr (0+8)
  6630  0036A0  A707               	btfss	(_M+1)& (0+255),3,b
  6631  0036A2  ECD4  F011         	call	_ToObiegCW	;wreg free
  6632  0036A6                     l749:
  6633                           ;main.c: 2953: if(!M._RUSZ_PWR&&!M._ZMKCOCW&&!RD
      +                          2&&!M._WYLACZ&&!M._RUSZ_48)
  6634  0036A6  0103               	movlb	(_M+1) shr (0+8)
  6635  0036A8  AB07               	btfss	(_M+1)& (0+255),5,b
  6636  0036AA  B307               	btfsc	(_M+1)& (0+255),1,b
  6637  0036AC  D049               	goto	l739
  6638  0036AE  B483               	btfsc	3971,2,c	;volatile
  6639  0036B0  D047               	goto	l739
  6640  0036B2  0103               	movlb	(_M+1) shr (0+8)
  6641  0036B4  B107               	btfsc	(_M+1)& (0+255),0,b
  6642  0036B6  D044               	goto	l739
  6643  0036B8  0103               	movlb	(_M+1) shr (0+8)
  6644  0036BA  B707               	btfsc	(_M+1)& (0+255),3,b
  6645  0036BC  D041               	goto	l739
  6646                           ;main.c: 2954: {
  6647  0036BE  0103               	movlb	(_M+4) shr (0+8)
  6648  0036C0  BD0A               	btfsc	(_M+4)& (0+255),6,b
  6649  0036C2  D004               	goto	u10941
  6650  0036C4  0E0D               	movlw	13
  6651  0036C6  EC50  F063         	call	_RdPrt
  6652  0036CA  E22E               	bc	u11200
  6653  0036CC                     u10941:
  6654  0036CC  0103               	movlb	(_M+4) shr (0+8)
  6655  0036CE  AD0A               	btfss	(_M+4)& (0+255),6,b
  6656  0036D0  D037               	goto	l739
  6657  0036D2  0E0A               	movlw	10
  6658  0036D4  EC50  F063         	call	_RdPrt
  6659  0036D8  D026               	goto	L12
  6660                           ;main.c: 2956: {
  6661                           ;main.c: 2958: RD2=1;
  6662                           ;main.c: 2959: }
  6663  0036DA                     l755:
  6664                           ;main.c: 2962: }
  6665                           ;main.c: 2964: {
  6666  0036DA  0103               	movlb	(_M+1) shr (0+8)
  6667  0036DC  B307               	btfsc	(_M+1)& (0+255),1,b
  6668  0036DE  D007               	goto	l756
  6669  0036E0  0E0D               	movlw	13
  6670  0036E2  EC50  F063         	call	_RdPrt
  6671  0036E6  E303               	bnc	l756
  6672  0036E8  ECBA  F011         	call	_ToObiegCO	;wreg free
  6673  0036EC  D00A               	goto	l757
  6674  0036EE                     l756:
  6675                           ;main.c: 2967: else
  6676  0036EE  0103               	movlb	(_M+1) shr (0+8)
  6677  0036F0  A307               	btfss	(_M+1)& (0+255),1,b
  6678  0036F2  B483               	btfsc	3971,2,c	;volatile
  6679  0036F4  D006               	goto	l757
  6680  0036F6  B107               	btfsc	(_M+1)& (0+255),0,b
  6681  0036F8  D004               	goto	l757
  6682  0036FA  0103               	movlb	(_M+1) shr (0+8)
  6683  0036FC  A707               	btfss	(_M+1)& (0+255),3,b
  6684  0036FE  ECD4  F011         	call	_ToObiegCW	;wreg free
  6685  003702                     l757:
  6686                           ;main.c: 2970: if(!M._RUSZ_PWR&&!M._ZMKCOCW&&!RD
      +                          2&&!M._WYLACZ&&!M._RUSZ_48)
  6687  003702  0103               	movlb	(_M+1) shr (0+8)
  6688  003704  AB07               	btfss	(_M+1)& (0+255),5,b
  6689  003706  B307               	btfsc	(_M+1)& (0+255),1,b
  6690  003708  D01B               	goto	l739
  6691  00370A  B483               	btfsc	3971,2,c	;volatile
  6692  00370C  D019               	goto	l739
  6693  00370E  0103               	movlb	(_M+1) shr (0+8)
  6694  003710  B107               	btfsc	(_M+1)& (0+255),0,b
  6695  003712  D016               	goto	l739
  6696  003714  0103               	movlb	(_M+1) shr (0+8)
  6697  003716  B707               	btfsc	(_M+1)& (0+255),3,b
  6698  003718  D013               	goto	l739
  6699                           ;main.c: 2971: {
  6700  00371A  0103               	movlb	(_M+4) shr (0+8)
  6701  00371C  BD0A               	btfsc	(_M+4)& (0+255),6,b
  6702  00371E  D010               	goto	l739
  6703  003720  0E0D               	movlw	13
  6704  003722  EC50  F063         	call	_RdPrt
  6705  003726                     L12:
  6706  003726  E30C               	bnc	l739
  6707  003728                     u11200:
  6708                           ;main.c: 2973: {
  6709  003728  0103               	movlb	(_M+1) shr (0+8)
  6710  00372A  8107               	bsf	(_M+1)& (0+255),0,b
  6711                           ;main.c: 2975: RD2=1;
  6712  00372C  8483               	bsf	3971,2,c	;volatile
  6713                           ;main.c: 2976: }
  6714  00372E  D008               	goto	l739
  6715  003730                     l740:
  6716  003730  C1C2  FFE8         	movff	_DtKNF+14,wreg
  6717  003734  0A00               	xorlw	0
  6718  003736  E099               	bz	l747
  6719  003738  0A03               	xorlw	3
  6720  00373A  E101 D76A          	bz	l741
  6721  00373E  D7CD               	goto	l755
  6722  003740                     l739:
  6723                           ;main.c: 2982: if(M._ZMKCOCW) ZmienKCOKCW();
  6724  003740  0103               	movlb	(_M+1) shr (0+8)
  6725  003742  B307               	btfsc	(_M+1)& (0+255),1,b
  6726  003744  DC08               	call	_ZmienKCOKCW	;wreg free
  6727                           ;main.c: 2983: if(M._WYLACZ) Wylacz();
  6728  003746  0103               	movlb	(_M+1) shr (0+8)
  6729  003748  B107               	btfsc	(_M+1)& (0+255),0,b
  6730  00374A  ECC2  F015         	call	_Wylacz	;wreg free
  6731                           ;main.c: 2984: if(M._VWYBIEG) VWybieg();
  6732  00374E  0103               	movlb	(_M+1) shr (0+8)
  6733  003750  BD07               	btfsc	(_M+1)& (0+255),6,b
  6734  003752  ECEC  F016         	call	_VWybieg	;wreg free
  6735                           ;main.c: 2985: if(M._RUSZ_48) Rusz48();
  6736  003756  0103               	movlb	(_M+1) shr (0+8)
  6737  003758  B707               	btfsc	(_M+1)& (0+255),3,b
  6738  00375A  DD0D               	call	_Rusz48	;wreg free
  6739                           ;main.c: 2986: if(M._RUSZ_48Z3) Rusz48Z3();
  6740  00375C  0103               	movlb	(_M+1) shr (0+8)
  6741  00375E  B907               	btfsc	(_M+1)& (0+255),4,b
  6742  003760  DD7A               	call	_Rusz48Z3	;wreg free
  6743                           ;main.c: 2989: if(RD2)
  6744  003762  A483               	btfss	3971,2,c	;volatile
  6745  003764  D004               	goto	l766
  6746                           ;main.c: 2990: {
  6747  003766  0E63               	movlw	99
  6748  003768  CFE8 F2F3          	movff	wreg,_PMP+2
  6749                           ;main.c: 2992: }
  6750  00376C  D002               	goto	l767
  6751  00376E                     l766:
  6752                           ;main.c: 2993: else
  6753  00376E  0102               	movlb	(_PMP+2) shr (0+8)
  6754  003770  6BF3               	clrf	(_PMP+2)& (0+255),b
  6755  003772                     l767:
  6756                           ;main.c: 2996: }
  6757  003772  C2F3  FFE8         	movff	_PMP+2,wreg
  6758  003776  EC8D  F058         	call	_ProcToPmpPwm
  6759  00377A  ECEC  F067         	call	_WritePWM2
  6760                           ;main.c: 3000: if(KeyRes())
  6761  00377E  DE79               	call	_KeyRes	;wreg free
  6762  003780  E201 D702          	bnc	l737
  6763                           ;main.c: 3001: {
  6764  003784  9683               	bcf	3971,3,c	;volatile
  6765                           ;main.c: 3003: RD2=0;
  6766  003786  9483               	bcf	3971,2,c	;volatile
  6767                           ;main.c: 3004: ToReset();
  6768  003788  D801               	call	_ToReset	;wreg free
  6769  00378A  D6FE               	goto	l737
  6770  00378C                     __end_of_ErrPTG:
  6771                           ;main.c: 3009: void ToReset(void)
  6772                           ;main.c: 3010: {
  6773  00378C                     _ToReset:
  6774  000000                     
  6775                           ;main.c: 3011: RD3=0;
  6776  00378C  9683               	bcf	3971,3,c	;volatile
  6777                           ;main.c: 3012: RD2=0;
  6778  00378E  9483               	bcf	3971,2,c	;volatile
  6779                           ;main.c: 3013: EndErr();
  6780  003790  ECE9  F069         	call	_EndErr	;wreg free
  6781                           ;main.c: 3014: BitSet2(&RSDT1.outSTAT0,0,0);
  6782  003794  0100               	movlb	__Lparam shr (0+8)
  6783  003796  0E3C               	movlw	low (_RSDT1+22)
  6784  003798  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  6785  00379A  0E03               	movlw	high (_RSDT1+22)
  6786  00379C  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  6787  00379E  6BAC               	clrf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  6788  0037A0  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  6789  0037A2  EC57  F06A         	call	_BitSet2	;wreg free
  6790                           ;main.c: 3015: BitSet2(&RSDT1.outSTAT0,1,0);
  6791  0037A6  0100               	movlb	__Lparam shr (0+8)
  6792  0037A8  0E3C               	movlw	low (_RSDT1+22)
  6793  0037AA  6FAA               	movwf	?_BitSet2^(__Lparam& (0+65280)),b
  6794  0037AC  0E03               	movlw	high (_RSDT1+22)
  6795  0037AE  6FAB               	movwf	(?_BitSet2+1)^(__Lparam& (0+65280)),b
  6796  0037B0  0E01               	movlw	1
  6797  0037B2  6FAC               	movwf	(?_BitSet2+2)^(__Lparam& (0+65280)),b
  6798  0037B4  6BAD               	clrf	(?_BitSet2+3)^(__Lparam& (0+65280)),b
  6799  0037B6  EC57  F06A         	call	_BitSet2	;wreg free
  6800                           ;main.c: 3016: eeprom_write(0x00C0,0x00);
  6801  0037BA  0EC0               	movlw	192
  6802  0037BC  0100               	movlb	__Lparam shr (0+8)
  6803  0037BE  6FAA               	movwf	?_eeprom_write^(__Lparam& (0+65280)),b
  6804  0037C0  6BAB               	clrf	(?_eeprom_write+1)^(__Lparam& (0+65280)),b
  6805  0037C2  6BAC               	clrf	(?_eeprom_write+2)^(__Lparam& (0+65280)),b
  6806  0037C4  EC13  F06D         	call	_eeprom_write	;wreg free
  6807                           ;main.c: 3017: StartRTS(2);
  6808  0037C8  0E02               	movlw	2
  6809  0037CA  ECD5  F063         	call	_StartRTS
  6810                           ;main.c: 3018: while(RTS(2)<1)
  6811  0037CE                     l770:
  6812  0037CE  0E02               	movlw	2
  6813  0037D0  ECE7  F063         	call	_RTS
  6814  0037D4  6E00               	movwf	btemp,c
  6815  0037D6  0E01               	movlw	1
  6816  0037D8  5C00               	subwf	btemp,w,c
  6817  0037DA  E204               	bc	l773
  6818                           ;main.c: 3019: {
  6819  0037DC  0004               	clrwdt		;#
  6820                           ;main.c: 3021: ReceptDataLCD();
  6821  0037DE  ECDE  F060         	call	_ReceptDataLCD	;wreg free
  6822  0037E2  D7F5               	goto	l770
  6823                           ;main.c: 3022: }
  6824  0037E4                     l773:
  6825  0037E4  D7FF               	goto	l773
  6826  0037E6                     __end_of_ToReset:
  6827                           ;main.c: 3027: void InitGlobal(void)
  6828                           ;main.c: 3028: {
  6829  0037E6                     _InitGlobal:
  6830  000000                     
  6831                           ;main.c: 3030: IPEN=1;
  6832  0037E6  8ED0               	bsf	4048,7,c
  6833                           ;main.c: 3032: GIEH=1;
  6834  0037E8  8EF2               	bsf	intcon,7,c
  6835                           ;main.c: 3033: GIEL=1;
  6836  0037EA  8CF2               	bsf	intcon,6,c
  6837                           ;main.c: 3034: }
  6838  0037EC  0012               	return	
  6839  0037EE                     __end_of_InitGlobal:
  6840  000000                     
  6841  000000                     
  6842  000000                     
  6843  000000                     
  6844  000000                     
  6845  000000                     
  6846  000000                     
  6847  000000                     
  6848  000000                     
  6849  000000                     
  6850  000000                     
  6851  000000                     
  6852  000000                     
  6853  000000                     
  6854  000000                     
  6855  000000                     
  6856  000000                     
  6857  000000                     
  6858  000000                     
  6859  000000                     
  6860  000000                     
  6861  000000                     
  6862  000000                     
  6863  000000                     
  6864  000000                     
  6865  000000                     
  6866  000000                     
  6867  000000                     
  6868  000000                     
  6869  000000                     
  6870  000000                     
  6871  000000                     
  6872  000000                     
  6873  000000                     
  6874  000000                     
  6875  000000                     
  6876  000000                     
  6877  000000                     
  6878  000000                     
  6879  000000                     
  6880  000000                     
  6881  000000                     
  6882  000000                     
  6883  000000                     
  6884  000000                     
  6885  000000                     
  6886  000000                     
  6887  000000                     
  6888  000000                     
  6889  000000                     
  6890  000000                     
  6891  000000                     
  6892  000000                     
  6893  000000                     
  6894  000000                     
  6895  000000                     
  6896  000000                     
  6897  000000                     
  6898  000000                     
  6899  000000                     
  6900  000000                     
  6901  000000                     
  6902  000000                     
  6903  000000                     
  6904  000000                     
  6905  000000                     
  6906  000000                     
  6907  000000                     
  6908  000000                     
  6909  000000                     
  6910  000000                     
  6911  000000                     
  6912  000000                     
  6913  000000                     
  6914  000000                     
  6915  000000                     
  6916  000000                     
  6917  000000                     
  6918  000000                     
  6919  000000                     
  6920  000000                     
  6921  000000                     
  6922  000000                     
  6923  000000                     
  6924  000000                     
  6925  000000                     
  6926  000000                     
  6927  000000                     
  6928  000000                     
  6929  000000                     
  6930  000000                     
  6931  000000                     
  6932  000000                     
  6933  000000                     
  6934  000000                     
  6935  000000                     
  6936  000000                     
  6937  000000                     
  6938  000000                     
  6939  000000                     
  6940  000000                     
  6941  000000                     
  6942  000000                     
  6943  000000                     
  6944  000000                     
  6945  000000                     
  6946  000000                     
  6947  000000                     
  6948  000000                     
  6949  000000                     
  6950  000000                     
  6951  000000                     
  6952  000000                     
  6953  000000                     
  6954  000000                     
  6955  000000                     
  6956  000000                     
  6957  000000                     
  6958  000000                     
  6959  000000                     
  6960  000000                     
  6961  000000                     
  6962  000000                     
  6963  000000                     
  6964  000000                     
  6965  000000                     
  6966  000000                     
  6967  000000                     
  6968  000000                     
  6969  000000                     
  6970  000000                     
  6971  000000                     
  6972  000000                     
  6973  000000                     
  6974  000000                     
  6975  000000                     
  6976  000000                     
  6977  000000                     
  6978  000000                     
  6979  000000                     
  6980  000000                     
  6981  000000                     
  6982  000000                     
  6983  000000                     
  6984  000000                     
  6985  000000                     
  6986  000000                     
  6987  000000                     
  6988  000000                     
  6989  000000                     
  6990  000000                     
  6991  000000                     
  6992  000000                     
  6993  000000                     
  6994  000000                     
  6995  000000                     
  6996  000000                     
  6997  000000                     
  6998  000000                     
  6999  000000                     
  7000  000000                     
  7001  000000                     
  7002  000000                     
  7003  000000                     
  7004  000000                     
  7005  000000                     
  7006  000000                     
  7007  000000                     
  7008  000000                     
  7009  000000                     
  7010  000000                     
  7011  000000                     
  7012  000000                     
  7013  000000                     
  7014  000000                     
  7015  000000                     
  7016  000000                     
  7017  000000                     
  7018  000000                     
  7019  000000                     
  7020  000000                     
  7021  000000                     
  7022  000000                     
  7023  000000                     
  7024  000000                     
  7025  000000                     
  7026  000000                     
  7027  000000                     
  7028  000000                     
  7029  000000                     
  7030  000000                     
  7031  000000                     
  7032  000000                     
  7033  000000                     
  7034  000000                     
  7035  000000                     
  7036  000000                     
  7037  000000                     
  7038  000000                     
  7039  000000                     
  7040  000000                     
  7041  000000                     
  7042  000000                     
  7043  000000                     
  7044  000000                     
  7045  000000                     
  7046  000000                     
  7047  000000                     
  7048  000000                     
  7049  000000                     
  7050  000000                     
  7051  000000                     
  7052  000000                     
  7053  000000                     
  7054  000000                     
  7055  000000                     
  7056  000000                     
  7057  000000                     
  7058  000000                     
  7059  000000                     
  7060  000000                     
  7061  000000                     
  7062  000000                     
  7063  000000                     
  7064  000000                     
  7065  000000                     
  7066  000000                     
  7067  000000                     
  7068  000000                     
  7069  000000                     
  7070  000000                     
  7071  000000                     
  7072  000000                     
  7073  000000                     
  7074  000000                     
  7075  000000                     
  7076  000000                     
  7077  000000                     
  7078  000000                     
  7079  000000                     
  7080  000000                     
  7081  000000                     
  7082  000000                     
  7083  000000                     
  7084  000000                     
  7085  000000                     
  7086  000000                     
  7087  000000                     
  7088  000000                     
  7089  000000                     
  7090  000000                     
  7091  000000                     
  7092  000000                     
  7093  000000                     
  7094  000000                     
  7095  000000                     
  7096  000000                     
  7097  000000                     
  7098  000000                     
  7099  000000                     
  7100  000000                     
  7101  000000                     
  7102  000000                     
  7103  000000                     
  7104  000000                     
  7105  000000                     
  7106  000000                     
  7107  000000                     
  7108  000000                     
  7109  000000                     
  7110  000000                     
  7111  000000                     
  7112  000000                     
  7113  000000                     
  7114  000000                     
  7115  000000                     
  7116  000000                     
  7117  000000                     
  7118  000000                     
  7119  000000                     
  7120  000000                     
  7121  000000                     
  7122  000000                     
  7123  000000                     
  7124  000000                     
  7125  000000                     
  7126  000000                     
  7127  000000                     
  7128  000000                     
  7129  000000                     
  7130  000000                     
  7131  000000                     
  7132  000000                     
  7133  000000                     
  7134  000000                     
  7135  000000                     
  7136  000000                     
  7137  000000                     
  7138  000000                     
  7139  000000                     
  7140  000000                     
  7141  000000                     
  7142  000000                     
  7143  000000                     
  7144  000000                     
  7145  000000                     
  7146  000000                     
  7147  000000                     
  7148  000000                     
  7149  000000                     
  7150  000000                     
  7151  000000                     
  7152  000000                     
  7153  000000                     
  7154  000000                     
  7155  000000                     
  7156  000000                     
  7157  000000                     
  7158  000000                     
  7159  000000                     
  7160  000000                     
  7161  000000                     
  7162  000000                     
  7163  000000                     
  7164  000000                     
  7165  000000                     
  7166  000000                     
  7167  000000                     
  7168  000000                     
  7169  000000                     
  7170  000000                     
  7171  000000                     
  7172  000000                     
  7173  000000                     
  7174  000000                     
  7175  000000                     
  7176  000000                     
  7177  000000                     
  7178  000000                     
  7179  000000                     
  7180  000000                     
  7181  000000                     
  7182  000000                     
  7183  000000                     
  7184  000000                     
  7185  000000                     
  7186  000000                     
  7187  000000                     
  7188  000000                     
  7189  000000                     
  7190  000000                     
  7191  000000                     
  7192  000000                     
  7193  000000                     
  7194  000000                     
  7195  000000                     
  7196  000000                     
  7197  000000                     
  7198  000000                     
  7199  000000                     
  7200  000000                     
  7201  000000                     
  7202  000000                     
  7203  000000                     
  7204  000000                     
  7205  000000                     
  7206  000000                     
  7207  000000                     
  7208  000000                     
  7209  000000                     
  7210  000000                     
  7211  000000                     
  7212  000000                     
  7213  000000                     
  7214  000000                     
  7215  000000                     
  7216  000000                     
  7217  000000                     
  7218  000000                     
  7219  000000                     
  7220  000000                     
  7221  000000                     
  7222  000000                     
  7223  000000                     
  7224  000000                     
  7225  000000                     
  7226  000000                     
  7227  000000                     
  7228  000000                     
  7229  000000                     
  7230  000000                     
  7231  000000                     
  7232  000000                     
  7233  000000                     
  7234  000000                     
  7235  000000                     
  7236  000000                     
  7237  000000                     
  7238  000000                     
  7239  000000                     
  7240  000000                     
  7241  000000                     
  7242  000000                     
  7243  000000                     
  7244  000000                     
  7245  000000                     
  7246  000000                     
  7247  000000                     
  7248  000000                     
  7249  000000                     
  7250  000000                     
  7251  000000                     
  7252  000000                     
  7253  000000                     
  7254  000000                     
  7255  000000                     
  7256  000000                     
  7257  000000                     
  7258  000000                     
  7259  000000                     
  7260  000000                     
  7261  000000                     
  7262  000000                     
  7263  000000                     
  7264  000000                     
  7265  000000                     
  7266  000000                     
  7267  000000                     
  7268  000000                     
  7269  000000                     
  7270  000000                     
  7271  000000                     
  7272  000000                     
  7273  000000                     
  7274  000000                     
  7275  000000                     
  7276                           
  7277                           	psect	eeprom_data
  7278                           ;main.h: 115: extern void GoldenEye(void);
  7279                           ;main.h: 118: void InitGlobal(void);
  7280                           ;main.h: 119: void ErrDTF(void);
  7281                           ;main.h: 120: void ErrPTG(void);
  7282                           ;main.h: 121: void ToReset(void);
  7283                           ;main.h: 122: void DecWSW(void);
  7284                           ;main.h: 123: void DecERR(void);
  7285                           ;main.h: 124: void DecSTR(void);
  7286                           ;main.h: 125: void DecRozruch(void);
  7287                           ;main.h: 126: void SetRozruch(void);
  7288                           ;main.h: 127: void DecWylacz(void);
  7289                           ;main.h: 128: void SetWylacz(void);
  7290                           ;main.h: 129: void RuszPlomien(void);
  7291                           ;main.h: 130: void ReloadPlomien(void);
  7292                           ;main.h: 131: void RuszCiag(void);
  7293                           ;main.h: 132: void ReloadCiag(void);
  7294                           ;main.h: 133: void Proba48(void);
  7295                           ;main.h: 134: void Rusz48(void);
  7296                           ;main.h: 135: void Proba48Z3(void);
  7297                           ;main.h: 136: void Rusz48Z3(void);
  7298                           ;main.h: 137: void Rozruch(void);
  7299                           ;main.h: 138: void DecyzjaPLM(void);
  7300                           ;main.h: 139: void DecyzjaPLM2(void);
  7301                           ;main.h: 140: void VWybieg(void);
  7302                           ;main.h: 141: void ZmienKCOKCW(void);
  7303                           ;main.h: 142: void FunkcjaSerwisowa(void);
  7304                           ;main.h: 143: void KolejkaPobudzen(void);
  7305                           ;main.h: 144: void BlokadaL3(void);
  7306                           ;main.h: 145: void Blokada15S(void);
  7307                           ;main.h: 146: void ToObiegCW(void);
  7308                           ;main.h: 147: void ToObiegCO(void);
  7309                           ;main.h: 148: void Wylacz(void);
  7310                           ;main.h: 149: void RuszPWR(void);
  7311                           ;main.h: 150: void ClearData(void);
  7312                           ;main.h: 151: void SetLoMod(void);
  7313                           ;main.h: 152: void RestartFltPrt(void);
  7314                           ;main.h: 153: void ClearDiode(void);
  7315                           ;main.h: 154: void DecyzjaAntyLeg(void);
  7316                           ;main.h: 155: void DetekcjaPrzeplywuWG(void);
  7317                           ;main.h: 156: void OczekujNaPrzeplywWG(void);
  7318                           ;main.h: 157: void RefLCDData(void);
  7319                           ;main.h: 158: void GrzejON(void);
  7320                           ;main.h: 159: void GrzejOFF(void);
  7321                           ;main.h: 160: void KalibracjaWentylatora(void);
  7322                           ;main.h: 161: void KontrolaWentylatora(void);
  7323                           ;main.h: 162: void Odpowietrzenie(void);
  7324                           ;main.h: 163: void DecyzjaOdp(void);
  7325                           ;main.h: 165: extern void InitOsc(void);
  7326                           ;main.h: 167: extern void InitAC(void);
  7327                           ;main.h: 169: extern void InitWsw(void);
  7328                           ;main.h: 170: extern bit GetPoz(const unsigned c
      +                          har nrkol,const unsigned char nrpoz);
  7329                           ;main.h: 172: extern void InitPWM(void);
  7330                           ;main.h: 173: extern void WritePWM(const unsigne
      +                          d char tpwm);
  7331                           ;main.h: 174: extern void WritePWM2(const unsign
      +                          ed char tpwm);
  7332                           ;main.h: 176: extern void ClsScr(void);
  7333                           ;main.h: 177: extern void EndClsScr(void);
  7334                           ;main.h: 178: extern void TestScr(void);
  7335                           ;main.h: 179: extern void EndTestScr(void);
  7336                           ;main.h: 180: extern void ClsScr(void);
  7337                           ;main.h: 181: extern void EndClsScr(void);
  7338                           ;main.h: 182: extern void PrintErr(const unsigne
      +                          d char kod, const unsigned char pls);
  7339                           ;main.h: 183: extern void PrintErrCs(const unsig
      +                          ned char kod,const unsigned char cs, const unsig
      +                          ned char pls);
  7340                           ;main.h: 184: extern void PrintErrTm(const unsig
      +                          ned char kod,const unsigned char tm, const unsig
      +                          ned char pls);
  7341                           ;main.h: 185: extern void EndErr(void);
  7342                           ;main.h: 186: extern void PrintPR(const unsigned
      +                           char lkod,unsigned char nkod,unsigned char tryb
      +                          );
  7343                           ;main.h: 187: extern void EndPR(void);
  7344                           ;main.h: 188: extern void PrintNstCO(const unsig
      +                          ned char nst);
  7345                           ;main.h: 189: extern void PrintNstCW(const unsig
      +                          ned char nst);
  7346                           ;main.h: 190: extern void PrintNstKt(const unsig
      +                          ned char nst);
  7347                           ;main.h: 191: extern void EndNst(void);
  7348                           ;main.h: 192: extern void PrintL3(void);
  7349                           ;main.h: 193: extern void EndL3(void);
  7350                           ;main.h: 194: extern void PrintTdzCO(const unsig
      +                          ned char tm);
  7351                           ;main.h: 195: extern void EndTdzCO(void);
  7352                           ;main.h: 196: extern void PrintTdzCW(const unsig
      +                          ned char tm);
  7353                           ;main.h: 197: extern void EndTdzCW(void);
  7354                           ;main.h: 198: extern void PrintOFF(void);
  7355                           ;main.h: 199: extern void EndOFF(void);
  7356                           ;main.h: 200: extern void PrintCS(const unsigned
      +                           char cs);
  7357                           ;main.h: 201: extern void EndCS(void);
  7358                           ;main.h: 202: extern void PrintCW(const unsigned
      +                           char tm);
  7359                           ;main.h: 203: extern void EndCW(void);
  7360                           ;main.h: 204: extern void PrintCO(const unsigned
      +                           char tm);
  7361                           ;main.h: 205: extern void PrintHex(const unsigne
      +                          d char tm);
  7362                           ;main.h: 206: extern void SetDiode(unsigned char
      +                           nrd, unsigned char stn);
  7363                           ;main.h: 207: extern void RefreshNst(const unsig
      +                          ned char nst);
  7364                           ;main.h: 209: extern bit GetBit(const unsigned c
      +                          har data,const unsigned char nbit);
  7365                           ;main.h: 210: extern void BitSet(unsigned char *
      +                          data, const unsigned char nbit,const unsigned ch
      +                          ar bt);
  7366                           ;main.h: 211: extern void BitSet2(unsigned char 
      +                          *data, const unsigned char nbit,const unsigned c
      +                          har bt);
  7367                           ;main.h: 213: extern void StartRTG(const unsigne
      +                          d char Index);
  7368                           ;main.h: 214: extern unsigned char RTG(const uns
      +                          igned char Index);
  7369                           ;main.h: 215: extern void StartRTS(const unsigne
      +                          d char Index);
  7370                           ;main.h: 216: extern unsigned char RTS(const uns
      +                          igned char Index);
  7371                           ;main.h: 217: extern void StartRTdS(const unsign
      +                          ed char Index);
  7372                           ;main.h: 218: extern unsigned char RTdS(const un
      +                          signed char Index);
  7373                           ;main.h: 220: extern void InitTimer1(void);
  7374                           ;main.h: 222: extern void InitTimer3(void);
  7375                           ;main.h: 224: extern void InitPort(void);
  7376                           ;main.h: 225: extern bit RdPrt(const unsigned ch
      +                          ar Index);
  7377                           ;main.h: 226: extern void SetPrt(const unsigned 
      +                          char Index, const unsigned char nw);
  7378  F00000  63 63 62 62 61 60  	db	99,99,98,98,97,96,95,95	;#
      +       5F 5F              
  7379                           ;eeprom.h: 70: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "94" "," "93" "," "92" "," 
      +                          "92" "," "91" "," "90" "," "90" "," "89");
  7380  F00008  5E 5D 5C 5C 5B 5A  	db	94,93,92,92,91,90,90,89	;#
      +       5A 59              
  7381                           ;eeprom.h: 71: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "88" "," "88" "," "87" "," 
      +                          "87" "," "86" "," "85" "," "85" "," "84");
  7382  F00010  58 58 57 57 56 55  	db	88,88,87,87,86,85,85,84	;#
      +       55 54              
  7383                           ;eeprom.h: 72: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "84" "," "83" "," "82" "," 
      +                          "82" "," "81" "," "81" "," "80" "," "80");
  7384  F00018  54 53 52 52 51 51  	db	84,83,82,82,81,81,80,80	;#
      +       50 50              
  7385                           ;eeprom.h: 73: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "79" "," "79" "," "78" "," 
      +                          "77" "," "77" "," "76" "," "76" "," "75");
  7386  F00020  4F 4F 4E 4D 4D 4C  	db	79,79,78,77,77,76,76,75	;#
      +       4C 4B              
  7387                           ;eeprom.h: 74: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "75" "," "74" "," "74" "," 
      +                          "73" "," "73" "," "72" "," "72" "," "71");
  7388  F00028  4B 4A 4A 49 49 48  	db	75,74,74,73,73,72,72,71	;#
      +       48 47              
  7389                           ;eeprom.h: 75: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "71" "," "70" "," "70" "," 
      +                          "70" "," "69" "," "69" "," "68" "," "68");
  7390  F00030  47 46 46 46 45 45  	db	71,70,70,70,69,69,68,68	;#
      +       44 44              
  7391                           ;eeprom.h: 76: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "67" "," "67" "," "66" "," 
      +                          "66" "," "65" "," "65" "," "64" "," "64");
  7392  F00038  43 43 42 42 41 41  	db	67,67,66,66,65,65,64,64	;#
      +       40 40              
  7393                           ;eeprom.h: 77: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "64" "," "63" "," "63" "," 
      +                          "62" "," "62" "," "61" "," "61" "," "61");
  7394  F00040  40 3F 3F 3E 3E 3D  	db	64,63,63,62,62,61,61,61	;#
      +       3D 3D              
  7395                           ;eeprom.h: 78: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "60" "," "60" "," "59" "," 
      +                          "59" "," "58" "," "58" "," "57" "," "57");
  7396  F00048  3C 3C 3B 3B 3A 3A  	db	60,60,59,59,58,58,57,57	;#
      +       39 39              
  7397                           ;eeprom.h: 79: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "57" "," "56" "," "56" "," 
      +                          "55" "," "55" "," "54" "," "54" "," "54");
  7398  F00050  39 38 38 37 37 36  	db	57,56,56,55,55,54,54,54	;#
      +       36 36              
  7399                           ;eeprom.h: 80: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "53" "," "53" "," "52" "," 
      +                          "52" "," "52" "," "51" "," "51" "," "50");
  7400  F00058  35 35 34 34 34 33  	db	53,53,52,52,52,51,51,50	;#
      +       33 32              
  7401                           ;eeprom.h: 81: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "50" "," "49" "," "49" "," 
      +                          "49" "," "48" "," "48" "," "47" "," "47");
  7402  F00060  32 31 31 31 30 30  	db	50,49,49,49,48,48,47,47	;#
      +       2F 2F              
  7403                           ;eeprom.h: 82: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "46" "," "46" "," "46" "," 
      +                          "45" "," "45" "," "44" "," "44" "," "44");
  7404  F00068  2E 2E 2E 2D 2D 2C  	db	46,46,46,45,45,44,44,44	;#
      +       2C 2C              
  7405                           ;eeprom.h: 83: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "43" "," "43" "," "42" "," 
      +                          "42" "," "41" "," "41" "," "41" "," "40");
  7406  F00070  2B 2B 2A 2A 29 29  	db	43,43,42,42,41,41,41,40	;#
      +       29 28              
  7407                           ;eeprom.h: 84: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "40" "," "39" "," "39" "," 
      +                          "38" "," "38" "," "37" "," "37" "," "37");
  7408  F00078  28 27 27 26 26 25  	db	40,39,39,38,38,37,37,37	;#
      +       25 25              
  7409                           ;eeprom.h: 85: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "36" "," "36" "," "35" "," 
      +                          "35" "," "34" "," "34" "," "33" "," "33");
  7410  F00080  24 24 23 23 22 22  	db	36,36,35,35,34,34,33,33	;#
      +       21 21              
  7411                           ;eeprom.h: 86: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "32" "," "32" "," "31" "," 
      +                          "31" "," "30" "," "30" "," "29" "," "29");
  7412  F00088  20 20 1F 1F 1E 1E  	db	32,32,31,31,30,30,29,29	;#
      +       1D 1D              
  7413                           ;eeprom.h: 87: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "28" "," "28" "," "27" "," 
      +                          "27" "," "26" "," "26" "," "25" "," "24");
  7414  F00090  1C 1C 1B 1B 1A 1A  	db	28,28,27,27,26,26,25,24	;#
      +       19 18              
  7415                           ;eeprom.h: 88: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "24" "," "23" "," "23" "," 
      +                          "22" "," "22" "," "21" "," "21" "," "20");
  7416  F00098  18 17 17 16 16 15  	db	24,23,23,22,22,21,21,20	;#
      +       15 14              
  7417                           ;eeprom.h: 89: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "19" "," "19" "," "18" "," 
      +                          "17" "," "17" "," "16" "," "16" "," "15");
  7418  F000A0  13 13 12 11 11 10  	db	19,19,18,17,17,16,16,15	;#
      +       10 0F              
  7419                           ;eeprom.h: 90: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "14" "," "14" "," "13" "," 
      +                          "12" "," "11" "," "11" "," "10" "," "09");
  7420  F000A8  0E 0E 0D 0C 0B 0B  	db	14,14,13,12,11,11,10,9	;#
      +       0A 09              
  7421                           ;eeprom.h: 91: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "08" "," "07" "," "06" "," 
      +                          "06" "," "05" "," "04" "," "03" "," "02");
  7422  F000B0  08 07 06 06 05 04  	db	8,7,6,6,5,4,3,2	;#
      +       03 02              
  7423                           ;eeprom.h: 92: asm("\tpsect eeprom_data,class=EE
      +                          DATA"); asm("\tdb\t" "01" "," "00" "," "00" "," 
      +                          "00" "," "00" "," "00" "," "00" "," "00");
  7424  F000B8  01 00 00 00 00 00  	db	1,0,0,0,0,0,0,0	;#
      +       00 00              
  7425                           ;eeprom.h: 125: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "0" "," "45" "," "99" "," 
      +                          "99" "," "0" "," "2" "," "0" "," "0");
  7426  F000C0  00 2D 63 63 00 02  	db	0,45,99,99,0,2,0,0	;#
      +       00 00              
  7427                           ;eeprom.h: 126: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "1" "," "80" "," "60" "," 
      +                          "3" "," "2" "," "1" "," "12" "," "56");
  7428  F000C8  01 50 3C 03 02 01  	db	1,80,60,3,2,1,12,56	;#
      +       0C 38              
  7429                           ;eeprom.h: 128: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "1" "," "6" "," "50" "," "
      +                          1" "," "5" "," "0" "," "10" "," "99");
  7430  F000D0  01 06 32 01 05 00  	db	1,6,50,1,5,0,10,99	;#
      +       0A 63              
  7431                           ;eeprom.h: 129: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "0x05" "," "99" "," "5" ",
      +                          " "89" "," "0" "," "0" "," "0" "," "0");
  7432  F000D8  05 63 05 59 00 00  	db	5,99,5,89,0,0,0,0	;#
      +       00 00              
  7433                           ;eeprom.h: 133: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "0" "," "18" "," "20" "," 
      +                          "51" "," "38" "," "84" "," "48" "," "117");
  7434  F000E0  00 12 14 33 26 54  	db	0,18,20,51,38,84,48,117	;#
      +       30 75              
  7435                           ;eeprom.h: 134: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "56" "," "150" "," "62" ",
      +                          " "183" "," "67" "," "216" "," "71" "," "249");
  7436  F000E8  38 96 3E B7 43 D8  	db	56,150,62,183,67,216,71,249	;#
      +       47 F9              
  7437                           ;eeprom.h: 139: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "40" "," "40" "," "39" ","
      +                           "38" "," "38" "," "37" "," "36" "," "36");
  7438  F000F0  28 28 27 26 26 25  	db	40,40,39,38,38,37,36,36	;#
      +       24 24              
  7439                           ;eeprom.h: 140: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "35" "," "34" "," "34" ","
      +                           "33" "," "33" "," "32" "," "32" "," "31");
  7440  F000F8  23 22 22 21 21 20  	db	35,34,34,33,33,32,32,31	;#
      +       20 1F              
  7441                           ;eeprom.h: 141: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "31" "," "30" "," "30" ","
      +                           "29" "," "29" "," "28" "," "28" "," "27");
  7442  F00100  1F 1E 1E 1D 1D 1C  	db	31,30,30,29,29,28,28,27	;#
      +       1C 1B              
  7443                           ;eeprom.h: 142: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "27" "," "26" "," "26" ","
      +                           "25" "," "25" "," "24" "," "24" "," "23");
  7444  F00108  1B 1A 1A 19 19 18  	db	27,26,26,25,25,24,24,23	;#
      +       18 17              
  7445                           ;eeprom.h: 143: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "23" "," "22" "," "22" ","
      +                           "22" "," "21" "," "21" "," "20" "," "20");
  7446  F00110  17 16 16 16 15 15  	db	23,22,22,22,21,21,20,20	;#
      +       14 14              
  7447                           ;eeprom.h: 144: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "20" "," "19" "," "19" ","
      +                           "18" "," "18" "," "18" "," "17" "," "17");
  7448  F00118  14 13 13 12 12 12  	db	20,19,19,18,18,18,17,17	;#
      +       11 11              
  7449                           ;eeprom.h: 145: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "17" "," "16" "," "16" ","
      +                           "15" "," "15" "," "15" "," "14" "," "14");
  7450  F00120  11 10 10 0F 0F 0F  	db	17,16,16,15,15,15,14,14	;#
      +       0E 0E              
  7451                           ;eeprom.h: 146: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "14" "," "13" "," "13" ","
      +                           "13" "," "12" "," "12" "," "12" "," "11");
  7452  F00128  0E 0D 0D 0D 0C 0C  	db	14,13,13,13,12,12,12,11	;#
      +       0C 0B              
  7453                           ;eeprom.h: 147: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "11" "," "11" "," "10" ","
      +                           "10" "," "10" "," "9" "," "9" "," "9");
  7454  F00130  0B 0B 0A 0A 0A 09  	db	11,11,10,10,10,9,9,9	;#
      +       09 09              
  7455                           ;eeprom.h: 148: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "8" "," "8" "," "8" "," "7
      +                          " "," "7" "," "7" "," "6" "," "6");
  7456  F00138  08 08 08 07 07 07  	db	8,8,8,7,7,7,6,6	;#
      +       06 06              
  7457                           ;eeprom.h: 149: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "6" "," "5" "," "5" "," "5
      +                          " "," "4" "," "4" "," "4" "," "3");
  7458  F00140  06 05 05 05 04 04  	db	6,5,5,5,4,4,4,3	;#
      +       04 03              
  7459                           ;eeprom.h: 150: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "3" "," "3" "," "2" "," "2
      +                          " "," "2" "," "1" "," "1" "," "1");
  7460  F00148  03 03 02 02 02 01  	db	3,3,2,2,2,1,1,1	;#
      +       01 01              
  7461                           ;eeprom.h: 151: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "1" "," "0" "," "0" "," "0
      +                          " "," "-1" "," "-1" "," "-1" "," "-2");
  7462  F00150  01 00 00 00 FF FF  	db	1,0,0,0,-1,-1,-1,-2	;#
      +       FF FE              
  7463                           ;eeprom.h: 152: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-2" "," "-2" "," "-2" ","
      +                           "-3" "," "-3" "," "-3" "," "-4" "," "-4");
  7464  F00158  FE FE FE FD FD FD  	db	-2,-2,-2,-3,-3,-3,-4,-4	;#
      +       FC FC              
  7465                           ;eeprom.h: 153: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-4" "," "-5" "," "-5" ","
      +                           "-5" "," "-6" "," "-6" "," "-6" "," "-7");
  7466  F00160  FC FB FB FB FA FA  	db	-4,-5,-5,-5,-6,-6,-6,-7	;#
      +       FA F9              
  7467                           ;eeprom.h: 154: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-7" "," "-7" "," "-8" ","
      +                           "-8" "," "-8" "," "-9" "," "-9" "," "-9");
  7468  F00168  F9 F9 F8 F8 F8 F7  	db	-7,-7,-8,-8,-8,-9,-9,-9	;#
      +       F7 F7              
  7469                           ;eeprom.h: 155: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-9" "," "-10" "," "-10" "
      +                          ," "-10" "," "-11" "," "-11" "," "-11" "," "-12"
      +                          );
  7470  F00170  F7 F6 F6 F6 F5 F5  	db	-9,-10,-10,-10,-11,-11,-11,-12	;#
      +       F5 F4              
  7471                           ;eeprom.h: 156: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-12" "," "-13" "," "-13" 
      +                          "," "-13" "," "-13" "," "-14" "," "-14" "," "-14
      +                          ");
  7472  F00178  F4 F3 F3 F3 F3 F2  	db	-12,-13,-13,-13,-13,-14,-14,-14	;#
      +       F2 F2              
  7473                           ;eeprom.h: 157: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-15" "," "-15" "," "-16" 
      +                          "," "-16" "," "-16" "," "-17" "," "-17" "," "-17
      +                          ");
  7474  F00180  F1 F1 F0 F0 F0 EF  	db	-15,-15,-16,-16,-16,-17,-17,-17	;#
      +       EF EF              
  7475                           ;eeprom.h: 158: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-18" "," "-18" "," "-18" 
      +                          "," "-19" "," "-19" "," "-20" "," "-20" "," "-20
      +                          ");
  7476  F00188  EE EE EE ED ED EC  	db	-18,-18,-18,-19,-19,-20,-20,-20	;#
      +       EC EC              
  7477                           ;eeprom.h: 159: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-21" "," "-21" "," "-22" 
      +                          "," "-22" "," "-22" "," "-23" "," "-23" "," "-24
      +                          ");
  7478  F00190  EB EB EA EA EA E9  	db	-21,-21,-22,-22,-22,-23,-23,-24	;#
      +       E9 E8              
  7479                           ;eeprom.h: 160: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-24" "," "-25" "," "-25" 
      +                          "," "-25" "," "-26" "," "-26" "," "-27" "," "-27
      +                          ");
  7480  F00198  E8 E7 E7 E7 E6 E6  	db	-24,-25,-25,-25,-26,-26,-27,-27	;#
      +       E5 E5              
  7481                           ;eeprom.h: 161: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-28" "," "-28" "," "-29" 
      +                          "," "-29" "," "-30" "," "-30" "," "-31" "," "-31
      +                          ");
  7482  F001A0  E4 E4 E3 E3 E2 E2  	db	-28,-28,-29,-29,-30,-30,-31,-31	;#
      +       E1 E1              
  7483                           ;eeprom.h: 162: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-32" "," "-33" "," "-33" 
      +                          "," "-34" "," "-35" "," "-35" "," "-36" "," "-37
      +                          ");
  7484  F001A8  E0 DF DF DE DD DD  	db	-32,-33,-33,-34,-35,-35,-36,-37	;#
      +       DC DB              
  7485                           ;eeprom.h: 163: asm("\tpsect eeprom_data,class=E
      +                          EDATA"); asm("\tdb\t" "-37" "," "-38" "," "-39" 
      +                          "," "-40" "," "-40" "," "-40" "," "-40" "," "-40
      +                          ");
  7486  F001B0  DB DA D9 D8 D8 D8  	db	-37,-38,-39,-40,-40,-40,-40,-40	;#
      +       D8 D8              
  7487                           
  7488                           	psect	bigbss
  7489  000E73                     F2472:
  7490  000E73                     	ds	1
  7491  000E73                     F2494:
  7492  000E73                     	ds	1
  7493  000000                     
  7494  000000                     
  7495  000000                     
  7496  000000                     
  7497  000000                     
  7498  000000                     
  7499  000000                     
  7500  000000                     
  7501  000000                     
  7502  000000                     
  7503  000000                     
  7504  000000                     
  7505  000000                     
  7506  000000                     
  7507  000000                     
  7508  000000                     
  7509  000000                     
  7510  000000                     
  7511  000000                     
  7512  000000                     
  7513  000000                     
  7514  000000                     
  7515  000000                     
  7516  000000                     
  7517  000000                     
  7518  000000                     
  7519  000000                     
  7520  000000                     
  7521  000000                     
  7522  000000                     
  7523  000000                     
  7524  000000                     
  7525  000000                     
  7526  000000                     
  7527  000000                     
  7528  000000                     
  7529  000000                     
  7530  000000                     
  7531  000000                     
  7532  000000                     
  7533  000000                     
  7534  000000                     
  7535  000000                     
  7536  000000                     
  7537  000000                     
  7538  000000                     
  7539  000000                     
  7540  000000                     
  7541  000000                     
  7542  000000                     
  7543  000000                     
  7544  000000                     
  7545  000000                     
  7546  000000                     
  7547  000000                     
  7548  000000                     
  7549  000000                     
  7550  000000                     
  7551  000000                     
  7552  000000                     
  7553  000000                     
  7554  000000                     
  7555  000000                     
  7556  000000                     
  7557  000000                     
  7558  000000                     
  7559  000000                     
  7560  000000                     
  7561  000000                     
  7562  000000                     
  7563  000000                     
  7564  000000                     
  7565  000000                     
  7566  000000                     
  7567  000000                     
  7568  000000                     
  7569  000000                     
  7570  000000                     
  7571  000000                     
  7572  000000                     
  7573  000000                     
  7574  000000                     
  7575  000000                     
  7576  000000                     
  7577  000000                     
  7578  000000                     
  7579  000000                     
  7580  000000                     
  7581  000000                     
  7582  000000                     
  7583  000000                     
  7584  000000                     
  7585  000000                     
  7586  000000                     
  7587  000000                     
  7588  000000                     
  7589  000000                     
  7590  000000                     
  7591  000000                     
  7592  000000                     
  7593  000000                     
  7594  000000                     
  7595  000000                     
  7596  000000                     
  7597  000000                     
  7598  000000                     
  7599  000000                     
  7600  000000                     
  7601  000000                     
  7602  000000                     
  7603  000000                     
  7604  000000                     
  7605  000000                     
  7606  000000                     
  7607  000000                     
  7608  000000                     
  7609  000000                     
  7610  000000                     
  7611  000000                     
  7612  000000                     
  7613  000000                     
  7614  000000                     
  7615  000000                     
  7616  000000                     
  7617  000000                     
  7618  000E73                     _bll:
  7619  000E73                     	ds	1
  7620  000E73                     _gll:
  7621  000E73                     	ds	1
  7622  000E73                     _hll:
  7623  000E73                     	ds	1
  7624  000E73                     _kll:
  7625  000E73                     	ds	1
  7626  000E73                     _vdw:
  7627  000E73                     	ds	1
  7628  000E73                     _vup:
  7629  000E73                     	ds	1
  7630  000E73                     _vvvv:
  7631  000E73                     	ds	1
  7632  000E73                     _x:
  7633  000E73                     	ds	1
  7634  000000                     
  7635  000000                     
  7636  000000                     
  7637  000000                     
  7638  000000                     
  7639  000000                     
  7640  000000                     
  7641                           
  7642                           	psect	bss
  7643  000300                     _pmppwm:
  7644  000300                     	ds	2
  7645  000300                     _vv:
  7646  000300                     	ds	2
  7647  000300                     _wn:
  7648  000300                     	ds	2
  7649  000300                     _M:
  7650  000300                     	ds	32
  7651  000300                     _RSDT1:
  7652  000300                     	ds	98
  7653                           
  7654                           	psect	temp
  7655  000000                     btemp:
  7656  000000                     	ds	2
  7657                           intcon	equ	0xFF2
  7658                           indf0	equ	0xFEF
  7659                           wreg	equ	0xFE8
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Thu Jul 28 10:43:08 2016

              _KolejkaPobudzen 19C6                              _M 0306  
       _OdczytDanychKalibracji AADE                       _PomiarCO 6470  
                     _PomiarCS 7388                       _PomiarCW 6946  
                     _PomiarIN 6910                              _x 0E7C  
                     _PomiarZW 6A72                      _Proba48Z3 320E  
            __end_of_Proba48Z3 3256                       _PrintErr D342  
                    _SetWylacz 278A                             l40 1192  
                           l41 121E                             l33 1168  
                           l50 1288                             l42 11E6  
                           l34 1170                             l35 1180  
                           l60 1380                             l44 121A  
                           l37 1186                             l70 13F0  
                           l46 127C                             l63 139E  
                           l47 1280                             l39 1184  
                           l72 1434                             l65 13A4  
                           l90 1634                             l82 1542  
                           l91 1636                             l83 153C  
                           l76 146C                             l69 13F8  
                           l95 1A18                             l79 14B2  
                           l96 1A10                             l97 19F8  
                           l89 1638                             l98 19FC  
                           l99 1A0A              __end_of_SetWylacz 27D8  
                    _PomiarECO 7100                             u30 115E  
                           u60 117C                      _PomiarPCO 6EA8  
                    _PomiarPFN 71A8                      _PomiarPCW 6FDC  
                    _PomiarVNT 90FC                             _wn 0304  
                           _vv 0302                      ?_PrintErr 00A9  
                     _StartRTG C852                      _ProcToVNT AF68  
                     _StartRTM C7E6                       _StartRTS C7AA  
                     _Rusz48Z3 3256                      _ProcToMod 5D1C  
                   _SetRozruch 256A             __end_of_SetRozruch 2596  
                          l103 1A3E                            l113 1AE2  
                          l105 1A66                            l202 2022  
                          l122 1C30                            l106 1A54  
                          l131 1BE4                            l123 1B82  
                          l107 1A5A                            l204 2008  
                          l124 1B3A                            l301 245E  
                          l133 1BD4                            l125 1B4A  
                          l117 1B12                            l109 1A90  
                          l310 248C                            l230 2118  
                          l222 219A                            l206 201E  
                          l142 1C9E                            l134 1BCC  
                          l126 1B62                            l215 20A2  
                          l151 1D1C                            l143 1CC2  
                          l127 1B76                            l304 246C  
                          l240 21EE                            l224 215E  
                          l216 205A                            l160 1D80  
                          l152 1D04                            l144 1CB2  
                          l136 1BF8                            l313 24A4  
                          l225 20CE                            l209 2038  
                          l161 1D68                            l153 1D14  
                          l145 1CBC                            l129 1C24  
                          l402 27AA                            l250 2278  
                          l218 207C                            l170 1E58  
                          l162 1D78                            l146 1E5C  
                          l403 279A                            l315 24B6  
                          l251 22A2                            l243 21F2  
                          l147 1CEE                            l500 2BE8  
                          l244 226A                            l172 1E46  
                          l164 1DBC                            l156 1D4A  
                          l148 1CDC                            l501 2C06  
                          l405 278E                            l325 250C  
                          l245 225A                            l237 214A  
                          l173 1E52                            l157 1D36  
                          l149 1CE8                            l430 28B0  
                          l422 28A0                            l414 2838  
                          l350 25D0                            l318 24C4  
                          l246 2254                            l166 1E10  
                          l158 1D42                            l511 2CF8  
                          l431 28BC                            l423 2848  
                          l415 27E4                            l263 2304  
                          l255 22A6                            l191 1F70  
                          l183 1EE2                            l167 1DFE  
                          l600 2FF6                            l512 2C46  
                          l504 2C18                            l440 293A  
                          l432 28DA                            l424 2854  
                          l328 251A                            l280 2406  
                          l272 239A                            l264 231C  
                          l256 22EC                            l184 1F02  
                          l176 1EA8                            l168 1E0A  
                          l521 2C98                            l513 2C52  
                          l433 28EE                            l425 2886  
                          l417 2810                            l353 260A  
                          l345 26A4                            l337 253E  
                          l265 234C                            l257 22C8  
                          l249 2280                            l193 1FAE  
                          l185 1F06                            l522 2CC6  
                          l514 2C7E                            l506 2C26  
                          l442 2946                            l418 2830  
                          l362 2638                            l282 23AA  
                          l274 2376                            l266 2342  
                          l186 20C6                            l611 307E  
                          l451 29A2                            l347 2598  
                          l259 22DA                            l195 203C  
                          l187 1F26                            l620 30FC  
                          l356 2618                            l292 2558  
                          l276 2388                            l268 2360  
                          l196 1FD8                            l613 308A  
                          l533 2DB4                            l525 2CDC  
                          l509 2C44                            l461 2A56  
                          l429 28F6                            l189 1F44  
                          l542 2D6A                            l534 2D0A  
                          l470 2AB4                            l462 2A74  
                          l438 2AF0                            l294 2416  
                          l286 23D8                            l198 1FF0  
                          l703 34B6                            l607 3098  
                          l543 2D88                            l535 2D16  
                          l463 2A62                            l455 29CA  
                          l447 29A0                            l439 292C  
                          l383 272C                            l359 262A  
                          l199 1FEC                            l720 350C  
                          l704 34AA                            l640 3192  
                          l616 30C8                            l608 3056  
                          l528 2CEC                            l456 29FC  
                          l448 29BE                            l713 34C0  
                          l705 3474                            l633 31F4  
                          l609 3062                            l561 2ED8  
                          l553 2E42                            l537 2D3E  
                          l473 2AB6                            l465 2A58  
                          l449 29AC                            l377 26EC  
                          l369 2676                            l722 353C  
                          l570 2EC2                            l562 2E82  
                          l554 2DDA                            l546 2D9A  
                          l474 2ACE                            l458 2A04  
                          l386 273E                            l723 357C  
                          l707 3488                            l635 3178  
                          l555 2DF4                            l491 2C32  
                          l483 2B6C                            l459 2A10  
                          l395 2678                            l740 3730  
                          l732 3560                            l708 34A4  
                          l556 2E06                            l548 2DA8  
                          l492 2B88                            l396 278A  
                          l741 3612                            l725 3568  
                          l709 34A0                            l653 324C  
                          l637 31B0                            l581 3046  
                          l565 2ECA                            l493 2B94  
                          l389 274C                            l750 3692  
                          l742 3626                            l662 329E  
                          l654 3210                            l646 31BE  
                          l638 317A                            l574 2F48  
                          l566 2E8A                            l558 2E28  
                          l478 2B3A                            l398 2690  
                          l743 363E                            l727 355A  
                          l663 3258                            l583 2F58  
                          l575 2EFC                            l567 2E96  
                          l495 2BBC                            l656 3220  
                          l648 31D6                            l576 2F0C  
                          l568 2EA4                            l488 2DC6  
                          l737 3588                            l681 345E  
                          l665 3290                            l585 2FBE  
                          l577 2F20                            l489 2B86  
                          l770 37CE                            l690 33B2  
                          l682 3348                            l666 325A  
                          l586 2F5A                            l755 36DA  
                          l747 366A                            l739 3740  
                          l587 2F68                            l756 36EE  
                          l748 367E                            l684 336C  
                          l668 3272                            l596 3034  
                          l773 37E4                            l757 3702  
                          l749 36A6                            l693 33EA  
                          l677 3316                            l597 2FD0  
                          l589 2F80                            l766 376E  
                          l686 3376                            l598 2FDE  
                          l767 3772                            l696 3444  
                          l688 33A2                            l689 33AE  
                          l698 343C                            l699 3436  
                          u121 11F6                            u210 12BE  
                          u211 12BA                            u220 12C0  
                          u150 1206                            u400 140E  
                          u610 1698                            _PFN 006B  
                          u620 169A                            u710 17BE  
                          u550 1534                            u800 190C  
                          u720 17C0                            u490 1518  
                          u565 1652                            u750 17E2  
                          u670 16C4                            u840 19EC  
                          u760 17E4                            u680 16C6  
                          _PMP 02F1                            u790 190A  
                          u971 1A8C                            _RTG C882  
                          _PWM 01D6                            _RTM C816  
                          _RTS C7CE                       _WritePWM CFBE  
                          _bll 0E75                            _gll 0E76  
                          _hll 0E77                            _kll 0E78  
                          _rgl 01F3          ?a_OczekujNaPrzeplywWG 00A6  
                          _vdw 0E79                            _vup 0E7A  
                     __config1 0030FF                       __config2 00EFEF  
                     __config3 007DFF                       __config4 00FFFB  
                     __config5 00FFF0                       __config6 00DFF0  
                          wreg 000FE8                      _StartRTdS C76E  
                ?_eeprom_write 00AA                     _RestartMod 5E64  
                _ReloadPlomien 30A6                           F2472 0E73  
                         F2494 0E74         __end_of_Odpowietrzenie 3472  
                   _PrintErrCs D386                     _PwrOnDelay DBA6  
                         u1050 1AAE                           u1060 1AB0  
                  _DecyzjaPLM2 2B4E                           u1340 1BC8  
                         u1190 1B44                           u1450 1C5C  
                         u1451 1C58                           u2340 1F22  
                         u1460 1C5E                           u1630 1D9C  
                         u3240 2078                           u4130 21AC  
                         u2450 1F40                           u1731 1DB8  
                         u1830 1DE4                           u1840 1DE6  
                         u3370 209E                           u2730 1FA4  
                         u1770 1DCC                           u5140 23CC  
                         u2840 1FCA                           u5250 23FA  
                         u7100 26C2                           _MGSD 02AE  
                         u4570 228C                           u8210 2A5E  
                         u4690 22B4                           u8140 29A8  
                         u6380 25A6                           u3990 2194  
                         u9210 2FAA                           u7610 276C  
                         u7800 2792                           u9340 3020  
                         u9520 30F6                           u6890 2658  
                         u7931 2868                           u7990 287C  
                         u9870 32C8                      _WritePWM2 CFD8  
                         _DtCO 007F                           _DtCS 0063  
                         _DtCW 0070                           _DtIN 0092  
                         _RTdS C792            __end_of_DecyzjaPLM2 2B84  
                         _main 1102          __end_of_ReloadPlomien 30EA  
                         indf0 000FEF                           fsr2l 000FD9  
     __end_of_FunkcjaSerwisowa 2846                           btemp 0000  
                         _vvvv 0E7B                    ?_PrintErrCs 00A8  
              __end_of_VZPauza 34E6                           start 0010  
              __end_of_InitPFN 1456                __end_of_GrzejON 291A  
              __end_of_VWybieg 2E54                __end_of_ToReset 37E6  
                      ?_SetPrt 00A6                __end_of_Proba48 3176  
              __end_of_Rozruch 2B22            _DetekcjaPrzeplywuWG 2E54  
      __end_of_KolejkaPobudzen 1B18                          u10220 3430  
                        u11200 3728                          u10410 357A  
                        u10331 351C                          u10360 352C  
                        u10550 363A                     _WriteEEPFN 8AB0  
                        u10941 36CC                          _RSDT1 0326  
                        _DtKNF 01B4                          _EndL3 D40C  
            ?a_KolejkaPobudzen 00A6                          _RdPrt C6A0  
                   used_btemp0 0001                     used_btemp1 0001  
  __end_of_DetekcjaPrzeplywuWG 2EE0                    _eeprom_read DB8E  
               _DecyzjaAntyLeg 1B18                        _BitSet2 D4AE  
                   _CalkTimStr B086                        _GetBit2 D448  
                   _DecRozruch 2414                       ?_BitSet2 00AA  
                        status 000FD8                       ?_GetBit2 00A9  
           __end_of_DecRozruch 256A                        _VZPauza 34BA  
                      _InitI2C 98D8                        _InitPFN 13B2  
                      _InitPWM CD82                   _ProcToPmpPwm B11A  
                      _InitOsc DC3A               __end_of_GrzejOFF 291E  
          _OczekujNaPrzeplywWG 2EE0                       ?a_DecERR 00A6  
                      _GrzejON 2904                        _VWybieg 2DD8  
                      _Moduluj 37EE                        _ToReset 378C  
                      __Lparam 00A6                        _Proba48 3148  
                _ReceptDataLCD C1BC             _FiltrPomiarowyCOCW 63BE  
        _KalibracjaWentylatora 1456                        _PrintL3 D3FC  
               _InitReceptProc C0BA                        _Rozruch 291E  
                 ?_eeprom_read 00AD               __end_of_Rusz48Z3 32A8  
             _FunkcjaSerwisowa 27D8                        __ramtop 1000  
               __end_of_DecERR 1ECE                 __end_of_DecSTR 2374  
                   _DecyzjaPLM 2B22                     _DecyzjaOdp 32A8  
  __end_of_OczekujNaPrzeplywWG 2F56         __end_of_DecyzjaAntyLeg 1C36  
           __end_of_DecyzjaPLM 2B4E             __end_of_DecyzjaOdp 32F8  
               __end_of_ErrPTG 378C                     _Blokada15S 28AE  
               __end_of_KeyRes 34BA             __end_of_Blokada15S 2904  
                  _ZmienKCOKCW 2F56                    _InitDataPmr 5E7A  
               __end_of_Rusz48 320E            __end_of_ZmienKCOKCW 3054  
                 _CalkVNTtoPWM AF42                 __end_of_Wylacz 2DD8  
                _KodSterownika 1632                   __end_of_main 13B2  
                       _DecERR 1C36                         _DecSTR 1ECE  
                       _EnKonf 756A                    _RuszPlomien 3054  
                       _ClrDtV 9394                         _EndErr D3D2  
                   _RefLCDData 1646                         _ErrPTG 34E6  
                    _DecWylacz 2596                         _InitAC D040  
            __end_of_DecWylacz 278A             __end_of_RefLCDData 19C6  
                       _KeyRes 3472            __end_of_RuszPlomien 30A6  
                       _SetPFN 8958          __end_of_KodSterownika 1646  
                       _RglPmp BB7C                      _RdEEParam 857A  
                    _VNTToProc AFF2                         _SetPrt C6C2  
                       _Rusz48 3176                      _ClearData 154E  
            __end_of_ClearData 15EC                         _Wylacz 2B84  
                _KalibracjaVNT A610                      _BlokadaL3 2846  
            __end_of_BlokadaL3 28AE                         _pmppwm 0300  
                   _InitGlobal 37E6            _KontrolaWentylatora 30EA  
           __end_of_InitGlobal 37EE                     _InitTimer1 DB0A  
                   _InitTimer3 DAE2                   _eeprom_write DA26  
                _MKonfiguracja 757A                  _RestartFltPrt 15EC  
        ?a_DetekcjaPrzeplywuWG 00A6  __end_of_KalibracjaWentylatora 154E  
  __end_of_KontrolaWentylatora 3148                       _ModParam CDBE  
                     _InitUart CA70                       _InitPort C53C  
               _Odpowietrzenie 32F8        ?a_KalibracjaWentylatora 00A6  
                     _GrzejOFF 291A                      _ToObiegCO 2374  
                    _ToObiegCW 23A8          __end_of_RestartFltPrt 1632  
            __end_of_ToObiegCO 23A8              __end_of_ToObiegCW 2414  
