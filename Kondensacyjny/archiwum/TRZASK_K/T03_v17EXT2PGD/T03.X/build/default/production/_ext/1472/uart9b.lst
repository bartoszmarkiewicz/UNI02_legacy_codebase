

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:33:14 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	rbss,global,common,class=COMRAM,space=1,d
      +                          elta=1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           
    99                           	psect	text
   100                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   101                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   102                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   103                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   104                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   105                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   106                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   107                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   108                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   109                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   110                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   111                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   112                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   113                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   114                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   115                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   116                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   117                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   118                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   119                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   120                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   121                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   122                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   123                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   124                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   125                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   126                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   127                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   128                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   129                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   130                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   131                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   132                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   133                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   134                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   135                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   136                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   137                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   138                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   139                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   140                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   141                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   142                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   143                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   144                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   145                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   146                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   147                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   148                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   149                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   150                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   151                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   152                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   153                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   154                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   155                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   156                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   157                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   158                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   159                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   160                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   161                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   162                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   163                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   164                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   165                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   166                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   167                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   168                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   169                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   170                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   171                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   172                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   173                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   174                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   175                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   176                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   177                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   178                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   179                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   180                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   181                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   182                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   183                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   184                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   185                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   186                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   187                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   188                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   189                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   190                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   191                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   192                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   193                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   194                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   195                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   196                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   197                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   198                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   199                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   200  00F4DE                     _InitUart:
   201                           ;	_chkndat assigned to ?a_SetExNDatCHK+0
   202  000000                     _SetExNDatCHK$chkndat	set	?a_SetExNDatCHK
   203                           ;       param _nData assigned to ?_LiczRSCHK+2
   204  000000                     _LiczRSCHK$nData	set	?_LiczRSCHK+2
   205                           ;       param _bf assigned to ?_LiczRSCHK+0
   206  000000                     _LiczRSCHK$bf	set	?_LiczRSCHK
   207                           ;       param _data assigned to ?_SetRSTBuf+0
   208  000000                     _SetRSTBuf$data	set	?_SetRSTBuf
   209  000000                     
   210                           ;uart9b.c: 22: unsigned char rc;
   211  00F4DE  9EAC               	bcf	4012,7,c
   212                           ;uart9b.c: 27: RX9=1;
   213  00F4E0  8CAB               	bsf	4011,6,c
   214                           ;uart9b.c: 28: SPBRG=((8*4*1000000/2400)/64)-1;
   215  00F4E2  0ECF               	movlw	207
   216  00F4E4  6EAF               	movwf	4015,c
   217                           ;uart9b.c: 29: SYNC=0;
   218  00F4E6  98AC               	bcf	4012,4,c
   219                           ;uart9b.c: 30: BRGH=0;
   220  00F4E8  94AC               	bcf	4012,2,c
   221                           ;uart9b.c: 31: ADDEN=1;
   222  00F4EA  86AB               	bsf	4011,3,c
   223                           ;uart9b.c: 32: TX9=1;
   224  00F4EC  8CAC               	bsf	4012,6,c
   225                           ;uart9b.c: 33: RCIP=1;
   226  00F4EE  8A9F               	bsf	3999,5,c
   227                           ;uart9b.c: 34: RCIE=1;
   228  00F4F0  8A9D               	bsf	3997,5,c
   229                           ;uart9b.c: 35: TXIP=1;
   230  00F4F2  889F               	bsf	3999,4,c
   231                           ;uart9b.c: 36: TXEN=1;
   232  00F4F4  8AAC               	bsf	4012,5,c
   233                           ;uart9b.c: 37: SPEN=1;
   234  00F4F6  8EAB               	bsf	4011,7,c
   235                           ;uart9b.c: 38: CREN=1;
   236  00F4F8  88AB               	bsf	4011,4,c
   237                           ;uart9b.c: 41: UADt.RData=0;
   238  00F4FA  0102               	movlb	_UADt shr (0+8)
   239  00F4FC  91F7               	bcf	_UADt& (0+255),0,b
   240                           ;uart9b.c: 42: UADt.RErrREC=0;
   241  00F4FE  95F7               	bcf	_UADt& (0+255),2,b
   242                           ;uart9b.c: 43: UADt.RErrBUF=0;
   243  00F500  97F7               	bcf	_UADt& (0+255),3,b
   244                           ;uart9b.c: 45: UADt.TData=0;
   245  00F502  99F7               	bcf	_UADt& (0+255),4,b
   246                           ;uart9b.c: 46: UADt.RNData=0;
   247  00F504  6BF9               	clrf	(_UADt+2)& (0+255),b
   248                           ;uart9b.c: 47: UADt.TNData=0;
   249  00F506  6BFA               	clrf	(_UADt+3)& (0+255),b
   250                           ;uart9b.c: 49: UADt.REXT=0;
   251  00F508  9DF7               	bcf	_UADt& (0+255),6,b
   252                           ;uart9b.c: 50: UADt.REnd=0;
   253  00F50A  93F7               	bcf	_UADt& (0+255),1,b
   254                           ;uart9b.c: 51: UADt.TEXT=0;
   255  00F50C  9FF7               	bcf	_UADt& (0+255),7,b
   256                           ;uart9b.c: 52: UADt.TEnd=0;
   257  00F50E  9BF7               	bcf	_UADt& (0+255),5,b
   258                           ;uart9b.c: 53: UADt.indeks=0;
   259  00F510  6BF8               	clrf	(_UADt+1)& (0+255),b
   260                           ;uart9b.c: 54: rc=RCREG;
   261  00F512  50AE               	movf	4014,w,c	;volatile
   262  00F514  6ED9               	movwf	fsr2l,c
   263                           ;uart9b.c: 55: TXIE=0;
   264  00F516  989D               	bcf	3997,4,c
   265                           ;uart9b.c: 56: }
   266  00F518  0012               	return	
   267  00F51A                     __end_of_InitUart:
   268                           ;uart9b.c: 60: void IntUSARTRC(void)
   269                           ;uart9b.c: 61: {
   270  00F51A                     _IntUSARTRC:
   271  000000                     
   272                           ;uart9b.c: 62: if(ADDEN&&RX9D)
   273  00F51A  B6AB               	btfsc	4011,3,c
   274  00F51C  A0AB               	btfss	4011,0,c	;volatile
   275  00F51E  D016               	goto	l5
   276                           ;uart9b.c: 63: {
   277  00F520  CFAE F057          	movff	4014,_RSerial	;volatile
   278                           ;uart9b.c: 65: if(RSerial==0x10)
   279  00F524  5057               	movf	_RSerial,w,c	;volatile
   280  00F526  0A10               	xorlw	16
   281  00F528  A4D8               	btfss	status,2,c
   282  00F52A  0012               	return	
   283                           ;uart9b.c: 66: {
   284  00F52C  96AB               	bcf	4011,3,c
   285                           ;uart9b.c: 68: UADt.indeks=0;
   286  00F52E  0102               	movlb	(_UADt+1) shr (0+8)
   287  00F530  6BF8               	clrf	(_UADt+1)& (0+255),b
   288                           ;uart9b.c: 69: bufRUART[UADt.indeks++]=RSerial;
   289  00F532  EE02  F0F8         	lfsr	0,_UADt+1
   290  00F536  50EF               	movf	indf0,w,c
   291  00F538  2AEF               	incf	indf0,f,c
   292  00F53A  EE0E  F0E7         	lfsr	0,_bufRUART
   293  00F53E  26E9               	addwf	fsr0l,f,c
   294  00F540  0E00               	movlw	0
   295  00F542  22EA               	addwfc	fsr0h,f,c
   296  00F544  C057  FFEF         	movff	_RSerial,indf0	;volatile
   297                           ;uart9b.c: 70: UADt.RData=1;
   298  00F548  81F7               	bsf	_UADt& (0+255),0,b
   299                           ;uart9b.c: 71: }
   300  00F54A  0C00               	retlw	0
   301  00F54C                     l5:
   302                           ;uart9b.c: 73: }
   303  00F54C  CFAE F057          	movff	4014,_RSerial	;volatile
   304                           ;uart9b.c: 75: if (UADt.indeks<40)
   305  00F550  0E28               	movlw	40
   306  00F552  0102               	movlb	(_UADt+1) shr (0+8)
   307  00F554  61F8               	cpfslt	(_UADt+1)& (0+255),b
   308  00F556  D05A               	goto	l7
   309                           ;uart9b.c: 76: {
   310  00F558  EE02  F0F8         	lfsr	0,_UADt+1
   311  00F55C  50EF               	movf	indf0,w,c
   312  00F55E  2AEF               	incf	indf0,f,c
   313  00F560  EE0E  F0E7         	lfsr	0,_bufRUART
   314  00F564  26E9               	addwf	fsr0l,f,c
   315  00F566  0E00               	movlw	0
   316  00F568  22EA               	addwfc	fsr0h,f,c
   317  00F56A  C057  FFEF         	movff	_RSerial,indf0	;volatile
   318                           ;uart9b.c: 79: switch(UADt.indeks)
   319  00F56E  D03D               	goto	l9
   320  00F570                     l10:
   321                           ;uart9b.c: 80: {
   322                           ;uart9b.c: 82: {
   323  00F570  CEE8  F2F9         	movff	_bufRUART+1,_UADt+2
   324                           ;uart9b.c: 85: if(VerifyNDatCHK(UADt.RNData))
   325  00F574  C2F9  FFE8         	movff	_UADt+2,wreg
   326  00F578  D97D               	call	_VerifyNDatCHK
   327  00F57A  0900               	iorlw	0
   328  00F57C  E008               	bz	l11
   329                           ;uart9b.c: 86: {
   330  00F57E  C2F9  FFE8         	movff	_UADt+2,wreg
   331  00F582  0B1F               	andlw	31
   332  00F584  CFE8 F2F9          	movff	wreg,_UADt+2
   333                           ;uart9b.c: 88: if(UADt.RNData>40) UADt.RNData=40
      +                          ;
   334  00F588  0E28               	movlw	40
   335  00F58A  0102               	movlb	(_UADt+2) shr (0+8)
   336  00F58C  D021               	goto	L4
   337                           ;uart9b.c: 91: }
   338  00F58E                     l11:
   339                           ;uart9b.c: 92: else
   340  00F58E  86AB               	bsf	4011,3,c
   341                           ;uart9b.c: 97: UADt.REXT=0;
   342  00F590  0102               	movlb	_UADt shr (0+8)
   343  00F592  9DF7               	bcf	_UADt& (0+255),6,b
   344                           ;uart9b.c: 98: UADt.RData=0;
   345  00F594  91F7               	bcf	_UADt& (0+255),0,b
   346                           ;uart9b.c: 99: UADt.REnd=0;
   347  00F596  93F7               	bcf	_UADt& (0+255),1,b
   348                           ;uart9b.c: 100: UADt.RErrBUF=1;
   349  00F598  87F7               	bsf	_UADt& (0+255),3,b
   350                           ;uart9b.c: 101: return;
   351  00F59A  0012               	return	
   352                           ;uart9b.c: 102: }
   353  00F59C                     l14:
   354                           ;uart9b.c: 104: }
   355                           ;uart9b.c: 106: {
   356  00F59C  CEE9  FFE8         	movff	_bufRUART+2,wreg
   357  00F5A0  0A05               	xorlw	5
   358  00F5A2  E004               	bz	u100
   359  00F5A4  CEE9  FFE8         	movff	_bufRUART+2,wreg
   360  00F5A8  0A04               	xorlw	4
   361  00F5AA  E125               	bnz	l8
   362  00F5AC                     u100:
   363                           ;uart9b.c: 109: {
   364  00F5AC  CEEA  FFE8         	movff	_bufRUART+3,wreg
   365  00F5B0  D961               	call	_VerifyNDatCHK
   366  00F5B2  0900               	iorlw	0
   367  00F5B4  E013               	bz	l16
   368                           ;uart9b.c: 111: {
   369  00F5B6  0102               	movlb	_UADt shr (0+8)
   370  00F5B8  8DF7               	bsf	_UADt& (0+255),6,b
   371                           ;uart9b.c: 115: UADt.RNData=UADt.RNData+(bufRUAR
      +                          T[3]&0b00011111);
   372  00F5BA  C2F9  F000         	movff	_UADt+2,btemp
   373  00F5BE  CEEA  F001         	movff	_bufRUART+3,btemp+1
   374  00F5C2  0E1F               	movlw	31
   375  00F5C4  1601               	andwf	btemp+1,f,c
   376  00F5C6  5000               	movf	btemp,w,c
   377  00F5C8  2401               	addwf	btemp+1,w,c
   378  00F5CA  CFE8 F2F9          	movff	wreg,_UADt+2
   379                           ;uart9b.c: 116: if(UADt.RNData>40) UADt.RNData=4
      +                          0;
   380  00F5CE  0E28               	movlw	40
   381  00F5D0                     L4:
   382  00F5D0  65F9               	cpfsgt	(_UADt+2)& (0+255),b
   383  00F5D2  D011               	goto	l8
   384  00F5D4  0E28               	movlw	40
   385  00F5D6  CFE8 F2F9          	movff	wreg,_UADt+2
   386                           ;uart9b.c: 120: }
   387  00F5DA  D00D               	goto	l8
   388  00F5DC                     l16:
   389                           ;uart9b.c: 121: else
   390  00F5DC  86AB               	bsf	4011,3,c
   391                           ;uart9b.c: 126: UADt.REXT=0;
   392  00F5DE  0102               	movlb	_UADt shr (0+8)
   393  00F5E0  9DF7               	bcf	_UADt& (0+255),6,b
   394                           ;uart9b.c: 127: UADt.RData=0;
   395  00F5E2  91F7               	bcf	_UADt& (0+255),0,b
   396                           ;uart9b.c: 128: UADt.REnd=0;
   397  00F5E4  93F7               	bcf	_UADt& (0+255),1,b
   398                           ;uart9b.c: 129: UADt.RErrBUF=1;
   399  00F5E6  87F7               	bsf	_UADt& (0+255),3,b
   400                           ;uart9b.c: 130: return;
   401  00F5E8  0012               	return	
   402                           ;uart9b.c: 131: }
   403  00F5EA                     l9:
   404  00F5EA  C2F8  FFE8         	movff	_UADt+1,wreg
   405  00F5EE  0A02               	xorlw	2
   406  00F5F0  E0BF               	bz	l10
   407  00F5F2  0A06               	xorlw	6
   408  00F5F4  E0D3               	bz	l14
   409  00F5F6                     l8:
   410                           ;uart9b.c: 136: if (UADt.indeks>=UADt.RNData)
   411  00F5F6  C2F9  FFE8         	movff	_UADt+2,wreg
   412  00F5FA  0102               	movlb	(_UADt+1) shr (0+8)
   413  00F5FC  5DF8               	subwf	(_UADt+1)& (0+255),w,b
   414  00F5FE  A0D8               	btfss	status,0,c
   415  00F600  0012               	return	
   416                           ;uart9b.c: 137: {
   417  00F602  86AB               	bsf	4011,3,c
   418                           ;uart9b.c: 139: UADt.REXT=0;
   419  00F604  9DF7               	bcf	_UADt& (0+255),6,b
   420                           ;uart9b.c: 140: UADt.RData=0;
   421  00F606  91F7               	bcf	_UADt& (0+255),0,b
   422                           ;uart9b.c: 141: UADt.REnd=1;
   423  00F608  83F7               	bsf	_UADt& (0+255),1,b
   424                           ;uart9b.c: 144: }
   425  00F60A  0012               	return	
   426  00F60C                     l7:
   427                           ;uart9b.c: 146: else
   428  00F60C  86AB               	bsf	4011,3,c
   429                           ;uart9b.c: 149: UADt.REXT=0;
   430  00F60E  0102               	movlb	_UADt shr (0+8)
   431  00F610  9DF7               	bcf	_UADt& (0+255),6,b
   432                           ;uart9b.c: 150: UADt.RData=0;
   433  00F612  91F7               	bcf	_UADt& (0+255),0,b
   434                           ;uart9b.c: 151: UADt.REnd=0;
   435  00F614  93F7               	bcf	_UADt& (0+255),1,b
   436                           ;uart9b.c: 152: UADt.RErrBUF=1;
   437  00F616  87F7               	bsf	_UADt& (0+255),3,b
   438                           ;uart9b.c: 153: }
   439  00F618  0012               	return	
   440  00F61A                     __end_of_IntUSARTRC:
   441                           ;uart9b.c: 159: void StartUSARTRC(void)
   442                           ;uart9b.c: 160: {
   443  00F61A                     _StartUSARTRC:
   444  000000                     
   445                           ;uart9b.c: 161: UADt.REXT=0;
   446  00F61A  0102               	movlb	_UADt shr (0+8)
   447  00F61C  9DF7               	bcf	_UADt& (0+255),6,b
   448                           ;uart9b.c: 162: UADt.REnd=0;
   449  00F61E  93F7               	bcf	_UADt& (0+255),1,b
   450                           ;uart9b.c: 163: ADDEN=1;
   451  00F620  86AB               	bsf	4011,3,c
   452                           ;uart9b.c: 164: CREN=1;
   453  00F622  88AB               	bsf	4011,4,c
   454                           ;uart9b.c: 165: }
   455  00F624  0012               	return	
   456  00F626                     __end_of_StartUSARTRC:
   457                           ;uart9b.c: 178: void IntUSARTTR(void)
   458                           ;uart9b.c: 179: {
   459  00F626                     _IntUSARTTR:
   460  000000                     
   461                           ;uart9b.c: 180: if(!UADt.indeks) TX9D=1;
   462  00F626  EE02  F0F8         	lfsr	0,_UADt+1
   463  00F62A  50EF               	movf	indf0,w,c
   464  00F62C  E102               	bnz	l23
   465  00F62E  80AC               	bsf	4012,0,c	;volatile
   466  00F630  D001               	goto	l24
   467  00F632                     l23:
   468                           ;uart9b.c: 181: else TX9D=0;
   469  00F632  90AC               	bcf	4012,0,c	;volatile
   470  00F634                     l24:
   471                           ;uart9b.c: 182: if(UADt.TNData>40) UADt.TNData=4
      +                          0;
   472  00F634  0E28               	movlw	40
   473  00F636  0102               	movlb	(_UADt+3) shr (0+8)
   474  00F638  65FA               	cpfsgt	(_UADt+3)& (0+255),b
   475  00F63A  D002               	goto	l25
   476  00F63C  CFE8 F2FA          	movff	wreg,_UADt+3
   477  00F640                     l25:
   478                           ;uart9b.c: 183: if(UADt.indeks>40-1) UADt.indeks
      +                          =40-1;
   479  00F640  0E27               	movlw	39
   480  00F642  0102               	movlb	(_UADt+1) shr (0+8)
   481  00F644  65F8               	cpfsgt	(_UADt+1)& (0+255),b
   482  00F646  D002               	goto	l26
   483  00F648  CFE8 F2F8          	movff	wreg,_UADt+1
   484  00F64C                     l26:
   485                           ;uart9b.c: 184: TXREG=bufTUART[UADt.indeks++];
   486  00F64C  EE02  F0F8         	lfsr	0,_UADt+1
   487  00F650  50EF               	movf	indf0,w,c
   488  00F652  2AEF               	incf	indf0,f,c
   489  00F654  EE0F  F00F         	lfsr	0,_bufTUART
   490  00F658  26E9               	addwf	fsr0l,f,c
   491  00F65A  0E00               	movlw	0
   492  00F65C  22EA               	addwfc	fsr0h,f,c
   493  00F65E  50EF               	movf	indf0,w,c
   494  00F660  6EAD               	movwf	4013,c	;volatile
   495                           ;uart9b.c: 185: if(UADt.indeks<UADt.TNData) UADt
      +                          .TData=1;
   496  00F662  C2FA  FFE8         	movff	_UADt+3,wreg
   497  00F666  0102               	movlb	(_UADt+1) shr (0+8)
   498  00F668  61F8               	cpfslt	(_UADt+1)& (0+255),b
   499  00F66A  D002               	goto	l27
   500  00F66C  89F7               	bsf	_UADt& (0+255),4,b
   501  00F66E  0012               	return	
   502  00F670                     l27:
   503                           ;uart9b.c: 186: else
   504  00F670  0102               	movlb	_UADt shr (0+8)
   505  00F672  9FF7               	bcf	_UADt& (0+255),7,b
   506                           ;uart9b.c: 189: UADt.TData=0;
   507  00F674  99F7               	bcf	_UADt& (0+255),4,b
   508                           ;uart9b.c: 190: UADt.TEnd=1;
   509  00F676  8BF7               	bsf	_UADt& (0+255),5,b
   510                           ;uart9b.c: 191: TXIE=0;
   511  00F678  989D               	bcf	3997,4,c
   512                           ;uart9b.c: 192: }
   513  00F67A  0012               	return	
   514  00F67C                     __end_of_IntUSARTTR:
   515                           ;uart9b.c: 197: void StartUSARTTR(void)
   516                           ;uart9b.c: 198: {
   517  00F67C                     _StartUSARTTR:
   518  000000                     
   519                           ;uart9b.c: 199: if(TXIE) return;
   520  00F67C  B89D               	btfsc	3997,4,c
   521  00F67E  0012               	return	
   522                           ;uart9b.c: 200: UADt.TEXT=0;
   523  00F680  0102               	movlb	_UADt shr (0+8)
   524  00F682  9FF7               	bcf	_UADt& (0+255),7,b
   525                           ;uart9b.c: 201: UADt.TNData=(bufTUART[1]&0b00011
      +                          111);
   526  00F684  CF10  FFE8         	movff	_bufTUART+1,wreg
   527  00F688  0B1F               	andlw	31
   528  00F68A  CFE8 F2FA          	movff	wreg,_UADt+3
   529                           ;uart9b.c: 202: if((bufTUART[2]==5)||(bufTUART[2
      +                          ]==4))
   530  00F68E  CF11  FFE8         	movff	_bufTUART+2,wreg
   531  00F692  0A05               	xorlw	5
   532  00F694  E004               	bz	u210
   533  00F696  CF11  FFE8         	movff	_bufTUART+2,wreg
   534  00F69A  0A04               	xorlw	4
   535  00F69C  E10C               	bnz	l31
   536  00F69E                     u210:
   537                           ;uart9b.c: 203: {
   538  00F69E  0102               	movlb	_UADt shr (0+8)
   539  00F6A0  8FF7               	bsf	_UADt& (0+255),7,b
   540                           ;uart9b.c: 205: UADt.TNData=UADt.TNData+(bufTUAR
      +                          T[3]&0b00011111);
   541  00F6A2  C2FA  F000         	movff	_UADt+3,btemp
   542  00F6A6  CF12  F001         	movff	_bufTUART+3,btemp+1
   543  00F6AA  0E1F               	movlw	31
   544  00F6AC  1601               	andwf	btemp+1,f,c
   545  00F6AE  5000               	movf	btemp,w,c
   546  00F6B0  2401               	addwf	btemp+1,w,c
   547  00F6B2  CFE8 F2FA          	movff	wreg,_UADt+3
   548  00F6B6                     l31:
   549                           ;uart9b.c: 207: }
   550  00F6B6  0E28               	movlw	40
   551  00F6B8  0102               	movlb	(_UADt+3) shr (0+8)
   552  00F6BA  65FA               	cpfsgt	(_UADt+3)& (0+255),b
   553  00F6BC  D002               	goto	l32
   554  00F6BE  CFE8 F2FA          	movff	wreg,_UADt+3
   555  00F6C2                     l32:
   556                           ;uart9b.c: 209: UADt.indeks=0;
   557  00F6C2  0102               	movlb	(_UADt+1) shr (0+8)
   558  00F6C4  6BF8               	clrf	(_UADt+1)& (0+255),b
   559                           ;uart9b.c: 210: UADt.TEnd=0;
   560  00F6C6  9BF7               	bcf	_UADt& (0+255),5,b
   561                           ;uart9b.c: 211: TXIE=1;
   562  00F6C8  889D               	bsf	3997,4,c
   563                           ;uart9b.c: 212: }
   564  00F6CA  0012               	return	
   565  00F6CC                     __end_of_StartUSARTTR:
   566                           ;uart9b.c: 214: void StopUSARTTR(void)
   567                           ;uart9b.c: 215: {
   568  00F6CC                     _StopUSARTTR:
   569  000000                     
   570                           ;uart9b.c: 216: TXIE=0;
   571  00F6CC  989D               	bcf	3997,4,c
   572                           ;uart9b.c: 217: UADt.TData=0;
   573  00F6CE  0102               	movlb	_UADt shr (0+8)
   574  00F6D0  99F7               	bcf	_UADt& (0+255),4,b
   575                           ;uart9b.c: 218: UADt.TEnd=0;
   576  00F6D2  9BF7               	bcf	_UADt& (0+255),5,b
   577                           ;uart9b.c: 219: UADt.TEXT=0;
   578  00F6D4  9FF7               	bcf	_UADt& (0+255),7,b
   579                           ;uart9b.c: 220: }
   580  00F6D6  0012               	return	
   581  00F6D8                     __end_of_StopUSARTTR:
   582                           ;uart9b.c: 224: void ClrRSRBuf(void)
   583                           ;uart9b.c: 225: {
   584  00F6D8                     _ClrRSRBuf:
   585  000000                     
   586                           ;uart9b.c: 226: unsigned char i;
   587  00F6D8  6AD9               	clrf	fsr2l,c
   588  00F6DA                     l35:
   589  00F6DA  50D9               	movf	fsr2l,w,c
   590  00F6DC  EE0E  F0E7         	lfsr	0,_bufRUART
   591  00F6E0  26E9               	addwf	fsr0l,f,c
   592  00F6E2  0E00               	movlw	0
   593  00F6E4  22EA               	addwfc	fsr0h,f,c
   594  00F6E6  6AEF               	clrf	indf0,c
   595  00F6E8  2AD9               	incf	fsr2l,f,c
   596  00F6EA  0E27               	movlw	39
   597  00F6EC  64D9               	cpfsgt	fsr2l,c
   598  00F6EE  D7F5               	goto	l35
   599  00F6F0  0C27               	retlw	39
   600                           ;uart9b.c: 228: }
   601  00F6F2                     __end_of_ClrRSRBuf:
   602                           ;uart9b.c: 231: void ClrRSTBuf(void)
   603                           ;uart9b.c: 232: {
   604  00F6F2                     _ClrRSTBuf:
   605  000000                     
   606                           ;uart9b.c: 233: unsigned char i;
   607  00F6F2  6AD9               	clrf	fsr2l,c
   608  00F6F4                     l39:
   609  00F6F4  50D9               	movf	fsr2l,w,c
   610  00F6F6  EE0F  F00F         	lfsr	0,_bufTUART
   611  00F6FA  26E9               	addwf	fsr0l,f,c
   612  00F6FC  0E00               	movlw	0
   613  00F6FE  22EA               	addwfc	fsr0h,f,c
   614  00F700  6AEF               	clrf	indf0,c
   615  00F702  2AD9               	incf	fsr2l,f,c
   616  00F704  0E27               	movlw	39
   617  00F706  64D9               	cpfsgt	fsr2l,c
   618  00F708  D7F5               	goto	l39
   619  00F70A  0C27               	retlw	39
   620                           ;uart9b.c: 235: }
   621  00F70C                     __end_of_ClrRSTBuf:
   622                           ;uart9b.c: 238: void SetRSTBuf(const unsigned ch
      +                          ar indeks,const unsigned char data)
   623                           ;uart9b.c: 239: {
   624  00F70C  00AF               	dw	?_SetRSTBuf
   625  00F70E                     _SetRSTBuf:
   626  000000                     
   627                           ; _indeks loaded to fsr2l
   628  00F70E  6ED9               	movwf	fsr2l,c
   629                           ;uart9b.c: 240: if(indeks<40) bufTUART[indeks]=d
      +                          ata;
   630  00F710  0E28               	movlw	40
   631  00F712  60D9               	cpfslt	fsr2l,c
   632  00F714  D009               	goto	l43
   633  00F716  50D9               	movf	fsr2l,w,c
   634  00F718  EE0F  F00F         	lfsr	0,_bufTUART
   635  00F71C  26E9               	addwf	fsr0l,f,c
   636  00F71E  0E00               	movlw	0
   637  00F720  22EA               	addwfc	fsr0h,f,c
   638  00F722  C0AF  FFEF         	movff	?_SetRSTBuf,indf0
   639  00F726  0C00               	retlw	0
   640  00F728                     l43:
   641                           ;uart9b.c: 241: else bufTUART[40-1]=data;
   642  00F728  C0AF  FF36         	movff	?_SetRSTBuf,_bufTUART+39
   643                           ;uart9b.c: 243: }
   644  00F72C  0012               	return	
   645  00F72E                     __end_of_SetRSTBuf:
   646                           ;uart9b.c: 244: unsigned char GetRSTBuf(const un
      +                          signed char indeks)
   647                           ;uart9b.c: 245: {
   648  00F72E                     _GetRSTBuf:
   649  000000                     
   650                           ; _indeks loaded to fsr2l
   651  00F72E  6ED9               	movwf	fsr2l,c
   652                           ;uart9b.c: 246: if(indeks<40) return bufTUART[in
      +                          deks];
   653  00F730  0E28               	movlw	40
   654  00F732  60D9               	cpfslt	fsr2l,c
   655  00F734  D008               	goto	l46
   656  00F736  50D9               	movf	fsr2l,w,c
   657  00F738  EE0F  F00F         	lfsr	0,_bufTUART
   658  00F73C  26E9               	addwf	fsr0l,f,c
   659  00F73E  0E00               	movlw	0
   660  00F740  22EA               	addwfc	fsr0h,f,c
   661  00F742  50EF               	movf	indf0,w,c
   662  00F744  0012               	return	
   663  00F746                     l46:
   664                           ;uart9b.c: 247: else return bufTUART[40-1];
   665  00F746  CF36  FFE8         	movff	_bufTUART+39,wreg
   666  00F74A  0012               	return	
   667                           ;uart9b.c: 248: }
   668  00F74C                     __end_of_GetRSTBuf:
   669                           ;uart9b.c: 251: unsigned char GetRSRBuf(const un
      +                          signed char indeks)
   670                           ;uart9b.c: 252: {
   671  00F74C                     _GetRSRBuf:
   672  000000                     
   673                           ; _indeks loaded to fsr2l
   674  00F74C  6ED9               	movwf	fsr2l,c
   675                           ;uart9b.c: 253: if(indeks<40) return bufRUART[in
      +                          deks];
   676  00F74E  0E28               	movlw	40
   677  00F750  60D9               	cpfslt	fsr2l,c
   678  00F752  D008               	goto	l49
   679  00F754  50D9               	movf	fsr2l,w,c
   680  00F756  EE0E  F0E7         	lfsr	0,_bufRUART
   681  00F75A  26E9               	addwf	fsr0l,f,c
   682  00F75C  0E00               	movlw	0
   683  00F75E  22EA               	addwfc	fsr0h,f,c
   684  00F760  50EF               	movf	indf0,w,c
   685  00F762  0012               	return	
   686  00F764                     l49:
   687                           ;uart9b.c: 254: else return bufRUART[40-1];
   688  00F764  CF0E  FFE8         	movff	_bufRUART+39,wreg
   689  00F768  0012               	return	
   690                           ;uart9b.c: 255: }
   691  00F76A                     __end_of_GetRSRBuf:
   692                           ;uart9b.c: 259: unsigned char LiczRSCHK(const un
      +                          signed char *bf,const unsigned char nData)
   693                           ;uart9b.c: 260: {
   694  00F76A  00AE               	dw	?_LiczRSCHK
   695  00F76C                     _LiczRSCHK:
   696  000000                     
   697                           ;uart9b.c: 261: unsigned char i,chk;
   698  00F76C  6AE1               	clrf	fsr1l,c
   699                           ;uart9b.c: 263: for(i=0;i<nData;i++) chk+=(*(bf+
      +                          i)+i)^0xAA;
   700  00F76E  6AD9               	clrf	fsr2l,c
   701  00F770                     l55:
   702  00F770  0100               	movlb	__Lparam shr (0+8)
   703  00F772  51B0               	movf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),w
   704  00F774  5CD9               	subwf	fsr2l,w,c
   705  00F776  E21C               	bc	u290
   706  00F778  50D9               	movf	fsr2l,w,c
   707  00F77A  25AE               	addwf	?_LiczRSCHK^(__Lparam& (0+65280)),w
   708  00F77C  6E00               	movwf	btemp,c
   709  00F77E  0E00               	movlw	0
   710  00F780  21AF               	addwfc	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),w
   711  00F782  6E01               	movwf	btemp+1,c
   712  00F784  C000  FFF6         	movff	btemp,tblptrl
   713  00F788  C001  FFF7         	movff	btemp+1,tblptrh
   714  00F78C  0E0F               	movlw	(high __ramtop+-1)
   715  00F78E  64F7               	cpfsgt	tblptrh,c
   716  00F790  D003               	bra	u287
   717  00F792  0008               	tblrd		*
   718  00F794  50F5               	movf	tablat,w,c
   719  00F796  D005               	bra	u280
   720  00F798                     u287:
   721  00F798  CFF6 FFE9          	movff	tblptrl,fsr0l
   722  00F79C  CFF7 FFEA          	movff	tblptrh,fsr0h
   723  00F7A0  50EF               	movf	indf0,w,c
   724  00F7A2                     u280:
   725  00F7A2  6E00               	movwf	btemp,c
   726  00F7A4  50D9               	movf	fsr2l,w,c
   727  00F7A6  2400               	addwf	btemp,w,c
   728  00F7A8  0AAA               	xorlw	-86
   729  00F7AA  26E1               	addwf	fsr1l,f,c
   730  00F7AC  2AD9               	incf	fsr2l,f,c
   731  00F7AE  D7E0               	goto	l55
   732  00F7B0                     u290:
   733                           ;uart9b.c: 264: return chk;
   734  00F7B0  50E1               	movf	fsr1l,w,c
   735  00F7B2  0012               	return	
   736                           ;uart9b.c: 265: }
   737  00F7B4                     __end_of_LiczRSCHK:
   738                           ;uart9b.c: 269: void SetRSCHK(unsigned char nDat
      +                          a)
   739                           ;uart9b.c: 270: {
   740  00F7B4                     _SetRSCHK:
   741  000000                     
   742                           ; _nData loaded to prodl
   743  00F7B4  6EF3               	movwf	prodl,c
   744                           ;uart9b.c: 271: if(nData>40) nData=40;
   745  00F7B6  0E28               	movlw	40
   746  00F7B8  64F3               	cpfsgt	prodl,c
   747  00F7BA  D001               	goto	l57
   748  00F7BC  6EF3               	movwf	prodl,c
   749  00F7BE                     l57:
   750                           ;uart9b.c: 272: if(!nData) nData=40;
   751  00F7BE  50F3               	movf	prodl,w,c
   752  00F7C0  E102               	bnz	l58
   753  00F7C2  0E28               	movlw	40
   754  00F7C4  6EF3               	movwf	prodl,c
   755  00F7C6                     l58:
   756                           ;uart9b.c: 273: UADt.CHK=LiczRSCHK(bufTUART,nDat
      +                          a-1);
   757  00F7C6  0100               	movlb	__Lparam shr (0+8)
   758  00F7C8  0E0F               	movlw	low _bufTUART
   759  00F7CA  6FAE               	movwf	?_LiczRSCHK^(__Lparam& (0+65280)),b
   760  00F7CC  0E0F               	movlw	high _bufTUART
   761  00F7CE  6FAF               	movwf	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),b
   762  00F7D0  04F3               	decf	prodl,w,c
   763  00F7D2  6FB0               	movwf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),b
   764  00F7D4  DFCB               	call	_LiczRSCHK	;wreg free
   765  00F7D6  CFE8 F2FB          	movff	wreg,_UADt+4
   766                           ;uart9b.c: 274: bufTUART[nData-1]=UADt.CHK;
   767  00F7DA  50F3               	movf	prodl,w,c
   768  00F7DC  EE0F  F00E         	lfsr	0,_bufTUART+-1
   769  00F7E0  26E9               	addwf	fsr0l,f,c
   770  00F7E2  0E00               	movlw	0
   771  00F7E4  22EA               	addwfc	fsr0h,f,c
   772  00F7E6  C2FB  FFEF         	movff	_UADt+4,indf0
   773                           ;uart9b.c: 275: }
   774  00F7EA  0C00               	retlw	0
   775  00F7EC                     __end_of_SetRSCHK:
   776                           ;uart9b.c: 280: unsigned char VerifyRSACK(void)
   777                           ;uart9b.c: 281: {
   778  00F7EC                     _VerifyRSACK:
   779  000000                     
   780                           ;uart9b.c: 282: if(bufRUART[2]==0xff) return 1;
   781  00F7EC  CEE9  F000         	movff	_bufRUART+2,btemp
   782  00F7F0  2800               	incf	btemp,w,c
   783  00F7F2  E101               	bnz	l60
   784  00F7F4  0C01               	retlw	1
   785  00F7F6                     l60:
   786                           ;uart9b.c: 283: return 0;
   787  00F7F6  0C00               	retlw	0
   788                           ;uart9b.c: 284: }
   789  00F7F8                     __end_of_VerifyRSACK:
   790                           ;uart9b.c: 289: unsigned char VerifyRSCHK(unsign
      +                          ed char nData)
   791                           ;uart9b.c: 290: {
   792  00F7F8                     _VerifyRSCHK:
   793  000000                     
   794                           ; _nData loaded to prodl
   795  00F7F8  6EF3               	movwf	prodl,c
   796                           ;uart9b.c: 291: if(nData>40) nData=40;
   797  00F7FA  0E28               	movlw	40
   798  00F7FC  64F3               	cpfsgt	prodl,c
   799  00F7FE  D001               	goto	l62
   800  00F800  6EF3               	movwf	prodl,c
   801  00F802                     l62:
   802                           ;uart9b.c: 292: if(!nData) nData=40;
   803  00F802  50F3               	movf	prodl,w,c
   804  00F804  E102               	bnz	l63
   805  00F806  0E28               	movlw	40
   806  00F808  6EF3               	movwf	prodl,c
   807  00F80A                     l63:
   808                           ;uart9b.c: 293: if(bufRUART[nData-1]==LiczRSCHK(
      +                          bufRUART,nData-1)) return 1;
   809  00F80A  0100               	movlb	__Lparam shr (0+8)
   810  00F80C  0EE7               	movlw	low _bufRUART
   811  00F80E  6FAE               	movwf	?_LiczRSCHK^(__Lparam& (0+65280)),b
   812  00F810  0E0E               	movlw	high _bufRUART
   813  00F812  6FAF               	movwf	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),b
   814  00F814  04F3               	decf	prodl,w,c
   815  00F816  6FB0               	movwf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),b
   816  00F818  DFA9               	call	_LiczRSCHK	;wreg free
   817  00F81A  6E00               	movwf	btemp,c
   818  00F81C  C000  F002         	movff	btemp,btemp+2
   819  00F820  6A03               	clrf	btemp+3,c
   820  00F822  50F3               	movf	prodl,w,c
   821  00F824  EE0E  F0E6         	lfsr	0,_bufRUART+-1
   822  00F828  26E9               	addwf	fsr0l,f,c
   823  00F82A  0E00               	movlw	0
   824  00F82C  22EA               	addwfc	fsr0h,f,c
   825  00F82E  50EF               	movf	indf0,w,c
   826  00F830  6E00               	movwf	btemp,c
   827  00F832  1802               	xorwf	btemp+2,w,c
   828  00F834  E101               	bnz	u355
   829  00F836  5203               	movf	btemp+3,f,c
   830  00F838                     u355:
   831  00F838  E101               	bnz	l64
   832  00F83A  0C01               	retlw	1
   833  00F83C                     l64:
   834                           ;uart9b.c: 294: return 0;
   835  00F83C  0C00               	retlw	0
   836                           ;uart9b.c: 295: }
   837  00F83E                     __end_of_VerifyRSCHK:
   838                           ;uart9b.c: 298: unsigned char GetRSCHK(void)
   839                           ;uart9b.c: 299: {
   840  00F83E                     _GetRSCHK:
   841  000000                     
   842                           ;uart9b.c: 300: return UADt.CHK;
   843  00F83E  C2FB  FFE8         	movff	_UADt+4,wreg
   844  00F842  0012               	return	
   845                           ;uart9b.c: 301: }
   846  00F844                     __end_of_GetRSCHK:
   847                           ;uart9b.c: 304: unsigned char SetNDatCHK(const u
      +                          nsigned char Data)
   848                           ;uart9b.c: 305: {
   849  00F844                     _SetNDatCHK:
   850  000000                     
   851                           ; _Data loaded to prodl
   852  00F844  6EF3               	movwf	prodl,c
   853                           ;uart9b.c: 306: unsigned char a,b,d;
   854  00F846  50F3               	movf	prodl,w,c
   855  00F848  0B1F               	andlw	31
   856  00F84A  6ED9               	movwf	fsr2l,c
   857                           ;uart9b.c: 308: a=d&0b00000111;
   858  00F84C  50D9               	movf	fsr2l,w,c
   859  00F84E  0B07               	andlw	7
   860  00F850  6EE1               	movwf	fsr1l,c
   861                           ;uart9b.c: 309: b=0b00000100|(d>>3);
   862  00F852  38D9               	swapf	fsr2l,w,c
   863  00F854  46E8               	rlncf	wreg,f,c
   864  00F856  0B1F               	andlw	31
   865  00F858  0904               	iorlw	4
   866  00F85A  6EE9               	movwf	fsr0l,c
   867                           ;uart9b.c: 310: return d|((a^b)<<5);
   868  00F85C  50E9               	movf	fsr0l,w,c
   869  00F85E  18E1               	xorwf	fsr1l,w,c
   870  00F860  6E00               	movwf	btemp,c
   871  00F862  0E05               	movlw	5
   872  00F864  6E01               	movwf	btemp+1,c
   873  00F866                     u365:
   874  00F866  90D8               	bcf	status,0,c
   875  00F868  3600               	rlcf	btemp,f,c
   876  00F86A  2E01               	decfsz	btemp+1,f,c
   877  00F86C  D7FC               	goto	u365
   878  00F86E  50D9               	movf	fsr2l,w,c
   879  00F870  1000               	iorwf	btemp,w,c
   880  00F872  0012               	return	
   881                           ;uart9b.c: 311: }
   882  00F874                     __end_of_SetNDatCHK:
   883                           ;uart9b.c: 321: unsigned char VerifyNDatCHK(cons
      +                          t unsigned char Data)
   884                           ;uart9b.c: 322: {
   885  00F874                     _VerifyNDatCHK:
   886  000000                     
   887                           ; _Data loaded to prodh
   888  00F874  6EF4               	movwf	prodh,c
   889                           ;uart9b.c: 323: if(SetNDatCHK(Data)==Data) retur
      +                          n 1;
   890  00F876  50F4               	movf	prodh,w,c
   891  00F878  DFE5               	call	_SetNDatCHK
   892  00F87A  18F4               	xorwf	prodh,w,c
   893  00F87C  E101               	bnz	l68
   894  00F87E  0C01               	retlw	1
   895  00F880                     l68:
   896                           ;uart9b.c: 324: return 0;
   897  00F880  0C00               	retlw	0
   898                           ;uart9b.c: 325: }
   899  00F882                     __end_of_VerifyNDatCHK:
   900                           ;uart9b.c: 328: void SetExNDatCHK(const unsigned
      +                           char ndt)
   901                           ;uart9b.c: 329: {
   902  00F882                     _SetExNDatCHK:
   903  000000                     
   904                           ; _ndt loaded to prodh
   905  00F882  6EF4               	movwf	prodh,c
   906                           ;uart9b.c: 330: volatile unsigned char chkndat;
   907  00F884  0E20               	movlw	32
   908  00F886  60F4               	cpfslt	prodh,c
   909  00F888  D003               	goto	l70
   910                           ;uart9b.c: 332: {
   911  00F88A  50F4               	movf	prodh,w,c
   912  00F88C  DFDB               	call	_SetNDatCHK
   913  00F88E  D002               	goto	L1
   914                           ;uart9b.c: 334: }
   915  00F890                     l70:
   916                           ;uart9b.c: 335: else chkndat=SetNDatCHK(31);
   917  00F890  0E1F               	movlw	31
   918  00F892  DFD8               	call	_SetNDatCHK
   919  00F894                     L1:
   920  00F894  0100               	movlb	__Lparam shr (0+8)
   921  00F896  6FAE               	movwf	?a_SetExNDatCHK^(__Lparam& (0+65280)),b	;
      +                          volatile
   922                           ;uart9b.c: 336: SetRSTBuf(1,chkndat);
   923  00F898  51AE               	movf	?a_SetExNDatCHK^(__Lparam& (0+65280)),w	;v
      +                          olatile
   924  00F89A  6FAF               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   925  00F89C  0E01               	movlw	1
   926  00F89E  DF37               	call	_SetRSTBuf
   927                           ;uart9b.c: 337: if(ndt>31)
   928  00F8A0  0E1F               	movlw	31
   929  00F8A2  64F4               	cpfsgt	prodh,c
   930  00F8A4  D004               	goto	l72
   931                           ;uart9b.c: 338: {
   932  00F8A6  50F4               	movf	prodh,w,c
   933  00F8A8  0FE1               	addlw	-31
   934  00F8AA  DFCC               	call	_SetNDatCHK
   935  00F8AC  D002               	goto	L2
   936                           ;uart9b.c: 340: }
   937  00F8AE                     l72:
   938                           ;uart9b.c: 341: else chkndat=SetNDatCHK(0);
   939  00F8AE  0E00               	movlw	0
   940  00F8B0  DFC9               	call	_SetNDatCHK
   941  00F8B2                     L2:
   942  00F8B2  0100               	movlb	__Lparam shr (0+8)
   943  00F8B4  6FAE               	movwf	?a_SetExNDatCHK^(__Lparam& (0+65280)),b	;
      +                          volatile
   944                           ;uart9b.c: 342: SetRSTBuf(3,chkndat);
   945  00F8B6  51AE               	movf	?a_SetExNDatCHK^(__Lparam& (0+65280)),w	;v
      +                          olatile
   946  00F8B8  6FAF               	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   947  00F8BA  0E03               	movlw	3
   948  00F8BC  D728               	goto	_SetRSTBuf
   949                           ;uart9b.c: 343: }
   950  00F8BE                     __end_of_SetExNDatCHK:
   951                           ;uart9b.c: 346: unsigned char GetNDat(void)
   952                           ;uart9b.c: 347: {
   953  00F8BE                     _GetNDat:
   954  000000                     
   955                           ;uart9b.c: 348: return (GetRSRBuf(1)&0b00011111)
      +                          ;
   956  00F8BE  0E01               	movlw	1
   957  00F8C0  DF45               	call	_GetRSRBuf
   958  00F8C2  0B1F               	andlw	31
   959  00F8C4  0012               	return	
   960                           ;uart9b.c: 349: }
   961  00F8C6                     __end_of_GetNDat:
   962                           ;uart9b.c: 352: unsigned char GetExNDat(void)
   963                           ;uart9b.c: 353: {
   964  00F8C6                     _GetExNDat:
   965  000000                     
   966                           ;uart9b.c: 354: return (GetRSRBuf(1)&0b00011111)
      +                          +(GetRSRBuf(3)&0b00011111);
   967  00F8C6  0E03               	movlw	3
   968  00F8C8  DF41               	call	_GetRSRBuf
   969  00F8CA  6E01               	movwf	btemp+1,c
   970  00F8CC  0E1F               	movlw	31
   971  00F8CE  1601               	andwf	btemp+1,f,c
   972  00F8D0  0E01               	movlw	1
   973  00F8D2  DF3C               	call	_GetRSRBuf
   974  00F8D4  6E00               	movwf	btemp,c
   975  00F8D6  0E1F               	movlw	31
   976  00F8D8  1600               	andwf	btemp,f,c
   977  00F8DA  5001               	movf	btemp+1,w,c
   978  00F8DC  2400               	addwf	btemp,w,c
   979  00F8DE  0012               	return	
   980                           ;uart9b.c: 355: }
   981  00F8E0                     __end_of_GetExNDat:
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413  000000                     
  1414  000000                     
  1415  000000                     
  1416  000000                     
  1417  000000                     
  1418  000000                     
  1419  000000                     
  1420  000000                     
  1421  000000                     
  1422  000000                     
  1423  000000                     
  1424  000000                     
  1425  000000                     
  1426  000000                     
  1427  000000                     
  1428  000000                     
  1429  000000                     
  1430  000000                     
  1431  000000                     
  1432  000000                     
  1433  000000                     
  1434  000000                     
  1435  000000                     
  1436  000000                     
  1437  000000                     
  1438  000000                     
  1439  000000                     
  1440  000000                     
  1441  000000                     
  1442  000000                     
  1443  000000                     
  1444  000000                     
  1445  000000                     
  1446  000000                     
  1447  000000                     
  1448  000000                     
  1449  000000                     
  1450  000000                     
  1451  000000                     
  1452  000000                     
  1453  000000                     
  1454  000000                     
  1455  000000                     
  1456  000000                     
  1457  000000                     
  1458  000000                     
  1459  000000                     
  1460  000000                     
  1461  000000                     
  1462  000000                     
  1463  000000                     
  1464  000000                     
  1465  000000                     
  1466  000000                     
  1467  000000                     
  1468  000000                     
  1469  000000                     
  1470  000000                     
  1471  000000                     
  1472  000000                     
  1473  000000                     
  1474  000000                     
  1475  000000                     
  1476  000000                     
  1477  000000                     
  1478  000000                     
  1479  000000                     
  1480  000000                     
  1481  000000                     
  1482  000000                     
  1483  000000                     
  1484  000000                     
  1485  000000                     
  1486  000000                     
  1487  000000                     
  1488  000000                     
  1489  000000                     
  1490  000000                     
  1491  000000                     
  1492  000000                     
  1493  000000                     
  1494  000000                     
  1495  000000                     
  1496  000000                     
  1497  000000                     
  1498  000000                     
  1499  000000                     
  1500  000000                     
  1501                           
  1502                           	psect	rbss
  1503  000057                     _RSerial:
  1504  000057                     	ds	1
  1505  000000                     
  1506  000000                     
  1507  000000                     
  1508  000000                     
  1509  000000                     
  1510  000000                     
  1511  000000                     
  1512  000000                     
  1513  000000                     
  1514  000000                     
  1515  000000                     
  1516  000000                     
  1517  000000                     
  1518  000000                     
  1519  000000                     
  1520  000000                     
  1521  000000                     
  1522  000000                     
  1523  000000                     
  1524  000000                     
  1525  000000                     
  1526  000000                     
  1527  000000                     
  1528  000000                     
  1529  000000                     
  1530  000000                     
  1531  000000                     
  1532  000000                     
  1533  000000                     
  1534  000000                     
  1535  000000                     
  1536  000000                     
  1537  000000                     
  1538  000000                     
  1539  000000                     
  1540  000000                     
  1541  000000                     
  1542  000000                     
  1543  000000                     
  1544  000000                     
  1545  000000                     
  1546  000000                     
  1547  000000                     
  1548  000000                     
  1549  000000                     
  1550  000000                     
  1551  000000                     
  1552  000000                     
  1553  000000                     
  1554                           
  1555                           	psect	bss
  1556  0002F7                     _UADt:
  1557  0002F7                     	ds	5
  1558                           
  1559                           	psect	bigbss
  1560  000EE7                     _bufRUART:
  1561  000EE7                     	ds	40
  1562  000EE7                     _bufTUART:
  1563  000EE7                     	ds	40
  1564                           
  1565                           	psect	temp
  1566  000000                     btemp:
  1567  000000                     	ds	4
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           prodh	equ	0xFF4
  1572                           prodl	equ	0xFF3
  1573                           indf0	equ	0xFEF
  1574                           fsr0h	equ	0xFEA
  1575                           fsr0l	equ	0xFE9
  1576                           wreg	equ	0xFE8
  1577                           fsr1l	equ	0xFE1
  1578                           fsr2l	equ	0xFD9
  1579                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:33:14 2020

                    l5 F54C                      l7 F60C  
                    l8 F5F6                      l9 F5EA  
                   l10 F570                     l11 F58E  
                   l14 F59C                     l31 F6B6  
                   l23 F632                     l32 F6C2  
                   l24 F634                     l16 F5DC  
                   l25 F640                     l26 F64C  
                   l43 F728                     l35 F6DA  
                   l27 F670                     l60 F7F6  
                   l70 F890                     l62 F802  
                   l46 F746                     l63 F80A  
                   l55 F770                     l39 F6F4  
                   l72 F8AE                     l64 F83C  
                   l57 F7BE                     l49 F764  
                   l58 F7C6                     l68 F880  
                  u100 F5AC                    u210 F69E  
                  u280 F7A2                    u290 F7B0  
                  u355 F838                    u365 F866  
                  u287 F798                    wreg 000FE8  
             _bufRUART 0EE7               _bufTUART 0F0F  
                 _UADt 02F7        __end_of_GetNDat F8C6  
                 fsr0h 000FEA                   indf0 000FEF  
                 fsr0l 000FE9                   fsr1l 000FE1  
                 fsr2l 000FD9                   btemp 0000  
                 prodh 000FF4                   prodl 000FF3  
          _VerifyRSACK F7EC            _VerifyRSCHK F7F8  
           used_btemp0 0001             used_btemp1 0001  
           used_btemp2 0001             used_btemp3 0001  
     __end_of_GetRSCHK F844    __end_of_VerifyRSACK F7F8  
  __end_of_VerifyRSCHK F83E                  tablat 000FF5  
              _GetNDat F8BE                  status 000FD8  
              _RSerial 0057       __end_of_InitUart F51A  
        _VerifyNDatCHK F874       __end_of_SetRSCHK F7EC  
              __Lparam 00A4            _StopUSARTTR F6CC  
  __end_of_StopUSARTTR F6D8  __end_of_VerifyNDatCHK F882  
              __ramtop 1000             _IntUSARTRC F51A  
           _IntUSARTTR F626              _ClrRSRBuf F6D8  
            _ClrRSTBuf F6F2     __end_of_IntUSARTRC F61A  
   __end_of_IntUSARTTR F67C      __end_of_ClrRSRBuf F6F2  
    __end_of_ClrRSTBuf F70C              _GetRSRBuf F74C  
            _GetRSTBuf F72E      __end_of_GetRSRBuf F76A  
    __end_of_GetRSTBuf F74C              _GetExNDat F8C6  
    __end_of_GetExNDat F8E0           _SetExNDatCHK F882  
 __end_of_SetExNDatCHK F8BE           _StartUSARTRC F61A  
         _StartUSARTTR F67C                 tblptrh 000FF7  
               tblptrl 000FF6               _GetRSCHK F83E  
            _LiczRSCHK F76C      __end_of_LiczRSCHK F7B4  
 __end_of_StartUSARTRC F626   __end_of_StartUSARTTR F6CC  
           _SetNDatCHK F844             ?_LiczRSCHK 00AE  
   __end_of_SetNDatCHK F874               _InitUart F4DE  
            _SetRSTBuf F70E      __end_of_SetRSTBuf F72E  
             _SetRSCHK F7B4         ?a_SetExNDatCHK 00AE  
           ?_SetRSTBuf 00AF  
