

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:33:13 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	const,global,class=CODE,delta=1
     6                           	psect	bss,global,class=RAM,space=1,delta=1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           
    99                           	psect	text
   100                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   101                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   102                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   103                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   104                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   105                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   106                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   107                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   108                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   109                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   110                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   111                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   112                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   113                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   114                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   115                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   116                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   117                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   118                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   119                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   120                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   121                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   122                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   123                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   124                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   125                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   126                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   127                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   128                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   129                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   130                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   131                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   132                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   133                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   134                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   135                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   136                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   137                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   138                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   139                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   140                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   141                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   142                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   143                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   144                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   145                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   146                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   147                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   148                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   149                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   150                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   151                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   152                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   153                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   154                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   155                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   156                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   157                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   158                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   159                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   160                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   161                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   162                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   163                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   164                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   165                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   166                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   167                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   168                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   169                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   170                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   171                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   172                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   173                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   174                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   175                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   176                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   177                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   178                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   179                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   180                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   181                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   182                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   183                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   184                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   185                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   186                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   187                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   188                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   189                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   190                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   191                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   192                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   193                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   194                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   195                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   196                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   197                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   198                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   199                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   200  003F64                     _Moduluj:
   201                           ;	_pv assigned to ?a_ProcToMod+1
   202  000000                     _ProcToMod$pv	set	?a_ProcToMod+1
   203                           ;	_prvnt assigned to ?a_ProcToMod+0
   204  000000                     _ProcToMod$prvnt	set	?a_ProcToMod
   205                           ;	_pv assigned to ?a_NewPop_SMOD+5
   206  000000                     _NewPop_SMOD$pv	set	?a_NewPop_SMOD+5
   207                           ;	_v assigned to ?a_NewPop_SMOD+3
   208  000000                     _NewPop_SMOD$v	set	?a_NewPop_SMOD+3
   209                           ;	_ppv assigned to ?a_NewPop_SMOD+2
   210  000000                     _NewPop_SMOD$ppv	set	?a_NewPop_SMOD+2
   211                           ;	_mrg assigned to ?a_NewPop_SMOD+1
   212  000000                     _NewPop_SMOD$mrg	set	?a_NewPop_SMOD+1
   213                           ;	_pw assigned to ?a_NewPop_SMOD+0
   214  000000                     _NewPop_SMOD$pw	set	?a_NewPop_SMOD
   215                           ;	_pw assigned to ?a_New_SMOD+1
   216  000000                     _New_SMOD$pw	set	?a_New_SMOD+1
   217                           ;	_pv assigned to ?a_New_SMOD+0
   218  000000                     _New_SMOD$pv	set	?a_New_SMOD
   219                           ;	_v assigned to ?a_NewPop_MAX_CO+3
   220  000000                     _NewPop_MAX_CO$v	set	?a_NewPop_MAX_CO+3
   221                           ;	_pv assigned to ?a_NewPop_MAX_CO+1
   222  000000                     _NewPop_MAX_CO$pv	set	?a_NewPop_MAX_CO+1
   223                           ;	_ppv assigned to ?a_NewPop_MAX_CO+0
   224  000000                     _NewPop_MAX_CO$ppv	set	?a_NewPop_MAX_CO
   225                           ;	_v assigned to ?a_NewPop_MAX_CW+3
   226  000000                     _NewPop_MAX_CW$v	set	?a_NewPop_MAX_CW+3
   227                           ;	_pv assigned to ?a_NewPop_MAX_CW+1
   228  000000                     _NewPop_MAX_CW$pv	set	?a_NewPop_MAX_CW+1
   229                           ;	_ppv assigned to ?a_NewPop_MAX_CW+0
   230  000000                     _NewPop_MAX_CW$ppv	set	?a_NewPop_MAX_CW
   231                           ;	_v assigned to ?a_NewPop_MIN+2
   232  000000                     _NewPop_MIN$v	set	?a_NewPop_MIN+2
   233                           ;	_pv assigned to ?a_NewPop_MIN+0
   234  000000                     _NewPop_MIN$pv	set	?a_NewPop_MIN
   235                           ;	_k assigned to ?a_ModPruCW2+0
   236  000000                     _ModPruCW2$k	set	?a_ModPruCW2
   237                           ;	_m assigned to ?a_ModDkCW2+0
   238  000000                     _ModDkCW2$m	set	?a_ModDkCW2
   239                           ;	_m assigned to ?a_ModZgCW2+0
   240  000000                     _ModZgCW2$m	set	?a_ModZgCW2
   241                           ;	_ada2 assigned to ?a_SetStab+0
   242  000000                     _SetStab$ada2	set	?a_SetStab
   243                           ;       param _res assigned to ?_SetStab+1
   244  000000                     _SetStab$res	set	?_SetStab+1
   245                           ;       param _k assigned to ?_SetStab+0
   246  000000                     _SetStab$k	set	?_SetStab
   247                           ;	_k assigned to ?a_ModPruCO+0
   248  000000                     _ModPruCO$k	set	?a_ModPruCO
   249                           ;	_m assigned to ?a_ModDkCO+2
   250  000000                     _ModDkCO$m	set	?a_ModDkCO+2
   251                           ;	_k assigned to ?a_ModDkCO+1
   252  000000                     _ModDkCO$k	set	?a_ModDkCO+1
   253                           ;	_ada assigned to ?a_ModDkCO+0
   254  000000                     _ModDkCO$ada	set	?a_ModDkCO
   255                           ;	_m assigned to ?a_ModZgCO+0
   256  000000                     _ModZgCO$m	set	?a_ModZgCO
   257                           ;	_m assigned to ?a_FirstXMOD+1
   258  000000                     _FirstXMOD$m	set	?a_FirstXMOD+1
   259  000000                     
   260                           ;rgl.c: 29: unsigned int wpw;
   261  003F64  D107               	goto	l18
   262  003F66                     l19:
   263                           ;rgl.c: 33: {
   264                           ;rgl.c: 35: {
   265  003F66  0103               	movlb	_M shr (0+8)
   266  003F68  AB06               	btfss	_M& (0+255),5,b
   267  003F6A  D02E               	goto	l20
   268                           ;rgl.c: 37: {
   269  003F6C  0E0C               	movlw	12
   270  003F6E  EC45  F07E         	call	_RTdS
   271  003F72  6E00               	movwf	btemp,c
   272  003F74  0E02               	movlw	2
   273  003F76  5C00               	subwf	btemp,w,c
   274  003F78  E307               	bnc	l21
   275                           ;rgl.c: 40: {
   276  003F7A  0E0C               	movlw	12
   277  003F7C  EC33  F07E         	call	_StartRTdS
   278                           ;rgl.c: 42: NewPop_MIN();
   279  003F80  EC8A  F02E         	call	_NewPop_MIN	;wreg free
   280                           ;rgl.c: 43: NewPop_MAX_CO();
   281  003F84  ECD4  F02F         	call	_NewPop_MAX_CO	;wreg free
   282  003F88                     l21:
   283                           ;rgl.c: 44: }
   284  003F88  EC7B  F030         	call	_New_MIN	;wreg free
   285                           ;rgl.c: 46: New_MAX_CO();
   286  003F8C  ECF0  F030         	call	_New_MAX_CO	;wreg free
   287                           ;rgl.c: 48: StartCO2();
   288  003F90  D8FA               	call	_StartCO2	;wreg free
   289                           ;rgl.c: 49: ReadDataCO2();
   290  003F92  ECEF  F029         	call	_ReadDataCO2	;wreg free
   291                           ;rgl.c: 50: ModToCO2();
   292  003F96  ECD2  F029         	call	_ModToCO2	;wreg free
   293                           ;rgl.c: 51: ModZgCO();
   294  003F9A  DB8C               	call	_ModZgCO	;wreg free
   295                           ;rgl.c: 52: ModDkCO();
   296  003F9C  EC4D  F024         	call	_ModDkCO	;wreg free
   297                           ;rgl.c: 53: if(RTdS(3)>10)
   298  003FA0  0E03               	movlw	3
   299  003FA2  EC45  F07E         	call	_RTdS
   300  003FA6  6E00               	movwf	btemp,c
   301  003FA8  0E0B               	movlw	11
   302  003FAA  5C00               	subwf	btemp,w,c
   303  003FAC  E309               	bnc	l22
   304                           ;rgl.c: 54: {
   305  003FAE  0E03               	movlw	3
   306  003FB0  EC33  F07E         	call	_StartRTdS
   307                           ;rgl.c: 56: IncConstCO2();
   308  003FB4  ECE7  F029         	call	_IncConstCO2	;wreg free
   309                           ;rgl.c: 57: IncMaxCO();
   310  003FB8  EC86  F026         	call	_IncMaxCO	;wreg free
   311                           ;rgl.c: 58: ModPruCO();
   312  003FBC  ECB5  F024         	call	_ModPruCO	;wreg free
   313  003FC0                     l22:
   314                           ;rgl.c: 59: }
   315  003FC0  EC0B  F027         	call	_ModPrzCO	;wreg free
   316                           ;rgl.c: 62: PropOPT();
   317  003FC4  EFCA  F028         	goto	_PropOPT	;wreg free
   318                           ;rgl.c: 63: }
   319  003FC8                     l20:
   320                           ;rgl.c: 64: else
   321  003FC8  0103               	movlb	_M shr (0+8)
   322  003FCA  A906               	btfss	_M& (0+255),4,b
   323  003FCC  0012               	return	
   324                           ;rgl.c: 66: {
   325  003FCE  0E0C               	movlw	12
   326  003FD0  EC45  F07E         	call	_RTdS
   327  003FD4  6E00               	movwf	btemp,c
   328  003FD6  0E02               	movlw	2
   329  003FD8  5C00               	subwf	btemp,w,c
   330  003FDA  E307               	bnc	l25
   331                           ;rgl.c: 69: {
   332  003FDC  0E0C               	movlw	12
   333  003FDE  EC33  F07E         	call	_StartRTdS
   334                           ;rgl.c: 71: NewPop_MIN();
   335  003FE2  EC8A  F02E         	call	_NewPop_MIN	;wreg free
   336                           ;rgl.c: 72: NewPop_MAX_CW();
   337  003FE6  EC2D  F02F         	call	_NewPop_MAX_CW	;wreg free
   338  003FEA                     l25:
   339                           ;rgl.c: 73: }
   340  003FEA  EC7B  F030         	call	_New_MIN	;wreg free
   341                           ;rgl.c: 75: New_MAX_CW();
   342  003FEE  ECB8  F030         	call	_New_MAX_CW	;wreg free
   343                           ;rgl.c: 77: StartMCW2();
   344  003FF2  EC76  F029         	call	_StartMCW2	;wreg free
   345                           ;rgl.c: 78: ReadDataCW2();
   346  003FF6  ECF4  F029         	call	_ReadDataCW2	;wreg free
   347                           ;rgl.c: 79: ModToCW2();
   348  003FFA  ECCC  F029         	call	_ModToCW2	;wreg free
   349                           ;rgl.c: 80: ModZgCW2();
   350  003FFE  ECFD  F029         	call	_ModZgCW2	;wreg free
   351                           ;rgl.c: 81: ModDkCW2();
   352  004002  ECFE  F02A         	call	_ModDkCW2	;wreg free
   353                           ;rgl.c: 83: if(RTdS(3)>10)
   354  004006  0E03               	movlw	3
   355  004008  EC45  F07E         	call	_RTdS
   356  00400C  6E00               	movwf	btemp,c
   357  00400E  0E0B               	movlw	11
   358  004010  5C00               	subwf	btemp,w,c
   359  004012  E309               	bnc	l26
   360                           ;rgl.c: 84: {
   361  004014  0E03               	movlw	3
   362  004016  EC33  F07E         	call	_StartRTdS
   363                           ;rgl.c: 86: IncConstCW2();
   364  00401A  ECD8  F029         	call	_IncConstCW2	;wreg free
   365                           ;rgl.c: 87: IncMaxCW2();
   366  00401E  EC55  F02D         	call	_IncMaxCW2	;wreg free
   367                           ;rgl.c: 88: ModPruCW2();
   368  004022  EC6B  F02B         	call	_ModPruCW2	;wreg free
   369  004026                     l26:
   370                           ;rgl.c: 89: }
   371  004026  EC8D  F02D         	call	_ModPrzCW2	;wreg free
   372                           ;rgl.c: 91: PropCO2();
   373  00402A  EFDB  F02D         	goto	_PropCO2	;wreg free
   374                           ;rgl.c: 93: }
   375  00402E                     l27:
   376                           ;rgl.c: 95: }
   377                           ;rgl.c: 97: {
   378  00402E  0E0C               	movlw	12
   379  004030  EC45  F07E         	call	_RTdS
   380  004034  6E00               	movwf	btemp,c
   381  004036  0E02               	movlw	2
   382  004038  5C00               	subwf	btemp,w,c
   383  00403A  E310               	bnc	l28
   384                           ;rgl.c: 100: {
   385  00403C  0E0C               	movlw	12
   386  00403E  EC33  F07E         	call	_StartRTdS
   387                           ;rgl.c: 102: NewPop_MIN();
   388  004042  EC8A  F02E         	call	_NewPop_MIN	;wreg free
   389                           ;rgl.c: 103: if(M._pob_CW||M._pob_AL)
   390  004046  0103               	movlb	_M shr (0+8)
   391  004048  B906               	btfsc	_M& (0+255),4,b
   392  00404A  D003               	goto	u100
   393  00404C  0103               	movlb	_M shr (0+8)
   394  00404E  A706               	btfss	_M& (0+255),3,b
   395  004050  D003               	goto	l29
   396  004052                     u100:
   397                           ;rgl.c: 104: {
   398  004052  EC2D  F02F         	call	_NewPop_MAX_CW	;wreg free
   399                           ;rgl.c: 106: }
   400  004056  D002               	goto	l28
   401  004058                     l29:
   402                           ;rgl.c: 107: else
   403  004058  ECD4  F02F         	call	_NewPop_MAX_CO	;wreg free
   404  00405C                     l28:
   405                           ;rgl.c: 110: }
   406  00405C  EC7B  F030         	call	_New_MIN	;wreg free
   407                           ;rgl.c: 113: if(M._pob_CW||M._pob_AL)
   408  004060  0103               	movlb	_M shr (0+8)
   409  004062  B906               	btfsc	_M& (0+255),4,b
   410  004064  D003               	goto	u130
   411  004066  0103               	movlb	_M shr (0+8)
   412  004068  A706               	btfss	_M& (0+255),3,b
   413  00406A  D003               	goto	l31
   414  00406C                     u130:
   415                           ;rgl.c: 114: {
   416  00406C  ECB8  F030         	call	_New_MAX_CW	;wreg free
   417                           ;rgl.c: 116: }
   418  004070  D002               	goto	l32
   419  004072                     l31:
   420                           ;rgl.c: 117: else
   421  004072  ECF0  F030         	call	_New_MAX_CO	;wreg free
   422  004076                     l32:
   423                           ;rgl.c: 120: }
   424  004076  D887               	call	_StartCO2	;wreg free
   425                           ;rgl.c: 123: ReadDataCO2();
   426  004078  ECEF  F029         	call	_ReadDataCO2	;wreg free
   427                           ;rgl.c: 124: ModToCO2();
   428  00407C  ECD2  F029         	call	_ModToCO2	;wreg free
   429                           ;rgl.c: 125: ModZgCO();
   430  004080  DB19               	call	_ModZgCO	;wreg free
   431                           ;rgl.c: 126: ModDkCO();
   432  004082  EC4D  F024         	call	_ModDkCO	;wreg free
   433                           ;rgl.c: 127: if(RTdS(3)>10)
   434  004086  0E03               	movlw	3
   435  004088  EC45  F07E         	call	_RTdS
   436  00408C  6E00               	movwf	btemp,c
   437  00408E  0E0B               	movlw	11
   438  004090  5C00               	subwf	btemp,w,c
   439  004092  E309               	bnc	l33
   440                           ;rgl.c: 128: {
   441  004094  0E03               	movlw	3
   442  004096  EC33  F07E         	call	_StartRTdS
   443                           ;rgl.c: 130: IncConstCO2();
   444  00409A  ECE7  F029         	call	_IncConstCO2	;wreg free
   445                           ;rgl.c: 131: IncMaxCO();
   446  00409E  EC86  F026         	call	_IncMaxCO	;wreg free
   447                           ;rgl.c: 132: ModPruCO();
   448  0040A2  ECB5  F024         	call	_ModPruCO	;wreg free
   449  0040A6                     l33:
   450                           ;rgl.c: 133: }
   451  0040A6  EC0B  F027         	call	_ModPrzCO	;wreg free
   452                           ;rgl.c: 136: PropOPT();
   453  0040AA  EFCA  F028         	goto	_PropOPT	;wreg free
   454                           ;rgl.c: 137: break;
   455  0040AE                     l34:
   456                           ;rgl.c: 138: }
   457                           ;rgl.c: 140: {
   458  0040AE  0103               	movlb	_M shr (0+8)
   459  0040B0  AB06               	btfss	_M& (0+255),5,b
   460  0040B2  D02D               	goto	l35
   461                           ;rgl.c: 142: {
   462  0040B4  0E0C               	movlw	12
   463  0040B6  EC45  F07E         	call	_RTdS
   464  0040BA  6E00               	movwf	btemp,c
   465  0040BC  0E02               	movlw	2
   466  0040BE  5C00               	subwf	btemp,w,c
   467  0040C0  E307               	bnc	l36
   468                           ;rgl.c: 145: {
   469  0040C2  0E0C               	movlw	12
   470  0040C4  EC33  F07E         	call	_StartRTdS
   471                           ;rgl.c: 147: NewPop_MIN();
   472  0040C8  EC8A  F02E         	call	_NewPop_MIN	;wreg free
   473                           ;rgl.c: 148: NewPop_MAX_CO();
   474  0040CC  ECD4  F02F         	call	_NewPop_MAX_CO	;wreg free
   475  0040D0                     l36:
   476                           ;rgl.c: 149: }
   477  0040D0  EC7B  F030         	call	_New_MIN	;wreg free
   478                           ;rgl.c: 151: New_MAX_CO();
   479  0040D4  ECF0  F030         	call	_New_MAX_CO	;wreg free
   480                           ;rgl.c: 153: StartCO2();
   481  0040D8  D856               	call	_StartCO2	;wreg free
   482                           ;rgl.c: 154: ReadDataCO2();
   483  0040DA  ECEF  F029         	call	_ReadDataCO2	;wreg free
   484                           ;rgl.c: 155: ModToCO2();
   485  0040DE  ECD2  F029         	call	_ModToCO2	;wreg free
   486                           ;rgl.c: 156: ModZgCO();
   487  0040E2  DAE8               	call	_ModZgCO	;wreg free
   488                           ;rgl.c: 157: ModDkCO();
   489  0040E4  DBDA               	call	_ModDkCO	;wreg free
   490                           ;rgl.c: 158: if(RTdS(3)>10)
   491  0040E6  0E03               	movlw	3
   492  0040E8  EC45  F07E         	call	_RTdS
   493  0040EC  6E00               	movwf	btemp,c
   494  0040EE  0E0B               	movlw	11
   495  0040F0  5C00               	subwf	btemp,w,c
   496  0040F2  E309               	bnc	l37
   497                           ;rgl.c: 159: {
   498  0040F4  0E03               	movlw	3
   499  0040F6  EC33  F07E         	call	_StartRTdS
   500                           ;rgl.c: 161: IncConstCO2();
   501  0040FA  ECE7  F029         	call	_IncConstCO2	;wreg free
   502                           ;rgl.c: 162: IncMaxCO();
   503  0040FE  EC86  F026         	call	_IncMaxCO	;wreg free
   504                           ;rgl.c: 163: ModPruCO();
   505  004102  ECB5  F024         	call	_ModPruCO	;wreg free
   506  004106                     l37:
   507                           ;rgl.c: 164: }
   508  004106  EC0B  F027         	call	_ModPrzCO	;wreg free
   509                           ;rgl.c: 166: PropOPT();
   510  00410A  EFCA  F028         	goto	_PropOPT	;wreg free
   511                           ;rgl.c: 167: }
   512  00410E                     l35:
   513                           ;rgl.c: 168: else
   514  00410E  0103               	movlb	_M shr (0+8)
   515  004110  A906               	btfss	_M& (0+255),4,b
   516  004112  0012               	return	
   517                           ;rgl.c: 170: {
   518  004114  0E0C               	movlw	12
   519  004116  EC45  F07E         	call	_RTdS
   520  00411A  6E00               	movwf	btemp,c
   521  00411C  0E02               	movlw	2
   522  00411E  5C00               	subwf	btemp,w,c
   523  004120  E307               	bnc	l40
   524                           ;rgl.c: 173: {
   525  004122  0E0C               	movlw	12
   526  004124  EC33  F07E         	call	_StartRTdS
   527                           ;rgl.c: 175: NewPop_MIN();
   528  004128  EC8A  F02E         	call	_NewPop_MIN	;wreg free
   529                           ;rgl.c: 176: NewPop_MAX_CW();
   530  00412C  EC2D  F02F         	call	_NewPop_MAX_CW	;wreg free
   531  004130                     l40:
   532                           ;rgl.c: 177: }
   533  004130  EC7B  F030         	call	_New_MIN	;wreg free
   534                           ;rgl.c: 179: New_MAX_CW();
   535  004134  ECB8  F030         	call	_New_MAX_CW	;wreg free
   536                           ;rgl.c: 181: StartMCW2();
   537  004138  EC76  F029         	call	_StartMCW2	;wreg free
   538                           ;rgl.c: 182: ReadDataCW2();
   539  00413C  ECF4  F029         	call	_ReadDataCW2	;wreg free
   540                           ;rgl.c: 183: ModToCW2();
   541  004140  ECCC  F029         	call	_ModToCW2	;wreg free
   542                           ;rgl.c: 184: ModZgCW2();
   543  004144  ECFD  F029         	call	_ModZgCW2	;wreg free
   544                           ;rgl.c: 185: ModDkCW2();
   545  004148  ECFE  F02A         	call	_ModDkCW2	;wreg free
   546                           ;rgl.c: 187: if(RTdS(3)>10)
   547  00414C  0E03               	movlw	3
   548  00414E  EC45  F07E         	call	_RTdS
   549  004152  6E00               	movwf	btemp,c
   550  004154  0E0B               	movlw	11
   551  004156  5C00               	subwf	btemp,w,c
   552  004158  E309               	bnc	l41
   553                           ;rgl.c: 188: {
   554  00415A  0E03               	movlw	3
   555  00415C  EC33  F07E         	call	_StartRTdS
   556                           ;rgl.c: 190: IncConstCW2();
   557  004160  ECD8  F029         	call	_IncConstCW2	;wreg free
   558                           ;rgl.c: 191: IncMaxCW2();
   559  004164  EC55  F02D         	call	_IncMaxCW2	;wreg free
   560                           ;rgl.c: 192: ModPruCW2();
   561  004168  EC6B  F02B         	call	_ModPruCW2	;wreg free
   562  00416C                     l41:
   563                           ;rgl.c: 193: }
   564  00416C  EC8D  F02D         	call	_ModPrzCW2	;wreg free
   565                           ;rgl.c: 195: PropCO2();
   566  004170  EFDB  F02D         	goto	_PropCO2	;wreg free
   567                           ;rgl.c: 197: }
   568  004174                     l18:
   569  004174  C2BC  FFE8         	movff	_DtKNF+14,wreg
   570  004178  0A00               	xorlw	0
   571  00417A  E101 D758          	bz	l27
   572  00417E  0A03               	xorlw	3
   573  004180  E101 D6F1          	bz	l19
   574  004184  D794               	goto	l34
   575                           ;rgl.c: 201: }
   576  004186                     __end_of_Moduluj:
   577                           ;rgl.c: 261: unsigned char FirstXMOD(void);
   578                           ;rgl.c: 262: void StartCO2(void)
   579                           ;rgl.c: 263: {
   580  004186                     _StartCO2:
   581  000000                     
   582                           ;rgl.c: 264: if(rgl.btco||rgl.btcw) return;
   583  004186  0103               	movlb	_rgl shr (0+8)
   584  004188  A1D7               	btfss	_rgl& (0+255),0,b
   585  00418A  B3D7               	btfsc	_rgl& (0+255),1,b
   586  00418C  0012               	return	
   587                           ;rgl.c: 265: StartRTdS(3);
   588  00418E  0E03               	movlw	3
   589  004190  EC33  F07E         	call	_StartRTdS
   590                           ;rgl.c: 266: popMIN=0;
   591  004194  010E               	movlb	_popMIN shr (0+8)
   592  004196  6BD9               	clrf	_popMIN& (0+255),b
   593                           ;rgl.c: 267: popMAXCO=0;
   594  004198  010E               	movlb	_popMAXCO shr (0+8)
   595  00419A  6BD7               	clrf	_popMAXCO& (0+255),b
   596                           ;rgl.c: 268: DtCO.dDCO=0;
   597  00419C  0100               	movlb	(_DtCO+10) shr (0+8)
   598  00419E  6B87               	clrf	(_DtCO+10)& (0+255),b
   599                           ;rgl.c: 269: DtCW.dDCW=0;
   600  0041A0  0100               	movlb	(_DtCW+8) shr (0+8)
   601  0041A2  6B76               	clrf	(_DtCW+8)& (0+255),b
   602                           ;rgl.c: 270: DtCO.ddDCO=0;
   603  0041A4  0100               	movlb	(_DtCO+11) shr (0+8)
   604  0041A6  6B88               	clrf	(_DtCO+11)& (0+255),b
   605                           ;rgl.c: 271: DtCW.ddDCW=0;
   606  0041A8  0100               	movlb	(_DtCW+9) shr (0+8)
   607  0041AA  6B77               	clrf	(_DtCW+9)& (0+255),b
   608                           ;rgl.c: 272: DtCO.indCO=0;
   609  0041AC  0100               	movlb	(_DtCO+12) shr (0+8)
   610  0041AE  6B89               	clrf	(_DtCO+12)& (0+255),b
   611                           ;rgl.c: 273: DtCW.indCW=0;
   612  0041B0  0100               	movlb	(_DtCW+10) shr (0+8)
   613  0041B2  6B78               	clrf	(_DtCW+10)& (0+255),b
   614                           ;rgl.c: 274: rgl.fz=0;
   615  0041B4  0103               	movlb	_rgl shr (0+8)
   616  0041B6  95D7               	bcf	_rgl& (0+255),2,b
   617                           ;rgl.c: 275: rgl.med_up=0;
   618  0041B8  97D7               	bcf	_rgl& (0+255),3,b
   619                           ;rgl.c: 276: rgl.fast_up=0;
   620  0041BA  99D7               	bcf	_rgl& (0+255),4,b
   621                           ;rgl.c: 277: rgl.srp=0;
   622  0041BC  6BDE               	clrf	(_rgl+7)& (0+255),b
   623                           ;rgl.c: 278: rgl.ytmp=0;
   624  0041BE  6BDD               	clrf	(_rgl+6)& (0+255),b
   625                           ;rgl.c: 279: rgl.nmod=0;
   626  0041C0  9BD7               	bcf	_rgl& (0+255),5,b
   627                           ;rgl.c: 280: rgl.del1s=0;
   628  0041C2  9DD7               	bcf	_rgl& (0+255),6,b
   629                           ;rgl.c: 281: rgl.inv_mod=0;
   630  0041C4  91D8               	bcf	(_rgl+1)& (0+255),0,b
   631                           ;rgl.c: 282: rgl.xmod=FirstXMOD();
   632  0041C6  D82E               	call	_FirstXMOD	;wreg free
   633  0041C8  CFE8 F3DF          	movff	wreg,_rgl+8
   634                           ;rgl.c: 283: tmr=1;
   635  0041CC  0E01               	movlw	1
   636  0041CE  CFE8 FEDF          	movff	wreg,_tmr
   637                           ;rgl.c: 284: tmr2=1;
   638  0041D2  CFE8 FEE0          	movff	wreg,_tmr2
   639                           ;rgl.c: 285: pwm_center=PWM.MINPWM+(PWM.MAXPWM-P
      +                          WM.MINPWM)/2;
   640  0041D6  0E02               	movlw	2
   641  0041D8  6E02               	movwf	btemp+2,c
   642  0041DA  6A03               	clrf	btemp+3,c
   643  0041DC  C2F5  FFE8         	movff	_PWM+28,wreg
   644  0041E0  C2F6  F000         	movff	_PWM+29,btemp
   645  0041E4  6A01               	clrf	btemp+1,c
   646  0041E6  5E00               	subwf	btemp,f,c
   647  0041E8  0E00               	movlw	0
   648  0041EA  5A01               	subwfb	btemp+1,f,c
   649  0041EC  ECA5  F006         	call	awdiv
   650  0041F0  C2F5  F000         	movff	_PWM+28,btemp
   651  0041F4  5000               	movf	btemp,w,c
   652  0041F6  2404               	addwf	btemp+4,w,c
   653  0041F8  CFE8 FEDD          	movff	wreg,_pwm_center
   654                           ;rgl.c: 286: pwm_kwr=PWM.MINPWM+(PWM.MAXPWM-PWM.
      +                          MINPWM)/4;
   655  0041FC  0E04               	movlw	4
   656  0041FE  6E02               	movwf	btemp+2,c
   657  004200  6A03               	clrf	btemp+3,c
   658  004202  C2F5  FFE8         	movff	_PWM+28,wreg
   659  004206  C2F6  F000         	movff	_PWM+29,btemp
   660  00420A  6A01               	clrf	btemp+1,c
   661  00420C  5E00               	subwf	btemp,f,c
   662  00420E  0E00               	movlw	0
   663  004210  5A01               	subwfb	btemp+1,f,c
   664  004212  ECA5  F006         	call	awdiv
   665  004216  C2F5  F000         	movff	_PWM+28,btemp
   666  00421A  5000               	movf	btemp,w,c
   667  00421C  2404               	addwf	btemp+4,w,c
   668  00421E  CFE8 FEDE          	movff	wreg,_pwm_kwr
   669                           ;rgl.c: 288: }
   670  004222  0012               	return	
   671  004224                     __end_of_StartCO2:
   672                           ;rgl.c: 291: unsigned char FirstXMOD(void)
   673                           ;rgl.c: 292: {
   674  004224                     _FirstXMOD:
   675  000000                     
   676                           ;	_p assigned to ?a_FirstXMOD+0
   677  000000                     _FirstXMOD$p	set	?a_FirstXMOD
   678                           ;rgl.c: 293: signed long m;
   679  004224  0E0A               	movlw	10
   680  004226  6E02               	movwf	btemp+2,c
   681  004228  6A03               	clrf	btemp+3,c
   682  00422A  C2F5  FFE8         	movff	_PWM+28,wreg
   683  00422E  C2F6  F000         	movff	_PWM+29,btemp
   684  004232  6A01               	clrf	btemp+1,c
   685  004234  5E00               	subwf	btemp,f,c
   686  004236  0E00               	movlw	0
   687  004238  5A01               	subwfb	btemp+1,f,c
   688  00423A  ECA5  F006         	call	awdiv
   689  00423E  90D8               	bcf	status,0,c
   690  004240  3604               	rlcf	btemp+4,f,c
   691  004242  90D8               	bcf	status,0,c
   692  004244  3404               	rlcf	btemp+4,w,c
   693  004246  0102               	movlb	(_PWM+29) shr (0+8)
   694  004248  5DF6               	subwf	(_PWM+29)& (0+255),w,b
   695  00424A  CFE8 F2EB          	movff	wreg,_PWM+18
   696                           ;rgl.c: 299: tmp=(PWM.FIRSTPB-PWM.MINPWM)/4;
   697  00424E  0E04               	movlw	4
   698  004250  6E02               	movwf	btemp+2,c
   699  004252  6A03               	clrf	btemp+3,c
   700  004254  C2F5  FFE8         	movff	_PWM+28,wreg
   701  004258  C2EB  F000         	movff	_PWM+18,btemp
   702  00425C  6A01               	clrf	btemp+1,c
   703  00425E  5E00               	subwf	btemp,f,c
   704  004260  0E00               	movlw	0
   705  004262  5A01               	subwfb	btemp+1,f,c
   706  004264  ECA5  F006         	call	awdiv
   707  004268  5004               	movf	btemp+4,w,c
   708  00426A  6ED9               	movwf	fsr2l,c
   709                           ;rgl.c: 300: if(PWM.MAXPWM>(PWM.FIRSTPB+tmp))
   710  00426C  C2F6  F000         	movff	_PWM+29,btemp
   711  004270  6A01               	clrf	btemp+1,c
   712  004272  50D9               	movf	fsr2l,w,c
   713  004274  C2EB  F002         	movff	_PWM+18,btemp+2
   714  004278  6A03               	clrf	btemp+3,c
   715  00427A  2602               	addwf	btemp+2,f,c
   716  00427C  0E00               	movlw	0
   717  00427E  2203               	addwfc	btemp+3,f,c
   718  004280  5003               	movf	btemp+3,w,c
   719  004282  0A80               	xorlw	128
   720  004284  6E04               	movwf	btemp+4,c
   721  004286  5001               	movf	btemp+1,w,c
   722  004288  0A80               	xorlw	128
   723  00428A  5C04               	subwf	btemp+4,w,c
   724  00428C  E102               	bnz	u245
   725  00428E  5000               	movf	btemp,w,c
   726  004290  5C02               	subwf	btemp+2,w,c
   727  004292                     u245:
   728  004292  E205               	bc	l45
   729                           ;rgl.c: 301: {
   730  004294  50D9               	movf	fsr2l,w,c
   731  004296  0102               	movlb	(_PWM+18) shr (0+8)
   732  004298  25EB               	addwf	(_PWM+18)& (0+255),w,b
   733  00429A  6EE1               	movwf	fsr1l,c
   734                           ;rgl.c: 303: }
   735  00429C  D002               	goto	l46
   736  00429E                     l45:
   737                           ;rgl.c: 304: else
   738  00429E  C2F6  FFE1         	movff	_PWM+29,fsr1l
   739  0042A2                     l46:
   740                           ;rgl.c: 307: }
   741  0042A2  50E1               	movf	fsr1l,w,c
   742  0042A4  0100               	movlb	__Lparam shr (0+8)
   743  0042A6  6FA4               	movwf	?a_FirstXMOD^(__Lparam& (0+65280)),b
   744                           ;rgl.c: 312: if(DtCO.CO>=20&&DtCO.CO<=80)
   745  0042A8  0E13               	movlw	19
   746  0042AA  0100               	movlb	(_DtCO+3) shr (0+8)
   747  0042AC  6580               	cpfsgt	(_DtCO+3)& (0+255),b
   748  0042AE  D072               	goto	l47
   749  0042B0  0E51               	movlw	81
   750  0042B2  6180               	cpfslt	(_DtCO+3)& (0+255),b
   751  0042B4  D06F               	goto	l47
   752                           ;rgl.c: 313: {
   753  0042B6  0E0A               	movlw	10
   754  0042B8  6E04               	movwf	btemp+4,c
   755  0042BA  6A05               	clrf	btemp+5,c
   756  0042BC  6A06               	clrf	btemp+6,c
   757  0042BE  6A07               	clrf	btemp+7,c
   758  0042C0  0E50               	movlw	80
   759  0042C2  6E00               	movwf	btemp,c
   760  0042C4  6A01               	clrf	btemp+1,c
   761  0042C6  C080  FFE8         	movff	_DtCO+3,wreg
   762  0042CA  5E00               	subwf	btemp,f,c
   763  0042CC  0E00               	movlw	0
   764  0042CE  5A01               	subwfb	btemp+1,f,c
   765  0042D0  BE01               	btfsc	btemp+1,7,c
   766  0042D2  0EFF               	movlw	255
   767  0042D4  6E02               	movwf	btemp+2,c
   768  0042D6  6E03               	movwf	btemp+3,c
   769  0042D8  ECB2  F004         	call	almul
   770  0042DC  C000  F0A5         	movff	btemp,?a_FirstXMOD+1
   771  0042E0  C001  F0A6         	movff	btemp+1,?a_FirstXMOD+2
   772  0042E4  C002  F0A7         	movff	btemp+2,?a_FirstXMOD+3
   773  0042E8  C003  F0A8         	movff	btemp+3,?a_FirstXMOD+4
   774                           ;rgl.c: 315: m=m/(signed long)(80-20);
   775  0042EC  0E3C               	movlw	60
   776  0042EE  6E04               	movwf	btemp+4,c
   777  0042F0  6A05               	clrf	btemp+5,c
   778  0042F2  6A06               	clrf	btemp+6,c
   779  0042F4  6A07               	clrf	btemp+7,c
   780  0042F6  0EA5               	movlw	low (?a_FirstXMOD+1)
   781  0042F8  6EE9               	movwf	fsr0l,c
   782  0042FA  0E00               	movlw	high (?a_FirstXMOD+1)
   783  0042FC  6EEA               	movwf	fsr0h,c
   784  0042FE  EC64  F007         	call	aldiv_f
   785                           ;rgl.c: 316: m=m*(signed long)(maxmod-PWM.MINPWM
      +                          );
   786  004302  C2F5  FFE8         	movff	_PWM+28,wreg
   787  004306  5CE1               	subwf	fsr1l,w,c
   788  004308  6E04               	movwf	btemp+4,c
   789  00430A  6A05               	clrf	btemp+5,c
   790  00430C  A0D8               	btfss	status,0,c
   791  00430E  0605               	decf	btemp+5,f,c
   792  004310  6A06               	clrf	btemp+6,c
   793  004312  BE05               	btfsc	btemp+5,7,c
   794  004314  0606               	decf	btemp+6,f,c
   795  004316  5006               	movf	btemp+6,w,c
   796  004318  6E07               	movwf	btemp+7,c
   797  00431A  0EA5               	movlw	low (?a_FirstXMOD+1)
   798  00431C  6EE9               	movwf	fsr0l,c
   799  00431E  0E00               	movlw	high (?a_FirstXMOD+1)
   800  004320  6EEA               	movwf	fsr0h,c
   801  004322  EC6E  F007         	call	almul_f
   802                           ;rgl.c: 317: if(m<0) m=0;
   803  004326  0100               	movlb	__Lparam shr (0+8)
   804  004328  AFA8               	btfss	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),7,
      +                          b
   805  00432A  D004               	goto	l48
   806  00432C  6BA5               	clrf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
   807  00432E  6BA6               	clrf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
   808  004330  6BA7               	clrf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
   809  004332  6BA8               	clrf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
   810  004334                     l48:
   811                           ;rgl.c: 318: m=m/10+PWM.MINPWM;
   812  004334  0E0A               	movlw	10
   813  004336  6E04               	movwf	btemp+4,c
   814  004338  6A05               	clrf	btemp+5,c
   815  00433A  6A06               	clrf	btemp+6,c
   816  00433C  6A07               	clrf	btemp+7,c
   817  00433E  C0A5  F000         	movff	?a_FirstXMOD+1,btemp
   818  004342  C0A6  F001         	movff	?a_FirstXMOD+2,btemp+1
   819  004346  C0A7  F002         	movff	?a_FirstXMOD+3,btemp+2
   820  00434A  C0A8  F003         	movff	?a_FirstXMOD+4,btemp+3
   821  00434E  EC3D  F006         	call	aldiv
   822  004352  C2F5  FFE8         	movff	_PWM+28,wreg
   823  004356  2400               	addwf	btemp,w,c
   824  004358  0100               	movlb	__Lparam shr (0+8)
   825  00435A  6FA5               	movwf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
   826  00435C  0E00               	movlw	0
   827  00435E  2001               	addwfc	btemp+1,w,c
   828  004360  6FA6               	movwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
   829  004362  0E00               	movlw	0
   830  004364  2002               	addwfc	btemp+2,w,c
   831  004366  6FA7               	movwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
   832  004368  0E00               	movlw	0
   833  00436A  2003               	addwfc	btemp+3,w,c
   834  00436C  6FA8               	movwf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
   835                           ;rgl.c: 319: if(m>0xff) p=maxmod;
   836  00436E  51A8               	movf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),w
   837  004370  0A80               	xorlw	128
   838  004372  0F80               	addlw	128
   839  004374  E108               	bnz	u295
   840  004376  0E00               	movlw	0
   841  004378  5DA7               	subwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),w
   842  00437A  E105               	bnz	u295
   843  00437C  0E01               	movlw	1
   844  00437E  5DA6               	subwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),w
   845  004380  E102               	bnz	u295
   846  004382  0E00               	movlw	0
   847  004384  5DA5               	subwf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),w
   848  004386                     u295:
   849  004386  E303               	bnc	l49
   850  004388  50E1               	movf	fsr1l,w,c
   851  00438A                     L1:
   852  00438A  6FA4               	movwf	?a_FirstXMOD^(__Lparam& (0+65280)),b
   853  00438C  D010               	goto	l51
   854  00438E                     l49:
   855                           ;rgl.c: 320: else p=(unsigned char)m;
   856  00438E  0100               	movlb	__Lparam shr (0+8)
   857  004390  51A5               	movf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),w
   858  004392  D7FB               	goto	L1
   859                           ;rgl.c: 321: }
   860  004394                     l47:
   861                           ;rgl.c: 322: else
   862  004394  0E14               	movlw	20
   863  004396  0100               	movlb	(_DtCO+3) shr (0+8)
   864  004398  6180               	cpfslt	(_DtCO+3)& (0+255),b
   865  00439A  D003               	goto	l52
   866  00439C  50E1               	movf	fsr1l,w,c
   867  00439E  0100               	movlb	__Lparam shr (0+8)
   868  0043A0  6FA4               	movwf	?a_FirstXMOD^(__Lparam& (0+65280)),b
   869  0043A2                     l52:
   870                           ;rgl.c: 325: if(DtCO.CO>80) p=PWM.MINPWM;
   871  0043A2  0E50               	movlw	80
   872  0043A4  0100               	movlb	(_DtCO+3) shr (0+8)
   873  0043A6  6580               	cpfsgt	(_DtCO+3)& (0+255),b
   874  0043A8  D002               	goto	l51
   875  0043AA  C2F5  F0A4         	movff	_PWM+28,?a_FirstXMOD
   876  0043AE                     l51:
   877                           ;rgl.c: 326: }
   878  0043AE  EE02  F0C8         	lfsr	0,_DtKNF+26
   879  0043B2  50EF               	movf	indf0,w,c
   880  0043B4  E176               	bnz	l54
   881                           ;rgl.c: 330: {
   882  0043B6  0E27               	movlw	39
   883  0043B8  0103               	movlb	(_M+35) shr (0+8)
   884  0043BA  6529               	cpfsgt	(_M+35)& (0+255),b
   885  0043BC  D0E9               	goto	l61
   886  0043BE  0E51               	movlw	81
   887  0043C0  6129               	cpfslt	(_M+35)& (0+255),b
   888  0043C2  D0E6               	goto	l61
   889                           ;rgl.c: 332: {
   890  0043C4  0E0A               	movlw	10
   891  0043C6  6E04               	movwf	btemp+4,c
   892  0043C8  6A05               	clrf	btemp+5,c
   893  0043CA  6A06               	clrf	btemp+6,c
   894  0043CC  6A07               	clrf	btemp+7,c
   895  0043CE  C329  F000         	movff	_M+35,btemp
   896  0043D2  0ED8               	movlw	216
   897  0043D4  2400               	addwf	btemp,w,c
   898  0043D6  6E02               	movwf	btemp+2,c
   899  0043D8  6A03               	clrf	btemp+3,c
   900  0043DA  0EFF               	movlw	255
   901  0043DC  2203               	addwfc	btemp+3,f,c
   902  0043DE  C002  F000         	movff	btemp+2,btemp
   903  0043E2  C003  F001         	movff	btemp+3,btemp+1
   904  0043E6  0E00               	movlw	0
   905  0043E8  BE01               	btfsc	btemp+1,7,c
   906  0043EA  0EFF               	movlw	255
   907  0043EC  6E02               	movwf	btemp+2,c
   908  0043EE  6E03               	movwf	btemp+3,c
   909  0043F0  ECB2  F004         	call	almul
   910  0043F4  C000  F0A5         	movff	btemp,?a_FirstXMOD+1
   911  0043F8  C001  F0A6         	movff	btemp+1,?a_FirstXMOD+2
   912  0043FC  C002  F0A7         	movff	btemp+2,?a_FirstXMOD+3
   913  004400  C003  F0A8         	movff	btemp+3,?a_FirstXMOD+4
   914                           ;rgl.c: 334: m=m/(signed long)(80-40);
   915  004404  0E28               	movlw	40
   916  004406  6E04               	movwf	btemp+4,c
   917  004408  6A05               	clrf	btemp+5,c
   918  00440A  6A06               	clrf	btemp+6,c
   919  00440C  6A07               	clrf	btemp+7,c
   920  00440E  0EA5               	movlw	low (?a_FirstXMOD+1)
   921  004410  6EE9               	movwf	fsr0l,c
   922  004412  0E00               	movlw	high (?a_FirstXMOD+1)
   923  004414  6EEA               	movwf	fsr0h,c
   924  004416  EC64  F007         	call	aldiv_f
   925                           ;rgl.c: 335: m=m*(signed long)(maxmod-PWM.MINPWM
      +                          );
   926  00441A  C2F5  FFE8         	movff	_PWM+28,wreg
   927  00441E  5CE1               	subwf	fsr1l,w,c
   928  004420  6E04               	movwf	btemp+4,c
   929  004422  6A05               	clrf	btemp+5,c
   930  004424  A0D8               	btfss	status,0,c
   931  004426  0605               	decf	btemp+5,f,c
   932  004428  6A06               	clrf	btemp+6,c
   933  00442A  BE05               	btfsc	btemp+5,7,c
   934  00442C  0606               	decf	btemp+6,f,c
   935  00442E  5006               	movf	btemp+6,w,c
   936  004430  6E07               	movwf	btemp+7,c
   937  004432  0EA5               	movlw	low (?a_FirstXMOD+1)
   938  004434  6EE9               	movwf	fsr0l,c
   939  004436  0E00               	movlw	high (?a_FirstXMOD+1)
   940  004438  6EEA               	movwf	fsr0h,c
   941  00443A  EC6E  F007         	call	almul_f
   942                           ;rgl.c: 336: if(m<0) m=0;
   943  00443E  0100               	movlb	__Lparam shr (0+8)
   944  004440  AFA8               	btfss	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),7,
      +                          b
   945  004442  D004               	goto	l56
   946  004444  6BA5               	clrf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
   947  004446  6BA6               	clrf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
   948  004448  6BA7               	clrf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
   949  00444A  6BA8               	clrf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
   950  00444C                     l56:
   951                           ;rgl.c: 337: m=m/10+PWM.MINPWM;
   952  00444C  0E0A               	movlw	10
   953  00444E  6E04               	movwf	btemp+4,c
   954  004450  6A05               	clrf	btemp+5,c
   955  004452  6A06               	clrf	btemp+6,c
   956  004454  6A07               	clrf	btemp+7,c
   957  004456  C0A5  F000         	movff	?a_FirstXMOD+1,btemp
   958  00445A  C0A6  F001         	movff	?a_FirstXMOD+2,btemp+1
   959  00445E  C0A7  F002         	movff	?a_FirstXMOD+3,btemp+2
   960  004462  C0A8  F003         	movff	?a_FirstXMOD+4,btemp+3
   961  004466  EC3D  F006         	call	aldiv
   962  00446A  C2F5  FFE8         	movff	_PWM+28,wreg
   963  00446E  2400               	addwf	btemp,w,c
   964  004470  0100               	movlb	__Lparam shr (0+8)
   965  004472  6FA5               	movwf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
   966  004474  0E00               	movlw	0
   967  004476  2001               	addwfc	btemp+1,w,c
   968  004478  6FA6               	movwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
   969  00447A  0E00               	movlw	0
   970  00447C  2002               	addwfc	btemp+2,w,c
   971  00447E  6FA7               	movwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
   972  004480  0E00               	movlw	0
   973  004482  2003               	addwfc	btemp+3,w,c
   974  004484  6FA8               	movwf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
   975                           ;rgl.c: 338: if(m>0xff) p2=maxmod;
   976  004486  51A8               	movf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),w
   977  004488  0A80               	xorlw	128
   978  00448A  0F80               	addlw	128
   979  00448C  E17E               	bnz	u375
   980  00448E  0E00               	movlw	0
   981  004490  5DA7               	subwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),w
   982  004492  E17B               	bnz	u375
   983  004494  0E01               	movlw	1
   984  004496  5DA6               	subwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),w
   985  004498  E178               	bnz	u375
   986  00449A  D075               	goto	L29
   987  00449C                     l57:
   988                           ;rgl.c: 339: else p2=(unsigned char)m;
   989  00449C  0100               	movlb	__Lparam shr (0+8)
   990  00449E  51A5               	movf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),w
   991  0044A0  D079               	goto	L24
   992                           ;rgl.c: 340: }else p2=p;
   993                           ;rgl.c: 341: }
   994  0044A2                     l54:
   995                           ;rgl.c: 342: else
   996  0044A2  0E18               	movlw	24
   997  0044A4  0103               	movlb	(_M+35) shr (0+8)
   998  0044A6  6529               	cpfsgt	(_M+35)& (0+255),b
   999  0044A8  D073               	goto	l61
  1000  0044AA  0E38               	movlw	56
  1001  0044AC  6129               	cpfslt	(_M+35)& (0+255),b
  1002  0044AE  D070               	goto	l61
  1003                           ;rgl.c: 345: {
  1004  0044B0  0E0A               	movlw	10
  1005  0044B2  6E04               	movwf	btemp+4,c
  1006  0044B4  6A05               	clrf	btemp+5,c
  1007  0044B6  6A06               	clrf	btemp+6,c
  1008  0044B8  6A07               	clrf	btemp+7,c
  1009  0044BA  C329  F000         	movff	_M+35,btemp
  1010  0044BE  0EE7               	movlw	231
  1011  0044C0  2400               	addwf	btemp,w,c
  1012  0044C2  6E02               	movwf	btemp+2,c
  1013  0044C4  6A03               	clrf	btemp+3,c
  1014  0044C6  0EFF               	movlw	255
  1015  0044C8  2203               	addwfc	btemp+3,f,c
  1016  0044CA  C002  F000         	movff	btemp+2,btemp
  1017  0044CE  C003  F001         	movff	btemp+3,btemp+1
  1018  0044D2  0E00               	movlw	0
  1019  0044D4  BE01               	btfsc	btemp+1,7,c
  1020  0044D6  0EFF               	movlw	255
  1021  0044D8  6E02               	movwf	btemp+2,c
  1022  0044DA  6E03               	movwf	btemp+3,c
  1023  0044DC  ECB2  F004         	call	almul
  1024  0044E0  C000  F0A5         	movff	btemp,?a_FirstXMOD+1
  1025  0044E4  C001  F0A6         	movff	btemp+1,?a_FirstXMOD+2
  1026  0044E8  C002  F0A7         	movff	btemp+2,?a_FirstXMOD+3
  1027  0044EC  C003  F0A8         	movff	btemp+3,?a_FirstXMOD+4
  1028                           ;rgl.c: 347: m=m/(signed long)(55-25);
  1029  0044F0  0E1E               	movlw	30
  1030  0044F2  6E04               	movwf	btemp+4,c
  1031  0044F4  6A05               	clrf	btemp+5,c
  1032  0044F6  6A06               	clrf	btemp+6,c
  1033  0044F8  6A07               	clrf	btemp+7,c
  1034  0044FA  0EA5               	movlw	low (?a_FirstXMOD+1)
  1035  0044FC  6EE9               	movwf	fsr0l,c
  1036  0044FE  0E00               	movlw	high (?a_FirstXMOD+1)
  1037  004500  6EEA               	movwf	fsr0h,c
  1038  004502  EC64  F007         	call	aldiv_f
  1039                           ;rgl.c: 348: m=m*(signed long)(maxmod-PWM.MINPWM
      +                          );
  1040  004506  C2F5  FFE8         	movff	_PWM+28,wreg
  1041  00450A  5CE1               	subwf	fsr1l,w,c
  1042  00450C  6E04               	movwf	btemp+4,c
  1043  00450E  6A05               	clrf	btemp+5,c
  1044  004510  A0D8               	btfss	status,0,c
  1045  004512  0605               	decf	btemp+5,f,c
  1046  004514  6A06               	clrf	btemp+6,c
  1047  004516  BE05               	btfsc	btemp+5,7,c
  1048  004518  0606               	decf	btemp+6,f,c
  1049  00451A  5006               	movf	btemp+6,w,c
  1050  00451C  6E07               	movwf	btemp+7,c
  1051  00451E  0EA5               	movlw	low (?a_FirstXMOD+1)
  1052  004520  6EE9               	movwf	fsr0l,c
  1053  004522  0E00               	movlw	high (?a_FirstXMOD+1)
  1054  004524  6EEA               	movwf	fsr0h,c
  1055  004526  EC6E  F007         	call	almul_f
  1056                           ;rgl.c: 349: if(m<0) m=0;
  1057  00452A  0100               	movlb	__Lparam shr (0+8)
  1058  00452C  AFA8               	btfss	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),7,
      +                          b
  1059  00452E  D004               	goto	l62
  1060  004530  6BA5               	clrf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
  1061  004532  6BA6               	clrf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
  1062  004534  6BA7               	clrf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
  1063  004536  6BA8               	clrf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
  1064  004538                     l62:
  1065                           ;rgl.c: 350: m=m/10+PWM.MINPWM;
  1066  004538  0E0A               	movlw	10
  1067  00453A  6E04               	movwf	btemp+4,c
  1068  00453C  6A05               	clrf	btemp+5,c
  1069  00453E  6A06               	clrf	btemp+6,c
  1070  004540  6A07               	clrf	btemp+7,c
  1071  004542  C0A5  F000         	movff	?a_FirstXMOD+1,btemp
  1072  004546  C0A6  F001         	movff	?a_FirstXMOD+2,btemp+1
  1073  00454A  C0A7  F002         	movff	?a_FirstXMOD+3,btemp+2
  1074  00454E  C0A8  F003         	movff	?a_FirstXMOD+4,btemp+3
  1075  004552  EC3D  F006         	call	aldiv
  1076  004556  C2F5  FFE8         	movff	_PWM+28,wreg
  1077  00455A  2400               	addwf	btemp,w,c
  1078  00455C  0100               	movlb	__Lparam shr (0+8)
  1079  00455E  6FA5               	movwf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
  1080  004560  0E00               	movlw	0
  1081  004562  2001               	addwfc	btemp+1,w,c
  1082  004564  6FA6               	movwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
  1083  004566  0E00               	movlw	0
  1084  004568  2002               	addwfc	btemp+2,w,c
  1085  00456A  6FA7               	movwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
  1086  00456C  0E00               	movlw	0
  1087  00456E  2003               	addwfc	btemp+3,w,c
  1088  004570  6FA8               	movwf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
  1089                           ;rgl.c: 351: if(m>0xff) p2=maxmod;
  1090  004572  51A8               	movf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),w
  1091  004574  0A80               	xorlw	128
  1092  004576  0F80               	addlw	128
  1093  004578  E108               	bnz	u425
  1094  00457A  0E00               	movlw	0
  1095  00457C  5DA7               	subwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),w
  1096  00457E  E105               	bnz	u425
  1097  004580  0E01               	movlw	1
  1098  004582  5DA6               	subwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),w
  1099  004584  E102               	bnz	u425
  1100  004586                     L29:
  1101  004586  0E00               	movlw	0
  1102  004588  5DA5               	subwf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),w
  1103  00458A                     u375:
  1104  00458A                     u425:
  1105  00458A  E388               	bnc	l57
  1106  00458C  50E1               	movf	fsr1l,w,c
  1107  00458E  D002               	goto	L24
  1108                           ;rgl.c: 352: else p2=(unsigned char)m;
  1109                           ;rgl.c: 353: }else p2=p;
  1110  004590                     l61:
  1111  004590  0100               	movlb	__Lparam shr (0+8)
  1112  004592  51A4               	movf	?a_FirstXMOD^(__Lparam& (0+65280)),w
  1113  004594                     L24:
  1114  004594  6ED9               	movwf	fsr2l,c
  1115                           ;rgl.c: 354: }
  1116  004596  0100               	movlb	__Lparam shr (0+8)
  1117  004598  51A4               	movf	?a_FirstXMOD^(__Lparam& (0+65280)),w
  1118  00459A  60D9               	cpfslt	fsr2l,c
  1119  00459C  D002               	goto	l66
  1120  00459E  50D9               	movf	fsr2l,w,c
  1121  0045A0  6FA4               	movwf	?a_FirstXMOD^(__Lparam& (0+65280)),b
  1122  0045A2                     l66:
  1123                           ;rgl.c: 360: if(DtCO.DCO>=0&&DtCO.DCO<=40)
  1124  0045A2  C086  F000         	movff	_DtCO+9,btemp
  1125  0045A6  C086  FFE8         	movff	_DtCO+9,wreg
  1126  0045AA  0A80               	xorlw	128
  1127  0045AC  BE00               	btfsc	btemp,7,c
  1128  0045AE  D070               	goto	L35
  1129  0045B0  0F57               	addlw	-169
  1130  0045B2  E26B               	bc	l67
  1131                           ;rgl.c: 361: {
  1132  0045B4  0E0A               	movlw	10
  1133  0045B6  6E04               	movwf	btemp+4,c
  1134  0045B8  6A05               	clrf	btemp+5,c
  1135  0045BA  6A06               	clrf	btemp+6,c
  1136  0045BC  6A07               	clrf	btemp+7,c
  1137  0045BE  C086  F000         	movff	_DtCO+9,btemp
  1138  0045C2  0E00               	movlw	0
  1139  0045C4  BE00               	btfsc	btemp,7,c
  1140  0045C6  0EFF               	movlw	255
  1141  0045C8  6E01               	movwf	btemp+1,c
  1142  0045CA  6E02               	movwf	btemp+2,c
  1143  0045CC  6E03               	movwf	btemp+3,c
  1144  0045CE  ECB2  F004         	call	almul
  1145  0045D2  C000  F0A5         	movff	btemp,?a_FirstXMOD+1
  1146  0045D6  C001  F0A6         	movff	btemp+1,?a_FirstXMOD+2
  1147  0045DA  C002  F0A7         	movff	btemp+2,?a_FirstXMOD+3
  1148  0045DE  C003  F0A8         	movff	btemp+3,?a_FirstXMOD+4
  1149                           ;rgl.c: 363: m=m/(signed long)(40-0);
  1150  0045E2  0E28               	movlw	40
  1151  0045E4  6E04               	movwf	btemp+4,c
  1152  0045E6  6A05               	clrf	btemp+5,c
  1153  0045E8  6A06               	clrf	btemp+6,c
  1154  0045EA  6A07               	clrf	btemp+7,c
  1155  0045EC  0EA5               	movlw	low (?a_FirstXMOD+1)
  1156  0045EE  6EE9               	movwf	fsr0l,c
  1157  0045F0  0E00               	movlw	high (?a_FirstXMOD+1)
  1158  0045F2  6EEA               	movwf	fsr0h,c
  1159  0045F4  EC64  F007         	call	aldiv_f
  1160                           ;rgl.c: 364: m=m*(signed long)(maxmod-PWM.MINPWM
      +                          );
  1161  0045F8  C2F5  FFE8         	movff	_PWM+28,wreg
  1162  0045FC  5CE1               	subwf	fsr1l,w,c
  1163  0045FE  6E04               	movwf	btemp+4,c
  1164  004600  6A05               	clrf	btemp+5,c
  1165  004602  A0D8               	btfss	status,0,c
  1166  004604  0605               	decf	btemp+5,f,c
  1167  004606  6A06               	clrf	btemp+6,c
  1168  004608  BE05               	btfsc	btemp+5,7,c
  1169  00460A  0606               	decf	btemp+6,f,c
  1170  00460C  5006               	movf	btemp+6,w,c
  1171  00460E  6E07               	movwf	btemp+7,c
  1172  004610  0EA5               	movlw	low (?a_FirstXMOD+1)
  1173  004612  6EE9               	movwf	fsr0l,c
  1174  004614  0E00               	movlw	high (?a_FirstXMOD+1)
  1175  004616  6EEA               	movwf	fsr0h,c
  1176  004618  EC6E  F007         	call	almul_f
  1177                           ;rgl.c: 365: if(m<0) m=0;
  1178  00461C  0100               	movlb	__Lparam shr (0+8)
  1179  00461E  AFA8               	btfss	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),7,
      +                          b
  1180  004620  D004               	goto	l68
  1181  004622  6BA5               	clrf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
  1182  004624  6BA6               	clrf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
  1183  004626  6BA7               	clrf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
  1184  004628  6BA8               	clrf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
  1185  00462A                     l68:
  1186                           ;rgl.c: 366: m=m/10+PWM.MINPWM;
  1187  00462A  0E0A               	movlw	10
  1188  00462C  6E04               	movwf	btemp+4,c
  1189  00462E  6A05               	clrf	btemp+5,c
  1190  004630  6A06               	clrf	btemp+6,c
  1191  004632  6A07               	clrf	btemp+7,c
  1192  004634  C0A5  F000         	movff	?a_FirstXMOD+1,btemp
  1193  004638  C0A6  F001         	movff	?a_FirstXMOD+2,btemp+1
  1194  00463C  C0A7  F002         	movff	?a_FirstXMOD+3,btemp+2
  1195  004640  C0A8  F003         	movff	?a_FirstXMOD+4,btemp+3
  1196  004644  EC3D  F006         	call	aldiv
  1197  004648  C2F5  FFE8         	movff	_PWM+28,wreg
  1198  00464C  2400               	addwf	btemp,w,c
  1199  00464E  0100               	movlb	__Lparam shr (0+8)
  1200  004650  6FA5               	movwf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),b
  1201  004652  0E00               	movlw	0
  1202  004654  2001               	addwfc	btemp+1,w,c
  1203  004656  6FA6               	movwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),b
  1204  004658  0E00               	movlw	0
  1205  00465A  2002               	addwfc	btemp+2,w,c
  1206  00465C  6FA7               	movwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),b
  1207  00465E  0E00               	movlw	0
  1208  004660  2003               	addwfc	btemp+3,w,c
  1209  004662  6FA8               	movwf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),b
  1210                           ;rgl.c: 367: if(m>0xff) p2=maxmod;
  1211  004664  51A8               	movf	(?a_FirstXMOD+4)^(__Lparam& (0+65280)),w
  1212  004666  0A80               	xorlw	128
  1213  004668  0F80               	addlw	128
  1214  00466A  E108               	bnz	u485
  1215  00466C  0E00               	movlw	0
  1216  00466E  5DA7               	subwf	(?a_FirstXMOD+3)^(__Lparam& (0+65280)),w
  1217  004670  E105               	bnz	u485
  1218  004672  0E01               	movlw	1
  1219  004674  5DA6               	subwf	(?a_FirstXMOD+2)^(__Lparam& (0+65280)),w
  1220  004676  E102               	bnz	u485
  1221  004678  0E00               	movlw	0
  1222  00467A  5DA5               	subwf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),w
  1223  00467C                     u485:
  1224  00467C  E303               	bnc	l69
  1225  00467E  50E1               	movf	fsr1l,w,c
  1226  004680                     L3:
  1227  004680  6ED9               	movwf	fsr2l,c
  1228  004682  D00F               	goto	l71
  1229  004684                     l69:
  1230                           ;rgl.c: 368: else p2=(unsigned char)m;
  1231  004684  0100               	movlb	__Lparam shr (0+8)
  1232  004686  51A5               	movf	(?a_FirstXMOD+1)^(__Lparam& (0+65280)),w
  1233  004688  D7FB               	goto	L3
  1234                           ;rgl.c: 369: }
  1235  00468A                     l67:
  1236                           ;rgl.c: 370: else
  1237  00468A  C086  FFE8         	movff	_DtCO+9,wreg
  1238  00468E  0A80               	xorlw	128
  1239  004690                     L35:
  1240  004690  0F57               	addlw	-169
  1241  004692  E302               	bnc	l72
  1242  004694  50E1               	movf	fsr1l,w,c
  1243  004696  6ED9               	movwf	fsr2l,c
  1244  004698                     l72:
  1245                           ;rgl.c: 373: if(DtCO.DCO<0) p2=PWM.MINPWM;
  1246  004698  C086  F000         	movff	_DtCO+9,btemp
  1247  00469C  BE00               	btfsc	btemp,7,c
  1248  00469E  C2F5  FFD9         	movff	_PWM+28,fsr2l
  1249  0046A2                     l71:
  1250                           ;rgl.c: 374: }
  1251  0046A2  0100               	movlb	__Lparam shr (0+8)
  1252  0046A4  51A4               	movf	?a_FirstXMOD^(__Lparam& (0+65280)),w
  1253  0046A6  60D9               	cpfslt	fsr2l,c
  1254  0046A8  D002               	goto	l74
  1255  0046AA  50D9               	movf	fsr2l,w,c
  1256  0046AC  6FA4               	movwf	?a_FirstXMOD^(__Lparam& (0+65280)),b
  1257  0046AE                     l74:
  1258                           ;rgl.c: 379: return p;
  1259  0046AE  0100               	movlb	__Lparam shr (0+8)
  1260  0046B0  51A4               	movf	?a_FirstXMOD^(__Lparam& (0+65280)),w
  1261  0046B2  0012               	return	
  1262                           ;rgl.c: 381: }
  1263  0046B4                     __end_of_FirstXMOD:
  1264                           ;rgl.c: 438: void ModZgCO(void)
  1265                           ;rgl.c: 439: {
  1266  0046B4                     _ModZgCO:
  1267  000000                     
  1268                           ;rgl.c: 440: signed long m;
  1269  0046B4  0103               	movlb	_rgl shr (0+8)
  1270  0046B6  A5D7               	btfss	_rgl& (0+255),2,b
  1271  0046B8  D00C               	goto	l76
  1272                           ;rgl.c: 443: {
  1273  0046BA  0E03               	movlw	3
  1274  0046BC  EC35  F033         	call	_Tnizsza
  1275  0046C0  A0D8               	btfss	status,0,c
  1276  0046C2  0012               	return	
  1277                           ;rgl.c: 445: {
  1278  0046C4  C2DA  F3DF         	movff	_PWM+1,_rgl+8
  1279                           ;rgl.c: 447: rgl.srp=0;
  1280  0046C8  0103               	movlb	(_rgl+7) shr (0+8)
  1281  0046CA  6BDE               	clrf	(_rgl+7)& (0+255),b
  1282                           ;rgl.c: 448: rgl.ytmp=0;
  1283  0046CC  6BDD               	clrf	(_rgl+6)& (0+255),b
  1284                           ;rgl.c: 449: rgl.nmod=0;
  1285  0046CE  9BD7               	bcf	_rgl& (0+255),5,b
  1286                           ;rgl.c: 450: rgl.del1s=0;
  1287  0046D0  9DD7               	bcf	_rgl& (0+255),6,b
  1288                           ;rgl.c: 451: }
  1289                           ;rgl.c: 452: else return;
  1290  0046D2                     l76:
  1291                           ;rgl.c: 453: }
  1292  0046D2  0E00               	movlw	0
  1293  0046D4  EC42  F033         	call	_Twyzsza
  1294  0046D8  E317               	bnc	l79
  1295  0046DA  EC2E  F033         	call	_Tstoi	;wreg free
  1296  0046DE  E314               	bnc	l79
  1297                           ;rgl.c: 455: {
  1298  0046E0  0103               	movlb	_rgl shr (0+8)
  1299  0046E2  85D7               	bsf	_rgl& (0+255),2,b
  1300                           ;rgl.c: 457: rgl.fast_up=0;
  1301  0046E4  99D7               	bcf	_rgl& (0+255),4,b
  1302                           ;rgl.c: 458: rgl.med_up=0;
  1303  0046E6  97D7               	bcf	_rgl& (0+255),3,b
  1304                           ;rgl.c: 459: rgl.srp=PWM.BufPWM;
  1305  0046E8  C2DA  F3DE         	movff	_PWM+1,_rgl+7
  1306                           ;rgl.c: 460: rgl.xmod=PWM.BufPWM;
  1307  0046EC  C2DA  F3DF         	movff	_PWM+1,_rgl+8
  1308                           ;rgl.c: 461: if(rgl.xmod>PWM.MAXPWM)
  1309  0046F0  C3DF  FFE8         	movff	_rgl+8,wreg
  1310  0046F4  0102               	movlb	(_PWM+29) shr (0+8)
  1311  0046F6  61F6               	cpfslt	(_PWM+29)& (0+255),b
  1312  0046F8  D004               	goto	l80
  1313                           ;rgl.c: 462: {
  1314  0046FA  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  1315                           ;rgl.c: 464: rgl.xmod=PWM.MAXPWM;
  1316  0046FE  C2F6  F3DF         	movff	_PWM+29,_rgl+8
  1317  004702                     l80:
  1318                           ;rgl.c: 465: }
  1319  004702  0103               	movlb	(_rgl+1) shr (0+8)
  1320  004704  93D8               	bcf	(_rgl+1)& (0+255),1,b
  1321                           ;rgl.c: 467: return;
  1322  004706  0012               	return	
  1323  004708                     l79:
  1324                           ;rgl.c: 468: }
  1325  004708  C2F5  FFE8         	movff	_PWM+28,wreg
  1326  00470C  0103               	movlb	(_rgl+8) shr (0+8)
  1327  00470E  5DDF               	subwf	(_rgl+8)& (0+255),w,b
  1328  004710  E318               	bnc	l81
  1329  004712  0E0A               	movlw	10
  1330  004714  6E02               	movwf	btemp+2,c
  1331  004716  6A03               	clrf	btemp+3,c
  1332  004718  C2F5  FFE8         	movff	_PWM+28,wreg
  1333  00471C  C3DF  F000         	movff	_rgl+8,btemp
  1334  004720  6A01               	clrf	btemp+1,c
  1335  004722  5E00               	subwf	btemp,f,c
  1336  004724  0E00               	movlw	0
  1337  004726  5A01               	subwfb	btemp+1,f,c
  1338  004728  EC12  F007         	call	awmul
  1339  00472C  0100               	movlb	__Lparam shr (0+8)
  1340  00472E  C004  F0A4         	movff	btemp+4,?a_ModZgCO
  1341  004732  C005  F0A5         	movff	btemp+5,?a_ModZgCO+1
  1342  004736  0E00               	movlw	0
  1343  004738  BFA5               	btfsc	(?a_ModZgCO+1)^(__Lparam& (0+65280)),7,b
  1344  00473A  0EFF               	movlw	-1
  1345  00473C  6FA6               	movwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
  1346  00473E  6FA7               	movwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
  1347  004740  D005               	goto	l82
  1348  004742                     l81:
  1349                           ;rgl.c: 470: else m=0;
  1350  004742  0100               	movlb	__Lparam shr (0+8)
  1351  004744  6BA4               	clrf	?a_ModZgCO^(__Lparam& (0+65280)),b
  1352  004746  6BA5               	clrf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
  1353  004748  6BA6               	clrf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
  1354  00474A  6BA7               	clrf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
  1355  00474C                     l82:
  1356                           ;rgl.c: 471: m=m/(signed long)(DtCO.MAD_CO-DtCO.
      +                          DAD_CO);
  1357  00474C  C08D  FFE8         	movff	_DtCO+16,wreg
  1358  004750  C08C  F000         	movff	_DtCO+15,btemp
  1359  004754  5C00               	subwf	btemp,w,c
  1360  004756  6E04               	movwf	btemp+4,c
  1361  004758  6A05               	clrf	btemp+5,c
  1362  00475A  A0D8               	btfss	status,0,c
  1363  00475C  0605               	decf	btemp+5,f,c
  1364  00475E  6A06               	clrf	btemp+6,c
  1365  004760  BE05               	btfsc	btemp+5,7,c
  1366  004762  0606               	decf	btemp+6,f,c
  1367  004764  5006               	movf	btemp+6,w,c
  1368  004766  6E07               	movwf	btemp+7,c
  1369  004768  0EA4               	movlw	low ?a_ModZgCO
  1370  00476A  6EE9               	movwf	fsr0l,c
  1371  00476C  0E00               	movlw	high ?a_ModZgCO
  1372  00476E  6EEA               	movwf	fsr0h,c
  1373  004770  EC64  F007         	call	aldiv_f
  1374                           ;rgl.c: 472: m=m*(signed long)(DtCO.AC_CO-DtCO.D
      +                          AD_CO);
  1375  004774  C08D  FFE8         	movff	_DtCO+16,wreg
  1376  004778  C08B  F000         	movff	_DtCO+14,btemp
  1377  00477C  5C00               	subwf	btemp,w,c
  1378  00477E  6E04               	movwf	btemp+4,c
  1379  004780  6A05               	clrf	btemp+5,c
  1380  004782  A0D8               	btfss	status,0,c
  1381  004784  0605               	decf	btemp+5,f,c
  1382  004786  6A06               	clrf	btemp+6,c
  1383  004788  BE05               	btfsc	btemp+5,7,c
  1384  00478A  0606               	decf	btemp+6,f,c
  1385  00478C  5006               	movf	btemp+6,w,c
  1386  00478E  6E07               	movwf	btemp+7,c
  1387  004790  0EA4               	movlw	low ?a_ModZgCO
  1388  004792  6EE9               	movwf	fsr0l,c
  1389  004794  0E00               	movlw	high ?a_ModZgCO
  1390  004796  6EEA               	movwf	fsr0h,c
  1391  004798  EC6E  F007         	call	almul_f
  1392                           ;rgl.c: 473: if(m<0) m=0;
  1393  00479C  0100               	movlb	__Lparam shr (0+8)
  1394  00479E  AFA7               	btfss	(?a_ModZgCO+3)^(__Lparam& (0+65280)),7,b
  1395  0047A0  D004               	goto	l83
  1396  0047A2  6BA4               	clrf	?a_ModZgCO^(__Lparam& (0+65280)),b
  1397  0047A4  6BA5               	clrf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
  1398  0047A6  6BA6               	clrf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
  1399  0047A8  6BA7               	clrf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
  1400  0047AA                     l83:
  1401                           ;rgl.c: 474: m=m/10+PWM.MINPWM;
  1402  0047AA  0E0A               	movlw	10
  1403  0047AC  6E04               	movwf	btemp+4,c
  1404  0047AE  6A05               	clrf	btemp+5,c
  1405  0047B0  6A06               	clrf	btemp+6,c
  1406  0047B2  6A07               	clrf	btemp+7,c
  1407  0047B4  C0A4  F000         	movff	?a_ModZgCO,btemp
  1408  0047B8  C0A5  F001         	movff	?a_ModZgCO+1,btemp+1
  1409  0047BC  C0A6  F002         	movff	?a_ModZgCO+2,btemp+2
  1410  0047C0  C0A7  F003         	movff	?a_ModZgCO+3,btemp+3
  1411  0047C4  EC3D  F006         	call	aldiv
  1412  0047C8  C2F5  FFE8         	movff	_PWM+28,wreg
  1413  0047CC  2400               	addwf	btemp,w,c
  1414  0047CE  0100               	movlb	__Lparam shr (0+8)
  1415  0047D0  6FA4               	movwf	?a_ModZgCO^(__Lparam& (0+65280)),b
  1416  0047D2  0E00               	movlw	0
  1417  0047D4  2001               	addwfc	btemp+1,w,c
  1418  0047D6  6FA5               	movwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
  1419  0047D8  0E00               	movlw	0
  1420  0047DA  2002               	addwfc	btemp+2,w,c
  1421  0047DC  6FA6               	movwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
  1422  0047DE  0E00               	movlw	0
  1423  0047E0  2003               	addwfc	btemp+3,w,c
  1424  0047E2  6FA7               	movwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
  1425                           ;rgl.c: 475: if(m>0xff)
  1426  0047E4  51A7               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
  1427  0047E6  0A80               	xorlw	128
  1428  0047E8  0F80               	addlw	128
  1429  0047EA  E108               	bnz	u605
  1430  0047EC  0E00               	movlw	0
  1431  0047EE  5DA6               	subwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
  1432  0047F0  E105               	bnz	u605
  1433  0047F2  0E01               	movlw	1
  1434  0047F4  5DA5               	subwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
  1435  0047F6  E102               	bnz	u605
  1436  0047F8  0E00               	movlw	0
  1437  0047FA  5DA4               	subwf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1438  0047FC                     u605:
  1439                           ;rgl.c: 476: {
  1440  0047FC  0103               	movlb	_rgl shr (0+8)
  1441  0047FE  E304               	bnc	L36
  1442  004800  95D7               	bcf	_rgl& (0+255),2,b
  1443                           ;rgl.c: 478: rgl.tmp_pwm=rgl.xmod;
  1444  004802  C3DF  F3E0         	movff	_rgl+8,_rgl+9
  1445                           ;rgl.c: 479: return;
  1446  004806  0012               	return	
  1447                           ;rgl.c: 480: }
  1448  004808                     L36:
  1449  004808  A5D7               	btfss	_rgl& (0+255),2,b
  1450  00480A  D01C               	goto	l85
  1451  00480C  C3DF  F000         	movff	_rgl+8,btemp
  1452  004810  6A01               	clrf	btemp+1,c
  1453  004812  6A02               	clrf	btemp+2,c
  1454  004814  6A03               	clrf	btemp+3,c
  1455  004816  0100               	movlb	__Lparam shr (0+8)
  1456  004818  51A7               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
  1457  00481A  0A80               	xorlw	128
  1458  00481C  6E04               	movwf	btemp+4,c
  1459  00481E  5003               	movf	btemp+3,w,c
  1460  004820  0A80               	xorlw	128
  1461  004822  5C04               	subwf	btemp+4,w,c
  1462  004824  E108               	bnz	u625
  1463  004826  5002               	movf	btemp+2,w,c
  1464  004828  5DA6               	subwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
  1465  00482A  E105               	bnz	u625
  1466  00482C  5001               	movf	btemp+1,w,c
  1467  00482E  5DA5               	subwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
  1468  004830  E102               	bnz	u625
  1469  004832  5000               	movf	btemp,w,c
  1470  004834  5DA4               	subwf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1471  004836                     u625:
  1472  004836  E206               	bc	l85
  1473                           ;rgl.c: 482: rgl.srp=(rgl.xmod-m);
  1474  004838  0100               	movlb	__Lparam shr (0+8)
  1475  00483A  51A4               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1476  00483C  0103               	movlb	(_rgl+8) shr (0+8)
  1477  00483E  5DDF               	subwf	(_rgl+8)& (0+255),w,b
  1478  004840  CFE8 F3DE          	movff	wreg,_rgl+7
  1479  004844                     l85:
  1480                           ;rgl.c: 483: m+=rgl.srp;
  1481  004844  C3DE  FFE8         	movff	_rgl+7,wreg
  1482  004848  0100               	movlb	__Lparam shr (0+8)
  1483  00484A  27A4               	addwf	?a_ModZgCO^(__Lparam& (0+65280)),f,b
  1484  00484C  0E01               	movlw	1
  1485  00484E  B0D8               	btfsc	status,0,c
  1486  004850  27A5               	addwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),f,b
  1487  004852  B0D8               	btfsc	status,0,c
  1488  004854  27A6               	addwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),f,b
  1489  004856  B0D8               	btfsc	status,0,c
  1490  004858  27A7               	addwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),f,b
  1491                           ;rgl.c: 484: if(m>rgl.xmod) p=rgl.xmod;
  1492  00485A  C3DF  F000         	movff	_rgl+8,btemp
  1493  00485E  6A01               	clrf	btemp+1,c
  1494  004860  6A02               	clrf	btemp+2,c
  1495  004862  6A03               	clrf	btemp+3,c
  1496  004864  5003               	movf	btemp+3,w,c
  1497  004866  0A80               	xorlw	128
  1498  004868  6E04               	movwf	btemp+4,c
  1499  00486A  51A7               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
  1500  00486C  0A80               	xorlw	128
  1501  00486E  5C04               	subwf	btemp+4,w,c
  1502  004870  E108               	bnz	u645
  1503  004872  51A6               	movf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
  1504  004874  5C02               	subwf	btemp+2,w,c
  1505  004876  E105               	bnz	u645
  1506  004878  51A5               	movf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
  1507  00487A  5C01               	subwf	btemp+1,w,c
  1508  00487C  E102               	bnz	u645
  1509  00487E  51A4               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1510  004880  5C00               	subwf	btemp,w,c
  1511  004882                     u645:
  1512  004882  E203               	bc	l86
  1513  004884  C3DF  FFD9         	movff	_rgl+8,fsr2l
  1514  004888  D003               	goto	l87
  1515  00488A                     l86:
  1516                           ;rgl.c: 485: else p=(unsigned char)m;
  1517  00488A  0100               	movlb	__Lparam shr (0+8)
  1518  00488C  51A4               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1519  00488E  6ED9               	movwf	fsr2l,c
  1520  004890                     l87:
  1521                           ;rgl.c: 486: rgl.fz=0;
  1522  004890  0103               	movlb	_rgl shr (0+8)
  1523  004892  95D7               	bcf	_rgl& (0+255),2,b
  1524                           ;rgl.c: 487: rgl.tmp_pwm=p;
  1525  004894  CFD9 F3E0          	movff	fsr2l,_rgl+9
  1526                           ;rgl.c: 488: }
  1527  004898  0012               	return	
  1528  00489A                     __end_of_ModZgCO:
  1529                           ;rgl.c: 532: void ModDkCO(void)
  1530                           ;rgl.c: 533: {
  1531  00489A                     _ModDkCO:
  1532  000000                     
  1533                           ;rgl.c: 534: signed long m;
  1534  00489A  0103               	movlb	_rgl shr (0+8)
  1535  00489C  A5D7               	btfss	_rgl& (0+255),2,b
  1536  00489E  0012               	return	
  1537                           ;rgl.c: 539: ada=DtCO.AC_CO-DtCO.DAD_CO;
  1538  0048A0  C08D  FFE8         	movff	_DtCO+16,wreg
  1539  0048A4  0100               	movlb	(_DtCO+14) shr (0+8)
  1540  0048A6  5D8B               	subwf	(_DtCO+14)& (0+255),w,b
  1541  0048A8  0100               	movlb	__Lparam shr (0+8)
  1542  0048AA  6FA4               	movwf	?a_ModDkCO^(__Lparam& (0+65280)),b
  1543                           ;rgl.c: 540: k=2;
  1544  0048AC  0E02               	movlw	2
  1545  0048AE  6FA5               	movwf	(?a_ModDkCO+1)^(__Lparam& (0+65280)),b
  1546                           ;rgl.c: 541: if(Trowna()) return;
  1547  0048B0  EC5D  F033         	call	_Trowna	;wreg free
  1548  0048B4  B0D8               	btfsc	status,0,c
  1549  0048B6  0012               	return	
  1550                           ;rgl.c: 542: if(Tnizsza(0))
  1551  0048B8  0E00               	movlw	0
  1552  0048BA  EC35  F033         	call	_Tnizsza
  1553  0048BE  E303               	bnc	l91
  1554                           ;rgl.c: 543: {
  1555  0048C0  0E03               	movlw	3
  1556  0048C2  0100               	movlb	__Lparam shr (0+8)
  1557  0048C4  6FA5               	movwf	(?a_ModDkCO+1)^(__Lparam& (0+65280)),b
  1558  0048C6                     l91:
  1559                           ;rgl.c: 545: }
  1560  0048C6  C0A4  F002         	movff	?a_ModDkCO,btemp+2
  1561  0048CA  6A03               	clrf	btemp+3,c
  1562  0048CC  BE02               	btfsc	btemp+2,7,c
  1563  0048CE  0603               	decf	btemp+3,f,c
  1564  0048D0  C0A5  F000         	movff	?a_ModDkCO+1,btemp
  1565  0048D4  6A01               	clrf	btemp+1,c
  1566  0048D6  EC12  F007         	call	awmul
  1567  0048DA  C3DE  FFE8         	movff	_rgl+7,wreg
  1568  0048DE  2404               	addwf	btemp+4,w,c
  1569  0048E0  6E00               	movwf	btemp,c
  1570  0048E2  0E00               	movlw	0
  1571  0048E4  2005               	addwfc	btemp+5,w,c
  1572  0048E6  6E01               	movwf	btemp+1,c
  1573  0048E8  0100               	movlb	__Lparam shr (0+8)
  1574  0048EA  C000  F0A6         	movff	btemp,?a_ModDkCO+2
  1575  0048EE  C001  F0A7         	movff	btemp+1,?a_ModDkCO+3
  1576  0048F2  0E00               	movlw	0
  1577  0048F4  BFA7               	btfsc	(?a_ModDkCO+3)^(__Lparam& (0+65280)),7,b
  1578  0048F6  0EFF               	movlw	-1
  1579  0048F8  6FA8               	movwf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),b
  1580  0048FA  6FA9               	movwf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),b
  1581                           ;rgl.c: 547: if(m>rgl.xmod) p=rgl.xmod;
  1582  0048FC  C3DF  F000         	movff	_rgl+8,btemp
  1583  004900  6A01               	clrf	btemp+1,c
  1584  004902  6A02               	clrf	btemp+2,c
  1585  004904  6A03               	clrf	btemp+3,c
  1586  004906  5003               	movf	btemp+3,w,c
  1587  004908  0A80               	xorlw	128
  1588  00490A  6E04               	movwf	btemp+4,c
  1589  00490C  51A9               	movf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),w
  1590  00490E  0A80               	xorlw	128
  1591  004910  5C04               	subwf	btemp+4,w,c
  1592  004912  E108               	bnz	u685
  1593  004914  51A8               	movf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),w
  1594  004916  5C02               	subwf	btemp+2,w,c
  1595  004918  E105               	bnz	u685
  1596  00491A  51A7               	movf	(?a_ModDkCO+3)^(__Lparam& (0+65280)),w
  1597  00491C  5C01               	subwf	btemp+1,w,c
  1598  00491E  E102               	bnz	u685
  1599  004920  51A6               	movf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1600  004922  5C00               	subwf	btemp,w,c
  1601  004924                     u685:
  1602  004924  E203               	bc	l92
  1603  004926  C3DF  FFD9         	movff	_rgl+8,fsr2l
  1604  00492A  D01C               	goto	l93
  1605  00492C                     l92:
  1606                           ;rgl.c: 548: else
  1607  00492C  C2F5  F000         	movff	_PWM+28,btemp
  1608  004930  6A01               	clrf	btemp+1,c
  1609  004932  6A02               	clrf	btemp+2,c
  1610  004934  6A03               	clrf	btemp+3,c
  1611  004936  0100               	movlb	__Lparam shr (0+8)
  1612  004938  51A9               	movf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),w
  1613  00493A  0A80               	xorlw	128
  1614  00493C  6E04               	movwf	btemp+4,c
  1615  00493E  5003               	movf	btemp+3,w,c
  1616  004940  0A80               	xorlw	128
  1617  004942  5C04               	subwf	btemp+4,w,c
  1618  004944  E108               	bnz	u695
  1619  004946  5002               	movf	btemp+2,w,c
  1620  004948  5DA8               	subwf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),w
  1621  00494A  E105               	bnz	u695
  1622  00494C  5001               	movf	btemp+1,w,c
  1623  00494E  5DA7               	subwf	(?a_ModDkCO+3)^(__Lparam& (0+65280)),w
  1624  004950  E102               	bnz	u695
  1625  004952  5000               	movf	btemp,w,c
  1626  004954  5DA6               	subwf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1627  004956                     u695:
  1628  004956  E203               	bc	l94
  1629  004958  C2F5  FFD9         	movff	_PWM+28,fsr2l
  1630  00495C  D003               	goto	l93
  1631  00495E                     l94:
  1632                           ;rgl.c: 550: else p=(unsigned char)m;
  1633  00495E  0100               	movlb	__Lparam shr (0+8)
  1634  004960  51A6               	movf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1635  004962  6ED9               	movwf	fsr2l,c
  1636  004964                     l93:
  1637                           ;rgl.c: 551: rgl.tmp_pwm=p;
  1638  004964  CFD9 F3E0          	movff	fsr2l,_rgl+9
  1639                           ;rgl.c: 552: }
  1640  004968  0012               	return	
  1641  00496A                     __end_of_ModDkCO:
  1642                           ;rgl.c: 633: void ModPruCO(void)
  1643                           ;rgl.c: 634: {
  1644  00496A                     _ModPruCO:
  1645  000000                     
  1646                           ;rgl.c: 635: static unsigned char l,m,o,p,q,r,s;
  1647  00496A  0103               	movlb	_rgl shr (0+8)
  1648  00496C  B5D7               	btfsc	_rgl& (0+255),2,b
  1649  00496E  D0F8               	goto	l97
  1650                           ;rgl.c: 640: {
  1651  004970  010E               	movlb	F1899 shr (0+8)
  1652  004972  6BAB               	clrf	F1899& (0+255),b
  1653                           ;rgl.c: 642: m=0;
  1654  004974  010E               	movlb	F1900 shr (0+8)
  1655  004976  6BAC               	clrf	F1900& (0+255),b
  1656                           ;rgl.c: 643: o=0;
  1657  004978  010E               	movlb	F1901 shr (0+8)
  1658  00497A  6BAD               	clrf	F1901& (0+255),b
  1659                           ;rgl.c: 644: p=0;
  1660  00497C  010E               	movlb	F1902 shr (0+8)
  1661  00497E  6BAE               	clrf	F1902& (0+255),b
  1662                           ;rgl.c: 645: if(q<255) q++;
  1663  004980  CEAF  F000         	movff	F1903,btemp
  1664  004984  2800               	incf	btemp,w,c
  1665  004986  E002               	bz	l98
  1666  004988  010E               	movlb	F1903 shr (0+8)
  1667  00498A  2BAF               	incf	F1903& (0+255),f,b
  1668  00498C                     l98:
  1669                           ;rgl.c: 646: if(s<255) s++;
  1670  00498C  CEB1  F000         	movff	F1905,btemp
  1671  004990  2800               	incf	btemp,w,c
  1672  004992  E002               	bz	l99
  1673  004994  010E               	movlb	F1905 shr (0+8)
  1674  004996  2BB1               	incf	F1905& (0+255),f,b
  1675  004998                     l99:
  1676                           ;rgl.c: 647: if(DtCO._newPCO) s=0;
  1677  004998  0100               	movlb	(_DtCO+1) shr (0+8)
  1678  00499A  AF7E               	btfss	(_DtCO+1)& (0+255),7,b
  1679  00499C  D002               	goto	l100
  1680  00499E  010E               	movlb	F1905 shr (0+8)
  1681  0049A0  6BB1               	clrf	F1905& (0+255),b
  1682  0049A2                     l100:
  1683                           ;rgl.c: 648: if(Tnizsza(0))
  1684  0049A2  0E00               	movlw	0
  1685  0049A4  EC35  F033         	call	_Tnizsza
  1686  0049A8  A0D8               	btfss	status,0,c
  1687  0049AA  0012               	return	
  1688                           ;rgl.c: 649: {
  1689  0049AC  0E0A               	movlw	10
  1690  0049AE  EC35  F033         	call	_Tnizsza
  1691  0049B2  B0D8               	btfsc	status,0,c
  1692  0049B4  0012               	return	
  1693                           ;rgl.c: 651: {
  1694  0049B6  0100               	movlb	__Lparam shr (0+8)
  1695  0049B8  6BA4               	clrf	?a_ModPruCO^(__Lparam& (0+65280)),b
  1696                           ;rgl.c: 653: if(rgl.tmp_pwm>=pwm_center)
  1697  0049BA  CEDD  FFE8         	movff	_pwm_center,wreg
  1698  0049BE  0103               	movlb	(_rgl+9) shr (0+8)
  1699  0049C0  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  1700  0049C2  E330               	bnc	l103
  1701                           ;rgl.c: 654: {
  1702  0049C4  0E05               	movlw	5
  1703  0049C6  EC35  F033         	call	_Tnizsza
  1704  0049CA  E30A               	bnc	l104
  1705  0049CC  EC2E  F033         	call	_Tstoi	;wreg free
  1706  0049D0  E307               	bnc	l104
  1707  0049D2  0E00               	movlw	0
  1708  0049D4  010E               	movlb	F1905 shr (0+8)
  1709  0049D6  65B1               	cpfsgt	F1905& (0+255),b
  1710  0049D8  D003               	goto	l104
  1711                           ;rgl.c: 656: {
  1712  0049DA  6BB1               	clrf	F1905& (0+255),b
  1713                           ;rgl.c: 658: k=20;
  1714  0049DC  0E14               	movlw	20
  1715  0049DE  D06B               	goto	L25
  1716                           ;rgl.c: 659: }
  1717  0049E0                     l104:
  1718                           ;rgl.c: 660: else
  1719  0049E0  0E04               	movlw	4
  1720  0049E2  EC35  F033         	call	_Tnizsza
  1721  0049E6  E30A               	bnc	l106
  1722  0049E8  EC2E  F033         	call	_Tstoi	;wreg free
  1723  0049EC  E307               	bnc	l106
  1724  0049EE  0E00               	movlw	0
  1725  0049F0  010E               	movlb	F1905 shr (0+8)
  1726  0049F2  65B1               	cpfsgt	F1905& (0+255),b
  1727  0049F4  D003               	goto	l106
  1728                           ;rgl.c: 662: {
  1729  0049F6  6BB1               	clrf	F1905& (0+255),b
  1730                           ;rgl.c: 664: k=15;
  1731  0049F8  0E0F               	movlw	15
  1732  0049FA  D05D               	goto	L25
  1733                           ;rgl.c: 665: }
  1734  0049FC                     l106:
  1735                           ;rgl.c: 666: else
  1736  0049FC  0E02               	movlw	2
  1737  0049FE  EC35  F033         	call	_Tnizsza
  1738  004A02  E308               	bnc	l108
  1739  004A04  EC2E  F033         	call	_Tstoi	;wreg free
  1740  004A08  E305               	bnc	l108
  1741  004A0A  0E00               	movlw	0
  1742  004A0C  010E               	movlb	F1905 shr (0+8)
  1743  004A0E  65B1               	cpfsgt	F1905& (0+255),b
  1744  004A10  D001               	goto	l108
  1745  004A12  D018               	goto	u1000
  1746                           ;rgl.c: 668: {
  1747                           ;rgl.c: 670: k=10;
  1748                           ;rgl.c: 671: }
  1749  004A14                     l108:
  1750                           ;rgl.c: 672: else
  1751  004A14  EC2E  F033         	call	_Tstoi	;wreg free
  1752  004A18  E350               	bnc	l111
  1753  004A1A  0E00               	movlw	0
  1754  004A1C  010E               	movlb	F1905 shr (0+8)
  1755  004A1E  65B1               	cpfsgt	F1905& (0+255),b
  1756  004A20  D04C               	goto	l111
  1757  004A22  D03C               	goto	u1180
  1758                           ;rgl.c: 674: {
  1759                           ;rgl.c: 676: k=5;
  1760                           ;rgl.c: 677: }
  1761  004A24                     l103:
  1762                           ;rgl.c: 679: else
  1763  004A24  CEDE  FFE8         	movff	_pwm_kwr,wreg
  1764  004A28  0103               	movlb	(_rgl+9) shr (0+8)
  1765  004A2A  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  1766  004A2C  E32C               	bnc	l112
  1767                           ;rgl.c: 682: {
  1768  004A2E  0E05               	movlw	5
  1769  004A30  EC35  F033         	call	_Tnizsza
  1770  004A34  E30B               	bnc	l113
  1771  004A36  EC2E  F033         	call	_Tstoi	;wreg free
  1772  004A3A  E308               	bnc	l113
  1773  004A3C  0E00               	movlw	0
  1774  004A3E  010E               	movlb	F1905 shr (0+8)
  1775  004A40  65B1               	cpfsgt	F1905& (0+255),b
  1776  004A42  D004               	goto	l113
  1777  004A44                     u1000:
  1778                           ;rgl.c: 684: {
  1779  004A44  010E               	movlb	F1905 shr (0+8)
  1780  004A46  6BB1               	clrf	F1905& (0+255),b
  1781                           ;rgl.c: 686: k=10;
  1782  004A48  0E0A               	movlw	10
  1783  004A4A  D035               	goto	L25
  1784                           ;rgl.c: 687: }
  1785  004A4C                     l113:
  1786                           ;rgl.c: 688: else
  1787  004A4C  0E04               	movlw	4
  1788  004A4E  EC35  F033         	call	_Tnizsza
  1789  004A52  E30A               	bnc	l115
  1790  004A54  EC2E  F033         	call	_Tstoi	;wreg free
  1791  004A58  E307               	bnc	l115
  1792  004A5A  0E00               	movlw	0
  1793  004A5C  010E               	movlb	F1905 shr (0+8)
  1794  004A5E  65B1               	cpfsgt	F1905& (0+255),b
  1795  004A60  D003               	goto	l115
  1796                           ;rgl.c: 690: {
  1797  004A62  6BB1               	clrf	F1905& (0+255),b
  1798                           ;rgl.c: 692: k=8;
  1799  004A64  0E08               	movlw	8
  1800  004A66  D027               	goto	L25
  1801                           ;rgl.c: 693: }
  1802  004A68                     l115:
  1803                           ;rgl.c: 694: else
  1804  004A68  0E02               	movlw	2
  1805  004A6A  EC35  F033         	call	_Tnizsza
  1806  004A6E  E308               	bnc	l117
  1807  004A70  EC2E  F033         	call	_Tstoi	;wreg free
  1808  004A74  E305               	bnc	l117
  1809  004A76  0E00               	movlw	0
  1810  004A78  010E               	movlb	F1905 shr (0+8)
  1811  004A7A  65B1               	cpfsgt	F1905& (0+255),b
  1812  004A7C  D001               	goto	l117
  1813  004A7E  D00E               	goto	u1180
  1814                           ;rgl.c: 696: {
  1815                           ;rgl.c: 698: k=5;
  1816                           ;rgl.c: 699: }
  1817  004A80                     l117:
  1818                           ;rgl.c: 700: else
  1819  004A80  EC2E  F033         	call	_Tstoi	;wreg free
  1820  004A84  D011               	goto	L30
  1821                           ;rgl.c: 702: {
  1822                           ;rgl.c: 704: k=2;
  1823                           ;rgl.c: 705: }
  1824  004A86                     l112:
  1825                           ;rgl.c: 707: else
  1826  004A86  0E02               	movlw	2
  1827  004A88  EC35  F033         	call	_Tnizsza
  1828  004A8C  E30B               	bnc	l121
  1829  004A8E  EC2E  F033         	call	_Tstoi	;wreg free
  1830  004A92  E308               	bnc	l121
  1831  004A94  0E00               	movlw	0
  1832  004A96  010E               	movlb	F1905 shr (0+8)
  1833  004A98  65B1               	cpfsgt	F1905& (0+255),b
  1834  004A9A  D004               	goto	l121
  1835  004A9C                     u1180:
  1836                           ;rgl.c: 710: {
  1837  004A9C  010E               	movlb	F1905 shr (0+8)
  1838  004A9E  6BB1               	clrf	F1905& (0+255),b
  1839                           ;rgl.c: 712: k=5;
  1840  004AA0  0E05               	movlw	5
  1841  004AA2  D009               	goto	L25
  1842                           ;rgl.c: 713: }
  1843  004AA4                     l121:
  1844                           ;rgl.c: 714: else
  1845  004AA4  EC2E  F033         	call	_Tstoi	;wreg free
  1846  004AA8                     L30:
  1847  004AA8  E308               	bnc	l111
  1848  004AAA  0E00               	movlw	0
  1849  004AAC  010E               	movlb	F1905 shr (0+8)
  1850  004AAE  65B1               	cpfsgt	F1905& (0+255),b
  1851  004AB0  D004               	goto	l111
  1852                           ;rgl.c: 716: {
  1853  004AB2  6BB1               	clrf	F1905& (0+255),b
  1854                           ;rgl.c: 718: k=2;
  1855  004AB4  0E02               	movlw	2
  1856  004AB6                     L25:
  1857  004AB6  0100               	movlb	__Lparam shr (0+8)
  1858  004AB8  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  1859  004ABA                     l111:
  1860                           ;rgl.c: 719: }
  1861  004ABA  CEDE  FFE8         	movff	_pwm_kwr,wreg
  1862  004ABE  0103               	movlb	(_rgl+9) shr (0+8)
  1863  004AC0  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  1864  004AC2  E316               	bnc	l124
  1865                           ;rgl.c: 723: {
  1866  004AC4  0E01               	movlw	1
  1867  004AC6  EC06  F033         	call	_Trosnie
  1868  004ACA  E310               	bnc	l125
  1869  004ACC  0E00               	movlw	0
  1870  004ACE  010E               	movlb	F1905 shr (0+8)
  1871  004AD0  65B1               	cpfsgt	F1905& (0+255),b
  1872  004AD2  D00C               	goto	l125
  1873                           ;rgl.c: 725: {
  1874  004AD4  6BB1               	clrf	F1905& (0+255),b
  1875                           ;rgl.c: 727: k=10;
  1876  004AD6  0E0A               	movlw	10
  1877  004AD8  0100               	movlb	__Lparam shr (0+8)
  1878  004ADA  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  1879                           ;rgl.c: 728: if(Trosnie(2)) k=8;
  1880  004ADC  0E02               	movlw	2
  1881  004ADE  EC06  F033         	call	_Trosnie
  1882  004AE2  E306               	bnc	l124
  1883  004AE4  0E08               	movlw	8
  1884  004AE6  0100               	movlb	__Lparam shr (0+8)
  1885  004AE8  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  1886                           ;rgl.c: 729: }
  1887  004AEA  D002               	goto	l124
  1888  004AEC                     l125:
  1889                           ;rgl.c: 730: else
  1890  004AEC  0103               	movlb	(_rgl+6) shr (0+8)
  1891  004AEE  6BDD               	clrf	(_rgl+6)& (0+255),b
  1892  004AF0                     l124:
  1893                           ;rgl.c: 732: }
  1894  004AF0  C3DF  FFE8         	movff	_rgl+8,wreg
  1895  004AF4  0102               	movlb	(_PWM+1) shr (0+8)
  1896  004AF6  61DA               	cpfslt	(_PWM+1)& (0+255),b
  1897  004AF8  D006               	goto	l128
  1898  004AFA  C2DA  FFE8         	movff	_PWM+1,wreg
  1899  004AFE  0103               	movlb	(_rgl+8) shr (0+8)
  1900  004B00  5DDF               	subwf	(_rgl+8)& (0+255),w,b
  1901  004B02  6ED9               	movwf	fsr2l,c
  1902  004B04  D001               	goto	l129
  1903  004B06                     l128:
  1904                           ;rgl.c: 734: else tmp=0;
  1905  004B06  6AD9               	clrf	fsr2l,c
  1906  004B08                     l129:
  1907                           ;rgl.c: 735: if(tmp&&k>tmp) k=tmp;
  1908  004B08  50D9               	movf	fsr2l,w,c
  1909  004B0A  E00B               	bz	l130
  1910  004B0C  50D9               	movf	fsr2l,w,c
  1911  004B0E  0100               	movlb	__Lparam shr (0+8)
  1912  004B10  94D8               	bcf	status,2,c
  1913  004B12  90D8               	bcf	status,0,c
  1914  004B14  AFA4               	btfss	?a_ModPruCO^(__Lparam& (0+65280)),7,b
  1915  004B16  5DA4               	subwf	?a_ModPruCO^(__Lparam& (0+65280)),w
  1916  004B18  B4D8               	btfsc	status,2,c
  1917  004B1A  90D8               	bcf	status,0,c
  1918  004B1C  E302               	bnc	l130
  1919  004B1E  50D9               	movf	fsr2l,w,c
  1920  004B20  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  1921  004B22                     l130:
  1922                           ;rgl.c: 736: if(rgl.srp+k>PWM.MAXPWM) rgl.srp=PW
      +                          M.MAXPWM;
  1923  004B22  C3DE  FFE8         	movff	_rgl+7,wreg
  1924  004B26  0100               	movlb	__Lparam shr (0+8)
  1925  004B28  25A4               	addwf	?a_ModPruCO^(__Lparam& (0+65280)),w
  1926  004B2A  6E02               	movwf	btemp+2,c
  1927  004B2C  6A03               	clrf	btemp+3,c
  1928  004B2E  B0D8               	btfsc	status,0,c
  1929  004B30  2A03               	incf	btemp+3,f,c
  1930  004B32  BFA4               	btfsc	?a_ModPruCO^(__Lparam& (0+65280)),7,b
  1931  004B34  0603               	decf	btemp+3,f,c
  1932  004B36  C2F6  F000         	movff	_PWM+29,btemp
  1933  004B3A  6A01               	clrf	btemp+1,c
  1934  004B3C  5001               	movf	btemp+1,w,c
  1935  004B3E  0A80               	xorlw	128
  1936  004B40  6E04               	movwf	btemp+4,c
  1937  004B42  5003               	movf	btemp+3,w,c
  1938  004B44  0A80               	xorlw	128
  1939  004B46  5C04               	subwf	btemp+4,w,c
  1940  004B48  E102               	bnz	u1315
  1941  004B4A  5002               	movf	btemp+2,w,c
  1942  004B4C  5C00               	subwf	btemp,w,c
  1943  004B4E                     u1315:
  1944  004B4E  E203               	bc	l131
  1945  004B50  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  1946  004B54  0012               	return	
  1947  004B56                     l131:
  1948                           ;rgl.c: 737: else rgl.srp+=k;
  1949  004B56  0100               	movlb	__Lparam shr (0+8)
  1950  004B58  51A4               	movf	?a_ModPruCO^(__Lparam& (0+65280)),w
  1951  004B5A  0103               	movlb	(_rgl+7) shr (0+8)
  1952  004B5C  27DE               	addwf	(_rgl+7)& (0+255),f,b
  1953                           ;rgl.c: 738: return;
  1954  004B5E  0012               	return	
  1955                           ;rgl.c: 740: else return;
  1956                           ;rgl.c: 742: else return;
  1957  004B60                     l97:
  1958                           ;rgl.c: 744: else
  1959  004B60  010E               	movlb	F1903 shr (0+8)
  1960  004B62  6BAF               	clrf	F1903& (0+255),b
  1961                           ;rgl.c: 747: r=0;
  1962  004B64  010E               	movlb	F1904 shr (0+8)
  1963  004B66  6BB0               	clrf	F1904& (0+255),b
  1964                           ;rgl.c: 748: s=0;
  1965  004B68  010E               	movlb	F1905 shr (0+8)
  1966  004B6A  6BB1               	clrf	F1905& (0+255),b
  1967                           ;rgl.c: 749: if(m<255) m++;
  1968  004B6C  CEAC  F000         	movff	F1900,btemp
  1969  004B70  2800               	incf	btemp,w,c
  1970  004B72  E002               	bz	l136
  1971  004B74  010E               	movlb	F1900 shr (0+8)
  1972  004B76  2BAC               	incf	F1900& (0+255),f,b
  1973  004B78                     l136:
  1974                           ;rgl.c: 750: if(p<255) p++;
  1975  004B78  CEAE  F000         	movff	F1902,btemp
  1976  004B7C  2800               	incf	btemp,w,c
  1977  004B7E  E002               	bz	l137
  1978  004B80  010E               	movlb	F1902 shr (0+8)
  1979  004B82  2BAE               	incf	F1902& (0+255),f,b
  1980  004B84                     l137:
  1981                           ;rgl.c: 751: if(o<255) o++;
  1982  004B84  CEAD  F000         	movff	F1901,btemp
  1983  004B88  2800               	incf	btemp,w,c
  1984  004B8A  E002               	bz	l138
  1985  004B8C  010E               	movlb	F1901 shr (0+8)
  1986  004B8E  2BAD               	incf	F1901& (0+255),f,b
  1987  004B90                     l138:
  1988                           ;rgl.c: 752: if(DtCO.DAD_CO>DtCO.AC_CO)
  1989  004B90  C08D  FFE8         	movff	_DtCO+16,wreg
  1990  004B94  0100               	movlb	(_DtCO+14) shr (0+8)
  1991  004B96  618B               	cpfslt	(_DtCO+14)& (0+255),b
  1992  004B98  D067               	goto	l139
  1993                           ;rgl.c: 753: {
  1994  004B9A  0100               	movlb	__Lparam shr (0+8)
  1995  004B9C  6BA4               	clrf	?a_ModPruCO^(__Lparam& (0+65280)),b
  1996                           ;rgl.c: 755: if(Trosnie(0))
  1997  004B9E  0E00               	movlw	0
  1998  004BA0  EC06  F033         	call	_Trosnie
  1999  004BA4  E310               	bnc	l140
  2000                           ;rgl.c: 756: {
  2001  004BA6  0E01               	movlw	1
  2002  004BA8  010E               	movlb	F1900 shr (0+8)
  2003  004BAA  65AC               	cpfsgt	F1900& (0+255),b
  2004  004BAC  D02F               	goto	l142
  2005                           ;rgl.c: 758: {
  2006  004BAE  010E               	movlb	F1902 shr (0+8)
  2007  004BB0  6BAE               	clrf	F1902& (0+255),b
  2008                           ;rgl.c: 760: o=0;
  2009  004BB2  010E               	movlb	F1901 shr (0+8)
  2010  004BB4  6BAD               	clrf	F1901& (0+255),b
  2011                           ;rgl.c: 761: l=0;
  2012  004BB6  010E               	movlb	F1899 shr (0+8)
  2013  004BB8  6BAB               	clrf	F1899& (0+255),b
  2014                           ;rgl.c: 762: m=0;
  2015  004BBA  010E               	movlb	F1900 shr (0+8)
  2016  004BBC  6BAC               	clrf	F1900& (0+255),b
  2017                           ;rgl.c: 763: k=2;
  2018  004BBE  0E02               	movlw	2
  2019  004BC0  0100               	movlb	__Lparam shr (0+8)
  2020  004BC2  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2021                           ;rgl.c: 764: }
  2022  004BC4  D023               	goto	l142
  2023  004BC6                     l140:
  2024                           ;rgl.c: 766: else
  2025  004BC6  0E01               	movlw	1
  2026  004BC8  EC42  F033         	call	_Twyzsza
  2027  004BCC  E31D               	bnc	l143
  2028                           ;rgl.c: 768: {
  2029  004BCE  EC2E  F033         	call	_Tstoi	;wreg free
  2030  004BD2  E31C               	bnc	l142
  2031                           ;rgl.c: 770: {
  2032  004BD4  0E01               	movlw	1
  2033  004BD6  010E               	movlb	F1899 shr (0+8)
  2034  004BD8  65AB               	cpfsgt	F1899& (0+255),b
  2035  004BDA  D00A               	goto	l145
  2036                           ;rgl.c: 772: {
  2037  004BDC  0100               	movlb	__Lparam shr (0+8)
  2038  004BDE  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2039                           ;rgl.c: 774: if(Twyzsza(3)) k=15;
  2040  004BE0  0E03               	movlw	3
  2041  004BE2  EC42  F033         	call	_Twyzsza
  2042  004BE6  E310               	bnc	l143
  2043  004BE8  0E0F               	movlw	15
  2044  004BEA  0100               	movlb	__Lparam shr (0+8)
  2045  004BEC  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2046  004BEE  D00C               	goto	l143
  2047                           ;rgl.c: 775: l=0;
  2048                           ;rgl.c: 776: }
  2049  004BF0                     l145:
  2050                           ;rgl.c: 777: else
  2051  004BF0  0100               	movlb	__Lparam shr (0+8)
  2052  004BF2  6BA4               	clrf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2053                           ;rgl.c: 780: if(Twyzsza(2)) k=5;
  2054  004BF4  0E02               	movlw	2
  2055  004BF6  EC42  F033         	call	_Twyzsza
  2056  004BFA  E303               	bnc	l148
  2057  004BFC  0E05               	movlw	5
  2058  004BFE  0100               	movlb	__Lparam shr (0+8)
  2059  004C00  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2060  004C02                     l148:
  2061                           ;rgl.c: 781: l++;
  2062  004C02  010E               	movlb	F1899 shr (0+8)
  2063  004C04  2BAB               	incf	F1899& (0+255),f,b
  2064                           ;rgl.c: 782: }
  2065  004C06  D002               	goto	l142
  2066  004C08                     l143:
  2067  004C08  010E               	movlb	F1899 shr (0+8)
  2068  004C0A  6BAB               	clrf	F1899& (0+255),b
  2069  004C0C                     l142:
  2070                           ;rgl.c: 785: if(rgl.srp>PWM.MAXPWM) rgl.srp=PWM.
      +                          MAXPWM;
  2071  004C0C  C3DE  FFE8         	movff	_rgl+7,wreg
  2072  004C10  0102               	movlb	(_PWM+29) shr (0+8)
  2073  004C12  61F6               	cpfslt	(_PWM+29)& (0+255),b
  2074  004C14  D002               	goto	l150
  2075  004C16  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  2076  004C1A                     l150:
  2077                           ;rgl.c: 786: if(rgl.srp-k<PWM.MINPWM) rgl.srp=PW
      +                          M.MINPWM;
  2078  004C1A  C2F5  F000         	movff	_PWM+28,btemp
  2079  004C1E  6A01               	clrf	btemp+1,c
  2080  004C20  C3DE  F002         	movff	_rgl+7,btemp+2
  2081  004C24  0100               	movlb	__Lparam shr (0+8)
  2082  004C26  51A4               	movf	?a_ModPruCO^(__Lparam& (0+65280)),w
  2083  004C28  5C02               	subwf	btemp+2,w,c
  2084  004C2A  6EF6               	movwf	tblptrl,c
  2085  004C2C  6AF7               	clrf	tblptrh,c
  2086  004C2E  B0D8               	btfsc	status,0,c
  2087  004C30  2AF7               	incf	tblptrh,f,c
  2088  004C32  AFA4               	btfss	?a_ModPruCO^(__Lparam& (0+65280)),7,b
  2089  004C34  06F7               	decf	tblptrh,f,c
  2090  004C36  50F7               	movf	tblptrh,w,c
  2091  004C38  0A80               	xorlw	128
  2092  004C3A  6E02               	movwf	btemp+2,c
  2093  004C3C  5001               	movf	btemp+1,w,c
  2094  004C3E  0A80               	xorlw	128
  2095  004C40  5C02               	subwf	btemp+2,w,c
  2096  004C42  E102               	bnz	u1445
  2097  004C44  5000               	movf	btemp,w,c
  2098  004C46  5CF6               	subwf	tblptrl,w,c
  2099  004C48                     u1445:
  2100  004C48  E203               	bc	l151
  2101  004C4A  C2F5  F3DE         	movff	_PWM+28,_rgl+7
  2102  004C4E  D004               	goto	l152
  2103  004C50                     l151:
  2104                           ;rgl.c: 787: else rgl.srp-=k;
  2105  004C50  0100               	movlb	__Lparam shr (0+8)
  2106  004C52  51A4               	movf	?a_ModPruCO^(__Lparam& (0+65280)),w
  2107  004C54  0103               	movlb	(_rgl+7) shr (0+8)
  2108  004C56  5FDE               	subwf	(_rgl+7)& (0+255),f,b
  2109  004C58                     l152:
  2110                           ;rgl.c: 788: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.s
      +                          rp;
  2111  004C58  C3DE  FFE8         	movff	_rgl+7,wreg
  2112  004C5C  0103               	movlb	(_rgl+8) shr (0+8)
  2113  004C5E  61DF               	cpfslt	(_rgl+8)& (0+255),b
  2114  004C60  0012               	return	
  2115  004C62  C3DE  F3DF         	movff	_rgl+7,_rgl+8
  2116                           ;rgl.c: 789: return;
  2117  004C66  0012               	return	
  2118  004C68                     l139:
  2119                           ;rgl.c: 791: else
  2120  004C68  0100               	movlb	__Lparam shr (0+8)
  2121  004C6A  6BA4               	clrf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2122                           ;rgl.c: 794: if(Tmaleje(0))
  2123  004C6C  0E00               	movlw	0
  2124  004C6E  EC13  F033         	call	_Tmaleje
  2125  004C72  E310               	bnc	l155
  2126                           ;rgl.c: 795: {
  2127  004C74  0E01               	movlw	1
  2128  004C76  010E               	movlb	F1900 shr (0+8)
  2129  004C78  65AC               	cpfsgt	F1900& (0+255),b
  2130  004C7A  D022               	goto	l157
  2131                           ;rgl.c: 797: {
  2132  004C7C  010E               	movlb	F1902 shr (0+8)
  2133  004C7E  6BAE               	clrf	F1902& (0+255),b
  2134                           ;rgl.c: 799: o=0;
  2135  004C80  010E               	movlb	F1901 shr (0+8)
  2136  004C82  6BAD               	clrf	F1901& (0+255),b
  2137                           ;rgl.c: 800: l=0;
  2138  004C84  010E               	movlb	F1899 shr (0+8)
  2139  004C86  6BAB               	clrf	F1899& (0+255),b
  2140                           ;rgl.c: 801: m=0;
  2141  004C88  010E               	movlb	F1900 shr (0+8)
  2142  004C8A  6BAC               	clrf	F1900& (0+255),b
  2143                           ;rgl.c: 802: k=5;
  2144  004C8C  0E05               	movlw	5
  2145  004C8E  0100               	movlb	__Lparam shr (0+8)
  2146  004C90  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2147                           ;rgl.c: 803: }
  2148  004C92  D016               	goto	l157
  2149  004C94                     l155:
  2150                           ;rgl.c: 805: else
  2151  004C94  0E00               	movlw	0
  2152  004C96  EC35  F033         	call	_Tnizsza
  2153  004C9A  E310               	bnc	l158
  2154                           ;rgl.c: 807: {
  2155  004C9C  EC2E  F033         	call	_Tstoi	;wreg free
  2156  004CA0  E30F               	bnc	l157
  2157                           ;rgl.c: 809: {
  2158  004CA2  0E02               	movlw	2
  2159  004CA4  010E               	movlb	F1899 shr (0+8)
  2160  004CA6  65AB               	cpfsgt	F1899& (0+255),b
  2161  004CA8  D004               	goto	l160
  2162                           ;rgl.c: 811: {
  2163  004CAA  0E05               	movlw	5
  2164  004CAC  0100               	movlb	__Lparam shr (0+8)
  2165  004CAE  6FA4               	movwf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2166  004CB0  D005               	goto	l158
  2167                           ;rgl.c: 813: l=0;
  2168                           ;rgl.c: 814: }
  2169  004CB2                     l160:
  2170                           ;rgl.c: 815: else
  2171  004CB2  0100               	movlb	__Lparam shr (0+8)
  2172  004CB4  6BA4               	clrf	?a_ModPruCO^(__Lparam& (0+65280)),b
  2173                           ;rgl.c: 818: l++;
  2174  004CB6  010E               	movlb	F1899 shr (0+8)
  2175  004CB8  2BAB               	incf	F1899& (0+255),f,b
  2176                           ;rgl.c: 819: }
  2177  004CBA  D002               	goto	l157
  2178  004CBC                     l158:
  2179  004CBC  010E               	movlb	F1899 shr (0+8)
  2180  004CBE  6BAB               	clrf	F1899& (0+255),b
  2181  004CC0                     l157:
  2182                           ;rgl.c: 822: if(rgl.srp+k>PWM.MAXPWM) rgl.srp=PW
      +                          M.MAXPWM;
  2183  004CC0  C3DE  FFE8         	movff	_rgl+7,wreg
  2184  004CC4  0100               	movlb	__Lparam shr (0+8)
  2185  004CC6  25A4               	addwf	?a_ModPruCO^(__Lparam& (0+65280)),w
  2186  004CC8  6E02               	movwf	btemp+2,c
  2187  004CCA  6A03               	clrf	btemp+3,c
  2188  004CCC  B0D8               	btfsc	status,0,c
  2189  004CCE  2A03               	incf	btemp+3,f,c
  2190  004CD0  BFA4               	btfsc	?a_ModPruCO^(__Lparam& (0+65280)),7,b
  2191  004CD2  0603               	decf	btemp+3,f,c
  2192  004CD4  C2F6  F000         	movff	_PWM+29,btemp
  2193  004CD8  6A01               	clrf	btemp+1,c
  2194  004CDA  5001               	movf	btemp+1,w,c
  2195  004CDC  0A80               	xorlw	128
  2196  004CDE  6E04               	movwf	btemp+4,c
  2197  004CE0  5003               	movf	btemp+3,w,c
  2198  004CE2  0A80               	xorlw	128
  2199  004CE4  5C04               	subwf	btemp+4,w,c
  2200  004CE6  E102               	bnz	u1515
  2201  004CE8  5002               	movf	btemp+2,w,c
  2202  004CEA  5C00               	subwf	btemp,w,c
  2203  004CEC                     u1515:
  2204  004CEC  E203               	bc	l163
  2205  004CEE  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  2206  004CF2  D004               	goto	l164
  2207  004CF4                     l163:
  2208                           ;rgl.c: 823: else rgl.srp+=k;
  2209  004CF4  0100               	movlb	__Lparam shr (0+8)
  2210  004CF6  51A4               	movf	?a_ModPruCO^(__Lparam& (0+65280)),w
  2211  004CF8  0103               	movlb	(_rgl+7) shr (0+8)
  2212  004CFA  27DE               	addwf	(_rgl+7)& (0+255),f,b
  2213  004CFC                     l164:
  2214                           ;rgl.c: 824: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.s
      +                          rp;
  2215  004CFC  C3DE  FFE8         	movff	_rgl+7,wreg
  2216  004D00  0103               	movlb	(_rgl+8) shr (0+8)
  2217  004D02  61DF               	cpfslt	(_rgl+8)& (0+255),b
  2218  004D04  0012               	return	
  2219  004D06  C3DE  F3DF         	movff	_rgl+7,_rgl+8
  2220                           ;rgl.c: 825: return;
  2221  004D0A  0012               	return	
  2222                           ;rgl.c: 826: }
  2223  004D0C                     __end_of_ModPruCO:
  2224                           ;rgl.c: 853: void IncMaxCO(void)
  2225                           ;rgl.c: 854: {
  2226  004D0C                     _IncMaxCO:
  2227  000000                     
  2228                           ;rgl.c: 855: unsigned char k;
  2229  004D0C  0103               	movlb	_rgl shr (0+8)
  2230  004D0E  A5D7               	btfss	_rgl& (0+255),2,b
  2231  004D10  D008               	goto	l167
  2232                           ;rgl.c: 860: {
  2233  004D12  C3DF  FFE8         	movff	_rgl+8,wreg
  2234  004D16  0102               	movlb	(_PWM+29) shr (0+8)
  2235  004D18  61F6               	cpfslt	(_PWM+29)& (0+255),b
  2236  004D1A  0012               	return	
  2237  004D1C  C2F6  F3DF         	movff	_PWM+29,_rgl+8
  2238                           ;rgl.c: 862: return;
  2239  004D20  0012               	return	
  2240  004D22                     l167:
  2241                           ;rgl.c: 863: }
  2242  004D22  0E02               	movlw	2
  2243  004D24  EC06  F033         	call	_Trosnie
  2244  004D28  E320               	bnc	l169
  2245  004D2A  0103               	movlb	_rgl shr (0+8)
  2246  004D2C  B7D7               	btfsc	_rgl& (0+255),3,b
  2247  004D2E  D01D               	goto	l169
  2248                           ;rgl.c: 867: {
  2249  004D30  0103               	movlb	_rgl shr (0+8)
  2250  004D32  87D7               	bsf	_rgl& (0+255),3,b
  2251                           ;rgl.c: 869: k=5;
  2252  004D34  0E05               	movlw	5
  2253  004D36  6ED9               	movwf	fsr2l,c
  2254                           ;rgl.c: 870: if(rgl.srp+k>PWM.MAXPWM) rgl.srp=PW
      +                          M.MAXPWM;
  2255  004D38  C3DE  F002         	movff	_rgl+7,btemp+2
  2256  004D3C  6A03               	clrf	btemp+3,c
  2257  004D3E  2602               	addwf	btemp+2,f,c
  2258  004D40  0E00               	movlw	0
  2259  004D42  2203               	addwfc	btemp+3,f,c
  2260  004D44  C2F6  F000         	movff	_PWM+29,btemp
  2261  004D48  6A01               	clrf	btemp+1,c
  2262  004D4A  5001               	movf	btemp+1,w,c
  2263  004D4C  0A80               	xorlw	128
  2264  004D4E  6E04               	movwf	btemp+4,c
  2265  004D50  5003               	movf	btemp+3,w,c
  2266  004D52  0A80               	xorlw	128
  2267  004D54  5C04               	subwf	btemp+4,w,c
  2268  004D56  E102               	bnz	u1585
  2269  004D58  5002               	movf	btemp+2,w,c
  2270  004D5A  5C00               	subwf	btemp,w,c
  2271  004D5C                     u1585:
  2272  004D5C  E203               	bc	l170
  2273  004D5E  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  2274  004D62  D003               	goto	l169
  2275  004D64                     l170:
  2276                           ;rgl.c: 871: else rgl.srp+=k;
  2277  004D64  0103               	movlb	(_rgl+7) shr (0+8)
  2278  004D66  0E05               	movlw	5
  2279  004D68  27DE               	addwf	(_rgl+7)& (0+255),f,b
  2280  004D6A                     l169:
  2281                           ;rgl.c: 873: }
  2282  004D6A  0E03               	movlw	3
  2283  004D6C  EC06  F033         	call	_Trosnie
  2284  004D70  E320               	bnc	l172
  2285  004D72  0103               	movlb	_rgl shr (0+8)
  2286  004D74  B9D7               	btfsc	_rgl& (0+255),4,b
  2287  004D76  D01D               	goto	l172
  2288                           ;rgl.c: 875: {
  2289  004D78  0103               	movlb	_rgl shr (0+8)
  2290  004D7A  89D7               	bsf	_rgl& (0+255),4,b
  2291                           ;rgl.c: 877: k=8;
  2292  004D7C  0E08               	movlw	8
  2293  004D7E  6ED9               	movwf	fsr2l,c
  2294                           ;rgl.c: 878: if(rgl.srp+k>PWM.MAXPWM) rgl.srp=PW
      +                          M.MAXPWM;
  2295  004D80  C3DE  F002         	movff	_rgl+7,btemp+2
  2296  004D84  6A03               	clrf	btemp+3,c
  2297  004D86  2602               	addwf	btemp+2,f,c
  2298  004D88  0E00               	movlw	0
  2299  004D8A  2203               	addwfc	btemp+3,f,c
  2300  004D8C  C2F6  F000         	movff	_PWM+29,btemp
  2301  004D90  6A01               	clrf	btemp+1,c
  2302  004D92  5001               	movf	btemp+1,w,c
  2303  004D94  0A80               	xorlw	128
  2304  004D96  6E04               	movwf	btemp+4,c
  2305  004D98  5003               	movf	btemp+3,w,c
  2306  004D9A  0A80               	xorlw	128
  2307  004D9C  5C04               	subwf	btemp+4,w,c
  2308  004D9E  E102               	bnz	u1625
  2309  004DA0  5002               	movf	btemp+2,w,c
  2310  004DA2  5C00               	subwf	btemp,w,c
  2311  004DA4                     u1625:
  2312  004DA4  E203               	bc	l173
  2313  004DA6  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  2314  004DAA  D003               	goto	l172
  2315  004DAC                     l173:
  2316                           ;rgl.c: 879: else rgl.srp+=k;
  2317  004DAC  0103               	movlb	(_rgl+7) shr (0+8)
  2318  004DAE  0E08               	movlw	8
  2319  004DB0  27DE               	addwf	(_rgl+7)& (0+255),f,b
  2320  004DB2                     l172:
  2321                           ;rgl.c: 880: }
  2322  004DB2  CEDE  FFE8         	movff	_pwm_kwr,wreg
  2323  004DB6  0103               	movlb	(_rgl+9) shr (0+8)
  2324  004DB8  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  2325  004DBA  E304               	bnc	l175
  2326                           ;rgl.c: 884: {
  2327  004DBC  0E02               	movlw	2
  2328  004DBE  EC06  F033         	call	_Trosnie
  2329  004DC2  D003               	goto	L31
  2330                           ;rgl.c: 886: }
  2331  004DC4                     l175:
  2332                           ;rgl.c: 887: else
  2333  004DC4  0E01               	movlw	1
  2334  004DC6  EC06  F033         	call	_Trosnie
  2335  004DCA                     L31:
  2336  004DCA  B0D8               	btfsc	status,0,c
  2337  004DCC  0012               	return	
  2338                           ;rgl.c: 890: }
  2339  004DCE  0E05               	movlw	5
  2340  004DD0  6ED9               	movwf	fsr2l,c
  2341                           ;rgl.c: 892: if(rgl.slow_inc) k=2;
  2342  004DD2  0103               	movlb	(_rgl+1) shr (0+8)
  2343  004DD4  A3D8               	btfss	(_rgl+1)& (0+255),1,b
  2344  004DD6  D002               	goto	l179
  2345  004DD8  0E02               	movlw	2
  2346  004DDA  6ED9               	movwf	fsr2l,c
  2347  004DDC                     l179:
  2348                           ;rgl.c: 893: if(rgl.xmod+k>PWM.MAXPWM)
  2349  004DDC  50D9               	movf	fsr2l,w,c
  2350  004DDE  C3DF  F002         	movff	_rgl+8,btemp+2
  2351  004DE2  6A03               	clrf	btemp+3,c
  2352  004DE4  2602               	addwf	btemp+2,f,c
  2353  004DE6  0E00               	movlw	0
  2354  004DE8  2203               	addwfc	btemp+3,f,c
  2355  004DEA  C2F6  F000         	movff	_PWM+29,btemp
  2356  004DEE  6A01               	clrf	btemp+1,c
  2357  004DF0  5001               	movf	btemp+1,w,c
  2358  004DF2  0A80               	xorlw	128
  2359  004DF4  6E04               	movwf	btemp+4,c
  2360  004DF6  5003               	movf	btemp+3,w,c
  2361  004DF8  0A80               	xorlw	128
  2362  004DFA  5C04               	subwf	btemp+4,w,c
  2363  004DFC  E102               	bnz	u1675
  2364  004DFE  5002               	movf	btemp+2,w,c
  2365  004E00  5C00               	subwf	btemp,w,c
  2366  004E02                     u1675:
  2367  004E02  E204               	bc	l180
  2368                           ;rgl.c: 894: {
  2369  004E04  C2F6  F3DF         	movff	_PWM+29,_rgl+8
  2370                           ;rgl.c: 896: PmpToUP();
  2371  004E08  EF0C  F077         	goto	_PmpToUP	;wreg free
  2372                           ;rgl.c: 897: }
  2373  004E0C                     l180:
  2374                           ;rgl.c: 898: else
  2375  004E0C  50D9               	movf	fsr2l,w,c
  2376  004E0E  0103               	movlb	(_rgl+8) shr (0+8)
  2377  004E10  27DF               	addwf	(_rgl+8)& (0+255),f,b
  2378                           ;rgl.c: 901: PmpToDW();
  2379  004E12  EF34  F077         	goto	_PmpToDW	;wreg free
  2380                           ;rgl.c: 902: }
  2381  004E16                     __end_of_IncMaxCO:
  2382                           ;rgl.c: 928: void ModPrzCO(void)
  2383                           ;rgl.c: 929: {
  2384  004E16                     _ModPrzCO:
  2385  000000                     
  2386                           ;rgl.c: 930: unsigned char k,p,m,maxmod,mdmod;
  2387  004E16  0E00               	movlw	0
  2388  004E18  EC35  F033         	call	_Tnizsza
  2389  004E1C  E201 D17F          	bnc	l183
  2390                           ;rgl.c: 936: {
  2391  004E20  C2F6  FFE1         	movff	_PWM+29,fsr1l
  2392                           ;rgl.c: 939: if(rgl.tmp_pwm>=pwm_center)
  2393  004E24  CEDD  FFE8         	movff	_pwm_center,wreg
  2394  004E28  0103               	movlb	(_rgl+9) shr (0+8)
  2395  004E2A  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  2396  004E2C  E201 D0BE          	bnc	l184
  2397                           ;rgl.c: 940: {
  2398  004E30  C3DF  FFE8         	movff	_rgl+8,wreg
  2399  004E34  5CE1               	subwf	fsr1l,w,c
  2400  004E36  E303               	bnc	l185
  2401  004E38  C3DF  FFD9         	movff	_rgl+8,fsr2l
  2402  004E3C  D004               	goto	l186
  2403  004E3E                     l185:
  2404                           ;rgl.c: 942: else
  2405  004E3E  50E1               	movf	fsr1l,w,c
  2406  004E40  6ED9               	movwf	fsr2l,c
  2407                           ;rgl.c: 945: rgl.xmod=maxmod;
  2408  004E42  CFE1 F3DF          	movff	fsr1l,_rgl+8
  2409  004E46                     l186:
  2410                           ;rgl.c: 946: }
  2411  004E46  C088  FFE8         	movff	_DtCO+11,wreg
  2412  004E4A  0A80               	xorlw	128
  2413  004E4C  0F79               	addlw	-135
  2414  004E4E  E335               	bnc	l187
  2415  004E50  0E01               	movlw	1
  2416  004E52  010E               	movlb	_tmr shr (0+8)
  2417  004E54  65DF               	cpfsgt	_tmr& (0+255),b
  2418  004E56  D031               	goto	l187
  2419                           ;rgl.c: 948: {
  2420  004E58  6BDF               	clrf	_tmr& (0+255),b
  2421                           ;rgl.c: 950: r=p-PWM.MINPWM;
  2422  004E5A  C2F5  FFE8         	movff	_PWM+28,wreg
  2423  004E5E  5CD9               	subwf	fsr2l,w,c
  2424  004E60  6EF3               	movwf	prodl,c
  2425  004E62  6AF4               	clrf	prodh,c
  2426  004E64  A0D8               	btfss	status,0,c
  2427  004E66  06F4               	decf	prodh,f,c
  2428                           ;rgl.c: 951: if((p-(r/3))>PWM.MINPWM) p-=r/3;
  2429  004E68  0E03               	movlw	3
  2430  004E6A  6E02               	movwf	btemp+2,c
  2431  004E6C  6A03               	clrf	btemp+3,c
  2432  004E6E  CFF3 F000          	movff	prodl,btemp
  2433  004E72  CFF4 F001          	movff	prodh,btemp+1
  2434  004E76  ECA5  F006         	call	awdiv
  2435  004E7A  5004               	movf	btemp+4,w,c
  2436  004E7C  5CD9               	subwf	fsr2l,w,c
  2437  004E7E  6E00               	movwf	btemp,c
  2438  004E80  5005               	movf	btemp+5,w,c
  2439  004E82  A0D8               	btfss	status,0,c
  2440  004E84  2805               	incf	btemp+5,w,c
  2441  004E86  6A01               	clrf	btemp+1,c
  2442  004E88  5E01               	subwf	btemp+1,f,c
  2443  004E8A  C2F5  F002         	movff	_PWM+28,btemp+2
  2444  004E8E  6A03               	clrf	btemp+3,c
  2445  004E90  5003               	movf	btemp+3,w,c
  2446  004E92  0A80               	xorlw	128
  2447  004E94  6E04               	movwf	btemp+4,c
  2448  004E96  5001               	movf	btemp+1,w,c
  2449  004E98  0A80               	xorlw	128
  2450  004E9A  5C04               	subwf	btemp+4,w,c
  2451  004E9C  E102               	bnz	u1745
  2452  004E9E  5000               	movf	btemp,w,c
  2453  004EA0  5C02               	subwf	btemp+2,w,c
  2454  004EA2                     u1745:
  2455  004EA2  E301 D138          	bc	l210
  2456  004EA6  0E03               	movlw	3
  2457  004EA8  6E02               	movwf	btemp+2,c
  2458  004EAA  6A03               	clrf	btemp+3,c
  2459  004EAC  CFF3 F000          	movff	prodl,btemp
  2460  004EB0  CFF4 F001          	movff	prodh,btemp+1
  2461  004EB4  ECA5  F006         	call	awdiv
  2462  004EB8  D039               	goto	L34
  2463                           ;rgl.c: 952: else p=PWM.MINPWM;
  2464                           ;rgl.c: 953: rgl.xmod=p;
  2465                           ;rgl.c: 954: }
  2466  004EBA                     l187:
  2467                           ;rgl.c: 955: else
  2468  004EBA  C088  FFE8         	movff	_DtCO+11,wreg
  2469  004EBE  0A80               	xorlw	128
  2470  004EC0  0F7B               	addlw	-133
  2471  004EC2  E337               	bnc	l191
  2472  004EC4  0E01               	movlw	1
  2473  004EC6  010E               	movlb	_tmr shr (0+8)
  2474  004EC8  65DF               	cpfsgt	_tmr& (0+255),b
  2475  004ECA  D033               	goto	l191
  2476                           ;rgl.c: 957: {
  2477  004ECC  6BDF               	clrf	_tmr& (0+255),b
  2478                           ;rgl.c: 959: r=p-PWM.MINPWM;
  2479  004ECE  C2F5  FFE8         	movff	_PWM+28,wreg
  2480  004ED2  5CD9               	subwf	fsr2l,w,c
  2481  004ED4  6EF3               	movwf	prodl,c
  2482  004ED6  6AF4               	clrf	prodh,c
  2483  004ED8  A0D8               	btfss	status,0,c
  2484  004EDA  06F4               	decf	prodh,f,c
  2485                           ;rgl.c: 960: if((p-(r/4))>PWM.MINPWM) p-=r/4;
  2486  004EDC  0E04               	movlw	4
  2487  004EDE  6E02               	movwf	btemp+2,c
  2488  004EE0  6A03               	clrf	btemp+3,c
  2489  004EE2  CFF3 F000          	movff	prodl,btemp
  2490  004EE6  CFF4 F001          	movff	prodh,btemp+1
  2491  004EEA  ECA5  F006         	call	awdiv
  2492  004EEE  5004               	movf	btemp+4,w,c
  2493  004EF0  5CD9               	subwf	fsr2l,w,c
  2494  004EF2  6E00               	movwf	btemp,c
  2495  004EF4  5005               	movf	btemp+5,w,c
  2496  004EF6  A0D8               	btfss	status,0,c
  2497  004EF8  2805               	incf	btemp+5,w,c
  2498  004EFA  6A01               	clrf	btemp+1,c
  2499  004EFC  5E01               	subwf	btemp+1,f,c
  2500  004EFE  C2F5  F002         	movff	_PWM+28,btemp+2
  2501  004F02  6A03               	clrf	btemp+3,c
  2502  004F04  5003               	movf	btemp+3,w,c
  2503  004F06  0A80               	xorlw	128
  2504  004F08  6E04               	movwf	btemp+4,c
  2505  004F0A  5001               	movf	btemp+1,w,c
  2506  004F0C  0A80               	xorlw	128
  2507  004F0E  5C04               	subwf	btemp+4,w,c
  2508  004F10  E102               	bnz	u1785
  2509  004F12  5000               	movf	btemp,w,c
  2510  004F14  5C02               	subwf	btemp+2,w,c
  2511  004F16                     u1785:
  2512  004F16  E301 D0FE          	bc	l210
  2513  004F1A  0E04               	movlw	4
  2514  004F1C  6E02               	movwf	btemp+2,c
  2515  004F1E  6A03               	clrf	btemp+3,c
  2516  004F20  CFF3 F000          	movff	prodl,btemp
  2517  004F24  CFF4 F001          	movff	prodh,btemp+1
  2518  004F28  ECA5  F006         	call	awdiv
  2519  004F2C                     L34:
  2520  004F2C  5004               	movf	btemp+4,w,c
  2521  004F2E  5ED9               	subwf	fsr2l,f,c
  2522  004F30  D0F4               	goto	l211
  2523                           ;rgl.c: 961: else p=PWM.MINPWM;
  2524                           ;rgl.c: 962: rgl.xmod=p;
  2525                           ;rgl.c: 963: }
  2526  004F32                     l191:
  2527                           ;rgl.c: 964: else
  2528  004F32  C088  FFE8         	movff	_DtCO+11,wreg
  2529  004F36  0A80               	xorlw	128
  2530  004F38  0F7C               	addlw	-132
  2531  004F3A  E201 D0F0          	bnc	l183
  2532  004F3E  010E               	movlb	_tmr shr (0+8)
  2533  004F40  53DF               	movf	_tmr& (0+255),f,b
  2534  004F42  E101 D0EC          	bz	l183
  2535                           ;rgl.c: 966: {
  2536  004F46  6BDF               	clrf	_tmr& (0+255),b
  2537                           ;rgl.c: 968: r=p-PWM.MINPWM;
  2538  004F48  C2F5  FFE8         	movff	_PWM+28,wreg
  2539  004F4C  5CD9               	subwf	fsr2l,w,c
  2540  004F4E  6EF3               	movwf	prodl,c
  2541  004F50  6AF4               	clrf	prodh,c
  2542  004F52  A0D8               	btfss	status,0,c
  2543  004F54  06F4               	decf	prodh,f,c
  2544                           ;rgl.c: 969: if((p-(r/14))>PWM.MINPWM) p-=r/14;
  2545  004F56  0E0E               	movlw	14
  2546  004F58  6E02               	movwf	btemp+2,c
  2547  004F5A  6A03               	clrf	btemp+3,c
  2548  004F5C  CFF3 F000          	movff	prodl,btemp
  2549  004F60  CFF4 F001          	movff	prodh,btemp+1
  2550  004F64  ECA5  F006         	call	awdiv
  2551  004F68  5004               	movf	btemp+4,w,c
  2552  004F6A  5CD9               	subwf	fsr2l,w,c
  2553  004F6C  6E00               	movwf	btemp,c
  2554  004F6E  5005               	movf	btemp+5,w,c
  2555  004F70  A0D8               	btfss	status,0,c
  2556  004F72  2805               	incf	btemp+5,w,c
  2557  004F74  6A01               	clrf	btemp+1,c
  2558  004F76  5E01               	subwf	btemp+1,f,c
  2559  004F78  C2F5  F002         	movff	_PWM+28,btemp+2
  2560  004F7C  6A03               	clrf	btemp+3,c
  2561  004F7E  5003               	movf	btemp+3,w,c
  2562  004F80  0A80               	xorlw	128
  2563  004F82  6E04               	movwf	btemp+4,c
  2564  004F84  5001               	movf	btemp+1,w,c
  2565  004F86  0A80               	xorlw	128
  2566  004F88  5C04               	subwf	btemp+4,w,c
  2567  004F8A  E102               	bnz	u1825
  2568  004F8C  5000               	movf	btemp,w,c
  2569  004F8E  5C02               	subwf	btemp+2,w,c
  2570  004F90                     u1825:
  2571  004F90  E301 D0C1          	bc	l210
  2572  004F94  0E0E               	movlw	14
  2573  004F96  6E02               	movwf	btemp+2,c
  2574  004F98  6A03               	clrf	btemp+3,c
  2575  004F9A  CFF3 F000          	movff	prodl,btemp
  2576  004F9E  CFF4 F001          	movff	prodh,btemp+1
  2577  004FA2  ECA5  F006         	call	awdiv
  2578  004FA6                     L32:
  2579  004FA6  5004               	movf	btemp+4,w,c
  2580  004FA8  5ED9               	subwf	fsr2l,f,c
  2581  004FAA  D0B7               	goto	l211
  2582                           ;rgl.c: 970: else p=PWM.MINPWM;
  2583                           ;rgl.c: 971: rgl.xmod=p;
  2584                           ;rgl.c: 972: }
  2585  004FAC                     l184:
  2586                           ;rgl.c: 974: else
  2587  004FAC  C3DF  FFE8         	movff	_rgl+8,wreg
  2588  004FB0  5CE1               	subwf	fsr1l,w,c
  2589  004FB2  E303               	bnc	l199
  2590  004FB4  C3DF  FFD9         	movff	_rgl+8,fsr2l
  2591  004FB8  D004               	goto	l200
  2592  004FBA                     l199:
  2593                           ;rgl.c: 977: else
  2594  004FBA  50E1               	movf	fsr1l,w,c
  2595  004FBC  6ED9               	movwf	fsr2l,c
  2596                           ;rgl.c: 980: rgl.xmod=maxmod;
  2597  004FBE  CFE1 F3DF          	movff	fsr1l,_rgl+8
  2598  004FC2                     l200:
  2599                           ;rgl.c: 981: }
  2600  004FC2  C088  FFE8         	movff	_DtCO+11,wreg
  2601  004FC6  0A80               	xorlw	128
  2602  004FC8  0F79               	addlw	-135
  2603  004FCA  E334               	bnc	l201
  2604  004FCC  0E01               	movlw	1
  2605  004FCE  010E               	movlb	_tmr shr (0+8)
  2606  004FD0  65DF               	cpfsgt	_tmr& (0+255),b
  2607  004FD2  D030               	goto	l201
  2608                           ;rgl.c: 983: {
  2609  004FD4  6BDF               	clrf	_tmr& (0+255),b
  2610                           ;rgl.c: 985: r=p-PWM.MINPWM;
  2611  004FD6  C2F5  FFE8         	movff	_PWM+28,wreg
  2612  004FDA  5CD9               	subwf	fsr2l,w,c
  2613  004FDC  6EF3               	movwf	prodl,c
  2614  004FDE  6AF4               	clrf	prodh,c
  2615  004FE0  A0D8               	btfss	status,0,c
  2616  004FE2  06F4               	decf	prodh,f,c
  2617                           ;rgl.c: 986: if((p-(r/2))>PWM.MINPWM) p-=r/2;
  2618  004FE4  0E02               	movlw	2
  2619  004FE6  6E02               	movwf	btemp+2,c
  2620  004FE8  6A03               	clrf	btemp+3,c
  2621  004FEA  CFF3 F000          	movff	prodl,btemp
  2622  004FEE  CFF4 F001          	movff	prodh,btemp+1
  2623  004FF2  ECA5  F006         	call	awdiv
  2624  004FF6  5004               	movf	btemp+4,w,c
  2625  004FF8  5CD9               	subwf	fsr2l,w,c
  2626  004FFA  6E00               	movwf	btemp,c
  2627  004FFC  5005               	movf	btemp+5,w,c
  2628  004FFE  A0D8               	btfss	status,0,c
  2629  005000  2805               	incf	btemp+5,w,c
  2630  005002  6A01               	clrf	btemp+1,c
  2631  005004  5E01               	subwf	btemp+1,f,c
  2632  005006  C2F5  F002         	movff	_PWM+28,btemp+2
  2633  00500A  6A03               	clrf	btemp+3,c
  2634  00500C  5003               	movf	btemp+3,w,c
  2635  00500E  0A80               	xorlw	128
  2636  005010  6E04               	movwf	btemp+4,c
  2637  005012  5001               	movf	btemp+1,w,c
  2638  005014  0A80               	xorlw	128
  2639  005016  5C04               	subwf	btemp+4,w,c
  2640  005018  E102               	bnz	u1875
  2641  00501A  5000               	movf	btemp,w,c
  2642  00501C  5C02               	subwf	btemp+2,w,c
  2643  00501E                     u1875:
  2644  00501E  E27B               	bc	l210
  2645  005020  0E02               	movlw	2
  2646  005022  6E02               	movwf	btemp+2,c
  2647  005024  6A03               	clrf	btemp+3,c
  2648  005026  CFF3 F000          	movff	prodl,btemp
  2649  00502A  CFF4 F001          	movff	prodh,btemp+1
  2650  00502E  ECA5  F006         	call	awdiv
  2651  005032  D7B9               	goto	L32
  2652                           ;rgl.c: 987: else p=PWM.MINPWM;
  2653                           ;rgl.c: 988: rgl.xmod=p;
  2654                           ;rgl.c: 989: }
  2655  005034                     l201:
  2656                           ;rgl.c: 990: else
  2657  005034  C088  FFE8         	movff	_DtCO+11,wreg
  2658  005038  0A80               	xorlw	128
  2659  00503A  0F7B               	addlw	-133
  2660  00503C  E334               	bnc	l205
  2661  00503E  0E01               	movlw	1
  2662  005040  010E               	movlb	_tmr shr (0+8)
  2663  005042  65DF               	cpfsgt	_tmr& (0+255),b
  2664  005044  D030               	goto	l205
  2665                           ;rgl.c: 992: {
  2666  005046  6BDF               	clrf	_tmr& (0+255),b
  2667                           ;rgl.c: 994: r=p-PWM.MINPWM;
  2668  005048  C2F5  FFE8         	movff	_PWM+28,wreg
  2669  00504C  5CD9               	subwf	fsr2l,w,c
  2670  00504E  6EF3               	movwf	prodl,c
  2671  005050  6AF4               	clrf	prodh,c
  2672  005052  A0D8               	btfss	status,0,c
  2673  005054  06F4               	decf	prodh,f,c
  2674                           ;rgl.c: 995: if((p-(r/3))>PWM.MINPWM) p-=r/3;
  2675  005056  0E03               	movlw	3
  2676  005058  6E02               	movwf	btemp+2,c
  2677  00505A  6A03               	clrf	btemp+3,c
  2678  00505C  CFF3 F000          	movff	prodl,btemp
  2679  005060  CFF4 F001          	movff	prodh,btemp+1
  2680  005064  ECA5  F006         	call	awdiv
  2681  005068  5004               	movf	btemp+4,w,c
  2682  00506A  5CD9               	subwf	fsr2l,w,c
  2683  00506C  6E00               	movwf	btemp,c
  2684  00506E  5005               	movf	btemp+5,w,c
  2685  005070  A0D8               	btfss	status,0,c
  2686  005072  2805               	incf	btemp+5,w,c
  2687  005074  6A01               	clrf	btemp+1,c
  2688  005076  5E01               	subwf	btemp+1,f,c
  2689  005078  C2F5  F002         	movff	_PWM+28,btemp+2
  2690  00507C  6A03               	clrf	btemp+3,c
  2691  00507E  5003               	movf	btemp+3,w,c
  2692  005080  0A80               	xorlw	128
  2693  005082  6E04               	movwf	btemp+4,c
  2694  005084  5001               	movf	btemp+1,w,c
  2695  005086  0A80               	xorlw	128
  2696  005088  5C04               	subwf	btemp+4,w,c
  2697  00508A  E102               	bnz	u1915
  2698  00508C  5000               	movf	btemp,w,c
  2699  00508E  5C02               	subwf	btemp+2,w,c
  2700  005090                     u1915:
  2701  005090  E242               	bc	l210
  2702  005092  0E03               	movlw	3
  2703  005094  6E02               	movwf	btemp+2,c
  2704  005096  6A03               	clrf	btemp+3,c
  2705  005098  CFF3 F000          	movff	prodl,btemp
  2706  00509C  CFF4 F001          	movff	prodh,btemp+1
  2707  0050A0  ECA5  F006         	call	awdiv
  2708  0050A4  D780               	goto	L32
  2709                           ;rgl.c: 996: else p=PWM.MINPWM;
  2710                           ;rgl.c: 997: rgl.xmod=p;
  2711                           ;rgl.c: 998: }
  2712  0050A6                     l205:
  2713                           ;rgl.c: 999: else
  2714  0050A6  C088  FFE8         	movff	_DtCO+11,wreg
  2715  0050AA  0A80               	xorlw	128
  2716  0050AC  0F7C               	addlw	-132
  2717  0050AE  E337               	bnc	l183
  2718  0050B0  010E               	movlb	_tmr shr (0+8)
  2719  0050B2  53DF               	movf	_tmr& (0+255),f,b
  2720  0050B4  E034               	bz	l183
  2721                           ;rgl.c: 1001: {
  2722  0050B6  6BDF               	clrf	_tmr& (0+255),b
  2723                           ;rgl.c: 1003: r=p-PWM.MINPWM;
  2724  0050B8  C2F5  FFE8         	movff	_PWM+28,wreg
  2725  0050BC  5CD9               	subwf	fsr2l,w,c
  2726  0050BE  6EF3               	movwf	prodl,c
  2727  0050C0  6AF4               	clrf	prodh,c
  2728  0050C2  A0D8               	btfss	status,0,c
  2729  0050C4  06F4               	decf	prodh,f,c
  2730                           ;rgl.c: 1004: if((p-(r/4))>PWM.MINPWM) p-=r/4;
  2731  0050C6  0E04               	movlw	4
  2732  0050C8  6E02               	movwf	btemp+2,c
  2733  0050CA  6A03               	clrf	btemp+3,c
  2734  0050CC  CFF3 F000          	movff	prodl,btemp
  2735  0050D0  CFF4 F001          	movff	prodh,btemp+1
  2736  0050D4  ECA5  F006         	call	awdiv
  2737  0050D8  5004               	movf	btemp+4,w,c
  2738  0050DA  5CD9               	subwf	fsr2l,w,c
  2739  0050DC  6E00               	movwf	btemp,c
  2740  0050DE  5005               	movf	btemp+5,w,c
  2741  0050E0  A0D8               	btfss	status,0,c
  2742  0050E2  2805               	incf	btemp+5,w,c
  2743  0050E4  6A01               	clrf	btemp+1,c
  2744  0050E6  5E01               	subwf	btemp+1,f,c
  2745  0050E8  C2F5  F002         	movff	_PWM+28,btemp+2
  2746  0050EC  6A03               	clrf	btemp+3,c
  2747  0050EE  5003               	movf	btemp+3,w,c
  2748  0050F0  0A80               	xorlw	128
  2749  0050F2  6E04               	movwf	btemp+4,c
  2750  0050F4  5001               	movf	btemp+1,w,c
  2751  0050F6  0A80               	xorlw	128
  2752  0050F8  5C04               	subwf	btemp+4,w,c
  2753  0050FA  E102               	bnz	u1955
  2754  0050FC  5000               	movf	btemp,w,c
  2755  0050FE  5C02               	subwf	btemp+2,w,c
  2756  005100                     u1955:
  2757  005100  E20A               	bc	l210
  2758  005102  0E04               	movlw	4
  2759  005104  6E02               	movwf	btemp+2,c
  2760  005106  6A03               	clrf	btemp+3,c
  2761  005108  CFF3 F000          	movff	prodl,btemp
  2762  00510C  CFF4 F001          	movff	prodh,btemp+1
  2763  005110  ECA5  F006         	call	awdiv
  2764  005114  D70B               	goto	L34
  2765  005116                     l210:
  2766                           ;rgl.c: 1005: else p=PWM.MINPWM;
  2767  005116  C2F5  FFD9         	movff	_PWM+28,fsr2l
  2768  00511A                     l211:
  2769                           ;rgl.c: 1006: rgl.xmod=p;
  2770  00511A  CFD9 F3DF          	movff	fsr2l,_rgl+8
  2771  00511E                     l183:
  2772                           ;rgl.c: 1007: }
  2773  00511E  0103               	movlb	_rgl shr (0+8)
  2774  005120  BBD7               	btfsc	_rgl& (0+255),5,b
  2775  005122  D02F               	goto	l212
  2776                           ;rgl.c: 1012: {
  2777  005124  A5D7               	btfss	_rgl& (0+255),2,b
  2778  005126  0012               	return	
  2779                           ;rgl.c: 1014: {
  2780  005128  0E00               	movlw	0
  2781  00512A  EC13  F033         	call	_Tmaleje
  2782  00512E  B0D8               	btfsc	status,0,c
  2783  005130  0012               	return	
  2784                           ;rgl.c: 1016: {
  2785  005132  0E04               	movlw	4
  2786  005134  EC42  F033         	call	_Twyzsza
  2787  005138  A0D8               	btfss	status,0,c
  2788  00513A  0012               	return	
  2789                           ;rgl.c: 1018: {
  2790  00513C  CEDE  FFE8         	movff	_pwm_kwr,wreg
  2791  005140  0103               	movlb	(_rgl+9) shr (0+8)
  2792  005142  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  2793  005144  E31B               	bnc	l216
  2794                           ;rgl.c: 1020: {
  2795  005146  C2F5  F000         	movff	_PWM+28,btemp
  2796  00514A  6A01               	clrf	btemp+1,c
  2797  00514C  C3DE  F002         	movff	_rgl+7,btemp+2
  2798  005150  0EF1               	movlw	241
  2799  005152  2402               	addwf	btemp+2,w,c
  2800  005154  6EF6               	movwf	tblptrl,c
  2801  005156  6AF7               	clrf	tblptrh,c
  2802  005158  0EFF               	movlw	255
  2803  00515A  22F7               	addwfc	tblptrh,f,c
  2804  00515C  50F7               	movf	tblptrh,w,c
  2805  00515E  0A80               	xorlw	128
  2806  005160  6E02               	movwf	btemp+2,c
  2807  005162  5001               	movf	btemp+1,w,c
  2808  005164  0A80               	xorlw	128
  2809  005166  5C02               	subwf	btemp+2,w,c
  2810  005168  E102               	bnz	u2015
  2811  00516A  5000               	movf	btemp,w,c
  2812  00516C  5CF6               	subwf	tblptrl,w,c
  2813  00516E                     u2015:
  2814  00516E  E203               	bc	l217
  2815  005170  C2F5  F3DE         	movff	_PWM+28,_rgl+7
  2816  005174  D003               	goto	l216
  2817  005176                     l217:
  2818                           ;rgl.c: 1022: else rgl.srp-=15;
  2819  005176  0103               	movlb	(_rgl+7) shr (0+8)
  2820  005178  0EF1               	movlw	-15
  2821  00517A  27DE               	addwf	(_rgl+7)& (0+255),f,b
  2822  00517C                     l216:
  2823                           ;rgl.c: 1023: }
  2824  00517C  0103               	movlb	_rgl shr (0+8)
  2825  00517E  8BD7               	bsf	_rgl& (0+255),5,b
  2826                           ;rgl.c: 1025: return;
  2827  005180  0012               	return	
  2828                           ;rgl.c: 1027: else return;
  2829                           ;rgl.c: 1029: else return;
  2830                           ;rgl.c: 1031: else return;
  2831  005182                     l212:
  2832                           ;rgl.c: 1033: else
  2833  005182  0E00               	movlw	0
  2834  005184  EC13  F033         	call	_Tmaleje
  2835  005188  E302               	bnc	l222
  2836                           ;rgl.c: 1036: rgl.nmod=0;
  2837  00518A  0103               	movlb	_rgl shr (0+8)
  2838  00518C  9BD7               	bcf	_rgl& (0+255),5,b
  2839  00518E                     l222:
  2840                           ;rgl.c: 1037: }
  2841  00518E  010E               	movlb	F1919 shr (0+8)
  2842  005190  2BB2               	incf	F1919& (0+255),f,b
  2843                           ;rgl.c: 1059: }
  2844  005192  0C01               	retlw	1
  2845  005194                     __end_of_ModPrzCO:
  2846                           ;rgl.c: 1063: void PropOPT(void)
  2847                           ;rgl.c: 1064: {
  2848  005194                     _PropOPT:
  2849  000000                     
  2850                           ;rgl.c: 1065: if(rgl.nmod)
  2851  005194  0103               	movlb	_rgl shr (0+8)
  2852                           ;rgl.c: 1066: {
  2853  005196  C2F5  FFE8         	movff	_PWM+28,wreg
  2854  00519A  BBD7               	btfsc	_rgl& (0+255),5,b
  2855  00519C  EF74  F001         	goto	_WritePWM
  2856                           ;rgl.c: 1068: }
  2857                           ;rgl.c: 1069: else
  2858  0051A0  0103               	movlb	(_rgl+9) shr (0+8)
  2859  0051A2  61E0               	cpfslt	(_rgl+9)& (0+255),b
  2860  0051A4  EF54  F02E         	goto	l402
  2861  0051A8  C2F5  F3E0         	movff	_PWM+28,_rgl+9
  2862  0051AC  EF54  F02E         	goto	l402
  2863                           ;rgl.c: 1072: WritePWM(rgl.tmp_pwm);
  2864                           ;rgl.c: 1073: }
  2865  0051B0                     __end_of_PropOPT:
  2866                           ;rgl.c: 2301: unsigned char SetStab(unsigned cha
      +                          r ada2,unsigned char k,unsigned char res)
  2867                           ;rgl.c: 2302: {
  2868  0051B0  00A4               	dw	?_SetStab
  2869  0051B2                     _SetStab:
  2870  000000                     
  2871                           ;_ada2 stored from wreg
  2872  0051B2  0100               	movlb	__Lparam shr (0+8)
  2873  0051B4  6FA4               	movwf	?a_SetStab^(__Lparam& (0+65280)),b
  2874                           ;rgl.c: 2303: static unsigned char pop;
  2875  0051B6  51A5               	movf	(?_SetStab+1)^(__Lparam& (0+65280)),w
  2876  0051B8  E017               	bz	l229
  2877                           ;rgl.c: 2309: {
  2878  0051BA  010E               	movlb	F1929 shr (0+8)
  2879  0051BC  6BB6               	clrf	F1929& (0+255),b
  2880                           ;rgl.c: 2311: pk=0;
  2881  0051BE  010E               	movlb	F1928 shr (0+8)
  2882  0051C0  6BB5               	clrf	F1928& (0+255),b
  2883                           ;rgl.c: 2312: t2=0;
  2884  0051C2  010E               	movlb	F1932 shr (0+8)
  2885  0051C4  6BB9               	clrf	F1932& (0+255),b
  2886                           ;rgl.c: 2313: pk2=0;
  2887  0051C6  010E               	movlb	F1931 shr (0+8)
  2888  0051C8  6BB8               	clrf	F1931& (0+255),b
  2889                           ;rgl.c: 2314: pop=0;
  2890  0051CA  010E               	movlb	F1926 shr (0+8)
  2891  0051CC  6BB3               	clrf	F1926& (0+255),b
  2892                           ;rgl.c: 2315: bada2=ada2;
  2893  0051CE  C0A4  FEBB         	movff	?a_SetStab,F1934
  2894                           ;rgl.c: 2316: tpk=0;
  2895  0051D2  010E               	movlb	F1927 shr (0+8)
  2896  0051D4  6BB4               	clrf	F1927& (0+255),b
  2897                           ;rgl.c: 2317: btpk=0;
  2898  0051D6  010E               	movlb	F1935 shr (0+8)
  2899  0051D8  6BBC               	clrf	F1935& (0+255),b
  2900                           ;rgl.c: 2318: tpk2=0;
  2901  0051DA  010E               	movlb	F1930 shr (0+8)
  2902  0051DC  6BB7               	clrf	F1930& (0+255),b
  2903                           ;rgl.c: 2319: btpk2=0;
  2904  0051DE  010E               	movlb	F1936 shr (0+8)
  2905  0051E0  6BBD               	clrf	F1936& (0+255),b
  2906                           ;rgl.c: 2320: t3=0;
  2907  0051E2  010E               	movlb	F1933 shr (0+8)
  2908  0051E4  6BBA               	clrf	F1933& (0+255),b
  2909                           ;rgl.c: 2321: return 0;
  2910  0051E6  0C00               	retlw	0
  2911  0051E8                     l229:
  2912                           ;rgl.c: 2322: }
  2913  0051E8  0E03               	movlw	3
  2914  0051EA  EC42  F033         	call	_Twyzsza
  2915  0051EE  E26B               	bc	l230
  2916  0051F0  0E02               	movlw	2
  2917  0051F2  EC35  F033         	call	_Tnizsza
  2918  0051F6  E267               	bc	l230
  2919                           ;rgl.c: 2324: {
  2920  0051F8  0E00               	movlw	0
  2921  0051FA  EC06  F033         	call	_Trosnie
  2922  0051FE  0E00               	movlw	0
  2923  005200  E233               	bc	L38
  2924  005202  EC64  F033         	call	_TFrosnie
  2925  005206  E22F               	bc	l231
  2926                           ;rgl.c: 2326: {
  2927  005208  0100               	movlb	__Lparam shr (0+8)
  2928  00520A  CEBB  FFE8         	movff	F1934,wreg
  2929  00520E  5DA4               	subwf	?a_SetStab^(__Lparam& (0+65280)),w
  2930  005210  0E00               	movlw	0
  2931  005212  A0D8               	btfss	status,0,c
  2932  005214  0E01               	movlw	1
  2933  005216  CFE8 FEB4          	movff	wreg,F1927
  2934                           ;rgl.c: 2328: if(tpk&&tpk!=btpk) pk=1;
  2935  00521A  010E               	movlb	F1927 shr (0+8)
  2936  00521C  53B4               	movf	F1927& (0+255),f,b
  2937  00521E  E008               	bz	l232
  2938  005220  CEB4  FFE8         	movff	F1927,wreg
  2939  005224  010E               	movlb	F1935 shr (0+8)
  2940  005226  19BC               	xorwf	F1935& (0+255),w,b
  2941  005228  E003               	bz	l232
  2942  00522A  0E01               	movlw	1
  2943  00522C  CFE8 FEB5          	movff	wreg,F1928
  2944  005230                     l232:
  2945                           ;rgl.c: 2329: if(pk&&++t>5)
  2946  005230  010E               	movlb	F1928 shr (0+8)
  2947  005232  53B5               	movf	F1928& (0+255),f,b
  2948  005234  E018               	bz	l231
  2949  005236  010E               	movlb	F1929 shr (0+8)
  2950  005238  2BB6               	incf	F1929& (0+255),f,b
  2951  00523A  0E05               	movlw	5
  2952  00523C  65B6               	cpfsgt	F1929& (0+255),b
  2953  00523E  D013               	goto	l231
  2954                           ;rgl.c: 2330: {
  2955  005240  6BB6               	clrf	F1929& (0+255),b
  2956                           ;rgl.c: 2332: pk=0;
  2957  005242  010E               	movlb	F1928 shr (0+8)
  2958  005244  6BB5               	clrf	F1928& (0+255),b
  2959                           ;rgl.c: 2333: t2=0;
  2960  005246  010E               	movlb	F1932 shr (0+8)
  2961  005248  6BB9               	clrf	F1932& (0+255),b
  2962                           ;rgl.c: 2334: pk2=0;
  2963  00524A  010E               	movlb	F1931 shr (0+8)
  2964  00524C  6BB8               	clrf	F1931& (0+255),b
  2965                           ;rgl.c: 2335: pop+=2;
  2966  00524E  010E               	movlb	F1926 shr (0+8)
  2967  005250  0E02               	movlw	2
  2968  005252  27B3               	addwf	F1926& (0+255),f,b
  2969                           ;rgl.c: 2336: if(pop>=k) pop=k-1;
  2970  005254  0100               	movlb	__Lparam shr (0+8)
  2971  005256  51A4               	movf	?_SetStab^(__Lparam& (0+65280)),w
  2972  005258  010E               	movlb	F1926 shr (0+8)
  2973  00525A  5DB3               	subwf	F1926& (0+255),w,b
  2974  00525C  E304               	bnc	l231
  2975  00525E  0100               	movlb	__Lparam shr (0+8)
  2976  005260  05A4               	decf	?_SetStab^(__Lparam& (0+65280)),w
  2977  005262  CFE8 FEB3          	movff	wreg,F1926
  2978  005266                     l231:
  2979                           ;rgl.c: 2337: }
  2980  005266  0E00               	movlw	0
  2981  005268                     L38:
  2982  005268  EC13  F033         	call	_Tmaleje
  2983  00526C  E236               	bc	l239
  2984  00526E  0E00               	movlw	0
  2985  005270  EC71  F033         	call	_TFmaleje
  2986  005274  E232               	bc	l239
  2987                           ;rgl.c: 2340: {
  2988  005276  0100               	movlb	__Lparam shr (0+8)
  2989  005278  51A4               	movf	?a_SetStab^(__Lparam& (0+65280)),w
  2990  00527A  010E               	movlb	F1934 shr (0+8)
  2991  00527C  5DBB               	subwf	F1934& (0+255),w,b
  2992  00527E  0E00               	movlw	0
  2993  005280  A0D8               	btfss	status,0,c
  2994  005282  0E01               	movlw	1
  2995  005284  CFE8 FEB7          	movff	wreg,F1930
  2996                           ;rgl.c: 2342: if(tpk2&&tpk2!=btpk2) pk2=1;
  2997  005288  010E               	movlb	F1930 shr (0+8)
  2998  00528A  53B7               	movf	F1930& (0+255),f,b
  2999  00528C  E008               	bz	l236
  3000  00528E  CEB7  FFE8         	movff	F1930,wreg
  3001  005292  010E               	movlb	F1936 shr (0+8)
  3002  005294  19BD               	xorwf	F1936& (0+255),w,b
  3003  005296  E003               	bz	l236
  3004  005298  0E01               	movlw	1
  3005  00529A  CFE8 FEB8          	movff	wreg,F1931
  3006  00529E                     l236:
  3007                           ;rgl.c: 2343: if(pk2&&++t2>5)
  3008  00529E  010E               	movlb	F1931 shr (0+8)
  3009  0052A0  53B8               	movf	F1931& (0+255),f,b
  3010  0052A2  E01B               	bz	l239
  3011  0052A4  010E               	movlb	F1932 shr (0+8)
  3012  0052A6  2BB9               	incf	F1932& (0+255),f,b
  3013  0052A8  0E05               	movlw	5
  3014  0052AA  65B9               	cpfsgt	F1932& (0+255),b
  3015  0052AC  D016               	goto	l239
  3016                           ;rgl.c: 2344: {
  3017  0052AE  6BB9               	clrf	F1932& (0+255),b
  3018                           ;rgl.c: 2346: pk2=0;
  3019  0052B0  010E               	movlb	F1931 shr (0+8)
  3020  0052B2  6BB8               	clrf	F1931& (0+255),b
  3021                           ;rgl.c: 2347: t=0;
  3022  0052B4  010E               	movlb	F1929 shr (0+8)
  3023  0052B6  6BB6               	clrf	F1929& (0+255),b
  3024                           ;rgl.c: 2348: pk=0;
  3025  0052B8  010E               	movlb	F1928 shr (0+8)
  3026  0052BA  6BB5               	clrf	F1928& (0+255),b
  3027                           ;rgl.c: 2349: if(pop>0) pop-=1;
  3028  0052BC  010E               	movlb	F1926 shr (0+8)
  3029  0052BE  53B3               	movf	F1926& (0+255),f,b
  3030  0052C0  E00C               	bz	l239
  3031  0052C2  07B3               	decf	F1926& (0+255),f,b
  3032                           ;rgl.c: 2350: }
  3033  0052C4  D00A               	goto	l239
  3034  0052C6                     l230:
  3035                           ;rgl.c: 2353: else
  3036  0052C6  010E               	movlb	F1929 shr (0+8)
  3037  0052C8  6BB6               	clrf	F1929& (0+255),b
  3038                           ;rgl.c: 2356: pk=0;
  3039  0052CA  010E               	movlb	F1928 shr (0+8)
  3040  0052CC  6BB5               	clrf	F1928& (0+255),b
  3041                           ;rgl.c: 2357: t2=0;
  3042  0052CE  010E               	movlb	F1932 shr (0+8)
  3043  0052D0  6BB9               	clrf	F1932& (0+255),b
  3044                           ;rgl.c: 2358: pk2=0;
  3045  0052D2  010E               	movlb	F1931 shr (0+8)
  3046  0052D4  6BB8               	clrf	F1931& (0+255),b
  3047                           ;rgl.c: 2359: pop=0;
  3048  0052D6  010E               	movlb	F1926 shr (0+8)
  3049  0052D8  6BB3               	clrf	F1926& (0+255),b
  3050  0052DA                     l239:
  3051                           ;rgl.c: 2360: }
  3052  0052DA  CEB4  FEBC         	movff	F1927,F1935
  3053                           ;rgl.c: 2362: btpk2=tpk2;
  3054  0052DE  CEB7  FEBD         	movff	F1930,F1936
  3055                           ;rgl.c: 2363: bada2=ada2;
  3056  0052E2  C0A4  FEBB         	movff	?a_SetStab,F1934
  3057                           ;rgl.c: 2364: return pop;
  3058  0052E6  CEB3  FFE8         	movff	F1926,wreg
  3059  0052EA  0012               	return	
  3060                           ;rgl.c: 2365: }
  3061  0052EC                     __end_of_SetStab:
  3062                           ;rgl.c: 2368: unsigned char FirstXMOD2(void);
  3063                           ;rgl.c: 2369: void StartMCW2(void)
  3064                           ;rgl.c: 2370: {
  3065  0052EC                     _StartMCW2:
  3066  000000                     
  3067                           ;rgl.c: 2371: if(rgl.btco||rgl.btcw) return;
  3068  0052EC  0103               	movlb	_rgl shr (0+8)
  3069  0052EE  A1D7               	btfss	_rgl& (0+255),0,b
  3070  0052F0  B3D7               	btfsc	_rgl& (0+255),1,b
  3071  0052F2  0012               	return	
  3072                           ;rgl.c: 2372: StartRTdS(3);
  3073  0052F4  0E03               	movlw	3
  3074  0052F6  EC33  F07E         	call	_StartRTdS
  3075                           ;rgl.c: 2373: popMIN=0;
  3076  0052FA  010E               	movlb	_popMIN shr (0+8)
  3077  0052FC  6BD9               	clrf	_popMIN& (0+255),b
  3078                           ;rgl.c: 2374: popMAXCW=0;
  3079  0052FE  010E               	movlb	_popMAXCW shr (0+8)
  3080  005300  6BD8               	clrf	_popMAXCW& (0+255),b
  3081                           ;rgl.c: 2375: DtCO.dDCO=0;
  3082  005302  0100               	movlb	(_DtCO+10) shr (0+8)
  3083  005304  6B87               	clrf	(_DtCO+10)& (0+255),b
  3084                           ;rgl.c: 2376: DtCW.dDCW=0;
  3085  005306  0100               	movlb	(_DtCW+8) shr (0+8)
  3086  005308  6B76               	clrf	(_DtCW+8)& (0+255),b
  3087                           ;rgl.c: 2377: DtCO.indCO=0;
  3088  00530A  0100               	movlb	(_DtCO+12) shr (0+8)
  3089  00530C  6B89               	clrf	(_DtCO+12)& (0+255),b
  3090                           ;rgl.c: 2378: DtCW.indCW=0;
  3091  00530E  0100               	movlb	(_DtCW+10) shr (0+8)
  3092  005310  6B78               	clrf	(_DtCW+10)& (0+255),b
  3093                           ;rgl.c: 2379: rgl.fz=0;
  3094  005312  0103               	movlb	_rgl shr (0+8)
  3095  005314  95D7               	bcf	_rgl& (0+255),2,b
  3096                           ;rgl.c: 2380: rgl.xmod=FirstXMOD2();
  3097  005316  D807               	call	_FirstXMOD2	;wreg free
  3098  005318  CFE8 F3DF          	movff	wreg,_rgl+8
  3099                           ;rgl.c: 2381: rgl.srp=0;
  3100  00531C  0103               	movlb	(_rgl+7) shr (0+8)
  3101  00531E  6BDE               	clrf	(_rgl+7)& (0+255),b
  3102                           ;rgl.c: 2382: rgl.ytmp=0;
  3103  005320  6BDD               	clrf	(_rgl+6)& (0+255),b
  3104                           ;rgl.c: 2383: rgl.del1s=0;
  3105  005322  9DD7               	bcf	_rgl& (0+255),6,b
  3106                           ;rgl.c: 2384: }
  3107  005324  0012               	return	
  3108  005326                     __end_of_StartMCW2:
  3109                           ;rgl.c: 2387: unsigned char FirstXMOD2(void)
  3110                           ;rgl.c: 2388: {
  3111  005326                     _FirstXMOD2:
  3112  000000                     
  3113                           ;rgl.c: 2389: unsigned char fp,proc;
  3114  005326  0E0A               	movlw	10
  3115  005328  6E02               	movwf	btemp+2,c
  3116  00532A  6A03               	clrf	btemp+3,c
  3117  00532C  C2F5  FFE8         	movff	_PWM+28,wreg
  3118  005330  C2F6  F000         	movff	_PWM+29,btemp
  3119  005334  6A01               	clrf	btemp+1,c
  3120  005336  5E00               	subwf	btemp,f,c
  3121  005338  0E00               	movlw	0
  3122  00533A  5A01               	subwfb	btemp+1,f,c
  3123  00533C  ECA5  F006         	call	awdiv
  3124  005340  90D8               	bcf	status,0,c
  3125  005342  3604               	rlcf	btemp+4,f,c
  3126  005344  90D8               	bcf	status,0,c
  3127  005346  3404               	rlcf	btemp+4,w,c
  3128  005348  0102               	movlb	(_PWM+29) shr (0+8)
  3129  00534A  5DF6               	subwf	(_PWM+29)& (0+255),w,b
  3130  00534C  CFE8 F2EB          	movff	wreg,_PWM+18
  3131                           ;rgl.c: 2391: if(DtCW.DCW>0) return PWM.MAXPWM;
  3132  005350  C075  FFE8         	movff	_DtCW+7,wreg
  3133  005354  0A80               	xorlw	128
  3134  005356  0F7F               	addlw	-129
  3135  005358  C2F6  FFE8         	movff	_PWM+29,wreg
  3136  00535C  E301               	bnc	L39
  3137  00535E  0012               	return	
  3138                           ;rgl.c: 2392: else
  3139  005360                     L39:
  3140  005360  0102               	movlb	(_PWM+18) shr (0+8)
  3141  005362  61EB               	cpfslt	(_PWM+18)& (0+255),b
  3142  005364  D003               	goto	l245
  3143  005366  C2EB  FFE8         	movff	_PWM+18,wreg
  3144  00536A  0012               	return	
  3145  00536C                     l245:
  3146                           ;rgl.c: 2395: else return PWM.MAXPWM;
  3147  00536C  C2F6  FFE8         	movff	_PWM+29,wreg
  3148  005370  0012               	return	
  3149                           ;rgl.c: 2396: }
  3150  005372                     __end_of_FirstXMOD2:
  3151                           ;rgl.c: 2470: void ClrMod2(void)
  3152                           ;rgl.c: 2471: {
  3153  005372                     _ClrMod2:
  3154  000000                     
  3155                           ;rgl.c: 2472: rgl.fz=0;
  3156  005372  0103               	movlb	_rgl shr (0+8)
  3157  005374  95D7               	bcf	_rgl& (0+255),2,b
  3158                           ;rgl.c: 2473: rgl.med_up=0;
  3159  005376  97D7               	bcf	_rgl& (0+255),3,b
  3160                           ;rgl.c: 2474: rgl.fast_up=0;
  3161  005378  99D7               	bcf	_rgl& (0+255),4,b
  3162                           ;rgl.c: 2475: if(rgl.btco) rgl.xmod=PWM.BufPWM;
  3163  00537A  A1D7               	btfss	_rgl& (0+255),0,b
  3164  00537C  D003               	goto	l248
  3165  00537E  C2DA  F3DF         	movff	_PWM+1,_rgl+8
  3166  005382  D003               	goto	l249
  3167  005384                     l248:
  3168                           ;rgl.c: 2476: else rgl.xmod=FirstXMOD2();
  3169  005384  DFD0               	call	_FirstXMOD2	;wreg free
  3170  005386  CFE8 F3DF          	movff	wreg,_rgl+8
  3171  00538A                     l249:
  3172                           ;rgl.c: 2477: rgl.srp=0;
  3173  00538A  0103               	movlb	(_rgl+7) shr (0+8)
  3174  00538C  6BDE               	clrf	(_rgl+7)& (0+255),b
  3175                           ;rgl.c: 2478: rgl.ytmp=0;
  3176  00538E  6BDD               	clrf	(_rgl+6)& (0+255),b
  3177                           ;rgl.c: 2479: rgl.nmod=0;
  3178  005390  9BD7               	bcf	_rgl& (0+255),5,b
  3179                           ;rgl.c: 2480: rgl.del1s=0;
  3180  005392  9DD7               	bcf	_rgl& (0+255),6,b
  3181                           ;rgl.c: 2481: rgl.inv_mod=0;
  3182  005394  91D8               	bcf	(_rgl+1)& (0+255),0,b
  3183                           ;rgl.c: 2482: }
  3184  005396  0012               	return	
  3185  005398                     __end_of_ClrMod2:
  3186                           ;rgl.c: 2485: void ModToCW2(void)
  3187                           ;rgl.c: 2486: {
  3188  005398                     _ModToCW2:
  3189  000000                     
  3190                           ;rgl.c: 2487: rgl.btcw=1;
  3191  005398  0103               	movlb	_rgl shr (0+8)
  3192  00539A  83D7               	bsf	_rgl& (0+255),1,b
  3193                           ;rgl.c: 2488: if(rgl.btco)
  3194  00539C  A1D7               	btfss	_rgl& (0+255),0,b
  3195  00539E  0012               	return	
  3196                           ;rgl.c: 2489: {
  3197  0053A0  91D7               	bcf	_rgl& (0+255),0,b
  3198                           ;rgl.c: 2491: ClrMod2();
  3199  0053A2  D7E7               	goto	_ClrMod2	;wreg free
  3200                           ;rgl.c: 2492: }
  3201  0053A4                     __end_of_ModToCW2:
  3202                           ;rgl.c: 2496: void ModToCO2(void)
  3203                           ;rgl.c: 2497: {
  3204  0053A4                     _ModToCO2:
  3205  000000                     
  3206                           ;rgl.c: 2498: rgl.btco=1;
  3207  0053A4  0103               	movlb	_rgl shr (0+8)
  3208  0053A6  81D7               	bsf	_rgl& (0+255),0,b
  3209                           ;rgl.c: 2499: if(rgl.btcw)
  3210  0053A8  A3D7               	btfss	_rgl& (0+255),1,b
  3211  0053AA  0012               	return	
  3212                           ;rgl.c: 2500: {
  3213  0053AC  93D7               	bcf	_rgl& (0+255),1,b
  3214                           ;rgl.c: 2502: ClrMod2();
  3215  0053AE  D7E1               	goto	_ClrMod2	;wreg free
  3216                           ;rgl.c: 2503: }
  3217  0053B0                     __end_of_ModToCO2:
  3218                           ;rgl.c: 2507: void IncConstCW2(void)
  3219                           ;rgl.c: 2508: {
  3220  0053B0                     _IncConstCW2:
  3221  000000                     
  3222                           ;rgl.c: 2509: if(!TFrosnie(0))
  3223  0053B0  0E00               	movlw	0
  3224  0053B2  EC64  F033         	call	_TFrosnie
  3225  0053B6  E208               	bc	l255
  3226                           ;rgl.c: 2510: {
  3227  0053B8  EC2E  F033         	call	_Tstoi	;wreg free
  3228  0053BC  0103               	movlb	(_rgl+6) shr (0+8)
  3229  0053BE  E302               	bnc	L40
  3230  0053C0  2BDD               	incf	(_rgl+6)& (0+255),f,b
  3231  0053C2  0C01               	retlw	1
  3232                           ;rgl.c: 2512: else rgl.ytmp=0;
  3233  0053C4                     L40:
  3234  0053C4  6BDD               	clrf	(_rgl+6)& (0+255),b
  3235                           ;rgl.c: 2513: }
  3236  0053C6  0012               	return	
  3237  0053C8                     l255:
  3238                           ;rgl.c: 2514: else rgl.ytmp=0;
  3239  0053C8  0103               	movlb	(_rgl+6) shr (0+8)
  3240  0053CA  6BDD               	clrf	(_rgl+6)& (0+255),b
  3241                           ;rgl.c: 2515: }
  3242  0053CC  0012               	return	
  3243  0053CE                     __end_of_IncConstCW2:
  3244                           ;rgl.c: 2517: void IncConstCO2(void)
  3245                           ;rgl.c: 2518: {
  3246  0053CE                     _IncConstCO2:
  3247  000000                     
  3248                           ;rgl.c: 2519: if(Tstoi()) rgl.ytmp++;
  3249  0053CE  EC2E  F033         	call	_Tstoi	;wreg free
  3250  0053D2  0103               	movlb	(_rgl+6) shr (0+8)
  3251  0053D4  E302               	bnc	L41
  3252  0053D6  2BDD               	incf	(_rgl+6)& (0+255),f,b
  3253  0053D8  0C01               	retlw	1
  3254                           ;rgl.c: 2520: else rgl.ytmp=0;
  3255  0053DA                     L41:
  3256  0053DA  6BDD               	clrf	(_rgl+6)& (0+255),b
  3257                           ;rgl.c: 2521: }
  3258  0053DC  0012               	return	
  3259  0053DE                     __end_of_IncConstCO2:
  3260                           ;rgl.c: 2524: void ReadDataCO2(void)
  3261                           ;rgl.c: 2525: {
  3262  0053DE                     _ReadDataCO2:
  3263  000000                     
  3264                           ;rgl.c: 2526: rgl.x_t=DtCO.DCO;
  3265  0053DE  C086  F3D9         	movff	_DtCO+9,_rgl+2
  3266                           ;rgl.c: 2527: rgl.x_dt=DtCO.dDCO;
  3267  0053E2  C087  F3DB         	movff	_DtCO+10,_rgl+4
  3268                           ;rgl.c: 2528: }
  3269  0053E6  0012               	return	
  3270  0053E8                     __end_of_ReadDataCO2:
  3271                           ;rgl.c: 2531: void ReadDataCW2(void)
  3272                           ;rgl.c: 2532: {
  3273  0053E8                     _ReadDataCW2:
  3274  000000                     
  3275                           ;rgl.c: 2533: rgl.x_t=DtCW.DCW;
  3276  0053E8  C075  F3D9         	movff	_DtCW+7,_rgl+2
  3277                           ;rgl.c: 2534: rgl.x_f=DtCO.DCO;
  3278  0053EC  C086  F3DA         	movff	_DtCO+9,_rgl+3
  3279                           ;rgl.c: 2535: rgl.x_dt=DtCW.dDCW;
  3280  0053F0  C076  F3DB         	movff	_DtCW+8,_rgl+4
  3281                           ;rgl.c: 2536: rgl.x_df=DtCO.dDCO;
  3282  0053F4  C087  F3DC         	movff	_DtCO+10,_rgl+5
  3283                           ;rgl.c: 2537: }
  3284  0053F8  0012               	return	
  3285  0053FA                     __end_of_ReadDataCW2:
  3286                           ;rgl.c: 2541: void ModZgCW2(void)
  3287                           ;rgl.c: 2542: {
  3288  0053FA                     _ModZgCW2:
  3289  000000                     
  3290                           ;rgl.c: 2543: signed long m;
  3291  0053FA  0E06               	movlw	6
  3292  0053FC  EC35  F033         	call	_Tnizsza
  3293  005400  E305               	bnc	l265
  3294                           ;rgl.c: 2548: {
  3295  005402  010E               	movlb	F1953 shr (0+8)
  3296  005404  6BBE               	clrf	F1953& (0+255),b
  3297                           ;rgl.c: 2550: rgl.xmod=FirstXMOD2();
  3298  005406  DF8F               	call	_FirstXMOD2	;wreg free
  3299  005408  CFE8 F3DF          	movff	wreg,_rgl+8
  3300  00540C                     l265:
  3301                           ;rgl.c: 2551: }
  3302  00540C  0103               	movlb	_rgl shr (0+8)
  3303  00540E  A5D7               	btfss	_rgl& (0+255),2,b
  3304  005410  D00D               	goto	l266
  3305                           ;rgl.c: 2553: {
  3306  005412  0E02               	movlw	2
  3307  005414  EC35  F033         	call	_Tnizsza
  3308  005418  A0D8               	btfss	status,0,c
  3309  00541A  0012               	return	
  3310                           ;rgl.c: 2555: {
  3311  00541C  C2DA  F3DF         	movff	_PWM+1,_rgl+8
  3312                           ;rgl.c: 2557: rgl.srp=0;
  3313  005420  0103               	movlb	(_rgl+7) shr (0+8)
  3314  005422  6BDE               	clrf	(_rgl+7)& (0+255),b
  3315                           ;rgl.c: 2558: rgl.ytmp=0;
  3316  005424  6BDD               	clrf	(_rgl+6)& (0+255),b
  3317                           ;rgl.c: 2559: rgl.del1s=0;
  3318  005426  9DD7               	bcf	_rgl& (0+255),6,b
  3319                           ;rgl.c: 2560: pop=0;
  3320  005428  010E               	movlb	F1953 shr (0+8)
  3321  00542A  6BBE               	clrf	F1953& (0+255),b
  3322                           ;rgl.c: 2561: }
  3323                           ;rgl.c: 2562: else return;
  3324  00542C                     l266:
  3325                           ;rgl.c: 2563: }
  3326  00542C  0E01               	movlw	1
  3327  00542E  EC35  F033         	call	_Tnizsza
  3328  005432  E21B               	bc	l269
  3329                           ;rgl.c: 2565: {
  3330  005434  0103               	movlb	_rgl shr (0+8)
  3331  005436  85D7               	bsf	_rgl& (0+255),2,b
  3332                           ;rgl.c: 2567: rgl.fast_up=0;
  3333  005438  99D7               	bcf	_rgl& (0+255),4,b
  3334                           ;rgl.c: 2568: rgl.med_up=0;
  3335  00543A  97D7               	bcf	_rgl& (0+255),3,b
  3336                           ;rgl.c: 2569: rgl.srp=PWM.BufPWM+pop;
  3337  00543C  CEBE  FFE8         	movff	F1953,wreg
  3338  005440  0102               	movlb	(_PWM+1) shr (0+8)
  3339  005442  25DA               	addwf	(_PWM+1)& (0+255),w,b
  3340  005444  CFE8 F3DE          	movff	wreg,_rgl+7
  3341                           ;rgl.c: 2570: rgl.xmod=PWM.BufPWM+pop;
  3342  005448  CEBE  FFE8         	movff	F1953,wreg
  3343  00544C  25DA               	addwf	(_PWM+1)& (0+255),w,b
  3344  00544E  CFE8 F3DF          	movff	wreg,_rgl+8
  3345                           ;rgl.c: 2571: pop=0;
  3346  005452  010E               	movlb	F1953 shr (0+8)
  3347  005454  6BBE               	clrf	F1953& (0+255),b
  3348                           ;rgl.c: 2572: if(rgl.xmod>PWM.MAXPWM)
  3349  005456  C3DF  FFE8         	movff	_rgl+8,wreg
  3350  00545A  0102               	movlb	(_PWM+29) shr (0+8)
  3351  00545C  61F6               	cpfslt	(_PWM+29)& (0+255),b
  3352  00545E  0012               	return	
  3353                           ;rgl.c: 2573: {
  3354  005460  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  3355                           ;rgl.c: 2575: rgl.xmod=PWM.MAXPWM;
  3356  005464  C2F6  F3DF         	movff	_PWM+29,_rgl+8
  3357                           ;rgl.c: 2576: }
  3358  005468  0012               	return	
  3359  00546A                     l269:
  3360                           ;rgl.c: 2578: }
  3361  00546A  C2F5  FFE8         	movff	_PWM+28,wreg
  3362  00546E  0103               	movlb	(_rgl+8) shr (0+8)
  3363  005470  5DDF               	subwf	(_rgl+8)& (0+255),w,b
  3364  005472  E318               	bnc	l271
  3365  005474  0E0A               	movlw	10
  3366  005476  6E02               	movwf	btemp+2,c
  3367  005478  6A03               	clrf	btemp+3,c
  3368  00547A  C2F5  FFE8         	movff	_PWM+28,wreg
  3369  00547E  C3DF  F000         	movff	_rgl+8,btemp
  3370  005482  6A01               	clrf	btemp+1,c
  3371  005484  5E00               	subwf	btemp,f,c
  3372  005486  0E00               	movlw	0
  3373  005488  5A01               	subwfb	btemp+1,f,c
  3374  00548A  EC12  F007         	call	awmul
  3375  00548E  0100               	movlb	__Lparam shr (0+8)
  3376  005490  C004  F0A4         	movff	btemp+4,?a_ModZgCW2
  3377  005494  C005  F0A5         	movff	btemp+5,?a_ModZgCW2+1
  3378  005498  0E00               	movlw	0
  3379  00549A  BFA5               	btfsc	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),7,b
  3380  00549C  0EFF               	movlw	-1
  3381  00549E  6FA6               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  3382  0054A0  6FA7               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  3383  0054A2  D005               	goto	l272
  3384  0054A4                     l271:
  3385                           ;rgl.c: 2581: else m=0;
  3386  0054A4  0100               	movlb	__Lparam shr (0+8)
  3387  0054A6  6BA4               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  3388  0054A8  6BA5               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  3389  0054AA  6BA6               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  3390  0054AC  6BA7               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  3391  0054AE                     l272:
  3392                           ;rgl.c: 2582: m=m/(signed long)(DtCW.MAD_CW-DtCW
      +                          .DAD_CW);
  3393  0054AE  C07C  FFE8         	movff	_DtCW+14,wreg
  3394  0054B2  C07B  F000         	movff	_DtCW+13,btemp
  3395  0054B6  5C00               	subwf	btemp,w,c
  3396  0054B8  6E04               	movwf	btemp+4,c
  3397  0054BA  6A05               	clrf	btemp+5,c
  3398  0054BC  A0D8               	btfss	status,0,c
  3399  0054BE  0605               	decf	btemp+5,f,c
  3400  0054C0  6A06               	clrf	btemp+6,c
  3401  0054C2  BE05               	btfsc	btemp+5,7,c
  3402  0054C4  0606               	decf	btemp+6,f,c
  3403  0054C6  5006               	movf	btemp+6,w,c
  3404  0054C8  6E07               	movwf	btemp+7,c
  3405  0054CA  0EA4               	movlw	low ?a_ModZgCW2
  3406  0054CC  6EE9               	movwf	fsr0l,c
  3407  0054CE  0E00               	movlw	high ?a_ModZgCW2
  3408  0054D0  6EEA               	movwf	fsr0h,c
  3409  0054D2  EC64  F007         	call	aldiv_f
  3410                           ;rgl.c: 2583: m=m*(signed long)(DtCW.AC_CW-DtCW.
      +                          DAD_CW);
  3411  0054D6  C07C  FFE8         	movff	_DtCW+14,wreg
  3412  0054DA  C07A  F000         	movff	_DtCW+12,btemp
  3413  0054DE  5C00               	subwf	btemp,w,c
  3414  0054E0  6E04               	movwf	btemp+4,c
  3415  0054E2  6A05               	clrf	btemp+5,c
  3416  0054E4  A0D8               	btfss	status,0,c
  3417  0054E6  0605               	decf	btemp+5,f,c
  3418  0054E8  6A06               	clrf	btemp+6,c
  3419  0054EA  BE05               	btfsc	btemp+5,7,c
  3420  0054EC  0606               	decf	btemp+6,f,c
  3421  0054EE  5006               	movf	btemp+6,w,c
  3422  0054F0  6E07               	movwf	btemp+7,c
  3423  0054F2  0EA4               	movlw	low ?a_ModZgCW2
  3424  0054F4  6EE9               	movwf	fsr0l,c
  3425  0054F6  0E00               	movlw	high ?a_ModZgCW2
  3426  0054F8  6EEA               	movwf	fsr0h,c
  3427  0054FA  EC6E  F007         	call	almul_f
  3428                           ;rgl.c: 2584: if(m<0) m=0;
  3429  0054FE  0100               	movlb	__Lparam shr (0+8)
  3430  005500  AFA7               	btfss	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),7,b
  3431  005502  D004               	goto	l273
  3432  005504  6BA4               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  3433  005506  6BA5               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  3434  005508  6BA6               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  3435  00550A  6BA7               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  3436  00550C                     l273:
  3437                           ;rgl.c: 2585: m=m/10+PWM.MINPWM;
  3438  00550C  0E0A               	movlw	10
  3439  00550E  6E04               	movwf	btemp+4,c
  3440  005510  6A05               	clrf	btemp+5,c
  3441  005512  6A06               	clrf	btemp+6,c
  3442  005514  6A07               	clrf	btemp+7,c
  3443  005516  C0A4  F000         	movff	?a_ModZgCW2,btemp
  3444  00551A  C0A5  F001         	movff	?a_ModZgCW2+1,btemp+1
  3445  00551E  C0A6  F002         	movff	?a_ModZgCW2+2,btemp+2
  3446  005522  C0A7  F003         	movff	?a_ModZgCW2+3,btemp+3
  3447  005526  EC3D  F006         	call	aldiv
  3448  00552A  C2F5  FFE8         	movff	_PWM+28,wreg
  3449  00552E  2400               	addwf	btemp,w,c
  3450  005530  0100               	movlb	__Lparam shr (0+8)
  3451  005532  6FA4               	movwf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  3452  005534  0E00               	movlw	0
  3453  005536  2001               	addwfc	btemp+1,w,c
  3454  005538  6FA5               	movwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  3455  00553A  0E00               	movlw	0
  3456  00553C  2002               	addwfc	btemp+2,w,c
  3457  00553E  6FA6               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  3458  005540  0E00               	movlw	0
  3459  005542  2003               	addwfc	btemp+3,w,c
  3460  005544  6FA7               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  3461                           ;rgl.c: 2586: if(m>0xff)
  3462  005546  51A7               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  3463  005548  0A80               	xorlw	128
  3464  00554A  0F80               	addlw	128
  3465  00554C  E108               	bnz	u2475
  3466  00554E  0E00               	movlw	0
  3467  005550  5DA6               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  3468  005552  E105               	bnz	u2475
  3469  005554  0E01               	movlw	1
  3470  005556  5DA5               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  3471  005558  E102               	bnz	u2475
  3472  00555A  0E00               	movlw	0
  3473  00555C  5DA4               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  3474  00555E                     u2475:
  3475                           ;rgl.c: 2587: {
  3476  00555E  0103               	movlb	_rgl shr (0+8)
  3477  005560  E304               	bnc	L42
  3478  005562  95D7               	bcf	_rgl& (0+255),2,b
  3479                           ;rgl.c: 2589: rgl.tmp_pwm=rgl.xmod;
  3480  005564  C3DF  F3E0         	movff	_rgl+8,_rgl+9
  3481                           ;rgl.c: 2590: return;
  3482  005568  0012               	return	
  3483                           ;rgl.c: 2591: }
  3484  00556A                     L42:
  3485  00556A  A5D7               	btfss	_rgl& (0+255),2,b
  3486  00556C  D01C               	goto	l275
  3487  00556E  C3DF  F000         	movff	_rgl+8,btemp
  3488  005572  6A01               	clrf	btemp+1,c
  3489  005574  6A02               	clrf	btemp+2,c
  3490  005576  6A03               	clrf	btemp+3,c
  3491  005578  0100               	movlb	__Lparam shr (0+8)
  3492  00557A  51A7               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  3493  00557C  0A80               	xorlw	128
  3494  00557E  6E04               	movwf	btemp+4,c
  3495  005580  5003               	movf	btemp+3,w,c
  3496  005582  0A80               	xorlw	128
  3497  005584  5C04               	subwf	btemp+4,w,c
  3498  005586  E108               	bnz	u2495
  3499  005588  5002               	movf	btemp+2,w,c
  3500  00558A  5DA6               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  3501  00558C  E105               	bnz	u2495
  3502  00558E  5001               	movf	btemp+1,w,c
  3503  005590  5DA5               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  3504  005592  E102               	bnz	u2495
  3505  005594  5000               	movf	btemp,w,c
  3506  005596  5DA4               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  3507  005598                     u2495:
  3508  005598  E206               	bc	l275
  3509                           ;rgl.c: 2593: rgl.srp=(rgl.xmod-m);
  3510  00559A  0100               	movlb	__Lparam shr (0+8)
  3511  00559C  51A4               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  3512  00559E  0103               	movlb	(_rgl+8) shr (0+8)
  3513  0055A0  5DDF               	subwf	(_rgl+8)& (0+255),w,b
  3514  0055A2  CFE8 F3DE          	movff	wreg,_rgl+7
  3515  0055A6                     l275:
  3516                           ;rgl.c: 2595: m+=rgl.srp;
  3517  0055A6  C3DE  FFE8         	movff	_rgl+7,wreg
  3518  0055AA  0100               	movlb	__Lparam shr (0+8)
  3519  0055AC  27A4               	addwf	?a_ModZgCW2^(__Lparam& (0+65280)),f,b
  3520  0055AE  0E01               	movlw	1
  3521  0055B0  B0D8               	btfsc	status,0,c
  3522  0055B2  27A5               	addwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),f,b
  3523  0055B4  B0D8               	btfsc	status,0,c
  3524  0055B6  27A6               	addwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),f,b
  3525  0055B8  B0D8               	btfsc	status,0,c
  3526  0055BA  27A7               	addwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),f,b
  3527                           ;rgl.c: 2596: if(m>rgl.xmod) p=rgl.xmod;
  3528  0055BC  C3DF  F000         	movff	_rgl+8,btemp
  3529  0055C0  6A01               	clrf	btemp+1,c
  3530  0055C2  6A02               	clrf	btemp+2,c
  3531  0055C4  6A03               	clrf	btemp+3,c
  3532  0055C6  5003               	movf	btemp+3,w,c
  3533  0055C8  0A80               	xorlw	128
  3534  0055CA  6E04               	movwf	btemp+4,c
  3535  0055CC  51A7               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  3536  0055CE  0A80               	xorlw	128
  3537  0055D0  5C04               	subwf	btemp+4,w,c
  3538  0055D2  E108               	bnz	u2515
  3539  0055D4  51A6               	movf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  3540  0055D6  5C02               	subwf	btemp+2,w,c
  3541  0055D8  E105               	bnz	u2515
  3542  0055DA  51A5               	movf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  3543  0055DC  5C01               	subwf	btemp+1,w,c
  3544  0055DE  E102               	bnz	u2515
  3545  0055E0  51A4               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  3546  0055E2  5C00               	subwf	btemp,w,c
  3547  0055E4                     u2515:
  3548  0055E4  E203               	bc	l276
  3549  0055E6  C3DF  FFD9         	movff	_rgl+8,fsr2l
  3550  0055EA  D003               	goto	l277
  3551  0055EC                     l276:
  3552                           ;rgl.c: 2597: else p=(unsigned char)m;
  3553  0055EC  0100               	movlb	__Lparam shr (0+8)
  3554  0055EE  51A4               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  3555  0055F0  6ED9               	movwf	fsr2l,c
  3556  0055F2                     l277:
  3557                           ;rgl.c: 2598: rgl.fz=0;
  3558  0055F2  0103               	movlb	_rgl shr (0+8)
  3559  0055F4  95D7               	bcf	_rgl& (0+255),2,b
  3560                           ;rgl.c: 2599: rgl.tmp_pwm=p;
  3561  0055F6  CFD9 F3E0          	movff	fsr2l,_rgl+9
  3562                           ;rgl.c: 2600: }
  3563  0055FA  0012               	return	
  3564  0055FC                     __end_of_ModZgCW2:
  3565                           ;rgl.c: 2610: void ModDkCW2(void)
  3566                           ;rgl.c: 2611: {
  3567  0055FC                     _ModDkCW2:
  3568  000000                     
  3569                           ;rgl.c: 2612: signed long m;
  3570  0055FC  0103               	movlb	_rgl shr (0+8)
  3571  0055FE  A5D7               	btfss	_rgl& (0+255),2,b
  3572  005600  0012               	return	
  3573                           ;rgl.c: 2617: {
  3574                           ;rgl.c: 2620: }
  3575  005602  C07C  FFE8         	movff	_DtCW+14,wreg
  3576  005606  0100               	movlb	(_DtCW+12) shr (0+8)
  3577  005608  5D7A               	subwf	(_DtCW+12)& (0+255),w,b
  3578  00560A  6EE1               	movwf	fsr1l,c
  3579                           ;rgl.c: 2623: if(!DtKNF.rfan)
  3580  00560C  EE02  F0D0         	lfsr	0,_DtKNF+34
  3581  005610  50EF               	movf	indf0,w,c
  3582  005612  E106               	bnz	l280
  3583                           ;rgl.c: 2624: {
  3584  005614  0E03               	movlw	3
  3585  005616  6ED9               	movwf	fsr2l,c
  3586                           ;rgl.c: 2626: if(ada<0) k=2;
  3587  005618  AEE1               	btfss	fsr1l,7,c
  3588  00561A  D008               	goto	l282
  3589  00561C  0E02               	movlw	2
  3590  00561E  D005               	goto	L26
  3591                           ;rgl.c: 2627: }
  3592  005620                     l280:
  3593                           ;rgl.c: 2628: else
  3594  005620  0E06               	movlw	6
  3595  005622  6ED9               	movwf	fsr2l,c
  3596                           ;rgl.c: 2631: if(ada<0) k=5;
  3597  005624  AEE1               	btfss	fsr1l,7,c
  3598  005626  D002               	goto	l282
  3599  005628  0E05               	movlw	5
  3600  00562A                     L26:
  3601  00562A  6ED9               	movwf	fsr2l,c
  3602  00562C                     l282:
  3603                           ;rgl.c: 2632: }
  3604  00562C  6AE9               	clrf	fsr0l,c
  3605                           ;rgl.c: 2638: m=rgl.srp+(k-pop)*(signed long)ada
      +                          ;
  3606  00562E  50E1               	movf	fsr1l,w,c
  3607  005630  6E04               	movwf	btemp+4,c
  3608  005632  0E00               	movlw	0
  3609  005634  BE04               	btfsc	btemp+4,7,c
  3610  005636  0EFF               	movlw	255
  3611  005638  6E05               	movwf	btemp+5,c
  3612  00563A  6E06               	movwf	btemp+6,c
  3613  00563C  6E07               	movwf	btemp+7,c
  3614  00563E  CFD9 F000          	movff	fsr2l,btemp
  3615  005642  6A01               	clrf	btemp+1,c
  3616  005644  6A02               	clrf	btemp+2,c
  3617  005646  6A03               	clrf	btemp+3,c
  3618  005648  ECB2  F004         	call	almul
  3619  00564C  C3DE  FFE8         	movff	_rgl+7,wreg
  3620  005650  2400               	addwf	btemp,w,c
  3621  005652  0100               	movlb	__Lparam shr (0+8)
  3622  005654  6FA4               	movwf	?a_ModDkCW2^(__Lparam& (0+65280)),b
  3623  005656  0E00               	movlw	0
  3624  005658  2001               	addwfc	btemp+1,w,c
  3625  00565A  6FA5               	movwf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),b
  3626  00565C  0E00               	movlw	0
  3627  00565E  2002               	addwfc	btemp+2,w,c
  3628  005660  6FA6               	movwf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),b
  3629  005662  0E00               	movlw	0
  3630  005664  2003               	addwfc	btemp+3,w,c
  3631  005666  6FA7               	movwf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),b
  3632                           ;rgl.c: 2639: if(m>rgl.xmod) p=rgl.xmod;
  3633  005668  C3DF  F000         	movff	_rgl+8,btemp
  3634  00566C  6A01               	clrf	btemp+1,c
  3635  00566E  6A02               	clrf	btemp+2,c
  3636  005670  6A03               	clrf	btemp+3,c
  3637  005672  5003               	movf	btemp+3,w,c
  3638  005674  0A80               	xorlw	128
  3639  005676  6E04               	movwf	btemp+4,c
  3640  005678  51A7               	movf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),w
  3641  00567A  0A80               	xorlw	128
  3642  00567C  5C04               	subwf	btemp+4,w,c
  3643  00567E  E108               	bnz	u2565
  3644  005680  51A6               	movf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),w
  3645  005682  5C02               	subwf	btemp+2,w,c
  3646  005684  E105               	bnz	u2565
  3647  005686  51A5               	movf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),w
  3648  005688  5C01               	subwf	btemp+1,w,c
  3649  00568A  E102               	bnz	u2565
  3650  00568C  51A4               	movf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  3651  00568E  5C00               	subwf	btemp,w,c
  3652  005690                     u2565:
  3653  005690  E203               	bc	l284
  3654  005692  C3DF  FFD9         	movff	_rgl+8,fsr2l
  3655  005696  D01C               	goto	l285
  3656  005698                     l284:
  3657                           ;rgl.c: 2640: else
  3658  005698  C2F5  F000         	movff	_PWM+28,btemp
  3659  00569C  6A01               	clrf	btemp+1,c
  3660  00569E  6A02               	clrf	btemp+2,c
  3661  0056A0  6A03               	clrf	btemp+3,c
  3662  0056A2  0100               	movlb	__Lparam shr (0+8)
  3663  0056A4  51A7               	movf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),w
  3664  0056A6  0A80               	xorlw	128
  3665  0056A8  6E04               	movwf	btemp+4,c
  3666  0056AA  5003               	movf	btemp+3,w,c
  3667  0056AC  0A80               	xorlw	128
  3668  0056AE  5C04               	subwf	btemp+4,w,c
  3669  0056B0  E108               	bnz	u2575
  3670  0056B2  5002               	movf	btemp+2,w,c
  3671  0056B4  5DA6               	subwf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),w
  3672  0056B6  E105               	bnz	u2575
  3673  0056B8  5001               	movf	btemp+1,w,c
  3674  0056BA  5DA5               	subwf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),w
  3675  0056BC  E102               	bnz	u2575
  3676  0056BE  5000               	movf	btemp,w,c
  3677  0056C0  5DA4               	subwf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  3678  0056C2                     u2575:
  3679  0056C2  E203               	bc	l286
  3680  0056C4  C2F5  FFD9         	movff	_PWM+28,fsr2l
  3681  0056C8  D003               	goto	l285
  3682  0056CA                     l286:
  3683                           ;rgl.c: 2642: else p=(unsigned char)m;
  3684  0056CA  0100               	movlb	__Lparam shr (0+8)
  3685  0056CC  51A4               	movf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  3686  0056CE  6ED9               	movwf	fsr2l,c
  3687  0056D0                     l285:
  3688                           ;rgl.c: 2643: rgl.tmp_pwm=p;
  3689  0056D0  CFD9 F3E0          	movff	fsr2l,_rgl+9
  3690                           ;rgl.c: 2644: }
  3691  0056D4  0012               	return	
  3692  0056D6                     __end_of_ModDkCW2:
  3693                           ;rgl.c: 2650: void ModPruCW2(void)
  3694                           ;rgl.c: 2651: {
  3695  0056D6                     _ModPruCW2:
  3696  000000                     
  3697                           ;rgl.c: 2652: static unsigned char l,m,o,p,q,r,s
      +                          ;
  3698  0056D6  0103               	movlb	_rgl shr (0+8)
  3699  0056D8  B5D7               	btfsc	_rgl& (0+255),2,b
  3700  0056DA  D0DC               	goto	l289
  3701                           ;rgl.c: 2657: {
  3702  0056DC  010E               	movlb	F1966 shr (0+8)
  3703  0056DE  6BBF               	clrf	F1966& (0+255),b
  3704                           ;rgl.c: 2659: m=0;
  3705  0056E0  010E               	movlb	F1967 shr (0+8)
  3706  0056E2  6BC0               	clrf	F1967& (0+255),b
  3707                           ;rgl.c: 2660: o=0;
  3708  0056E4  010E               	movlb	F1968 shr (0+8)
  3709  0056E6  6BC1               	clrf	F1968& (0+255),b
  3710                           ;rgl.c: 2661: p=0;
  3711  0056E8  010E               	movlb	F1969 shr (0+8)
  3712  0056EA  6BC2               	clrf	F1969& (0+255),b
  3713                           ;rgl.c: 2662: if(q<255) q++;
  3714  0056EC  CEC3  F000         	movff	F1970,btemp
  3715  0056F0  2800               	incf	btemp,w,c
  3716  0056F2  E002               	bz	l290
  3717  0056F4  010E               	movlb	F1970 shr (0+8)
  3718  0056F6  2BC3               	incf	F1970& (0+255),f,b
  3719  0056F8                     l290:
  3720                           ;rgl.c: 2663: if(s<255) s++;
  3721  0056F8  CEC5  F000         	movff	F1972,btemp
  3722  0056FC  2800               	incf	btemp,w,c
  3723  0056FE  E002               	bz	l291
  3724  005700  010E               	movlb	F1972 shr (0+8)
  3725  005702  2BC5               	incf	F1972& (0+255),f,b
  3726  005704                     l291:
  3727                           ;rgl.c: 2664: if(DtCW._newPCW) s=0;
  3728  005704  0100               	movlb	(_DtCW+1) shr (0+8)
  3729  005706  A16F               	btfss	(_DtCW+1)& (0+255),0,b
  3730  005708  D002               	goto	l292
  3731  00570A  010E               	movlb	F1972 shr (0+8)
  3732  00570C  6BC5               	clrf	F1972& (0+255),b
  3733  00570E                     l292:
  3734                           ;rgl.c: 2665: if(Tnizsza(0))
  3735  00570E  0E00               	movlw	0
  3736  005710  EC35  F033         	call	_Tnizsza
  3737  005714  A0D8               	btfss	status,0,c
  3738  005716  0012               	return	
  3739                           ;rgl.c: 2666: {
  3740  005718  0E0A               	movlw	10
  3741  00571A  EC35  F033         	call	_Tnizsza
  3742  00571E  B0D8               	btfsc	status,0,c
  3743  005720  0012               	return	
  3744                           ;rgl.c: 2668: {
  3745  005722  0100               	movlb	__Lparam shr (0+8)
  3746  005724  6BA4               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  3747                           ;rgl.c: 2670: if(!DtKNF.rfan)
  3748  005726  EE02  F0D0         	lfsr	0,_DtKNF+34
  3749  00572A  50EF               	movf	indf0,w,c
  3750                           ;rgl.c: 2671: {
  3751  00572C  0E01               	movlw	1
  3752  00572E  E13D               	bnz	L43
  3753  005730  EC06  F033         	call	_Trosnie
  3754  005734  E204               	bc	u2670
  3755  005736  0E01               	movlw	1
  3756  005738  EC64  F033         	call	_TFrosnie
  3757  00573C  E314               	bnc	l296
  3758  00573E                     u2670:
  3759                           ;rgl.c: 2673: {
  3760  00573E  0E00               	movlw	0
  3761  005740  010E               	movlb	F1972 shr (0+8)
  3762  005742  65C5               	cpfsgt	F1972& (0+255),b
  3763  005744  D06D               	goto	l308
  3764                           ;rgl.c: 2675: {
  3765  005746  6BC5               	clrf	F1972& (0+255),b
  3766                           ;rgl.c: 2677: q=0;
  3767  005748  010E               	movlb	F1970 shr (0+8)
  3768  00574A  6BC3               	clrf	F1970& (0+255),b
  3769                           ;rgl.c: 2678: k=5;
  3770  00574C  0E05               	movlw	5
  3771  00574E  0100               	movlb	__Lparam shr (0+8)
  3772  005750  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  3773                           ;rgl.c: 2679: if(Trosnie(2)||TFrosnie(2)) k=4;
  3774  005752  0E02               	movlw	2
  3775  005754  EC06  F033         	call	_Trosnie
  3776  005758  E204               	bc	u2710
  3777  00575A  0E02               	movlw	2
  3778  00575C  EC64  F033         	call	_TFrosnie
  3779  005760  E35F               	bnc	l308
  3780  005762                     u2710:
  3781  005762  0E04               	movlw	4
  3782  005764  D00D               	goto	L27
  3783                           ;rgl.c: 2680: }
  3784  005766                     l296:
  3785                           ;rgl.c: 2682: else
  3786  005766  0E00               	movlw	0
  3787  005768  EC71  F033         	call	_TFmaleje
  3788  00576C  E30C               	bnc	l300
  3789                           ;rgl.c: 2684: {
  3790  00576E  0E00               	movlw	0
  3791  005770  010E               	movlb	F1970 shr (0+8)
  3792  005772  65C3               	cpfsgt	F1970& (0+255),b
  3793  005774  D055               	goto	l308
  3794                           ;rgl.c: 2686: {
  3795  005776  010E               	movlb	F1972 shr (0+8)
  3796  005778  6BC5               	clrf	F1972& (0+255),b
  3797                           ;rgl.c: 2688: q=0;
  3798  00577A  010E               	movlb	F1970 shr (0+8)
  3799  00577C  6BC3               	clrf	F1970& (0+255),b
  3800                           ;rgl.c: 2689: k=3;
  3801  00577E  0E03               	movlw	3
  3802  005780                     L27:
  3803  005780  0100               	movlb	__Lparam shr (0+8)
  3804  005782  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  3805                           ;rgl.c: 2690: }
  3806  005784  D04D               	goto	l308
  3807  005786                     l300:
  3808                           ;rgl.c: 2692: else
  3809  005786  EC8C  F033         	call	_TFstoi	;wreg free
  3810  00578A  E34A               	bnc	l308
  3811                           ;rgl.c: 2694: {
  3812  00578C  0E00               	movlw	0
  3813  00578E  010E               	movlb	F1971 shr (0+8)
  3814  005790  65C4               	cpfsgt	F1971& (0+255),b
  3815  005792  D042               	goto	l317
  3816                           ;rgl.c: 2696: {
  3817  005794  EC06  F033         	call	_Trosnie
  3818  005798  E202               	bc	l305
  3819  00579A  0E0F               	movlw	15
  3820  00579C  D001               	goto	L5
  3821  00579E                     l305:
  3822                           ;rgl.c: 2698: else k=5;
  3823  00579E  0E05               	movlw	5
  3824  0057A0                     L5:
  3825  0057A0  0100               	movlb	__Lparam shr (0+8)
  3826  0057A2  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  3827                           ;rgl.c: 2699: r=0;
  3828  0057A4  010E               	movlb	F1971 shr (0+8)
  3829  0057A6  6BC4               	clrf	F1971& (0+255),b
  3830                           ;rgl.c: 2700: }
  3831  0057A8  D03B               	goto	l308
  3832                           ;rgl.c: 2701: else
  3833                           ;rgl.c: 2704: r++;
  3834                           ;rgl.c: 2705: }
  3835                           ;rgl.c: 2708: else
  3836  0057AA                     L43:
  3837  0057AA  EC06  F033         	call	_Trosnie
  3838  0057AE  E204               	bc	u2790
  3839  0057B0  0E01               	movlw	1
  3840  0057B2  EC64  F033         	call	_TFrosnie
  3841  0057B6  E314               	bnc	l309
  3842  0057B8                     u2790:
  3843                           ;rgl.c: 2711: {
  3844  0057B8  0E00               	movlw	0
  3845  0057BA  010E               	movlb	F1972 shr (0+8)
  3846  0057BC  65C5               	cpfsgt	F1972& (0+255),b
  3847  0057BE  D030               	goto	l308
  3848                           ;rgl.c: 2713: {
  3849  0057C0  6BC5               	clrf	F1972& (0+255),b
  3850                           ;rgl.c: 2715: q=0;
  3851  0057C2  010E               	movlb	F1970 shr (0+8)
  3852  0057C4  6BC3               	clrf	F1970& (0+255),b
  3853                           ;rgl.c: 2716: k=10;
  3854  0057C6  0E0A               	movlw	10
  3855  0057C8  0100               	movlb	__Lparam shr (0+8)
  3856  0057CA  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  3857                           ;rgl.c: 2717: if(Trosnie(2)||TFrosnie(2)) k=8;
  3858  0057CC  0E02               	movlw	2
  3859  0057CE  EC06  F033         	call	_Trosnie
  3860  0057D2  E204               	bc	u2830
  3861  0057D4  0E02               	movlw	2
  3862  0057D6  EC64  F033         	call	_TFrosnie
  3863  0057DA  E322               	bnc	l308
  3864  0057DC                     u2830:
  3865  0057DC  0E08               	movlw	8
  3866  0057DE  D7D0               	goto	L27
  3867                           ;rgl.c: 2718: }
  3868  0057E0                     l309:
  3869                           ;rgl.c: 2720: else
  3870  0057E0  0E00               	movlw	0
  3871  0057E2  EC71  F033         	call	_TFmaleje
  3872  0057E6  E30A               	bnc	l313
  3873                           ;rgl.c: 2722: {
  3874  0057E8  0E00               	movlw	0
  3875  0057EA  010E               	movlb	F1970 shr (0+8)
  3876  0057EC  65C3               	cpfsgt	F1970& (0+255),b
  3877  0057EE  D018               	goto	l308
  3878                           ;rgl.c: 2724: {
  3879  0057F0  010E               	movlb	F1972 shr (0+8)
  3880  0057F2  6BC5               	clrf	F1972& (0+255),b
  3881                           ;rgl.c: 2726: q=0;
  3882  0057F4  010E               	movlb	F1970 shr (0+8)
  3883  0057F6  6BC3               	clrf	F1970& (0+255),b
  3884                           ;rgl.c: 2727: k=6;
  3885  0057F8  0E06               	movlw	6
  3886  0057FA  D7C2               	goto	L27
  3887                           ;rgl.c: 2728: }
  3888  0057FC                     l313:
  3889                           ;rgl.c: 2730: else
  3890  0057FC  EC8C  F033         	call	_TFstoi	;wreg free
  3891  005800  E30F               	bnc	l308
  3892                           ;rgl.c: 2732: {
  3893  005802  0E00               	movlw	0
  3894  005804  010E               	movlb	F1971 shr (0+8)
  3895  005806  65C4               	cpfsgt	F1971& (0+255),b
  3896  005808  D007               	goto	l317
  3897                           ;rgl.c: 2734: {
  3898  00580A  EC06  F033         	call	_Trosnie
  3899  00580E  E202               	bc	l318
  3900  005810  0E1E               	movlw	30
  3901  005812  D7C6               	goto	L5
  3902  005814                     l318:
  3903                           ;rgl.c: 2736: else k=10;
  3904  005814  0E0A               	movlw	10
  3905  005816  D7C4               	goto	L5
  3906                           ;rgl.c: 2737: r=0;
  3907                           ;rgl.c: 2738: }
  3908  005818                     l317:
  3909                           ;rgl.c: 2739: else
  3910  005818  0100               	movlb	__Lparam shr (0+8)
  3911  00581A  6BA4               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  3912                           ;rgl.c: 2742: r++;
  3913  00581C  010E               	movlb	F1971 shr (0+8)
  3914  00581E  2BC4               	incf	F1971& (0+255),f,b
  3915  005820                     l308:
  3916                           ;rgl.c: 2743: }
  3917  005820  0103               	movlb	(_rgl+6) shr (0+8)
  3918  005822  6BDD               	clrf	(_rgl+6)& (0+255),b
  3919                           ;rgl.c: 2749: if(PWM.BufPWM<rgl.xmod) tmp=rgl.xm
      +                          od-PWM.BufPWM;
  3920  005824  C3DF  FFE8         	movff	_rgl+8,wreg
  3921  005828  0102               	movlb	(_PWM+1) shr (0+8)
  3922  00582A  61DA               	cpfslt	(_PWM+1)& (0+255),b
  3923  00582C  D006               	goto	l321
  3924  00582E  C2DA  FFE8         	movff	_PWM+1,wreg
  3925  005832  0103               	movlb	(_rgl+8) shr (0+8)
  3926  005834  5DDF               	subwf	(_rgl+8)& (0+255),w,b
  3927  005836  6ED9               	movwf	fsr2l,c
  3928  005838  D001               	goto	l322
  3929  00583A                     l321:
  3930                           ;rgl.c: 2750: else tmp=0;
  3931  00583A  6AD9               	clrf	fsr2l,c
  3932  00583C                     l322:
  3933                           ;rgl.c: 2751: if(tmp&&k>tmp) k=tmp;
  3934  00583C  50D9               	movf	fsr2l,w,c
  3935  00583E  E00B               	bz	l323
  3936  005840  50D9               	movf	fsr2l,w,c
  3937  005842  0100               	movlb	__Lparam shr (0+8)
  3938  005844  94D8               	bcf	status,2,c
  3939  005846  90D8               	bcf	status,0,c
  3940  005848  AFA4               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  3941  00584A  5DA4               	subwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  3942  00584C  B4D8               	btfsc	status,2,c
  3943  00584E  90D8               	bcf	status,0,c
  3944  005850  E302               	bnc	l323
  3945  005852  50D9               	movf	fsr2l,w,c
  3946  005854  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  3947  005856                     l323:
  3948                           ;rgl.c: 2752: if(rgl.srp+k>PWM.MAXPWM) rgl.srp=P
      +                          WM.MAXPWM;
  3949  005856  C3DE  FFE8         	movff	_rgl+7,wreg
  3950  00585A  0100               	movlb	__Lparam shr (0+8)
  3951  00585C  25A4               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  3952  00585E  6E02               	movwf	btemp+2,c
  3953  005860  6A03               	clrf	btemp+3,c
  3954  005862  B0D8               	btfsc	status,0,c
  3955  005864  2A03               	incf	btemp+3,f,c
  3956  005866  BFA4               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  3957  005868  0603               	decf	btemp+3,f,c
  3958  00586A  C2F6  F000         	movff	_PWM+29,btemp
  3959  00586E  6A01               	clrf	btemp+1,c
  3960  005870  5001               	movf	btemp+1,w,c
  3961  005872  0A80               	xorlw	128
  3962  005874  6E04               	movwf	btemp+4,c
  3963  005876  5003               	movf	btemp+3,w,c
  3964  005878  0A80               	xorlw	128
  3965  00587A  5C04               	subwf	btemp+4,w,c
  3966  00587C  E102               	bnz	u2935
  3967  00587E  5002               	movf	btemp+2,w,c
  3968  005880  5C00               	subwf	btemp,w,c
  3969  005882                     u2935:
  3970  005882  E203               	bc	l324
  3971  005884  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  3972  005888  0012               	return	
  3973  00588A                     l324:
  3974                           ;rgl.c: 2753: else rgl.srp+=k;
  3975  00588A  0100               	movlb	__Lparam shr (0+8)
  3976  00588C  51A4               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  3977  00588E  0103               	movlb	(_rgl+7) shr (0+8)
  3978  005890  27DE               	addwf	(_rgl+7)& (0+255),f,b
  3979                           ;rgl.c: 2754: return;
  3980  005892  0012               	return	
  3981                           ;rgl.c: 2756: else return;
  3982                           ;rgl.c: 2758: else return;
  3983  005894                     l289:
  3984                           ;rgl.c: 2760: else
  3985  005894  010E               	movlb	F1970 shr (0+8)
  3986  005896  6BC3               	clrf	F1970& (0+255),b
  3987                           ;rgl.c: 2763: r=0;
  3988  005898  010E               	movlb	F1971 shr (0+8)
  3989  00589A  6BC4               	clrf	F1971& (0+255),b
  3990                           ;rgl.c: 2764: s=0;
  3991  00589C  010E               	movlb	F1972 shr (0+8)
  3992  00589E  6BC5               	clrf	F1972& (0+255),b
  3993                           ;rgl.c: 2765: if(m<255) m++;
  3994  0058A0  CEC0  F000         	movff	F1967,btemp
  3995  0058A4  2800               	incf	btemp,w,c
  3996  0058A6  E002               	bz	l329
  3997  0058A8  010E               	movlb	F1967 shr (0+8)
  3998  0058AA  2BC0               	incf	F1967& (0+255),f,b
  3999  0058AC                     l329:
  4000                           ;rgl.c: 2766: if(p<255) p++;
  4001  0058AC  CEC2  F000         	movff	F1969,btemp
  4002  0058B0  2800               	incf	btemp,w,c
  4003  0058B2  E002               	bz	l330
  4004  0058B4  010E               	movlb	F1969 shr (0+8)
  4005  0058B6  2BC2               	incf	F1969& (0+255),f,b
  4006  0058B8                     l330:
  4007                           ;rgl.c: 2767: if(o<255) o++;
  4008  0058B8  CEC1  F000         	movff	F1968,btemp
  4009  0058BC  2800               	incf	btemp,w,c
  4010  0058BE  E002               	bz	l331
  4011  0058C0  010E               	movlb	F1968 shr (0+8)
  4012  0058C2  2BC1               	incf	F1968& (0+255),f,b
  4013  0058C4                     l331:
  4014                           ;rgl.c: 2769: if(DtCW.DAD_CW>DtCW.AC_CW)
  4015  0058C4  C07C  FFE8         	movff	_DtCW+14,wreg
  4016  0058C8  0100               	movlb	(_DtCW+12) shr (0+8)
  4017  0058CA  617A               	cpfslt	(_DtCW+12)& (0+255),b
  4018  0058CC  D07B               	goto	l332
  4019                           ;rgl.c: 2770: {
  4020  0058CE  0100               	movlb	__Lparam shr (0+8)
  4021  0058D0  6BA4               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4022                           ;rgl.c: 2772: if(TFmaleje(0)&&!Twyzsza(0))
  4023  0058D2  0E00               	movlw	0
  4024  0058D4  EC71  F033         	call	_TFmaleje
  4025  0058D8  0E00               	movlw	0
  4026  0058DA  E310               	bnc	L44
  4027  0058DC  EC42  F033         	call	_Twyzsza
  4028  0058E0  E20C               	bc	l333
  4029                           ;rgl.c: 2773: {
  4030  0058E2  0E01               	movlw	1
  4031  0058E4  010E               	movlb	F1969 shr (0+8)
  4032  0058E6  65C2               	cpfsgt	F1969& (0+255),b
  4033  0058E8  D03F               	goto	l335
  4034                           ;rgl.c: 2775: {
  4035  0058EA  6BC2               	clrf	F1969& (0+255),b
  4036                           ;rgl.c: 2777: o=0;
  4037  0058EC  010E               	movlb	F1968 shr (0+8)
  4038  0058EE  6BC1               	clrf	F1968& (0+255),b
  4039                           ;rgl.c: 2778: m=0;
  4040  0058F0  010E               	movlb	F1967 shr (0+8)
  4041  0058F2  6BC0               	clrf	F1967& (0+255),b
  4042                           ;rgl.c: 2779: k=-1;
  4043  0058F4  0100               	movlb	__Lparam shr (0+8)
  4044  0058F6  69A4               	setf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4045                           ;rgl.c: 2780: }
  4046  0058F8  D037               	goto	l335
  4047  0058FA                     l333:
  4048                           ;rgl.c: 2782: else
  4049  0058FA  0E00               	movlw	0
  4050  0058FC                     L44:
  4051  0058FC  EC64  F033         	call	_TFrosnie
  4052  005900  E308               	bnc	l336
  4053                           ;rgl.c: 2784: {
  4054  005902  0E01               	movlw	1
  4055  005904  010E               	movlb	F1968 shr (0+8)
  4056  005906  65C1               	cpfsgt	F1968& (0+255),b
  4057  005908  D02F               	goto	l335
  4058                           ;rgl.c: 2786: {
  4059  00590A  6BC1               	clrf	F1968& (0+255),b
  4060                           ;rgl.c: 2788: p=0;
  4061  00590C  010E               	movlb	F1969 shr (0+8)
  4062  00590E  6BC2               	clrf	F1969& (0+255),b
  4063  005910  D00C               	goto	L8
  4064                           ;rgl.c: 2789: m=0;
  4065                           ;rgl.c: 2790: k=1;
  4066                           ;rgl.c: 2791: }
  4067  005912                     l336:
  4068                           ;rgl.c: 2793: else
  4069  005912  0E00               	movlw	0
  4070  005914  EC06  F033         	call	_Trosnie
  4071  005918  E30E               	bnc	l339
  4072                           ;rgl.c: 2795: {
  4073  00591A  0E01               	movlw	1
  4074  00591C  010E               	movlb	F1967 shr (0+8)
  4075  00591E  65C0               	cpfsgt	F1967& (0+255),b
  4076  005920  D023               	goto	l335
  4077                           ;rgl.c: 2797: {
  4078  005922  010E               	movlb	F1969 shr (0+8)
  4079  005924  6BC2               	clrf	F1969& (0+255),b
  4080                           ;rgl.c: 2799: o=0;
  4081  005926  010E               	movlb	F1968 shr (0+8)
  4082  005928  6BC1               	clrf	F1968& (0+255),b
  4083  00592A                     L8:
  4084                           ;rgl.c: 2800: m=0;
  4085  00592A  010E               	movlb	F1967 shr (0+8)
  4086  00592C  6BC0               	clrf	F1967& (0+255),b
  4087                           ;rgl.c: 2801: k=1;
  4088  00592E  0E01               	movlw	1
  4089  005930  0100               	movlb	__Lparam shr (0+8)
  4090  005932  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4091                           ;rgl.c: 2802: }
  4092  005934  D019               	goto	l335
  4093  005936                     l339:
  4094                           ;rgl.c: 2804: else
  4095  005936  0E02               	movlw	2
  4096  005938  EC42  F033         	call	_Twyzsza
  4097  00593C  E313               	bnc	l342
  4098                           ;rgl.c: 2806: {
  4099  00593E  EC2E  F033         	call	_Tstoi	;wreg free
  4100  005942  E312               	bnc	l335
  4101  005944  EC8C  F033         	call	_TFstoi	;wreg free
  4102  005948  E30F               	bnc	l335
  4103                           ;rgl.c: 2808: {
  4104  00594A  0E01               	movlw	1
  4105  00594C  010E               	movlb	F1966 shr (0+8)
  4106  00594E  65BF               	cpfsgt	F1966& (0+255),b
  4107  005950  D004               	goto	l344
  4108                           ;rgl.c: 2810: {
  4109  005952  0E02               	movlw	2
  4110  005954  0100               	movlb	__Lparam shr (0+8)
  4111  005956  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4112  005958  D005               	goto	l342
  4113                           ;rgl.c: 2812: l=0;
  4114                           ;rgl.c: 2813: }
  4115  00595A                     l344:
  4116                           ;rgl.c: 2814: else
  4117  00595A  0100               	movlb	__Lparam shr (0+8)
  4118  00595C  6BA4               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4119                           ;rgl.c: 2817: l++;
  4120  00595E  010E               	movlb	F1966 shr (0+8)
  4121  005960  2BBF               	incf	F1966& (0+255),f,b
  4122                           ;rgl.c: 2818: }
  4123  005962  D002               	goto	l335
  4124  005964                     l342:
  4125  005964  010E               	movlb	F1966 shr (0+8)
  4126  005966  6BBF               	clrf	F1966& (0+255),b
  4127  005968                     l335:
  4128                           ;rgl.c: 2821: if(rgl.srp-k<PWM.MINPWM) rgl.srp=P
      +                          WM.MINPWM;
  4129  005968  C2F5  F000         	movff	_PWM+28,btemp
  4130  00596C  6A01               	clrf	btemp+1,c
  4131  00596E  C3DE  F002         	movff	_rgl+7,btemp+2
  4132  005972  0100               	movlb	__Lparam shr (0+8)
  4133  005974  51A4               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  4134  005976  5C02               	subwf	btemp+2,w,c
  4135  005978  6EF6               	movwf	tblptrl,c
  4136  00597A  6AF7               	clrf	tblptrh,c
  4137  00597C  B0D8               	btfsc	status,0,c
  4138  00597E  2AF7               	incf	tblptrh,f,c
  4139  005980  AFA4               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  4140  005982  06F7               	decf	tblptrh,f,c
  4141  005984  50F7               	movf	tblptrh,w,c
  4142  005986  0A80               	xorlw	128
  4143  005988  6E02               	movwf	btemp+2,c
  4144  00598A  5001               	movf	btemp+1,w,c
  4145  00598C  0A80               	xorlw	128
  4146  00598E  5C02               	subwf	btemp+2,w,c
  4147  005990  E102               	bnz	u3115
  4148  005992  5000               	movf	btemp,w,c
  4149  005994  5CF6               	subwf	tblptrl,w,c
  4150  005996                     u3115:
  4151  005996  E203               	bc	l347
  4152  005998  C2F5  F3DE         	movff	_PWM+28,_rgl+7
  4153  00599C  D004               	goto	l348
  4154  00599E                     l347:
  4155                           ;rgl.c: 2822: else rgl.srp-=k;
  4156  00599E  0100               	movlb	__Lparam shr (0+8)
  4157  0059A0  51A4               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  4158  0059A2  0103               	movlb	(_rgl+7) shr (0+8)
  4159  0059A4  5FDE               	subwf	(_rgl+7)& (0+255),f,b
  4160  0059A6                     l348:
  4161                           ;rgl.c: 2823: if(rgl.srp>PWM.MAXPWM) rgl.srp=PWM
      +                          .MAXPWM;
  4162  0059A6  C3DE  FFE8         	movff	_rgl+7,wreg
  4163  0059AA  0102               	movlb	(_PWM+29) shr (0+8)
  4164  0059AC  61F6               	cpfslt	(_PWM+29)& (0+255),b
  4165  0059AE  D002               	goto	l349
  4166  0059B0  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  4167  0059B4                     l349:
  4168                           ;rgl.c: 2824: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  4169  0059B4  C3DE  FFE8         	movff	_rgl+7,wreg
  4170  0059B8  0103               	movlb	(_rgl+8) shr (0+8)
  4171  0059BA  61DF               	cpfslt	(_rgl+8)& (0+255),b
  4172  0059BC  0012               	return	
  4173  0059BE  C3DE  F3DF         	movff	_rgl+7,_rgl+8
  4174                           ;rgl.c: 2825: return;
  4175  0059C2  0012               	return	
  4176  0059C4                     l332:
  4177                           ;rgl.c: 2828: else
  4178  0059C4  0100               	movlb	__Lparam shr (0+8)
  4179  0059C6  6BA4               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4180                           ;rgl.c: 2831: if(TFrosnie(0)&&!Tnizsza(0))
  4181  0059C8  0E00               	movlw	0
  4182  0059CA  EC64  F033         	call	_TFrosnie
  4183  0059CE  0E00               	movlw	0
  4184  0059D0  E312               	bnc	L45
  4185  0059D2  EC35  F033         	call	_Tnizsza
  4186  0059D6  E20E               	bc	l352
  4187                           ;rgl.c: 2832: {
  4188  0059D8  0E01               	movlw	1
  4189  0059DA  010E               	movlb	F1968 shr (0+8)
  4190  0059DC  65C1               	cpfsgt	F1968& (0+255),b
  4191  0059DE  D03F               	goto	l354
  4192                           ;rgl.c: 2834: {
  4193  0059E0  6BC1               	clrf	F1968& (0+255),b
  4194                           ;rgl.c: 2836: p=0;
  4195  0059E2  010E               	movlb	F1969 shr (0+8)
  4196  0059E4  6BC2               	clrf	F1969& (0+255),b
  4197                           ;rgl.c: 2837: l=0;
  4198  0059E6  010E               	movlb	F1966 shr (0+8)
  4199  0059E8  6BBF               	clrf	F1966& (0+255),b
  4200                           ;rgl.c: 2838: m=0;
  4201  0059EA  010E               	movlb	F1967 shr (0+8)
  4202  0059EC  6BC0               	clrf	F1967& (0+255),b
  4203                           ;rgl.c: 2839: k=-1;
  4204  0059EE  0100               	movlb	__Lparam shr (0+8)
  4205  0059F0  69A4               	setf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4206                           ;rgl.c: 2840: }
  4207  0059F2  D035               	goto	l354
  4208  0059F4                     l352:
  4209                           ;rgl.c: 2842: else
  4210  0059F4  0E00               	movlw	0
  4211  0059F6                     L45:
  4212  0059F6  EC71  F033         	call	_TFmaleje
  4213  0059FA  E305               	bnc	l355
  4214                           ;rgl.c: 2844: {
  4215  0059FC  0E01               	movlw	1
  4216  0059FE  010E               	movlb	F1969 shr (0+8)
  4217  005A00  65C2               	cpfsgt	F1969& (0+255),b
  4218  005A02  D02D               	goto	l354
  4219  005A04  D008               	goto	u3210
  4220                           ;rgl.c: 2846: {
  4221                           ;rgl.c: 2848: o=0;
  4222                           ;rgl.c: 2849: l=0;
  4223                           ;rgl.c: 2850: m=0;
  4224                           ;rgl.c: 2851: k=1;
  4225                           ;rgl.c: 2852: }
  4226  005A06                     l355:
  4227                           ;rgl.c: 2854: else
  4228  005A06  0E00               	movlw	0
  4229  005A08  EC13  F033         	call	_Tmaleje
  4230  005A0C  E310               	bnc	l358
  4231                           ;rgl.c: 2856: {
  4232  005A0E  0E01               	movlw	1
  4233  005A10  010E               	movlb	F1967 shr (0+8)
  4234  005A12  65C0               	cpfsgt	F1967& (0+255),b
  4235  005A14  D024               	goto	l354
  4236  005A16                     u3210:
  4237                           ;rgl.c: 2858: {
  4238  005A16  010E               	movlb	F1969 shr (0+8)
  4239  005A18  6BC2               	clrf	F1969& (0+255),b
  4240                           ;rgl.c: 2860: o=0;
  4241  005A1A  010E               	movlb	F1968 shr (0+8)
  4242  005A1C  6BC1               	clrf	F1968& (0+255),b
  4243                           ;rgl.c: 2861: l=0;
  4244  005A1E  010E               	movlb	F1966 shr (0+8)
  4245  005A20  6BBF               	clrf	F1966& (0+255),b
  4246                           ;rgl.c: 2862: m=0;
  4247  005A22  010E               	movlb	F1967 shr (0+8)
  4248  005A24  6BC0               	clrf	F1967& (0+255),b
  4249                           ;rgl.c: 2863: k=1;
  4250  005A26  0E01               	movlw	1
  4251  005A28  0100               	movlb	__Lparam shr (0+8)
  4252  005A2A  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4253                           ;rgl.c: 2864: }
  4254  005A2C  D018               	goto	l354
  4255  005A2E                     l358:
  4256                           ;rgl.c: 2866: else
  4257  005A2E  0E00               	movlw	0
  4258  005A30  EC35  F033         	call	_Tnizsza
  4259  005A34  E312               	bnc	l361
  4260                           ;rgl.c: 2868: {
  4261  005A36  EC2E  F033         	call	_Tstoi	;wreg free
  4262  005A3A  E311               	bnc	l354
  4263  005A3C  EC8C  F033         	call	_TFstoi	;wreg free
  4264  005A40  E30E               	bnc	l354
  4265                           ;rgl.c: 2870: {
  4266  005A42  0E02               	movlw	2
  4267  005A44  010E               	movlb	F1966 shr (0+8)
  4268  005A46  65BF               	cpfsgt	F1966& (0+255),b
  4269  005A48  D003               	goto	l363
  4270                           ;rgl.c: 2872: {
  4271  005A4A  0100               	movlb	__Lparam shr (0+8)
  4272  005A4C  6FA4               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4273  005A4E  D005               	goto	l361
  4274                           ;rgl.c: 2874: l=0;
  4275                           ;rgl.c: 2875: }
  4276  005A50                     l363:
  4277                           ;rgl.c: 2876: else
  4278  005A50  0100               	movlb	__Lparam shr (0+8)
  4279  005A52  6BA4               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  4280                           ;rgl.c: 2879: l++;
  4281  005A54  010E               	movlb	F1966 shr (0+8)
  4282  005A56  2BBF               	incf	F1966& (0+255),f,b
  4283                           ;rgl.c: 2880: }
  4284  005A58  D002               	goto	l354
  4285  005A5A                     l361:
  4286  005A5A  010E               	movlb	F1966 shr (0+8)
  4287  005A5C  6BBF               	clrf	F1966& (0+255),b
  4288  005A5E                     l354:
  4289                           ;rgl.c: 2883: if(rgl.srp+k>PWM.MAXPWM) rgl.srp=P
      +                          WM.MAXPWM;
  4290  005A5E  C3DE  FFE8         	movff	_rgl+7,wreg
  4291  005A62  0100               	movlb	__Lparam shr (0+8)
  4292  005A64  25A4               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  4293  005A66  6E02               	movwf	btemp+2,c
  4294  005A68  6A03               	clrf	btemp+3,c
  4295  005A6A  B0D8               	btfsc	status,0,c
  4296  005A6C  2A03               	incf	btemp+3,f,c
  4297  005A6E  BFA4               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  4298  005A70  0603               	decf	btemp+3,f,c
  4299  005A72  C2F6  F000         	movff	_PWM+29,btemp
  4300  005A76  6A01               	clrf	btemp+1,c
  4301  005A78  5001               	movf	btemp+1,w,c
  4302  005A7A  0A80               	xorlw	128
  4303  005A7C  6E04               	movwf	btemp+4,c
  4304  005A7E  5003               	movf	btemp+3,w,c
  4305  005A80  0A80               	xorlw	128
  4306  005A82  5C04               	subwf	btemp+4,w,c
  4307  005A84  E102               	bnz	u3275
  4308  005A86  5002               	movf	btemp+2,w,c
  4309  005A88  5C00               	subwf	btemp,w,c
  4310  005A8A                     u3275:
  4311  005A8A  E203               	bc	l366
  4312  005A8C  C2F6  F3DE         	movff	_PWM+29,_rgl+7
  4313  005A90  D004               	goto	l367
  4314  005A92                     l366:
  4315                           ;rgl.c: 2884: else rgl.srp+=k;
  4316  005A92  0100               	movlb	__Lparam shr (0+8)
  4317  005A94  51A4               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  4318  005A96  0103               	movlb	(_rgl+7) shr (0+8)
  4319  005A98  27DE               	addwf	(_rgl+7)& (0+255),f,b
  4320  005A9A                     l367:
  4321                           ;rgl.c: 2885: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  4322  005A9A  C3DE  FFE8         	movff	_rgl+7,wreg
  4323  005A9E  0103               	movlb	(_rgl+8) shr (0+8)
  4324  005AA0  61DF               	cpfslt	(_rgl+8)& (0+255),b
  4325  005AA2  0012               	return	
  4326  005AA4  C3DE  F3DF         	movff	_rgl+7,_rgl+8
  4327                           ;rgl.c: 2886: return;
  4328  005AA8  0012               	return	
  4329                           ;rgl.c: 2887: }
  4330  005AAA                     __end_of_ModPruCW2:
  4331                           ;rgl.c: 2893: void IncMaxCW2(void)
  4332                           ;rgl.c: 2894: {
  4333  005AAA                     _IncMaxCW2:
  4334  000000                     
  4335                           ;rgl.c: 2895: unsigned char k;
  4336  005AAA  0103               	movlb	_rgl shr (0+8)
  4337  005AAC  A5D7               	btfss	_rgl& (0+255),2,b
  4338  005AAE  D008               	goto	l370
  4339                           ;rgl.c: 2899: {
  4340  005AB0  C3DF  FFE8         	movff	_rgl+8,wreg
  4341  005AB4  0102               	movlb	(_PWM+29) shr (0+8)
  4342  005AB6  61F6               	cpfslt	(_PWM+29)& (0+255),b
  4343  005AB8  0012               	return	
  4344  005ABA  C2F6  F3DF         	movff	_PWM+29,_rgl+8
  4345                           ;rgl.c: 2901: return;
  4346  005ABE  0012               	return	
  4347  005AC0                     l370:
  4348                           ;rgl.c: 2902: }
  4349  005AC0  0E00               	movlw	0
  4350  005AC2  EC64  F033         	call	_TFrosnie
  4351  005AC6  B0D8               	btfsc	status,0,c
  4352  005AC8  0012               	return	
  4353  005ACA  0E00               	movlw	0
  4354  005ACC  EC06  F033         	call	_Trosnie
  4355  005AD0  B0D8               	btfsc	status,0,c
  4356  005AD2  0012               	return	
  4357                           ;rgl.c: 2906: k=5;
  4358  005AD4  0E05               	movlw	5
  4359  005AD6  6ED9               	movwf	fsr2l,c
  4360                           ;rgl.c: 2907: if(rgl.xmod+k>PWM.MAXPWM) rgl.xmod
      +                          =PWM.MAXPWM;
  4361  005AD8  C3DF  F002         	movff	_rgl+8,btemp+2
  4362  005ADC  6A03               	clrf	btemp+3,c
  4363  005ADE  2602               	addwf	btemp+2,f,c
  4364  005AE0  0E00               	movlw	0
  4365  005AE2  2203               	addwfc	btemp+3,f,c
  4366  005AE4  C2F6  F000         	movff	_PWM+29,btemp
  4367  005AE8  6A01               	clrf	btemp+1,c
  4368  005AEA  5001               	movf	btemp+1,w,c
  4369  005AEC  0A80               	xorlw	128
  4370  005AEE  6E04               	movwf	btemp+4,c
  4371  005AF0  5003               	movf	btemp+3,w,c
  4372  005AF2  0A80               	xorlw	128
  4373  005AF4  5C04               	subwf	btemp+4,w,c
  4374  005AF6  E102               	bnz	u3345
  4375  005AF8  5002               	movf	btemp+2,w,c
  4376  005AFA  5C00               	subwf	btemp,w,c
  4377  005AFC                     u3345:
  4378  005AFC  E203               	bc	l373
  4379  005AFE  C2F6  F3DF         	movff	_PWM+29,_rgl+8
  4380  005B02  D003               	goto	l374
  4381  005B04                     l373:
  4382                           ;rgl.c: 2908: else rgl.xmod+=k;
  4383  005B04  0103               	movlb	(_rgl+8) shr (0+8)
  4384  005B06  0E05               	movlw	5
  4385  005B08  27DF               	addwf	(_rgl+8)& (0+255),f,b
  4386  005B0A                     l374:
  4387                           ;rgl.c: 2909: if(rgl.xmod>PWM.MAXPWM) rgl.xmod=P
      +                          WM.MAXPWM;
  4388  005B0A  C3DF  FFE8         	movff	_rgl+8,wreg
  4389  005B0E  0102               	movlb	(_PWM+29) shr (0+8)
  4390  005B10  61F6               	cpfslt	(_PWM+29)& (0+255),b
  4391  005B12  0012               	return	
  4392  005B14  C2F6  F3DF         	movff	_PWM+29,_rgl+8
  4393                           ;rgl.c: 2910: }
  4394  005B18  0012               	return	
  4395  005B1A                     __end_of_IncMaxCW2:
  4396                           ;rgl.c: 2913: void ModPrzCW2(void)
  4397                           ;rgl.c: 2914: {
  4398  005B1A                     _ModPrzCW2:
  4399  000000                     
  4400                           ;rgl.c: 2915: unsigned char k;
  4401  005B1A  0103               	movlb	_rgl shr (0+8)
  4402  005B1C  BBD7               	btfsc	_rgl& (0+255),5,b
  4403  005B1E  D02F               	goto	l377
  4404                           ;rgl.c: 2917: {
  4405  005B20  0E00               	movlw	0
  4406  005B22  EC13  F033         	call	_Tmaleje
  4407  005B26  B0D8               	btfsc	status,0,c
  4408  005B28  0012               	return	
  4409  005B2A  0E03               	movlw	3
  4410  005B2C  EC42  F033         	call	_Twyzsza
  4411  005B30  A0D8               	btfss	status,0,c
  4412  005B32  0012               	return	
  4413                           ;rgl.c: 2919: {
  4414  005B34  EE02  F0D0         	lfsr	0,_DtKNF+34
  4415  005B38  50EF               	movf	indf0,w,c
  4416  005B3A  E102               	bnz	l379
  4417                           ;rgl.c: 2921: {
  4418  005B3C  0E0F               	movlw	15
  4419  005B3E  D001               	goto	L9
  4420                           ;rgl.c: 2923: }
  4421  005B40                     l379:
  4422                           ;rgl.c: 2924: else
  4423  005B40  0E19               	movlw	25
  4424  005B42                     L9:
  4425  005B42  6ED9               	movwf	fsr2l,c
  4426                           ;rgl.c: 2927: }
  4427  005B44  C2F5  F000         	movff	_PWM+28,btemp
  4428  005B48  6A01               	clrf	btemp+1,c
  4429  005B4A  50D9               	movf	fsr2l,w,c
  4430  005B4C  C3DE  F002         	movff	_rgl+7,btemp+2
  4431  005B50  6A03               	clrf	btemp+3,c
  4432  005B52  5E02               	subwf	btemp+2,f,c
  4433  005B54  0E00               	movlw	0
  4434  005B56  5A03               	subwfb	btemp+3,f,c
  4435  005B58  5003               	movf	btemp+3,w,c
  4436  005B5A  0A80               	xorlw	128
  4437  005B5C  6E04               	movwf	btemp+4,c
  4438  005B5E  5001               	movf	btemp+1,w,c
  4439  005B60  0A80               	xorlw	128
  4440  005B62  5C04               	subwf	btemp+4,w,c
  4441  005B64  E102               	bnz	u3415
  4442  005B66  5000               	movf	btemp,w,c
  4443  005B68  5C02               	subwf	btemp+2,w,c
  4444  005B6A                     u3415:
  4445  005B6A  E203               	bc	l381
  4446  005B6C  C2F5  F3DE         	movff	_PWM+28,_rgl+7
  4447  005B70  D003               	goto	l382
  4448  005B72                     l381:
  4449                           ;rgl.c: 2929: else rgl.srp-=k;
  4450  005B72  50D9               	movf	fsr2l,w,c
  4451  005B74  0103               	movlb	(_rgl+7) shr (0+8)
  4452  005B76  5FDE               	subwf	(_rgl+7)& (0+255),f,b
  4453  005B78                     l382:
  4454                           ;rgl.c: 2930: rgl.nmod=1;
  4455  005B78  0103               	movlb	_rgl shr (0+8)
  4456  005B7A  8BD7               	bsf	_rgl& (0+255),5,b
  4457                           ;rgl.c: 2931: }
  4458  005B7C  0012               	return	
  4459  005B7E                     l377:
  4460                           ;rgl.c: 2933: else
  4461  005B7E  0E03               	movlw	3
  4462  005B80  EC42  F033         	call	_Twyzsza
  4463  005B84  B0D8               	btfsc	status,0,c
  4464  005B86  0012               	return	
  4465                           ;rgl.c: 2936: {
  4466  005B88  0E00               	movlw	0
  4467  005B8A  EC13  F033         	call	_Tmaleje
  4468  005B8E  E302               	bnc	l385
  4469  005B90  0103               	movlb	_rgl shr (0+8)
  4470  005B92  9BD7               	bcf	_rgl& (0+255),5,b
  4471  005B94                     l385:
  4472                           ;rgl.c: 2938: if(Tstoi()&&TFmaleje(0)) rgl.nmod=
      +                          0;
  4473  005B94  EC2E  F033         	call	_Tstoi	;wreg free
  4474  005B98  E306               	bnc	l386
  4475  005B9A  0E00               	movlw	0
  4476  005B9C  EC71  F033         	call	_TFmaleje
  4477  005BA0  E302               	bnc	l386
  4478  005BA2  0103               	movlb	_rgl shr (0+8)
  4479  005BA4  9BD7               	bcf	_rgl& (0+255),5,b
  4480  005BA6                     l386:
  4481                           ;rgl.c: 2939: if(Tnizsza(3)) rgl.nmod=0;
  4482  005BA6  0E03               	movlw	3
  4483  005BA8  EC35  F033         	call	_Tnizsza
  4484  005BAC  A0D8               	btfss	status,0,c
  4485  005BAE  0012               	return	
  4486  005BB0  0103               	movlb	_rgl shr (0+8)
  4487  005BB2  9BD7               	bcf	_rgl& (0+255),5,b
  4488                           ;rgl.c: 2940: }
  4489  005BB4  0012               	return	
  4490  005BB6                     __end_of_ModPrzCW2:
  4491                           ;rgl.c: 2945: void PropCO2(void)
  4492                           ;rgl.c: 2946: {
  4493  005BB6                     _PropCO2:
  4494  000000                     
  4495                           ;rgl.c: 2947: if(!rgl.nmod)
  4496  005BB6  0103               	movlb	_rgl shr (0+8)
  4497  005BB8  BBD7               	btfsc	_rgl& (0+255),5,b
  4498  005BBA  D07A               	goto	l389
  4499                           ;rgl.c: 2948: {
  4500  005BBC  0E07               	movlw	7
  4501  005BBE  6E02               	movwf	btemp+2,c
  4502  005BC0  6A03               	clrf	btemp+3,c
  4503  005BC2  C2F5  FFE8         	movff	_PWM+28,wreg
  4504  005BC6  C2F6  F000         	movff	_PWM+29,btemp
  4505  005BCA  6A01               	clrf	btemp+1,c
  4506  005BCC  5E00               	subwf	btemp,f,c
  4507  005BCE  0E00               	movlw	0
  4508  005BD0  5A01               	subwfb	btemp+1,f,c
  4509  005BD2  ECA5  F006         	call	awdiv
  4510  005BD6  5004               	movf	btemp+4,w,c
  4511  005BD8  0102               	movlb	(_PWM+29) shr (0+8)
  4512  005BDA  5DF6               	subwf	(_PWM+29)& (0+255),w,b
  4513  005BDC  CFE8 F2EC          	movff	wreg,_PWM+19
  4514                           ;rgl.c: 2950: PWM.PROP2=PWM.MAXPWM-2*((PWM.MAXPW
      +                          M-PWM.MINPWM)/7);
  4515  005BE0  0E07               	movlw	7
  4516  005BE2  6E02               	movwf	btemp+2,c
  4517  005BE4  6A03               	clrf	btemp+3,c
  4518  005BE6  C2F5  FFE8         	movff	_PWM+28,wreg
  4519  005BEA  C2F6  F000         	movff	_PWM+29,btemp
  4520  005BEE  6A01               	clrf	btemp+1,c
  4521  005BF0  5E00               	subwf	btemp,f,c
  4522  005BF2  0E00               	movlw	0
  4523  005BF4  5A01               	subwfb	btemp+1,f,c
  4524  005BF6  ECA5  F006         	call	awdiv
  4525  005BFA  90D8               	bcf	status,0,c
  4526  005BFC  3404               	rlcf	btemp+4,w,c
  4527  005BFE  0102               	movlb	(_PWM+29) shr (0+8)
  4528  005C00  5DF6               	subwf	(_PWM+29)& (0+255),w,b
  4529  005C02  CFE8 F2ED          	movff	wreg,_PWM+20
  4530                           ;rgl.c: 2951: PWM.PROP3=PWM.MAXPWM-3*((PWM.MAXPW
      +                          M-PWM.MINPWM)/7);
  4531  005C06  0E07               	movlw	7
  4532  005C08  6E02               	movwf	btemp+2,c
  4533  005C0A  6A03               	clrf	btemp+3,c
  4534  005C0C  C2F5  FFE8         	movff	_PWM+28,wreg
  4535  005C10  C2F6  F000         	movff	_PWM+29,btemp
  4536  005C14  6A01               	clrf	btemp+1,c
  4537  005C16  5E00               	subwf	btemp,f,c
  4538  005C18  0E00               	movlw	0
  4539  005C1A  5A01               	subwfb	btemp+1,f,c
  4540  005C1C  ECA5  F006         	call	awdiv
  4541  005C20  5004               	movf	btemp+4,w,c
  4542  005C22  0D03               	mullw	3
  4543  005C24  50F3               	movf	prodl,w,c
  4544  005C26  0102               	movlb	(_PWM+29) shr (0+8)
  4545  005C28  5DF6               	subwf	(_PWM+29)& (0+255),w,b
  4546  005C2A  CFE8 F2EE          	movff	wreg,_PWM+21
  4547                           ;rgl.c: 2952: if(rgl.x_f==3)
  4548  005C2E  C3DA  FFE8         	movff	_rgl+3,wreg
  4549  005C32  0A03               	xorlw	3
  4550  005C34  E107               	bnz	l390
  4551                           ;rgl.c: 2953: {
  4552  005C36  C3E0  FFE8         	movff	_rgl+9,wreg
  4553  005C3A  61F6               	cpfslt	(_PWM+29)& (0+255),b
  4554  005C3C  D027               	goto	l392
  4555                           ;rgl.c: 2955: rgl.tmp_pwm=PWM.MAXPWM;
  4556  005C3E  C2F6  F3E0         	movff	_PWM+29,_rgl+9
  4557                           ;rgl.c: 2956: }
  4558  005C42  D024               	goto	l392
  4559  005C44                     l390:
  4560                           ;rgl.c: 2957: else
  4561  005C44  C3DA  FFE8         	movff	_rgl+3,wreg
  4562  005C48  0A02               	xorlw	2
  4563  005C4A  E108               	bnz	l393
  4564                           ;rgl.c: 2959: {
  4565  005C4C  C3E0  FFE8         	movff	_rgl+9,wreg
  4566  005C50  0102               	movlb	(_PWM+19) shr (0+8)
  4567  005C52  61EC               	cpfslt	(_PWM+19)& (0+255),b
  4568  005C54  D01B               	goto	l392
  4569                           ;rgl.c: 2961: rgl.tmp_pwm=PWM.PROP1;
  4570  005C56  C2EC  F3E0         	movff	_PWM+19,_rgl+9
  4571                           ;rgl.c: 2962: }
  4572  005C5A  D018               	goto	l392
  4573  005C5C                     l393:
  4574                           ;rgl.c: 2963: else
  4575  005C5C  C3DA  F000         	movff	_rgl+3,btemp
  4576  005C60  0400               	decf	btemp,w,c
  4577  005C62  E108               	bnz	l396
  4578                           ;rgl.c: 2965: {
  4579  005C64  C3E0  FFE8         	movff	_rgl+9,wreg
  4580  005C68  0102               	movlb	(_PWM+20) shr (0+8)
  4581  005C6A  61ED               	cpfslt	(_PWM+20)& (0+255),b
  4582  005C6C  D00F               	goto	l392
  4583                           ;rgl.c: 2967: rgl.tmp_pwm=PWM.PROP2;
  4584  005C6E  C2ED  F3E0         	movff	_PWM+20,_rgl+9
  4585                           ;rgl.c: 2968: }
  4586  005C72  D00C               	goto	l392
  4587  005C74                     l396:
  4588                           ;rgl.c: 2969: else
  4589  005C74  C3DA  FFE8         	movff	_rgl+3,wreg
  4590  005C78  0A80               	xorlw	128
  4591  005C7A  0F7F               	addlw	-129
  4592  005C7C  E207               	bc	l392
  4593                           ;rgl.c: 2971: {
  4594  005C7E  C3E0  FFE8         	movff	_rgl+9,wreg
  4595  005C82  0102               	movlb	(_PWM+21) shr (0+8)
  4596  005C84  61EE               	cpfslt	(_PWM+21)& (0+255),b
  4597  005C86  D002               	goto	l392
  4598                           ;rgl.c: 2973: rgl.tmp_pwm=PWM.PROP3;
  4599  005C88  C2EE  F3E0         	movff	_PWM+21,_rgl+9
  4600  005C8C                     l392:
  4601                           ;rgl.c: 2974: }
  4602  005C8C  C2F5  FFE8         	movff	_PWM+28,wreg
  4603  005C90  0103               	movlb	(_rgl+9) shr (0+8)
  4604  005C92  61E0               	cpfslt	(_rgl+9)& (0+255),b
  4605  005C94  D002               	goto	l401
  4606  005C96  C2F5  F3E0         	movff	_PWM+28,_rgl+9
  4607  005C9A                     l401:
  4608                           ;rgl.c: 2976: if(rgl.tmp_pwm>PWM.MAXPWM) rgl.tmp
      +                          _pwm=PWM.MAXPWM;
  4609  005C9A  C3E0  FFE8         	movff	_rgl+9,wreg
  4610  005C9E  0102               	movlb	(_PWM+29) shr (0+8)
  4611  005CA0  61F6               	cpfslt	(_PWM+29)& (0+255),b
  4612  005CA2  D002               	goto	l402
  4613  005CA4  C2F6  F3E0         	movff	_PWM+29,_rgl+9
  4614  005CA8                     l402:
  4615                           ;rgl.c: 2977: WritePWM(rgl.tmp_pwm);
  4616  005CA8  C3E0  FFE8         	movff	_rgl+9,wreg
  4617  005CAC  EF74  F001         	goto	_WritePWM
  4618                           ;rgl.c: 2978: }
  4619  005CB0                     l389:
  4620                           ;rgl.c: 2979: else
  4621  005CB0  0E05               	movlw	5
  4622  005CB2  C2F5  F002         	movff	_PWM+28,btemp+2
  4623  005CB6  6A03               	clrf	btemp+3,c
  4624  005CB8  2602               	addwf	btemp+2,f,c
  4625  005CBA  0E00               	movlw	0
  4626  005CBC  2203               	addwfc	btemp+3,f,c
  4627  005CBE  C3E0  F000         	movff	_rgl+9,btemp
  4628  005CC2  6A01               	clrf	btemp+1,c
  4629  005CC4  5001               	movf	btemp+1,w,c
  4630  005CC6  0A80               	xorlw	128
  4631  005CC8  6E04               	movwf	btemp+4,c
  4632  005CCA  5003               	movf	btemp+3,w,c
  4633  005CCC  0A80               	xorlw	128
  4634  005CCE  5C04               	subwf	btemp+4,w,c
  4635  005CD0  E102               	bnz	u3595
  4636  005CD2  5002               	movf	btemp+2,w,c
  4637  005CD4  5C00               	subwf	btemp,w,c
  4638  005CD6                     u3595:
  4639  005CD6  E204               	bc	l404
  4640                           ;rgl.c: 2982: {
  4641  005CD8  C2F5  FFE8         	movff	_PWM+28,wreg
  4642  005CDC  EF74  F001         	goto	_WritePWM
  4643                           ;rgl.c: 2984: }
  4644  005CE0                     l404:
  4645                           ;rgl.c: 2985: else
  4646  005CE0  C3E0  F000         	movff	_rgl+9,btemp
  4647  005CE4  6A01               	clrf	btemp+1,c
  4648  005CE6  0E05               	movlw	5
  4649  005CE8  C2F5  F002         	movff	_PWM+28,btemp+2
  4650  005CEC  6A03               	clrf	btemp+3,c
  4651  005CEE  2602               	addwf	btemp+2,f,c
  4652  005CF0  0E00               	movlw	0
  4653  005CF2  2203               	addwfc	btemp+3,f,c
  4654  005CF4  5003               	movf	btemp+3,w,c
  4655  005CF6  0A80               	xorlw	128
  4656  005CF8  6E04               	movwf	btemp+4,c
  4657  005CFA  5001               	movf	btemp+1,w,c
  4658  005CFC  0A80               	xorlw	128
  4659  005CFE  5C04               	subwf	btemp+4,w,c
  4660  005D00  E102               	bnz	u3605
  4661  005D02  5000               	movf	btemp,w,c
  4662  005D04  5C02               	subwf	btemp+2,w,c
  4663  005D06                     u3605:
  4664  005D06  B0D8               	btfsc	status,0,c
  4665  005D08  0012               	return	
  4666                           ;rgl.c: 2988: {
  4667  005D0A  C2F5  FFE8         	movff	_PWM+28,wreg
  4668  005D0E  0F05               	addlw	5
  4669  005D10  EF74  F001         	goto	_WritePWM
  4670                           ;rgl.c: 2990: }
  4671  005D14                     __end_of_PropCO2:
  4672                           ;rgl.c: 3001: const unsigned char kdw=1;
  4673                           ;rgl.c: 3002: const unsigned char kup=1;
  4674                           ;rgl.c: 3004: void NewPop_MIN(void)
  4675                           ;rgl.c: 3005: {
  4676  005D14                     _NewPop_MIN:
  4677  000000                     
  4678                           ;rgl.c: 3006: static unsigned char bpv,t1,t2,bw1
      +                          ,bw2;
  4679  005D14  C325  F0A6         	movff	_M+31,?a_NewPop_MIN+2
  4680  005D18  C326  F0A7         	movff	_M+32,?a_NewPop_MIN+3
  4681                           ;rgl.c: 3011: pv=DtKNF.mmin*100;
  4682  005D1C  C2C5  FFE8         	movff	_DtKNF+23,wreg
  4683  005D20  0D64               	mullw	100
  4684  005D22  CFF3 F0A4          	movff	prodl,?a_NewPop_MIN
  4685  005D26  CFF4 F0A5          	movff	prodh,?a_NewPop_MIN+1
  4686                           ;rgl.c: 3012: SetNstVNT(DtKNF.mmin);
  4687  005D2A  C2C5  FFE8         	movff	_DtKNF+23,wreg
  4688  005D2E  0100               	movlb	__Lparam shr (0+8)
  4689  005D30  6FB2               	movwf	?_SetNstVNT^(__Lparam& (0+65280)),b
  4690  005D32  6BB3               	clrf	(?_SetNstVNT+1)^(__Lparam& (0+65280)),b
  4691  005D34  EC7B  F071         	call	_SetNstVNT	;wreg free
  4692                           ;rgl.c: 3014: if(rgl.tmp_pwm<=PWM.MINPWM)
  4693  005D38  C3E0  FFE8         	movff	_rgl+9,wreg
  4694  005D3C  0102               	movlb	(_PWM+28) shr (0+8)
  4695  005D3E  5DF5               	subwf	(_PWM+28)& (0+255),w,b
  4696  005D40  A0D8               	btfss	status,0,c
  4697  005D42  0012               	return	
  4698                           ;rgl.c: 3015: {
  4699  005D44  0E00               	movlw	0
  4700  005D46  EC05  F072         	call	_VTmalejacy
  4701  005D4A  0E00               	movlw	0
  4702  005D4C  E240               	bc	L46
  4703  005D4E  EC9A  F071         	call	_Vmaleje
  4704  005D52  E23C               	bc	l409
  4705                           ;rgl.c: 3018: {
  4706  005D54  0E3C               	movlw	60
  4707  005D56  C0A4  F000         	movff	?a_NewPop_MIN,btemp
  4708  005D5A  C0A5  F001         	movff	?a_NewPop_MIN+1,btemp+1
  4709  005D5E  2600               	addwf	btemp,f,c
  4710  005D60  0E00               	movlw	0
  4711  005D62  2201               	addwfc	btemp+1,f,c
  4712  005D64  0100               	movlb	__Lparam shr (0+8)
  4713  005D66  51A7               	movf	(?a_NewPop_MIN+3)^(__Lparam& (0+65280)),w
  4714  005D68  5C01               	subwf	btemp+1,w,c
  4715  005D6A  E102               	bnz	u3655
  4716  005D6C  51A6               	movf	(?a_NewPop_MIN+2)^(__Lparam& (0+65280)),w
  4717  005D6E  5C00               	subwf	btemp,w,c
  4718  005D70                     u3655:
  4719  005D70  E22D               	bc	l409
  4720                           ;rgl.c: 3020: {
  4721  005D72  010E               	movlb	F1985 shr (0+8)
  4722  005D74  6BC6               	clrf	F1985& (0+255),b
  4723                           ;rgl.c: 3022: if((v-pv)>100) w=3;
  4724  005D76  C0A6  F000         	movff	?a_NewPop_MIN+2,btemp
  4725  005D7A  C0A7  F001         	movff	?a_NewPop_MIN+3,btemp+1
  4726  005D7E  0100               	movlb	__Lparam shr (0+8)
  4727  005D80  51A4               	movf	?a_NewPop_MIN^(__Lparam& (0+65280)),w
  4728  005D82  5E00               	subwf	btemp,f,c
  4729  005D84  51A5               	movf	(?a_NewPop_MIN+1)^(__Lparam& (0+65280)),w
  4730  005D86  5A01               	subwfb	btemp+1,f,c
  4731  005D88  0E00               	movlw	0
  4732  005D8A  5C01               	subwf	btemp+1,w,c
  4733  005D8C  0E65               	movlw	101
  4734  005D8E  B4D8               	btfsc	status,2,c
  4735  005D90  5C00               	subwf	btemp,w,c
  4736  005D92  E302               	bnc	l411
  4737  005D94  0E03               	movlw	3
  4738  005D96  D001               	goto	L10
  4739  005D98                     l411:
  4740                           ;rgl.c: 3023: else w=6;
  4741  005D98  0E06               	movlw	6
  4742  005D9A                     L10:
  4743  005D9A  6ED9               	movwf	fsr2l,c
  4744                           ;rgl.c: 3024: if(bw2) w=8;
  4745  005D9C  010E               	movlb	F1988 shr (0+8)
  4746  005D9E  53C9               	movf	F1988& (0+255),f,b
  4747  005DA0  E002               	bz	l413
  4748  005DA2  0E08               	movlw	8
  4749  005DA4  6ED9               	movwf	fsr2l,c
  4750  005DA6                     l413:
  4751                           ;rgl.c: 3026: if(++t2>w)
  4752  005DA6  010E               	movlb	F1986 shr (0+8)
  4753  005DA8  2BC7               	incf	F1986& (0+255),f,b
  4754  005DAA  CEC7  FFE8         	movff	F1986,wreg
  4755  005DAE  60D9               	cpfslt	fsr2l,c
  4756  005DB0  D00D               	goto	l409
  4757                           ;rgl.c: 3027: {
  4758  005DB2  6BC7               	clrf	F1986& (0+255),b
  4759                           ;rgl.c: 3029: bw1=1;
  4760  005DB4  0E01               	movlw	1
  4761  005DB6  CFE8 FEC8          	movff	wreg,F1987
  4762                           ;rgl.c: 3030: bw2=0;
  4763  005DBA  010E               	movlb	F1988 shr (0+8)
  4764  005DBC  6BC9               	clrf	F1988& (0+255),b
  4765                           ;rgl.c: 3031: if(popMIN>-50) popMIN-=kdw;
  4766  005DBE  CED9  FFE8         	movff	_popMIN,wreg
  4767  005DC2  0A80               	xorlw	128
  4768  005DC4  0FB1               	addlw	177
  4769  005DC6  E302               	bnc	l409
  4770  005DC8  010E               	movlb	_popMIN shr (0+8)
  4771  005DCA  07D9               	decf	_popMIN& (0+255),f,b
  4772  005DCC                     l409:
  4773                           ;rgl.c: 3032: }
  4774  005DCC  0E00               	movlw	0
  4775  005DCE                     L46:
  4776  005DCE  ECEF  F071         	call	_VTrosnacy
  4777  005DD2  B0D8               	btfsc	status,0,c
  4778  005DD4  0012               	return	
  4779  005DD6  0E00               	movlw	0
  4780  005DD8  EC83  F071         	call	_Vrosnie
  4781  005DDC  B0D8               	btfsc	status,0,c
  4782  005DDE  0012               	return	
  4783                           ;rgl.c: 3037: {
  4784  005DE0  0100               	movlb	__Lparam shr (0+8)
  4785  005DE2  0EE2               	movlw	226
  4786  005DE4  25A4               	addwf	?a_NewPop_MIN^(__Lparam& (0+65280)),w
  4787  005DE6  6E00               	movwf	btemp,c
  4788  005DE8  0EFF               	movlw	255
  4789  005DEA  21A5               	addwfc	(?a_NewPop_MIN+1)^(__Lparam& (0+65280)),
      +                          w
  4790  005DEC  6E01               	movwf	btemp+1,c
  4791  005DEE  5001               	movf	btemp+1,w,c
  4792  005DF0  5DA7               	subwf	(?a_NewPop_MIN+3)^(__Lparam& (0+65280)),w
  4793  005DF2  E102               	bnz	u3735
  4794  005DF4  5000               	movf	btemp,w,c
  4795  005DF6  5DA6               	subwf	(?a_NewPop_MIN+2)^(__Lparam& (0+65280)),w
  4796  005DF8                     u3735:
  4797  005DF8  B0D8               	btfsc	status,0,c
  4798  005DFA  0012               	return	
  4799                           ;rgl.c: 3039: {
  4800  005DFC  010E               	movlb	F1986 shr (0+8)
  4801  005DFE  6BC7               	clrf	F1986& (0+255),b
  4802                           ;rgl.c: 3041: if((pv-v)>100) w=5;
  4803  005E00  C0A4  F000         	movff	?a_NewPop_MIN,btemp
  4804  005E04  C0A5  F001         	movff	?a_NewPop_MIN+1,btemp+1
  4805  005E08  0100               	movlb	__Lparam shr (0+8)
  4806  005E0A  51A6               	movf	(?a_NewPop_MIN+2)^(__Lparam& (0+65280)),w
  4807  005E0C  5E00               	subwf	btemp,f,c
  4808  005E0E  51A7               	movf	(?a_NewPop_MIN+3)^(__Lparam& (0+65280)),w
  4809  005E10  5A01               	subwfb	btemp+1,f,c
  4810  005E12  0E00               	movlw	0
  4811  005E14  5C01               	subwf	btemp+1,w,c
  4812  005E16  0E65               	movlw	101
  4813  005E18  B4D8               	btfsc	status,2,c
  4814  005E1A  5C00               	subwf	btemp,w,c
  4815  005E1C  E302               	bnc	l418
  4816  005E1E  0E05               	movlw	5
  4817  005E20  D001               	goto	L11
  4818  005E22                     l418:
  4819                           ;rgl.c: 3042: else w=8;
  4820  005E22  0E08               	movlw	8
  4821  005E24                     L11:
  4822  005E24  6ED9               	movwf	fsr2l,c
  4823                           ;rgl.c: 3043: if(bw1) w=10;
  4824  005E26  010E               	movlb	F1987 shr (0+8)
  4825  005E28  53C8               	movf	F1987& (0+255),f,b
  4826  005E2A  E002               	bz	l420
  4827  005E2C  0E0A               	movlw	10
  4828  005E2E  6ED9               	movwf	fsr2l,c
  4829  005E30                     l420:
  4830                           ;rgl.c: 3044: if(++t1>w)
  4831  005E30  010E               	movlb	F1985 shr (0+8)
  4832  005E32  2BC6               	incf	F1985& (0+255),f,b
  4833  005E34  CEC6  FFE8         	movff	F1985,wreg
  4834  005E38  60D9               	cpfslt	fsr2l,c
  4835  005E3A  0012               	return	
  4836                           ;rgl.c: 3045: {
  4837  005E3C  6BC6               	clrf	F1985& (0+255),b
  4838                           ;rgl.c: 3047: bw1=0;
  4839  005E3E  010E               	movlb	F1987 shr (0+8)
  4840  005E40  6BC8               	clrf	F1987& (0+255),b
  4841                           ;rgl.c: 3048: bw2=1;
  4842  005E42  0E01               	movlw	1
  4843  005E44  CFE8 FEC9          	movff	wreg,F1988
  4844                           ;rgl.c: 3049: if(popMIN<50) popMIN+=kup;
  4845  005E48  CED9  FFE8         	movff	_popMIN,wreg
  4846  005E4C  0A80               	xorlw	128
  4847  005E4E  0F4E               	addlw	-178
  4848  005E50  B0D8               	btfsc	status,0,c
  4849  005E52  0012               	return	
  4850  005E54  010E               	movlb	_popMIN shr (0+8)
  4851  005E56  2BD9               	incf	_popMIN& (0+255),f,b
  4852                           ;rgl.c: 3050: }
  4853  005E58  0C01               	retlw	1
  4854  005E5A                     __end_of_NewPop_MIN:
  4855                           ;rgl.c: 3057: void NewPop_MAX_CW(void)
  4856                           ;rgl.c: 3058: {
  4857  005E5A                     _NewPop_MAX_CW:
  4858  000000                     
  4859                           ;rgl.c: 3059: static unsigned char bpv,t1,t2,bw1
      +                          ,bw2;
  4860  005E5A  C325  F0A7         	movff	_M+31,?a_NewPop_MAX_CW+3
  4861  005E5E  C326  F0A8         	movff	_M+32,?a_NewPop_MAX_CW+4
  4862                           ;rgl.c: 3064: ppv=ProcToVNT(DtKNF.mxcw);
  4863  005E62  C2B5  FFE8         	movff	_DtKNF+7,wreg
  4864  005E66  ECD1  F063         	call	_ProcToVNT
  4865  005E6A  0100               	movlb	__Lparam shr (0+8)
  4866  005E6C  6FA4               	movwf	?a_NewPop_MAX_CW^(__Lparam& (0+65280)),b
  4867                           ;rgl.c: 3065: SetNstVNT(ppv);
  4868  005E6E  51A4               	movf	?a_NewPop_MAX_CW^(__Lparam& (0+65280)),w
  4869  005E70  6FB2               	movwf	?_SetNstVNT^(__Lparam& (0+65280)),b
  4870  005E72  6BB3               	clrf	(?_SetNstVNT+1)^(__Lparam& (0+65280)),b
  4871  005E74  EC7B  F071         	call	_SetNstVNT	;wreg free
  4872                           ;rgl.c: 3066: pv=ppv*100;
  4873  005E78  0100               	movlb	__Lparam shr (0+8)
  4874  005E7A  51A4               	movf	?a_NewPop_MAX_CW^(__Lparam& (0+65280)),w
  4875  005E7C  0D64               	mullw	100
  4876  005E7E  CFF3 F0A5          	movff	prodl,?a_NewPop_MAX_CW+1
  4877  005E82  CFF4 F0A6          	movff	prodh,?a_NewPop_MAX_CW+2
  4878                           ;rgl.c: 3068: if(rgl.tmp_pwm>=PWM.MAXPWM)
  4879  005E86  C2F6  FFE8         	movff	_PWM+29,wreg
  4880  005E8A  0103               	movlb	(_rgl+9) shr (0+8)
  4881  005E8C  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  4882  005E8E  A0D8               	btfss	status,0,c
  4883  005E90  0012               	return	
  4884                           ;rgl.c: 3069: {
  4885  005E92  0E00               	movlw	0
  4886  005E94  EC05  F072         	call	_VTmalejacy
  4887  005E98  0E00               	movlw	0
  4888  005E9A  E240               	bc	L47
  4889  005E9C  EC9A  F071         	call	_Vmaleje
  4890  005EA0  E23C               	bc	l425
  4891                           ;rgl.c: 3072: {
  4892  005EA2  0E3C               	movlw	60
  4893  005EA4  C0A5  F000         	movff	?a_NewPop_MAX_CW+1,btemp
  4894  005EA8  C0A6  F001         	movff	?a_NewPop_MAX_CW+2,btemp+1
  4895  005EAC  2600               	addwf	btemp,f,c
  4896  005EAE  0E00               	movlw	0
  4897  005EB0  2201               	addwfc	btemp+1,f,c
  4898  005EB2  0100               	movlb	__Lparam shr (0+8)
  4899  005EB4  51A8               	movf	(?a_NewPop_MAX_CW+4)^(__Lparam& (0+65280))
      +                          ,w
  4900  005EB6  5C01               	subwf	btemp+1,w,c
  4901  005EB8  E102               	bnz	u3825
  4902  005EBA  51A7               	movf	(?a_NewPop_MAX_CW+3)^(__Lparam& (0+65280))
      +                          ,w
  4903  005EBC  5C00               	subwf	btemp,w,c
  4904  005EBE                     u3825:
  4905  005EBE  E22D               	bc	l425
  4906                           ;rgl.c: 3074: {
  4907  005EC0  010E               	movlb	F1994 shr (0+8)
  4908  005EC2  6BCA               	clrf	F1994& (0+255),b
  4909                           ;rgl.c: 3076: if((v-pv)>100) w=3;
  4910  005EC4  C0A7  F000         	movff	?a_NewPop_MAX_CW+3,btemp
  4911  005EC8  C0A8  F001         	movff	?a_NewPop_MAX_CW+4,btemp+1
  4912  005ECC  0100               	movlb	__Lparam shr (0+8)
  4913  005ECE  51A5               	movf	(?a_NewPop_MAX_CW+1)^(__Lparam& (0+65280))
      +                          ,w
  4914  005ED0  5E00               	subwf	btemp,f,c
  4915  005ED2  51A6               	movf	(?a_NewPop_MAX_CW+2)^(__Lparam& (0+65280))
      +                          ,w
  4916  005ED4  5A01               	subwfb	btemp+1,f,c
  4917  005ED6  0E00               	movlw	0
  4918  005ED8  5C01               	subwf	btemp+1,w,c
  4919  005EDA  0E65               	movlw	101
  4920  005EDC  B4D8               	btfsc	status,2,c
  4921  005EDE  5C00               	subwf	btemp,w,c
  4922  005EE0  E302               	bnc	l427
  4923  005EE2  0E03               	movlw	3
  4924  005EE4  D001               	goto	L12
  4925  005EE6                     l427:
  4926                           ;rgl.c: 3077: else w=6;
  4927  005EE6  0E06               	movlw	6
  4928  005EE8                     L12:
  4929  005EE8  6ED9               	movwf	fsr2l,c
  4930                           ;rgl.c: 3078: if(bw2) w=8;
  4931  005EEA  010E               	movlb	F1997 shr (0+8)
  4932  005EEC  53CD               	movf	F1997& (0+255),f,b
  4933  005EEE  E002               	bz	l429
  4934  005EF0  0E08               	movlw	8
  4935  005EF2  6ED9               	movwf	fsr2l,c
  4936  005EF4                     l429:
  4937                           ;rgl.c: 3079: if(++t2>w)
  4938  005EF4  010E               	movlb	F1995 shr (0+8)
  4939  005EF6  2BCB               	incf	F1995& (0+255),f,b
  4940  005EF8  CECB  FFE8         	movff	F1995,wreg
  4941  005EFC  60D9               	cpfslt	fsr2l,c
  4942  005EFE  D00D               	goto	l425
  4943                           ;rgl.c: 3080: {
  4944  005F00  6BCB               	clrf	F1995& (0+255),b
  4945                           ;rgl.c: 3082: bw1=1;
  4946  005F02  0E01               	movlw	1
  4947  005F04  CFE8 FECC          	movff	wreg,F1996
  4948                           ;rgl.c: 3083: bw2=0;
  4949  005F08  010E               	movlb	F1997 shr (0+8)
  4950  005F0A  6BCD               	clrf	F1997& (0+255),b
  4951                           ;rgl.c: 3084: if(popMAXCW>-50) popMAXCW-=kdw;
  4952  005F0C  CED8  FFE8         	movff	_popMAXCW,wreg
  4953  005F10  0A80               	xorlw	128
  4954  005F12  0FB1               	addlw	177
  4955  005F14  E302               	bnc	l425
  4956  005F16  010E               	movlb	_popMAXCW shr (0+8)
  4957  005F18  07D8               	decf	_popMAXCW& (0+255),f,b
  4958  005F1A                     l425:
  4959                           ;rgl.c: 3085: }
  4960  005F1A  0E00               	movlw	0
  4961  005F1C                     L47:
  4962  005F1C  ECEF  F071         	call	_VTrosnacy
  4963  005F20  B0D8               	btfsc	status,0,c
  4964  005F22  0012               	return	
  4965  005F24  0E00               	movlw	0
  4966  005F26  EC83  F071         	call	_Vrosnie
  4967  005F2A  B0D8               	btfsc	status,0,c
  4968  005F2C  0012               	return	
  4969                           ;rgl.c: 3090: {
  4970  005F2E  0100               	movlb	__Lparam shr (0+8)
  4971  005F30  0EE2               	movlw	226
  4972  005F32  25A5               	addwf	(?a_NewPop_MAX_CW+1)^(__Lparam& (0+65280)
      +                          ),w
  4973  005F34  6E00               	movwf	btemp,c
  4974  005F36  0EFF               	movlw	255
  4975  005F38  21A6               	addwfc	(?a_NewPop_MAX_CW+2)^(__Lparam& (0+65280
      +                          )),w
  4976  005F3A  6E01               	movwf	btemp+1,c
  4977  005F3C  5001               	movf	btemp+1,w,c
  4978  005F3E  5DA8               	subwf	(?a_NewPop_MAX_CW+4)^(__Lparam& (0+65280)
      +                          ),w
  4979  005F40  E102               	bnz	u3905
  4980  005F42  5000               	movf	btemp,w,c
  4981  005F44  5DA7               	subwf	(?a_NewPop_MAX_CW+3)^(__Lparam& (0+65280)
      +                          ),w
  4982  005F46                     u3905:
  4983  005F46  B0D8               	btfsc	status,0,c
  4984  005F48  0012               	return	
  4985                           ;rgl.c: 3092: {
  4986  005F4A  010E               	movlb	F1995 shr (0+8)
  4987  005F4C  6BCB               	clrf	F1995& (0+255),b
  4988                           ;rgl.c: 3094: if((pv-v)>100) w=5;
  4989  005F4E  C0A5  F000         	movff	?a_NewPop_MAX_CW+1,btemp
  4990  005F52  C0A6  F001         	movff	?a_NewPop_MAX_CW+2,btemp+1
  4991  005F56  0100               	movlb	__Lparam shr (0+8)
  4992  005F58  51A7               	movf	(?a_NewPop_MAX_CW+3)^(__Lparam& (0+65280))
      +                          ,w
  4993  005F5A  5E00               	subwf	btemp,f,c
  4994  005F5C  51A8               	movf	(?a_NewPop_MAX_CW+4)^(__Lparam& (0+65280))
      +                          ,w
  4995  005F5E  5A01               	subwfb	btemp+1,f,c
  4996  005F60  0E00               	movlw	0
  4997  005F62  5C01               	subwf	btemp+1,w,c
  4998  005F64  0E65               	movlw	101
  4999  005F66  B4D8               	btfsc	status,2,c
  5000  005F68  5C00               	subwf	btemp,w,c
  5001  005F6A  E302               	bnc	l434
  5002  005F6C  0E05               	movlw	5
  5003  005F6E  D001               	goto	L13
  5004  005F70                     l434:
  5005                           ;rgl.c: 3095: else w=8;
  5006  005F70  0E08               	movlw	8
  5007  005F72                     L13:
  5008  005F72  6ED9               	movwf	fsr2l,c
  5009                           ;rgl.c: 3096: if(bw1) w=10;
  5010  005F74  010E               	movlb	F1996 shr (0+8)
  5011  005F76  53CC               	movf	F1996& (0+255),f,b
  5012  005F78  E002               	bz	l436
  5013  005F7A  0E0A               	movlw	10
  5014  005F7C  6ED9               	movwf	fsr2l,c
  5015  005F7E                     l436:
  5016                           ;rgl.c: 3097: if(++t1>w)
  5017  005F7E  010E               	movlb	F1994 shr (0+8)
  5018  005F80  2BCA               	incf	F1994& (0+255),f,b
  5019  005F82  CECA  FFE8         	movff	F1994,wreg
  5020  005F86  60D9               	cpfslt	fsr2l,c
  5021  005F88  0012               	return	
  5022                           ;rgl.c: 3098: {
  5023  005F8A  6BCA               	clrf	F1994& (0+255),b
  5024                           ;rgl.c: 3100: bw1=0;
  5025  005F8C  010E               	movlb	F1996 shr (0+8)
  5026  005F8E  6BCC               	clrf	F1996& (0+255),b
  5027                           ;rgl.c: 3101: bw2=1;
  5028  005F90  0E01               	movlw	1
  5029  005F92  CFE8 FECD          	movff	wreg,F1997
  5030                           ;rgl.c: 3102: if(popMAXCW<50) popMAXCW+=kup;
  5031  005F96  CED8  FFE8         	movff	_popMAXCW,wreg
  5032  005F9A  0A80               	xorlw	128
  5033  005F9C  0F4E               	addlw	-178
  5034  005F9E  B0D8               	btfsc	status,0,c
  5035  005FA0  0012               	return	
  5036  005FA2  010E               	movlb	_popMAXCW shr (0+8)
  5037  005FA4  2BD8               	incf	_popMAXCW& (0+255),f,b
  5038                           ;rgl.c: 3103: }
  5039  005FA6  0C01               	retlw	1
  5040  005FA8                     __end_of_NewPop_MAX_CW:
  5041                           ;rgl.c: 3110: void NewPop_MAX_CO(void)
  5042                           ;rgl.c: 3111: {
  5043  005FA8                     _NewPop_MAX_CO:
  5044  000000                     
  5045                           ;rgl.c: 3112: static unsigned char bpv,t1,t2,bw1
      +                          ,bw2;
  5046  005FA8  C325  F0A7         	movff	_M+31,?a_NewPop_MAX_CO+3
  5047  005FAC  C326  F0A8         	movff	_M+32,?a_NewPop_MAX_CO+4
  5048                           ;rgl.c: 3117: ppv=ProcToVNT(DtKNF.mxco);
  5049  005FB0  C2B6  FFE8         	movff	_DtKNF+8,wreg
  5050  005FB4  ECD1  F063         	call	_ProcToVNT
  5051  005FB8  0100               	movlb	__Lparam shr (0+8)
  5052  005FBA  6FA4               	movwf	?a_NewPop_MAX_CO^(__Lparam& (0+65280)),b
  5053                           ;rgl.c: 3118: SetNstVNT(ppv);
  5054  005FBC  51A4               	movf	?a_NewPop_MAX_CO^(__Lparam& (0+65280)),w
  5055  005FBE  6FB2               	movwf	?_SetNstVNT^(__Lparam& (0+65280)),b
  5056  005FC0  6BB3               	clrf	(?_SetNstVNT+1)^(__Lparam& (0+65280)),b
  5057  005FC2  EC7B  F071         	call	_SetNstVNT	;wreg free
  5058                           ;rgl.c: 3119: pv=ppv*100;
  5059  005FC6  0100               	movlb	__Lparam shr (0+8)
  5060  005FC8  51A4               	movf	?a_NewPop_MAX_CO^(__Lparam& (0+65280)),w
  5061  005FCA  0D64               	mullw	100
  5062  005FCC  CFF3 F0A5          	movff	prodl,?a_NewPop_MAX_CO+1
  5063  005FD0  CFF4 F0A6          	movff	prodh,?a_NewPop_MAX_CO+2
  5064                           ;rgl.c: 3122: if(rgl.tmp_pwm>=PWM.MAXPWM)
  5065  005FD4  C2F6  FFE8         	movff	_PWM+29,wreg
  5066  005FD8  0103               	movlb	(_rgl+9) shr (0+8)
  5067  005FDA  5DE0               	subwf	(_rgl+9)& (0+255),w,b
  5068  005FDC  A0D8               	btfss	status,0,c
  5069  005FDE  0012               	return	
  5070                           ;rgl.c: 3123: {
  5071  005FE0  0E00               	movlw	0
  5072  005FE2  EC05  F072         	call	_VTmalejacy
  5073  005FE6  0E00               	movlw	0
  5074  005FE8  E240               	bc	L48
  5075  005FEA  EC9A  F071         	call	_Vmaleje
  5076  005FEE  E23C               	bc	l441
  5077                           ;rgl.c: 3126: {
  5078  005FF0  0E3C               	movlw	60
  5079  005FF2  C0A5  F000         	movff	?a_NewPop_MAX_CO+1,btemp
  5080  005FF6  C0A6  F001         	movff	?a_NewPop_MAX_CO+2,btemp+1
  5081  005FFA  2600               	addwf	btemp,f,c
  5082  005FFC  0E00               	movlw	0
  5083  005FFE  2201               	addwfc	btemp+1,f,c
  5084  006000  0100               	movlb	__Lparam shr (0+8)
  5085  006002  51A8               	movf	(?a_NewPop_MAX_CO+4)^(__Lparam& (0+65280))
      +                          ,w
  5086  006004  5C01               	subwf	btemp+1,w,c
  5087  006006  E102               	bnz	u3995
  5088  006008  51A7               	movf	(?a_NewPop_MAX_CO+3)^(__Lparam& (0+65280))
      +                          ,w
  5089  00600A  5C00               	subwf	btemp,w,c
  5090  00600C                     u3995:
  5091  00600C  E22D               	bc	l441
  5092                           ;rgl.c: 3128: {
  5093  00600E  010E               	movlb	F2004 shr (0+8)
  5094  006010  6BCE               	clrf	F2004& (0+255),b
  5095                           ;rgl.c: 3130: if((v-pv)>100) w=3;
  5096  006012  C0A7  F000         	movff	?a_NewPop_MAX_CO+3,btemp
  5097  006016  C0A8  F001         	movff	?a_NewPop_MAX_CO+4,btemp+1
  5098  00601A  0100               	movlb	__Lparam shr (0+8)
  5099  00601C  51A5               	movf	(?a_NewPop_MAX_CO+1)^(__Lparam& (0+65280))
      +                          ,w
  5100  00601E  5E00               	subwf	btemp,f,c
  5101  006020  51A6               	movf	(?a_NewPop_MAX_CO+2)^(__Lparam& (0+65280))
      +                          ,w
  5102  006022  5A01               	subwfb	btemp+1,f,c
  5103  006024  0E00               	movlw	0
  5104  006026  5C01               	subwf	btemp+1,w,c
  5105  006028  0E65               	movlw	101
  5106  00602A  B4D8               	btfsc	status,2,c
  5107  00602C  5C00               	subwf	btemp,w,c
  5108  00602E  E302               	bnc	l443
  5109  006030  0E03               	movlw	3
  5110  006032  D001               	goto	L14
  5111  006034                     l443:
  5112                           ;rgl.c: 3131: else w=6;
  5113  006034  0E06               	movlw	6
  5114  006036                     L14:
  5115  006036  6ED9               	movwf	fsr2l,c
  5116                           ;rgl.c: 3132: if(bw2) w=8;
  5117  006038  010E               	movlb	F2007 shr (0+8)
  5118  00603A  53D1               	movf	F2007& (0+255),f,b
  5119  00603C  E002               	bz	l445
  5120  00603E  0E08               	movlw	8
  5121  006040  6ED9               	movwf	fsr2l,c
  5122  006042                     l445:
  5123                           ;rgl.c: 3133: if(++t2>w)
  5124  006042  010E               	movlb	F2005 shr (0+8)
  5125  006044  2BCF               	incf	F2005& (0+255),f,b
  5126  006046  CECF  FFE8         	movff	F2005,wreg
  5127  00604A  60D9               	cpfslt	fsr2l,c
  5128  00604C  D00D               	goto	l441
  5129                           ;rgl.c: 3134: {
  5130  00604E  6BCF               	clrf	F2005& (0+255),b
  5131                           ;rgl.c: 3136: bw1=1;
  5132  006050  0E01               	movlw	1
  5133  006052  CFE8 FED0          	movff	wreg,F2006
  5134                           ;rgl.c: 3137: bw2=0;
  5135  006056  010E               	movlb	F2007 shr (0+8)
  5136  006058  6BD1               	clrf	F2007& (0+255),b
  5137                           ;rgl.c: 3138: if(popMAXCO>-50) popMAXCO-=kdw;
  5138  00605A  CED7  FFE8         	movff	_popMAXCO,wreg
  5139  00605E  0A80               	xorlw	128
  5140  006060  0FB1               	addlw	177
  5141  006062  E302               	bnc	l441
  5142  006064  010E               	movlb	_popMAXCO shr (0+8)
  5143  006066  07D7               	decf	_popMAXCO& (0+255),f,b
  5144  006068                     l441:
  5145                           ;rgl.c: 3139: }
  5146  006068  0E00               	movlw	0
  5147  00606A                     L48:
  5148  00606A  ECEF  F071         	call	_VTrosnacy
  5149  00606E  B0D8               	btfsc	status,0,c
  5150  006070  0012               	return	
  5151  006072  0E00               	movlw	0
  5152  006074  EC83  F071         	call	_Vrosnie
  5153  006078  B0D8               	btfsc	status,0,c
  5154  00607A  0012               	return	
  5155                           ;rgl.c: 3144: {
  5156  00607C  0100               	movlb	__Lparam shr (0+8)
  5157  00607E  0EE2               	movlw	226
  5158  006080  25A5               	addwf	(?a_NewPop_MAX_CO+1)^(__Lparam& (0+65280)
      +                          ),w
  5159  006082  6E00               	movwf	btemp,c
  5160  006084  0EFF               	movlw	255
  5161  006086  21A6               	addwfc	(?a_NewPop_MAX_CO+2)^(__Lparam& (0+65280
      +                          )),w
  5162  006088  6E01               	movwf	btemp+1,c
  5163  00608A  5001               	movf	btemp+1,w,c
  5164  00608C  5DA8               	subwf	(?a_NewPop_MAX_CO+4)^(__Lparam& (0+65280)
      +                          ),w
  5165  00608E  E102               	bnz	u4075
  5166  006090  5000               	movf	btemp,w,c
  5167  006092  5DA7               	subwf	(?a_NewPop_MAX_CO+3)^(__Lparam& (0+65280)
      +                          ),w
  5168  006094                     u4075:
  5169  006094  B0D8               	btfsc	status,0,c
  5170  006096  0012               	return	
  5171                           ;rgl.c: 3146: {
  5172  006098  010E               	movlb	F2005 shr (0+8)
  5173  00609A  6BCF               	clrf	F2005& (0+255),b
  5174                           ;rgl.c: 3148: if((pv-v)>100) w=5;
  5175  00609C  C0A5  F000         	movff	?a_NewPop_MAX_CO+1,btemp
  5176  0060A0  C0A6  F001         	movff	?a_NewPop_MAX_CO+2,btemp+1
  5177  0060A4  0100               	movlb	__Lparam shr (0+8)
  5178  0060A6  51A7               	movf	(?a_NewPop_MAX_CO+3)^(__Lparam& (0+65280))
      +                          ,w
  5179  0060A8  5E00               	subwf	btemp,f,c
  5180  0060AA  51A8               	movf	(?a_NewPop_MAX_CO+4)^(__Lparam& (0+65280))
      +                          ,w
  5181  0060AC  5A01               	subwfb	btemp+1,f,c
  5182  0060AE  0E00               	movlw	0
  5183  0060B0  5C01               	subwf	btemp+1,w,c
  5184  0060B2  0E65               	movlw	101
  5185  0060B4  B4D8               	btfsc	status,2,c
  5186  0060B6  5C00               	subwf	btemp,w,c
  5187  0060B8  E302               	bnc	l450
  5188  0060BA  0E05               	movlw	5
  5189  0060BC  D001               	goto	L15
  5190  0060BE                     l450:
  5191                           ;rgl.c: 3149: else w=8;
  5192  0060BE  0E08               	movlw	8
  5193  0060C0                     L15:
  5194  0060C0  6ED9               	movwf	fsr2l,c
  5195                           ;rgl.c: 3150: if(bw1) w=10;
  5196  0060C2  010E               	movlb	F2006 shr (0+8)
  5197  0060C4  53D0               	movf	F2006& (0+255),f,b
  5198  0060C6  E002               	bz	l452
  5199  0060C8  0E0A               	movlw	10
  5200  0060CA  6ED9               	movwf	fsr2l,c
  5201  0060CC                     l452:
  5202                           ;rgl.c: 3151: if(++t1>w)
  5203  0060CC  010E               	movlb	F2004 shr (0+8)
  5204  0060CE  2BCE               	incf	F2004& (0+255),f,b
  5205  0060D0  CECE  FFE8         	movff	F2004,wreg
  5206  0060D4  60D9               	cpfslt	fsr2l,c
  5207  0060D6  0012               	return	
  5208                           ;rgl.c: 3152: {
  5209  0060D8  6BCE               	clrf	F2004& (0+255),b
  5210                           ;rgl.c: 3154: bw1=0;
  5211  0060DA  010E               	movlb	F2006 shr (0+8)
  5212  0060DC  6BD0               	clrf	F2006& (0+255),b
  5213                           ;rgl.c: 3155: bw2=1;
  5214  0060DE  0E01               	movlw	1
  5215  0060E0  CFE8 FED1          	movff	wreg,F2007
  5216                           ;rgl.c: 3156: if(popMAXCO<50) popMAXCO+=kup;
  5217  0060E4  CED7  FFE8         	movff	_popMAXCO,wreg
  5218  0060E8  0A80               	xorlw	128
  5219  0060EA  0F4E               	addlw	-178
  5220  0060EC  B0D8               	btfsc	status,0,c
  5221  0060EE  0012               	return	
  5222  0060F0  010E               	movlb	_popMAXCO shr (0+8)
  5223  0060F2  2BD7               	incf	_popMAXCO& (0+255),f,b
  5224                           ;rgl.c: 3157: }
  5225  0060F4  0C01               	retlw	1
  5226  0060F6                     __end_of_NewPop_MAX_CO:
  5227                           ;rgl.c: 3164: void New_MIN(void)
  5228                           ;rgl.c: 3165: {
  5229  0060F6                     _New_MIN:
  5230  000000                     
  5231                           ;rgl.c: 3166: if(PWM.MINPWM+popMIN<PWM.VLO_PWM) 
      +                          PWM.MINPWM=PWM.VLO_PWM;
  5232  0060F6  C2E0  F000         	movff	_PWM+7,btemp
  5233  0060FA  6A01               	clrf	btemp+1,c
  5234  0060FC  CED9  F002         	movff	_popMIN,btemp+2
  5235  006100  C2F5  FFE8         	movff	_PWM+28,wreg
  5236  006104  2402               	addwf	btemp+2,w,c
  5237  006106  6EF6               	movwf	tblptrl,c
  5238  006108  6AF7               	clrf	tblptrh,c
  5239  00610A  B0D8               	btfsc	status,0,c
  5240  00610C  2AF7               	incf	tblptrh,f,c
  5241  00610E  BE02               	btfsc	btemp+2,7,c
  5242  006110  06F7               	decf	tblptrh,f,c
  5243  006112  50F7               	movf	tblptrh,w,c
  5244  006114  0A80               	xorlw	128
  5245  006116  6E02               	movwf	btemp+2,c
  5246  006118  5001               	movf	btemp+1,w,c
  5247  00611A  0A80               	xorlw	128
  5248  00611C  5C02               	subwf	btemp+2,w,c
  5249  00611E  E102               	bnz	u4125
  5250  006120  5000               	movf	btemp,w,c
  5251  006122  5CF6               	subwf	tblptrl,w,c
  5252  006124                     u4125:
  5253  006124  E203               	bc	l456
  5254  006126  C2E0  F2F5         	movff	_PWM+7,_PWM+28
  5255  00612A  0012               	return	
  5256  00612C                     l456:
  5257                           ;rgl.c: 3167: else
  5258  00612C  CED9  F000         	movff	_popMIN,btemp
  5259  006130  C2F5  FFE8         	movff	_PWM+28,wreg
  5260  006134  2400               	addwf	btemp,w,c
  5261  006136  6E02               	movwf	btemp+2,c
  5262  006138  6A03               	clrf	btemp+3,c
  5263  00613A  B0D8               	btfsc	status,0,c
  5264  00613C  2A03               	incf	btemp+3,f,c
  5265  00613E  BE00               	btfsc	btemp,7,c
  5266  006140  0603               	decf	btemp+3,f,c
  5267  006142  C2F6  F000         	movff	_PWM+29,btemp
  5268  006146  6A01               	clrf	btemp+1,c
  5269  006148  5001               	movf	btemp+1,w,c
  5270  00614A  0A80               	xorlw	128
  5271  00614C  6E04               	movwf	btemp+4,c
  5272  00614E  5003               	movf	btemp+3,w,c
  5273  006150  0A80               	xorlw	128
  5274  006152  5C04               	subwf	btemp+4,w,c
  5275  006154  E102               	bnz	u4135
  5276  006156  5002               	movf	btemp+2,w,c
  5277  006158  5C00               	subwf	btemp,w,c
  5278  00615A                     u4135:
  5279  00615A  E203               	bc	l458
  5280  00615C  C2F6  F2F5         	movff	_PWM+29,_PWM+28
  5281  006160  0012               	return	
  5282  006162                     l458:
  5283                           ;rgl.c: 3169: else PWM.MINPWM=PWM.MDMOD+popMIN;
  5284  006162  CED9  FFE8         	movff	_popMIN,wreg
  5285  006166  0102               	movlb	(_PWM+8) shr (0+8)
  5286  006168  25E1               	addwf	(_PWM+8)& (0+255),w,b
  5287  00616A  CFE8 F2F5          	movff	wreg,_PWM+28
  5288                           ;rgl.c: 3170: }
  5289  00616E  0012               	return	
  5290  006170                     __end_of_New_MIN:
  5291                           ;rgl.c: 3173: void New_MAX_CW(void)
  5292                           ;rgl.c: 3174: {
  5293  006170                     _New_MAX_CW:
  5294  000000                     
  5295                           ;rgl.c: 3175: if(PWM.MAXPWM+popMAXCW<PWM.MDMOD) 
      +                          PWM.MAXPWM=PWM.MDMOD;
  5296  006170  C2E1  F000         	movff	_PWM+8,btemp
  5297  006174  6A01               	clrf	btemp+1,c
  5298  006176  CED8  F002         	movff	_popMAXCW,btemp+2
  5299  00617A  C2F6  FFE8         	movff	_PWM+29,wreg
  5300  00617E  2402               	addwf	btemp+2,w,c
  5301  006180  6EF6               	movwf	tblptrl,c
  5302  006182  6AF7               	clrf	tblptrh,c
  5303  006184  B0D8               	btfsc	status,0,c
  5304  006186  2AF7               	incf	tblptrh,f,c
  5305  006188  BE02               	btfsc	btemp+2,7,c
  5306  00618A  06F7               	decf	tblptrh,f,c
  5307  00618C  50F7               	movf	tblptrh,w,c
  5308  00618E  0A80               	xorlw	128
  5309  006190  6E02               	movwf	btemp+2,c
  5310  006192  5001               	movf	btemp+1,w,c
  5311  006194  0A80               	xorlw	128
  5312  006196  5C02               	subwf	btemp+2,w,c
  5313  006198  E102               	bnz	u4145
  5314  00619A  5000               	movf	btemp,w,c
  5315  00619C  5CF6               	subwf	tblptrl,w,c
  5316  00619E                     u4145:
  5317  00619E  E203               	bc	l461
  5318  0061A0  C2E1  F2F6         	movff	_PWM+8,_PWM+29
  5319  0061A4  0012               	return	
  5320  0061A6                     l461:
  5321                           ;rgl.c: 3176: else
  5322  0061A6  CED8  F000         	movff	_popMAXCW,btemp
  5323  0061AA  C2F6  FFE8         	movff	_PWM+29,wreg
  5324  0061AE  2400               	addwf	btemp,w,c
  5325  0061B0  6E02               	movwf	btemp+2,c
  5326  0061B2  6A03               	clrf	btemp+3,c
  5327  0061B4  B0D8               	btfsc	status,0,c
  5328  0061B6  2A03               	incf	btemp+3,f,c
  5329  0061B8  BE00               	btfsc	btemp,7,c
  5330  0061BA  0603               	decf	btemp+3,f,c
  5331  0061BC  5003               	movf	btemp+3,w,c
  5332  0061BE  0A80               	xorlw	128
  5333  0061C0  0F7F               	addlw	-129
  5334  0061C2  0E00               	movlw	0
  5335  0061C4  B4D8               	btfsc	status,2,c
  5336  0061C6  5C02               	subwf	btemp+2,w,c
  5337  0061C8  E304               	bnc	l463
  5338  0061CA  0EFF               	movlw	255
  5339  0061CC  CFE8 F2F6          	movff	wreg,_PWM+29
  5340  0061D0  0CFF               	retlw	255
  5341  0061D2                     l463:
  5342                           ;rgl.c: 3178: else PWM.MAXPWM=PWM.MMAXCW+popMAXC
      +                          W;
  5343  0061D2  CED8  FFE8         	movff	_popMAXCW,wreg
  5344  0061D6  0102               	movlb	(_PWM+26) shr (0+8)
  5345  0061D8  25F3               	addwf	(_PWM+26)& (0+255),w,b
  5346  0061DA  CFE8 F2F6          	movff	wreg,_PWM+29
  5347                           ;rgl.c: 3179: }
  5348  0061DE  0012               	return	
  5349  0061E0                     __end_of_New_MAX_CW:
  5350                           ;rgl.c: 3182: void New_MAX_CO(void)
  5351                           ;rgl.c: 3183: {
  5352  0061E0                     _New_MAX_CO:
  5353  000000                     
  5354                           ;rgl.c: 3184: if(PWM.MAXPWM+popMAXCO<PWM.MDMOD) 
      +                          PWM.MAXPWM=PWM.MDMOD;
  5355  0061E0  C2E1  F000         	movff	_PWM+8,btemp
  5356  0061E4  6A01               	clrf	btemp+1,c
  5357  0061E6  CED7  F002         	movff	_popMAXCO,btemp+2
  5358  0061EA  C2F6  FFE8         	movff	_PWM+29,wreg
  5359  0061EE  2402               	addwf	btemp+2,w,c
  5360  0061F0  6EF6               	movwf	tblptrl,c
  5361  0061F2  6AF7               	clrf	tblptrh,c
  5362  0061F4  B0D8               	btfsc	status,0,c
  5363  0061F6  2AF7               	incf	tblptrh,f,c
  5364  0061F8  BE02               	btfsc	btemp+2,7,c
  5365  0061FA  06F7               	decf	tblptrh,f,c
  5366  0061FC  50F7               	movf	tblptrh,w,c
  5367  0061FE  0A80               	xorlw	128
  5368  006200  6E02               	movwf	btemp+2,c
  5369  006202  5001               	movf	btemp+1,w,c
  5370  006204  0A80               	xorlw	128
  5371  006206  5C02               	subwf	btemp+2,w,c
  5372  006208  E102               	bnz	u4165
  5373  00620A  5000               	movf	btemp,w,c
  5374  00620C  5CF6               	subwf	tblptrl,w,c
  5375  00620E                     u4165:
  5376  00620E  E203               	bc	l466
  5377  006210  C2E1  F2F6         	movff	_PWM+8,_PWM+29
  5378  006214  0012               	return	
  5379  006216                     l466:
  5380                           ;rgl.c: 3185: else
  5381  006216  CED7  F000         	movff	_popMAXCO,btemp
  5382  00621A  C2F6  FFE8         	movff	_PWM+29,wreg
  5383  00621E  2400               	addwf	btemp,w,c
  5384  006220  6E02               	movwf	btemp+2,c
  5385  006222  6A03               	clrf	btemp+3,c
  5386  006224  B0D8               	btfsc	status,0,c
  5387  006226  2A03               	incf	btemp+3,f,c
  5388  006228  BE00               	btfsc	btemp,7,c
  5389  00622A  0603               	decf	btemp+3,f,c
  5390  00622C  5003               	movf	btemp+3,w,c
  5391  00622E  0A80               	xorlw	128
  5392  006230  0F7F               	addlw	-129
  5393  006232  0E00               	movlw	0
  5394  006234  B4D8               	btfsc	status,2,c
  5395  006236  5C02               	subwf	btemp+2,w,c
  5396  006238  E304               	bnc	l468
  5397  00623A  0EFF               	movlw	255
  5398  00623C  CFE8 F2F6          	movff	wreg,_PWM+29
  5399  006240  0CFF               	retlw	255
  5400  006242                     l468:
  5401                           ;rgl.c: 3187: else PWM.MAXPWM=PWM.MMAXCO+popMAXC
      +                          O;
  5402  006242  CED7  FFE8         	movff	_popMAXCO,wreg
  5403  006246  0102               	movlb	(_PWM+25) shr (0+8)
  5404  006248  25F2               	addwf	(_PWM+25)& (0+255),w,b
  5405  00624A  CFE8 F2F6          	movff	wreg,_PWM+29
  5406                           ;rgl.c: 3188: }
  5407  00624E  0012               	return	
  5408  006250                     __end_of_New_MAX_CO:
  5409                           ;rgl.c: 3196: unsigned char CalkVNTtoPopPWM(unsi
      +                          gned char nst,unsigned char pop);
  5410                           ;rgl.c: 3200: unsigned char New_SMOD(unsigned ch
      +                          ar pv)
  5411                           ;rgl.c: 3201: {
  5412  006250                     _New_SMOD:
  5413  000000                     
  5414                           ;_pv stored from wreg
  5415  006250  0100               	movlb	__Lparam shr (0+8)
  5416  006252  6FAB               	movwf	?a_New_SMOD^(__Lparam& (0+65280)),b
  5417                           ;rgl.c: 3202: unsigned char pw;
  5418  006254  D00C               	goto	l472
  5419  006256                     l473:
  5420                           ;rgl.c: 3206: {
  5421                           ;rgl.c: 3208: {
  5422  006256  0100               	movlb	__Lparam shr (0+8)
  5423  006258  51AB               	movf	?a_New_SMOD^(__Lparam& (0+65280)),w
  5424  00625A  ECC0  F063         	call	_CalkVNTtoPWM
  5425  00625E  D011               	goto	L17
  5426                           ;rgl.c: 3210: break;
  5427  006260                     l474:
  5428                           ;rgl.c: 3211: }
  5429                           ;rgl.c: 3213: {
  5430  006260  0E02               	movlw	2
  5431  006262  0100               	movlb	__Lparam shr (0+8)
  5432  006264  6FB2               	movwf	?_CalkVNTtoPopPWM^(__Lparam& (0+65280)),b
  5433  006266  51AB               	movf	?a_New_SMOD^(__Lparam& (0+65280)),w
  5434  006268  ECC8  F063         	call	_CalkVNTtoPopPWM
  5435  00626C  D00A               	goto	L17
  5436                           ;rgl.c: 3220: break;
  5437  00626E                     l472:
  5438  00626E  C2D0  FFE8         	movff	_DtKNF+34,wreg
  5439  006272  0A00               	xorlw	0
  5440  006274  E0F0               	bz	l473
  5441  006276  0A01               	xorlw	1
  5442  006278  E0F3               	bz	l474
  5443                           ;rgl.c: 3215: break;
  5444                           ;rgl.c: 3216: }
  5445                           ;rgl.c: 3218: {
  5446  00627A  0100               	movlb	__Lparam shr (0+8)
  5447  00627C  51AB               	movf	?a_New_SMOD^(__Lparam& (0+65280)),w
  5448  00627E  ECC0  F063         	call	_CalkVNTtoPWM
  5449  006282                     L17:
  5450  006282  0100               	movlb	__Lparam shr (0+8)
  5451  006284  6FAC               	movwf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),b
  5452                           ;rgl.c: 3223: if(pw+popSMOD<PWM.VLO_PWM) pw=PWM.
      +                          VLO_PWM;
  5453  006286  CEDC  F000         	movff	_popSMOD,btemp
  5454  00628A  51AC               	movf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),w
  5455  00628C  2400               	addwf	btemp,w,c
  5456  00628E  6E02               	movwf	btemp+2,c
  5457  006290  6A03               	clrf	btemp+3,c
  5458  006292  B0D8               	btfsc	status,0,c
  5459  006294  2A03               	incf	btemp+3,f,c
  5460  006296  BE00               	btfsc	btemp,7,c
  5461  006298  0603               	decf	btemp+3,f,c
  5462  00629A  C2E0  F000         	movff	_PWM+7,btemp
  5463  00629E  6A01               	clrf	btemp+1,c
  5464  0062A0  5003               	movf	btemp+3,w,c
  5465  0062A2  0A80               	xorlw	128
  5466  0062A4  6E04               	movwf	btemp+4,c
  5467  0062A6  5001               	movf	btemp+1,w,c
  5468  0062A8  0A80               	xorlw	128
  5469  0062AA  5C04               	subwf	btemp+4,w,c
  5470  0062AC  E102               	bnz	u4185
  5471  0062AE  5000               	movf	btemp,w,c
  5472  0062B0  5C02               	subwf	btemp+2,w,c
  5473  0062B2                     u4185:
  5474  0062B2  E203               	bc	l476
  5475  0062B4  C2E0  F0AC         	movff	_PWM+7,?a_New_SMOD+1
  5476  0062B8  D01F               	goto	l477
  5477  0062BA                     l476:
  5478                           ;rgl.c: 3224: else
  5479  0062BA  CEDC  F000         	movff	_popSMOD,btemp
  5480  0062BE  0100               	movlb	__Lparam shr (0+8)
  5481  0062C0  51AC               	movf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),w
  5482  0062C2  2400               	addwf	btemp,w,c
  5483  0062C4  6E02               	movwf	btemp+2,c
  5484  0062C6  6A03               	clrf	btemp+3,c
  5485  0062C8  B0D8               	btfsc	status,0,c
  5486  0062CA  2A03               	incf	btemp+3,f,c
  5487  0062CC  BE00               	btfsc	btemp,7,c
  5488  0062CE  0603               	decf	btemp+3,f,c
  5489  0062D0  C2E4  F000         	movff	_PWM+11,btemp
  5490  0062D4  6A01               	clrf	btemp+1,c
  5491  0062D6  5001               	movf	btemp+1,w,c
  5492  0062D8  0A80               	xorlw	128
  5493  0062DA  6E04               	movwf	btemp+4,c
  5494  0062DC  5003               	movf	btemp+3,w,c
  5495  0062DE  0A80               	xorlw	128
  5496  0062E0  5C04               	subwf	btemp+4,w,c
  5497  0062E2  E102               	bnz	u4195
  5498  0062E4  5002               	movf	btemp+2,w,c
  5499  0062E6  5C00               	subwf	btemp,w,c
  5500  0062E8                     u4195:
  5501  0062E8  E203               	bc	l478
  5502  0062EA  C2E4  F0AC         	movff	_PWM+11,?a_New_SMOD+1
  5503  0062EE  D004               	goto	l477
  5504  0062F0                     l478:
  5505                           ;rgl.c: 3226: else pw=pw+popSMOD;
  5506  0062F0  CEDC  FFE8         	movff	_popSMOD,wreg
  5507  0062F4  0100               	movlb	__Lparam shr (0+8)
  5508  0062F6  27AC               	addwf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),f,b
  5509  0062F8                     l477:
  5510                           ;rgl.c: 3227: return pw;
  5511  0062F8  0100               	movlb	__Lparam shr (0+8)
  5512  0062FA  51AC               	movf	(?a_New_SMOD+1)^(__Lparam& (0+65280)),w
  5513  0062FC  0012               	return	
  5514                           ;rgl.c: 3228: }
  5515  0062FE                     __end_of_New_SMOD:
  5516                           ;rgl.c: 3232: void NewPop_SMOD(unsigned char ppv
      +                          )
  5517                           ;rgl.c: 3233: {
  5518  0062FE                     _NewPop_SMOD:
  5519  000000                     
  5520                           ;_ppv stored from wreg
  5521                           ;rgl.c: 3234: unsigned int v,pv;
  5522  0062FE  CFE8 F000          	movff	wreg,btemp
  5523  006302  6A01               	clrf	btemp+1,c
  5524  006304  C000  F0B2         	movff	btemp,?_SetNstVNT
  5525  006308  C001  F0B3         	movff	btemp+1,?_SetNstVNT+1
  5526                           ;_ppv stored from wreg
  5527  00630C  0100               	movlb	__Lparam shr (0+8)
  5528  00630E  6FAD               	movwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          b
  5529  006310  EC7B  F071         	call	_SetNstVNT	;wreg free
  5530                           ;rgl.c: 3240: v=M.rVVNT;
  5531  006314  C325  F0AE         	movff	_M+31,?a_NewPop_SMOD+3
  5532  006318  C326  F0AF         	movff	_M+32,?a_NewPop_SMOD+4
  5533                           ;rgl.c: 3243: switch(DtKNF.rfan)
  5534  00631C  D00C               	goto	l482
  5535  00631E                     l483:
  5536                           ;rgl.c: 3244: {
  5537                           ;rgl.c: 3246: {
  5538  00631E  0100               	movlb	__Lparam shr (0+8)
  5539  006320  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  5540  006322  ECC0  F063         	call	_CalkVNTtoPWM
  5541  006326  D011               	goto	L19
  5542                           ;rgl.c: 3248: break;
  5543  006328                     l484:
  5544                           ;rgl.c: 3249: }
  5545                           ;rgl.c: 3251: {
  5546  006328  0E02               	movlw	2
  5547  00632A  0100               	movlb	__Lparam shr (0+8)
  5548  00632C  6FB2               	movwf	?_CalkVNTtoPopPWM^(__Lparam& (0+65280)),b
  5549  00632E  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  5550  006330  ECC8  F063         	call	_CalkVNTtoPopPWM
  5551  006334  D00A               	goto	L19
  5552                           ;rgl.c: 3258: break;
  5553  006336                     l482:
  5554  006336  C2D0  FFE8         	movff	_DtKNF+34,wreg
  5555  00633A  0A00               	xorlw	0
  5556  00633C  E0F0               	bz	l483
  5557  00633E  0A01               	xorlw	1
  5558  006340  E0F3               	bz	l484
  5559                           ;rgl.c: 3253: break;
  5560                           ;rgl.c: 3254: }
  5561                           ;rgl.c: 3256: {
  5562  006342  0100               	movlb	__Lparam shr (0+8)
  5563  006344  51B0               	movf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),w
  5564  006346  ECC0  F063         	call	_CalkVNTtoPWM
  5565  00634A                     L19:
  5566  00634A  0100               	movlb	__Lparam shr (0+8)
  5567  00634C  6FAB               	movwf	?a_NewPop_SMOD^(__Lparam& (0+65280)),b
  5568                           ;rgl.c: 3262: pv=ppv*100;
  5569  00634E  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  5570  006350  0D64               	mullw	100
  5571  006352  CFF3 F0B0          	movff	prodl,?a_NewPop_SMOD+5
  5572  006356  CFF4 F0B1          	movff	prodh,?a_NewPop_SMOD+6
  5573                           ;rgl.c: 3265: if(pw<=PWM.MDMOD) mrg=1;
  5574  00635A  51AB               	movf	?a_NewPop_SMOD^(__Lparam& (0+65280)),w
  5575  00635C  0102               	movlb	(_PWM+8) shr (0+8)
  5576  00635E  5DE1               	subwf	(_PWM+8)& (0+255),w,b
  5577  006360  E303               	bnc	l486
  5578  006362  0E01               	movlw	1
  5579  006364  0100               	movlb	__Lparam shr (0+8)
  5580  006366  D006               	goto	L20
  5581  006368                     l486:
  5582                           ;rgl.c: 3266: else
  5583  006368  0100               	movlb	__Lparam shr (0+8)
  5584  00636A  C2E4  FFE8         	movff	_PWM+11,wreg
  5585  00636E  5DAB               	subwf	?a_NewPop_SMOD^(__Lparam& (0+65280)),w
  5586  006370  E303               	bnc	l488
  5587  006372  0E02               	movlw	2
  5588  006374                     L20:
  5589  006374  6FAC               	movwf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),
      +                          b
  5590  006376  D002               	goto	l487
  5591  006378                     l488:
  5592                           ;rgl.c: 3268: else mrg=0;
  5593  006378  0100               	movlb	__Lparam shr (0+8)
  5594  00637A  6BAC               	clrf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),b
  5595  00637C                     l487:
  5596                           ;rgl.c: 3271: if(bpv!=ppv)
  5597  00637C  CED2  FFE8         	movff	F2029,wreg
  5598  006380  0100               	movlb	__Lparam shr (0+8)
  5599  006382  19AD               	xorwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          w
  5600  006384  E05A               	bz	l490
  5601                           ;rgl.c: 3272: {
  5602  006386  010E               	movlb	F2030 shr (0+8)
  5603  006388  6BD3               	clrf	F2030& (0+255),b
  5604                           ;rgl.c: 3274: t2=0;
  5605  00638A  010E               	movlb	F2031 shr (0+8)
  5606  00638C  6BD4               	clrf	F2031& (0+255),b
  5607                           ;rgl.c: 3275: bw1=0;
  5608  00638E  010E               	movlb	F2032 shr (0+8)
  5609  006390  6BD5               	clrf	F2032& (0+255),b
  5610                           ;rgl.c: 3276: bw2=0;
  5611  006392  010E               	movlb	F2033 shr (0+8)
  5612  006394  6BD6               	clrf	F2033& (0+255),b
  5613                           ;rgl.c: 3278: if(bpv>ppv)
  5614  006396  CED2  FFE8         	movff	F2029,wreg
  5615  00639A  0100               	movlb	__Lparam shr (0+8)
  5616  00639C  61AD               	cpfslt	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280))
      +                          ,b
  5617  00639E  D01E               	goto	l491
  5618                           ;rgl.c: 3279: {
  5619  0063A0  CEDC  FFE8         	movff	_popSMOD,wreg
  5620  0063A4  0A80               	xorlw	128
  5621  0063A6  0F7F               	addlw	-129
  5622  0063A8  E30D               	bnc	l492
  5623                           ;rgl.c: 3282: {
  5624  0063AA  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  5625  0063AC  010E               	movlb	F2029 shr (0+8)
  5626  0063AE  5DD2               	subwf	F2029& (0+255),w,b
  5627  0063B0  010E               	movlb	_popSMOD shr (0+8)
  5628  0063B2  5FDC               	subwf	_popSMOD& (0+255),f,b
  5629                           ;rgl.c: 3284: if(popSMOD<0) {bw2=1;popSMOD=0;}
  5630  0063B4  CEDC  F000         	movff	_popSMOD,btemp
  5631  0063B8  AE00               	btfss	btemp,7,c
  5632  0063BA  D030               	goto	l496
  5633  0063BC                     u4250:
  5634  0063BC  0E01               	movlw	1
  5635  0063BE  CFE8 FED6          	movff	wreg,F2033
  5636  0063C2  D02A               	goto	L28
  5637                           ;rgl.c: 3285: }
  5638  0063C4                     l492:
  5639                           ;rgl.c: 3286: else
  5640  0063C4  0100               	movlb	__Lparam shr (0+8)
  5641  0063C6  51AD               	movf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),w
  5642  0063C8  010E               	movlb	F2029 shr (0+8)
  5643  0063CA  5DD2               	subwf	F2029& (0+255),w,b
  5644  0063CC  010E               	movlb	_popSMOD shr (0+8)
  5645  0063CE  27DC               	addwf	_popSMOD& (0+255),f,b
  5646                           ;rgl.c: 3289: if(popSMOD>0) {bw2=1;popSMOD=0;}
  5647  0063D0  CEDC  FFE8         	movff	_popSMOD,wreg
  5648  0063D4  0A80               	xorlw	128
  5649  0063D6  0F7F               	addlw	-129
  5650  0063D8  E321               	bnc	l496
  5651  0063DA  D7F0               	goto	u4250
  5652                           ;rgl.c: 3290: }
  5653  0063DC                     l491:
  5654                           ;rgl.c: 3293: else
  5655  0063DC  CEDC  FFE8         	movff	_popSMOD,wreg
  5656  0063E0  0A80               	xorlw	128
  5657  0063E2  0F7F               	addlw	-129
  5658  0063E4  E30B               	bnc	l497
  5659                           ;rgl.c: 3296: {
  5660  0063E6  CED2  FFE8         	movff	F2029,wreg
  5661  0063EA  0100               	movlb	__Lparam shr (0+8)
  5662  0063EC  5DAD               	subwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          w
  5663  0063EE  010E               	movlb	_popSMOD shr (0+8)
  5664  0063F0  5FDC               	subwf	_popSMOD& (0+255),f,b
  5665                           ;rgl.c: 3298: if(popSMOD<0) {bw1=1;popSMOD=0;}
  5666  0063F2  CEDC  F000         	movff	_popSMOD,btemp
  5667  0063F6  AE00               	btfss	btemp,7,c
  5668  0063F8  D011               	goto	l496
  5669  0063FA  D00B               	goto	L50
  5670                           ;rgl.c: 3299: }
  5671  0063FC                     l497:
  5672                           ;rgl.c: 3300: else
  5673  0063FC  CED2  FFE8         	movff	F2029,wreg
  5674  006400  0100               	movlb	__Lparam shr (0+8)
  5675  006402  5DAD               	subwf	(?a_NewPop_SMOD+2)^(__Lparam& (0+65280)),
      +                          w
  5676  006404  010E               	movlb	_popSMOD shr (0+8)
  5677  006406  27DC               	addwf	_popSMOD& (0+255),f,b
  5678                           ;rgl.c: 3303: if(popSMOD>0) {bw1=1;popSMOD=0;}
  5679  006408  CEDC  FFE8         	movff	_popSMOD,wreg
  5680  00640C  0A80               	xorlw	128
  5681  00640E  0F7F               	addlw	-129
  5682  006410  E305               	bnc	l496
  5683  006412                     L50:
  5684  006412  0E01               	movlw	1
  5685  006414  CFE8 FED5          	movff	wreg,F2032
  5686  006418                     L28:
  5687  006418  010E               	movlb	_popSMOD shr (0+8)
  5688  00641A  6BDC               	clrf	_popSMOD& (0+255),b
  5689  00641C                     l496:
  5690                           ;rgl.c: 3304: }
  5691  00641C  CEDC  FFE8         	movff	_popSMOD,wreg
  5692  006420  0A80               	xorlw	128
  5693  006422  0F7F               	addlw	-129
  5694  006424  E302               	bnc	l501
  5695  006426  010E               	movlb	_popSMOD shr (0+8)
  5696  006428  07DC               	decf	_popSMOD& (0+255),f,b
  5697  00642A                     l501:
  5698                           ;rgl.c: 3307: if(popSMOD<0) popSMOD++;
  5699  00642A  CEDC  F000         	movff	_popSMOD,btemp
  5700  00642E  AE00               	btfss	btemp,7,c
  5701  006430  D002               	goto	l502
  5702  006432  010E               	movlb	_popSMOD shr (0+8)
  5703  006434  2BDC               	incf	_popSMOD& (0+255),f,b
  5704  006436                     l502:
  5705                           ;rgl.c: 3308: bpv=ppv;
  5706  006436  C0AD  FED2         	movff	?a_NewPop_SMOD+2,F2029
  5707  00643A                     l490:
  5708                           ;rgl.c: 3309: }
  5709  00643A  0E00               	movlw	0
  5710  00643C  EC05  F072         	call	_VTmalejacy
  5711  006440  0E00               	movlw	0
  5712  006442  E265               	bc	L49
  5713  006444  EC9A  F071         	call	_Vmaleje
  5714  006448  E261               	bc	l503
  5715                           ;rgl.c: 3317: {
  5716  00644A  0100               	movlb	__Lparam shr (0+8)
  5717  00644C  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  5718  00644E  E10E               	bnz	u4371
  5719  006450  0E3C               	movlw	60
  5720  006452  C0B0  F000         	movff	?a_NewPop_SMOD+5,btemp
  5721  006456  C0B1  F001         	movff	?a_NewPop_SMOD+6,btemp+1
  5722  00645A  2600               	addwf	btemp,f,c
  5723  00645C  0E00               	movlw	0
  5724  00645E  2201               	addwfc	btemp+1,f,c
  5725  006460  51AF               	movf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),w
  5726  006462  5C01               	subwf	btemp+1,w,c
  5727  006464  E102               	bnz	u4365
  5728  006466  51AE               	movf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),w
  5729  006468  5C00               	subwf	btemp,w,c
  5730  00646A                     u4365:
  5731  00646A  E323               	bnc	u4450
  5732  00646C                     u4371:
  5733  00646C  0100               	movlb	__Lparam shr (0+8)
  5734  00646E  05AC               	decf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  5735  006470  E10E               	bnz	u4411
  5736  006472  0E3C               	movlw	60
  5737  006474  C0B0  F000         	movff	?a_NewPop_SMOD+5,btemp
  5738  006478  C0B1  F001         	movff	?a_NewPop_SMOD+6,btemp+1
  5739  00647C  2600               	addwf	btemp,f,c
  5740  00647E  0E00               	movlw	0
  5741  006480  2201               	addwfc	btemp+1,f,c
  5742  006482  5001               	movf	btemp+1,w,c
  5743  006484  5DAF               	subwf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),
      +                          w
  5744  006486  E102               	bnz	u4395
  5745  006488  5000               	movf	btemp,w,c
  5746  00648A  5DAE               	subwf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),
      +                          w
  5747  00648C                     u4395:
  5748  00648C  E212               	bc	u4450
  5749  00648E                     u4411:
  5750  00648E  0100               	movlb	__Lparam shr (0+8)
  5751  006490  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  5752  006492  0A02               	xorlw	2
  5753  006494  E13B               	bnz	l503
  5754  006496  0E3C               	movlw	60
  5755  006498  C0B0  F000         	movff	?a_NewPop_SMOD+5,btemp
  5756  00649C  C0B1  F001         	movff	?a_NewPop_SMOD+6,btemp+1
  5757  0064A0  2600               	addwf	btemp,f,c
  5758  0064A2  0E00               	movlw	0
  5759  0064A4  2201               	addwfc	btemp+1,f,c
  5760  0064A6  5001               	movf	btemp+1,w,c
  5761  0064A8  5DAF               	subwf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),
      +                          w
  5762  0064AA  E102               	bnz	u4435
  5763  0064AC  5000               	movf	btemp,w,c
  5764  0064AE  5DAE               	subwf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),
      +                          w
  5765  0064B0                     u4435:
  5766  0064B0  E32D               	bnc	l503
  5767  0064B2                     u4450:
  5768                           ;rgl.c: 3319: {
  5769  0064B2  010E               	movlb	F2030 shr (0+8)
  5770  0064B4  6BD3               	clrf	F2030& (0+255),b
  5771                           ;rgl.c: 3321: if((v-pv)>100) w=3;
  5772  0064B6  C0AE  F000         	movff	?a_NewPop_SMOD+3,btemp
  5773  0064BA  C0AF  F001         	movff	?a_NewPop_SMOD+4,btemp+1
  5774  0064BE  0100               	movlb	__Lparam shr (0+8)
  5775  0064C0  51B0               	movf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),w
  5776  0064C2  5E00               	subwf	btemp,f,c
  5777  0064C4  51B1               	movf	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280)),w
  5778  0064C6  5A01               	subwfb	btemp+1,f,c
  5779  0064C8  0E00               	movlw	0
  5780  0064CA  5C01               	subwf	btemp+1,w,c
  5781  0064CC  0E65               	movlw	101
  5782  0064CE  B4D8               	btfsc	status,2,c
  5783  0064D0  5C00               	subwf	btemp,w,c
  5784  0064D2  E302               	bnc	l505
  5785  0064D4  0E03               	movlw	3
  5786  0064D6  D001               	goto	L22
  5787  0064D8                     l505:
  5788                           ;rgl.c: 3322: else w=6;
  5789  0064D8  0E06               	movlw	6
  5790  0064DA                     L22:
  5791  0064DA  6ED9               	movwf	fsr2l,c
  5792                           ;rgl.c: 3323: if(bw2) w=8;
  5793  0064DC  010E               	movlb	F2033 shr (0+8)
  5794  0064DE  53D6               	movf	F2033& (0+255),f,b
  5795  0064E0  E002               	bz	l507
  5796  0064E2  0E08               	movlw	8
  5797  0064E4  6ED9               	movwf	fsr2l,c
  5798  0064E6                     l507:
  5799                           ;rgl.c: 3324: if(++t2>w)
  5800  0064E6  010E               	movlb	F2031 shr (0+8)
  5801  0064E8  2BD4               	incf	F2031& (0+255),f,b
  5802  0064EA  CED4  FFE8         	movff	F2031,wreg
  5803  0064EE  60D9               	cpfslt	fsr2l,c
  5804  0064F0  D00D               	goto	l503
  5805                           ;rgl.c: 3325: {
  5806  0064F2  6BD4               	clrf	F2031& (0+255),b
  5807                           ;rgl.c: 3327: bw1=1;
  5808  0064F4  0E01               	movlw	1
  5809  0064F6  CFE8 FED5          	movff	wreg,F2032
  5810                           ;rgl.c: 3328: bw2=0;
  5811  0064FA  010E               	movlb	F2033 shr (0+8)
  5812  0064FC  6BD6               	clrf	F2033& (0+255),b
  5813                           ;rgl.c: 3329: if(popSMOD>-50) popSMOD-=kdw;
  5814  0064FE  CEDC  FFE8         	movff	_popSMOD,wreg
  5815  006502  0A80               	xorlw	128
  5816  006504  0FB1               	addlw	177
  5817  006506  E302               	bnc	l503
  5818  006508  010E               	movlb	_popSMOD shr (0+8)
  5819  00650A  07DC               	decf	_popSMOD& (0+255),f,b
  5820  00650C                     l503:
  5821                           ;rgl.c: 3330: }
  5822  00650C  0E00               	movlw	0
  5823  00650E                     L49:
  5824  00650E  ECEF  F071         	call	_VTrosnacy
  5825  006512  B0D8               	btfsc	status,0,c
  5826  006514  0012               	return	
  5827  006516  0E00               	movlw	0
  5828  006518  EC83  F071         	call	_Vrosnie
  5829  00651C  B0D8               	btfsc	status,0,c
  5830  00651E  0012               	return	
  5831                           ;rgl.c: 3336: {
  5832  006520  0100               	movlb	__Lparam shr (0+8)
  5833  006522  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  5834  006524  E10C               	bnz	u4551
  5835  006526  0EE2               	movlw	226
  5836  006528  25B0               	addwf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),
      +                          w
  5837  00652A  6E00               	movwf	btemp,c
  5838  00652C  0EFF               	movlw	255
  5839  00652E  21B1               	addwfc	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280))
      +                          ,w
  5840  006530  6E01               	movwf	btemp+1,c
  5841  006532  5001               	movf	btemp+1,w,c
  5842  006534  5DAF               	subwf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),
      +                          w
  5843  006536  E102               	bnz	u4545
  5844  006538  5000               	movf	btemp,w,c
  5845  00653A  5DAE               	subwf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),
      +                          w
  5846  00653C                     u4545:
  5847  00653C  E321               	bnc	u4630
  5848  00653E                     u4551:
  5849  00653E  0100               	movlb	__Lparam shr (0+8)
  5850  006540  05AC               	decf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  5851  006542  E10C               	bnz	u4591
  5852  006544  0EE2               	movlw	226
  5853  006546  25B0               	addwf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),
      +                          w
  5854  006548  6E00               	movwf	btemp,c
  5855  00654A  0EFF               	movlw	255
  5856  00654C  21B1               	addwfc	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280))
      +                          ,w
  5857  00654E  6E01               	movwf	btemp+1,c
  5858  006550  51AF               	movf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),w
  5859  006552  5C01               	subwf	btemp+1,w,c
  5860  006554  E102               	bnz	u4575
  5861  006556  51AE               	movf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),w
  5862  006558  5C00               	subwf	btemp,w,c
  5863  00655A                     u4575:
  5864  00655A  E212               	bc	u4630
  5865  00655C                     u4591:
  5866  00655C  0100               	movlb	__Lparam shr (0+8)
  5867  00655E  51AC               	movf	(?a_NewPop_SMOD+1)^(__Lparam& (0+65280)),w
  5868  006560  0A02               	xorlw	2
  5869  006562  A4D8               	btfss	status,2,c
  5870  006564  0012               	return	
  5871  006566  0EE2               	movlw	226
  5872  006568  25B0               	addwf	(?a_NewPop_SMOD+5)^(__Lparam& (0+65280)),
      +                          w
  5873  00656A  6E00               	movwf	btemp,c
  5874  00656C  0EFF               	movlw	255
  5875  00656E  21B1               	addwfc	(?a_NewPop_SMOD+6)^(__Lparam& (0+65280))
      +                          ,w
  5876  006570  6E01               	movwf	btemp+1,c
  5877  006572  51AF               	movf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),w
  5878  006574  5C01               	subwf	btemp+1,w,c
  5879  006576  E102               	bnz	u4615
  5880  006578  51AE               	movf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),w
  5881  00657A  5C00               	subwf	btemp,w,c
  5882  00657C                     u4615:
  5883  00657C  A0D8               	btfss	status,0,c
  5884  00657E  0012               	return	
  5885  006580                     u4630:
  5886                           ;rgl.c: 3338: {
  5887  006580  010E               	movlb	F2031 shr (0+8)
  5888  006582  6BD4               	clrf	F2031& (0+255),b
  5889                           ;rgl.c: 3342: if((pv-v)>100) w=5;
  5890  006584  C0B0  F000         	movff	?a_NewPop_SMOD+5,btemp
  5891  006588  C0B1  F001         	movff	?a_NewPop_SMOD+6,btemp+1
  5892  00658C  0100               	movlb	__Lparam shr (0+8)
  5893  00658E  51AE               	movf	(?a_NewPop_SMOD+3)^(__Lparam& (0+65280)),w
  5894  006590  5E00               	subwf	btemp,f,c
  5895  006592  51AF               	movf	(?a_NewPop_SMOD+4)^(__Lparam& (0+65280)),w
  5896  006594  5A01               	subwfb	btemp+1,f,c
  5897  006596  0E00               	movlw	0
  5898  006598  5C01               	subwf	btemp+1,w,c
  5899  00659A  0E65               	movlw	101
  5900  00659C  B4D8               	btfsc	status,2,c
  5901  00659E  5C00               	subwf	btemp,w,c
  5902  0065A0  E302               	bnc	l512
  5903  0065A2  0E05               	movlw	5
  5904  0065A4  D001               	goto	L23
  5905  0065A6                     l512:
  5906                           ;rgl.c: 3343: else w=8;
  5907  0065A6  0E08               	movlw	8
  5908  0065A8                     L23:
  5909  0065A8  6ED9               	movwf	fsr2l,c
  5910                           ;rgl.c: 3344: if(bw1) w=10;
  5911  0065AA  010E               	movlb	F2032 shr (0+8)
  5912  0065AC  53D5               	movf	F2032& (0+255),f,b
  5913  0065AE  E002               	bz	l514
  5914  0065B0  0E0A               	movlw	10
  5915  0065B2  6ED9               	movwf	fsr2l,c
  5916  0065B4                     l514:
  5917                           ;rgl.c: 3345: if(++t1>w)
  5918  0065B4  010E               	movlb	F2030 shr (0+8)
  5919  0065B6  2BD3               	incf	F2030& (0+255),f,b
  5920  0065B8  CED3  FFE8         	movff	F2030,wreg
  5921  0065BC  60D9               	cpfslt	fsr2l,c
  5922  0065BE  0012               	return	
  5923                           ;rgl.c: 3346: {
  5924  0065C0  6BD3               	clrf	F2030& (0+255),b
  5925                           ;rgl.c: 3348: bw1=0;
  5926  0065C2  010E               	movlb	F2032 shr (0+8)
  5927  0065C4  6BD5               	clrf	F2032& (0+255),b
  5928                           ;rgl.c: 3349: bw2=1;
  5929  0065C6  0E01               	movlw	1
  5930  0065C8  CFE8 FED6          	movff	wreg,F2033
  5931                           ;rgl.c: 3350: if(popSMOD<50) popSMOD+=kup;
  5932  0065CC  CEDC  FFE8         	movff	_popSMOD,wreg
  5933  0065D0  0A80               	xorlw	128
  5934  0065D2  0F4E               	addlw	-178
  5935  0065D4  B0D8               	btfsc	status,0,c
  5936  0065D6  0012               	return	
  5937  0065D8  010E               	movlb	_popSMOD shr (0+8)
  5938  0065DA  2BDC               	incf	_popSMOD& (0+255),f,b
  5939                           ;rgl.c: 3351: }
  5940  0065DC  0C01               	retlw	1
  5941  0065DE                     __end_of_NewPop_SMOD:
  5942                           ;rgl.c: 3476: unsigned char ProcToMod(unsigned c
      +                          har prvnt)
  5943                           ;rgl.c: 3477: {
  5944  0065DE                     _ProcToMod:
  5945  000000                     
  5946                           ;_prvnt stored from wreg
  5947  0065DE  0100               	movlb	__Lparam shr (0+8)
  5948  0065E0  6FA9               	movwf	?a_ProcToMod^(__Lparam& (0+65280)),b
  5949                           ;rgl.c: 3478: unsigned char pv;
  5950  0065E2  51A9               	movf	?a_ProcToMod^(__Lparam& (0+65280)),w
  5951  0065E4  ECD1  F063         	call	_ProcToVNT
  5952  0065E8  0100               	movlb	__Lparam shr (0+8)
  5953  0065EA  6FAA               	movwf	(?a_ProcToMod+1)^(__Lparam& (0+65280)),b
  5954                           ;rgl.c: 3481: if(RTdS(12)>1)
  5955  0065EC  0E0C               	movlw	12
  5956  0065EE  EC45  F07E         	call	_RTdS
  5957  0065F2  6E00               	movwf	btemp,c
  5958  0065F4  0E02               	movlw	2
  5959  0065F6  5C00               	subwf	btemp,w,c
  5960  0065F8  E306               	bnc	l518
  5961                           ;rgl.c: 3482: {
  5962  0065FA  0E0C               	movlw	12
  5963  0065FC  EC33  F07E         	call	_StartRTdS
  5964                           ;rgl.c: 3484: NewPop_SMOD(pv);
  5965  006600  0100               	movlb	__Lparam shr (0+8)
  5966  006602  51AA               	movf	(?a_ProcToMod+1)^(__Lparam& (0+65280)),w
  5967  006604  DE7C               	call	_NewPop_SMOD
  5968  006606                     l518:
  5969                           ;rgl.c: 3485: }
  5970  006606  0100               	movlb	__Lparam shr (0+8)
  5971  006608  51AA               	movf	(?a_ProcToMod+1)^(__Lparam& (0+65280)),w
  5972  00660A  D622               	goto	_New_SMOD
  5973                           ;rgl.c: 3489: }
  5974  00660C                     __end_of_ProcToMod:
  5975                           ;rgl.c: 3560: bit Trosnie(const unsigned char t)
  5976                           ;rgl.c: 3561: {
  5977  00660C                     _Trosnie:
  5978  000000                     
  5979                           ; _t loaded to fsr2l
  5980  00660C  6ED9               	movwf	fsr2l,c
  5981                           ;rgl.c: 3562: return (rgl.x_dt>t);
  5982  00660E  C3DB  F000         	movff	_rgl+4,btemp
  5983  006612  50D9               	movf	fsr2l,w,c
  5984  006614  BE00               	btfsc	btemp,7,c
  5985  006616  D005               	goto	u4690
  5986  006618  0AFF               	xorlw	255
  5987  00661A  2400               	addwf	btemp,w,c
  5988  00661C  E302               	bnc	u4690
  5989  00661E  80D8               	bsf	status,0,c
  5990  006620  0012               	return	
  5991  006622                     u4690:
  5992  006622  90D8               	bcf	status,0,c
  5993  006624  0012               	return	
  5994                           ;rgl.c: 3563: }
  5995  006626                     __end_of_Trosnie:
  5996                           ;rgl.c: 3569: bit Tmaleje(const unsigned char t)
  5997                           ;rgl.c: 3570: {
  5998  006626                     _Tmaleje:
  5999  000000                     
  6000                           ; _t loaded to fsr2l
  6001  006626  6ED9               	movwf	fsr2l,c
  6002                           ;rgl.c: 3571: return (rgl.x_dt<(-1*t));
  6003  006628  CFD9 F000          	movff	fsr2l,btemp
  6004  00662C  6A01               	clrf	btemp+1,c
  6005  00662E  1E00               	comf	btemp,f,c
  6006  006630  1E01               	comf	btemp+1,f,c
  6007  006632  4A00               	infsnz	btemp,f,c
  6008  006634  2A01               	incf	btemp+1,f,c
  6009  006636  C3DB  F002         	movff	_rgl+4,btemp+2
  6010  00663A  6A03               	clrf	btemp+3,c
  6011  00663C  BE02               	btfsc	btemp+2,7,c
  6012  00663E  0603               	decf	btemp+3,f,c
  6013  006640  5003               	movf	btemp+3,w,c
  6014  006642  0A80               	xorlw	128
  6015  006644  6E04               	movwf	btemp+4,c
  6016  006646  5001               	movf	btemp+1,w,c
  6017  006648  0A80               	xorlw	128
  6018  00664A  5C04               	subwf	btemp+4,w,c
  6019  00664C  E102               	bnz	u4715
  6020  00664E  5000               	movf	btemp,w,c
  6021  006650  5C02               	subwf	btemp+2,w,c
  6022  006652                     u4715:
  6023  006652  E202               	bc	u4710
  6024  006654  80D8               	bsf	status,0,c
  6025  006656  0012               	return	
  6026  006658                     u4710:
  6027  006658  90D8               	bcf	status,0,c
  6028  00665A  0012               	return	
  6029                           ;rgl.c: 3572: }
  6030  00665C                     __end_of_Tmaleje:
  6031                           ;rgl.c: 3576: bit Tstoi(void)
  6032                           ;rgl.c: 3577: {
  6033  00665C                     _Tstoi:
  6034  000000                     
  6035                           ;rgl.c: 3578: return !rgl.x_dt;
  6036  00665C  EE03  F0DB         	lfsr	0,_rgl+4
  6037  006660  50EF               	movf	indf0,w,c
  6038  006662  90D8               	bcf	status,0,c
  6039  006664  B4D8               	btfsc	status,2,c
  6040  006666  80D8               	bsf	status,0,c
  6041  006668  0012               	return	
  6042                           ;rgl.c: 3579: }
  6043  00666A                     __end_of_Tstoi:
  6044                           ;rgl.c: 3586: bit Tnizsza(const unsigned char t)
  6045                           ;rgl.c: 3587: {
  6046  00666A                     _Tnizsza:
  6047  000000                     
  6048                           ; _t loaded to fsr2l
  6049  00666A  6ED9               	movwf	fsr2l,c
  6050                           ;rgl.c: 3588: return (rgl.x_t>t);
  6051  00666C  C3D9  F000         	movff	_rgl+2,btemp
  6052  006670  50D9               	movf	fsr2l,w,c
  6053  006672  BE00               	btfsc	btemp,7,c
  6054  006674  D005               	goto	u4730
  6055  006676  0AFF               	xorlw	255
  6056  006678  2400               	addwf	btemp,w,c
  6057  00667A  E302               	bnc	u4730
  6058  00667C  80D8               	bsf	status,0,c
  6059  00667E  0012               	return	
  6060  006680                     u4730:
  6061  006680  90D8               	bcf	status,0,c
  6062  006682  0012               	return	
  6063                           ;rgl.c: 3589: }
  6064  006684                     __end_of_Tnizsza:
  6065                           ;rgl.c: 3595: bit Twyzsza(const unsigned char t)
  6066                           ;rgl.c: 3596: {
  6067  006684                     _Twyzsza:
  6068  000000                     
  6069                           ; _t loaded to fsr2l
  6070  006684  6ED9               	movwf	fsr2l,c
  6071                           ;rgl.c: 3597: return (rgl.x_t<(-1*t));
  6072  006686  CFD9 F000          	movff	fsr2l,btemp
  6073  00668A  6A01               	clrf	btemp+1,c
  6074  00668C  1E00               	comf	btemp,f,c
  6075  00668E  1E01               	comf	btemp+1,f,c
  6076  006690  4A00               	infsnz	btemp,f,c
  6077  006692  2A01               	incf	btemp+1,f,c
  6078  006694  C3D9  F002         	movff	_rgl+2,btemp+2
  6079  006698  6A03               	clrf	btemp+3,c
  6080  00669A  BE02               	btfsc	btemp+2,7,c
  6081  00669C  0603               	decf	btemp+3,f,c
  6082  00669E  5003               	movf	btemp+3,w,c
  6083  0066A0  0A80               	xorlw	128
  6084  0066A2  6E04               	movwf	btemp+4,c
  6085  0066A4  5001               	movf	btemp+1,w,c
  6086  0066A6  0A80               	xorlw	128
  6087  0066A8  5C04               	subwf	btemp+4,w,c
  6088  0066AA  E102               	bnz	u4755
  6089  0066AC  5000               	movf	btemp,w,c
  6090  0066AE  5C02               	subwf	btemp+2,w,c
  6091  0066B0                     u4755:
  6092  0066B0  E202               	bc	u4750
  6093  0066B2  80D8               	bsf	status,0,c
  6094  0066B4  0012               	return	
  6095  0066B6                     u4750:
  6096  0066B6  90D8               	bcf	status,0,c
  6097  0066B8  0012               	return	
  6098                           ;rgl.c: 3598: }
  6099  0066BA                     __end_of_Twyzsza:
  6100                           ;rgl.c: 3602: bit Trowna(void)
  6101                           ;rgl.c: 3603: {
  6102  0066BA                     _Trowna:
  6103  000000                     
  6104                           ;rgl.c: 3604: return !rgl.x_t;
  6105  0066BA  EE03  F0D9         	lfsr	0,_rgl+2
  6106  0066BE  50EF               	movf	indf0,w,c
  6107  0066C0  90D8               	bcf	status,0,c
  6108  0066C2  B4D8               	btfsc	status,2,c
  6109  0066C4  80D8               	bsf	status,0,c
  6110  0066C6  0012               	return	
  6111                           ;rgl.c: 3605: }
  6112  0066C8                     __end_of_Trowna:
  6113                           ;rgl.c: 3611: bit TFrosnie(const unsigned char t
      +                          )
  6114                           ;rgl.c: 3612: {
  6115  0066C8                     _TFrosnie:
  6116  000000                     
  6117                           ; _t loaded to fsr2l
  6118  0066C8  6ED9               	movwf	fsr2l,c
  6119                           ;rgl.c: 3613: return (rgl.x_df>t);
  6120  0066CA  C3DC  F000         	movff	_rgl+5,btemp
  6121  0066CE  50D9               	movf	fsr2l,w,c
  6122  0066D0  BE00               	btfsc	btemp,7,c
  6123  0066D2  D005               	goto	u4770
  6124  0066D4  0AFF               	xorlw	255
  6125  0066D6  2400               	addwf	btemp,w,c
  6126  0066D8  E302               	bnc	u4770
  6127  0066DA  80D8               	bsf	status,0,c
  6128  0066DC  0012               	return	
  6129  0066DE                     u4770:
  6130  0066DE  90D8               	bcf	status,0,c
  6131  0066E0  0012               	return	
  6132                           ;rgl.c: 3614: }
  6133  0066E2                     __end_of_TFrosnie:
  6134                           ;rgl.c: 3620: bit TFmaleje(const unsigned char t
      +                          )
  6135                           ;rgl.c: 3621: {
  6136  0066E2                     _TFmaleje:
  6137  000000                     
  6138                           ; _t loaded to fsr2l
  6139  0066E2  6ED9               	movwf	fsr2l,c
  6140                           ;rgl.c: 3622: return (rgl.x_df<(-1*t));
  6141  0066E4  CFD9 F000          	movff	fsr2l,btemp
  6142  0066E8  6A01               	clrf	btemp+1,c
  6143  0066EA  1E00               	comf	btemp,f,c
  6144  0066EC  1E01               	comf	btemp+1,f,c
  6145  0066EE  4A00               	infsnz	btemp,f,c
  6146  0066F0  2A01               	incf	btemp+1,f,c
  6147  0066F2  C3DC  F002         	movff	_rgl+5,btemp+2
  6148  0066F6  6A03               	clrf	btemp+3,c
  6149  0066F8  BE02               	btfsc	btemp+2,7,c
  6150  0066FA  0603               	decf	btemp+3,f,c
  6151  0066FC  5003               	movf	btemp+3,w,c
  6152  0066FE  0A80               	xorlw	128
  6153  006700  6E04               	movwf	btemp+4,c
  6154  006702  5001               	movf	btemp+1,w,c
  6155  006704  0A80               	xorlw	128
  6156  006706  5C04               	subwf	btemp+4,w,c
  6157  006708  E102               	bnz	u4795
  6158  00670A  5000               	movf	btemp,w,c
  6159  00670C  5C02               	subwf	btemp+2,w,c
  6160  00670E                     u4795:
  6161  00670E  E202               	bc	u4790
  6162  006710  80D8               	bsf	status,0,c
  6163  006712  0012               	return	
  6164  006714                     u4790:
  6165  006714  90D8               	bcf	status,0,c
  6166  006716  0012               	return	
  6167                           ;rgl.c: 3623: }
  6168  006718                     __end_of_TFmaleje:
  6169                           ;rgl.c: 3627: bit TFstoi(void)
  6170                           ;rgl.c: 3628: {
  6171  006718                     _TFstoi:
  6172  000000                     
  6173                           ;rgl.c: 3629: return !rgl.x_df;
  6174  006718  EE03  F0DC         	lfsr	0,_rgl+5
  6175  00671C  50EF               	movf	indf0,w,c
  6176  00671E  90D8               	bcf	status,0,c
  6177  006720  B4D8               	btfsc	status,2,c
  6178  006722  80D8               	bsf	status,0,c
  6179  006724  0012               	return	
  6180                           ;rgl.c: 3630: }
  6181  006726                     __end_of_TFstoi:
  6182                           ;rgl.c: 3633: void RestartMod(void)
  6183                           ;rgl.c: 3634: {
  6184  006726                     _RestartMod:
  6185  000000                     
  6186                           ;rgl.c: 3635: rgl.btco=0;
  6187  006726  0103               	movlb	_rgl shr (0+8)
  6188  006728  91D7               	bcf	_rgl& (0+255),0,b
  6189                           ;rgl.c: 3636: rgl.btcw=0;
  6190  00672A  93D7               	bcf	_rgl& (0+255),1,b
  6191                           ;rgl.c: 3637: rgl.fz=0;
  6192  00672C  95D7               	bcf	_rgl& (0+255),2,b
  6193                           ;rgl.c: 3638: rgl.med_up=0;
  6194  00672E  97D7               	bcf	_rgl& (0+255),3,b
  6195                           ;rgl.c: 3639: rgl.fast_up=0;
  6196  006730  99D7               	bcf	_rgl& (0+255),4,b
  6197                           ;rgl.c: 3640: rgl.nmod=0;
  6198  006732  9BD7               	bcf	_rgl& (0+255),5,b
  6199                           ;rgl.c: 3641: rgl.del1s=0;
  6200  006734  9DD7               	bcf	_rgl& (0+255),6,b
  6201                           ;rgl.c: 3642: rgl.deln1=0;
  6202  006736  9FD7               	bcf	_rgl& (0+255),7,b
  6203                           ;rgl.c: 3643: rgl.inv_mod=0;
  6204  006738  91D8               	bcf	(_rgl+1)& (0+255),0,b
  6205                           ;rgl.c: 3644: }
  6206  00673A  0012               	return	
  6207  00673C                     __end_of_RestartMod:
  6208  000000                     
  6209  000000                     
  6210  000000                     
  6211  000000                     
  6212  000000                     
  6213  000000                     
  6214  000000                     
  6215  000000                     
  6216  000000                     
  6217  000000                     
  6218  000000                     
  6219  000000                     
  6220  000000                     
  6221  000000                     
  6222  000000                     
  6223  000000                     
  6224  000000                     
  6225  000000                     
  6226  000000                     
  6227  000000                     
  6228  000000                     
  6229  000000                     
  6230  000000                     
  6231  000000                     
  6232  000000                     
  6233  000000                     
  6234  000000                     
  6235  000000                     
  6236  000000                     
  6237  000000                     
  6238  000000                     
  6239  000000                     
  6240  000000                     
  6241  000000                     
  6242  000000                     
  6243  000000                     
  6244  000000                     
  6245  000000                     
  6246  000000                     
  6247  000000                     
  6248  000000                     
  6249  000000                     
  6250  000000                     
  6251  000000                     
  6252  000000                     
  6253  000000                     
  6254  000000                     
  6255  000000                     
  6256  000000                     
  6257  000000                     
  6258  000000                     
  6259  000000                     
  6260  000000                     
  6261  000000                     
  6262  000000                     
  6263  000000                     
  6264  000000                     
  6265  000000                     
  6266  000000                     
  6267  000000                     
  6268  000000                     
  6269  000000                     
  6270  000000                     
  6271  000000                     
  6272  000000                     
  6273  000000                     
  6274  000000                     
  6275  000000                     
  6276  000000                     
  6277  000000                     
  6278  000000                     
  6279  000000                     
  6280  000000                     
  6281  000000                     
  6282  000000                     
  6283  000000                     
  6284  000000                     
  6285  000000                     
  6286  000000                     
  6287  000000                     
  6288  000000                     
  6289  000000                     
  6290  000000                     
  6291  000000                     
  6292  000000                     
  6293  000000                     
  6294  000000                     
  6295  000000                     
  6296  000000                     
  6297  000000                     
  6298  000000                     
  6299  000000                     
  6300  000000                     
  6301  000000                     
  6302  000000                     
  6303  000000                     
  6304  000000                     
  6305  000000                     
  6306  000000                     
  6307  000000                     
  6308  000000                     
  6309  000000                     
  6310  000000                     
  6311  000000                     
  6312  000000                     
  6313  000000                     
  6314  000000                     
  6315  000000                     
  6316  000000                     
  6317  000000                     
  6318  000000                     
  6319  000000                     
  6320  000000                     
  6321  000000                     
  6322  000000                     
  6323  000000                     
  6324  000000                     
  6325  000000                     
  6326  000000                     
  6327  000000                     
  6328  000000                     
  6329  000000                     
  6330  000000                     
  6331  000000                     
  6332  000000                     
  6333  000000                     
  6334  000000                     
  6335  000000                     
  6336  000000                     
  6337  000000                     
  6338  000000                     
  6339  000000                     
  6340  000000                     
  6341  000000                     
  6342  000000                     
  6343  000000                     
  6344  000000                     
  6345  000000                     
  6346  000000                     
  6347  000000                     
  6348  000000                     
  6349  000000                     
  6350  000000                     
  6351  000000                     
  6352  000000                     
  6353  000000                     
  6354  000000                     
  6355  000000                     
  6356  000000                     
  6357  000000                     
  6358  000000                     
  6359  000000                     
  6360  000000                     
  6361  000000                     
  6362  000000                     
  6363  000000                     
  6364  000000                     
  6365  000000                     
  6366  000000                     
  6367  000000                     
  6368  000000                     
  6369  000000                     
  6370  000000                     
  6371  000000                     
  6372  000000                     
  6373  000000                     
  6374  000000                     
  6375  000000                     
  6376  000000                     
  6377  000000                     
  6378  000000                     
  6379  000000                     
  6380  000000                     
  6381  000000                     
  6382  000000                     
  6383  000000                     
  6384  000000                     
  6385  000000                     
  6386  000000                     
  6387  000000                     
  6388  000000                     
  6389  000000                     
  6390  000000                     
  6391  000000                     
  6392  000000                     
  6393  000000                     
  6394  000000                     
  6395  000000                     
  6396  000000                     
  6397  000000                     
  6398  000000                     
  6399  000000                     
  6400  000000                     
  6401  000000                     
  6402  000000                     
  6403  000000                     
  6404  000000                     
  6405  000000                     
  6406  000000                     
  6407  000000                     
  6408  000000                     
  6409  000000                     
  6410  000000                     
  6411  000000                     
  6412  000000                     
  6413  000000                     
  6414  000000                     
  6415  000000                     
  6416  000000                     
  6417  000000                     
  6418  000000                     
  6419  000000                     
  6420  000000                     
  6421  000000                     
  6422  000000                     
  6423  000000                     
  6424  000000                     
  6425  000000                     
  6426  000000                     
  6427  000000                     
  6428  000000                     
  6429  000000                     
  6430  000000                     
  6431  000000                     
  6432  000000                     
  6433  000000                     
  6434  000000                     
  6435  000000                     
  6436  000000                     
  6437  000000                     
  6438  000000                     
  6439  000000                     
  6440  000000                     
  6441  000000                     
  6442  000000                     
  6443  000000                     
  6444  000000                     
  6445  000000                     
  6446  000000                     
  6447  000000                     
  6448  000000                     
  6449  000000                     
  6450  000000                     
  6451  000000                     
  6452  000000                     
  6453  000000                     
  6454  000000                     
  6455  000000                     
  6456  000000                     
  6457  000000                     
  6458  000000                     
  6459  000000                     
  6460  000000                     
  6461  000000                     
  6462  000000                     
  6463  000000                     
  6464  000000                     
  6465  000000                     
  6466  000000                     
  6467  000000                     
  6468  000000                     
  6469  000000                     
  6470  000000                     
  6471  000000                     
  6472  000000                     
  6473  000000                     
  6474  000000                     
  6475  000000                     
  6476  000000                     
  6477  000000                     
  6478  000000                     
  6479  000000                     
  6480  000000                     
  6481  000000                     
  6482  000000                     
  6483  000000                     
  6484  000000                     
  6485  000000                     
  6486  000000                     
  6487  000000                     
  6488  000000                     
  6489  000000                     
  6490  000000                     
  6491  000000                     
  6492  000000                     
  6493  000000                     
  6494  000000                     
  6495  000000                     
  6496  000000                     
  6497  000000                     
  6498  000000                     
  6499  000000                     
  6500  000000                     
  6501  000000                     
  6502  000000                     
  6503  000000                     
  6504  000000                     
  6505  000000                     
  6506  000000                     
  6507  000000                     
  6508  000000                     
  6509  000000                     
  6510  000000                     
  6511  000000                     
  6512  000000                     
  6513  000000                     
  6514  000000                     
  6515  000000                     
  6516  000000                     
  6517  000000                     
  6518  000000                     
  6519  000000                     
  6520  000000                     
  6521  000000                     
  6522  000000                     
  6523  000000                     
  6524  000000                     
  6525  000000                     
  6526  000000                     
  6527  000000                     
  6528  000000                     
  6529  000000                     
  6530  000000                     
  6531  000000                     
  6532  000000                     
  6533  000000                     
  6534  000000                     
  6535  000000                     
  6536  000000                     
  6537  000000                     
  6538  000000                     
  6539  000000                     
  6540  000000                     
  6541  000000                     
  6542  000000                     
  6543  000000                     
  6544  000000                     
  6545  000000                     
  6546  000000                     
  6547  000000                     
  6548  000000                     
  6549  000000                     
  6550  000000                     
  6551  000000                     
  6552  000000                     
  6553  000000                     
  6554  000000                     
  6555  000000                     
  6556  000000                     
  6557  000000                     
  6558  000000                     
  6559  000000                     
  6560  000000                     
  6561  000000                     
  6562  000000                     
  6563  000000                     
  6564  000000                     
  6565  000000                     
  6566  000000                     
  6567  000000                     
  6568  000000                     
  6569  000000                     
  6570  000000                     
  6571  000000                     
  6572  000000                     
  6573  000000                     
  6574  000000                     
  6575  000000                     
  6576  000000                     
  6577  000000                     
  6578  000000                     
  6579  000000                     
  6580  000000                     
  6581  000000                     
  6582  000000                     
  6583  000000                     
  6584  000000                     
  6585  000000                     
  6586  000000                     
  6587  000000                     
  6588  000000                     
  6589  000000                     
  6590  000000                     
  6591  000000                     
  6592  000000                     
  6593  000000                     
  6594  000000                     
  6595  000000                     
  6596  000000                     
  6597  000000                     
  6598  000000                     
  6599  000000                     
  6600  000000                     
  6601  000000                     
  6602  000000                     
  6603  000000                     
  6604  000000                     
  6605  000000                     
  6606  000000                     
  6607  000000                     
  6608  000000                     
  6609  000000                     
  6610  000000                     
  6611  000000                     
  6612  000000                     
  6613  000000                     
  6614  000000                     
  6615  000000                     
  6616  000000                     
  6617  000000                     
  6618  000000                     
  6619  000000                     
  6620  000000                     
  6621  000000                     
  6622  000000                     
  6623  000000                     
  6624  000000                     
  6625  000000                     
  6626  000000                     
  6627  000000                     
  6628  000000                     
  6629  000000                     
  6630  000000                     
  6631  000000                     
  6632  000000                     
  6633  000000                     
  6634  000000                     
  6635  000000                     
  6636  000000                     
  6637  000000                     
  6638  000000                     
  6639  000000                     
  6640  000000                     
  6641  000000                     
  6642  000000                     
  6643  000000                     
  6644                           
  6645                           	psect	bigbss
  6646  000EAB                     F1899:
  6647  000EAB                     	ds	1
  6648  000EAB                     F1900:
  6649  000EAB                     	ds	1
  6650  000EAB                     F1901:
  6651  000EAB                     	ds	1
  6652  000EAB                     F1902:
  6653  000EAB                     	ds	1
  6654  000EAB                     F1903:
  6655  000EAB                     	ds	1
  6656  000EAB                     F1904:
  6657  000EAB                     	ds	1
  6658  000EAB                     F1905:
  6659  000EAB                     	ds	1
  6660  000EAB                     F1919:
  6661  000EAB                     	ds	1
  6662  000EAB                     F1926:
  6663  000EAB                     	ds	1
  6664  000EAB                     F1927:
  6665  000EAB                     	ds	1
  6666  000EAB                     F1928:
  6667  000EAB                     	ds	1
  6668  000EAB                     F1929:
  6669  000EAB                     	ds	1
  6670  000EAB                     F1930:
  6671  000EAB                     	ds	1
  6672  000EAB                     F1931:
  6673  000EAB                     	ds	1
  6674  000EAB                     F1932:
  6675  000EAB                     	ds	1
  6676  000EAB                     F1933:
  6677  000EAB                     	ds	1
  6678  000EAB                     F1934:
  6679  000EAB                     	ds	1
  6680  000EAB                     F1935:
  6681  000EAB                     	ds	1
  6682  000EAB                     F1936:
  6683  000EAB                     	ds	1
  6684  000EAB                     F1953:
  6685  000EAB                     	ds	1
  6686  000EAB                     F1966:
  6687  000EAB                     	ds	1
  6688  000EAB                     F1967:
  6689  000EAB                     	ds	1
  6690  000EAB                     F1968:
  6691  000EAB                     	ds	1
  6692  000EAB                     F1969:
  6693  000EAB                     	ds	1
  6694  000EAB                     F1970:
  6695  000EAB                     	ds	1
  6696  000EAB                     F1971:
  6697  000EAB                     	ds	1
  6698  000EAB                     F1972:
  6699  000EAB                     	ds	1
  6700  000EAB                     F1985:
  6701  000EAB                     	ds	1
  6702  000EAB                     F1986:
  6703  000EAB                     	ds	1
  6704  000EAB                     F1987:
  6705  000EAB                     	ds	1
  6706  000EAB                     F1988:
  6707  000EAB                     	ds	1
  6708  000EAB                     F1994:
  6709  000EAB                     	ds	1
  6710  000EAB                     F1995:
  6711  000EAB                     	ds	1
  6712  000EAB                     F1996:
  6713  000EAB                     	ds	1
  6714  000EAB                     F1997:
  6715  000EAB                     	ds	1
  6716  000EAB                     F2004:
  6717  000EAB                     	ds	1
  6718  000EAB                     F2005:
  6719  000EAB                     	ds	1
  6720  000EAB                     F2006:
  6721  000EAB                     	ds	1
  6722  000EAB                     F2007:
  6723  000EAB                     	ds	1
  6724  000EAB                     F2029:
  6725  000EAB                     	ds	1
  6726  000EAB                     F2030:
  6727  000EAB                     	ds	1
  6728  000EAB                     F2031:
  6729  000EAB                     	ds	1
  6730  000EAB                     F2032:
  6731  000EAB                     	ds	1
  6732  000EAB                     F2033:
  6733  000EAB                     	ds	1
  6734  000000                     
  6735  000000                     
  6736  000000                     
  6737  000000                     
  6738  000000                     
  6739  000000                     
  6740  000000                     
  6741  000000                     
  6742  000000                     
  6743  000000                     
  6744  000000                     
  6745  000000                     
  6746  000000                     
  6747  000000                     
  6748  000000                     
  6749  000000                     
  6750  000000                     
  6751  000000                     
  6752  000000                     
  6753  000000                     
  6754  000000                     
  6755  000000                     
  6756  000000                     
  6757  000000                     
  6758  000000                     
  6759  000000                     
  6760  000000                     
  6761  000000                     
  6762  000000                     
  6763  000000                     
  6764  000000                     
  6765  000000                     
  6766  000000                     
  6767  000000                     
  6768  000000                     
  6769  000000                     
  6770  000000                     
  6771  000000                     
  6772  000000                     
  6773  000000                     
  6774  000000                     
  6775  000000                     
  6776  000000                     
  6777  000000                     
  6778  000000                     
  6779  000000                     
  6780  000000                     
  6781  000000                     
  6782  000000                     
  6783  000000                     
  6784  000000                     
  6785  000000                     
  6786  000000                     
  6787  000000                     
  6788  000000                     
  6789  000000                     
  6790  000000                     
  6791  000000                     
  6792  000000                     
  6793  000000                     
  6794  000000                     
  6795  000000                     
  6796  000000                     
  6797  000000                     
  6798  000000                     
  6799  000000                     
  6800  000000                     
  6801  000000                     
  6802  000000                     
  6803  000000                     
  6804  000000                     
  6805  000000                     
  6806  000000                     
  6807  000000                     
  6808  000000                     
  6809  000000                     
  6810  000000                     
  6811  000000                     
  6812  000000                     
  6813  000000                     
  6814  000000                     
  6815  000000                     
  6816  000000                     
  6817  000000                     
  6818  000000                     
  6819  000000                     
  6820  000000                     
  6821  000000                     
  6822  000000                     
  6823  000000                     
  6824  000000                     
  6825  000000                     
  6826  000000                     
  6827  000000                     
  6828  000000                     
  6829  000000                     
  6830  000000                     
  6831  000000                     
  6832  000000                     
  6833  000000                     
  6834  000000                     
  6835  000000                     
  6836  000000                     
  6837  000000                     
  6838  000000                     
  6839  000000                     
  6840  000000                     
  6841  000000                     
  6842  000000                     
  6843  000000                     
  6844  000000                     
  6845  000000                     
  6846  000000                     
  6847  000000                     
  6848  000000                     
  6849  000000                     
  6850  000000                     
  6851  000000                     
  6852  000000                     
  6853  000000                     
  6854  000000                     
  6855  000000                     
  6856  000000                     
  6857  000000                     
  6858  000000                     
  6859  000EAB                     _popMAXCO:
  6860  000EAB                     	ds	1
  6861  000EAB                     _popMAXCW:
  6862  000EAB                     	ds	1
  6863  000EAB                     _popMIN:
  6864  000EAB                     	ds	1
  6865  000EAB                     _popSMAX:
  6866  000EAB                     	ds	1
  6867  000EAB                     _popSMIN:
  6868  000EAB                     	ds	1
  6869  000EAB                     _popSMOD:
  6870  000EAB                     	ds	1
  6871  000EAB                     _pwm_center:
  6872  000EAB                     	ds	1
  6873  000EAB                     _pwm_kwr:
  6874  000EAB                     	ds	1
  6875  000EAB                     _tmr:
  6876  000EAB                     	ds	1
  6877  000EAB                     _tmr2:
  6878  000EAB                     	ds	1
  6879  000000                     
  6880  000000                     
  6881  000000                     
  6882  000000                     
  6883  000000                     
  6884  000000                     
  6885  000000                     
  6886                           
  6887                           	psect	const
  6888  00102E                     _kdw:
  6889  00102E  01                 	db	1
  6890  00102F                     _kup:
  6891  00102F  01                 	db	1
  6892                           
  6893                           	psect	bss
  6894  0003D7                     _rgl:
  6895  0003D7                     	ds	10
  6896                           
  6897                           	psect	temp
  6898  000000                     btemp:
  6899  000000                     	ds	8
  6900                           tblptrh	equ	0xFF7
  6901                           tblptrl	equ	0xFF6
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           indf0	equ	0xFEF
  6905                           fsr0h	equ	0xFEA
  6906                           fsr0l	equ	0xFE9
  6907                           wreg	equ	0xFE8
  6908                           fsr1l	equ	0xFE1
  6909                           fsr2l	equ	0xFD9
  6910                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:33:13 2020

            _SetNstVNT E2F6                      _M 0306  
            ?a_ModDkCO 00A4                     l20 3FC8  
                   l21 3F88                     l22 3FC0  
                   l31 4072                     l40 4130  
                   l32 4076                     l41 416C  
                   l33 40A6                     l25 3FEA  
                   l34 40AE                     l26 4026  
                   l18 4174                     l51 43AE  
                   l35 410E                     l27 402E  
                   l19 3F66                     l52 43A2  
                   l36 40D0                     l28 405C  
                   l61 4590                     l45 429E  
                   l37 4106                     l29 4058  
           ?_SetNstVNT 00B2                     l62 4538  
                   l54 44A2                     l46 42A2  
                   l71 46A2                     l47 4394  
                   l80 4702                     l72 4698  
                   l56 444C                     l48 4334  
                   l81 4742                     l57 449C  
                   l49 438E                     l82 474C  
                   l74 46AE                     l66 45A2  
                   l91 48C6                     l83 47AA  
                   l67 468A                     l92 492C  
                   l76 46D2                     l68 462A  
                   l93 4964                     l85 4844  
                   l69 4684                     l94 495E  
                   l86 488A                     l87 4890  
                   l79 4708                     l97 4B60  
                   l98 498C                     l99 4998  
            ?a_ModZgCO 00A4               _StartCO2 4186  
            _ProcToVNT C7A2              _ProcToMod 65DE  
    __end_of_ProcToMod 660C          _NewPop_MAX_CO 5FA8  
        _NewPop_MAX_CW 5E5A              ?a_SetStab 00A4  
           ?a_ModDkCW2 00A4                    l100 49A2  
                  l111 4ABA                    l103 4A24  
                  l200 4FC2                    l112 4A86  
                  l104 49E0                    l201 5034  
                  l121 4AA4                    l113 4A4C  
                  l210 5116                    l130 4B22  
                  l106 49FC                    l211 511A  
                  l131 4B56                    l115 4A68  
                  l300 5786                    l212 5182  
                  l140 4BC6                    l124 4AF0  
                  l108 4A14                    l205 50A6  
                  l125 4AEC                    l117 4A80  
                  l230 52C6                    l222 518E  
                  l150 4C1A                    l142 4C0C  
                  l231 5266                    l151 4C50  
                  l143 4C08                    l232 5230  
                  l216 517C                    l160 4CB2  
                  l152 4C58                    l136 4B78  
                  l128 4B06                    l401 5C9A  
                  l321 583A                    l313 57FC  
                  l305 579E                    l217 5176  
                  l145 4BF0                    l137 4B84  
                  l129 4B08                    l402 5CA8  
                  l330 58B8                    l322 583C  
                  l170 4D64                    l138 4B90  
                  l411 5D98                    l331 58C4  
                  l323 5856                    l163 4CF4  
                  l155 4C94                    l139 4C68  
                  l420 5E30                    l404 5CE0  
                  l332 59C4                    l324 588A  
                  l308 5820                    l236 529E  
                  l180 4E0C                    l172 4DB2  
                  l164 4CFC                    l148 4C02  
                  l501 642A                    l413 5DA6  
                  l333 58FA                    l317 5818  
                  l309 57E0                    l245 536C  
                  l229 51E8                    l173 4DAC  
                  l157 4CC0                    l502 6436  
                  l342 5964                    l318 5814  
                  l158 4CBC                    l503 650C  
                  l335 5968                    l271 54A4  
                  l255 53C8                    l239 52DA  
                  l191 4F32                    l183 511E  
                  l175 4DC4                    l167 4D22  
                  l512 65A6                    l352 59F4  
                  l344 595A                    l336 5912  
                  l280 5620                    l272 54AE  
                  l248 5384                    l184 4FAC  
                  l505 64D8                    l441 6068  
                  l425 5F1A                    l409 5DCC  
                  l361 5A5A                    l329 58AC  
                  l273 550C                    l265 540C  
                  l249 538A                    l185 4E3E  
                  l169 4D6A                    l514 65B4  
                  l450 60BE                    l434 5F70  
                  l418 5E22                    l370 5AC0  
                  l354 5A5E                    l290 56F8  
                  l282 562C                    l266 542C  
                  l186 4E46                    l507 64E6  
                  l443 6034                    l427 5EE6  
                  l363 5A50                    l355 5A06  
                  l347 599E                    l339 5936  
                  l291 5704                    l275 55A6  
                  l187 4EBA                    l179 4DDC  
                  l452 60CC                    l436 5F7E  
                  l348 59A6                    l292 570E  
                  l284 5698                    l276 55EC  
                  l461 61A6                    l445 6042  
                  l429 5EF4                    l381 5B72  
                  l373 5B04                    l349 59B4  
                  l285 56D0                    l277 55F2  
                  l269 546A                    l518 6606  
                  l390 5C44                    l382 5B78  
                  l374 5B0A                    l366 5A92  
                  l358 5A2E                    l286 56CA  
                  l463 61D2                    l367 5A9A  
                  l199 4FBA                    l472 626E  
                  l456 612C                    l392 5C8C  
                  l296 5766                    l473 6256  
                  l393 5C5C                    l385 5B94  
                  l377 5B7E                    l289 5894  
                  l490 643A                    l482 6336  
                  l474 6260                    l466 6216  
                  l458 6162                    l386 5BA6  
                  l491 63DC                    l483 631E  
                  l379 5B40                    l492 63C4  
                  l484 6328                    l476 62BA  
                  l468 6242                    l396 5C74  
                  l477 62F8                    l389 5CB0  
                  l486 6368                    l478 62F0  
                  l487 637C                    l496 641C  
                  l488 6378                    l497 63FC  
                  u100 4052                    u130 406C  
                  u245 4292                    u425 458A  
                  u605 47FC                    u375 458A  
                  u295 4386                    u625 4836  
                  u645 4882                    u485 467C  
                  u685 4924                    u695 4956  
                  _PWM 02D9               _WritePWM 02E8  
           ?a_ModZgCW2 00A4             ?a_New_SMOD 00AB  
                  _kdw 102E             ?a_ModPruCO 00A4  
                  _rgl 03D7                    _kup 102F  
            _StartMCW2 52EC                    _tmr 0EDF  
    __end_of_StartMCW2 5326                    wreg 000FE8  
            _StartRTdS FC66             _RestartMod 6726  
                 F2004 0ECE                   F2005 0ECF  
                 F2030 0ED3                   F2006 0ED0  
                 F2031 0ED4                   F2007 0ED1  
                 F2032 0ED5                   F2033 0ED6  
                 F2029 0ED2                   F1900 0EAC  
                 F1901 0EAD                   F1902 0EAE  
                 F1903 0EAF                   F1904 0EB0  
                 F1905 0EB1                   F1930 0EB7  
                 F1931 0EB8                   F1932 0EB9  
                 F1933 0EBA                   F1934 0EBB  
                 F1926 0EB3                   F1935 0EBC  
                 F1927 0EB4                   F1919 0EB2  
                 F1936 0EBD                   F1928 0EB5  
                 F1953 0EBE                   F1929 0EB6  
                 F1970 0EC3                   F1971 0EC4  
   __end_of_RestartMod 673C                   F1972 0EC5  
                 F1966 0EBF                   F1967 0EC0  
                 F1968 0EC1                   F1985 0EC6  
                 F1969 0EC2                   F1994 0ECA  
                 F1986 0EC7                   F1995 0ECB  
                 F1987 0EC8                   F1899 0EAB  
                 F1996 0ECC                   F1988 0EC9  
                 F1997 0ECD  __end_of_NewPop_MAX_CO 60F6  
__end_of_NewPop_MAX_CW 5FA8            ?a_FirstXMOD 00A4  
                 u1000 4A44                   u2015 516E  
                 u1315 4B4E                   u1180 4A9C  
                 u3210 5A16                   u3115 5996  
                 u1515 4CEC                   u1445 4C48  
                 u1625 4DA4                   u2515 55E4  
                 u4125 6124                   u2710 5762  
                 u4135 615A                   u3415 5B6A  
                 u4145 619E                   u3345 5AFC  
                 u1825 4F90                   u1745 4EA2  
                 u1585 4D5C                   u4250 63BC  
                 u4411 648E                   u4075 6094  
                 u3275 5A8A                   u2475 555E  
                 u1915 5090                   u1675 4E02  
                 u4165 620E                   u3605 5D06  
                 u2565 5690                   u2830 57DC  
                 u2670 573E                   u2575 56C2  
                 u2495 5598                   u4185 62B2  
                 u1785 4F16                   u4450 64B2  
                 u4435 64B0                   u4371 646C  
                 u4195 62E8                   u1955 5100  
                 u1875 501E                   u4365 646A  
                 u4710 6658                   u4630 6580  
                 u2790 57B8                   u4615 657C  
                 u4551 653E                   u3735 5DF8  
                 u3655 5D70                   u2935 5882  
                 u4545 653C                   u3905 5F46  
                 u3825 5EBE                   u4730 6680  
                 u4715 6652                   u4395 648C  
                 u3595 5CD6                   u4750 66B6  
                 u4591 655C                   u4575 655A  
                 u4770 66DE                   u4690 6622  
                 u4755 66B0                   u4790 6714  
                 u4795 670E                   u3995 600C  
                 _DtCO 007D                   _DtCW 006E  
                 _RTdS FC8A        __end_of_ClrMod2 5398  
          ?a_ModPruCW2 00A4                   aldiv 0C7A  
                 _tmr2 0EE0                   almul 0964  
                 fsr0h 000FEA                   indf0 000FEF  
                 fsr0l 000FE9                   fsr1l 000FE1  
                 fsr2l 000FD9                   btemp 0000  
                 awdiv 0D4A                   awmul 0E24  
      __end_of_ModDkCO 496A                   prodh 000FF4  
                 prodl 000FF3             _pwm_center 0EDD  
      __end_of_New_MIN 6170        __end_of_ModZgCO 489A  
             _popMAXCO 0ED7               _popMAXCW 0ED8  
      _CalkVNTtoPopPWM C790        __end_of_Moduluj 4186  
      __end_of_SetStab 52EC        __end_of_PropCO2 5D14  
      __end_of_Tmaleje 665C        __end_of_PropOPT 51B0  
     ?_CalkVNTtoPopPWM 00B2        __end_of_Tnizsza 6684  
      __end_of_Trosnie 6626        __end_of_Twyzsza 66BA  
        __end_of_Tstoi 666A            ?a_ProcToMod 00A9  
          _IncConstCO2 53CE            _IncConstCW2 53B0  
                _DtKNF 02AE    __end_of_IncConstCO2 53DE  
  __end_of_IncConstCW2 53CE             used_btemp0 0001  
           used_btemp1 0001             used_btemp2 0001  
           used_btemp3 0001             used_btemp4 0001  
           used_btemp5 0001             used_btemp6 0001  
           used_btemp7 0001                  _Tstoi 665C  
     __end_of_TFmaleje 6718        ?a_NewPop_MAX_CO 00A4  
      ?a_NewPop_MAX_CW 00A4       __end_of_IncMaxCO 4E16  
     __end_of_TFrosnie 66E2           ?a_NewPop_MIN 00A4  
     __end_of_ModDkCW2 56D6                _ClrMod2 5372  
                status 000FD8       __end_of_ModToCO2 53B0  
     __end_of_ModToCW2 53A4       __end_of_ModZgCW2 55FC  
     __end_of_New_SMOD 62FE       __end_of_ModPruCO 4D0C  
     __end_of_ModPrzCO 5194                _ModDkCO 489A  
              _New_MIN 60F6                _ModZgCO 46B4  
              _PmpToDW EE68                _PmpToUP EE18  
              _Moduluj 3F64                _SetStab 51B2  
              __Lparam 00A4                _PropCO2 5BB6  
             ?_SetStab 00A4                _Tmaleje 6626  
              _PropOPT 5194                _Vmaleje E334  
              _Tnizsza 666A                _Trosnie 660C  
     __end_of_StartCO2 4224                _Vrosnie E306  
              _Twyzsza 6684                __ramtop 1000  
       __end_of_TFstoi 6726                _popSMAX 0EDA  
              _popSMIN 0EDB                _popSMOD 0EDC  
       __end_of_Trowna 66C8           _CalkVNTtoPWM C780  
          _ReadDataCO2 53DE                _pwm_kwr 0EDE  
          _ReadDataCW2 53E8    __end_of_ReadDataCO2 53E8  
  __end_of_ReadDataCW2 53FA                 _TFstoi 6718  
           _FirstXMOD2 5326            _NewPop_SMOD 62FE  
               _Trowna 66BA     __end_of_FirstXMOD2 5372  
  __end_of_NewPop_SMOD 65DE                 aldiv_f 0EC8  
               _popMIN 0ED9                 almul_f 0EDC  
           _New_MAX_CO 61E0             _New_MAX_CW 6170  
            _IncMaxCW2 5AAA      __end_of_IncMaxCW2 5B1A  
   __end_of_New_MAX_CO 6250     __end_of_New_MAX_CW 61E0  
        ?a_NewPop_SMOD 00AB             _VTmalejacy E40A  
               tblptrh 000FF7                 tblptrl 000FF6  
           _NewPop_MIN 5D14              _FirstXMOD 4224  
    __end_of_FirstXMOD 46B4               _TFmaleje 66E2  
   __end_of_NewPop_MIN 5E5A               _IncMaxCO 4D0C  
             _TFrosnie 66C8              _ModPruCW2 56D6  
            _ModPrzCW2 5B1A      __end_of_ModPruCW2 5AAA  
    __end_of_ModPrzCW2 5BB6               _ModDkCW2 55FC  
             _ModToCO2 53A4               _ModToCW2 5398  
             _ModZgCW2 53FA               _New_SMOD 6250  
             _ModPruCO 496A               _ModPrzCO 4E16  
            _VTrosnacy E3DE  
