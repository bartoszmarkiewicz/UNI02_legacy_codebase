ý

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:33:14 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	rbss,global,common,class=COMRAM,space=1,d
      +                          elta=1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
ý     6                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                   ý  
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
  ý  27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41 ý 000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  0000ý00                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000   ý                  
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000        ý             
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000             ý        
    98                           
    99                           	psect	text
   100                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   101                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   102                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   103       ý                    ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   104                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   105                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   106                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                   ý       d char PCL @ 0xFF9;
   107                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   108                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   109                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   110                           ;pic18f45k20.h: 30: static volatýile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   111                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   112                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   113                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   114                 ý          ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   115                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   116                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   117                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDýF0 @ 0xFEF;
   118                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   119                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   120                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   121                           ;pic18f45k20.h: 41: static volatile near unsiýgne
      +                          d char PLUSW0 @ 0xFEB;
   122                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   123                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   124                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   125                           ;pic18ýf45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   126                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   127                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   128                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ý 0xFE4;
   129                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   130                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   131                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   132                           ;pic18f45k20.h: 52: static near unsigned char BS
      +ý                          R @ 0xFE0;
   133                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   134                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   135                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   136                           ;pic18f45k20.h: 56: stýatic volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   137                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   138                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   139                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   140       ý                    ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   141                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   142                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   143                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                     ý     d int TMR0 @ 0xFD6;
   144                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   145                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   146                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   147                           ;pic18f45k20.h: 68: static volatile near unsigýne
      +                          d char WDTCON @ 0xFD1;
   148                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   149                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   150                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   151                           ;pic18fý45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   152                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   153                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   154                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   155                  ý         ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   156                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   157                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   158                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;ý
   159                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   160                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   161                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   162                           ;pic18f45k20.h: 84: static volatile near unsigne
      +   ý                       d char ADRESL @ 0xFC3;
   163                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   164                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   165                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   166                           ;pic18f45k20.h: 89: static ýnear unsigned char AD
      +                          CON2 @ 0xFC0;
   167                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   168                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   169                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   170                      ý     ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   171                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   172                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   173                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CýCPR2 @ 0xFBB;
   174                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   175                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   176                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   177                           ;pic18f45k20.h: 102: static volatile near unsign
   ý   +                          ed char PWM1CON @ 0xFB7;
   178                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   179                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   180                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   181                           ;pýic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   182                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   183                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   184                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   ý185                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   186                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   187                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   188                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char ýRCREG @ 0xFAE;
   189                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   190                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   191                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   192                           ;pic18f45k20.h: 121: static volatile near unsýign
      +                          ed char TXSTA @ 0xFAC;
   193                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   194                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   195                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   196                           ý;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   197                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   198                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   199                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   20 0        4text  ý                     _InitUart:
   201                           ;	_chkndat assigned to ?a_SetExNDatCHK+0
   202  000000                     _SetExNDatCHK$chkndat	set	?a_SetExNDatCHK
   203                           ;       param _nData assigned to ?_LiczRSCHK+2
   204  000000                     _LiczRSCHK$nData	set	?_LiczRSCHK+2
   205                           ;       param _bf assigned to ?_LiczRSCHK+0
   206  000000                     _LiczRSCHK$bf	set	?_LiczRSCHK
   207                           ;Þ        param _data assigned to ?_SetRSTBuf+0
   208  000000                     _SetRSTBuf$data	set	?_SetRSTBuf
   209  000000                     
   210                           ;uart9b.c: 22: unsigned char rc;
   211        4text  b   9EAC               	bcf	4012,7,c
   212                           ;uart9b.c: 27: RX9=1;
   213        4text     |   8CAB               	bsf	4011,6,c
   214                           ;uart9b.c: 28: SPBRG=((8*4*1000000/2400)/64)-1;
   215        4text     (   0ECF               	movlw	207
   216        4text     c   6EAF               	movwf	4015,c
   217                           ;uart9b.c: 29: SYNC=0;
   218        4text     c   98AC               	bcf	4012,4,c
   219                           ;uart9b.c: 30: BRGH=0;
   220        4text 
    d   94AC               	bcf	4012,2,c
   221                           ;uart9b.c: 31: ADDEN=1;
   222        4text     b   86AB               	bsf	4011,3,c
   223                           ;uart9b.c: 32: TX9=1;
   224        4text     c   8CAC               	bsf	4012,6,c
   225                           ;uart9b.c: 33: RCIP=1;
   226        4text     c   8A9F               	bsf	3999,5,c
   227                           ;uart9b.c: 34: RCIE=1;
   228        4text     c   8A9D               	bsf	3997,5,c
   229                           ;uart9b.c: 35: TXIP=1;
   230        4text     c   889F               	bsf	3999,4,c
   231                           ;uart9b.c: 36: TXEN=1;
   232        4text     c   8AAC               	bsf	4012,5,c
   233                           ;uart9b.c: 37: SPEN=1;
   234        4text     c   8EAB               	bsf	4011,7,c
   235                           ;uart9b.c: 38: CREN=1;
   236        4text     i   88AB               	bsf	4011,4,c
   237                           ;uart9b.c: 41: UADt.RData=0;
   238        4text             1   bss 	 .                	movlb	_UADt shr (0+8)
   239        4text             1ÿ   bss 
 o                	bcf	_UADt& (0+255),0,b
   240                           ;uart9b.c: 42: UADt.RErrREC=0;
   241        4text              1ÿ   bss 
 o                	bcf	_UADt& (0+255),2,b
   242                           ;uart9b.c: 43: UADt.RErrBUF=0;
   243        4text "            1ÿ   bss 
 m                	bcf	_UADt& (0+255),3,b
   244                           ;uart9b.c: 45: UADt.TData=0;
   245        4text $            1ÿ   bss 
 n                	bcf	_UADt& (0+255),4,b
   246                           ;uart9b.c: 46: UADt.RNData=0;
   247        4text &         k   1ÿ   bss    
 q                	clrf	(_UADt+2)& (0+255),b
   248                           ;uart9b.c: 47: UADt.TNData=0;
   249        4text (         k   1ÿ   bss    
 o                	clrf	(_UADt+3)& (0+255),b
   250                           ;uart9b.c: 49: UADt.REXT=0;
   251        4text *            1ÿ   bss 
 l                	bcf	_UADt& (0+255),6,b
   252                           ;uart9b.c: 50: UADt.REnd=0;
   253        4text ,            1ÿ   bss 
 l                	bcf	_UADt& (0+255),1,b
   254                           ;uart9b.c: 51: UADt.TEXT=0;
   255        4text .            1ÿ   bss 
 l                	bcf	_UADt& (0+255),7,b
   256                           ;uart9b.c: 52: UADt.TEnd=0;
   257        4text 0            1ÿ   bss 
 n                	bcf	_UADt& (0+255),5,b
   258                           ;uart9b.c: 53: UADt.indeks=0;
   259        4text 2         k   1ÿ   bss    
 l                	clrf	(_UADt+1)& (0+255),b
   260                           ;uart9b.c: 54: rc=RCREG;
   261        4text 4    6   50AE               	movf	4014,w,c	;volatile
   262        4text 6    d   6ED9               	movwf	fsr2l,c
   263                           ;uart9b.c: 55: TXIE=0;
   264        4text 8    ]   989D               	bcf	3997,4,c
   265                           ;uart9b.c: 56: }
   266        4text :    &   0012               	return	
   267        4text <    ¨                      __end_of_InitUart:
   268                           ;uart9b.c: 60: void IntUSARTRC(void)
   269                           ;uart9b.c: 61: {
   270        4text <                          _IntUSARTRC:
   271  000000                     
   272                           ;uart9b.c: 62: if(ADDEN&&RX9D)
   273        4text <    -   B6AB               	btfsc	4011,3,c
   274        4text >    7   A0AB               	btfss	4011,0,c	;volatile
   275        4text @    X   D016               	goto	l5
   276                           ;uart9b.c: 63: {
   277        4text B       CFAE   ð   ürbss  s           	movff	4014,_RSerial	;volatile
   278                           ;uart9b.c: 65: if(RSerial==0x10)
   279        4text F         P   1rbss  4                	movf	_RSerial,w,c	;volatile
   280        4text H    '   0A10               	xorlw	16
   281        4text J    /   A4D8               	btfss	status,2,c
   282        4text L    X   0012               	return	
   283                           ;uart9b.c: 66: {
   284        4text N    j   96AB               	bcf	4011,3,c
   285                           ;uart9b.c: 68: UADt.indeks=0;
   286        4text P            1   bss    	 2                	movlb	(_UADt+1) shr (0+8)
   287        4text R         k   1ÿ   bss    
                 	clrf	(_UADt+1)& (0+255),b
   288                           ;uart9b.c: 69: bufRUART[UADt.indeks++]=RSerial;
   289        4text T         î   ö   bss    	   
      ð   1bss    ÿ   
 !          	lfsr	0,_UADt+1
   290        4text X    -   50EF               	movf	indf0,w,c
   291        4text Z    -   2AEF               	incf	indf0,f,c
   292        4text \         î   ö   bigbss 	   
      ð   1bigbss ÿ   
 #          	lfsr	0,_bufRUART
   293        4text `    .   26E9               	addwf	fsr0l,f,c
   294        4text b    &   0E00               	movlw	0
   295        4text d    /   22EA               	addwfc	fsr0h,f,c
   296        4text f         À   ürbss  u   FFEF         	movff	_RSerial,indf0	;volatile
   297                           ;uart9b.c: 70: UADt.RData=1;
   298        4text j            1ÿ   bss 
 a                	bsf	_UADt& (0+255),0,b
   299                           ;uart9b.c: 71: }
   300        4text l    &   0C00               	retlw	0
   301        4text n    S                      l5:
   302                           ;uart9b.c: 73: }
   303        4text n       CFAE   ð   ürbss  u           	movff	4014,_RSerial	;volatile
   304                           ;uart9b.c: 75: if (UADt.indeks<40)
   305        4text r    '   0E28               	movlw	40
   306        4text t            1   bss    	 2                	movlb	(_UADt+1) shr (0+8)
   307        4text v         a   1ÿ   bss    
 4                	cpfslt	(_UADt+1)& (0+255),b
   308        4text x    X   D05A               	goto	l7
   309                           ;uart9b.c: 76: {
   310        4text z         î   ö   bss    	   
      ð   1bss    ÿ   
 !          	lfsr	0,_UADt+1
   311        4text ~    -   50EF               	movf	indf0,w,c
   312        4text     -   2AEF               	incf	indf0,f,c
   313        4text          î   ö   bigbss 	   
      ð   1bigbss ÿ   
 #          	lfsr	0,_bufRUART
   314        4text     .   26E9               	addwf	fsr0l,f,c
   315        4text     &   0E00               	movlw	0
   316        4text     /   22EA               	addwfc	fsr0h,f,c
   317        4text          À   ürbss  {   FFEF         	movff	_RSerial,indf0	;volatile
   318                           ;uart9b.c: 79: switch(UADt.indeks)
   319        4text     &   D03D               	goto	l9
   320        4text                           l10:
   321                           ;uart9b.c: 80: {
   322                           ;uart9b.c: 82: {
   323        4text          À   übigbss          ð   übss     {          	movff	_bufRUART+1,_UADt+2
   324                           ;uart9b.c: 85: if(VerifyNDatCHK(UADt.RNData))
   325        4text          À   übss     +   FFE8         	movff	_UADt+2,wreg
   326        4text     2   D97D               	call	_VerifyNDatCHK
   327        4text     &   0900               	iorlw	0
   328        4text     W   E008               	bz	l11
   329                           ;uart9b.c: 86: {
   330        4text           À   übss     +   FFE8         	movff	_UADt+2,wreg
   331        4text ¤    '   0B1F               	andlw	31
   332        4text ¦       CFE8   ð   übss                	movff	wreg,_UADt+2
   333                           ;uart9b.c: 88: if(UADt.RNData>40) UADt.RNData=40
      +                          ;
   334        4text ª    '   0E28               	movlw	40
   335        4text ¬            1   bss    	 2                	movlb	(_UADt+2) shr (0+8)
   336        4text ®    X   D021               	goto	L4
   337                           ;uart9b.c: 91: }
   338        4text °    W                      l11:
   339                           ;uart9b.c: 92: else
   340        4text °    h   86AB               	bsf	4011,3,c
   341                           ;uart9b.c: 97: UADt.REXT=0;
   342        4text ²            1   bss 	 .                	movlb	_UADt shr (0+8)
   343        4text ´            1ÿ   bss 
 m                	bcf	_UADt& (0+255),6,b
   344                           ;uart9b.c: 98: UADt.RData=0;
   345        4text ¶            1ÿ   bss 
 l                	bcf	_UADt& (0+255),0,b
   346                           ;uart9b.c: 99: UADt.REnd=0;
   347        4text ¸            1ÿ   bss 
 p                	bcf	_UADt& (0+255),1,b
   348                           ;uart9b.c: 100: UADt.RErrBUF=1;
   349        4text º            1ÿ   bss 
 h                	bsf	_UADt& (0+255),3,b
   350                           ;uart9b.c: 101: return;
   351        4text ¼    Y   0012               	return	
   352                           ;uart9b.c: 102: }
   353        4text ¾                          l14:
   354                           ;uart9b.c: 104: }
   355                           ;uart9b.c: 106: {
   356        4text ¾         À   übigbss     /   FFE8         	movff	_bufRUART+2,wreg
   357        4text Â    &   0A05               	xorlw	5
   358        4text Ä    &   E004               	bz	u100
   359        4text Æ         À   übigbss     /   FFE8         	movff	_bufRUART+2,wreg
   360        4text Ê    &   0A04               	xorlw	4
   361        4text Ì    %   E125               	bnz	l8
   362        4text Î    V                      u100:
   363                           ;uart9b.c: 109: {
   364        4text Î         À   übigbss     /   FFE8         	movff	_bufRUART+3,wreg
   365        4text Ò    2   D961               	call	_VerifyNDatCHK
   366        4text Ô    &   0900               	iorlw	0
   367        4text Ö    X   E013               	bz	l16
   368                           ;uart9b.c: 111: {
   369        4text Ø            1   bss 	 .                	movlb	_UADt shr (0+8)
   370        4text Ú            1ÿ   bss 
 ´                	bsf	_UADt& (0+255),6,b
   371                           ;uart9b.c: 115: UADt.RNData=UADt.RNData+(bufRUAR
      +                          T[3]&0b00011111);
   372        4text Ü         À   übss          ð   ütemp  &          	movff	_UADt+2,btemp
   373        4text à         À   übigbss          ð   ütemp     ,          	movff	_bufRUART+3,btemp+1
   374        4text ä    '   0E1F               	movlw	31
   375        4text æ            1temp     *                	andwf	btemp+1,f,c
   376        4text è         P   1temp  '                	movf	btemp,w,c
   377        4text ê         $   1temp     *                	addwf	btemp+1,w,c
   378        4text ì       CFE8   ð   übss                	movff	wreg,_UADt+2
   379                           ;uart9b.c: 116: if(UADt.RNData>40) UADt.RNData=4
      +                          0;
   380        4text ð    '   0E28               	movlw	40
   381        4text ò    !                      L4:
   382        4text ò         e   1ÿ   bss    
 4                	cpfsgt	(_UADt+2)& (0+255),b
   383        4text ô    &   D011               	goto	l8
   384        4text ö    '   0E28               	movlw	40
   385        4text ø       CFE8   ð   übss     Y           	movff	wreg,_UADt+2
   386                           ;uart9b.c: 120: }
   387        4text ü    &   D00D               	goto	l8
   388        4text þ    X                      l16:
   389                           ;uart9b.c: 121: else
   390        4text þ    i   86AB               	bsf	4011,3,c
   391                           ;uart9b.c: 126: UADt.REXT=0;
   392        4text             1   bss 	 .                	movlb	_UADt shr (0+8)
   393        4text            1ÿ   bss 
 n                	bcf	_UADt& (0+255),6,b
   394                           ;uart9b.c: 127: UADt.RData=0;
   395        4text            1ÿ   bss 
 m                	bcf	_UADt& (0+255),0,b
   396                           ;uart9b.c: 128: UADt.REnd=0;
   397        4text            1ÿ   bss 
 p                	bcf	_UADt& (0+255),1,b
   398                           ;uart9b.c: 129: UADt.RErrBUF=1;
   399        4text            1ÿ   bss 
 h                	bsf	_UADt& (0+255),3,b
   400                           ;uart9b.c: 130: return;
   401        4text 
   Y   0012               	return	
   402                           ;uart9b.c: 131: }
   403        4text    !                      l9:
   404        4text         À   übss     +   FFE8         	movff	_UADt+1,wreg
   405        4text    &   0A02               	xorlw	2
   406        4text    %   E0BF               	bz	l10
   407        4text    &   0A06               	xorlw	6
   408        4text    %   E0D3               	bz	l14
   409        4text    p                      l8:
   410                           ;uart9b.c: 136: if (UADt.indeks>=UADt.RNData)
   411        4text         À   übss     +   FFE8         	movff	_UADt+2,wreg
   412        4text            1   bss    	 2                	movlb	(_UADt+1) shr (0+8)
   413        4text         ]   1ÿ   bss    
 5                	subwf	(_UADt+1)& (0+255),w,b
   414        4text     /   A0D8               	btfss	status,0,c
   415        4text "   Y   0012               	return	
   416                           ;uart9b.c: 137: {
   417        4text $   i   86AB               	bsf	4011,3,c
   418                           ;uart9b.c: 139: UADt.REXT=0;
   419        4text &           1ÿ   bss 
 n                	bcf	_UADt& (0+255),6,b
   420                           ;uart9b.c: 140: UADt.RData=0;
   421        4text (           1ÿ   bss 
 m                	bcf	_UADt& (0+255),0,b
   422                           ;uart9b.c: 141: UADt.REnd=1;
   423        4text *           1ÿ   bss 
 b                	bsf	_UADt& (0+255),1,b
   424                           ;uart9b.c: 144: }
   425        4text ,   &   0012               	return	
   426        4text .   W                      l7:
   427                           ;uart9b.c: 146: else
   428        4text .   i   86AB               	bsf	4011,3,c
   429                           ;uart9b.c: 149: UADt.REXT=0;
   430        4text 0           1   bss 	 .                	movlb	_UADt shr (0+8)
   431        4text 2           1ÿ   bss 
 n                	bcf	_UADt& (0+255),6,b
   432                           ;uart9b.c: 150: UADt.RData=0;
   433        4text 4           1ÿ   bss 
 m                	bcf	_UADt& (0+255),0,b
   434                           ;uart9b.c: 151: UADt.REnd=0;
   435        4text 6           1ÿ   bss 
 p                	bcf	_UADt& (0+255),1,b
   436                           ;uart9b.c: 152: UADt.RErrBUF=1;
   437        4text 8           1ÿ   bss 
 b                	bsf	_UADt& (0+255),3,b
   438                           ;uart9b.c: 153: }
   439        4text :   &   0012               	return	
   440        4text <   ®                      __end_of_IntUSARTRC:
   441                           ;uart9b.c: 159: void StartUSARTRC(void)
   442                           ;uart9b.c: 160: {
   443        4text <                         _StartUSARTRC:
   444  000000                     
   445                           ;uart9b.c: 161: UADt.REXT=0;
   446        4text <           1   bss 	 .                	movlb	_UADt shr (0+8)
   447        4text >           1ÿ   bss 
 m                	bcf	_UADt& (0+255),6,b
   448                           ;uart9b.c: 162: UADt.REnd=0;
   449        4text @           1ÿ   bss 
 i                	bcf	_UADt& (0+255),1,b
   450                           ;uart9b.c: 163: ADDEN=1;
   451        4text B   d   86AB               	bsf	4011,3,c
   452                           ;uart9b.c: 164: CREN=1;
   453        4text D   ^   88AB               	bsf	4011,4,c
   454                           ;uart9b.c: 165: }
   455        4text F   &   0012               	return	
   456        4text H   ®                      __end_of_StartUSARTRC:
   457                           ;uart9b.c: 178: void IntUSARTTR(void)
   458                           ;uart9b.c: 179: {
   459        4text H                         _IntUSARTTR:
   460  000000                     
   461                           ;uart9b.c: 180: if(!UADt.indeks) TX9D=1;
   462        4text H        î   ö   bss    	   
      ð   1bss    ÿ   
 !          	lfsr	0,_UADt+1
   463        4text L   -   50EF               	movf	indf0,w,c
   464        4text N   &   E102               	bnz	l23
   465        4text P   5   80AC               	bsf	4012,0,c	;volatile
   466        4text R   '   D001               	goto	l24
   467        4text T   `                      l23:
   468                           ;uart9b.c: 181: else TX9D=0;
   469        4text T   5   90AC               	bcf	4012,0,c	;volatile
   470        4text V                         l24:
   471                           ;uart9b.c: 182: if(UADt.TNData>40) UADt.TNData=4
      +                          0;
   472        4text V   '   0E28               	movlw	40
   473        4text X           1   bss    	 2                	movlb	(_UADt+3) shr (0+8)
   474        4text Z        e   1ÿ   bss    
 4                	cpfsgt	(_UADt+3)& (0+255),b
   475        4text \   '   D002               	goto	l25
   476        4text ^      CFE8   ð   übss     &           	movff	wreg,_UADt+3
   477        4text b                         l25:
   478                           ;uart9b.c: 183: if(UADt.indeks>40-1) UADt.indeks
      +                          =40-1;
   479        4text b   '   0E27               	movlw	39
   480        4text d           1   bss    	 2                	movlb	(_UADt+1) shr (0+8)
   481        4text f        e   1ÿ   bss    
 4                	cpfsgt	(_UADt+1)& (0+255),b
   482        4text h   '   D002               	goto	l26
   483        4text j      CFE8   ð   übss     &           	movff	wreg,_UADt+1
   484        4text n   r                      l26:
   485                           ;uart9b.c: 184: TXREG=bufTUART[UADt.indeks++];
   486        4text n        î   ö   bss    	   
      ð   1bss    ÿ   
 !          	lfsr	0,_UADt+1
   487        4text r   -   50EF               	movf	indf0,w,c
   488        4text t   -   2AEF               	incf	indf0,f,c
   489        4text v      "  î   ö   bigbss (   	   
      ð   1bigbss (   ÿ   
 #          	lfsr	0,_bufTUART
   490        4text z   .   26E9               	addwf	fsr0l,f,c
   491        4text |   &   0E00               	movlw	0
   492        4text ~   /   22EA               	addwfc	fsr0h,f,c
   493        4text    -   50EF               	movf	indf0,w,c
   494        4text    ²   6EAD               	movwf	4013,c	;volatile
   495                           ;uart9b.c: 185: if(UADt.indeks<UADt.TNData) UADt
      +                          .TData=1;
   496        4text         À   übss     +   FFE8         	movff	_UADt+3,wreg
   497        4text            1   bss    	 2                	movlb	(_UADt+1) shr (0+8)
   498        4text         a   1ÿ   bss    
 4                	cpfslt	(_UADt+1)& (0+255),b
   499        4text    '   D002               	goto	l27
   500        4text            1ÿ   bss 
 /                	bsf	_UADt& (0+255),4,b
   501        4text    &   0012               	return	
   502        4text    X                      l27:
   503                           ;uart9b.c: 186: else
   504        4text            1   bss 	 .                	movlb	_UADt shr (0+8)
   505        4text            1ÿ   bss 
 n                	bcf	_UADt& (0+255),7,b
   506                           ;uart9b.c: 189: UADt.TData=0;
   507        4text            1ÿ   bss 
 m                	bcf	_UADt& (0+255),4,b
   508                           ;uart9b.c: 190: UADt.TEnd=1;
   509        4text            1ÿ   bss 
 h                	bsf	_UADt& (0+255),5,b
   510                           ;uart9b.c: 191: TXIE=0;
   511        4text    ^   989D               	bcf	3997,4,c
   512                           ;uart9b.c: 192: }
   513        4text    &   0012               	return	
   514        4text    ®                      __end_of_IntUSARTTR:
   515                           ;uart9b.c: 197: void StartUSARTTR(void)
   516                           ;uart9b.c: 198: {
   517        4text                          _StartUSARTTR:
   518  000000                     
   519                           ;uart9b.c: 199: if(TXIE) return;
   520        4text    -   B89D               	btfsc	3997,4,c
   521        4text     d   0012               	return	
   522                           ;uart9b.c: 200: UADt.TEXT=0;
   523        4text ¢           1   bss 	 .                	movlb	_UADt shr (0+8)
   524        4text ¤           1ÿ   bss 
 ¨                	bcf	_UADt& (0+255),7,b
   525                           ;uart9b.c: 201: UADt.TNData=(bufTUART[1]&0b00011
      +                          111);
   526        4text ¦        À   übigbss )    /   FFE8         	movff	_bufTUART+1,wreg
   527        4text ª   '   0B1F               	andlw	31
   528        4text ¬      CFE8   ð   übss                 	movff	wreg,_UADt+3
   529                           ;uart9b.c: 202: if((bufTUART[2]==5)||(bufTUART[2
      +                          ]==4))
   530        4text °        À   übigbss *    /   FFE8         	movff	_bufTUART+2,wreg
   531        4text ´   &   0A05               	xorlw	5
   532        4text ¶   &   E004               	bz	u210
   533        4text ¸        À   übigbss *    /   FFE8         	movff	_bufTUART+2,wreg
   534        4text ¼   &   0A04               	xorlw	4
   535        4text ¾   &   E10C               	bnz	l31
   536        4text À   V                      u210:
   537                           ;uart9b.c: 203: {
   538        4text À           1   bss 	 .                	movlb	_UADt shr (0+8)
   539        4text Â           1ÿ   bss 
 ´                	bsf	_UADt& (0+255),7,b
   540                           ;uart9b.c: 205: UADt.TNData=UADt.TNData+(bufTUAR
      +                          T[3]&0b00011111);
   541        4text Ä        À   übss          ð   ütemp  &          	movff	_UADt+3,btemp
   542        4text È        À   übigbss +         ð   ütemp     ,          	movff	_bufTUART+3,btemp+1
   543        4text Ì   '   0E1F               	movlw	31
   544        4text Î           1temp     *                	andwf	btemp+1,f,c
   545        4text Ð        P   1temp  '                	movf	btemp,w,c
   546        4text Ò        $   1temp     *                	addwf	btemp+1,w,c
   547        4text Ô      CFE8   ð   übss     &           	movff	wreg,_UADt+3
   548        4text Ø   U                      l31:
   549                           ;uart9b.c: 207: }
   550        4text Ø   '   0E28               	movlw	40
   551        4text Ú           1   bss    	 2                	movlb	(_UADt+3) shr (0+8)
   552        4text Ü        e   1ÿ   bss    
 4                	cpfsgt	(_UADt+3)& (0+255),b
   553        4text Þ   '   D002               	goto	l32
   554        4text à      CFE8   ð   übss     &           	movff	wreg,_UADt+3
   555        4text ä   b                      l32:
   556                           ;uart9b.c: 209: UADt.indeks=0;
   557        4text ä           1   bss    	 2                	movlb	(_UADt+1) shr (0+8)
   558        4text æ        k   1ÿ   bss    
 p                	clrf	(_UADt+1)& (0+255),b
   559                           ;uart9b.c: 210: UADt.TEnd=0;
   560        4text è           1ÿ   bss 
 h                	bcf	_UADt& (0+255),5,b
   561                           ;uart9b.c: 211: TXIE=1;
   562        4text ê   ^   889D               	bsf	3997,4,c
   563                           ;uart9b.c: 212: }
   564        4text ì   &   0012               	return	
   565        4text î   ¯                      __end_of_StartUSARTTR:
   566                           ;uart9b.c: 214: void StopUSARTTR(void)
   567                           ;uart9b.c: 215: {
   568        4text î                         _StopUSARTTR:
   569  000000                     
   570                           ;uart9b.c: 216: TXIE=0;
   571        4text î   j   989D               	bcf	3997,4,c
   572                           ;uart9b.c: 217: UADt.TData=0;
   573        4text ð           1   bss 	 .                	movlb	_UADt shr (0+8)
   574        4text ò           1ÿ   bss 
 m                	bcf	_UADt& (0+255),4,b
   575                           ;uart9b.c: 218: UADt.TEnd=0;
   576        4text ô           1ÿ   bss 
 m                	bcf	_UADt& (0+255),5,b
   577                           ;uart9b.c: 219: UADt.TEXT=0;
   578        4text ö           1ÿ   bss 
 b                	bcf	_UADt& (0+255),7,b
   579                           ;uart9b.c: 220: }
   580        4text ø   &   0012               	return	
   581        4text ú   ¬                      __end_of_StopUSARTTR:
   582                           ;uart9b.c: 224: void ClrRSRBuf(void)
   583                           ;uart9b.c: 225: {
   584        4text ú                         _ClrRSRBuf:
   585  000000                     
   586                           ;uart9b.c: 226: unsigned char i;
   587        4text ú   +   6AD9               	clrf	fsr2l,c
   588        4text ü   "                      l35:
   589        4text ü   -   50D9               	movf	fsr2l,w,c
   590        4text þ        î   ö   bigbss 	   
      ð   1bigbss ÿ   
 #          	lfsr	0,_bufRUART
   591        4text    .   26E9               	addwf	fsr0l,f,c
   592        4text    &   0E00               	movlw	0
   593        4text    /   22EA               	addwfc	fsr0h,f,c
   594        4text    +   6AEF               	clrf	indf0,c
   595        4text 
   -   2AD9               	incf	fsr2l,f,c
   596        4text    '   0E27               	movlw	39
   597        4text    -   64D9               	cpfsgt	fsr2l,c
   598        4text    '   D7F5               	goto	l35
   599        4text    Z   0C27               	retlw	39
   600                           ;uart9b.c: 228: }
   601        4text    ª                      __end_of_ClrRSRBuf:
   602                           ;uart9b.c: 231: void ClrRSTBuf(void)
   603                           ;uart9b.c: 232: {
   604        4text                          _ClrRSTBuf:
   605  000000                     
   606                           ;uart9b.c: 233: unsigned char i;
   607        4text    +   6AD9               	clrf	fsr2l,c
   608        4text    "                      l39:
   609        4text    -   50D9               	movf	fsr2l,w,c
   610        4text       "  î   ö   bigbss (   	   
      ð   1bigbss (   ÿ   
 #          	lfsr	0,_bufTUART
   611        4text    .   26E9               	addwf	fsr0l,f,c
   612        4text    &   0E00               	movlw	0
   613        4text     /   22EA               	addwfc	fsr0h,f,c
   614        4text "   +   6AEF               	clrf	indf0,c
   615        4text $   -   2AD9               	incf	fsr2l,f,c
   616        4text &   '   0E27               	movlw	39
   617        4text (   -   64D9               	cpfsgt	fsr2l,c
   618        4text *   '   D7F5               	goto	l39
   619        4text ,   Z   0C27               	retlw	39
   620                           ;uart9b.c: 235: }
   621        4text .   û                      __end_of_ClrRSTBuf:
   622                           ;uart9b.c: 238: void SetRSTBuf(const unsigned ch
      +                          ar indeks,const unsigned char data)
   623                           ;uart9b.c: 239: {
   624        4text .            2 ?_SetRSTBuf  '                	dw	?_SetRSTBuf
   625        4text 0                         _SetRSTBuf:
   626  000000                     
   627                           ; _indeks loaded to fsr2l
   628        4text 0   ¤   6ED9               	movwf	fsr2l,c
   629                           ;uart9b.c: 240: if(indeks<40) bufTUART[indeks]=d
      +                          ata;
   630        4text 2   '   0E28               	movlw	40
   631        4text 4   -   60D9               	cpfslt	fsr2l,c
   632        4text 6   '   D009               	goto	l43
   633        4text 8   -   50D9               	movf	fsr2l,w,c
   634        4text :      "  î   ö   bigbss (   	   
      ð   1bigbss (   ÿ   
 #          	lfsr	0,_bufTUART
   635        4text >   .   26E9               	addwf	fsr0l,f,c
   636        4text @   &   0E00               	movlw	0
   637        4text B   /   22EA               	addwfc	fsr0h,f,c
   638        4text D        À   ü ?_SetRSTBuf  0   FFEF         	movff	?_SetRSTBuf,indf0
   639        4text H   &   0C00               	retlw	0
   640        4text J   m                      l43:
   641                           ;uart9b.c: 241: else bufTUART[40-1]=data;
   642        4text J        À   ü ?_SetRSTBuf       ð   übigbss O    d          	movff	?_SetRSTBuf,_bufTUART+39
   643                           ;uart9b.c: 243: }
   644        4text N   &   0012               	return	
   645        4text P   ë                      __end_of_SetRSTBuf:
   646                           ;uart9b.c: 244: unsigned char GetRSTBuf(const un
      +                          signed char indeks)
   647                           ;uart9b.c: 245: {
   648        4text P                         _GetRSTBuf:
   649  000000                     
   650                           ; _indeks loaded to fsr2l
   651        4text P   ¦   6ED9               	movwf	fsr2l,c
   652                           ;uart9b.c: 246: if(indeks<40) return bufTUART[in
      +                          deks];
   653        4text R   '   0E28               	movlw	40
   654        4text T   -   60D9               	cpfslt	fsr2l,c
   655        4text V   '   D008               	goto	l46
   656        4text X   -   50D9               	movf	fsr2l,w,c
   657        4text Z      "  î   ö   bigbss (   	   
      ð   1bigbss (   ÿ   
 #          	lfsr	0,_bufTUART
   658        4text ^   .   26E9               	addwf	fsr0l,f,c
   659        4text `   &   0E00               	movlw	0
   660        4text b   /   22EA               	addwfc	fsr0h,f,c
   661        4text d   -   50EF               	movf	indf0,w,c
   662        4text f   &   0012               	return	
   663        4text h   o                      l46:
   664                           ;uart9b.c: 247: else return bufTUART[40-1];
   665        4text h        À   übigbss O    0   FFE8         	movff	_bufTUART+39,wreg
   666        4text l   Y   0012               	return	
   667                           ;uart9b.c: 248: }
   668        4text n   ë                      __end_of_GetRSTBuf:
   669                           ;uart9b.c: 251: unsigned char GetRSRBuf(const un
      +                          signed char indeks)
   670                           ;uart9b.c: 252: {
   671        4text n                         _GetRSRBuf:
   672  000000                     
   673                           ; _indeks loaded to fsr2l
   674        4text n   ¦   6ED9               	movwf	fsr2l,c
   675                           ;uart9b.c: 253: if(indeks<40) return bufRUART[in
      +                          deks];
   676        4text p   '   0E28               	movlw	40
   677        4text r   -   60D9               	cpfslt	fsr2l,c
   678        4text t   '   D008               	goto	l49
   679        4text v   -   50D9               	movf	fsr2l,w,c
   680        4text x        î   ö   bigbss 	   
      ð   1bigbss ÿ   
 #          	lfsr	0,_bufRUART
   681        4text |   .   26E9               	addwf	fsr0l,f,c
   682        4text ~   &   0E00               	movlw	0
   683        4text    /   22EA               	addwfc	fsr0h,f,c
   684        4text    -   50EF               	movf	indf0,w,c
   685        4text    &   0012               	return	
   686        4text    o                      l49:
   687                           ;uart9b.c: 254: else return bufRUART[40-1];
   688        4text         À   übigbss '    0   FFE8         	movff	_bufRUART+39,wreg
   689        4text    Y   0012               	return	
   690                           ;uart9b.c: 255: }
   691        4text                         __end_of_GetRSRBuf:
   692                           ;uart9b.c: 259: unsigned char LiczRSCHK(const un
      +                          signed char *bf,const unsigned char nData)
   693                           ;uart9b.c: 260: {
   694        4text             2 ?_LiczRSCHK  '                	dw	?_LiczRSCHK
   695        4text                          _LiczRSCHK:
   696  000000                     
   697                           ;uart9b.c: 261: unsigned char i,chk;
   698        4text    ª   6AE1               	clrf	fsr1l,c
   699                           ;uart9b.c: 263: for(i=0;i<nData;i++) chk+=(*(bf+
      +                          i)+i)^0xAA;
   700        4text    +   6AD9               	clrf	fsr2l,c
   701        4text    "                      l55:
   702        4text            1    __Lparam 	 1                	movlb	__Lparam shr (0+8)
   703        4text       ,  Q   1 ÿ   __Lparam 
 ?_LiczRSCHK     E                	movf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),w
   704        4text    .   5CD9               	subwf	fsr2l,w,c
   705        4text    &   E21C               	bc	u290
   706        4text    -   50D9               	movf	fsr2l,w,c
   707        4text       &  %   1 ÿ   __Lparam 
 ?_LiczRSCHK  B                	addwf	?_LiczRSCHK^(__Lparam& (0+65280)),w
   708        4text         n   1temp  &                	movwf	btemp,c
   709        4text     &   0E00               	movlw	0
   710        4text ¢      ,  !   1 ÿ   __Lparam 
 ?_LiczRSCHK     G                	addwfc	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),w
   711        4text ¤        n   1temp     (                	movwf	btemp+1,c
   712        4text ¦        À   ütemp  ,   FFF6         	movff	btemp,tblptrl
   713        4text ª        À   ütemp     .   FFF7         	movff	btemp+1,tblptrh
   714        4text ®           1 __ramtop ÿÿÿÿ 1                	movlw	(high __ramtop+-1)
   715        4text °   /   64F7               	cpfsgt	tblptrh,c
   716        4text ²   '   D003               	bra	u287
   717        4text ´   '   0008               	tblrd		*
   718        4text ¶   .   50F5               	movf	tablat,w,c
   719        4text ¸   '   D005               	bra	u280
   720        4text º   #                      u287:
   721        4text º   2   CFF6 FFE9          	movff	tblptrl,fsr0l
   722        4text ¾   2   CFF7 FFEA          	movff	tblptrh,fsr0h
   723        4text Â   -   50EF               	movf	indf0,w,c
   724        4text Ä   #                      u280:
   725        4text Ä        n   1temp  &                	movwf	btemp,c
   726        4text Æ   -   50D9               	movf	fsr2l,w,c
   727        4text È        $   1temp  (                	addwf	btemp,w,c
   728        4text Ê   (   0AAA               	xorlw	-86
   729        4text Ì   .   26E1               	addwf	fsr1l,f,c
   730        4text Î   -   2AD9               	incf	fsr2l,f,c
   731        4text Ð   '   D7E0               	goto	l55
   732        4text Ò   `                      u290:
   733                           ;uart9b.c: 264: return chk;
   734        4text Ò   -   50E1               	movf	fsr1l,w,c
   735        4text Ô   Y   0012               	return	
   736                           ;uart9b.c: 265: }
   737        4text Ö   Ú                      __end_of_LiczRSCHK:
   738                           ;uart9b.c: 269: void SetRSCHK(unsigned char nDat
      +                          a)
   739                           ;uart9b.c: 270: {
   740        4text Ö                         _SetRSCHK:
   741  000000                     
   742                           ; _nData loaded to prodl
   743        4text Ö   t   6EF3               	movwf	prodl,c
   744                           ;uart9b.c: 271: if(nData>40) nData=40;
   745        4text Ø   '   0E28               	movlw	40
   746        4text Ú   -   64F3               	cpfsgt	prodl,c
   747        4text Ü   '   D001               	goto	l57
   748        4text Þ   ,   6EF3               	movwf	prodl,c
   749        4text à   h                      l57:
   750                           ;uart9b.c: 272: if(!nData) nData=40;
   751        4text à   -   50F3               	movf	prodl,w,c
   752        4text â   &   E102               	bnz	l58
   753        4text ä   '   0E28               	movlw	40
   754        4text æ   ,   6EF3               	movwf	prodl,c
   755        4text è                         l58:
   756                           ;uart9b.c: 273: UADt.CHK=LiczRSCHK(bufTUART,nDat
      +                          a-1);
   757        4text è           1    __Lparam 	 1                	movlb	__Lparam shr (0+8)
   758        4text ê           1bigbss (    ,                	movlw	low _bufTUART
   759        4text ì      &  o   1 ÿ   __Lparam 
 ?_LiczRSCHK  B                	movwf	?_LiczRSCHK^(__Lparam& (0+65280)),b
   760        4text î           1bigbss (    -                	movlw	high _bufTUART
   761        4text ð      ,  o   1 ÿ   __Lparam 
 ?_LiczRSCHK     F                	movwf	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),b
   762        4text ò   -   04F3               	decf	prodl,w,c
   763        4text ô      ,  o   1 ÿ   __Lparam 
 ?_LiczRSCHK     F                	movwf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),b
   764        4text ö   9   DFCB               	call	_LiczRSCHK	;wreg free
   765        4text ø      CFE8   ð   übss     s           	movff	wreg,_UADt+4
   766                           ;uart9b.c: 274: bufTUART[nData-1]=UADt.CHK;
   767        4text ü   -   50F3               	movf	prodl,w,c
   768        4text þ      "  î   ö   bigbss '   	   
      ð   1bigbss '   ÿ   
 &          	lfsr	0,_bufTUART+-1
   769        4text    .   26E9               	addwf	fsr0l,f,c
   770        4text    &   0E00               	movlw	0
   771        4text    /   22EA               	addwfc	fsr0h,f,c
   772        4text         À   übss     _   FFEF         	movff	_UADt+4,indf0
   773                           ;uart9b.c: 275: }
   774        4text    &   0C00               	retlw	0
   775        4text    ´                      __end_of_SetRSCHK:
   776                           ;uart9b.c: 280: unsigned char VerifyRSACK(void)
   777                           ;uart9b.c: 281: {
   778        4text                           _VerifyRSACK:
   779  000000                     
   780                           ;uart9b.c: 282: if(bufRUART[2]==0xff) return 1;
   781        4text         À   übigbss          ð   ütemp  *          	movff	_bufRUART+2,btemp
   782        4text         (   1temp  '                	incf	btemp,w,c
   783        4text    &   E101               	bnz	l60
   784        4text    &   0C01               	retlw	1
   785        4text    ]                      l60:
   786                           ;uart9b.c: 283: return 0;
   787        4text    Y   0C00               	retlw	0
   788                           ;uart9b.c: 284: }
   789        4text    è                      __end_of_VerifyRSACK:
   790                           ;uart9b.c: 289: unsigned char VerifyRSCHK(unsign
      +                          ed char nData)
   791                           ;uart9b.c: 290: {
   792        4text                          _VerifyRSCHK:
   793  000000                     
   794                           ; _nData loaded to prodl
   795        4text    t   6EF3               	movwf	prodl,c
   796                           ;uart9b.c: 291: if(nData>40) nData=40;
   797        4text    '   0E28               	movlw	40
   798        4text    -   64F3               	cpfsgt	prodl,c
   799        4text     '   D001               	goto	l62
   800        4text "   ,   6EF3               	movwf	prodl,c
   801        4text $   h                      l62:
   802                           ;uart9b.c: 292: if(!nData) nData=40;
   803        4text $   -   50F3               	movf	prodl,w,c
   804        4text &   &   E102               	bnz	l63
   805        4text (   '   0E28               	movlw	40
   806        4text *   ,   6EF3               	movwf	prodl,c
   807        4text ,   ²                      l63:
   808                           ;uart9b.c: 293: if(bufRUART[nData-1]==LiczRSCHK(
      +                          bufRUART,nData-1)) return 1;
   809        4text ,           1    __Lparam 	 1                	movlb	__Lparam shr (0+8)
   810        4text .           1bigbss  ,                	movlw	low _bufRUART
   811        4text 0      &  o   1 ÿ   __Lparam 
 ?_LiczRSCHK  B                	movwf	?_LiczRSCHK^(__Lparam& (0+65280)),b
   812        4text 2           1bigbss  -                	movlw	high _bufRUART
   813        4text 4      ,  o   1 ÿ   __Lparam 
 ?_LiczRSCHK     F                	movwf	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),b
   814        4text 6   -   04F3               	decf	prodl,w,c
   815        4text 8      ,  o   1 ÿ   __Lparam 
 ?_LiczRSCHK     F                	movwf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),b
   816        4text :   9   DFA9               	call	_LiczRSCHK	;wreg free
   817        4text <        n   1temp  &                	movwf	btemp,c
   818        4text >        À   ütemp       ð   ütemp     &          	movff	btemp,btemp+2
   819        4text B        j   1temp     '                	clrf	btemp+3,c
   820        4text D   -   50F3               	movf	prodl,w,c
   821        4text F      "  î   ö   bigbss ÿÿÿÿ	   
      ð   1bigbss ÿÿÿÿÿ   
 &          	lfsr	0,_bufRUART+-1
   822        4text J   .   26E9               	addwf	fsr0l,f,c
   823        4text L   &   0E00               	movlw	0
   824        4text N   /   22EA               	addwfc	fsr0h,f,c
   825        4text P   -   50EF               	movf	indf0,w,c
   826        4text R        n   1temp  &                	movwf	btemp,c
   827        4text T           1temp     *                	xorwf	btemp+2,w,c
   828        4text V   '   E101               	bnz	u355
   829        4text X        R   1temp     )                	movf	btemp+3,f,c
   830        4text Z   #                      u355:
   831        4text Z   &   E101               	bnz	l64
   832        4text \   &   0C01               	retlw	1
   833        4text ^   ]                      l64:
   834                           ;uart9b.c: 294: return 0;
   835        4text ^   Y   0C00               	retlw	0
   836                           ;uart9b.c: 295: }
   837        4text `   ´                      __end_of_VerifyRSCHK:
   838                           ;uart9b.c: 298: unsigned char GetRSCHK(void)
   839                           ;uart9b.c: 299: {
   840        4text `                         _GetRSCHK:
   841  000000                     
   842                           ;uart9b.c: 300: return UADt.CHK;
   843        4text `        À   übss     +   FFE8         	movff	_UADt+4,wreg
   844        4text d   Y   0012               	return	
   845                           ;uart9b.c: 301: }
   846        4text f   é                      __end_of_GetRSCHK:
   847                           ;uart9b.c: 304: unsigned char SetNDatCHK(const u
      +                          nsigned char Data)
   848                           ;uart9b.c: 305: {
   849        4text f                         _SetNDatCHK:
   850  000000                     
   851                           ; _Data loaded to prodl
   852        4text f   r   6EF3               	movwf	prodl,c
   853                           ;uart9b.c: 306: unsigned char a,b,d;
   854        4text h   -   50F3               	movf	prodl,w,c
   855        4text j   '   0B1F               	andlw	31
   856        4text l   m   6ED9               	movwf	fsr2l,c
   857                           ;uart9b.c: 308: a=d&0b00000111;
   858        4text n   -   50D9               	movf	fsr2l,w,c
   859        4text p   &   0B07               	andlw	7
   860        4text r   r   6EE1               	movwf	fsr1l,c
   861                           ;uart9b.c: 309: b=0b00000100|(d>>3);
   862        4text t   .   38D9               	swapf	fsr2l,w,c
   863        4text v   -   46E8               	rlncf	wreg,f,c
   864        4text x   '   0B1F               	andlw	31
   865        4text z   &   0904               	iorlw	4
   866        4text |   r   6EE9               	movwf	fsr0l,c
   867                           ;uart9b.c: 310: return d|((a^b)<<5);
   868        4text ~   -   50E9               	movf	fsr0l,w,c
   869        4text    .   18E1               	xorwf	fsr1l,w,c
   870        4text         n   1temp  &                	movwf	btemp,c
   871        4text    &   0E05               	movlw	5
   872        4text         n   1temp     (                	movwf	btemp+1,c
   873        4text    #                      u365:
   874        4text    -   90D8               	bcf	status,0,c
   875        4text         6   1temp  '                	rlcf	btemp,f,c
   876        4text         .   1temp     +                	decfsz	btemp+1,f,c
   877        4text    (   D7FC               	goto	u365
   878        4text    -   50D9               	movf	fsr2l,w,c
   879        4text            1temp  (                	iorwf	btemp,w,c
   880        4text    Y   0012               	return	
   881                           ;uart9b.c: 311: }
   882        4text    î                      __end_of_SetNDatCHK:
   883                           ;uart9b.c: 321: unsigned char VerifyNDatCHK(cons
      +                          t unsigned char Data)
   884                           ;uart9b.c: 322: {
   885        4text                          _VerifyNDatCHK:
   886  000000                     
   887                           ; _Data loaded to prodh
   888        4text    ¤   6EF4               	movwf	prodh,c
   889                           ;uart9b.c: 323: if(SetNDatCHK(Data)==Data) retur
      +                          n 1;
   890        4text    -   50F4               	movf	prodh,w,c
   891        4text    /   DFE5               	call	_SetNDatCHK
   892        4text    .   18F4               	xorwf	prodh,w,c
   893        4text    &   E101               	bnz	l68
   894        4text     &   0C01               	retlw	1
   895        4text ¢   ]                      l68:
   896                           ;uart9b.c: 324: return 0;
   897        4text ¢   Y   0C00               	retlw	0
   898                           ;uart9b.c: 325: }
   899        4text ¤   æ                      __end_of_VerifyNDatCHK:
   900                           ;uart9b.c: 328: void SetExNDatCHK(const unsigned
      +                           char ndt)
   901                           ;uart9b.c: 329: {
   902        4text ¤                         _SetExNDatCHK:
   903  000000                     
   904                           ; _ndt loaded to prodh
   905        4text ¤   }   6EF4               	movwf	prodh,c
   906                           ;uart9b.c: 330: volatile unsigned char chkndat;
   907        4text ¦   '   0E20               	movlw	32
   908        4text ¨   -   60F4               	cpfslt	prodh,c
   909        4text ª   Z   D003               	goto	l70
   910                           ;uart9b.c: 332: {
   911        4text ¬   -   50F4               	movf	prodh,w,c
   912        4text ®   /   DFDB               	call	_SetNDatCHK
   913        4text °   Y   D002               	goto	L1
   914                           ;uart9b.c: 334: }
   915        4text ²   p                      l70:
   916                           ;uart9b.c: 335: else chkndat=SetNDatCHK(31);
   917        4text ²   '   0E1F               	movlw	31
   918        4text ´   /   DFD8               	call	_SetNDatCHK
   919        4text ¶   !                      L1:
   920        4text ¶           1    __Lparam 	 1                	movlb	__Lparam shr (0+8)
   921        4text ¸      *  o   1 ÿ   __Lparam 
 ?a_SetExNDatCHK  ¹                	movwf	?a_SetExNDatCHK^(__Lparam& (0+65280)),b	;
      +                          volatile
   922                           ;uart9b.c: 336: SetRSTBuf(1,chkndat);
   923        4text º      *  Q   1 ÿ   __Lparam 
 ?a_SetExNDatCHK  q                	movf	?a_SetExNDatCHK^(__Lparam& (0+65280)),w	;v
      +                          olatile
   924        4text ¼      &  o   1 ÿ   __Lparam 
 ?_SetRSTBuf  B                	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   925        4text ¾   &   0E01               	movlw	1
   926        4text À   j   DF37               	call	_SetRSTBuf
   927                           ;uart9b.c: 337: if(ndt>31)
   928        4text Â   '   0E1F               	movlw	31
   929        4text Ä   -   64F4               	cpfsgt	prodh,c
   930        4text Æ   Z   D004               	goto	l72
   931                           ;uart9b.c: 338: {
   932        4text È   -   50F4               	movf	prodh,w,c
   933        4text Ê   (   0FE1               	addlw	-31
   934        4text Ì   /   DFCC               	call	_SetNDatCHK
   935        4text Î   Y   D002               	goto	L2
   936                           ;uart9b.c: 340: }
   937        4text Ð   o                      l72:
   938                           ;uart9b.c: 341: else chkndat=SetNDatCHK(0);
   939        4text Ð   &   0E00               	movlw	0
   940        4text Ò   /   DFC9               	call	_SetNDatCHK
   941        4text Ô   !                      L2:
   942        4text Ô           1    __Lparam 	 1                	movlb	__Lparam shr (0+8)
   943        4text Ö      *  o   1 ÿ   __Lparam 
 ?a_SetExNDatCHK  ¹                	movwf	?a_SetExNDatCHK^(__Lparam& (0+65280)),b	;
      +                          volatile
   944                           ;uart9b.c: 342: SetRSTBuf(3,chkndat);
   945        4text Ø      *  Q   1 ÿ   __Lparam 
 ?a_SetExNDatCHK  q                	movf	?a_SetExNDatCHK^(__Lparam& (0+65280)),w	;v
      +                          olatile
   946        4text Ú      &  o   1 ÿ   __Lparam 
 ?_SetRSTBuf  B                	movwf	?_SetRSTBuf^(__Lparam& (0+65280)),b
   947        4text Ü   &   0E03               	movlw	3
   948        4text Þ   a   D728               	goto	_SetRSTBuf
   949                           ;uart9b.c: 343: }
   950        4text à   ´                      __end_of_SetExNDatCHK:
   951                           ;uart9b.c: 346: unsigned char GetNDat(void)
   952                           ;uart9b.c: 347: {
   953        4text à   À                      _GetNDat:
   954  000000                     
   955                           ;uart9b.c: 348: return (GetRSRBuf(1)&0b00011111)
      +                          ;
   956        4text à   &   0E01               	movlw	1
   957        4text â   .   DF45               	call	_GetRSRBuf
   958        4text ä   '   0B1F               	andlw	31
   959        4text æ   Y   0012               	return	
   960                           ;uart9b.c: 349: }
   961        4text è   ±                      __end_of_GetNDat:
   962                           ;uart9b.c: 352: unsigned char GetExNDat(void)
   963                           ;uart9b.c: 353: {
   964        4text è   Ü                      _GetExNDat:
   965  000000                     
   966                           ;uart9b.c: 354: return (GetRSRBuf(1)&0b00011111)
      +                          +(GetRSRBuf(3)&0b00011111);
   967        4text è   &   0E03               	movlw	3
   968        4text ê   .   DF41               	call	_GetRSRBuf
   969        4text ì        n   1temp     (                	movwf	btemp+1,c
   970        4text î   '   0E1F               	movlw	31
   971        4text ð           1temp     *                	andwf	btemp+1,f,c
   972        4text ò   &   0E01               	movlw	1
   973        4text ô   .   DF3C               	call	_GetRSRBuf
   974        4text ö        n   1temp  &                	movwf	btemp,c
   975        4text ø   '   0E1F               	movlw	31
   976        4text ú           1temp  (                	andwf	btemp,f,c
   977        4text ü        P   1temp     )                	movf	btemp+1,w,c
   978        4text þ        $   1temp  (                	addwf	btemp,w,c
   979        4text     Y   0012               	return	
   980                           ;uart9b.c: 355: }
   981        4text    ý                     __end_of_GetExNDat:
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
ý   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  100ý9  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  00ý0000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000 ý                    
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000      ý               
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000           ý          
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                ý     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     ý
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  11ý08  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  0ý00000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000ý                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000     ý                
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000          ý           
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000               ý      
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                    ý 
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1ý207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  ý000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  00000ý0                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000    ý                 
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000         ý            
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000              ý       
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                   ý  
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  ý1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320 ý 000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  0000ý00                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000   ý                  
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000        ý             
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000             ý        
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                  ý   
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
 ý 1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413  000000                     
  1414  000000                     
  1415  000000                     
  1416  000000                     
  1417  000000                     
  1418  000000                     
  1419ý  000000                     
  1420  000000                     
  1421  000000                     
  1422  000000                     
  1423  000000                     
  1424  000000                     
  1425  000000                     
  1426  000000                     
  1427  000000                     
  1428  000000                     
  1429  000000                     
  1430  000000                     
  1431  000000                     
  1432  000000                     
  1433  000ý000                     
  1434  000000                     
  1435  000000                     
  1436  000000                     
  1437  000000                     
  1438  000000                     
  1439  000000                     
  1440  000000                     
  1441  000000                     
  1442  000000                     
  1443  000000                     
  1444  000000                     
  1445  000000                     
  1446  000000                     
  1447  000000  ý                   
  1448  000000                     
  1449  000000                     
  1450  000000                     
  1451  000000                     
  1452  000000                     
  1453  000000                     
  1454  000000                     
  1455  000000                     
  1456  000000                     
  1457  000000                     
  1458  000000                     
  1459  000000                     
  1460  000000                     
  1461  000000       ý              
  1462  000000                     
  1463  000000                     
  1464  000000                     
  1465  000000                     
  1466  000000                     
  1467  000000                     
  1468  000000                     
  1469  000000                     
  1470  000000                     
  1471  000000                     
  1472  000000                     
  1473  000000                     
  1474  000000                     
  1475  000000            ý         
  1476  000000                     
  1477  000000                     
  1478  000000                     
  1479  000000                     
  1480  000000                     
  1481  000000                     
  1482  000000                     
  1483  000000                     
  1484  000000                     
  1485  000000                     
  1486  000000                     
  1487  000000                     
  1488  000000                     
  1489  000000                 è    
  1490  000000                     
  1491  000000                     
  1492  000000                     
  1493  000000                     
  1494  000000                     
  1495  000000                     
  1496  000000                     
  1497  000000                     
  1498  000000                     
  1499  000000                     
  1500  000000                     
  1501                           
  1502                           	psect	rbss
  1503        4rbss                        _RSerial:
   1504        4rbss  ý                     	ds	1
  1505  000000                     
  1506  000000                     
  1507  000000                     
  1508  000000                     
  1509  000000                     
  1510  000000                     
  1511  000000                     
  1512  000000                     
  1513  000000                     
  1514  000000                     
  1515  000000                     
  1516  000000                     
  1517  000000                     
  1518  000000ý                     
  1519  000000                     
  1520  000000                     
  1521  000000                     
  1522  000000                     
  1523  000000                     
  1524  000000                     
  1525  000000                     
  1526  000000                     
  1527  000000                     
  1528  000000                     
  1529  000000                     
  1530  000000                     
  1531  000000                     
  1532  000000     ý                
  1533  000000                     
  1534  000000                     
  1535  000000                     
  1536  000000                     
  1537  000000                     
  1538  000000                     
  1539  000000                     
  1540  000000                     
  1541  000000                     
  1542  000000                     
  1543  000000                     
  1544  000000                     
  1545  000000                     
  1546  000000          ^           
  1547  000000                     
  1548  000000                     
  1549  000000                     
  1550  000000                     
  1551  000000                     
  1552  000000                     
  1553  000000                     
  1554                           
  1555                           	psect	bss
  1556        4bss                        _UADt:
   1557        4bss  t                      	ds	5
  1558                           
  1559                           	psect	bigbss
  1560        4bigbss                         _bufRUART:
   1561        4bigbss  $                      	ds	40
  1562        4bigbss                         _bufTUART:
   1563        4bigbss  s                      	ds	40
  1564                           
  1565                           	psect	temp
  1566        4temp                        btemp:
   1567        4temp  ý                     	ds	4
  1568                           tblptrh	equ	0xFF7
  1569                           tblptrl	equ	0xFF6
  1570                           tablat	equ	0xFF5
  1571                           prodh	equ	0xFF4
  1572                           prodl	equ	0xFF3
  1573                           indf0	equ	0xFEF
  1574                           fsr0h	equ	0xFEA
  1575                           fsr0l	equ	0xFE9
  1576                           wreg	equ	0xFE8
  1577                           fsr1l	equ	0xFE1
  1578                           fsr2l	equ	0xFD9
  1579                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:33:14 2020

                    l5       4text n                           l7       4text .      
                    l8       4text                           l9       4text       
                   l10       4text                           l11       4text °       
                   l14       4text ¾                          l31       4text Ø      
                   l23       4text T                         l32       4text ä      
                   l24       4text V                         l16       4text þ       
                   l25       4text b                         l26       4text n      
                   l43       4text J                         l35       4text ü      
                   l27       4text                          l60       4text       
                   l70       4text ²                         l62       4text $      
                   l46       4text h                         l63       4text ,      
                   l55       4text                          l39       4text       
                   l72       4text Ð                         l64       4text ^      
                   l57       4text à                         l49       4text       
                   l58       4text è                         l68       4text ¢      
                  u100       4text Î                         u210       4text À      
                  u280       4text Ä                        u290       4text Ò      
                  u355       4text Z                        u365       4text       
                  u287       4text º   9                     wreg 000FE8  
             _bufRUART       4bigbss                  _bufTUART       4bigbss (       
                 _UADt       4bss           __end_of_GetNDat       4text è   ·   
                 fsr0h 000FEA                   indf0 000FEF  
                 fsr0l 000FE9                   fsr1l 000FE1  
                 fsr2l 000FD9                   btemp       4temp  Y   
                 prodh 000FF4                   prodl 000FF3  
          _VerifyRSACK       4text                 _VerifyRSCHK       4text       
           used_btemp0       4 used_btemp0                used_btemp1       4 used_btemp1     
           used_btemp2       4 used_btemp2                used_btemp3       4 used_btemp3     
     __end_of_GetRSCHK       4text f        __end_of_VerifyRSACK       4text       
  __end_of_VerifyRSCHK       4text `   9                   tablat 000FF5  
              _GetNDat       4text à   9                   status 000FD8  
              _RSerial       4rbss          __end_of_InitUart       4text <       
        _VerifyNDatCHK       4text            __end_of_SetRSCHK       4text       
              __Lparam       4 __Lparam               _StopUSARTTR       4text î      
  __end_of_StopUSARTTR       4text ú      __end_of_VerifyNDatCHK       4text ¤      
              __ramtop       4 __ramtop                _IntUSARTRC       4text <       
           _IntUSARTTR       4text H                  _ClrRSRBuf       4text ú      
            _ClrRSTBuf       4text          __end_of_IntUSARTRC       4text <      
   __end_of_IntUSARTTR       4text           __end_of_ClrRSRBuf       4text       
    __end_of_ClrRSTBuf       4text .                  _GetRSRBuf       4text n      
            _GetRSTBuf       4text P          __end_of_GetRSRBuf       4text       
    __end_of_GetRSTBuf       4text n                  _GetExNDat       4text è      
    __end_of_GetExNDat       4text                _SetExNDatCHK       4text ¤      
 __end_of_SetExNDatCHK       4text à               _StartUSARTRC       4text <      
         _StartUSARTTR       4text    X                  tblptrh 000FF7  
               tblptrl 000FF6               _GetRSCHK       4text `      
            _LiczRSCHK       4text           __end_of_LiczRSCHK       4text Ö      
 __end_of_StartUSARTRC       4text H       __end_of_StartUSARTTR       4text î      
           _SetNDatCHK       4text f                 ?_LiczRSCHK       4 ?_LiczRSCHK     
   __end_of_SetNDatCHK       4text                    _InitUart       4text     
            _SetRSTBuf       4text 0          __end_of_SetRSTBuf       4text P      
             _SetRSCHK       4text Ö             ?a_SetExNDatCHK       4 ?a_SetExNDatCHK     
           ?_SetRSTBuf       4 ?_SetRSTBuf     
   