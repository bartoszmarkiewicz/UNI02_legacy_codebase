

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Wed Mar 20 08:54:40 2013


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	text
    99                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   146                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   167                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   168                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   169                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   170                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   171                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   172                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   173                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   174                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   175                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   176                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   177                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   178                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   179                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   180                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   181                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   182                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   183                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   184                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   185                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   186                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   187                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   188                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   189                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   190                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   191                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   192                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   193                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   194                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   195                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   196                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   197                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   198                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   199  003FEE                     _Moduluj:
   200                           ;	_k assigned to ?a_ModPruCW2+0
   201  000000                     _ModPruCW2$k	set	?a_ModPruCW2
   202                           ;	_m assigned to ?a_ModDkCW2+0
   203  000000                     _ModDkCW2$m	set	?a_ModDkCW2
   204                           ;	_m assigned to ?a_ModZgCW2+0
   205  000000                     _ModZgCW2$m	set	?a_ModZgCW2
   206                           ;	_k assigned to ?a_ModPruCW4+0
   207  000000                     _ModPruCW4$k	set	?a_ModPruCW4
   208                           ;	_m assigned to ?a_ModDkCW4+0
   209  000000                     _ModDkCW4$m	set	?a_ModDkCW4
   210                           ;	_m assigned to ?a_ModZgCW4+0
   211  000000                     _ModZgCW4$m	set	?a_ModZgCW4
   212                           ;	_k assigned to ?a_ModPruCW+0
   213  000000                     _ModPruCW$k	set	?a_ModPruCW
   214                           ;	_m assigned to ?a_ModDkCW+2
   215  000000                     _ModDkCW$m	set	?a_ModDkCW+2
   216                           ;	_k assigned to ?a_ModDkCW+1
   217  000000                     _ModDkCW$k	set	?a_ModDkCW+1
   218                           ;	_ada assigned to ?a_ModDkCW+0
   219  000000                     _ModDkCW$ada	set	?a_ModDkCW
   220                           ;	_m assigned to ?a_ModZgCW+0
   221  000000                     _ModZgCW$m	set	?a_ModZgCW
   222                           ;	_m assigned to ?a_FirstPCW+1
   223  000000                     _FirstPCW$m	set	?a_FirstPCW+1
   224                           ;	_p assigned to ?a_FirstPCW+0
   225  000000                     _FirstPCW$p	set	?a_FirstPCW
   226                           ;	_m assigned to ?a_ModDkCO+2
   227  000000                     _ModDkCO$m	set	?a_ModDkCO+2
   228                           ;	_k assigned to ?a_ModDkCO+1
   229  000000                     _ModDkCO$k	set	?a_ModDkCO+1
   230                           ;	_ada assigned to ?a_ModDkCO+0
   231  000000                     _ModDkCO$ada	set	?a_ModDkCO
   232  000000                     
   233                           ;rgl.c: 27: unsigned int wpw;
   234  003FEE  D15D               	goto	l14
   235  003FF0                     l15:
   236                           ;rgl.c: 31: {
   237                           ;rgl.c: 33: {
   238  003FF0  0101               	movlb	(_M+10) shr (0+8)
   239  003FF2  5184               	movf	(_M+10)& (0+255),w,b
   240  003FF4  1185               	iorwf	(_M+11)& (0+255),w,b
   241  003FF6  E01E               	bz	l16
   242                           ;rgl.c: 35: {
   243  003FF8  C28B  F28F         	movff	_PWM+29,_PWM+33
   244                           ;rgl.c: 37: PWM.MINPWM=PWM.MDMOD;
   245  003FFC  C277  F28E         	movff	_PWM+9,_PWM+32
   246                           ;rgl.c: 38: StartCO();
   247  004000  EC6A  F024         	call	_StartCO	;wreg free
   248                           ;rgl.c: 39: ReadDataCO();
   249  004004  EC90  F026         	call	_ReadDataCO	;wreg free
   250                           ;rgl.c: 40: ModToCO();
   251  004008  EC82  F026         	call	_ModToCO	;wreg free
   252                           ;rgl.c: 41: ModZgCO();
   253  00400C  D9A9               	call	_ModZgCO	;wreg free
   254                           ;rgl.c: 42: ModDkCO();
   255  00400E  DA9D               	call	_ModDkCO	;wreg free
   256                           ;rgl.c: 43: if(RTdS(2)>10)
   257  004010  0E02               	movlw	2
   258  004012  EC98  F06E         	call	_RTdS
   259  004016  6E00               	movwf	btemp,c
   260  004018  0E0B               	movlw	11
   261  00401A  5C00               	subwf	btemp,w,c
   262  00401C  E307               	bnc	l17
   263                           ;rgl.c: 44: {
   264  00401E  0E02               	movlw	2
   265  004020  EC86  F06E         	call	_StartRTdS
   266                           ;rgl.c: 46: IncConstCOCW();
   267  004024  EC88  F026         	call	_IncConstCOCW	;wreg free
   268                           ;rgl.c: 47: IncMaxCO();
   269  004028  DBBE               	call	_IncMaxCO	;wreg free
   270                           ;rgl.c: 48: ModPruCO();
   271  00402A  DAF3               	call	_ModPruCO	;wreg free
   272  00402C                     l17:
   273                           ;rgl.c: 49: }
   274  00402C  EC34  F024         	call	_ModPrzCO	;wreg free
   275                           ;rgl.c: 51: PropOPT();
   276  004030  EF64  F024         	goto	_PropOPT	;wreg free
   277                           ;rgl.c: 52: }
   278  004034                     l16:
   279                           ;rgl.c: 53: else
   280  004034  0101               	movlb	(_M+8) shr (0+8)
   281  004036  5182               	movf	(_M+8)& (0+255),w,b
   282  004038  1183               	iorwf	(_M+9)& (0+255),w,b
   283  00403A  B4D8               	btfsc	status,2,c
   284  00403C  0012               	return	
   285                           ;rgl.c: 55: {
   286  00403E  EC8E  F024         	call	_StartMCW	;wreg free
   287                           ;rgl.c: 57: ReadDataCW();
   288  004042  EC95  F026         	call	_ReadDataCW	;wreg free
   289                           ;rgl.c: 58: ModToCW();
   290  004046  EC7C  F026         	call	_ModToCW	;wreg free
   291                           ;rgl.c: 59: ModZgCW();
   292  00404A  EC9E  F026         	call	_ModZgCW	;wreg free
   293                           ;rgl.c: 60: ModDkCW();
   294  00404E  EC8F  F027         	call	_ModDkCW	;wreg free
   295                           ;rgl.c: 61: if(RTdS(2)>10)
   296  004052  0E02               	movlw	2
   297  004054  EC98  F06E         	call	_RTdS
   298  004058  6E00               	movwf	btemp,c
   299  00405A  0E0B               	movlw	11
   300  00405C  5C00               	subwf	btemp,w,c
   301  00405E  E315               	bnc	l20
   302                           ;rgl.c: 62: {
   303  004060  0E02               	movlw	2
   304  004062  EC86  F06E         	call	_StartRTdS
   305                           ;rgl.c: 64: if(tmr<0xff) tmr++;
   306  004066  CEEC  F000         	movff	_tmr,btemp
   307  00406A  2800               	incf	btemp,w,c
   308  00406C  E002               	bz	l21
   309  00406E  010E               	movlb	_tmr shr (0+8)
   310  004070  2BEC               	incf	_tmr& (0+255),f,b
   311  004072                     l21:
   312                           ;rgl.c: 65: if(tmr2<0xff) tmr2++;
   313  004072  CEED  F000         	movff	_tmr2,btemp
   314  004076  2800               	incf	btemp,w,c
   315  004078  E002               	bz	l22
   316  00407A  010E               	movlb	_tmr2 shr (0+8)
   317  00407C  2BED               	incf	_tmr2& (0+255),f,b
   318  00407E                     l22:
   319                           ;rgl.c: 66: IncConstCOCW();
   320  00407E  EC88  F026         	call	_IncConstCOCW	;wreg free
   321                           ;rgl.c: 67: IncMaxCW();
   322  004082  EC0C  F02A         	call	_IncMaxCW	;wreg free
   323                           ;rgl.c: 68: ModPruCW();
   324  004086  ECF7  F027         	call	_ModPruCW	;wreg free
   325  00408A                     l20:
   326                           ;rgl.c: 69: }
   327  00408A  ECD1  F02A         	call	_ModPrzCW	;wreg free
   328                           ;rgl.c: 71: PropCO();
   329  00408E  EF98  F02C         	goto	_PropCO	;wreg free
   330                           ;rgl.c: 72: }
   331  004092                     l23:
   332                           ;rgl.c: 74: }
   333                           ;rgl.c: 76: {
   334  004092  0101               	movlb	(_M+10) shr (0+8)
   335  004094  5184               	movf	(_M+10)& (0+255),w,b
   336  004096  1185               	iorwf	(_M+11)& (0+255),w,b
   337  004098  E01C               	bz	l24
   338                           ;rgl.c: 78: {
   339  00409A  C28B  F28F         	movff	_PWM+29,_PWM+33
   340                           ;rgl.c: 80: PWM.MINPWM=PWM.MDMOD;
   341  00409E  C277  F28E         	movff	_PWM+9,_PWM+32
   342                           ;rgl.c: 81: StartCO2();
   343  0040A2  EC3C  F031         	call	_StartCO2	;wreg free
   344                           ;rgl.c: 82: ReadDataCO2();
   345  0040A6  ECC6  F031         	call	_ReadDataCO2	;wreg free
   346                           ;rgl.c: 83: ModToCO2();
   347  0040AA  ECA9  F031         	call	_ModToCO2	;wreg free
   348                           ;rgl.c: 84: ModZgCO();
   349  0040AE  D958               	call	_ModZgCO	;wreg free
   350                           ;rgl.c: 85: ModDkCO();
   351  0040B0  DA4C               	call	_ModDkCO	;wreg free
   352                           ;rgl.c: 86: if(RTdS(2)>10)
   353  0040B2  0E02               	movlw	2
   354  0040B4  EC98  F06E         	call	_RTdS
   355  0040B8  6E00               	movwf	btemp,c
   356  0040BA  0E0B               	movlw	11
   357  0040BC  5C00               	subwf	btemp,w,c
   358  0040BE  E307               	bnc	l25
   359                           ;rgl.c: 87: {
   360  0040C0  0E02               	movlw	2
   361  0040C2  EC86  F06E         	call	_StartRTdS
   362                           ;rgl.c: 89: IncConstCO2();
   363  0040C6  ECBE  F031         	call	_IncConstCO2	;wreg free
   364                           ;rgl.c: 90: IncMaxCO();
   365  0040CA  DB6D               	call	_IncMaxCO	;wreg free
   366                           ;rgl.c: 91: ModPruCO();
   367  0040CC  DAA2               	call	_ModPruCO	;wreg free
   368  0040CE                     l25:
   369                           ;rgl.c: 92: }
   370  0040CE  DBCC               	call	_ModPrzCO	;wreg free
   371                           ;rgl.c: 95: PropOPT();
   372  0040D0  D3FB               	goto	_PropOPT	;wreg free
   373                           ;rgl.c: 96: }
   374  0040D2                     l24:
   375                           ;rgl.c: 97: else
   376  0040D2  0101               	movlb	(_M+8) shr (0+8)
   377  0040D4  5182               	movf	(_M+8)& (0+255),w,b
   378  0040D6  1183               	iorwf	(_M+9)& (0+255),w,b
   379  0040D8  B4D8               	btfsc	status,2,c
   380  0040DA  0012               	return	
   381                           ;rgl.c: 99: {
   382  0040DC  EC61  F031         	call	_StartMCW2	;wreg free
   383                           ;rgl.c: 101: ReadDataCW2();
   384  0040E0  ECCB  F031         	call	_ReadDataCW2	;wreg free
   385                           ;rgl.c: 102: ModToCW2();
   386  0040E4  ECA3  F031         	call	_ModToCW2	;wreg free
   387                           ;rgl.c: 103: ModZgCW2();
   388  0040E8  ECD4  F031         	call	_ModZgCW2	;wreg free
   389                           ;rgl.c: 104: ModDkCW2();
   390  0040EC  ECE2  F032         	call	_ModDkCW2	;wreg free
   391                           ;rgl.c: 105: if(RTdS(2)>10)
   392  0040F0  0E02               	movlw	2
   393  0040F2  EC98  F06E         	call	_RTdS
   394  0040F6  6E00               	movwf	btemp,c
   395  0040F8  0E0B               	movlw	11
   396  0040FA  5C00               	subwf	btemp,w,c
   397  0040FC  E309               	bnc	l28
   398                           ;rgl.c: 106: {
   399  0040FE  0E02               	movlw	2
   400  004100  EC86  F06E         	call	_StartRTdS
   401                           ;rgl.c: 108: IncConstCW2();
   402  004104  ECAF  F031         	call	_IncConstCW2	;wreg free
   403                           ;rgl.c: 109: IncMaxCW2();
   404  004108  EC37  F035         	call	_IncMaxCW2	;wreg free
   405                           ;rgl.c: 110: ModPruCW2();
   406  00410C  EC42  F033         	call	_ModPruCW2	;wreg free
   407  004110                     l28:
   408                           ;rgl.c: 111: }
   409  004110  EC74  F035         	call	_ModPrzCW2	;wreg free
   410                           ;rgl.c: 113: PropCO2();
   411  004114  EF99  F035         	goto	_PropCO2	;wreg free
   412                           ;rgl.c: 114: }
   413  004118                     l29:
   414                           ;rgl.c: 116: }
   415                           ;rgl.c: 118: {
   416  004118  0101               	movlb	(_M+10) shr (0+8)
   417  00411A  5184               	movf	(_M+10)& (0+255),w,b
   418  00411C  1185               	iorwf	(_M+11)& (0+255),w,b
   419  00411E  E01C               	bz	l30
   420                           ;rgl.c: 120: {
   421  004120  C28B  F28F         	movff	_PWM+29,_PWM+33
   422                           ;rgl.c: 122: PWM.MINPWM=PWM.MDMOD;
   423  004124  C277  F28E         	movff	_PWM+9,_PWM+32
   424                           ;rgl.c: 123: StartMCO3();
   425  004128  ECFC  F035         	call	_StartMCO3	;wreg free
   426                           ;rgl.c: 124: ReadDataCO2();
   427  00412C  ECC6  F031         	call	_ReadDataCO2	;wreg free
   428                           ;rgl.c: 125: ModToCO3();
   429  004130  ECF8  F035         	call	_ModToCO3	;wreg free
   430                           ;rgl.c: 126: ModZgCO();
   431  004134  D915               	call	_ModZgCO	;wreg free
   432                           ;rgl.c: 127: ModDkCO();
   433  004136  DA09               	call	_ModDkCO	;wreg free
   434                           ;rgl.c: 128: if(RTdS(2)>10)
   435  004138  0E02               	movlw	2
   436  00413A  EC98  F06E         	call	_RTdS
   437  00413E  6E00               	movwf	btemp,c
   438  004140  0E0B               	movlw	11
   439  004142  5C00               	subwf	btemp,w,c
   440  004144  E307               	bnc	l31
   441                           ;rgl.c: 129: {
   442  004146  0E02               	movlw	2
   443  004148  EC86  F06E         	call	_StartRTdS
   444                           ;rgl.c: 131: IncConstCO2();
   445  00414C  ECBE  F031         	call	_IncConstCO2	;wreg free
   446                           ;rgl.c: 132: IncMaxCO();
   447  004150  DB2A               	call	_IncMaxCO	;wreg free
   448                           ;rgl.c: 133: ModPruCO();
   449  004152  DA5F               	call	_ModPruCO	;wreg free
   450  004154                     l31:
   451                           ;rgl.c: 134: }
   452  004154  DB89               	call	_ModPrzCO	;wreg free
   453                           ;rgl.c: 137: PropOPT();
   454  004156  D3B8               	goto	_PropOPT	;wreg free
   455                           ;rgl.c: 138: }
   456  004158                     l30:
   457                           ;rgl.c: 139: else
   458  004158  0101               	movlb	(_M+8) shr (0+8)
   459  00415A  5182               	movf	(_M+8)& (0+255),w,b
   460  00415C  1183               	iorwf	(_M+9)& (0+255),w,b
   461  00415E  E105               	bnz	u150
   462  004160  0101               	movlb	(_M+6) shr (0+8)
   463  004162  5180               	movf	(_M+6)& (0+255),w,b
   464  004164  1181               	iorwf	(_M+7)& (0+255),w,b
   465  004166  B4D8               	btfsc	status,2,c
   466  004168  0012               	return	
   467  00416A                     u150:
   468                           ;rgl.c: 141: {
   469  00416A  C28C  F28F         	movff	_PWM+30,_PWM+33
   470                           ;rgl.c: 143: StartMCO3();
   471  00416E  ECFC  F035         	call	_StartMCO3	;wreg free
   472                           ;rgl.c: 144: ReadDataCO2();
   473  004172  ECC6  F031         	call	_ReadDataCO2	;wreg free
   474                           ;rgl.c: 145: ModToCW3();
   475  004176  ECD3  F035         	call	_ModToCW3	;wreg free
   476                           ;rgl.c: 146: ModZgCO();
   477  00417A  D8F2               	call	_ModZgCO	;wreg free
   478                           ;rgl.c: 147: ModDkCO();
   479  00417C  D9E6               	call	_ModDkCO	;wreg free
   480                           ;rgl.c: 148: if(RTdS(2)>10)
   481  00417E  0E02               	movlw	2
   482  004180  EC98  F06E         	call	_RTdS
   483  004184  6E00               	movwf	btemp,c
   484  004186  0E0B               	movlw	11
   485  004188  5C00               	subwf	btemp,w,c
   486  00418A  E307               	bnc	l34
   487                           ;rgl.c: 149: {
   488  00418C  0E02               	movlw	2
   489  00418E  EC86  F06E         	call	_StartRTdS
   490                           ;rgl.c: 151: IncConstCO2();
   491  004192  ECBE  F031         	call	_IncConstCO2	;wreg free
   492                           ;rgl.c: 152: IncMaxCO();
   493  004196  DB07               	call	_IncMaxCO	;wreg free
   494                           ;rgl.c: 153: ModPruCO();
   495  004198  DA3C               	call	_ModPruCO	;wreg free
   496  00419A                     l34:
   497                           ;rgl.c: 154: }
   498  00419A  DB66               	call	_ModPrzCO	;wreg free
   499                           ;rgl.c: 157: PropOPT();
   500  00419C  D395               	goto	_PropOPT	;wreg free
   501                           ;rgl.c: 158: }
   502  00419E                     l35:
   503                           ;rgl.c: 160: }
   504                           ;rgl.c: 162: {
   505  00419E  0101               	movlb	(_M+10) shr (0+8)
   506  0041A0  5184               	movf	(_M+10)& (0+255),w,b
   507  0041A2  1185               	iorwf	(_M+11)& (0+255),w,b
   508  0041A4  E01C               	bz	l36
   509                           ;rgl.c: 164: {
   510  0041A6  C28B  F28F         	movff	_PWM+29,_PWM+33
   511                           ;rgl.c: 166: PWM.MINPWM=PWM.MDMOD;
   512  0041AA  C277  F28E         	movff	_PWM+9,_PWM+32
   513                           ;rgl.c: 167: StartCO4();
   514  0041AE  ECBB  F02C         	call	_StartCO4	;wreg free
   515                           ;rgl.c: 168: ReadDataCO4();
   516  0041B2  EC3D  F02D         	call	_ReadDataCO4	;wreg free
   517                           ;rgl.c: 169: ModToCO4();
   518  0041B6  EC2F  F02D         	call	_ModToCO4	;wreg free
   519                           ;rgl.c: 170: ModZgCO();
   520  0041BA  D8D2               	call	_ModZgCO	;wreg free
   521                           ;rgl.c: 171: ModDkCO();
   522  0041BC  D9C6               	call	_ModDkCO	;wreg free
   523                           ;rgl.c: 172: if(RTdS(2)>10)
   524  0041BE  0E02               	movlw	2
   525  0041C0  EC98  F06E         	call	_RTdS
   526  0041C4  6E00               	movwf	btemp,c
   527  0041C6  0E0B               	movlw	11
   528  0041C8  5C00               	subwf	btemp,w,c
   529  0041CA  E307               	bnc	l37
   530                           ;rgl.c: 173: {
   531  0041CC  0E02               	movlw	2
   532  0041CE  EC86  F06E         	call	_StartRTdS
   533                           ;rgl.c: 175: IncConstCOCW4();
   534  0041D2  EC35  F02D         	call	_IncConstCOCW4	;wreg free
   535                           ;rgl.c: 176: IncMaxCO();
   536  0041D6  DAE7               	call	_IncMaxCO	;wreg free
   537                           ;rgl.c: 177: ModPruCO();
   538  0041D8  DA1C               	call	_ModPruCO	;wreg free
   539  0041DA                     l37:
   540                           ;rgl.c: 178: }
   541  0041DA  DB46               	call	_ModPrzCO	;wreg free
   542                           ;rgl.c: 180: PropOPT();
   543  0041DC  D375               	goto	_PropOPT	;wreg free
   544                           ;rgl.c: 181: }
   545  0041DE                     l36:
   546                           ;rgl.c: 182: else
   547  0041DE  0101               	movlb	(_M+8) shr (0+8)
   548  0041E0  5182               	movf	(_M+8)& (0+255),w,b
   549  0041E2  1183               	iorwf	(_M+9)& (0+255),w,b
   550  0041E4  B4D8               	btfsc	status,2,c
   551  0041E6  0012               	return	
   552                           ;rgl.c: 184: {
   553  0041E8  ECDF  F02C         	call	_StartMCW4	;wreg free
   554                           ;rgl.c: 186: ReadDataCW4();
   555  0041EC  EC42  F02D         	call	_ReadDataCW4	;wreg free
   556                           ;rgl.c: 187: ModToCW4();
   557  0041F0  EC29  F02D         	call	_ModToCW4	;wreg free
   558                           ;rgl.c: 188: ModZgCW4();
   559  0041F4  EC4B  F02D         	call	_ModZgCW4	;wreg free
   560                           ;rgl.c: 189: ModDkCW4();
   561  0041F8  EC57  F02E         	call	_ModDkCW4	;wreg free
   562                           ;rgl.c: 190: if(RTdS(2)>10)
   563  0041FC  0E02               	movlw	2
   564  0041FE  EC98  F06E         	call	_RTdS
   565  004202  6E00               	movwf	btemp,c
   566  004204  0E0B               	movlw	11
   567  004206  5C00               	subwf	btemp,w,c
   568  004208  E309               	bnc	l40
   569                           ;rgl.c: 191: {
   570  00420A  0E02               	movlw	2
   571  00420C  EC86  F06E         	call	_StartRTdS
   572                           ;rgl.c: 193: IncConstCOCW4();
   573  004210  EC35  F02D         	call	_IncConstCOCW4	;wreg free
   574                           ;rgl.c: 194: IncMaxCW4();
   575  004214  EC46  F030         	call	_IncMaxCW4	;wreg free
   576                           ;rgl.c: 195: ModPruCW4();
   577  004218  ECB7  F02E         	call	_ModPruCW4	;wreg free
   578  00421C                     l40:
   579                           ;rgl.c: 196: }
   580  00421C  EC80  F030         	call	_ModPrzCW4	;wreg free
   581                           ;rgl.c: 198: PropCO4();
   582  004220  EF13  F031         	goto	_PropCO4	;wreg free
   583                           ;rgl.c: 199: }
   584  004224                     l41:
   585                           ;rgl.c: 201: }
   586                           ;rgl.c: 203: {
   587  004224  0101               	movlb	(_M+10) shr (0+8)
   588  004226  5184               	movf	(_M+10)& (0+255),w,b
   589  004228  1185               	iorwf	(_M+11)& (0+255),w,b
   590  00422A  E01C               	bz	l42
   591                           ;rgl.c: 205: {
   592  00422C  C28B  F28F         	movff	_PWM+29,_PWM+33
   593                           ;rgl.c: 207: PWM.MINPWM=PWM.MDMOD;
   594  004230  C277  F28E         	movff	_PWM+9,_PWM+32
   595                           ;rgl.c: 208: StartCO2();
   596  004234  EC3C  F031         	call	_StartCO2	;wreg free
   597                           ;rgl.c: 209: ReadDataCO2();
   598  004238  ECC6  F031         	call	_ReadDataCO2	;wreg free
   599                           ;rgl.c: 210: ModToCO2();
   600  00423C  ECA9  F031         	call	_ModToCO2	;wreg free
   601                           ;rgl.c: 211: ModZgCO();
   602  004240  D88F               	call	_ModZgCO	;wreg free
   603                           ;rgl.c: 212: ModDkCO();
   604  004242  D983               	call	_ModDkCO	;wreg free
   605                           ;rgl.c: 213: if(RTdS(2)>10)
   606  004244  0E02               	movlw	2
   607  004246  EC98  F06E         	call	_RTdS
   608  00424A  6E00               	movwf	btemp,c
   609  00424C  0E0B               	movlw	11
   610  00424E  5C00               	subwf	btemp,w,c
   611  004250  E307               	bnc	l43
   612                           ;rgl.c: 214: {
   613  004252  0E02               	movlw	2
   614  004254  EC86  F06E         	call	_StartRTdS
   615                           ;rgl.c: 216: IncConstCO2();
   616  004258  ECBE  F031         	call	_IncConstCO2	;wreg free
   617                           ;rgl.c: 217: IncMaxCO();
   618  00425C  DAA4               	call	_IncMaxCO	;wreg free
   619                           ;rgl.c: 218: ModPruCO();
   620  00425E  D9D9               	call	_ModPruCO	;wreg free
   621  004260                     l43:
   622                           ;rgl.c: 219: }
   623  004260  DB03               	call	_ModPrzCO	;wreg free
   624                           ;rgl.c: 222: PropOPT();
   625  004262  D332               	goto	_PropOPT	;wreg free
   626                           ;rgl.c: 223: }
   627  004264                     l42:
   628                           ;rgl.c: 224: else
   629  004264  0101               	movlb	(_M+8) shr (0+8)
   630  004266  5182               	movf	(_M+8)& (0+255),w,b
   631  004268  1183               	iorwf	(_M+9)& (0+255),w,b
   632  00426A  B4D8               	btfsc	status,2,c
   633  00426C  0012               	return	
   634                           ;rgl.c: 226: {
   635  00426E  EC61  F031         	call	_StartMCW2	;wreg free
   636                           ;rgl.c: 228: ReadDataCW2();
   637  004272  ECCB  F031         	call	_ReadDataCW2	;wreg free
   638                           ;rgl.c: 229: ModToCW2();
   639  004276  ECA3  F031         	call	_ModToCW2	;wreg free
   640                           ;rgl.c: 230: ModZgCW2();
   641  00427A  ECD4  F031         	call	_ModZgCW2	;wreg free
   642                           ;rgl.c: 231: ModDkCW2();
   643  00427E  ECE2  F032         	call	_ModDkCW2	;wreg free
   644                           ;rgl.c: 232: if(RTdS(2)>10)
   645  004282  0E02               	movlw	2
   646  004284  EC98  F06E         	call	_RTdS
   647  004288  6E00               	movwf	btemp,c
   648  00428A  0E0B               	movlw	11
   649  00428C  5C00               	subwf	btemp,w,c
   650  00428E  E309               	bnc	l46
   651                           ;rgl.c: 233: {
   652  004290  0E02               	movlw	2
   653  004292  EC86  F06E         	call	_StartRTdS
   654                           ;rgl.c: 235: IncConstCW2();
   655  004296  ECAF  F031         	call	_IncConstCW2	;wreg free
   656                           ;rgl.c: 236: IncMaxCW2();
   657  00429A  EC37  F035         	call	_IncMaxCW2	;wreg free
   658                           ;rgl.c: 237: ModPruCW2();
   659  00429E  EC42  F033         	call	_ModPruCW2	;wreg free
   660  0042A2                     l46:
   661                           ;rgl.c: 238: }
   662  0042A2  EC74  F035         	call	_ModPrzCW2	;wreg free
   663                           ;rgl.c: 240: PropCO2();
   664  0042A6  EF99  F035         	goto	_PropCO2	;wreg free
   665                           ;rgl.c: 241: }
   666  0042AA                     l14:
   667  0042AA  C08B  FFE8         	movff	_DtKNF+7,wreg
   668  0042AE  0A00               	xorlw	0
   669  0042B0  E101 D732          	bz	l29
   670  0042B4  0A01               	xorlw	1
   671  0042B6  E101 D69B          	bz	l15
   672  0042BA  0A03               	xorlw	3
   673  0042BC  E101 D76F          	bz	l35
   674  0042C0  0A01               	xorlw	1
   675  0042C2  E101 D6E6          	bz	l23
   676  0042C6  D7AE               	goto	l41
   677                           ;rgl.c: 245: }
   678  0042C8                     __end_of_Moduluj:
   679                           ;rgl.c: 254: void StartMCO1F(void)
   680                           ;rgl.c: 255: {
   681  0042C8                     _StartMCO1F:
   682  000000                     
   683                           ;rgl.c: 256: unsigned char k;
   684  0042C8  0100               	movlb	_rgl shr (0+8)
   685  0042CA  B175               	btfsc	_rgl& (0+255),0,b
   686  0042CC  B375               	btfsc	_rgl& (0+255),1,b
   687  0042CE  D001               	goto	l48
   688  0042D0  0012               	return	
   689  0042D2                     l48:
   690                           ;rgl.c: 259: if(rgl.btco&&rgl.btcw)
   691  0042D2  0100               	movlb	_rgl shr (0+8)
   692  0042D4  B175               	btfsc	_rgl& (0+255),0,b
   693  0042D6  A375               	btfss	_rgl& (0+255),1,b
   694  0042D8  D024               	goto	l49
   695                           ;rgl.c: 260: {
   696  0042DA  9375               	bcf	_rgl& (0+255),1,b
   697                           ;rgl.c: 262: if(!Tnizsza(0))
   698  0042DC  0E00               	movlw	0
   699  0042DE  EC4E  F036         	call	_Tnizsza
   700  0042E2  B0D8               	btfsc	status,0,c
   701  0042E4  0012               	return	
   702                           ;rgl.c: 263: {
   703  0042E6  0E0A               	movlw	10
   704  0042E8  6ED9               	movwf	fsr2l,c
   705                           ;rgl.c: 265: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PWM
      +                          .MDMOD;
   706  0042EA  C277  F000         	movff	_PWM+9,btemp
   707  0042EE  6A01               	clrf	btemp+1,c
   708  0042F0  C07C  F002         	movff	_rgl+7,btemp+2
   709  0042F4  0EF6               	movlw	246
   710  0042F6  2402               	addwf	btemp+2,w,c
   711  0042F8  6EF6               	movwf	tblptrl,c
   712  0042FA  6AF7               	clrf	tblptrh,c
   713  0042FC  0EFF               	movlw	255
   714  0042FE  22F7               	addwfc	tblptrh,f,c
   715  004300  50F7               	movf	tblptrh,w,c
   716  004302  0A80               	xorlw	128
   717  004304  6E02               	movwf	btemp+2,c
   718  004306  5001               	movf	btemp+1,w,c
   719  004308  0A80               	xorlw	128
   720  00430A  5C02               	subwf	btemp+2,w,c
   721  00430C  E102               	bnz	u325
   722  00430E  5000               	movf	btemp,w,c
   723  004310  5CF6               	subwf	tblptrl,w,c
   724  004312                     u325:
   725  004312  E203               	bc	l51
   726  004314  C277  F07C         	movff	_PWM+9,_rgl+7
   727  004318  0012               	return	
   728  00431A                     l51:
   729                           ;rgl.c: 266: else rgl.srp-=k;
   730  00431A  0100               	movlb	(_rgl+7) shr (0+8)
   731  00431C  0EF6               	movlw	-10
   732  00431E  277C               	addwf	(_rgl+7)& (0+255),f,b
   733                           ;rgl.c: 267: }
   734  004320  0CF6               	retlw	246
   735  004322                     l49:
   736                           ;rgl.c: 269: else
   737  004322  0E02               	movlw	2
   738  004324  EC86  F06E         	call	_StartRTdS
   739                           ;rgl.c: 272: DtCO.dDCO=0;
   740  004328  0102               	movlb	(_DtCO+9) shr (0+8)
   741  00432A  6B15               	clrf	(_DtCO+9)& (0+255),b
   742                           ;rgl.c: 273: DtCO.indCO=0;
   743  00432C  0102               	movlb	(_DtCO+10) shr (0+8)
   744  00432E  6B16               	clrf	(_DtCO+10)& (0+255),b
   745                           ;rgl.c: 274: rgl.fz=0;
   746  004330  0100               	movlb	_rgl shr (0+8)
   747  004332  9575               	bcf	_rgl& (0+255),2,b
   748                           ;rgl.c: 275: rgl.med_up=0;
   749  004334  9775               	bcf	_rgl& (0+255),3,b
   750                           ;rgl.c: 276: rgl.fast_up=0;
   751  004336  9975               	bcf	_rgl& (0+255),4,b
   752                           ;rgl.c: 278: if(PWM.MMAXCO>PWM.FIRSTPB)
   753  004338  C28B  FFE8         	movff	_PWM+29,wreg
   754  00433C  0102               	movlb	(_PWM+24) shr (0+8)
   755  00433E  6186               	cpfslt	(_PWM+24)& (0+255),b
   756  004340  D003               	goto	l54
   757                           ;rgl.c: 279: {
   758  004342  C286  F07D         	movff	_PWM+24,_rgl+8
   759                           ;rgl.c: 281: }
   760  004346  D002               	goto	l55
   761  004348                     l54:
   762                           ;rgl.c: 282: else
   763  004348  C28B  F07D         	movff	_PWM+29,_rgl+8
   764  00434C                     l55:
   765                           ;rgl.c: 285: }
   766  00434C  0100               	movlb	(_rgl+7) shr (0+8)
   767  00434E  6B7C               	clrf	(_rgl+7)& (0+255),b
   768                           ;rgl.c: 289: rgl.ytmp=0;
   769  004350  6B7B               	clrf	(_rgl+6)& (0+255),b
   770                           ;rgl.c: 290: rgl.nmod=0;
   771  004352  9B75               	bcf	_rgl& (0+255),5,b
   772                           ;rgl.c: 291: rgl.btcw=0;
   773  004354  9375               	bcf	_rgl& (0+255),1,b
   774                           ;rgl.c: 292: rgl.btco=1;
   775  004356  8175               	bsf	_rgl& (0+255),0,b
   776                           ;rgl.c: 293: rgl.del1s=0;
   777  004358  9D75               	bcf	_rgl& (0+255),6,b
   778                           ;rgl.c: 294: rgl.deln1=0;
   779  00435A  9F75               	bcf	_rgl& (0+255),7,b
   780                           ;rgl.c: 295: rgl.inv_mod=0;
   781  00435C  9176               	bcf	(_rgl+1)& (0+255),0,b
   782                           ;rgl.c: 296: }
   783  00435E  0012               	return	
   784  004360                     __end_of_StartMCO1F:
   785                           ;rgl.c: 300: void ModZgCO(void)
   786                           ;rgl.c: 301: {
   787  004360                     _ModZgCO:
   788  000000                     
   789                           ;	_m assigned to ?a_ModZgCO+0
   790  000000                     _ModZgCO$m	set	?a_ModZgCO
   791                           ;rgl.c: 302: signed long m;
   792  004360  0100               	movlb	_rgl shr (0+8)
   793  004362  A575               	btfss	_rgl& (0+255),2,b
   794  004364  D00A               	goto	l57
   795                           ;rgl.c: 307: {
   796  004366  0E0A               	movlw	10
   797  004368  EC4E  F036         	call	_Tnizsza
   798  00436C  A0D8               	btfss	status,0,c
   799  00436E  0012               	return	
   800                           ;rgl.c: 309: {
   801  004370  C26F  F07D         	movff	_PWM+1,_rgl+8
   802                           ;rgl.c: 311: rgl.srp=0;
   803  004374  0100               	movlb	(_rgl+7) shr (0+8)
   804  004376  6B7C               	clrf	(_rgl+7)& (0+255),b
   805                           ;rgl.c: 312: rgl.ytmp=0;
   806  004378  6B7B               	clrf	(_rgl+6)& (0+255),b
   807                           ;rgl.c: 313: }
   808                           ;rgl.c: 314: else return;
   809  00437A                     l57:
   810                           ;rgl.c: 315: }
   811  00437A  0E05               	movlw	5
   812  00437C  EC4E  F036         	call	_Tnizsza
   813  004380  E204               	bc	u381
   814  004382  0E00               	movlw	0
   815  004384  EC2C  F036         	call	_Tmaleje
   816  004388  E207               	bc	u420
   817  00438A                     u381:
   818  00438A  0E02               	movlw	2
   819  00438C  EC4E  F036         	call	_Tnizsza
   820  004390  E213               	bc	l60
   821  004392  EC47  F036         	call	_Tstoi	;wreg free
   822  004396  E310               	bnc	l60
   823  004398                     u420:
   824                           ;rgl.c: 318: {
   825  004398  0100               	movlb	_rgl shr (0+8)
   826  00439A  8575               	bsf	_rgl& (0+255),2,b
   827                           ;rgl.c: 320: rgl.srp=PWM.BufPWM;
   828  00439C  C26F  F07C         	movff	_PWM+1,_rgl+7
   829                           ;rgl.c: 321: rgl.xmod=PWM.BufPWM;
   830  0043A0  C26F  F07D         	movff	_PWM+1,_rgl+8
   831                           ;rgl.c: 322: if(rgl.xmod>PWM.MGMOD)
   832  0043A4  C07D  FFE8         	movff	_rgl+8,wreg
   833  0043A8  0102               	movlb	(_PWM+10) shr (0+8)
   834  0043AA  6178               	cpfslt	(_PWM+10)& (0+255),b
   835  0043AC  0012               	return	
   836                           ;rgl.c: 323: {
   837  0043AE  C278  F07C         	movff	_PWM+10,_rgl+7
   838                           ;rgl.c: 325: rgl.xmod=PWM.MGMOD;
   839  0043B2  C278  F07D         	movff	_PWM+10,_rgl+8
   840                           ;rgl.c: 326: }
   841  0043B6  0012               	return	
   842  0043B8                     l60:
   843                           ;rgl.c: 328: }
   844  0043B8  C277  FFE8         	movff	_PWM+9,wreg
   845  0043BC  0100               	movlb	(_rgl+8) shr (0+8)
   846  0043BE  5D7D               	subwf	(_rgl+8)& (0+255),w,b
   847  0043C0  E318               	bnc	l62
   848  0043C2  0E0A               	movlw	10
   849  0043C4  6E02               	movwf	btemp+2,c
   850  0043C6  6A03               	clrf	btemp+3,c
   851  0043C8  C277  FFE8         	movff	_PWM+9,wreg
   852  0043CC  C07D  F000         	movff	_rgl+8,btemp
   853  0043D0  6A01               	clrf	btemp+1,c
   854  0043D2  5E00               	subwf	btemp,f,c
   855  0043D4  0E00               	movlw	0
   856  0043D6  5A01               	subwfb	btemp+1,f,c
   857  0043D8  EC03  F073         	call	awmul
   858  0043DC  0100               	movlb	__Lparam shr (0+8)
   859  0043DE  C004  F0D7         	movff	btemp+4,?a_ModZgCO
   860  0043E2  C005  F0D8         	movff	btemp+5,?a_ModZgCO+1
   861  0043E6  0E00               	movlw	0
   862  0043E8  BFD8               	btfsc	(?a_ModZgCO+1)^(__Lparam& (0+65280)),7,b
   863  0043EA  0EFF               	movlw	-1
   864  0043EC  6FD9               	movwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   865  0043EE  6FDA               	movwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   866  0043F0  D005               	goto	l63
   867  0043F2                     l62:
   868                           ;rgl.c: 330: else m=0;
   869  0043F2  0100               	movlb	__Lparam shr (0+8)
   870  0043F4  6BD7               	clrf	?a_ModZgCO^(__Lparam& (0+65280)),b
   871  0043F6  6BD8               	clrf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
   872  0043F8  6BD9               	clrf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   873  0043FA  6BDA               	clrf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   874  0043FC                     l63:
   875                           ;rgl.c: 331: m=m/(DtCO.MAD_CO-DtCO.DAD_CO);
   876  0043FC  C21A  FFE8         	movff	_DtCO+14,wreg
   877  004400  C219  F000         	movff	_DtCO+13,btemp
   878  004404  5C00               	subwf	btemp,w,c
   879  004406  6E04               	movwf	btemp+4,c
   880  004408  6A05               	clrf	btemp+5,c
   881  00440A  A0D8               	btfss	status,0,c
   882  00440C  0605               	decf	btemp+5,f,c
   883  00440E  6A06               	clrf	btemp+6,c
   884  004410  BE05               	btfsc	btemp+5,7,c
   885  004412  0606               	decf	btemp+6,f,c
   886  004414  5006               	movf	btemp+6,w,c
   887  004416  6E07               	movwf	btemp+7,c
   888  004418  0ED7               	movlw	low ?a_ModZgCO
   889  00441A  6EE9               	movwf	fsr0l,c
   890  00441C  0E00               	movlw	high ?a_ModZgCO
   891  00441E  6EEA               	movwf	fsr0h,c
   892  004420  EC36  F073         	call	aldiv_f
   893                           ;rgl.c: 332: m=m*(DtCO.AC_CO-DtCO.DAD_CO);
   894  004424  C21A  FFE8         	movff	_DtCO+14,wreg
   895  004428  C218  F000         	movff	_DtCO+12,btemp
   896  00442C  5C00               	subwf	btemp,w,c
   897  00442E  6E04               	movwf	btemp+4,c
   898  004430  6A05               	clrf	btemp+5,c
   899  004432  A0D8               	btfss	status,0,c
   900  004434  0605               	decf	btemp+5,f,c
   901  004436  6A06               	clrf	btemp+6,c
   902  004438  BE05               	btfsc	btemp+5,7,c
   903  00443A  0606               	decf	btemp+6,f,c
   904  00443C  5006               	movf	btemp+6,w,c
   905  00443E  6E07               	movwf	btemp+7,c
   906  004440  0ED7               	movlw	low ?a_ModZgCO
   907  004442  6EE9               	movwf	fsr0l,c
   908  004444  0E00               	movlw	high ?a_ModZgCO
   909  004446  6EEA               	movwf	fsr0h,c
   910  004448  EC2C  F073         	call	almul_f
   911                           ;rgl.c: 333: if(m<0) m=0;
   912  00444C  0100               	movlb	__Lparam shr (0+8)
   913  00444E  AFDA               	btfss	(?a_ModZgCO+3)^(__Lparam& (0+65280)),7,b
   914  004450  D004               	goto	l64
   915  004452  6BD7               	clrf	?a_ModZgCO^(__Lparam& (0+65280)),b
   916  004454  6BD8               	clrf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
   917  004456  6BD9               	clrf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   918  004458  6BDA               	clrf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   919  00445A                     l64:
   920                           ;rgl.c: 334: m=m/10+PWM.MDMOD;
   921  00445A  0E0A               	movlw	10
   922  00445C  6E04               	movwf	btemp+4,c
   923  00445E  6A05               	clrf	btemp+5,c
   924  004460  6A06               	clrf	btemp+6,c
   925  004462  6A07               	clrf	btemp+7,c
   926  004464  C0D7  F000         	movff	?a_ModZgCO,btemp
   927  004468  C0D8  F001         	movff	?a_ModZgCO+1,btemp+1
   928  00446C  C0D9  F002         	movff	?a_ModZgCO+2,btemp+2
   929  004470  C0DA  F003         	movff	?a_ModZgCO+3,btemp+3
   930  004474  EC93  F072         	call	aldiv
   931  004478  C277  FFE8         	movff	_PWM+9,wreg
   932  00447C  2400               	addwf	btemp,w,c
   933  00447E  0100               	movlb	__Lparam shr (0+8)
   934  004480  6FD7               	movwf	?a_ModZgCO^(__Lparam& (0+65280)),b
   935  004482  0E00               	movlw	0
   936  004484  2001               	addwfc	btemp+1,w,c
   937  004486  6FD8               	movwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
   938  004488  0E00               	movlw	0
   939  00448A  2002               	addwfc	btemp+2,w,c
   940  00448C  6FD9               	movwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   941  00448E  0E00               	movlw	0
   942  004490  2003               	addwfc	btemp+3,w,c
   943  004492  6FDA               	movwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   944                           ;rgl.c: 335: if(m>0xff)
   945  004494  51DA               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
   946  004496  0A80               	xorlw	128
   947  004498  0F80               	addlw	128
   948  00449A  E108               	bnz	u465
   949  00449C  0E00               	movlw	0
   950  00449E  5DD9               	subwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
   951  0044A0  E105               	bnz	u465
   952  0044A2  0E01               	movlw	1
   953  0044A4  5DD8               	subwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
   954  0044A6  E102               	bnz	u465
   955  0044A8  0E00               	movlw	0
   956  0044AA  5DD7               	subwf	?a_ModZgCO^(__Lparam& (0+65280)),w
   957  0044AC                     u465:
   958                           ;rgl.c: 336: {
   959  0044AC  0100               	movlb	_rgl shr (0+8)
   960  0044AE  E304               	bnc	L15
   961  0044B0  9575               	bcf	_rgl& (0+255),2,b
   962                           ;rgl.c: 338: rgl.tmp_pwm=rgl.xmod;
   963  0044B2  C07D  F07E         	movff	_rgl+8,_rgl+9
   964                           ;rgl.c: 339: return;
   965  0044B6  0012               	return	
   966                           ;rgl.c: 340: }
   967  0044B8                     L15:
   968  0044B8  A575               	btfss	_rgl& (0+255),2,b
   969  0044BA  D01C               	goto	l66
   970  0044BC  C07D  F000         	movff	_rgl+8,btemp
   971  0044C0  6A01               	clrf	btemp+1,c
   972  0044C2  6A02               	clrf	btemp+2,c
   973  0044C4  6A03               	clrf	btemp+3,c
   974  0044C6  0100               	movlb	__Lparam shr (0+8)
   975  0044C8  51DA               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
   976  0044CA  0A80               	xorlw	128
   977  0044CC  6E04               	movwf	btemp+4,c
   978  0044CE  5003               	movf	btemp+3,w,c
   979  0044D0  0A80               	xorlw	128
   980  0044D2  5C04               	subwf	btemp+4,w,c
   981  0044D4  E108               	bnz	u485
   982  0044D6  5002               	movf	btemp+2,w,c
   983  0044D8  5DD9               	subwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
   984  0044DA  E105               	bnz	u485
   985  0044DC  5001               	movf	btemp+1,w,c
   986  0044DE  5DD8               	subwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
   987  0044E0  E102               	bnz	u485
   988  0044E2  5000               	movf	btemp,w,c
   989  0044E4  5DD7               	subwf	?a_ModZgCO^(__Lparam& (0+65280)),w
   990  0044E6                     u485:
   991  0044E6  E206               	bc	l66
   992                           ;rgl.c: 342: rgl.srp=(rgl.xmod-m);
   993  0044E8  0100               	movlb	__Lparam shr (0+8)
   994  0044EA  51D7               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
   995  0044EC  0100               	movlb	(_rgl+8) shr (0+8)
   996  0044EE  5D7D               	subwf	(_rgl+8)& (0+255),w,b
   997  0044F0  CFE8 F07C          	movff	wreg,_rgl+7
   998  0044F4                     l66:
   999                           ;rgl.c: 343: m+=rgl.srp;
  1000  0044F4  C07C  FFE8         	movff	_rgl+7,wreg
  1001  0044F8  0100               	movlb	__Lparam shr (0+8)
  1002  0044FA  27D7               	addwf	?a_ModZgCO^(__Lparam& (0+65280)),f,b
  1003  0044FC  0E01               	movlw	1
  1004  0044FE  B0D8               	btfsc	status,0,c
  1005  004500  27D8               	addwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),f,b
  1006  004502  B0D8               	btfsc	status,0,c
  1007  004504  27D9               	addwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),f,b
  1008  004506  B0D8               	btfsc	status,0,c
  1009  004508  27DA               	addwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),f,b
  1010                           ;rgl.c: 344: if(m>rgl.xmod) p=rgl.xmod;
  1011  00450A  C07D  F000         	movff	_rgl+8,btemp
  1012  00450E  6A01               	clrf	btemp+1,c
  1013  004510  6A02               	clrf	btemp+2,c
  1014  004512  6A03               	clrf	btemp+3,c
  1015  004514  5003               	movf	btemp+3,w,c
  1016  004516  0A80               	xorlw	128
  1017  004518  6E04               	movwf	btemp+4,c
  1018  00451A  51DA               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
  1019  00451C  0A80               	xorlw	128
  1020  00451E  5C04               	subwf	btemp+4,w,c
  1021  004520  E108               	bnz	u505
  1022  004522  51D9               	movf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
  1023  004524  5C02               	subwf	btemp+2,w,c
  1024  004526  E105               	bnz	u505
  1025  004528  51D8               	movf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
  1026  00452A  5C01               	subwf	btemp+1,w,c
  1027  00452C  E102               	bnz	u505
  1028  00452E  51D7               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1029  004530  5C00               	subwf	btemp,w,c
  1030  004532                     u505:
  1031  004532  E203               	bc	l67
  1032  004534  C07D  FFD9         	movff	_rgl+8,fsr2l
  1033  004538  D003               	goto	l68
  1034  00453A                     l67:
  1035                           ;rgl.c: 345: else p=m;
  1036  00453A  0100               	movlb	__Lparam shr (0+8)
  1037  00453C  51D7               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1038  00453E  6ED9               	movwf	fsr2l,c
  1039  004540                     l68:
  1040                           ;rgl.c: 346: rgl.fz=0;
  1041  004540  0100               	movlb	_rgl shr (0+8)
  1042  004542  9575               	bcf	_rgl& (0+255),2,b
  1043                           ;rgl.c: 347: rgl.tmp_pwm=p;
  1044  004544  CFD9 F07E          	movff	fsr2l,_rgl+9
  1045                           ;rgl.c: 348: }
  1046  004548  0012               	return	
  1047  00454A                     __end_of_ModZgCO:
  1048                           ;rgl.c: 351: void ModDkCO(void)
  1049                           ;rgl.c: 352: {
  1050  00454A                     _ModDkCO:
  1051  000000                     
  1052                           ;rgl.c: 353: signed long m;
  1053  00454A  0100               	movlb	_rgl shr (0+8)
  1054  00454C  A575               	btfss	_rgl& (0+255),2,b
  1055  00454E  0012               	return	
  1056                           ;rgl.c: 358: ada=DtCO.AC_CO-DtCO.DAD_CO;
  1057  004550  C21A  FFE8         	movff	_DtCO+14,wreg
  1058  004554  0102               	movlb	(_DtCO+12) shr (0+8)
  1059  004556  5D18               	subwf	(_DtCO+12)& (0+255),w,b
  1060  004558  0100               	movlb	__Lparam shr (0+8)
  1061  00455A  6FD7               	movwf	?a_ModDkCO^(__Lparam& (0+65280)),b
  1062                           ;rgl.c: 359: k=5;
  1063  00455C  0E05               	movlw	5
  1064  00455E  6FD8               	movwf	(?a_ModDkCO+1)^(__Lparam& (0+65280)),b
  1065                           ;rgl.c: 360: if(Twyzsza(0)) k=6;
  1066  004560  0E00               	movlw	0
  1067  004562  EC5B  F036         	call	_Twyzsza
  1068  004566  E303               	bnc	l71
  1069  004568  0E06               	movlw	6
  1070  00456A  0100               	movlb	__Lparam shr (0+8)
  1071  00456C  6FD8               	movwf	(?a_ModDkCO+1)^(__Lparam& (0+65280)),b
  1072  00456E                     l71:
  1073                           ;rgl.c: 361: m=rgl.srp+k*ada;
  1074  00456E  C0D7  F002         	movff	?a_ModDkCO,btemp+2
  1075  004572  6A03               	clrf	btemp+3,c
  1076  004574  BE02               	btfsc	btemp+2,7,c
  1077  004576  0603               	decf	btemp+3,f,c
  1078  004578  C0D8  F000         	movff	?a_ModDkCO+1,btemp
  1079  00457C  6A01               	clrf	btemp+1,c
  1080  00457E  EC03  F073         	call	awmul
  1081  004582  C07C  FFE8         	movff	_rgl+7,wreg
  1082  004586  2404               	addwf	btemp+4,w,c
  1083  004588  6E00               	movwf	btemp,c
  1084  00458A  0E00               	movlw	0
  1085  00458C  2005               	addwfc	btemp+5,w,c
  1086  00458E  6E01               	movwf	btemp+1,c
  1087  004590  0100               	movlb	__Lparam shr (0+8)
  1088  004592  C000  F0D9         	movff	btemp,?a_ModDkCO+2
  1089  004596  C001  F0DA         	movff	btemp+1,?a_ModDkCO+3
  1090  00459A  0E00               	movlw	0
  1091  00459C  BFDA               	btfsc	(?a_ModDkCO+3)^(__Lparam& (0+65280)),7,b
  1092  00459E  0EFF               	movlw	-1
  1093  0045A0  6FDB               	movwf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),b
  1094  0045A2  6FDC               	movwf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),b
  1095                           ;rgl.c: 362: if(m>rgl.xmod) p=rgl.xmod;
  1096  0045A4  C07D  F000         	movff	_rgl+8,btemp
  1097  0045A8  6A01               	clrf	btemp+1,c
  1098  0045AA  6A02               	clrf	btemp+2,c
  1099  0045AC  6A03               	clrf	btemp+3,c
  1100  0045AE  5003               	movf	btemp+3,w,c
  1101  0045B0  0A80               	xorlw	128
  1102  0045B2  6E04               	movwf	btemp+4,c
  1103  0045B4  51DC               	movf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),w
  1104  0045B6  0A80               	xorlw	128
  1105  0045B8  5C04               	subwf	btemp+4,w,c
  1106  0045BA  E108               	bnz	u535
  1107  0045BC  51DB               	movf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),w
  1108  0045BE  5C02               	subwf	btemp+2,w,c
  1109  0045C0  E105               	bnz	u535
  1110  0045C2  51DA               	movf	(?a_ModDkCO+3)^(__Lparam& (0+65280)),w
  1111  0045C4  5C01               	subwf	btemp+1,w,c
  1112  0045C6  E102               	bnz	u535
  1113  0045C8  51D9               	movf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1114  0045CA  5C00               	subwf	btemp,w,c
  1115  0045CC                     u535:
  1116  0045CC  E203               	bc	l72
  1117  0045CE  C07D  FFD9         	movff	_rgl+8,fsr2l
  1118  0045D2  D01C               	goto	l73
  1119  0045D4                     l72:
  1120                           ;rgl.c: 363: else
  1121  0045D4  C277  F000         	movff	_PWM+9,btemp
  1122  0045D8  6A01               	clrf	btemp+1,c
  1123  0045DA  6A02               	clrf	btemp+2,c
  1124  0045DC  6A03               	clrf	btemp+3,c
  1125  0045DE  0100               	movlb	__Lparam shr (0+8)
  1126  0045E0  51DC               	movf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),w
  1127  0045E2  0A80               	xorlw	128
  1128  0045E4  6E04               	movwf	btemp+4,c
  1129  0045E6  5003               	movf	btemp+3,w,c
  1130  0045E8  0A80               	xorlw	128
  1131  0045EA  5C04               	subwf	btemp+4,w,c
  1132  0045EC  E108               	bnz	u545
  1133  0045EE  5002               	movf	btemp+2,w,c
  1134  0045F0  5DDB               	subwf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),w
  1135  0045F2  E105               	bnz	u545
  1136  0045F4  5001               	movf	btemp+1,w,c
  1137  0045F6  5DDA               	subwf	(?a_ModDkCO+3)^(__Lparam& (0+65280)),w
  1138  0045F8  E102               	bnz	u545
  1139  0045FA  5000               	movf	btemp,w,c
  1140  0045FC  5DD9               	subwf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1141  0045FE                     u545:
  1142  0045FE  E203               	bc	l74
  1143  004600  C277  FFD9         	movff	_PWM+9,fsr2l
  1144  004604  D003               	goto	l73
  1145  004606                     l74:
  1146                           ;rgl.c: 365: else p=m;
  1147  004606  0100               	movlb	__Lparam shr (0+8)
  1148  004608  51D9               	movf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1149  00460A  6ED9               	movwf	fsr2l,c
  1150  00460C                     l73:
  1151                           ;rgl.c: 366: rgl.tmp_pwm=p;
  1152  00460C  CFD9 F07E          	movff	fsr2l,_rgl+9
  1153                           ;rgl.c: 367: }
  1154  004610  0012               	return	
  1155  004612                     __end_of_ModDkCO:
  1156                           ;rgl.c: 372: void ModPruCO(void)
  1157                           ;rgl.c: 373: {
  1158  004612                     _ModPruCO:
  1159  000000                     
  1160                           ;rgl.c: 374: static unsigned char l;
  1161  004612  0100               	movlb	_rgl shr (0+8)
  1162  004614  B575               	btfsc	_rgl& (0+255),2,b
  1163  004616  D035               	goto	l77
  1164                           ;rgl.c: 378: {
  1165  004618  0E00               	movlw	0
  1166  00461A  EC2C  F036         	call	_Tmaleje
  1167  00461E  E204               	bc	u580
  1168  004620  0E02               	movlw	2
  1169  004622  0100               	movlb	(_rgl+6) shr (0+8)
  1170  004624  657B               	cpfsgt	(_rgl+6)& (0+255),b
  1171  004626  0C02               	retlw	2
  1172  004628                     u580:
  1173                           ;rgl.c: 380: {
  1174  004628  0100               	movlb	(_rgl+6) shr (0+8)
  1175  00462A  6B7B               	clrf	(_rgl+6)& (0+255),b
  1176                           ;rgl.c: 382: if(PWM.BufPWM>rgl.xmod) return;
  1177  00462C  C26F  FFE8         	movff	_PWM+1,wreg
  1178  004630  617D               	cpfslt	(_rgl+8)& (0+255),b
  1179  004632  D001               	goto	l79
  1180  004634  0012               	return	
  1181  004636                     l79:
  1182                           ;rgl.c: 383: tmp=rgl.xmod-PWM.BufPWM;
  1183  004636  C26F  FFE8         	movff	_PWM+1,wreg
  1184  00463A  0100               	movlb	(_rgl+8) shr (0+8)
  1185  00463C  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  1186  00463E  6EE1               	movwf	fsr1l,c
  1187                           ;rgl.c: 384: k=6;
  1188  004640  0E06               	movlw	6
  1189  004642  6ED9               	movwf	fsr2l,c
  1190                           ;rgl.c: 385: if(k>tmp) k=tmp;
  1191  004644  60E1               	cpfslt	fsr1l,c
  1192  004646  D002               	goto	l80
  1193  004648  50E1               	movf	fsr1l,w,c
  1194  00464A  6ED9               	movwf	fsr2l,c
  1195  00464C                     l80:
  1196                           ;rgl.c: 386: if(rgl.srp+k>PWM.MGMOD) rgl.srp=PWM
      +                          .MGMOD;
  1197  00464C  50D9               	movf	fsr2l,w,c
  1198  00464E  C07C  F002         	movff	_rgl+7,btemp+2
  1199  004652  6A03               	clrf	btemp+3,c
  1200  004654  2602               	addwf	btemp+2,f,c
  1201  004656  0E00               	movlw	0
  1202  004658  2203               	addwfc	btemp+3,f,c
  1203  00465A  C278  F000         	movff	_PWM+10,btemp
  1204  00465E  6A01               	clrf	btemp+1,c
  1205  004660  5001               	movf	btemp+1,w,c
  1206  004662  0A80               	xorlw	128
  1207  004664  6E04               	movwf	btemp+4,c
  1208  004666  5003               	movf	btemp+3,w,c
  1209  004668  0A80               	xorlw	128
  1210  00466A  5C04               	subwf	btemp+4,w,c
  1211  00466C  E102               	bnz	u615
  1212  00466E  5002               	movf	btemp+2,w,c
  1213  004670  5C00               	subwf	btemp,w,c
  1214  004672                     u615:
  1215  004672  E203               	bc	l81
  1216  004674  C278  F07C         	movff	_PWM+10,_rgl+7
  1217  004678  0012               	return	
  1218  00467A                     l81:
  1219                           ;rgl.c: 387: else rgl.srp+=k;
  1220  00467A  50D9               	movf	fsr2l,w,c
  1221  00467C  0100               	movlb	(_rgl+7) shr (0+8)
  1222  00467E  277C               	addwf	(_rgl+7)& (0+255),f,b
  1223                           ;rgl.c: 388: }
  1224  004680  0012               	return	
  1225  004682                     l77:
  1226                           ;rgl.c: 391: else
  1227  004682  EC76  F036         	call	_Trowna	;wreg free
  1228  004686  E301 D08B          	bc	l84
  1229                           ;rgl.c: 394: {
  1230  00468A  C21A  FFE8         	movff	_DtCO+14,wreg
  1231  00468E  0102               	movlb	(_DtCO+12) shr (0+8)
  1232  004690  6118               	cpfslt	(_DtCO+12)& (0+255),b
  1233  004692  D038               	goto	l85
  1234                           ;rgl.c: 396: {
  1235  004694  0E00               	movlw	0
  1236  004696  EC2C  F036         	call	_Tmaleje
  1237  00469A  B0D8               	btfsc	status,0,c
  1238  00469C  0012               	return	
  1239                           ;rgl.c: 398: if(l>=2)
  1240  00469E  0E01               	movlw	1
  1241  0046A0  010E               	movlb	F1706 shr (0+8)
  1242  0046A2  65D0               	cpfsgt	F1706& (0+255),b
  1243  0046A4  D003               	goto	l87
  1244                           ;rgl.c: 399: {
  1245  0046A6  6ED9               	movwf	fsr2l,c
  1246                           ;rgl.c: 401: l=0;
  1247  0046A8  6BD0               	clrf	F1706& (0+255),b
  1248                           ;rgl.c: 402: }
  1249  0046AA  D003               	goto	l88
  1250  0046AC                     l87:
  1251                           ;rgl.c: 403: else
  1252  0046AC  6AD9               	clrf	fsr2l,c
  1253                           ;rgl.c: 406: l++;
  1254  0046AE  010E               	movlb	F1706 shr (0+8)
  1255  0046B0  2BD0               	incf	F1706& (0+255),f,b
  1256  0046B2                     l88:
  1257                           ;rgl.c: 407: }
  1258  0046B2  C277  F000         	movff	_PWM+9,btemp
  1259  0046B6  6A01               	clrf	btemp+1,c
  1260  0046B8  50D9               	movf	fsr2l,w,c
  1261  0046BA  C07C  F002         	movff	_rgl+7,btemp+2
  1262  0046BE  6A03               	clrf	btemp+3,c
  1263  0046C0  5E02               	subwf	btemp+2,f,c
  1264  0046C2  0E00               	movlw	0
  1265  0046C4  5A03               	subwfb	btemp+3,f,c
  1266  0046C6  5003               	movf	btemp+3,w,c
  1267  0046C8  0A80               	xorlw	128
  1268  0046CA  6E04               	movwf	btemp+4,c
  1269  0046CC  5001               	movf	btemp+1,w,c
  1270  0046CE  0A80               	xorlw	128
  1271  0046D0  5C04               	subwf	btemp+4,w,c
  1272  0046D2  E102               	bnz	u665
  1273  0046D4  5000               	movf	btemp,w,c
  1274  0046D6  5C02               	subwf	btemp+2,w,c
  1275  0046D8                     u665:
  1276  0046D8  E203               	bc	l89
  1277  0046DA  C277  F07C         	movff	_PWM+9,_rgl+7
  1278  0046DE  D003               	goto	l90
  1279  0046E0                     l89:
  1280                           ;rgl.c: 409: else rgl.srp-=k;
  1281  0046E0  50D9               	movf	fsr2l,w,c
  1282  0046E2  0100               	movlb	(_rgl+7) shr (0+8)
  1283  0046E4  5F7C               	subwf	(_rgl+7)& (0+255),f,b
  1284  0046E6                     l90:
  1285                           ;rgl.c: 410: if(rgl.srp>PWM.MAXPWM) rgl.srp=PWM.
      +                          MAXPWM;
  1286  0046E6  C07C  FFE8         	movff	_rgl+7,wreg
  1287  0046EA  0102               	movlb	(_PWM+33) shr (0+8)
  1288  0046EC  618F               	cpfslt	(_PWM+33)& (0+255),b
  1289  0046EE  D002               	goto	l91
  1290  0046F0  C28F  F07C         	movff	_PWM+33,_rgl+7
  1291  0046F4                     l91:
  1292                           ;rgl.c: 411: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.s
      +                          rp;
  1293  0046F4  C07C  FFE8         	movff	_rgl+7,wreg
  1294  0046F8  0100               	movlb	(_rgl+8) shr (0+8)
  1295  0046FA  617D               	cpfslt	(_rgl+8)& (0+255),b
  1296  0046FC  0012               	return	
  1297  0046FE  C07C  F07D         	movff	_rgl+7,_rgl+8
  1298                           ;rgl.c: 412: return;
  1299  004702  0012               	return	
  1300  004704                     l85:
  1301                           ;rgl.c: 414: else
  1302  004704  0E00               	movlw	0
  1303  004706  EC1F  F036         	call	_Trosnie
  1304  00470A  B0D8               	btfsc	status,0,c
  1305  00470C  0012               	return	
  1306                           ;rgl.c: 417: if(l>=1)
  1307  00470E  0E00               	movlw	0
  1308  004710  010E               	movlb	F1706 shr (0+8)
  1309  004712  65D0               	cpfsgt	F1706& (0+255),b
  1310  004714  D004               	goto	l95
  1311                           ;rgl.c: 418: {
  1312  004716  0E01               	movlw	1
  1313  004718  6ED9               	movwf	fsr2l,c
  1314                           ;rgl.c: 420: l=0;
  1315  00471A  6BD0               	clrf	F1706& (0+255),b
  1316                           ;rgl.c: 421: }
  1317  00471C  D003               	goto	l96
  1318  00471E                     l95:
  1319                           ;rgl.c: 422: else
  1320  00471E  6AD9               	clrf	fsr2l,c
  1321                           ;rgl.c: 425: l++;
  1322  004720  010E               	movlb	F1706 shr (0+8)
  1323  004722  2BD0               	incf	F1706& (0+255),f,b
  1324  004724                     l96:
  1325                           ;rgl.c: 426: }
  1326  004724  C28F  FFE8         	movff	_PWM+33,wreg
  1327  004728  0102               	movlb	(_PWM+10) shr (0+8)
  1328  00472A  6178               	cpfslt	(_PWM+10)& (0+255),b
  1329  00472C  D017               	goto	l97
  1330                           ;rgl.c: 428: {
  1331  00472E  50D9               	movf	fsr2l,w,c
  1332  004730  C07C  F002         	movff	_rgl+7,btemp+2
  1333  004734  6A03               	clrf	btemp+3,c
  1334  004736  2602               	addwf	btemp+2,f,c
  1335  004738  0E00               	movlw	0
  1336  00473A  2203               	addwfc	btemp+3,f,c
  1337  00473C  C278  F000         	movff	_PWM+10,btemp
  1338  004740  6A01               	clrf	btemp+1,c
  1339  004742  5001               	movf	btemp+1,w,c
  1340  004744  0A80               	xorlw	128
  1341  004746  6E04               	movwf	btemp+4,c
  1342  004748  5003               	movf	btemp+3,w,c
  1343  00474A  0A80               	xorlw	128
  1344  00474C  5C04               	subwf	btemp+4,w,c
  1345  00474E  E102               	bnz	u725
  1346  004750  5002               	movf	btemp+2,w,c
  1347  004752  5C00               	subwf	btemp,w,c
  1348  004754                     u725:
  1349  004754  E21A               	bc	l101
  1350  004756  C278  F07C         	movff	_PWM+10,_rgl+7
  1351  00475A  D01A               	goto	l100
  1352                           ;rgl.c: 430: else rgl.srp+=k;
  1353                           ;rgl.c: 431: }
  1354  00475C                     l97:
  1355                           ;rgl.c: 432: else
  1356  00475C  50D9               	movf	fsr2l,w,c
  1357  00475E  C07C  F002         	movff	_rgl+7,btemp+2
  1358  004762  6A03               	clrf	btemp+3,c
  1359  004764  2602               	addwf	btemp+2,f,c
  1360  004766  0E00               	movlw	0
  1361  004768  2203               	addwfc	btemp+3,f,c
  1362  00476A  C28F  F000         	movff	_PWM+33,btemp
  1363  00476E  6A01               	clrf	btemp+1,c
  1364  004770  5001               	movf	btemp+1,w,c
  1365  004772  0A80               	xorlw	128
  1366  004774  6E04               	movwf	btemp+4,c
  1367  004776  5003               	movf	btemp+3,w,c
  1368  004778  0A80               	xorlw	128
  1369  00477A  5C04               	subwf	btemp+4,w,c
  1370  00477C  E102               	bnz	u735
  1371  00477E  5002               	movf	btemp+2,w,c
  1372  004780  5C00               	subwf	btemp,w,c
  1373  004782                     u735:
  1374  004782  E203               	bc	l101
  1375  004784  C28F  F07C         	movff	_PWM+33,_rgl+7
  1376  004788  D003               	goto	l100
  1377  00478A                     l101:
  1378                           ;rgl.c: 435: else rgl.srp+=k;
  1379  00478A  50D9               	movf	fsr2l,w,c
  1380  00478C  0100               	movlb	(_rgl+7) shr (0+8)
  1381  00478E  277C               	addwf	(_rgl+7)& (0+255),f,b
  1382  004790                     l100:
  1383                           ;rgl.c: 436: }
  1384  004790  C07C  FFE8         	movff	_rgl+7,wreg
  1385  004794  0100               	movlb	(_rgl+8) shr (0+8)
  1386  004796  617D               	cpfslt	(_rgl+8)& (0+255),b
  1387  004798  0012               	return	
  1388  00479A  C07C  F07D         	movff	_rgl+7,_rgl+8
  1389                           ;rgl.c: 438: }
  1390  00479E  0012               	return	
  1391  0047A0                     l84:
  1392  0047A0  010E               	movlb	F1706 shr (0+8)
  1393  0047A2  6BD0               	clrf	F1706& (0+255),b
  1394                           ;rgl.c: 440: }
  1395  0047A4  0012               	return	
  1396  0047A6                     __end_of_ModPruCO:
  1397                           ;rgl.c: 445: void IncMaxCO(void)
  1398                           ;rgl.c: 446: {
  1399  0047A6                     _IncMaxCO:
  1400  000000                     
  1401                           ;rgl.c: 447: unsigned char k;
  1402  0047A6  0E01               	movlw	1
  1403  0047A8  EC1F  F036         	call	_Trosnie
  1404  0047AC  B0D8               	btfsc	status,0,c
  1405  0047AE  0012               	return	
  1406                           ;rgl.c: 451: k=6;
  1407  0047B0  0E06               	movlw	6
  1408  0047B2  6ED9               	movwf	fsr2l,c
  1409                           ;rgl.c: 452: if(!rgl.fz)
  1410  0047B4  0100               	movlb	_rgl shr (0+8)
  1411  0047B6  B575               	btfsc	_rgl& (0+255),2,b
  1412  0047B8  D01C               	goto	l107
  1413                           ;rgl.c: 453: {
  1414  0047BA  C07D  F000         	movff	_rgl+8,btemp
  1415  0047BE  6A01               	clrf	btemp+1,c
  1416  0047C0  2600               	addwf	btemp,f,c
  1417  0047C2  0E00               	movlw	0
  1418  0047C4  2201               	addwfc	btemp+1,f,c
  1419  0047C6  5001               	movf	btemp+1,w,c
  1420  0047C8  0A80               	xorlw	128
  1421  0047CA  0F80               	addlw	-128
  1422  0047CC  0EF1               	movlw	241
  1423  0047CE  B4D8               	btfsc	status,2,c
  1424  0047D0  5C00               	subwf	btemp,w,c
  1425  0047D2  E304               	bnc	l108
  1426  0047D4  0EF0               	movlw	-16
  1427  0047D6  CFE8 F07D          	movff	wreg,_rgl+8
  1428  0047DA  D003               	goto	l109
  1429  0047DC                     l108:
  1430                           ;rgl.c: 455: else rgl.xmod+=k;
  1431  0047DC  0100               	movlb	(_rgl+8) shr (0+8)
  1432  0047DE  0E06               	movlw	6
  1433  0047E0  277D               	addwf	(_rgl+8)& (0+255),f,b
  1434  0047E2                     l109:
  1435                           ;rgl.c: 456: if(rgl.xmod>PWM.MAXPWM) rgl.xmod=PW
      +                          M.MAXPWM;
  1436  0047E2  C07D  FFE8         	movff	_rgl+8,wreg
  1437  0047E6  0102               	movlb	(_PWM+33) shr (0+8)
  1438  0047E8  618F               	cpfslt	(_PWM+33)& (0+255),b
  1439  0047EA  0012               	return	
  1440  0047EC  C28F  F07D         	movff	_PWM+33,_rgl+8
  1441                           ;rgl.c: 457: }
  1442  0047F0  0012               	return	
  1443  0047F2                     l107:
  1444                           ;rgl.c: 458: else
  1445  0047F2  C28F  FFE8         	movff	_PWM+33,wreg
  1446  0047F6  0102               	movlb	(_PWM+10) shr (0+8)
  1447  0047F8  6178               	cpfslt	(_PWM+10)& (0+255),b
  1448  0047FA  D01B               	goto	l112
  1449                           ;rgl.c: 461: {
  1450  0047FC  0E06               	movlw	6
  1451  0047FE  C07D  F002         	movff	_rgl+8,btemp+2
  1452  004802  6A03               	clrf	btemp+3,c
  1453  004804  2602               	addwf	btemp+2,f,c
  1454  004806  0E00               	movlw	0
  1455  004808  2203               	addwfc	btemp+3,f,c
  1456  00480A  C278  F000         	movff	_PWM+10,btemp
  1457  00480E  6A01               	clrf	btemp+1,c
  1458  004810  5001               	movf	btemp+1,w,c
  1459  004812  0A80               	xorlw	128
  1460  004814  6E04               	movwf	btemp+4,c
  1461  004816  5003               	movf	btemp+3,w,c
  1462  004818  0A80               	xorlw	128
  1463  00481A  5C04               	subwf	btemp+4,w,c
  1464  00481C  E102               	bnz	u805
  1465  00481E  5002               	movf	btemp+2,w,c
  1466  004820  5C00               	subwf	btemp,w,c
  1467  004822                     u805:
  1468  004822  E203               	bc	l113
  1469  004824  C278  F07D         	movff	_PWM+10,_rgl+8
  1470  004828  0012               	return	
  1471  00482A                     l113:
  1472                           ;rgl.c: 463: else rgl.xmod+=k;
  1473  00482A  0100               	movlb	(_rgl+8) shr (0+8)
  1474  00482C  0E06               	movlw	6
  1475  00482E  277D               	addwf	(_rgl+8)& (0+255),f,b
  1476                           ;rgl.c: 464: }
  1477  004830  0C06               	retlw	6
  1478  004832                     l112:
  1479                           ;rgl.c: 465: else
  1480  004832  0E06               	movlw	6
  1481  004834  C07D  F002         	movff	_rgl+8,btemp+2
  1482  004838  6A03               	clrf	btemp+3,c
  1483  00483A  2602               	addwf	btemp+2,f,c
  1484  00483C  0E00               	movlw	0
  1485  00483E  2203               	addwfc	btemp+3,f,c
  1486  004840  C28F  F000         	movff	_PWM+33,btemp
  1487  004844  6A01               	clrf	btemp+1,c
  1488  004846  5001               	movf	btemp+1,w,c
  1489  004848  0A80               	xorlw	128
  1490  00484A  6E04               	movwf	btemp+4,c
  1491  00484C  5003               	movf	btemp+3,w,c
  1492  00484E  0A80               	xorlw	128
  1493  004850  5C04               	subwf	btemp+4,w,c
  1494  004852  E102               	bnz	u815
  1495  004854  5002               	movf	btemp+2,w,c
  1496  004856  5C00               	subwf	btemp,w,c
  1497  004858                     u815:
  1498  004858  E203               	bc	l116
  1499  00485A  C28F  F07D         	movff	_PWM+33,_rgl+8
  1500  00485E  0012               	return	
  1501  004860                     l116:
  1502                           ;rgl.c: 468: else rgl.xmod+=k;
  1503  004860  0100               	movlb	(_rgl+8) shr (0+8)
  1504  004862  0E06               	movlw	6
  1505  004864  277D               	addwf	(_rgl+8)& (0+255),f,b
  1506                           ;rgl.c: 469: }
  1507  004866  0C06               	retlw	6
  1508  004868                     __end_of_IncMaxCO:
  1509                           ;rgl.c: 474: void ModPrzCO(void)
  1510                           ;rgl.c: 475: {
  1511  004868                     _ModPrzCO:
  1512  000000                     
  1513                           ;rgl.c: 476: unsigned char k;
  1514  004868  0100               	movlb	_rgl shr (0+8)
  1515  00486A  BB75               	btfsc	_rgl& (0+255),5,b
  1516  00486C  D025               	goto	l119
  1517                           ;rgl.c: 479: {
  1518  00486E  0E03               	movlw	3
  1519  004870  EC5B  F036         	call	_Twyzsza
  1520  004874  A0D8               	btfss	status,0,c
  1521  004876  0012               	return	
  1522                           ;rgl.c: 481: {
  1523  004878  0100               	movlb	_rgl shr (0+8)
  1524  00487A  8B75               	bsf	_rgl& (0+255),5,b
  1525                           ;rgl.c: 483: k=20;
  1526  00487C  0E14               	movlw	20
  1527  00487E  6ED9               	movwf	fsr2l,c
  1528                           ;rgl.c: 484: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PWM
      +                          .MDMOD;
  1529  004880  C277  F000         	movff	_PWM+9,btemp
  1530  004884  6A01               	clrf	btemp+1,c
  1531  004886  C07C  F002         	movff	_rgl+7,btemp+2
  1532  00488A  0EEC               	movlw	236
  1533  00488C  2402               	addwf	btemp+2,w,c
  1534  00488E  6EF6               	movwf	tblptrl,c
  1535  004890  6AF7               	clrf	tblptrh,c
  1536  004892  0EFF               	movlw	255
  1537  004894  22F7               	addwfc	tblptrh,f,c
  1538  004896  50F7               	movf	tblptrh,w,c
  1539  004898  0A80               	xorlw	128
  1540  00489A  6E02               	movwf	btemp+2,c
  1541  00489C  5001               	movf	btemp+1,w,c
  1542  00489E  0A80               	xorlw	128
  1543  0048A0  5C02               	subwf	btemp+2,w,c
  1544  0048A2  E102               	bnz	u845
  1545  0048A4  5000               	movf	btemp,w,c
  1546  0048A6  5CF6               	subwf	tblptrl,w,c
  1547  0048A8                     u845:
  1548  0048A8  E203               	bc	l121
  1549  0048AA  C277  F07C         	movff	_PWM+9,_rgl+7
  1550  0048AE  0012               	return	
  1551  0048B0                     l121:
  1552                           ;rgl.c: 485: else rgl.srp-=k;
  1553  0048B0  0100               	movlb	(_rgl+7) shr (0+8)
  1554  0048B2  0EEC               	movlw	-20
  1555  0048B4  277C               	addwf	(_rgl+7)& (0+255),f,b
  1556                           ;rgl.c: 486: }
  1557  0048B6  0CEC               	retlw	236
  1558  0048B8                     l119:
  1559                           ;rgl.c: 488: else
  1560  0048B8  0E02               	movlw	2
  1561  0048BA  EC5B  F036         	call	_Twyzsza
  1562  0048BE  B0D8               	btfsc	status,0,c
  1563  0048C0  0012               	return	
  1564                           ;rgl.c: 491: rgl.nmod=0;
  1565  0048C2  0100               	movlb	_rgl shr (0+8)
  1566  0048C4  9B75               	bcf	_rgl& (0+255),5,b
  1567                           ;rgl.c: 492: }
  1568  0048C6  0012               	return	
  1569  0048C8                     __end_of_ModPrzCO:
  1570                           ;rgl.c: 496: void PropOPT(void)
  1571                           ;rgl.c: 497: {
  1572  0048C8                     _PropOPT:
  1573  000000                     
  1574                           ;rgl.c: 498: if(rgl.nmod)
  1575  0048C8  0100               	movlb	_rgl shr (0+8)
  1576  0048CA  BB75               	btfsc	_rgl& (0+255),5,b
  1577  0048CC  EFCF  F035         	goto	l637
  1578                           ;rgl.c: 499: {
  1579                           ;rgl.c: 502: }
  1580  0048D0  EF38  F031         	goto	l482
  1581                           ;rgl.c: 503: else
  1582                           ;rgl.c: 507: }
  1583  0048D4                     __end_of_PropOPT:
  1584                           ;rgl.c: 517: void StartCO(void)
  1585                           ;rgl.c: 518: {
  1586  0048D4                     _StartCO:
  1587  000000                     
  1588                           ;rgl.c: 519: unsigned char k;
  1589  0048D4  0100               	movlb	_rgl shr (0+8)
  1590  0048D6  A175               	btfss	_rgl& (0+255),0,b
  1591  0048D8  B375               	btfsc	_rgl& (0+255),1,b
  1592  0048DA  0012               	return	
  1593                           ;rgl.c: 522: StartRTdS(2);
  1594  0048DC  0E02               	movlw	2
  1595  0048DE  EC86  F06E         	call	_StartRTdS
  1596                           ;rgl.c: 523: DtCO.dDCO=0;
  1597  0048E2  0102               	movlb	(_DtCO+9) shr (0+8)
  1598  0048E4  6B15               	clrf	(_DtCO+9)& (0+255),b
  1599                           ;rgl.c: 524: DtCO.indCO=0;
  1600  0048E6  0102               	movlb	(_DtCO+10) shr (0+8)
  1601  0048E8  6B16               	clrf	(_DtCO+10)& (0+255),b
  1602                           ;rgl.c: 525: DtCW.dDCW=0;
  1603  0048EA  0102               	movlb	(_DtCW+8) shr (0+8)
  1604  0048EC  6B23               	clrf	(_DtCW+8)& (0+255),b
  1605                           ;rgl.c: 526: DtCW.indCW=0;
  1606  0048EE  0102               	movlb	(_DtCW+10) shr (0+8)
  1607  0048F0  6B25               	clrf	(_DtCW+10)& (0+255),b
  1608                           ;rgl.c: 527: rgl.fz=0;
  1609  0048F2  0100               	movlb	_rgl shr (0+8)
  1610  0048F4  9575               	bcf	_rgl& (0+255),2,b
  1611                           ;rgl.c: 528: rgl.med_up=0;
  1612  0048F6  9775               	bcf	_rgl& (0+255),3,b
  1613                           ;rgl.c: 529: rgl.fast_up=0;
  1614  0048F8  9975               	bcf	_rgl& (0+255),4,b
  1615                           ;rgl.c: 531: if(PWM.MMAXCO>PWM.FIRSTPB)
  1616  0048FA  C28B  FFE8         	movff	_PWM+29,wreg
  1617  0048FE  0102               	movlb	(_PWM+24) shr (0+8)
  1618  004900  6186               	cpfslt	(_PWM+24)& (0+255),b
  1619  004902  D003               	goto	l130
  1620                           ;rgl.c: 532: {
  1621  004904  C286  F07D         	movff	_PWM+24,_rgl+8
  1622                           ;rgl.c: 534: }
  1623  004908  D002               	goto	l131
  1624  00490A                     l130:
  1625                           ;rgl.c: 535: else
  1626  00490A  C28B  F07D         	movff	_PWM+29,_rgl+8
  1627  00490E                     l131:
  1628                           ;rgl.c: 538: }
  1629  00490E  0100               	movlb	(_rgl+7) shr (0+8)
  1630  004910  6B7C               	clrf	(_rgl+7)& (0+255),b
  1631                           ;rgl.c: 540: rgl.ytmp=0;
  1632  004912  6B7B               	clrf	(_rgl+6)& (0+255),b
  1633                           ;rgl.c: 541: rgl.nmod=0;
  1634  004914  9B75               	bcf	_rgl& (0+255),5,b
  1635                           ;rgl.c: 542: rgl.del1s=0;
  1636  004916  9D75               	bcf	_rgl& (0+255),6,b
  1637                           ;rgl.c: 543: rgl.inv_mod=0;
  1638  004918  9176               	bcf	(_rgl+1)& (0+255),0,b
  1639                           ;rgl.c: 544: }
  1640  00491A  0012               	return	
  1641  00491C                     __end_of_StartCO:
  1642                           ;rgl.c: 547: void StartMCW(void)
  1643                           ;rgl.c: 548: {
  1644  00491C                     _StartMCW:
  1645  000000                     
  1646                           ;rgl.c: 549: if(rgl.btco||rgl.btcw) return;
  1647  00491C  0100               	movlb	_rgl shr (0+8)
  1648  00491E  A175               	btfss	_rgl& (0+255),0,b
  1649  004920  B375               	btfsc	_rgl& (0+255),1,b
  1650  004922  0012               	return	
  1651                           ;rgl.c: 550: StartRTdS(2);
  1652  004924  0E02               	movlw	2
  1653  004926  EC86  F06E         	call	_StartRTdS
  1654                           ;rgl.c: 551: DtCO.dDCO=0;
  1655  00492A  0102               	movlb	(_DtCO+9) shr (0+8)
  1656  00492C  6B15               	clrf	(_DtCO+9)& (0+255),b
  1657                           ;rgl.c: 552: DtCW.dDCW=0;
  1658  00492E  0102               	movlb	(_DtCW+8) shr (0+8)
  1659  004930  6B23               	clrf	(_DtCW+8)& (0+255),b
  1660                           ;rgl.c: 553: DtCO.indCO=0;
  1661  004932  0102               	movlb	(_DtCO+10) shr (0+8)
  1662  004934  6B16               	clrf	(_DtCO+10)& (0+255),b
  1663                           ;rgl.c: 554: DtCW.indCW=0;
  1664  004936  0102               	movlb	(_DtCW+10) shr (0+8)
  1665  004938  6B25               	clrf	(_DtCW+10)& (0+255),b
  1666                           ;rgl.c: 555: rgl.fz=0;
  1667  00493A  0100               	movlb	_rgl shr (0+8)
  1668  00493C  9575               	bcf	_rgl& (0+255),2,b
  1669                           ;rgl.c: 556: rgl.med_up=0;
  1670  00493E  9775               	bcf	_rgl& (0+255),3,b
  1671                           ;rgl.c: 557: rgl.fast_up=0;
  1672  004940  9975               	bcf	_rgl& (0+255),4,b
  1673                           ;rgl.c: 559: rgl.srp=0;
  1674  004942  6B7C               	clrf	(_rgl+7)& (0+255),b
  1675                           ;rgl.c: 560: rgl.ytmp=0;
  1676  004944  6B7B               	clrf	(_rgl+6)& (0+255),b
  1677                           ;rgl.c: 561: rgl.nmod=0;
  1678  004946  9B75               	bcf	_rgl& (0+255),5,b
  1679                           ;rgl.c: 562: rgl.del1s=0;
  1680  004948  9D75               	bcf	_rgl& (0+255),6,b
  1681                           ;rgl.c: 563: rgl.inv_mod=0;
  1682  00494A  9176               	bcf	(_rgl+1)& (0+255),0,b
  1683                           ;rgl.c: 564: rgl.xmod=FirstPCW();
  1684  00494C  D82E               	call	_FirstPCW	;wreg free
  1685  00494E  CFE8 F07D          	movff	wreg,_rgl+8
  1686                           ;rgl.c: 565: tmr=1;
  1687  004952  0E01               	movlw	1
  1688  004954  CFE8 FEEC          	movff	wreg,_tmr
  1689                           ;rgl.c: 566: tmr2=1;
  1690  004958  CFE8 FEED          	movff	wreg,_tmr2
  1691                           ;rgl.c: 567: pwm_center=PWM.MDMOD+(PWM.MGMOD-PWM
      +                          .MDMOD)/2;
  1692  00495C  0E02               	movlw	2
  1693  00495E  6E02               	movwf	btemp+2,c
  1694  004960  6A03               	clrf	btemp+3,c
  1695  004962  C277  FFE8         	movff	_PWM+9,wreg
  1696  004966  C278  F000         	movff	_PWM+10,btemp
  1697  00496A  6A01               	clrf	btemp+1,c
  1698  00496C  5E00               	subwf	btemp,f,c
  1699  00496E  0E00               	movlw	0
  1700  004970  5A01               	subwfb	btemp+1,f,c
  1701  004972  ECCC  F072         	call	awdiv
  1702  004976  C277  F000         	movff	_PWM+9,btemp
  1703  00497A  5000               	movf	btemp,w,c
  1704  00497C  2404               	addwf	btemp+4,w,c
  1705  00497E  CFE8 FEEA          	movff	wreg,_pwm_center
  1706                           ;rgl.c: 568: pwm_kwr=PWM.MDMOD+(PWM.MGMOD-PWM.MD
      +                          MOD)/4;
  1707  004982  0E04               	movlw	4
  1708  004984  6E02               	movwf	btemp+2,c
  1709  004986  6A03               	clrf	btemp+3,c
  1710  004988  C277  FFE8         	movff	_PWM+9,wreg
  1711  00498C  C278  F000         	movff	_PWM+10,btemp
  1712  004990  6A01               	clrf	btemp+1,c
  1713  004992  5E00               	subwf	btemp,f,c
  1714  004994  0E00               	movlw	0
  1715  004996  5A01               	subwfb	btemp+1,f,c
  1716  004998  ECCC  F072         	call	awdiv
  1717  00499C  C277  F000         	movff	_PWM+9,btemp
  1718  0049A0  5000               	movf	btemp,w,c
  1719  0049A2  2404               	addwf	btemp+4,w,c
  1720  0049A4  CFE8 FEEB          	movff	wreg,_pwm_kwr
  1721                           ;rgl.c: 569: }
  1722  0049A8  0012               	return	
  1723  0049AA                     __end_of_StartMCW:
  1724                           ;rgl.c: 631: unsigned char FirstPCW(void)
  1725                           ;rgl.c: 632: {
  1726  0049AA                     _FirstPCW:
  1727  000000                     
  1728                           ;rgl.c: 633: signed long m;
  1729  0049AA  0E04               	movlw	4
  1730  0049AC  6E02               	movwf	btemp+2,c
  1731  0049AE  6A03               	clrf	btemp+3,c
  1732  0049B0  C277  FFE8         	movff	_PWM+9,wreg
  1733  0049B4  C286  F000         	movff	_PWM+24,btemp
  1734  0049B8  6A01               	clrf	btemp+1,c
  1735  0049BA  5E00               	subwf	btemp,f,c
  1736  0049BC  0E00               	movlw	0
  1737  0049BE  5A01               	subwfb	btemp+1,f,c
  1738  0049C0  ECCC  F072         	call	awdiv
  1739  0049C4  5004               	movf	btemp+4,w,c
  1740  0049C6  6ED9               	movwf	fsr2l,c
  1741                           ;rgl.c: 641: if(PWM.MMAXCW>(PWM.FIRSTPB+tmp))
  1742  0049C8  C28C  F000         	movff	_PWM+30,btemp
  1743  0049CC  6A01               	clrf	btemp+1,c
  1744  0049CE  50D9               	movf	fsr2l,w,c
  1745  0049D0  C286  F002         	movff	_PWM+24,btemp+2
  1746  0049D4  6A03               	clrf	btemp+3,c
  1747  0049D6  2602               	addwf	btemp+2,f,c
  1748  0049D8  0E00               	movlw	0
  1749  0049DA  2203               	addwfc	btemp+3,f,c
  1750  0049DC  5003               	movf	btemp+3,w,c
  1751  0049DE  0A80               	xorlw	128
  1752  0049E0  6E04               	movwf	btemp+4,c
  1753  0049E2  5001               	movf	btemp+1,w,c
  1754  0049E4  0A80               	xorlw	128
  1755  0049E6  5C04               	subwf	btemp+4,w,c
  1756  0049E8  E102               	bnz	u945
  1757  0049EA  5000               	movf	btemp,w,c
  1758  0049EC  5C02               	subwf	btemp+2,w,c
  1759  0049EE                     u945:
  1760  0049EE  E205               	bc	l135
  1761                           ;rgl.c: 642: {
  1762  0049F0  50D9               	movf	fsr2l,w,c
  1763  0049F2  0102               	movlb	(_PWM+24) shr (0+8)
  1764  0049F4  2586               	addwf	(_PWM+24)& (0+255),w,b
  1765  0049F6  6EE1               	movwf	fsr1l,c
  1766                           ;rgl.c: 644: }
  1767  0049F8  D002               	goto	l136
  1768  0049FA                     l135:
  1769                           ;rgl.c: 645: else
  1770  0049FA  C28C  FFE1         	movff	_PWM+30,fsr1l
  1771  0049FE                     l136:
  1772                           ;rgl.c: 648: }
  1773  0049FE  0E13               	movlw	19
  1774  004A00  0102               	movlb	(_DtCW+2) shr (0+8)
  1775  004A02  651D               	cpfsgt	(_DtCW+2)& (0+255),b
  1776  004A04  D06D               	goto	l137
  1777  004A06  0E3D               	movlw	61
  1778  004A08  611D               	cpfslt	(_DtCW+2)& (0+255),b
  1779  004A0A  D06A               	goto	l137
  1780                           ;rgl.c: 654: {
  1781  004A0C  0E0A               	movlw	10
  1782  004A0E  6E02               	movwf	btemp+2,c
  1783  004A10  6A03               	clrf	btemp+3,c
  1784  004A12  0E3C               	movlw	60
  1785  004A14  6E00               	movwf	btemp,c
  1786  004A16  6A01               	clrf	btemp+1,c
  1787  004A18  C21D  FFE8         	movff	_DtCW+2,wreg
  1788  004A1C  5E00               	subwf	btemp,f,c
  1789  004A1E  0E00               	movlw	0
  1790  004A20  5A01               	subwfb	btemp+1,f,c
  1791  004A22  EC03  F073         	call	awmul
  1792  004A26  0100               	movlb	__Lparam shr (0+8)
  1793  004A28  C004  F0D8         	movff	btemp+4,?a_FirstPCW+1
  1794  004A2C  C005  F0D9         	movff	btemp+5,?a_FirstPCW+2
  1795  004A30  0E00               	movlw	0
  1796  004A32  BFD9               	btfsc	(?a_FirstPCW+2)^(__Lparam& (0+65280)),7,b
  1797  004A34  0EFF               	movlw	-1
  1798  004A36  6FDA               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1799  004A38  6FDB               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1800                           ;rgl.c: 656: m=m/(60-20);
  1801  004A3A  0E28               	movlw	40
  1802  004A3C  6E04               	movwf	btemp+4,c
  1803  004A3E  6A05               	clrf	btemp+5,c
  1804  004A40  6A06               	clrf	btemp+6,c
  1805  004A42  6A07               	clrf	btemp+7,c
  1806  004A44  0ED8               	movlw	low (?a_FirstPCW+1)
  1807  004A46  6EE9               	movwf	fsr0l,c
  1808  004A48  0E00               	movlw	high (?a_FirstPCW+1)
  1809  004A4A  6EEA               	movwf	fsr0h,c
  1810  004A4C  EC36  F073         	call	aldiv_f
  1811                           ;rgl.c: 657: m=m*(maxmod-PWM.MDMOD);
  1812  004A50  C277  FFE8         	movff	_PWM+9,wreg
  1813  004A54  5CE1               	subwf	fsr1l,w,c
  1814  004A56  6E04               	movwf	btemp+4,c
  1815  004A58  6A05               	clrf	btemp+5,c
  1816  004A5A  A0D8               	btfss	status,0,c
  1817  004A5C  0605               	decf	btemp+5,f,c
  1818  004A5E  6A06               	clrf	btemp+6,c
  1819  004A60  BE05               	btfsc	btemp+5,7,c
  1820  004A62  0606               	decf	btemp+6,f,c
  1821  004A64  5006               	movf	btemp+6,w,c
  1822  004A66  6E07               	movwf	btemp+7,c
  1823  004A68  0ED8               	movlw	low (?a_FirstPCW+1)
  1824  004A6A  6EE9               	movwf	fsr0l,c
  1825  004A6C  0E00               	movlw	high (?a_FirstPCW+1)
  1826  004A6E  6EEA               	movwf	fsr0h,c
  1827  004A70  EC2C  F073         	call	almul_f
  1828                           ;rgl.c: 658: if(m<0) m=0;
  1829  004A74  AFDB               	btfss	(?a_FirstPCW+4)^(__Lparam& (0+65280)),7,b
  1830  004A76  D004               	goto	l138
  1831  004A78  6BD8               	clrf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1832  004A7A  6BD9               	clrf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1833  004A7C  6BDA               	clrf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1834  004A7E  6BDB               	clrf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1835  004A80                     l138:
  1836                           ;rgl.c: 659: m=m/10+PWM.MDMOD;
  1837  004A80  0E0A               	movlw	10
  1838  004A82  6E04               	movwf	btemp+4,c
  1839  004A84  6A05               	clrf	btemp+5,c
  1840  004A86  6A06               	clrf	btemp+6,c
  1841  004A88  6A07               	clrf	btemp+7,c
  1842  004A8A  C0D8  F000         	movff	?a_FirstPCW+1,btemp
  1843  004A8E  C0D9  F001         	movff	?a_FirstPCW+2,btemp+1
  1844  004A92  C0DA  F002         	movff	?a_FirstPCW+3,btemp+2
  1845  004A96  C0DB  F003         	movff	?a_FirstPCW+4,btemp+3
  1846  004A9A  EC93  F072         	call	aldiv
  1847  004A9E  C277  FFE8         	movff	_PWM+9,wreg
  1848  004AA2  2400               	addwf	btemp,w,c
  1849  004AA4  0100               	movlb	__Lparam shr (0+8)
  1850  004AA6  6FD8               	movwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1851  004AA8  0E00               	movlw	0
  1852  004AAA  2001               	addwfc	btemp+1,w,c
  1853  004AAC  6FD9               	movwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1854  004AAE  0E00               	movlw	0
  1855  004AB0  2002               	addwfc	btemp+2,w,c
  1856  004AB2  6FDA               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1857  004AB4  0E00               	movlw	0
  1858  004AB6  2003               	addwfc	btemp+3,w,c
  1859  004AB8  6FDB               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1860                           ;rgl.c: 660: if(m>0xff) p=maxmod;
  1861  004ABA  51DB               	movf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),w
  1862  004ABC  0A80               	xorlw	128
  1863  004ABE  0F80               	addlw	128
  1864  004AC0  E108               	bnz	u995
  1865  004AC2  0E00               	movlw	0
  1866  004AC4  5DDA               	subwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),w
  1867  004AC6  E105               	bnz	u995
  1868  004AC8  0E01               	movlw	1
  1869  004ACA  5DD9               	subwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),w
  1870  004ACC  E102               	bnz	u995
  1871  004ACE  0E00               	movlw	0
  1872  004AD0  5DD8               	subwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  1873  004AD2                     u995:
  1874  004AD2  E303               	bnc	l139
  1875  004AD4  50E1               	movf	fsr1l,w,c
  1876  004AD6                     L1:
  1877  004AD6  6FD7               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  1878  004AD8  D010               	goto	l141
  1879  004ADA                     l139:
  1880                           ;rgl.c: 661: else p=m;
  1881  004ADA  0100               	movlb	__Lparam shr (0+8)
  1882  004ADC  51D8               	movf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  1883  004ADE  D7FB               	goto	L1
  1884                           ;rgl.c: 662: }
  1885  004AE0                     l137:
  1886                           ;rgl.c: 663: else
  1887  004AE0  0E14               	movlw	20
  1888  004AE2  0102               	movlb	(_DtCW+2) shr (0+8)
  1889  004AE4  611D               	cpfslt	(_DtCW+2)& (0+255),b
  1890  004AE6  D003               	goto	l142
  1891  004AE8  50E1               	movf	fsr1l,w,c
  1892  004AEA  0100               	movlb	__Lparam shr (0+8)
  1893  004AEC  6FD7               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  1894  004AEE                     l142:
  1895                           ;rgl.c: 666: if(DtCW.CW>60) p=PWM.MDMOD;
  1896  004AEE  0E3C               	movlw	60
  1897  004AF0  0102               	movlb	(_DtCW+2) shr (0+8)
  1898  004AF2  651D               	cpfsgt	(_DtCW+2)& (0+255),b
  1899  004AF4  D002               	goto	l141
  1900  004AF6  C277  F0D7         	movff	_PWM+9,?a_FirstPCW
  1901  004AFA                     l141:
  1902                           ;rgl.c: 667: }
  1903  004AFA  0E0A               	movlw	10
  1904  004AFC  6E02               	movwf	btemp+2,c
  1905  004AFE  6A03               	clrf	btemp+3,c
  1906  004B00  C21E  F000         	movff	_DtCW+3,btemp
  1907  004B04  6A01               	clrf	btemp+1,c
  1908  004B06  0EE2               	movlw	226
  1909  004B08  2600               	addwf	btemp,f,c
  1910  004B0A  0EFF               	movlw	255
  1911  004B0C  2201               	addwfc	btemp+1,f,c
  1912  004B0E  EC03  F073         	call	awmul
  1913  004B12  0100               	movlb	__Lparam shr (0+8)
  1914  004B14  C004  F0D8         	movff	btemp+4,?a_FirstPCW+1
  1915  004B18  C005  F0D9         	movff	btemp+5,?a_FirstPCW+2
  1916  004B1C  0E00               	movlw	0
  1917  004B1E  BFD9               	btfsc	(?a_FirstPCW+2)^(__Lparam& (0+65280)),7,b
  1918  004B20  0EFF               	movlw	-1
  1919  004B22  6FDA               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1920  004B24  6FDB               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1921                           ;rgl.c: 671: m=m/(60-30);
  1922  004B26  0E1E               	movlw	30
  1923  004B28  6E04               	movwf	btemp+4,c
  1924  004B2A  6A05               	clrf	btemp+5,c
  1925  004B2C  6A06               	clrf	btemp+6,c
  1926  004B2E  6A07               	clrf	btemp+7,c
  1927  004B30  0ED8               	movlw	low (?a_FirstPCW+1)
  1928  004B32  6EE9               	movwf	fsr0l,c
  1929  004B34  0E00               	movlw	high (?a_FirstPCW+1)
  1930  004B36  6EEA               	movwf	fsr0h,c
  1931  004B38  EC36  F073         	call	aldiv_f
  1932                           ;rgl.c: 672: m=m*(maxmod-PWM.MDMOD);
  1933  004B3C  C277  FFE8         	movff	_PWM+9,wreg
  1934  004B40  5CE1               	subwf	fsr1l,w,c
  1935  004B42  6E04               	movwf	btemp+4,c
  1936  004B44  6A05               	clrf	btemp+5,c
  1937  004B46  A0D8               	btfss	status,0,c
  1938  004B48  0605               	decf	btemp+5,f,c
  1939  004B4A  6A06               	clrf	btemp+6,c
  1940  004B4C  BE05               	btfsc	btemp+5,7,c
  1941  004B4E  0606               	decf	btemp+6,f,c
  1942  004B50  5006               	movf	btemp+6,w,c
  1943  004B52  6E07               	movwf	btemp+7,c
  1944  004B54  0ED8               	movlw	low (?a_FirstPCW+1)
  1945  004B56  6EE9               	movwf	fsr0l,c
  1946  004B58  0E00               	movlw	high (?a_FirstPCW+1)
  1947  004B5A  6EEA               	movwf	fsr0h,c
  1948  004B5C  EC2C  F073         	call	almul_f
  1949                           ;rgl.c: 673: if(m<0) m=0;
  1950  004B60  AFDB               	btfss	(?a_FirstPCW+4)^(__Lparam& (0+65280)),7,b
  1951  004B62  D004               	goto	l144
  1952  004B64  6BD8               	clrf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1953  004B66  6BD9               	clrf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1954  004B68  6BDA               	clrf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1955  004B6A  6BDB               	clrf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1956  004B6C                     l144:
  1957                           ;rgl.c: 674: m=m/10+PWM.MDMOD;
  1958  004B6C  0E0A               	movlw	10
  1959  004B6E  6E04               	movwf	btemp+4,c
  1960  004B70  6A05               	clrf	btemp+5,c
  1961  004B72  6A06               	clrf	btemp+6,c
  1962  004B74  6A07               	clrf	btemp+7,c
  1963  004B76  C0D8  F000         	movff	?a_FirstPCW+1,btemp
  1964  004B7A  C0D9  F001         	movff	?a_FirstPCW+2,btemp+1
  1965  004B7E  C0DA  F002         	movff	?a_FirstPCW+3,btemp+2
  1966  004B82  C0DB  F003         	movff	?a_FirstPCW+4,btemp+3
  1967  004B86  EC93  F072         	call	aldiv
  1968  004B8A  C277  FFE8         	movff	_PWM+9,wreg
  1969  004B8E  2400               	addwf	btemp,w,c
  1970  004B90  0100               	movlb	__Lparam shr (0+8)
  1971  004B92  6FD8               	movwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1972  004B94  0E00               	movlw	0
  1973  004B96  2001               	addwfc	btemp+1,w,c
  1974  004B98  6FD9               	movwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1975  004B9A  0E00               	movlw	0
  1976  004B9C  2002               	addwfc	btemp+2,w,c
  1977  004B9E  6FDA               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1978  004BA0  0E00               	movlw	0
  1979  004BA2  2003               	addwfc	btemp+3,w,c
  1980  004BA4  6FDB               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1981                           ;rgl.c: 675: if(m>0xff) p2=maxmod;
  1982  004BA6  51DB               	movf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),w
  1983  004BA8  0A80               	xorlw	128
  1984  004BAA  0F80               	addlw	128
  1985  004BAC  E108               	bnz	u1035
  1986  004BAE  0E00               	movlw	0
  1987  004BB0  5DDA               	subwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),w
  1988  004BB2  E105               	bnz	u1035
  1989  004BB4  0E01               	movlw	1
  1990  004BB6  5DD9               	subwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),w
  1991  004BB8  E102               	bnz	u1035
  1992  004BBA  0E00               	movlw	0
  1993  004BBC  5DD8               	subwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  1994  004BBE                     u1035:
  1995  004BBE  E302               	bnc	l145
  1996  004BC0  50E1               	movf	fsr1l,w,c
  1997  004BC2  D002               	goto	L2
  1998  004BC4                     l145:
  1999                           ;rgl.c: 676: else p2=m;
  2000  004BC4  0100               	movlb	__Lparam shr (0+8)
  2001  004BC6  51D8               	movf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  2002  004BC8                     L2:
  2003  004BC8  6ED9               	movwf	fsr2l,c
  2004                           ;rgl.c: 679: if(p>p2) p=p2;
  2005  004BCA  0100               	movlb	__Lparam shr (0+8)
  2006  004BCC  51D7               	movf	?a_FirstPCW^(__Lparam& (0+65280)),w
  2007  004BCE  60D9               	cpfslt	fsr2l,c
  2008  004BD0  D002               	goto	l147
  2009  004BD2  50D9               	movf	fsr2l,w,c
  2010  004BD4  6FD7               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  2011  004BD6                     l147:
  2012                           ;rgl.c: 682: if(DtCW.DCW>=0&&DtCW.DCW<=40)
  2013  004BD6  C222  F000         	movff	_DtCW+7,btemp
  2014  004BDA  C222  FFE8         	movff	_DtCW+7,wreg
  2015  004BDE  0A80               	xorlw	128
  2016  004BE0  BE00               	btfsc	btemp,7,c
  2017  004BE2  D06C               	goto	L16
  2018  004BE4  0F57               	addlw	-169
  2019  004BE6  E267               	bc	l148
  2020                           ;rgl.c: 683: {
  2021  004BE8  0E0A               	movlw	10
  2022  004BEA  6E02               	movwf	btemp+2,c
  2023  004BEC  6A03               	clrf	btemp+3,c
  2024  004BEE  C222  F000         	movff	_DtCW+7,btemp
  2025  004BF2  6A01               	clrf	btemp+1,c
  2026  004BF4  BE00               	btfsc	btemp,7,c
  2027  004BF6  0601               	decf	btemp+1,f,c
  2028  004BF8  EC03  F073         	call	awmul
  2029  004BFC  0100               	movlb	__Lparam shr (0+8)
  2030  004BFE  C004  F0D8         	movff	btemp+4,?a_FirstPCW+1
  2031  004C02  C005  F0D9         	movff	btemp+5,?a_FirstPCW+2
  2032  004C06  0E00               	movlw	0
  2033  004C08  BFD9               	btfsc	(?a_FirstPCW+2)^(__Lparam& (0+65280)),7,b
  2034  004C0A  0EFF               	movlw	-1
  2035  004C0C  6FDA               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  2036  004C0E  6FDB               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  2037                           ;rgl.c: 685: m=m/(40-0);
  2038  004C10  0E28               	movlw	40
  2039  004C12  6E04               	movwf	btemp+4,c
  2040  004C14  6A05               	clrf	btemp+5,c
  2041  004C16  6A06               	clrf	btemp+6,c
  2042  004C18  6A07               	clrf	btemp+7,c
  2043  004C1A  0ED8               	movlw	low (?a_FirstPCW+1)
  2044  004C1C  6EE9               	movwf	fsr0l,c
  2045  004C1E  0E00               	movlw	high (?a_FirstPCW+1)
  2046  004C20  6EEA               	movwf	fsr0h,c
  2047  004C22  EC36  F073         	call	aldiv_f
  2048                           ;rgl.c: 686: m=m*(maxmod-PWM.MDMOD);
  2049  004C26  C277  FFE8         	movff	_PWM+9,wreg
  2050  004C2A  5CE1               	subwf	fsr1l,w,c
  2051  004C2C  6E04               	movwf	btemp+4,c
  2052  004C2E  6A05               	clrf	btemp+5,c
  2053  004C30  A0D8               	btfss	status,0,c
  2054  004C32  0605               	decf	btemp+5,f,c
  2055  004C34  6A06               	clrf	btemp+6,c
  2056  004C36  BE05               	btfsc	btemp+5,7,c
  2057  004C38  0606               	decf	btemp+6,f,c
  2058  004C3A  5006               	movf	btemp+6,w,c
  2059  004C3C  6E07               	movwf	btemp+7,c
  2060  004C3E  0ED8               	movlw	low (?a_FirstPCW+1)
  2061  004C40  6EE9               	movwf	fsr0l,c
  2062  004C42  0E00               	movlw	high (?a_FirstPCW+1)
  2063  004C44  6EEA               	movwf	fsr0h,c
  2064  004C46  EC2C  F073         	call	almul_f
  2065                           ;rgl.c: 687: if(m<0) m=0;
  2066  004C4A  AFDB               	btfss	(?a_FirstPCW+4)^(__Lparam& (0+65280)),7,b
  2067  004C4C  D004               	goto	l149
  2068  004C4E  6BD8               	clrf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  2069  004C50  6BD9               	clrf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  2070  004C52  6BDA               	clrf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  2071  004C54  6BDB               	clrf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  2072  004C56                     l149:
  2073                           ;rgl.c: 688: m=m/10+PWM.MDMOD;
  2074  004C56  0E0A               	movlw	10
  2075  004C58  6E04               	movwf	btemp+4,c
  2076  004C5A  6A05               	clrf	btemp+5,c
  2077  004C5C  6A06               	clrf	btemp+6,c
  2078  004C5E  6A07               	clrf	btemp+7,c
  2079  004C60  C0D8  F000         	movff	?a_FirstPCW+1,btemp
  2080  004C64  C0D9  F001         	movff	?a_FirstPCW+2,btemp+1
  2081  004C68  C0DA  F002         	movff	?a_FirstPCW+3,btemp+2
  2082  004C6C  C0DB  F003         	movff	?a_FirstPCW+4,btemp+3
  2083  004C70  EC93  F072         	call	aldiv
  2084  004C74  C277  FFE8         	movff	_PWM+9,wreg
  2085  004C78  2400               	addwf	btemp,w,c
  2086  004C7A  0100               	movlb	__Lparam shr (0+8)
  2087  004C7C  6FD8               	movwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  2088  004C7E  0E00               	movlw	0
  2089  004C80  2001               	addwfc	btemp+1,w,c
  2090  004C82  6FD9               	movwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  2091  004C84  0E00               	movlw	0
  2092  004C86  2002               	addwfc	btemp+2,w,c
  2093  004C88  6FDA               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  2094  004C8A  0E00               	movlw	0
  2095  004C8C  2003               	addwfc	btemp+3,w,c
  2096  004C8E  6FDB               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  2097                           ;rgl.c: 689: if(m>0xff) p2=maxmod;
  2098  004C90  51DB               	movf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),w
  2099  004C92  0A80               	xorlw	128
  2100  004C94  0F80               	addlw	128
  2101  004C96  E108               	bnz	u1095
  2102  004C98  0E00               	movlw	0
  2103  004C9A  5DDA               	subwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),w
  2104  004C9C  E105               	bnz	u1095
  2105  004C9E  0E01               	movlw	1
  2106  004CA0  5DD9               	subwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),w
  2107  004CA2  E102               	bnz	u1095
  2108  004CA4  0E00               	movlw	0
  2109  004CA6  5DD8               	subwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  2110  004CA8                     u1095:
  2111  004CA8  E303               	bnc	l150
  2112  004CAA  50E1               	movf	fsr1l,w,c
  2113  004CAC                     L3:
  2114  004CAC  6ED9               	movwf	fsr2l,c
  2115  004CAE  D00F               	goto	l152
  2116  004CB0                     l150:
  2117                           ;rgl.c: 690: else p2=m;
  2118  004CB0  0100               	movlb	__Lparam shr (0+8)
  2119  004CB2  51D8               	movf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  2120  004CB4  D7FB               	goto	L3
  2121                           ;rgl.c: 691: }
  2122  004CB6                     l148:
  2123                           ;rgl.c: 692: else
  2124  004CB6  C222  FFE8         	movff	_DtCW+7,wreg
  2125  004CBA  0A80               	xorlw	128
  2126  004CBC                     L16:
  2127  004CBC  0F57               	addlw	-169
  2128  004CBE  E302               	bnc	l153
  2129  004CC0  50E1               	movf	fsr1l,w,c
  2130  004CC2  6ED9               	movwf	fsr2l,c
  2131  004CC4                     l153:
  2132                           ;rgl.c: 695: if(DtCW.DCW<0) p2=PWM.MDMOD;
  2133  004CC4  C222  F000         	movff	_DtCW+7,btemp
  2134  004CC8  BE00               	btfsc	btemp,7,c
  2135  004CCA  C277  FFD9         	movff	_PWM+9,fsr2l
  2136  004CCE                     l152:
  2137                           ;rgl.c: 696: }
  2138  004CCE  0100               	movlb	__Lparam shr (0+8)
  2139  004CD0  51D7               	movf	?a_FirstPCW^(__Lparam& (0+65280)),w
  2140  004CD2  60D9               	cpfslt	fsr2l,c
  2141  004CD4  D002               	goto	l155
  2142  004CD6  50D9               	movf	fsr2l,w,c
  2143  004CD8  6FD7               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  2144  004CDA                     l155:
  2145                           ;rgl.c: 701: return p;
  2146  004CDA  0100               	movlb	__Lparam shr (0+8)
  2147  004CDC  51D7               	movf	?a_FirstPCW^(__Lparam& (0+65280)),w
  2148  004CDE  0012               	return	
  2149                           ;rgl.c: 702: }
  2150  004CE0                     __end_of_FirstPCW:
  2151                           ;rgl.c: 705: void ClrMod(void)
  2152                           ;rgl.c: 706: {
  2153  004CE0                     _ClrMod:
  2154  000000                     
  2155                           ;rgl.c: 707: rgl.fz=0;
  2156  004CE0  0100               	movlb	_rgl shr (0+8)
  2157  004CE2  9575               	bcf	_rgl& (0+255),2,b
  2158                           ;rgl.c: 708: rgl.med_up=0;
  2159  004CE4  9775               	bcf	_rgl& (0+255),3,b
  2160                           ;rgl.c: 709: rgl.fast_up=0;
  2161  004CE6  9975               	bcf	_rgl& (0+255),4,b
  2162                           ;rgl.c: 710: rgl.xmod=PWM.BufPWM;
  2163  004CE8  C26F  F07D         	movff	_PWM+1,_rgl+8
  2164                           ;rgl.c: 711: rgl.srp=0;
  2165  004CEC  6B7C               	clrf	(_rgl+7)& (0+255),b
  2166                           ;rgl.c: 712: rgl.ytmp=0;
  2167  004CEE  6B7B               	clrf	(_rgl+6)& (0+255),b
  2168                           ;rgl.c: 713: rgl.nmod=0;
  2169  004CF0  9B75               	bcf	_rgl& (0+255),5,b
  2170                           ;rgl.c: 714: rgl.del1s=0;
  2171  004CF2  9D75               	bcf	_rgl& (0+255),6,b
  2172                           ;rgl.c: 715: rgl.inv_mod=0;
  2173  004CF4  9176               	bcf	(_rgl+1)& (0+255),0,b
  2174                           ;rgl.c: 716: }
  2175  004CF6  0012               	return	
  2176  004CF8                     __end_of_ClrMod:
  2177                           ;rgl.c: 719: void ModToCW(void)
  2178                           ;rgl.c: 720: {
  2179  004CF8                     _ModToCW:
  2180  000000                     
  2181                           ;rgl.c: 721: rgl.btcw=1;
  2182  004CF8  0100               	movlb	_rgl shr (0+8)
  2183  004CFA  8375               	bsf	_rgl& (0+255),1,b
  2184                           ;rgl.c: 722: if(rgl.btco)
  2185  004CFC  A175               	btfss	_rgl& (0+255),0,b
  2186  004CFE  0012               	return	
  2187                           ;rgl.c: 723: {
  2188  004D00  9175               	bcf	_rgl& (0+255),0,b
  2189                           ;rgl.c: 725: ClrMod();
  2190  004D02  D7EE               	goto	_ClrMod	;wreg free
  2191                           ;rgl.c: 726: }
  2192  004D04                     __end_of_ModToCW:
  2193                           ;rgl.c: 730: void ModToCO(void)
  2194                           ;rgl.c: 731: {
  2195  004D04                     _ModToCO:
  2196  000000                     
  2197                           ;rgl.c: 732: rgl.btco=1;
  2198  004D04  0100               	movlb	_rgl shr (0+8)
  2199  004D06  8175               	bsf	_rgl& (0+255),0,b
  2200                           ;rgl.c: 733: if(rgl.btcw)
  2201  004D08  A375               	btfss	_rgl& (0+255),1,b
  2202  004D0A  0012               	return	
  2203                           ;rgl.c: 734: {
  2204  004D0C  9375               	bcf	_rgl& (0+255),1,b
  2205                           ;rgl.c: 736: ClrMod();
  2206  004D0E  D7E8               	goto	_ClrMod	;wreg free
  2207                           ;rgl.c: 737: }
  2208  004D10                     __end_of_ModToCO:
  2209                           ;rgl.c: 741: void IncConstCOCW(void)
  2210                           ;rgl.c: 742: {
  2211  004D10                     _IncConstCOCW:
  2212  000000                     
  2213                           ;rgl.c: 743: if(Tstoi()) rgl.ytmp++;
  2214  004D10  EC47  F036         	call	_Tstoi	;wreg free
  2215  004D14  0100               	movlb	(_rgl+6) shr (0+8)
  2216  004D16  E302               	bnc	L17
  2217  004D18  2B7B               	incf	(_rgl+6)& (0+255),f,b
  2218  004D1A  0C01               	retlw	1
  2219                           ;rgl.c: 744: else rgl.ytmp=0;
  2220  004D1C                     L17:
  2221  004D1C  6B7B               	clrf	(_rgl+6)& (0+255),b
  2222                           ;rgl.c: 745: }
  2223  004D1E  0012               	return	
  2224  004D20                     __end_of_IncConstCOCW:
  2225                           ;rgl.c: 748: void ReadDataCO(void)
  2226                           ;rgl.c: 749: {
  2227  004D20                     _ReadDataCO:
  2228  000000                     
  2229                           ;rgl.c: 750: rgl.x_t=DtCO.DCO;
  2230  004D20  C214  F077         	movff	_DtCO+8,_rgl+2
  2231                           ;rgl.c: 751: rgl.x_dt=DtCO.dDCO;
  2232  004D24  C215  F079         	movff	_DtCO+9,_rgl+4
  2233                           ;rgl.c: 752: }
  2234  004D28  0012               	return	
  2235  004D2A                     __end_of_ReadDataCO:
  2236                           ;rgl.c: 755: void ReadDataCW(void)
  2237                           ;rgl.c: 756: {
  2238  004D2A                     _ReadDataCW:
  2239  000000                     
  2240                           ;rgl.c: 757: rgl.x_t=DtCW.DCW;
  2241  004D2A  C222  F077         	movff	_DtCW+7,_rgl+2
  2242                           ;rgl.c: 758: rgl.x_f=DtCO.DCO;
  2243  004D2E  C214  F078         	movff	_DtCO+8,_rgl+3
  2244                           ;rgl.c: 759: rgl.x_dt=DtCW.dDCW;
  2245  004D32  C223  F079         	movff	_DtCW+8,_rgl+4
  2246                           ;rgl.c: 760: rgl.x_df=DtCO.dDCO;
  2247  004D36  C215  F07A         	movff	_DtCO+9,_rgl+5
  2248                           ;rgl.c: 761: }
  2249  004D3A  0012               	return	
  2250  004D3C                     __end_of_ReadDataCW:
  2251                           ;rgl.c: 764: void ModZgCW(void)
  2252                           ;rgl.c: 765: {
  2253  004D3C                     _ModZgCW:
  2254  000000                     
  2255                           ;rgl.c: 766: signed long m;
  2256  004D3C  0100               	movlb	_rgl shr (0+8)
  2257  004D3E  A575               	btfss	_rgl& (0+255),2,b
  2258  004D40  D00C               	goto	l167
  2259                           ;rgl.c: 769: {
  2260  004D42  0E03               	movlw	3
  2261  004D44  EC4E  F036         	call	_Tnizsza
  2262  004D48  A0D8               	btfss	status,0,c
  2263  004D4A  0012               	return	
  2264                           ;rgl.c: 771: {
  2265  004D4C  C26F  F07D         	movff	_PWM+1,_rgl+8
  2266                           ;rgl.c: 773: rgl.srp=0;
  2267  004D50  0100               	movlb	(_rgl+7) shr (0+8)
  2268  004D52  6B7C               	clrf	(_rgl+7)& (0+255),b
  2269                           ;rgl.c: 774: rgl.ytmp=0;
  2270  004D54  6B7B               	clrf	(_rgl+6)& (0+255),b
  2271                           ;rgl.c: 775: rgl.nmod=0;
  2272  004D56  9B75               	bcf	_rgl& (0+255),5,b
  2273                           ;rgl.c: 776: rgl.del1s=0;
  2274  004D58  9D75               	bcf	_rgl& (0+255),6,b
  2275                           ;rgl.c: 777: }
  2276                           ;rgl.c: 778: else return;
  2277  004D5A                     l167:
  2278                           ;rgl.c: 779: }
  2279  004D5A  0E00               	movlw	0
  2280  004D5C  EC5B  F036         	call	_Twyzsza
  2281  004D60  E315               	bnc	l170
  2282  004D62  EC47  F036         	call	_Tstoi	;wreg free
  2283  004D66  E312               	bnc	l170
  2284                           ;rgl.c: 781: {
  2285  004D68  0100               	movlb	_rgl shr (0+8)
  2286  004D6A  8575               	bsf	_rgl& (0+255),2,b
  2287                           ;rgl.c: 783: rgl.fast_up=0;
  2288  004D6C  9975               	bcf	_rgl& (0+255),4,b
  2289                           ;rgl.c: 784: rgl.med_up=0;
  2290  004D6E  9775               	bcf	_rgl& (0+255),3,b
  2291                           ;rgl.c: 785: rgl.srp=PWM.BufPWM;
  2292  004D70  C26F  F07C         	movff	_PWM+1,_rgl+7
  2293                           ;rgl.c: 786: rgl.xmod=PWM.BufPWM;
  2294  004D74  C26F  F07D         	movff	_PWM+1,_rgl+8
  2295                           ;rgl.c: 787: if(rgl.xmod>PWM.MGMOD)
  2296  004D78  C07D  FFE8         	movff	_rgl+8,wreg
  2297  004D7C  0102               	movlb	(_PWM+10) shr (0+8)
  2298  004D7E  6178               	cpfslt	(_PWM+10)& (0+255),b
  2299  004D80  0012               	return	
  2300                           ;rgl.c: 788: {
  2301  004D82  C278  F07C         	movff	_PWM+10,_rgl+7
  2302                           ;rgl.c: 790: rgl.xmod=PWM.MGMOD;
  2303  004D86  C278  F07D         	movff	_PWM+10,_rgl+8
  2304                           ;rgl.c: 791: }
  2305  004D8A  0012               	return	
  2306  004D8C                     l170:
  2307                           ;rgl.c: 793: }
  2308  004D8C  C277  FFE8         	movff	_PWM+9,wreg
  2309  004D90  0100               	movlb	(_rgl+8) shr (0+8)
  2310  004D92  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  2311  004D94  E318               	bnc	l172
  2312  004D96  0E0A               	movlw	10
  2313  004D98  6E02               	movwf	btemp+2,c
  2314  004D9A  6A03               	clrf	btemp+3,c
  2315  004D9C  C277  FFE8         	movff	_PWM+9,wreg
  2316  004DA0  C07D  F000         	movff	_rgl+8,btemp
  2317  004DA4  6A01               	clrf	btemp+1,c
  2318  004DA6  5E00               	subwf	btemp,f,c
  2319  004DA8  0E00               	movlw	0
  2320  004DAA  5A01               	subwfb	btemp+1,f,c
  2321  004DAC  EC03  F073         	call	awmul
  2322  004DB0  0100               	movlb	__Lparam shr (0+8)
  2323  004DB2  C004  F0D7         	movff	btemp+4,?a_ModZgCW
  2324  004DB6  C005  F0D8         	movff	btemp+5,?a_ModZgCW+1
  2325  004DBA  0E00               	movlw	0
  2326  004DBC  BFD8               	btfsc	(?a_ModZgCW+1)^(__Lparam& (0+65280)),7,b
  2327  004DBE  0EFF               	movlw	-1
  2328  004DC0  6FD9               	movwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2329  004DC2  6FDA               	movwf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2330  004DC4  D005               	goto	l173
  2331  004DC6                     l172:
  2332                           ;rgl.c: 795: else m=0;
  2333  004DC6  0100               	movlb	__Lparam shr (0+8)
  2334  004DC8  6BD7               	clrf	?a_ModZgCW^(__Lparam& (0+65280)),b
  2335  004DCA  6BD8               	clrf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),b
  2336  004DCC  6BD9               	clrf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2337  004DCE  6BDA               	clrf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2338  004DD0                     l173:
  2339                           ;rgl.c: 796: m=m/(DtCW.MAD_CW-DtCW.DAD_CW);
  2340  004DD0  C229  FFE8         	movff	_DtCW+14,wreg
  2341  004DD4  C228  F000         	movff	_DtCW+13,btemp
  2342  004DD8  5C00               	subwf	btemp,w,c
  2343  004DDA  6E04               	movwf	btemp+4,c
  2344  004DDC  6A05               	clrf	btemp+5,c
  2345  004DDE  A0D8               	btfss	status,0,c
  2346  004DE0  0605               	decf	btemp+5,f,c
  2347  004DE2  6A06               	clrf	btemp+6,c
  2348  004DE4  BE05               	btfsc	btemp+5,7,c
  2349  004DE6  0606               	decf	btemp+6,f,c
  2350  004DE8  5006               	movf	btemp+6,w,c
  2351  004DEA  6E07               	movwf	btemp+7,c
  2352  004DEC  0ED7               	movlw	low ?a_ModZgCW
  2353  004DEE  6EE9               	movwf	fsr0l,c
  2354  004DF0  0E00               	movlw	high ?a_ModZgCW
  2355  004DF2  6EEA               	movwf	fsr0h,c
  2356  004DF4  EC36  F073         	call	aldiv_f
  2357                           ;rgl.c: 797: m=m*(DtCW.AC_CW-DtCW.DAD_CW);
  2358  004DF8  C229  FFE8         	movff	_DtCW+14,wreg
  2359  004DFC  C227  F000         	movff	_DtCW+12,btemp
  2360  004E00  5C00               	subwf	btemp,w,c
  2361  004E02  6E04               	movwf	btemp+4,c
  2362  004E04  6A05               	clrf	btemp+5,c
  2363  004E06  A0D8               	btfss	status,0,c
  2364  004E08  0605               	decf	btemp+5,f,c
  2365  004E0A  6A06               	clrf	btemp+6,c
  2366  004E0C  BE05               	btfsc	btemp+5,7,c
  2367  004E0E  0606               	decf	btemp+6,f,c
  2368  004E10  5006               	movf	btemp+6,w,c
  2369  004E12  6E07               	movwf	btemp+7,c
  2370  004E14  0ED7               	movlw	low ?a_ModZgCW
  2371  004E16  6EE9               	movwf	fsr0l,c
  2372  004E18  0E00               	movlw	high ?a_ModZgCW
  2373  004E1A  6EEA               	movwf	fsr0h,c
  2374  004E1C  EC2C  F073         	call	almul_f
  2375                           ;rgl.c: 798: if(m<0) m=0;
  2376  004E20  0100               	movlb	__Lparam shr (0+8)
  2377  004E22  AFDA               	btfss	(?a_ModZgCW+3)^(__Lparam& (0+65280)),7,b
  2378  004E24  D004               	goto	l174
  2379  004E26  6BD7               	clrf	?a_ModZgCW^(__Lparam& (0+65280)),b
  2380  004E28  6BD8               	clrf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),b
  2381  004E2A  6BD9               	clrf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2382  004E2C  6BDA               	clrf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2383  004E2E                     l174:
  2384                           ;rgl.c: 799: m=m/10+PWM.MDMOD;
  2385  004E2E  0E0A               	movlw	10
  2386  004E30  6E04               	movwf	btemp+4,c
  2387  004E32  6A05               	clrf	btemp+5,c
  2388  004E34  6A06               	clrf	btemp+6,c
  2389  004E36  6A07               	clrf	btemp+7,c
  2390  004E38  C0D7  F000         	movff	?a_ModZgCW,btemp
  2391  004E3C  C0D8  F001         	movff	?a_ModZgCW+1,btemp+1
  2392  004E40  C0D9  F002         	movff	?a_ModZgCW+2,btemp+2
  2393  004E44  C0DA  F003         	movff	?a_ModZgCW+3,btemp+3
  2394  004E48  EC93  F072         	call	aldiv
  2395  004E4C  C277  FFE8         	movff	_PWM+9,wreg
  2396  004E50  2400               	addwf	btemp,w,c
  2397  004E52  0100               	movlb	__Lparam shr (0+8)
  2398  004E54  6FD7               	movwf	?a_ModZgCW^(__Lparam& (0+65280)),b
  2399  004E56  0E00               	movlw	0
  2400  004E58  2001               	addwfc	btemp+1,w,c
  2401  004E5A  6FD8               	movwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),b
  2402  004E5C  0E00               	movlw	0
  2403  004E5E  2002               	addwfc	btemp+2,w,c
  2404  004E60  6FD9               	movwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2405  004E62  0E00               	movlw	0
  2406  004E64  2003               	addwfc	btemp+3,w,c
  2407  004E66  6FDA               	movwf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2408                           ;rgl.c: 800: if(m>0xff)
  2409  004E68  51DA               	movf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),w
  2410  004E6A  0A80               	xorlw	128
  2411  004E6C  0F80               	addlw	128
  2412  004E6E  E108               	bnz	u1245
  2413  004E70  0E00               	movlw	0
  2414  004E72  5DD9               	subwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),w
  2415  004E74  E105               	bnz	u1245
  2416  004E76  0E01               	movlw	1
  2417  004E78  5DD8               	subwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),w
  2418  004E7A  E102               	bnz	u1245
  2419  004E7C  0E00               	movlw	0
  2420  004E7E  5DD7               	subwf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2421  004E80                     u1245:
  2422                           ;rgl.c: 801: {
  2423  004E80  0100               	movlb	_rgl shr (0+8)
  2424  004E82  E304               	bnc	L18
  2425  004E84  9575               	bcf	_rgl& (0+255),2,b
  2426                           ;rgl.c: 803: rgl.tmp_pwm=rgl.xmod;
  2427  004E86  C07D  F07E         	movff	_rgl+8,_rgl+9
  2428                           ;rgl.c: 804: return;
  2429  004E8A  0012               	return	
  2430                           ;rgl.c: 805: }
  2431  004E8C                     L18:
  2432  004E8C  A575               	btfss	_rgl& (0+255),2,b
  2433  004E8E  D01C               	goto	l176
  2434  004E90  C07D  F000         	movff	_rgl+8,btemp
  2435  004E94  6A01               	clrf	btemp+1,c
  2436  004E96  6A02               	clrf	btemp+2,c
  2437  004E98  6A03               	clrf	btemp+3,c
  2438  004E9A  0100               	movlb	__Lparam shr (0+8)
  2439  004E9C  51DA               	movf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),w
  2440  004E9E  0A80               	xorlw	128
  2441  004EA0  6E04               	movwf	btemp+4,c
  2442  004EA2  5003               	movf	btemp+3,w,c
  2443  004EA4  0A80               	xorlw	128
  2444  004EA6  5C04               	subwf	btemp+4,w,c
  2445  004EA8  E108               	bnz	u1265
  2446  004EAA  5002               	movf	btemp+2,w,c
  2447  004EAC  5DD9               	subwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),w
  2448  004EAE  E105               	bnz	u1265
  2449  004EB0  5001               	movf	btemp+1,w,c
  2450  004EB2  5DD8               	subwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),w
  2451  004EB4  E102               	bnz	u1265
  2452  004EB6  5000               	movf	btemp,w,c
  2453  004EB8  5DD7               	subwf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2454  004EBA                     u1265:
  2455  004EBA  E206               	bc	l176
  2456                           ;rgl.c: 807: rgl.srp=(rgl.xmod-m);
  2457  004EBC  0100               	movlb	__Lparam shr (0+8)
  2458  004EBE  51D7               	movf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2459  004EC0  0100               	movlb	(_rgl+8) shr (0+8)
  2460  004EC2  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  2461  004EC4  CFE8 F07C          	movff	wreg,_rgl+7
  2462  004EC8                     l176:
  2463                           ;rgl.c: 808: m+=rgl.srp;
  2464  004EC8  C07C  FFE8         	movff	_rgl+7,wreg
  2465  004ECC  0100               	movlb	__Lparam shr (0+8)
  2466  004ECE  27D7               	addwf	?a_ModZgCW^(__Lparam& (0+65280)),f,b
  2467  004ED0  0E01               	movlw	1
  2468  004ED2  B0D8               	btfsc	status,0,c
  2469  004ED4  27D8               	addwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),f,b
  2470  004ED6  B0D8               	btfsc	status,0,c
  2471  004ED8  27D9               	addwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),f,b
  2472  004EDA  B0D8               	btfsc	status,0,c
  2473  004EDC  27DA               	addwf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),f,b
  2474                           ;rgl.c: 809: if(m>rgl.xmod) p=rgl.xmod;
  2475  004EDE  C07D  F000         	movff	_rgl+8,btemp
  2476  004EE2  6A01               	clrf	btemp+1,c
  2477  004EE4  6A02               	clrf	btemp+2,c
  2478  004EE6  6A03               	clrf	btemp+3,c
  2479  004EE8  5003               	movf	btemp+3,w,c
  2480  004EEA  0A80               	xorlw	128
  2481  004EEC  6E04               	movwf	btemp+4,c
  2482  004EEE  51DA               	movf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),w
  2483  004EF0  0A80               	xorlw	128
  2484  004EF2  5C04               	subwf	btemp+4,w,c
  2485  004EF4  E108               	bnz	u1285
  2486  004EF6  51D9               	movf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),w
  2487  004EF8  5C02               	subwf	btemp+2,w,c
  2488  004EFA  E105               	bnz	u1285
  2489  004EFC  51D8               	movf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),w
  2490  004EFE  5C01               	subwf	btemp+1,w,c
  2491  004F00  E102               	bnz	u1285
  2492  004F02  51D7               	movf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2493  004F04  5C00               	subwf	btemp,w,c
  2494  004F06                     u1285:
  2495  004F06  E203               	bc	l177
  2496  004F08  C07D  FFD9         	movff	_rgl+8,fsr2l
  2497  004F0C  D003               	goto	l178
  2498  004F0E                     l177:
  2499                           ;rgl.c: 810: else p=m;
  2500  004F0E  0100               	movlb	__Lparam shr (0+8)
  2501  004F10  51D7               	movf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2502  004F12  6ED9               	movwf	fsr2l,c
  2503  004F14                     l178:
  2504                           ;rgl.c: 811: rgl.fz=0;
  2505  004F14  0100               	movlb	_rgl shr (0+8)
  2506  004F16  9575               	bcf	_rgl& (0+255),2,b
  2507                           ;rgl.c: 812: rgl.tmp_pwm=p;
  2508  004F18  CFD9 F07E          	movff	fsr2l,_rgl+9
  2509                           ;rgl.c: 813: }
  2510  004F1C  0012               	return	
  2511  004F1E                     __end_of_ModZgCW:
  2512                           ;rgl.c: 816: void ModDkCW(void)
  2513                           ;rgl.c: 817: {
  2514  004F1E                     _ModDkCW:
  2515  000000                     
  2516                           ;rgl.c: 818: signed long m;
  2517  004F1E  0100               	movlb	_rgl shr (0+8)
  2518  004F20  A575               	btfss	_rgl& (0+255),2,b
  2519  004F22  0012               	return	
  2520                           ;rgl.c: 823: ada=DtCW.AC_CW-DtCW.DAD_CW;
  2521  004F24  C229  FFE8         	movff	_DtCW+14,wreg
  2522  004F28  0102               	movlb	(_DtCW+12) shr (0+8)
  2523  004F2A  5D27               	subwf	(_DtCW+12)& (0+255),w,b
  2524  004F2C  0100               	movlb	__Lparam shr (0+8)
  2525  004F2E  6FD7               	movwf	?a_ModDkCW^(__Lparam& (0+65280)),b
  2526                           ;rgl.c: 824: k=1;
  2527  004F30  0E01               	movlw	1
  2528  004F32  6FD8               	movwf	(?a_ModDkCW+1)^(__Lparam& (0+65280)),b
  2529                           ;rgl.c: 825: if(Trowna()) return;
  2530  004F34  EC76  F036         	call	_Trowna	;wreg free
  2531  004F38  B0D8               	btfsc	status,0,c
  2532  004F3A  0012               	return	
  2533                           ;rgl.c: 826: if(Tnizsza(0))
  2534  004F3C  0E00               	movlw	0
  2535  004F3E  EC4E  F036         	call	_Tnizsza
  2536  004F42  E303               	bnc	l182
  2537                           ;rgl.c: 827: {
  2538  004F44  0E02               	movlw	2
  2539  004F46  0100               	movlb	__Lparam shr (0+8)
  2540  004F48  6FD8               	movwf	(?a_ModDkCW+1)^(__Lparam& (0+65280)),b
  2541  004F4A                     l182:
  2542                           ;rgl.c: 834: }
  2543  004F4A  C0D7  F002         	movff	?a_ModDkCW,btemp+2
  2544  004F4E  6A03               	clrf	btemp+3,c
  2545  004F50  BE02               	btfsc	btemp+2,7,c
  2546  004F52  0603               	decf	btemp+3,f,c
  2547  004F54  C0D8  F000         	movff	?a_ModDkCW+1,btemp
  2548  004F58  6A01               	clrf	btemp+1,c
  2549  004F5A  EC03  F073         	call	awmul
  2550  004F5E  C07C  FFE8         	movff	_rgl+7,wreg
  2551  004F62  2404               	addwf	btemp+4,w,c
  2552  004F64  6E00               	movwf	btemp,c
  2553  004F66  0E00               	movlw	0
  2554  004F68  2005               	addwfc	btemp+5,w,c
  2555  004F6A  6E01               	movwf	btemp+1,c
  2556  004F6C  0100               	movlb	__Lparam shr (0+8)
  2557  004F6E  C000  F0D9         	movff	btemp,?a_ModDkCW+2
  2558  004F72  C001  F0DA         	movff	btemp+1,?a_ModDkCW+3
  2559  004F76  0E00               	movlw	0
  2560  004F78  BFDA               	btfsc	(?a_ModDkCW+3)^(__Lparam& (0+65280)),7,b
  2561  004F7A  0EFF               	movlw	-1
  2562  004F7C  6FDB               	movwf	(?a_ModDkCW+4)^(__Lparam& (0+65280)),b
  2563  004F7E  6FDC               	movwf	(?a_ModDkCW+5)^(__Lparam& (0+65280)),b
  2564                           ;rgl.c: 844: if(m>rgl.xmod) p=rgl.xmod;
  2565  004F80  C07D  F000         	movff	_rgl+8,btemp
  2566  004F84  6A01               	clrf	btemp+1,c
  2567  004F86  6A02               	clrf	btemp+2,c
  2568  004F88  6A03               	clrf	btemp+3,c
  2569  004F8A  5003               	movf	btemp+3,w,c
  2570  004F8C  0A80               	xorlw	128
  2571  004F8E  6E04               	movwf	btemp+4,c
  2572  004F90  51DC               	movf	(?a_ModDkCW+5)^(__Lparam& (0+65280)),w
  2573  004F92  0A80               	xorlw	128
  2574  004F94  5C04               	subwf	btemp+4,w,c
  2575  004F96  E108               	bnz	u1325
  2576  004F98  51DB               	movf	(?a_ModDkCW+4)^(__Lparam& (0+65280)),w
  2577  004F9A  5C02               	subwf	btemp+2,w,c
  2578  004F9C  E105               	bnz	u1325
  2579  004F9E  51DA               	movf	(?a_ModDkCW+3)^(__Lparam& (0+65280)),w
  2580  004FA0  5C01               	subwf	btemp+1,w,c
  2581  004FA2  E102               	bnz	u1325
  2582  004FA4  51D9               	movf	(?a_ModDkCW+2)^(__Lparam& (0+65280)),w
  2583  004FA6  5C00               	subwf	btemp,w,c
  2584  004FA8                     u1325:
  2585  004FA8  E203               	bc	l183
  2586  004FAA  C07D  FFD9         	movff	_rgl+8,fsr2l
  2587  004FAE  D01C               	goto	l184
  2588  004FB0                     l183:
  2589                           ;rgl.c: 845: else
  2590  004FB0  C277  F000         	movff	_PWM+9,btemp
  2591  004FB4  6A01               	clrf	btemp+1,c
  2592  004FB6  6A02               	clrf	btemp+2,c
  2593  004FB8  6A03               	clrf	btemp+3,c
  2594  004FBA  0100               	movlb	__Lparam shr (0+8)
  2595  004FBC  51DC               	movf	(?a_ModDkCW+5)^(__Lparam& (0+65280)),w
  2596  004FBE  0A80               	xorlw	128
  2597  004FC0  6E04               	movwf	btemp+4,c
  2598  004FC2  5003               	movf	btemp+3,w,c
  2599  004FC4  0A80               	xorlw	128
  2600  004FC6  5C04               	subwf	btemp+4,w,c
  2601  004FC8  E108               	bnz	u1335
  2602  004FCA  5002               	movf	btemp+2,w,c
  2603  004FCC  5DDB               	subwf	(?a_ModDkCW+4)^(__Lparam& (0+65280)),w
  2604  004FCE  E105               	bnz	u1335
  2605  004FD0  5001               	movf	btemp+1,w,c
  2606  004FD2  5DDA               	subwf	(?a_ModDkCW+3)^(__Lparam& (0+65280)),w
  2607  004FD4  E102               	bnz	u1335
  2608  004FD6  5000               	movf	btemp,w,c
  2609  004FD8  5DD9               	subwf	(?a_ModDkCW+2)^(__Lparam& (0+65280)),w
  2610  004FDA                     u1335:
  2611  004FDA  E203               	bc	l185
  2612  004FDC  C277  FFD9         	movff	_PWM+9,fsr2l
  2613  004FE0  D003               	goto	l184
  2614  004FE2                     l185:
  2615                           ;rgl.c: 847: else p=m;
  2616  004FE2  0100               	movlb	__Lparam shr (0+8)
  2617  004FE4  51D9               	movf	(?a_ModDkCW+2)^(__Lparam& (0+65280)),w
  2618  004FE6  6ED9               	movwf	fsr2l,c
  2619  004FE8                     l184:
  2620                           ;rgl.c: 848: rgl.tmp_pwm=p;
  2621  004FE8  CFD9 F07E          	movff	fsr2l,_rgl+9
  2622                           ;rgl.c: 849: }
  2623  004FEC  0012               	return	
  2624  004FEE                     __end_of_ModDkCW:
  2625                           ;rgl.c: 854: void ModPruCW(void)
  2626                           ;rgl.c: 855: {
  2627  004FEE                     _ModPruCW:
  2628  000000                     
  2629                           ;rgl.c: 856: static unsigned char l,m,o,p,q,r,s;
  2630  004FEE  0100               	movlb	_rgl shr (0+8)
  2631  004FF0  B575               	btfsc	_rgl& (0+255),2,b
  2632  004FF2  D119               	goto	l188
  2633                           ;rgl.c: 861: {
  2634  004FF4  010E               	movlb	F1739 shr (0+8)
  2635  004FF6  6BD1               	clrf	F1739& (0+255),b
  2636                           ;rgl.c: 863: m=0;
  2637  004FF8  010E               	movlb	F1740 shr (0+8)
  2638  004FFA  6BD2               	clrf	F1740& (0+255),b
  2639                           ;rgl.c: 864: o=0;
  2640  004FFC  010E               	movlb	F1741 shr (0+8)
  2641  004FFE  6BD3               	clrf	F1741& (0+255),b
  2642                           ;rgl.c: 865: p=0;
  2643  005000  010E               	movlb	F1742 shr (0+8)
  2644  005002  6BD4               	clrf	F1742& (0+255),b
  2645                           ;rgl.c: 866: if(q<255) q++;
  2646  005004  CED5  F000         	movff	F1743,btemp
  2647  005008  2800               	incf	btemp,w,c
  2648  00500A  E002               	bz	l189
  2649  00500C  010E               	movlb	F1743 shr (0+8)
  2650  00500E  2BD5               	incf	F1743& (0+255),f,b
  2651  005010                     l189:
  2652                           ;rgl.c: 867: if(s<255) s++;
  2653  005010  CED7  F000         	movff	F1745,btemp
  2654  005014  2800               	incf	btemp,w,c
  2655  005016  E002               	bz	l190
  2656  005018  010E               	movlb	F1745 shr (0+8)
  2657  00501A  2BD7               	incf	F1745& (0+255),f,b
  2658  00501C                     l190:
  2659                           ;rgl.c: 868: if(DtCW._newPCW) s=0;
  2660  00501C  0102               	movlb	(_DtCW+1) shr (0+8)
  2661  00501E  A11C               	btfss	(_DtCW+1)& (0+255),0,b
  2662  005020  D002               	goto	l191
  2663  005022  010E               	movlb	F1745 shr (0+8)
  2664  005024  6BD7               	clrf	F1745& (0+255),b
  2665  005026                     l191:
  2666                           ;rgl.c: 869: if(Tnizsza(0))
  2667  005026  0E00               	movlw	0
  2668  005028  EC4E  F036         	call	_Tnizsza
  2669  00502C  A0D8               	btfss	status,0,c
  2670  00502E  0012               	return	
  2671                           ;rgl.c: 870: {
  2672  005030  0E0A               	movlw	10
  2673  005032  EC4E  F036         	call	_Tnizsza
  2674  005036  B0D8               	btfsc	status,0,c
  2675  005038  0012               	return	
  2676                           ;rgl.c: 872: {
  2677  00503A  0100               	movlb	__Lparam shr (0+8)
  2678  00503C  6BD7               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2679                           ;rgl.c: 874: if(rgl.tmp_pwm>=pwm_center)
  2680  00503E  CEEA  FFE8         	movff	_pwm_center,wreg
  2681  005042  0100               	movlb	(_rgl+9) shr (0+8)
  2682  005044  5D7E               	subwf	(_rgl+9)& (0+255),w,b
  2683  005046  E330               	bnc	l194
  2684                           ;rgl.c: 875: {
  2685  005048  0E05               	movlw	5
  2686  00504A  EC4E  F036         	call	_Tnizsza
  2687  00504E  E30A               	bnc	l195
  2688  005050  EC47  F036         	call	_Tstoi	;wreg free
  2689  005054  E307               	bnc	l195
  2690  005056  0E00               	movlw	0
  2691  005058  010E               	movlb	F1745 shr (0+8)
  2692  00505A  65D7               	cpfsgt	F1745& (0+255),b
  2693  00505C  D003               	goto	l195
  2694                           ;rgl.c: 877: {
  2695  00505E  6BD7               	clrf	F1745& (0+255),b
  2696                           ;rgl.c: 879: k=20;
  2697  005060  0E14               	movlw	20
  2698  005062  D06B               	goto	L9
  2699                           ;rgl.c: 880: }
  2700  005064                     l195:
  2701                           ;rgl.c: 881: else
  2702  005064  0E04               	movlw	4
  2703  005066  EC4E  F036         	call	_Tnizsza
  2704  00506A  E30A               	bnc	l197
  2705  00506C  EC47  F036         	call	_Tstoi	;wreg free
  2706  005070  E307               	bnc	l197
  2707  005072  0E00               	movlw	0
  2708  005074  010E               	movlb	F1745 shr (0+8)
  2709  005076  65D7               	cpfsgt	F1745& (0+255),b
  2710  005078  D003               	goto	l197
  2711                           ;rgl.c: 883: {
  2712  00507A  6BD7               	clrf	F1745& (0+255),b
  2713                           ;rgl.c: 885: k=15;
  2714  00507C  0E0F               	movlw	15
  2715  00507E  D05D               	goto	L9
  2716                           ;rgl.c: 886: }
  2717  005080                     l197:
  2718                           ;rgl.c: 887: else
  2719  005080  0E02               	movlw	2
  2720  005082  EC4E  F036         	call	_Tnizsza
  2721  005086  E308               	bnc	l199
  2722  005088  EC47  F036         	call	_Tstoi	;wreg free
  2723  00508C  E305               	bnc	l199
  2724  00508E  0E00               	movlw	0
  2725  005090  010E               	movlb	F1745 shr (0+8)
  2726  005092  65D7               	cpfsgt	F1745& (0+255),b
  2727  005094  D001               	goto	l199
  2728  005096  D018               	goto	u1640
  2729                           ;rgl.c: 889: {
  2730                           ;rgl.c: 891: k=10;
  2731                           ;rgl.c: 892: }
  2732  005098                     l199:
  2733                           ;rgl.c: 893: else
  2734  005098  EC47  F036         	call	_Tstoi	;wreg free
  2735  00509C  E350               	bnc	l202
  2736  00509E  0E00               	movlw	0
  2737  0050A0  010E               	movlb	F1745 shr (0+8)
  2738  0050A2  65D7               	cpfsgt	F1745& (0+255),b
  2739  0050A4  D04C               	goto	l202
  2740  0050A6  D03C               	goto	u1820
  2741                           ;rgl.c: 895: {
  2742                           ;rgl.c: 897: k=5;
  2743                           ;rgl.c: 898: }
  2744  0050A8                     l194:
  2745                           ;rgl.c: 900: else
  2746  0050A8  CEEB  FFE8         	movff	_pwm_kwr,wreg
  2747  0050AC  0100               	movlb	(_rgl+9) shr (0+8)
  2748  0050AE  5D7E               	subwf	(_rgl+9)& (0+255),w,b
  2749  0050B0  E32C               	bnc	l203
  2750                           ;rgl.c: 903: {
  2751  0050B2  0E05               	movlw	5
  2752  0050B4  EC4E  F036         	call	_Tnizsza
  2753  0050B8  E30B               	bnc	l204
  2754  0050BA  EC47  F036         	call	_Tstoi	;wreg free
  2755  0050BE  E308               	bnc	l204
  2756  0050C0  0E00               	movlw	0
  2757  0050C2  010E               	movlb	F1745 shr (0+8)
  2758  0050C4  65D7               	cpfsgt	F1745& (0+255),b
  2759  0050C6  D004               	goto	l204
  2760  0050C8                     u1640:
  2761                           ;rgl.c: 905: {
  2762  0050C8  010E               	movlb	F1745 shr (0+8)
  2763  0050CA  6BD7               	clrf	F1745& (0+255),b
  2764                           ;rgl.c: 907: k=10;
  2765  0050CC  0E0A               	movlw	10
  2766  0050CE  D035               	goto	L9
  2767                           ;rgl.c: 908: }
  2768  0050D0                     l204:
  2769                           ;rgl.c: 909: else
  2770  0050D0  0E04               	movlw	4
  2771  0050D2  EC4E  F036         	call	_Tnizsza
  2772  0050D6  E30A               	bnc	l206
  2773  0050D8  EC47  F036         	call	_Tstoi	;wreg free
  2774  0050DC  E307               	bnc	l206
  2775  0050DE  0E00               	movlw	0
  2776  0050E0  010E               	movlb	F1745 shr (0+8)
  2777  0050E2  65D7               	cpfsgt	F1745& (0+255),b
  2778  0050E4  D003               	goto	l206
  2779                           ;rgl.c: 911: {
  2780  0050E6  6BD7               	clrf	F1745& (0+255),b
  2781                           ;rgl.c: 913: k=8;
  2782  0050E8  0E08               	movlw	8
  2783  0050EA  D027               	goto	L9
  2784                           ;rgl.c: 914: }
  2785  0050EC                     l206:
  2786                           ;rgl.c: 915: else
  2787  0050EC  0E02               	movlw	2
  2788  0050EE  EC4E  F036         	call	_Tnizsza
  2789  0050F2  E308               	bnc	l208
  2790  0050F4  EC47  F036         	call	_Tstoi	;wreg free
  2791  0050F8  E305               	bnc	l208
  2792  0050FA  0E00               	movlw	0
  2793  0050FC  010E               	movlb	F1745 shr (0+8)
  2794  0050FE  65D7               	cpfsgt	F1745& (0+255),b
  2795  005100  D001               	goto	l208
  2796  005102  D00E               	goto	u1820
  2797                           ;rgl.c: 917: {
  2798                           ;rgl.c: 919: k=5;
  2799                           ;rgl.c: 920: }
  2800  005104                     l208:
  2801                           ;rgl.c: 921: else
  2802  005104  EC47  F036         	call	_Tstoi	;wreg free
  2803  005108  D011               	goto	L10
  2804                           ;rgl.c: 923: {
  2805                           ;rgl.c: 925: k=2;
  2806                           ;rgl.c: 926: }
  2807  00510A                     l203:
  2808                           ;rgl.c: 928: else
  2809  00510A  0E02               	movlw	2
  2810  00510C  EC4E  F036         	call	_Tnizsza
  2811  005110  E30B               	bnc	l212
  2812  005112  EC47  F036         	call	_Tstoi	;wreg free
  2813  005116  E308               	bnc	l212
  2814  005118  0E00               	movlw	0
  2815  00511A  010E               	movlb	F1745 shr (0+8)
  2816  00511C  65D7               	cpfsgt	F1745& (0+255),b
  2817  00511E  D004               	goto	l212
  2818  005120                     u1820:
  2819                           ;rgl.c: 931: {
  2820  005120  010E               	movlb	F1745 shr (0+8)
  2821  005122  6BD7               	clrf	F1745& (0+255),b
  2822                           ;rgl.c: 933: k=5;
  2823  005124  0E05               	movlw	5
  2824  005126  D009               	goto	L9
  2825                           ;rgl.c: 934: }
  2826  005128                     l212:
  2827                           ;rgl.c: 935: else
  2828  005128  EC47  F036         	call	_Tstoi	;wreg free
  2829  00512C                     L10:
  2830  00512C  E308               	bnc	l202
  2831  00512E  0E00               	movlw	0
  2832  005130  010E               	movlb	F1745 shr (0+8)
  2833  005132  65D7               	cpfsgt	F1745& (0+255),b
  2834  005134  D004               	goto	l202
  2835                           ;rgl.c: 937: {
  2836  005136  6BD7               	clrf	F1745& (0+255),b
  2837                           ;rgl.c: 939: k=2;
  2838  005138  0E02               	movlw	2
  2839  00513A                     L9:
  2840  00513A  0100               	movlb	__Lparam shr (0+8)
  2841  00513C  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2842  00513E                     l202:
  2843                           ;rgl.c: 940: }
  2844  00513E  CEEB  FFE8         	movff	_pwm_kwr,wreg
  2845  005142  0100               	movlb	(_rgl+9) shr (0+8)
  2846  005144  5D7E               	subwf	(_rgl+9)& (0+255),w,b
  2847  005146  E316               	bnc	l215
  2848                           ;rgl.c: 944: {
  2849  005148  0E01               	movlw	1
  2850  00514A  EC1F  F036         	call	_Trosnie
  2851  00514E  E310               	bnc	l216
  2852  005150  0E00               	movlw	0
  2853  005152  010E               	movlb	F1745 shr (0+8)
  2854  005154  65D7               	cpfsgt	F1745& (0+255),b
  2855  005156  D00C               	goto	l216
  2856                           ;rgl.c: 946: {
  2857  005158  6BD7               	clrf	F1745& (0+255),b
  2858                           ;rgl.c: 948: k=10;
  2859  00515A  0E0A               	movlw	10
  2860  00515C  0100               	movlb	__Lparam shr (0+8)
  2861  00515E  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2862                           ;rgl.c: 949: if(Trosnie(2)) k=8;
  2863  005160  0E02               	movlw	2
  2864  005162  EC1F  F036         	call	_Trosnie
  2865  005166  E306               	bnc	l215
  2866  005168  0E08               	movlw	8
  2867  00516A  0100               	movlb	__Lparam shr (0+8)
  2868  00516C  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2869                           ;rgl.c: 950: }
  2870  00516E  D002               	goto	l215
  2871  005170                     l216:
  2872                           ;rgl.c: 951: else
  2873  005170  0100               	movlb	(_rgl+6) shr (0+8)
  2874  005172  6B7B               	clrf	(_rgl+6)& (0+255),b
  2875  005174                     l215:
  2876                           ;rgl.c: 953: }
  2877  005174  C26F  FFE8         	movff	_PWM+1,wreg
  2878  005178  0100               	movlb	(_rgl+8) shr (0+8)
  2879  00517A  617D               	cpfslt	(_rgl+8)& (0+255),b
  2880  00517C  D001               	goto	l219
  2881  00517E  0012               	return	
  2882  005180                     l219:
  2883                           ;rgl.c: 955: tmp=rgl.xmod-PWM.BufPWM;
  2884  005180  C26F  FFE8         	movff	_PWM+1,wreg
  2885  005184  0100               	movlb	(_rgl+8) shr (0+8)
  2886  005186  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  2887  005188  6ED9               	movwf	fsr2l,c
  2888                           ;rgl.c: 956: if(k>tmp) k=tmp;
  2889  00518A  50D9               	movf	fsr2l,w,c
  2890  00518C  0100               	movlb	__Lparam shr (0+8)
  2891  00518E  94D8               	bcf	status,2,c
  2892  005190  90D8               	bcf	status,0,c
  2893  005192  AFD7               	btfss	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  2894  005194  5DD7               	subwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2895  005196  B4D8               	btfsc	status,2,c
  2896  005198  90D8               	bcf	status,0,c
  2897  00519A  E302               	bnc	l220
  2898  00519C  50D9               	movf	fsr2l,w,c
  2899  00519E  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2900  0051A0                     l220:
  2901                           ;rgl.c: 957: if(PWM.MMAXCW>PWM.MGMOD)
  2902  0051A0  C28C  FFE8         	movff	_PWM+30,wreg
  2903  0051A4  0102               	movlb	(_PWM+10) shr (0+8)
  2904  0051A6  6178               	cpfslt	(_PWM+10)& (0+255),b
  2905  0051A8  D01F               	goto	l221
  2906                           ;rgl.c: 958: {
  2907  0051AA  C07C  FFE8         	movff	_rgl+7,wreg
  2908  0051AE  0100               	movlb	__Lparam shr (0+8)
  2909  0051B0  25D7               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2910  0051B2  6E02               	movwf	btemp+2,c
  2911  0051B4  6A03               	clrf	btemp+3,c
  2912  0051B6  B0D8               	btfsc	status,0,c
  2913  0051B8  2A03               	incf	btemp+3,f,c
  2914  0051BA  BFD7               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  2915  0051BC  0603               	decf	btemp+3,f,c
  2916  0051BE  C278  F000         	movff	_PWM+10,btemp
  2917  0051C2  6A01               	clrf	btemp+1,c
  2918  0051C4  5001               	movf	btemp+1,w,c
  2919  0051C6  0A80               	xorlw	128
  2920  0051C8  6E04               	movwf	btemp+4,c
  2921  0051CA  5003               	movf	btemp+3,w,c
  2922  0051CC  0A80               	xorlw	128
  2923  0051CE  5C04               	subwf	btemp+4,w,c
  2924  0051D0  E102               	bnz	u1945
  2925  0051D2  5002               	movf	btemp+2,w,c
  2926  0051D4  5C00               	subwf	btemp,w,c
  2927  0051D6                     u1945:
  2928  0051D6  E203               	bc	l222
  2929  0051D8  C278  F07C         	movff	_PWM+10,_rgl+7
  2930  0051DC  0012               	return	
  2931  0051DE                     l222:
  2932                           ;rgl.c: 960: else rgl.srp+=k;
  2933  0051DE  0100               	movlb	__Lparam shr (0+8)
  2934  0051E0  51D7               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2935  0051E2  0100               	movlb	(_rgl+7) shr (0+8)
  2936  0051E4  277C               	addwf	(_rgl+7)& (0+255),f,b
  2937                           ;rgl.c: 961: }
  2938  0051E6  0012               	return	
  2939  0051E8                     l221:
  2940                           ;rgl.c: 962: else
  2941  0051E8  C07C  FFE8         	movff	_rgl+7,wreg
  2942  0051EC  0100               	movlb	__Lparam shr (0+8)
  2943  0051EE  25D7               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2944  0051F0  6E02               	movwf	btemp+2,c
  2945  0051F2  6A03               	clrf	btemp+3,c
  2946  0051F4  B0D8               	btfsc	status,0,c
  2947  0051F6  2A03               	incf	btemp+3,f,c
  2948  0051F8  BFD7               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  2949  0051FA  0603               	decf	btemp+3,f,c
  2950  0051FC  C28C  F000         	movff	_PWM+30,btemp
  2951  005200  6A01               	clrf	btemp+1,c
  2952  005202  5001               	movf	btemp+1,w,c
  2953  005204  0A80               	xorlw	128
  2954  005206  6E04               	movwf	btemp+4,c
  2955  005208  5003               	movf	btemp+3,w,c
  2956  00520A  0A80               	xorlw	128
  2957  00520C  5C04               	subwf	btemp+4,w,c
  2958  00520E  E102               	bnz	u1955
  2959  005210  5002               	movf	btemp+2,w,c
  2960  005212  5C00               	subwf	btemp,w,c
  2961  005214                     u1955:
  2962  005214  E203               	bc	l225
  2963  005216  C28C  F07C         	movff	_PWM+30,_rgl+7
  2964  00521A  0012               	return	
  2965  00521C                     l225:
  2966                           ;rgl.c: 965: else rgl.srp+=k;
  2967  00521C  0100               	movlb	__Lparam shr (0+8)
  2968  00521E  51D7               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2969  005220  0100               	movlb	(_rgl+7) shr (0+8)
  2970  005222  277C               	addwf	(_rgl+7)& (0+255),f,b
  2971                           ;rgl.c: 966: }
  2972  005224  0012               	return	
  2973                           ;rgl.c: 969: else return;
  2974                           ;rgl.c: 971: else return;
  2975  005226                     l188:
  2976                           ;rgl.c: 973: else
  2977  005226  010E               	movlb	F1743 shr (0+8)
  2978  005228  6BD5               	clrf	F1743& (0+255),b
  2979                           ;rgl.c: 976: r=0;
  2980  00522A  010E               	movlb	F1744 shr (0+8)
  2981  00522C  6BD6               	clrf	F1744& (0+255),b
  2982                           ;rgl.c: 977: s=0;
  2983  00522E  010E               	movlb	F1745 shr (0+8)
  2984  005230  6BD7               	clrf	F1745& (0+255),b
  2985                           ;rgl.c: 978: if(m<255) m++;
  2986  005232  CED2  F000         	movff	F1740,btemp
  2987  005236  2800               	incf	btemp,w,c
  2988  005238  E002               	bz	l230
  2989  00523A  010E               	movlb	F1740 shr (0+8)
  2990  00523C  2BD2               	incf	F1740& (0+255),f,b
  2991  00523E                     l230:
  2992                           ;rgl.c: 979: if(p<255) p++;
  2993  00523E  CED4  F000         	movff	F1742,btemp
  2994  005242  2800               	incf	btemp,w,c
  2995  005244  E002               	bz	l231
  2996  005246  010E               	movlb	F1742 shr (0+8)
  2997  005248  2BD4               	incf	F1742& (0+255),f,b
  2998  00524A                     l231:
  2999                           ;rgl.c: 980: if(o<255) o++;
  3000  00524A  CED3  F000         	movff	F1741,btemp
  3001  00524E  2800               	incf	btemp,w,c
  3002  005250  E002               	bz	l232
  3003  005252  010E               	movlb	F1741 shr (0+8)
  3004  005254  2BD3               	incf	F1741& (0+255),f,b
  3005  005256                     l232:
  3006                           ;rgl.c: 981: if(DtCW.DAD_CW>DtCW.AC_CW)
  3007  005256  C229  FFE8         	movff	_DtCW+14,wreg
  3008  00525A  0102               	movlb	(_DtCW+12) shr (0+8)
  3009  00525C  6127               	cpfslt	(_DtCW+12)& (0+255),b
  3010  00525E  D06C               	goto	l233
  3011                           ;rgl.c: 982: {
  3012  005260  0100               	movlb	__Lparam shr (0+8)
  3013  005262  6BD7               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3014                           ;rgl.c: 984: if(Trosnie(0)&&m>=2)
  3015  005264  0E00               	movlw	0
  3016  005266  EC1F  F036         	call	_Trosnie
  3017  00526A  E310               	bnc	l234
  3018  00526C  0E01               	movlw	1
  3019  00526E  010E               	movlb	F1740 shr (0+8)
  3020  005270  65D2               	cpfsgt	F1740& (0+255),b
  3021  005272  D00C               	goto	l234
  3022                           ;rgl.c: 985: {
  3023  005274  010E               	movlb	F1742 shr (0+8)
  3024  005276  6BD4               	clrf	F1742& (0+255),b
  3025                           ;rgl.c: 987: o=0;
  3026  005278  010E               	movlb	F1741 shr (0+8)
  3027  00527A  6BD3               	clrf	F1741& (0+255),b
  3028                           ;rgl.c: 988: l=0;
  3029  00527C  010E               	movlb	F1739 shr (0+8)
  3030  00527E  6BD1               	clrf	F1739& (0+255),b
  3031                           ;rgl.c: 989: m=0;
  3032  005280  010E               	movlb	F1740 shr (0+8)
  3033  005282  6BD2               	clrf	F1740& (0+255),b
  3034                           ;rgl.c: 990: k=2;
  3035  005284  0E02               	movlw	2
  3036  005286  0100               	movlb	__Lparam shr (0+8)
  3037  005288  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3038                           ;rgl.c: 991: }
  3039  00528A  D01C               	goto	l235
  3040  00528C                     l234:
  3041                           ;rgl.c: 992: else
  3042  00528C  0E01               	movlw	1
  3043  00528E  EC5B  F036         	call	_Twyzsza
  3044  005292  E316               	bnc	l236
  3045                           ;rgl.c: 994: {
  3046  005294  EC47  F036         	call	_Tstoi	;wreg free
  3047  005298  E315               	bnc	l235
  3048                           ;rgl.c: 996: {
  3049  00529A  0E01               	movlw	1
  3050  00529C  010E               	movlb	F1739 shr (0+8)
  3051  00529E  65D1               	cpfsgt	F1739& (0+255),b
  3052  0052A0  D00A               	goto	l238
  3053                           ;rgl.c: 998: {
  3054  0052A2  0100               	movlb	__Lparam shr (0+8)
  3055  0052A4  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3056                           ;rgl.c: 1000: if(Twyzsza(3)) k=2;
  3057  0052A6  0E03               	movlw	3
  3058  0052A8  EC5B  F036         	call	_Twyzsza
  3059  0052AC  E309               	bnc	l236
  3060  0052AE  0E02               	movlw	2
  3061  0052B0  0100               	movlb	__Lparam shr (0+8)
  3062  0052B2  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3063  0052B4  D005               	goto	l236
  3064                           ;rgl.c: 1001: l=0;
  3065                           ;rgl.c: 1002: }
  3066  0052B6                     l238:
  3067                           ;rgl.c: 1003: else
  3068  0052B6  0100               	movlb	__Lparam shr (0+8)
  3069  0052B8  6BD7               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3070                           ;rgl.c: 1006: l++;
  3071  0052BA  010E               	movlb	F1739 shr (0+8)
  3072  0052BC  2BD1               	incf	F1739& (0+255),f,b
  3073                           ;rgl.c: 1007: }
  3074  0052BE  D002               	goto	l235
  3075  0052C0                     l236:
  3076  0052C0  010E               	movlb	F1739 shr (0+8)
  3077  0052C2  6BD1               	clrf	F1739& (0+255),b
  3078  0052C4                     l235:
  3079                           ;rgl.c: 1010: if(PWM.MMAXCW>PWM.MGMOD)
  3080  0052C4  C28C  FFE8         	movff	_PWM+30,wreg
  3081  0052C8  0102               	movlb	(_PWM+10) shr (0+8)
  3082  0052CA  6178               	cpfslt	(_PWM+10)& (0+255),b
  3083  0052CC  D007               	goto	l242
  3084                           ;rgl.c: 1011: {
  3085  0052CE  C07C  FFE8         	movff	_rgl+7,wreg
  3086  0052D2  6178               	cpfslt	(_PWM+10)& (0+255),b
  3087  0052D4  D00A               	goto	l244
  3088  0052D6  C278  F07C         	movff	_PWM+10,_rgl+7
  3089                           ;rgl.c: 1013: }
  3090  0052DA  D007               	goto	l244
  3091  0052DC                     l242:
  3092                           ;rgl.c: 1014: else
  3093  0052DC  C07C  FFE8         	movff	_rgl+7,wreg
  3094  0052E0  0102               	movlb	(_PWM+30) shr (0+8)
  3095  0052E2  618C               	cpfslt	(_PWM+30)& (0+255),b
  3096  0052E4  D002               	goto	l244
  3097  0052E6  C28C  F07C         	movff	_PWM+30,_rgl+7
  3098  0052EA                     l244:
  3099                           ;rgl.c: 1017: }
  3100  0052EA  C277  F000         	movff	_PWM+9,btemp
  3101  0052EE  6A01               	clrf	btemp+1,c
  3102  0052F0  C07C  F002         	movff	_rgl+7,btemp+2
  3103  0052F4  0100               	movlb	__Lparam shr (0+8)
  3104  0052F6  51D7               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3105  0052F8  5C02               	subwf	btemp+2,w,c
  3106  0052FA  6EF6               	movwf	tblptrl,c
  3107  0052FC  6AF7               	clrf	tblptrh,c
  3108  0052FE  B0D8               	btfsc	status,0,c
  3109  005300  2AF7               	incf	tblptrh,f,c
  3110  005302  AFD7               	btfss	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  3111  005304  06F7               	decf	tblptrh,f,c
  3112  005306  50F7               	movf	tblptrh,w,c
  3113  005308  0A80               	xorlw	128
  3114  00530A  6E02               	movwf	btemp+2,c
  3115  00530C  5001               	movf	btemp+1,w,c
  3116  00530E  0A80               	xorlw	128
  3117  005310  5C02               	subwf	btemp+2,w,c
  3118  005312  E102               	bnz	u2105
  3119  005314  5000               	movf	btemp,w,c
  3120  005316  5CF6               	subwf	tblptrl,w,c
  3121  005318                     u2105:
  3122  005318  E203               	bc	l246
  3123  00531A  C277  F07C         	movff	_PWM+9,_rgl+7
  3124  00531E  D004               	goto	l247
  3125  005320                     l246:
  3126                           ;rgl.c: 1019: else rgl.srp-=k;
  3127  005320  0100               	movlb	__Lparam shr (0+8)
  3128  005322  51D7               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3129  005324  0100               	movlb	(_rgl+7) shr (0+8)
  3130  005326  5F7C               	subwf	(_rgl+7)& (0+255),f,b
  3131  005328                     l247:
  3132                           ;rgl.c: 1022: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  3133  005328  C07C  FFE8         	movff	_rgl+7,wreg
  3134  00532C  0100               	movlb	(_rgl+8) shr (0+8)
  3135  00532E  617D               	cpfslt	(_rgl+8)& (0+255),b
  3136  005330  0012               	return	
  3137  005332  C07C  F07D         	movff	_rgl+7,_rgl+8
  3138                           ;rgl.c: 1023: return;
  3139  005336  0012               	return	
  3140  005338                     l233:
  3141                           ;rgl.c: 1025: else
  3142  005338  0100               	movlb	__Lparam shr (0+8)
  3143  00533A  6BD7               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3144                           ;rgl.c: 1028: if(Tmaleje(0)&&m>=2)
  3145  00533C  0E00               	movlw	0
  3146  00533E  EC2C  F036         	call	_Tmaleje
  3147  005342  E310               	bnc	l250
  3148  005344  0E01               	movlw	1
  3149  005346  010E               	movlb	F1740 shr (0+8)
  3150  005348  65D2               	cpfsgt	F1740& (0+255),b
  3151  00534A  D00C               	goto	l250
  3152                           ;rgl.c: 1029: {
  3153  00534C  010E               	movlb	F1742 shr (0+8)
  3154  00534E  6BD4               	clrf	F1742& (0+255),b
  3155                           ;rgl.c: 1031: o=0;
  3156  005350  010E               	movlb	F1741 shr (0+8)
  3157  005352  6BD3               	clrf	F1741& (0+255),b
  3158                           ;rgl.c: 1032: l=0;
  3159  005354  010E               	movlb	F1739 shr (0+8)
  3160  005356  6BD1               	clrf	F1739& (0+255),b
  3161                           ;rgl.c: 1033: m=0;
  3162  005358  010E               	movlb	F1740 shr (0+8)
  3163  00535A  6BD2               	clrf	F1740& (0+255),b
  3164                           ;rgl.c: 1034: k=5;
  3165  00535C  0E05               	movlw	5
  3166  00535E  0100               	movlb	__Lparam shr (0+8)
  3167  005360  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3168                           ;rgl.c: 1036: }
  3169  005362  D015               	goto	l251
  3170  005364                     l250:
  3171                           ;rgl.c: 1037: else
  3172  005364  0E01               	movlw	1
  3173  005366  EC4E  F036         	call	_Tnizsza
  3174  00536A  E30F               	bnc	l252
  3175                           ;rgl.c: 1039: {
  3176  00536C  EC47  F036         	call	_Tstoi	;wreg free
  3177  005370  E30E               	bnc	l251
  3178                           ;rgl.c: 1041: {
  3179  005372  0E02               	movlw	2
  3180  005374  010E               	movlb	F1739 shr (0+8)
  3181  005376  65D1               	cpfsgt	F1739& (0+255),b
  3182  005378  D003               	goto	l254
  3183                           ;rgl.c: 1043: {
  3184  00537A  0100               	movlb	__Lparam shr (0+8)
  3185  00537C  6FD7               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3186  00537E  D005               	goto	l252
  3187                           ;rgl.c: 1045: l=0;
  3188                           ;rgl.c: 1046: }
  3189  005380                     l254:
  3190                           ;rgl.c: 1047: else
  3191  005380  0100               	movlb	__Lparam shr (0+8)
  3192  005382  6BD7               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3193                           ;rgl.c: 1050: l++;
  3194  005384  010E               	movlb	F1739 shr (0+8)
  3195  005386  2BD1               	incf	F1739& (0+255),f,b
  3196                           ;rgl.c: 1051: }
  3197  005388  D002               	goto	l251
  3198  00538A                     l252:
  3199  00538A  010E               	movlb	F1739 shr (0+8)
  3200  00538C  6BD1               	clrf	F1739& (0+255),b
  3201  00538E                     l251:
  3202                           ;rgl.c: 1054: if(PWM.MMAXCW>PWM.MGMOD)
  3203  00538E  C28C  FFE8         	movff	_PWM+30,wreg
  3204  005392  0102               	movlb	(_PWM+10) shr (0+8)
  3205  005394  6178               	cpfslt	(_PWM+10)& (0+255),b
  3206  005396  D01A               	goto	l257
  3207                           ;rgl.c: 1055: {
  3208  005398  C07C  FFE8         	movff	_rgl+7,wreg
  3209  00539C  0100               	movlb	__Lparam shr (0+8)
  3210  00539E  25D7               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3211  0053A0  6E02               	movwf	btemp+2,c
  3212  0053A2  6A03               	clrf	btemp+3,c
  3213  0053A4  B0D8               	btfsc	status,0,c
  3214  0053A6  2A03               	incf	btemp+3,f,c
  3215  0053A8  BFD7               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  3216  0053AA  0603               	decf	btemp+3,f,c
  3217  0053AC  C278  F000         	movff	_PWM+10,btemp
  3218  0053B0  6A01               	clrf	btemp+1,c
  3219  0053B2  5001               	movf	btemp+1,w,c
  3220  0053B4  0A80               	xorlw	128
  3221  0053B6  6E04               	movwf	btemp+4,c
  3222  0053B8  5003               	movf	btemp+3,w,c
  3223  0053BA  0A80               	xorlw	128
  3224  0053BC  5C04               	subwf	btemp+4,w,c
  3225  0053BE  E102               	bnz	u2195
  3226  0053C0  5002               	movf	btemp+2,w,c
  3227  0053C2  5C00               	subwf	btemp,w,c
  3228  0053C4                     u2195:
  3229  0053C4  E21D               	bc	l261
  3230  0053C6  C278  F07C         	movff	_PWM+10,_rgl+7
  3231  0053CA  D01E               	goto	l260
  3232                           ;rgl.c: 1057: else rgl.srp+=k;
  3233                           ;rgl.c: 1058: }
  3234  0053CC                     l257:
  3235                           ;rgl.c: 1059: else
  3236  0053CC  C07C  FFE8         	movff	_rgl+7,wreg
  3237  0053D0  0100               	movlb	__Lparam shr (0+8)
  3238  0053D2  25D7               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3239  0053D4  6E02               	movwf	btemp+2,c
  3240  0053D6  6A03               	clrf	btemp+3,c
  3241  0053D8  B0D8               	btfsc	status,0,c
  3242  0053DA  2A03               	incf	btemp+3,f,c
  3243  0053DC  BFD7               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  3244  0053DE  0603               	decf	btemp+3,f,c
  3245  0053E0  C28C  F000         	movff	_PWM+30,btemp
  3246  0053E4  6A01               	clrf	btemp+1,c
  3247  0053E6  5001               	movf	btemp+1,w,c
  3248  0053E8  0A80               	xorlw	128
  3249  0053EA  6E04               	movwf	btemp+4,c
  3250  0053EC  5003               	movf	btemp+3,w,c
  3251  0053EE  0A80               	xorlw	128
  3252  0053F0  5C04               	subwf	btemp+4,w,c
  3253  0053F2  E102               	bnz	u2205
  3254  0053F4  5002               	movf	btemp+2,w,c
  3255  0053F6  5C00               	subwf	btemp,w,c
  3256  0053F8                     u2205:
  3257  0053F8  E203               	bc	l261
  3258  0053FA  C28C  F07C         	movff	_PWM+30,_rgl+7
  3259  0053FE  D004               	goto	l260
  3260  005400                     l261:
  3261                           ;rgl.c: 1062: else rgl.srp+=k;
  3262  005400  0100               	movlb	__Lparam shr (0+8)
  3263  005402  51D7               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3264  005404  0100               	movlb	(_rgl+7) shr (0+8)
  3265  005406  277C               	addwf	(_rgl+7)& (0+255),f,b
  3266  005408                     l260:
  3267                           ;rgl.c: 1063: }
  3268  005408  C07C  FFE8         	movff	_rgl+7,wreg
  3269  00540C  0100               	movlb	(_rgl+8) shr (0+8)
  3270  00540E  617D               	cpfslt	(_rgl+8)& (0+255),b
  3271  005410  0012               	return	
  3272  005412  C07C  F07D         	movff	_rgl+7,_rgl+8
  3273                           ;rgl.c: 1065: return;
  3274  005416  0012               	return	
  3275                           ;rgl.c: 1066: }
  3276  005418                     __end_of_ModPruCW:
  3277                           ;rgl.c: 1073: void IncMaxCW(void)
  3278                           ;rgl.c: 1074: {
  3279  005418                     _IncMaxCW:
  3280  000000                     
  3281                           ;rgl.c: 1075: unsigned char k;
  3282  005418  0100               	movlb	_rgl shr (0+8)
  3283  00541A  A575               	btfss	_rgl& (0+255),2,b
  3284  00541C  D014               	goto	l265
  3285                           ;rgl.c: 1080: {
  3286  00541E  C28C  FFE8         	movff	_PWM+30,wreg
  3287  005422  0102               	movlb	(_PWM+10) shr (0+8)
  3288  005424  6178               	cpfslt	(_PWM+10)& (0+255),b
  3289  005426  D007               	goto	l266
  3290                           ;rgl.c: 1082: {
  3291  005428  C07D  FFE8         	movff	_rgl+8,wreg
  3292  00542C  6178               	cpfslt	(_PWM+10)& (0+255),b
  3293  00542E  0012               	return	
  3294  005430  C278  F07D         	movff	_PWM+10,_rgl+8
  3295                           ;rgl.c: 1084: }
  3296  005434  0012               	return	
  3297  005436                     l266:
  3298                           ;rgl.c: 1085: else
  3299  005436  C07D  FFE8         	movff	_rgl+8,wreg
  3300  00543A  0102               	movlb	(_PWM+30) shr (0+8)
  3301  00543C  618C               	cpfslt	(_PWM+30)& (0+255),b
  3302  00543E  0012               	return	
  3303  005440  C28C  F07D         	movff	_PWM+30,_rgl+8
  3304                           ;rgl.c: 1088: }
  3305  005444  0012               	return	
  3306  005446                     l265:
  3307                           ;rgl.c: 1090: }
  3308  005446  0E02               	movlw	2
  3309  005448  EC1F  F036         	call	_Trosnie
  3310  00544C  E33D               	bnc	l270
  3311  00544E  0100               	movlb	_rgl shr (0+8)
  3312  005450  B775               	btfsc	_rgl& (0+255),3,b
  3313  005452  D03A               	goto	l270
  3314                           ;rgl.c: 1094: {
  3315  005454  0100               	movlb	_rgl shr (0+8)
  3316  005456  8775               	bsf	_rgl& (0+255),3,b
  3317                           ;rgl.c: 1096: k=5;
  3318  005458  0E05               	movlw	5
  3319  00545A  6ED9               	movwf	fsr2l,c
  3320                           ;rgl.c: 1097: if(PWM.MMAXCW>PWM.MGMOD)
  3321  00545C  C28C  FFE8         	movff	_PWM+30,wreg
  3322  005460  0102               	movlb	(_PWM+10) shr (0+8)
  3323  005462  6178               	cpfslt	(_PWM+10)& (0+255),b
  3324  005464  D017               	goto	l271
  3325                           ;rgl.c: 1098: {
  3326  005466  0E05               	movlw	5
  3327  005468  C07C  F002         	movff	_rgl+7,btemp+2
  3328  00546C  6A03               	clrf	btemp+3,c
  3329  00546E  2602               	addwf	btemp+2,f,c
  3330  005470  0E00               	movlw	0
  3331  005472  2203               	addwfc	btemp+3,f,c
  3332  005474  C278  F000         	movff	_PWM+10,btemp
  3333  005478  6A01               	clrf	btemp+1,c
  3334  00547A  5001               	movf	btemp+1,w,c
  3335  00547C  0A80               	xorlw	128
  3336  00547E  6E04               	movwf	btemp+4,c
  3337  005480  5003               	movf	btemp+3,w,c
  3338  005482  0A80               	xorlw	128
  3339  005484  5C04               	subwf	btemp+4,w,c
  3340  005486  E102               	bnz	u2305
  3341  005488  5002               	movf	btemp+2,w,c
  3342  00548A  5C00               	subwf	btemp,w,c
  3343  00548C                     u2305:
  3344  00548C  E21A               	bc	l275
  3345  00548E  C278  F07C         	movff	_PWM+10,_rgl+7
  3346  005492  D01A               	goto	l270
  3347                           ;rgl.c: 1100: else rgl.srp+=k;
  3348                           ;rgl.c: 1101: }
  3349  005494                     l271:
  3350                           ;rgl.c: 1102: else
  3351  005494  0E05               	movlw	5
  3352  005496  C07C  F002         	movff	_rgl+7,btemp+2
  3353  00549A  6A03               	clrf	btemp+3,c
  3354  00549C  2602               	addwf	btemp+2,f,c
  3355  00549E  0E00               	movlw	0
  3356  0054A0  2203               	addwfc	btemp+3,f,c
  3357  0054A2  C28C  F000         	movff	_PWM+30,btemp
  3358  0054A6  6A01               	clrf	btemp+1,c
  3359  0054A8  5001               	movf	btemp+1,w,c
  3360  0054AA  0A80               	xorlw	128
  3361  0054AC  6E04               	movwf	btemp+4,c
  3362  0054AE  5003               	movf	btemp+3,w,c
  3363  0054B0  0A80               	xorlw	128
  3364  0054B2  5C04               	subwf	btemp+4,w,c
  3365  0054B4  E102               	bnz	u2315
  3366  0054B6  5002               	movf	btemp+2,w,c
  3367  0054B8  5C00               	subwf	btemp,w,c
  3368  0054BA                     u2315:
  3369  0054BA  E203               	bc	l275
  3370  0054BC  C28C  F07C         	movff	_PWM+30,_rgl+7
  3371  0054C0  D003               	goto	l270
  3372  0054C2                     l275:
  3373                           ;rgl.c: 1105: else rgl.srp+=k;
  3374  0054C2  0100               	movlb	(_rgl+7) shr (0+8)
  3375  0054C4  0E05               	movlw	5
  3376  0054C6  277C               	addwf	(_rgl+7)& (0+255),f,b
  3377  0054C8                     l270:
  3378                           ;rgl.c: 1106: }
  3379  0054C8  0E03               	movlw	3
  3380  0054CA  EC1F  F036         	call	_Trosnie
  3381  0054CE  E33D               	bnc	l277
  3382  0054D0  0100               	movlb	_rgl shr (0+8)
  3383  0054D2  B975               	btfsc	_rgl& (0+255),4,b
  3384  0054D4  D03A               	goto	l277
  3385                           ;rgl.c: 1109: {
  3386  0054D6  0100               	movlb	_rgl shr (0+8)
  3387  0054D8  8975               	bsf	_rgl& (0+255),4,b
  3388                           ;rgl.c: 1111: k=8;
  3389  0054DA  0E08               	movlw	8
  3390  0054DC  6ED9               	movwf	fsr2l,c
  3391                           ;rgl.c: 1112: if(PWM.MMAXCW>PWM.MGMOD)
  3392  0054DE  C28C  FFE8         	movff	_PWM+30,wreg
  3393  0054E2  0102               	movlb	(_PWM+10) shr (0+8)
  3394  0054E4  6178               	cpfslt	(_PWM+10)& (0+255),b
  3395  0054E6  D017               	goto	l278
  3396                           ;rgl.c: 1113: {
  3397  0054E8  0E08               	movlw	8
  3398  0054EA  C07C  F002         	movff	_rgl+7,btemp+2
  3399  0054EE  6A03               	clrf	btemp+3,c
  3400  0054F0  2602               	addwf	btemp+2,f,c
  3401  0054F2  0E00               	movlw	0
  3402  0054F4  2203               	addwfc	btemp+3,f,c
  3403  0054F6  C278  F000         	movff	_PWM+10,btemp
  3404  0054FA  6A01               	clrf	btemp+1,c
  3405  0054FC  5001               	movf	btemp+1,w,c
  3406  0054FE  0A80               	xorlw	128
  3407  005500  6E04               	movwf	btemp+4,c
  3408  005502  5003               	movf	btemp+3,w,c
  3409  005504  0A80               	xorlw	128
  3410  005506  5C04               	subwf	btemp+4,w,c
  3411  005508  E102               	bnz	u2365
  3412  00550A  5002               	movf	btemp+2,w,c
  3413  00550C  5C00               	subwf	btemp,w,c
  3414  00550E                     u2365:
  3415  00550E  E21A               	bc	l282
  3416  005510  C278  F07C         	movff	_PWM+10,_rgl+7
  3417  005514  D01A               	goto	l277
  3418                           ;rgl.c: 1115: else rgl.srp+=k;
  3419                           ;rgl.c: 1116: }
  3420  005516                     l278:
  3421                           ;rgl.c: 1117: else
  3422  005516  0E08               	movlw	8
  3423  005518  C07C  F002         	movff	_rgl+7,btemp+2
  3424  00551C  6A03               	clrf	btemp+3,c
  3425  00551E  2602               	addwf	btemp+2,f,c
  3426  005520  0E00               	movlw	0
  3427  005522  2203               	addwfc	btemp+3,f,c
  3428  005524  C28C  F000         	movff	_PWM+30,btemp
  3429  005528  6A01               	clrf	btemp+1,c
  3430  00552A  5001               	movf	btemp+1,w,c
  3431  00552C  0A80               	xorlw	128
  3432  00552E  6E04               	movwf	btemp+4,c
  3433  005530  5003               	movf	btemp+3,w,c
  3434  005532  0A80               	xorlw	128
  3435  005534  5C04               	subwf	btemp+4,w,c
  3436  005536  E102               	bnz	u2375
  3437  005538  5002               	movf	btemp+2,w,c
  3438  00553A  5C00               	subwf	btemp,w,c
  3439  00553C                     u2375:
  3440  00553C  E203               	bc	l282
  3441  00553E  C28C  F07C         	movff	_PWM+30,_rgl+7
  3442  005542  D003               	goto	l277
  3443  005544                     l282:
  3444                           ;rgl.c: 1120: else rgl.srp+=k;
  3445  005544  0100               	movlb	(_rgl+7) shr (0+8)
  3446  005546  0E08               	movlw	8
  3447  005548  277C               	addwf	(_rgl+7)& (0+255),f,b
  3448  00554A                     l277:
  3449                           ;rgl.c: 1121: }
  3450  00554A  CEEB  FFE8         	movff	_pwm_kwr,wreg
  3451  00554E  0100               	movlb	(_rgl+9) shr (0+8)
  3452  005550  5D7E               	subwf	(_rgl+9)& (0+255),w,b
  3453  005552  E304               	bnc	l284
  3454                           ;rgl.c: 1126: {
  3455  005554  0E02               	movlw	2
  3456  005556  EC1F  F036         	call	_Trosnie
  3457  00555A  D003               	goto	L11
  3458                           ;rgl.c: 1128: }
  3459  00555C                     l284:
  3460                           ;rgl.c: 1129: else
  3461  00555C  0E01               	movlw	1
  3462  00555E  EC1F  F036         	call	_Trosnie
  3463  005562                     L11:
  3464  005562  B0D8               	btfsc	status,0,c
  3465  005564  0012               	return	
  3466                           ;rgl.c: 1132: }
  3467  005566  0E05               	movlw	5
  3468  005568  6ED9               	movwf	fsr2l,c
  3469                           ;rgl.c: 1134: if(rgl.xmod+k>0xF0) rgl.xmod=0xF0;
  3470  00556A  C07D  F000         	movff	_rgl+8,btemp
  3471  00556E  6A01               	clrf	btemp+1,c
  3472  005570  2600               	addwf	btemp,f,c
  3473  005572  0E00               	movlw	0
  3474  005574  2201               	addwfc	btemp+1,f,c
  3475  005576  5001               	movf	btemp+1,w,c
  3476  005578  0A80               	xorlw	128
  3477  00557A  0F80               	addlw	-128
  3478  00557C  0EF1               	movlw	241
  3479  00557E  B4D8               	btfsc	status,2,c
  3480  005580  5C00               	subwf	btemp,w,c
  3481  005582  E304               	bnc	l288
  3482  005584  0EF0               	movlw	-16
  3483  005586  CFE8 F07D          	movff	wreg,_rgl+8
  3484  00558A  D003               	goto	l289
  3485  00558C                     l288:
  3486                           ;rgl.c: 1135: else rgl.xmod+=k;
  3487  00558C  0100               	movlb	(_rgl+8) shr (0+8)
  3488  00558E  0E05               	movlw	5
  3489  005590  277D               	addwf	(_rgl+8)& (0+255),f,b
  3490  005592                     l289:
  3491                           ;rgl.c: 1136: if(rgl.xmod>PWM.MMAXCW) rgl.xmod=P
      +                          WM.MMAXCW;
  3492  005592  C07D  FFE8         	movff	_rgl+8,wreg
  3493  005596  0102               	movlb	(_PWM+30) shr (0+8)
  3494  005598  618C               	cpfslt	(_PWM+30)& (0+255),b
  3495  00559A  0012               	return	
  3496  00559C  C28C  F07D         	movff	_PWM+30,_rgl+8
  3497                           ;rgl.c: 1137: }
  3498  0055A0  0012               	return	
  3499  0055A2                     __end_of_IncMaxCW:
  3500                           ;rgl.c: 1167: void ModPrzCW(void)
  3501                           ;rgl.c: 1168: {
  3502  0055A2                     _ModPrzCW:
  3503  000000                     
  3504                           ;rgl.c: 1169: unsigned char p,m,maxmod,mdmod;
  3505  0055A2  0E00               	movlw	0
  3506  0055A4  EC4E  F036         	call	_Tnizsza
  3507  0055A8  E201 D187          	bnc	l292
  3508                           ;rgl.c: 1175: {
  3509  0055AC  C278  FFE8         	movff	_PWM+10,wreg
  3510  0055B0  0102               	movlb	(_PWM+30) shr (0+8)
  3511  0055B2  618C               	cpfslt	(_PWM+30)& (0+255),b
  3512  0055B4  D003               	goto	l293
  3513  0055B6  C28C  FFE1         	movff	_PWM+30,fsr1l
  3514  0055BA  D002               	goto	l294
  3515  0055BC                     l293:
  3516                           ;rgl.c: 1177: else maxmod=PWM.MGMOD;
  3517  0055BC  C278  FFE1         	movff	_PWM+10,fsr1l
  3518  0055C0                     l294:
  3519                           ;rgl.c: 1180: if(rgl.tmp_pwm>=pwm_center)
  3520  0055C0  CEEA  FFE8         	movff	_pwm_center,wreg
  3521  0055C4  0100               	movlb	(_rgl+9) shr (0+8)
  3522  0055C6  5D7E               	subwf	(_rgl+9)& (0+255),w,b
  3523  0055C8  E201 D0BE          	bnc	l295
  3524                           ;rgl.c: 1181: {
  3525  0055CC  C07D  FFE8         	movff	_rgl+8,wreg
  3526  0055D0  5CE1               	subwf	fsr1l,w,c
  3527  0055D2  E303               	bnc	l296
  3528  0055D4  C07D  FFD9         	movff	_rgl+8,fsr2l
  3529  0055D8  D004               	goto	l297
  3530  0055DA                     l296:
  3531                           ;rgl.c: 1183: else
  3532  0055DA  50E1               	movf	fsr1l,w,c
  3533  0055DC  6ED9               	movwf	fsr2l,c
  3534                           ;rgl.c: 1186: rgl.xmod=maxmod;
  3535  0055DE  CFE1 F07D          	movff	fsr1l,_rgl+8
  3536  0055E2                     l297:
  3537                           ;rgl.c: 1187: }
  3538  0055E2  C224  FFE8         	movff	_DtCW+9,wreg
  3539  0055E6  0A80               	xorlw	128
  3540  0055E8  0F79               	addlw	-135
  3541  0055EA  E335               	bnc	l298
  3542  0055EC  0E01               	movlw	1
  3543  0055EE  010E               	movlb	_tmr shr (0+8)
  3544  0055F0  65EC               	cpfsgt	_tmr& (0+255),b
  3545  0055F2  D031               	goto	l298
  3546                           ;rgl.c: 1189: {
  3547  0055F4  6BEC               	clrf	_tmr& (0+255),b
  3548                           ;rgl.c: 1191: r=p-PWM.MDMOD;
  3549  0055F6  C277  FFE8         	movff	_PWM+9,wreg
  3550  0055FA  5CD9               	subwf	fsr2l,w,c
  3551  0055FC  6EF3               	movwf	prodl,c
  3552  0055FE  6AF4               	clrf	prodh,c
  3553  005600  A0D8               	btfss	status,0,c
  3554  005602  06F4               	decf	prodh,f,c
  3555                           ;rgl.c: 1192: if((p-(r/3))>PWM.MDMOD) p-=r/3;
  3556  005604  0E03               	movlw	3
  3557  005606  6E02               	movwf	btemp+2,c
  3558  005608  6A03               	clrf	btemp+3,c
  3559  00560A  CFF3 F000          	movff	prodl,btemp
  3560  00560E  CFF4 F001          	movff	prodh,btemp+1
  3561  005612  ECCC  F072         	call	awdiv
  3562  005616  5004               	movf	btemp+4,w,c
  3563  005618  5CD9               	subwf	fsr2l,w,c
  3564  00561A  6E00               	movwf	btemp,c
  3565  00561C  5005               	movf	btemp+5,w,c
  3566  00561E  A0D8               	btfss	status,0,c
  3567  005620  2805               	incf	btemp+5,w,c
  3568  005622  6A01               	clrf	btemp+1,c
  3569  005624  5E01               	subwf	btemp+1,f,c
  3570  005626  C277  F002         	movff	_PWM+9,btemp+2
  3571  00562A  6A03               	clrf	btemp+3,c
  3572  00562C  5003               	movf	btemp+3,w,c
  3573  00562E  0A80               	xorlw	128
  3574  005630  6E04               	movwf	btemp+4,c
  3575  005632  5001               	movf	btemp+1,w,c
  3576  005634  0A80               	xorlw	128
  3577  005636  5C04               	subwf	btemp+4,w,c
  3578  005638  E102               	bnz	u2505
  3579  00563A  5000               	movf	btemp,w,c
  3580  00563C  5C02               	subwf	btemp+2,w,c
  3581  00563E                     u2505:
  3582  00563E  E301 D138          	bc	l321
  3583  005642  0E03               	movlw	3
  3584  005644  6E02               	movwf	btemp+2,c
  3585  005646  6A03               	clrf	btemp+3,c
  3586  005648  CFF3 F000          	movff	prodl,btemp
  3587  00564C  CFF4 F001          	movff	prodh,btemp+1
  3588  005650  ECCC  F072         	call	awdiv
  3589  005654  D039               	goto	L14
  3590                           ;rgl.c: 1193: else p=PWM.MDMOD;
  3591                           ;rgl.c: 1194: rgl.xmod=p;
  3592                           ;rgl.c: 1195: }
  3593  005656                     l298:
  3594                           ;rgl.c: 1196: else
  3595  005656  C224  FFE8         	movff	_DtCW+9,wreg
  3596  00565A  0A80               	xorlw	128
  3597  00565C  0F7B               	addlw	-133
  3598  00565E  E337               	bnc	l302
  3599  005660  0E01               	movlw	1
  3600  005662  010E               	movlb	_tmr shr (0+8)
  3601  005664  65EC               	cpfsgt	_tmr& (0+255),b
  3602  005666  D033               	goto	l302
  3603                           ;rgl.c: 1198: {
  3604  005668  6BEC               	clrf	_tmr& (0+255),b
  3605                           ;rgl.c: 1200: r=p-PWM.MDMOD;
  3606  00566A  C277  FFE8         	movff	_PWM+9,wreg
  3607  00566E  5CD9               	subwf	fsr2l,w,c
  3608  005670  6EF3               	movwf	prodl,c
  3609  005672  6AF4               	clrf	prodh,c
  3610  005674  A0D8               	btfss	status,0,c
  3611  005676  06F4               	decf	prodh,f,c
  3612                           ;rgl.c: 1201: if((p-(r/4))>PWM.MDMOD) p-=r/4;
  3613  005678  0E04               	movlw	4
  3614  00567A  6E02               	movwf	btemp+2,c
  3615  00567C  6A03               	clrf	btemp+3,c
  3616  00567E  CFF3 F000          	movff	prodl,btemp
  3617  005682  CFF4 F001          	movff	prodh,btemp+1
  3618  005686  ECCC  F072         	call	awdiv
  3619  00568A  5004               	movf	btemp+4,w,c
  3620  00568C  5CD9               	subwf	fsr2l,w,c
  3621  00568E  6E00               	movwf	btemp,c
  3622  005690  5005               	movf	btemp+5,w,c
  3623  005692  A0D8               	btfss	status,0,c
  3624  005694  2805               	incf	btemp+5,w,c
  3625  005696  6A01               	clrf	btemp+1,c
  3626  005698  5E01               	subwf	btemp+1,f,c
  3627  00569A  C277  F002         	movff	_PWM+9,btemp+2
  3628  00569E  6A03               	clrf	btemp+3,c
  3629  0056A0  5003               	movf	btemp+3,w,c
  3630  0056A2  0A80               	xorlw	128
  3631  0056A4  6E04               	movwf	btemp+4,c
  3632  0056A6  5001               	movf	btemp+1,w,c
  3633  0056A8  0A80               	xorlw	128
  3634  0056AA  5C04               	subwf	btemp+4,w,c
  3635  0056AC  E102               	bnz	u2545
  3636  0056AE  5000               	movf	btemp,w,c
  3637  0056B0  5C02               	subwf	btemp+2,w,c
  3638  0056B2                     u2545:
  3639  0056B2  E301 D0FE          	bc	l321
  3640  0056B6  0E04               	movlw	4
  3641  0056B8  6E02               	movwf	btemp+2,c
  3642  0056BA  6A03               	clrf	btemp+3,c
  3643  0056BC  CFF3 F000          	movff	prodl,btemp
  3644  0056C0  CFF4 F001          	movff	prodh,btemp+1
  3645  0056C4  ECCC  F072         	call	awdiv
  3646  0056C8                     L14:
  3647  0056C8  5004               	movf	btemp+4,w,c
  3648  0056CA  5ED9               	subwf	fsr2l,f,c
  3649  0056CC  D0F4               	goto	l322
  3650                           ;rgl.c: 1202: else p=PWM.MDMOD;
  3651                           ;rgl.c: 1203: rgl.xmod=p;
  3652                           ;rgl.c: 1204: }
  3653  0056CE                     l302:
  3654                           ;rgl.c: 1205: else
  3655  0056CE  C224  FFE8         	movff	_DtCW+9,wreg
  3656  0056D2  0A80               	xorlw	128
  3657  0056D4  0F7C               	addlw	-132
  3658  0056D6  E201 D0F0          	bnc	l292
  3659  0056DA  010E               	movlb	_tmr shr (0+8)
  3660  0056DC  53EC               	movf	_tmr& (0+255),f,b
  3661  0056DE  E101 D0EC          	bz	l292
  3662                           ;rgl.c: 1207: {
  3663  0056E2  6BEC               	clrf	_tmr& (0+255),b
  3664                           ;rgl.c: 1209: r=p-PWM.MDMOD;
  3665  0056E4  C277  FFE8         	movff	_PWM+9,wreg
  3666  0056E8  5CD9               	subwf	fsr2l,w,c
  3667  0056EA  6EF3               	movwf	prodl,c
  3668  0056EC  6AF4               	clrf	prodh,c
  3669  0056EE  A0D8               	btfss	status,0,c
  3670  0056F0  06F4               	decf	prodh,f,c
  3671                           ;rgl.c: 1210: if((p-(r/14))>PWM.MDMOD) p-=r/14;
  3672  0056F2  0E0E               	movlw	14
  3673  0056F4  6E02               	movwf	btemp+2,c
  3674  0056F6  6A03               	clrf	btemp+3,c
  3675  0056F8  CFF3 F000          	movff	prodl,btemp
  3676  0056FC  CFF4 F001          	movff	prodh,btemp+1
  3677  005700  ECCC  F072         	call	awdiv
  3678  005704  5004               	movf	btemp+4,w,c
  3679  005706  5CD9               	subwf	fsr2l,w,c
  3680  005708  6E00               	movwf	btemp,c
  3681  00570A  5005               	movf	btemp+5,w,c
  3682  00570C  A0D8               	btfss	status,0,c
  3683  00570E  2805               	incf	btemp+5,w,c
  3684  005710  6A01               	clrf	btemp+1,c
  3685  005712  5E01               	subwf	btemp+1,f,c
  3686  005714  C277  F002         	movff	_PWM+9,btemp+2
  3687  005718  6A03               	clrf	btemp+3,c
  3688  00571A  5003               	movf	btemp+3,w,c
  3689  00571C  0A80               	xorlw	128
  3690  00571E  6E04               	movwf	btemp+4,c
  3691  005720  5001               	movf	btemp+1,w,c
  3692  005722  0A80               	xorlw	128
  3693  005724  5C04               	subwf	btemp+4,w,c
  3694  005726  E102               	bnz	u2585
  3695  005728  5000               	movf	btemp,w,c
  3696  00572A  5C02               	subwf	btemp+2,w,c
  3697  00572C                     u2585:
  3698  00572C  E301 D0C1          	bc	l321
  3699  005730  0E0E               	movlw	14
  3700  005732  6E02               	movwf	btemp+2,c
  3701  005734  6A03               	clrf	btemp+3,c
  3702  005736  CFF3 F000          	movff	prodl,btemp
  3703  00573A  CFF4 F001          	movff	prodh,btemp+1
  3704  00573E  ECCC  F072         	call	awdiv
  3705  005742                     L12:
  3706  005742  5004               	movf	btemp+4,w,c
  3707  005744  5ED9               	subwf	fsr2l,f,c
  3708  005746  D0B7               	goto	l322
  3709                           ;rgl.c: 1211: else p=PWM.MDMOD;
  3710                           ;rgl.c: 1212: rgl.xmod=p;
  3711                           ;rgl.c: 1213: }
  3712  005748                     l295:
  3713                           ;rgl.c: 1215: else
  3714  005748  C07D  FFE8         	movff	_rgl+8,wreg
  3715  00574C  5CE1               	subwf	fsr1l,w,c
  3716  00574E  E303               	bnc	l310
  3717  005750  C07D  FFD9         	movff	_rgl+8,fsr2l
  3718  005754  D004               	goto	l311
  3719  005756                     l310:
  3720                           ;rgl.c: 1218: else
  3721  005756  50E1               	movf	fsr1l,w,c
  3722  005758  6ED9               	movwf	fsr2l,c
  3723                           ;rgl.c: 1221: rgl.xmod=maxmod;
  3724  00575A  CFE1 F07D          	movff	fsr1l,_rgl+8
  3725  00575E                     l311:
  3726                           ;rgl.c: 1222: }
  3727  00575E  C224  FFE8         	movff	_DtCW+9,wreg
  3728  005762  0A80               	xorlw	128
  3729  005764  0F79               	addlw	-135
  3730  005766  E334               	bnc	l312
  3731  005768  0E01               	movlw	1
  3732  00576A  010E               	movlb	_tmr shr (0+8)
  3733  00576C  65EC               	cpfsgt	_tmr& (0+255),b
  3734  00576E  D030               	goto	l312
  3735                           ;rgl.c: 1224: {
  3736  005770  6BEC               	clrf	_tmr& (0+255),b
  3737                           ;rgl.c: 1226: r=p-PWM.MDMOD;
  3738  005772  C277  FFE8         	movff	_PWM+9,wreg
  3739  005776  5CD9               	subwf	fsr2l,w,c
  3740  005778  6EF3               	movwf	prodl,c
  3741  00577A  6AF4               	clrf	prodh,c
  3742  00577C  A0D8               	btfss	status,0,c
  3743  00577E  06F4               	decf	prodh,f,c
  3744                           ;rgl.c: 1227: if((p-(r/2))>PWM.MDMOD) p-=r/2;
  3745  005780  0E02               	movlw	2
  3746  005782  6E02               	movwf	btemp+2,c
  3747  005784  6A03               	clrf	btemp+3,c
  3748  005786  CFF3 F000          	movff	prodl,btemp
  3749  00578A  CFF4 F001          	movff	prodh,btemp+1
  3750  00578E  ECCC  F072         	call	awdiv
  3751  005792  5004               	movf	btemp+4,w,c
  3752  005794  5CD9               	subwf	fsr2l,w,c
  3753  005796  6E00               	movwf	btemp,c
  3754  005798  5005               	movf	btemp+5,w,c
  3755  00579A  A0D8               	btfss	status,0,c
  3756  00579C  2805               	incf	btemp+5,w,c
  3757  00579E  6A01               	clrf	btemp+1,c
  3758  0057A0  5E01               	subwf	btemp+1,f,c
  3759  0057A2  C277  F002         	movff	_PWM+9,btemp+2
  3760  0057A6  6A03               	clrf	btemp+3,c
  3761  0057A8  5003               	movf	btemp+3,w,c
  3762  0057AA  0A80               	xorlw	128
  3763  0057AC  6E04               	movwf	btemp+4,c
  3764  0057AE  5001               	movf	btemp+1,w,c
  3765  0057B0  0A80               	xorlw	128
  3766  0057B2  5C04               	subwf	btemp+4,w,c
  3767  0057B4  E102               	bnz	u2635
  3768  0057B6  5000               	movf	btemp,w,c
  3769  0057B8  5C02               	subwf	btemp+2,w,c
  3770  0057BA                     u2635:
  3771  0057BA  E27B               	bc	l321
  3772  0057BC  0E02               	movlw	2
  3773  0057BE  6E02               	movwf	btemp+2,c
  3774  0057C0  6A03               	clrf	btemp+3,c
  3775  0057C2  CFF3 F000          	movff	prodl,btemp
  3776  0057C6  CFF4 F001          	movff	prodh,btemp+1
  3777  0057CA  ECCC  F072         	call	awdiv
  3778  0057CE  D7B9               	goto	L12
  3779                           ;rgl.c: 1228: else p=PWM.MDMOD;
  3780                           ;rgl.c: 1229: rgl.xmod=p;
  3781                           ;rgl.c: 1230: }
  3782  0057D0                     l312:
  3783                           ;rgl.c: 1231: else
  3784  0057D0  C224  FFE8         	movff	_DtCW+9,wreg
  3785  0057D4  0A80               	xorlw	128
  3786  0057D6  0F7B               	addlw	-133
  3787  0057D8  E334               	bnc	l316
  3788  0057DA  0E01               	movlw	1
  3789  0057DC  010E               	movlb	_tmr shr (0+8)
  3790  0057DE  65EC               	cpfsgt	_tmr& (0+255),b
  3791  0057E0  D030               	goto	l316
  3792                           ;rgl.c: 1233: {
  3793  0057E2  6BEC               	clrf	_tmr& (0+255),b
  3794                           ;rgl.c: 1235: r=p-PWM.MDMOD;
  3795  0057E4  C277  FFE8         	movff	_PWM+9,wreg
  3796  0057E8  5CD9               	subwf	fsr2l,w,c
  3797  0057EA  6EF3               	movwf	prodl,c
  3798  0057EC  6AF4               	clrf	prodh,c
  3799  0057EE  A0D8               	btfss	status,0,c
  3800  0057F0  06F4               	decf	prodh,f,c
  3801                           ;rgl.c: 1236: if((p-(r/3))>PWM.MDMOD) p-=r/3;
  3802  0057F2  0E03               	movlw	3
  3803  0057F4  6E02               	movwf	btemp+2,c
  3804  0057F6  6A03               	clrf	btemp+3,c
  3805  0057F8  CFF3 F000          	movff	prodl,btemp
  3806  0057FC  CFF4 F001          	movff	prodh,btemp+1
  3807  005800  ECCC  F072         	call	awdiv
  3808  005804  5004               	movf	btemp+4,w,c
  3809  005806  5CD9               	subwf	fsr2l,w,c
  3810  005808  6E00               	movwf	btemp,c
  3811  00580A  5005               	movf	btemp+5,w,c
  3812  00580C  A0D8               	btfss	status,0,c
  3813  00580E  2805               	incf	btemp+5,w,c
  3814  005810  6A01               	clrf	btemp+1,c
  3815  005812  5E01               	subwf	btemp+1,f,c
  3816  005814  C277  F002         	movff	_PWM+9,btemp+2
  3817  005818  6A03               	clrf	btemp+3,c
  3818  00581A  5003               	movf	btemp+3,w,c
  3819  00581C  0A80               	xorlw	128
  3820  00581E  6E04               	movwf	btemp+4,c
  3821  005820  5001               	movf	btemp+1,w,c
  3822  005822  0A80               	xorlw	128
  3823  005824  5C04               	subwf	btemp+4,w,c
  3824  005826  E102               	bnz	u2675
  3825  005828  5000               	movf	btemp,w,c
  3826  00582A  5C02               	subwf	btemp+2,w,c
  3827  00582C                     u2675:
  3828  00582C  E242               	bc	l321
  3829  00582E  0E03               	movlw	3
  3830  005830  6E02               	movwf	btemp+2,c
  3831  005832  6A03               	clrf	btemp+3,c
  3832  005834  CFF3 F000          	movff	prodl,btemp
  3833  005838  CFF4 F001          	movff	prodh,btemp+1
  3834  00583C  ECCC  F072         	call	awdiv
  3835  005840  D780               	goto	L12
  3836                           ;rgl.c: 1237: else p=PWM.MDMOD;
  3837                           ;rgl.c: 1238: rgl.xmod=p;
  3838                           ;rgl.c: 1239: }
  3839  005842                     l316:
  3840                           ;rgl.c: 1240: else
  3841  005842  C224  FFE8         	movff	_DtCW+9,wreg
  3842  005846  0A80               	xorlw	128
  3843  005848  0F7C               	addlw	-132
  3844  00584A  E337               	bnc	l292
  3845  00584C  010E               	movlb	_tmr shr (0+8)
  3846  00584E  53EC               	movf	_tmr& (0+255),f,b
  3847  005850  E034               	bz	l292
  3848                           ;rgl.c: 1242: {
  3849  005852  6BEC               	clrf	_tmr& (0+255),b
  3850                           ;rgl.c: 1244: r=p-PWM.MDMOD;
  3851  005854  C277  FFE8         	movff	_PWM+9,wreg
  3852  005858  5CD9               	subwf	fsr2l,w,c
  3853  00585A  6EF3               	movwf	prodl,c
  3854  00585C  6AF4               	clrf	prodh,c
  3855  00585E  A0D8               	btfss	status,0,c
  3856  005860  06F4               	decf	prodh,f,c
  3857                           ;rgl.c: 1245: if((p-(r/4))>PWM.MDMOD) p-=r/4;
  3858  005862  0E04               	movlw	4
  3859  005864  6E02               	movwf	btemp+2,c
  3860  005866  6A03               	clrf	btemp+3,c
  3861  005868  CFF3 F000          	movff	prodl,btemp
  3862  00586C  CFF4 F001          	movff	prodh,btemp+1
  3863  005870  ECCC  F072         	call	awdiv
  3864  005874  5004               	movf	btemp+4,w,c
  3865  005876  5CD9               	subwf	fsr2l,w,c
  3866  005878  6E00               	movwf	btemp,c
  3867  00587A  5005               	movf	btemp+5,w,c
  3868  00587C  A0D8               	btfss	status,0,c
  3869  00587E  2805               	incf	btemp+5,w,c
  3870  005880  6A01               	clrf	btemp+1,c
  3871  005882  5E01               	subwf	btemp+1,f,c
  3872  005884  C277  F002         	movff	_PWM+9,btemp+2
  3873  005888  6A03               	clrf	btemp+3,c
  3874  00588A  5003               	movf	btemp+3,w,c
  3875  00588C  0A80               	xorlw	128
  3876  00588E  6E04               	movwf	btemp+4,c
  3877  005890  5001               	movf	btemp+1,w,c
  3878  005892  0A80               	xorlw	128
  3879  005894  5C04               	subwf	btemp+4,w,c
  3880  005896  E102               	bnz	u2715
  3881  005898  5000               	movf	btemp,w,c
  3882  00589A  5C02               	subwf	btemp+2,w,c
  3883  00589C                     u2715:
  3884  00589C  E20A               	bc	l321
  3885  00589E  0E04               	movlw	4
  3886  0058A0  6E02               	movwf	btemp+2,c
  3887  0058A2  6A03               	clrf	btemp+3,c
  3888  0058A4  CFF3 F000          	movff	prodl,btemp
  3889  0058A8  CFF4 F001          	movff	prodh,btemp+1
  3890  0058AC  ECCC  F072         	call	awdiv
  3891  0058B0  D70B               	goto	L14
  3892  0058B2                     l321:
  3893                           ;rgl.c: 1246: else p=PWM.MDMOD;
  3894  0058B2  C277  FFD9         	movff	_PWM+9,fsr2l
  3895  0058B6                     l322:
  3896                           ;rgl.c: 1247: rgl.xmod=p;
  3897  0058B6  CFD9 F07D          	movff	fsr2l,_rgl+8
  3898  0058BA                     l292:
  3899                           ;rgl.c: 1248: }
  3900  0058BA  0100               	movlb	_rgl shr (0+8)
  3901  0058BC  BB75               	btfsc	_rgl& (0+255),5,b
  3902  0058BE  D02F               	goto	l323
  3903                           ;rgl.c: 1261: {
  3904  0058C0  A575               	btfss	_rgl& (0+255),2,b
  3905  0058C2  0012               	return	
  3906                           ;rgl.c: 1263: {
  3907  0058C4  0E00               	movlw	0
  3908  0058C6  EC2C  F036         	call	_Tmaleje
  3909  0058CA  B0D8               	btfsc	status,0,c
  3910  0058CC  0012               	return	
  3911                           ;rgl.c: 1265: {
  3912  0058CE  0E04               	movlw	4
  3913  0058D0  EC5B  F036         	call	_Twyzsza
  3914  0058D4  A0D8               	btfss	status,0,c
  3915  0058D6  0012               	return	
  3916                           ;rgl.c: 1267: {
  3917  0058D8  CEEB  FFE8         	movff	_pwm_kwr,wreg
  3918  0058DC  0100               	movlb	(_rgl+9) shr (0+8)
  3919  0058DE  5D7E               	subwf	(_rgl+9)& (0+255),w,b
  3920  0058E0  E31B               	bnc	l327
  3921                           ;rgl.c: 1269: {
  3922  0058E2  C277  F000         	movff	_PWM+9,btemp
  3923  0058E6  6A01               	clrf	btemp+1,c
  3924  0058E8  C07C  F002         	movff	_rgl+7,btemp+2
  3925  0058EC  0EFB               	movlw	251
  3926  0058EE  2402               	addwf	btemp+2,w,c
  3927  0058F0  6EF6               	movwf	tblptrl,c
  3928  0058F2  6AF7               	clrf	tblptrh,c
  3929  0058F4  0EFF               	movlw	255
  3930  0058F6  22F7               	addwfc	tblptrh,f,c
  3931  0058F8  50F7               	movf	tblptrh,w,c
  3932  0058FA  0A80               	xorlw	128
  3933  0058FC  6E02               	movwf	btemp+2,c
  3934  0058FE  5001               	movf	btemp+1,w,c
  3935  005900  0A80               	xorlw	128
  3936  005902  5C02               	subwf	btemp+2,w,c
  3937  005904  E102               	bnz	u2775
  3938  005906  5000               	movf	btemp,w,c
  3939  005908  5CF6               	subwf	tblptrl,w,c
  3940  00590A                     u2775:
  3941  00590A  E203               	bc	l328
  3942  00590C  C277  F07C         	movff	_PWM+9,_rgl+7
  3943  005910  D003               	goto	l327
  3944  005912                     l328:
  3945                           ;rgl.c: 1271: else rgl.srp-=5;
  3946  005912  0100               	movlb	(_rgl+7) shr (0+8)
  3947  005914  0EFB               	movlw	-5
  3948  005916  277C               	addwf	(_rgl+7)& (0+255),f,b
  3949  005918                     l327:
  3950                           ;rgl.c: 1272: }
  3951  005918  0100               	movlb	_rgl shr (0+8)
  3952  00591A  8B75               	bsf	_rgl& (0+255),5,b
  3953                           ;rgl.c: 1274: return;
  3954  00591C  0012               	return	
  3955                           ;rgl.c: 1276: else return;
  3956                           ;rgl.c: 1278: else return;
  3957                           ;rgl.c: 1280: else return;
  3958  00591E                     l323:
  3959                           ;rgl.c: 1282: else
  3960  00591E  0E00               	movlw	0
  3961  005920  EC2C  F036         	call	_Tmaleje
  3962  005924  E302               	bnc	l333
  3963                           ;rgl.c: 1285: rgl.nmod=0;
  3964  005926  0100               	movlb	_rgl shr (0+8)
  3965  005928  9B75               	bcf	_rgl& (0+255),5,b
  3966  00592A                     l333:
  3967                           ;rgl.c: 1286: }
  3968  00592A  010E               	movlb	F1758 shr (0+8)
  3969  00592C  2BD8               	incf	F1758& (0+255),f,b
  3970                           ;rgl.c: 1288: }
  3971  00592E  0C01               	retlw	1
  3972  005930                     __end_of_ModPrzCW:
  3973                           ;rgl.c: 1294: void PropCO(void)
  3974                           ;rgl.c: 1295: {
  3975  005930                     _PropCO:
  3976  000000                     
  3977                           ;rgl.c: 1296: if(!rgl.nmod)
  3978  005930  0100               	movlb	_rgl shr (0+8)
  3979  005932  BB75               	btfsc	_rgl& (0+255),5,b
  3980  005934  EFCF  F035         	goto	l637
  3981                           ;rgl.c: 1297: {
  3982  005938  0102               	movlb	_DtCO shr (0+8)
  3983  00593A  B10C               	btfsc	_DtCO& (0+255),0,b
  3984  00593C  EF38  F031         	goto	l482
  3985                           ;rgl.c: 1299: {
  3986  005940  C078  FFE8         	movff	_rgl+3,wreg
  3987  005944  0A03               	xorlw	3
  3988  005946  E102               	bnz	l338
  3989  005948  EFA0  F035         	goto	L32
  3990                           ;rgl.c: 1301: {
  3991                           ;rgl.c: 1303: rgl.tmp_pwm=PWM.MGMOD;
  3992                           ;rgl.c: 1304: }
  3993  00594C                     l338:
  3994                           ;rgl.c: 1305: else
  3995  00594C  C078  FFE8         	movff	_rgl+3,wreg
  3996  005950  0A02               	xorlw	2
  3997  005952  E102               	bnz	l341
  3998  005954  EFAE  F035         	goto	L33
  3999                           ;rgl.c: 1307: {
  4000                           ;rgl.c: 1309: rgl.tmp_pwm=PWM.PROP1;
  4001                           ;rgl.c: 1310: }
  4002  005958                     l341:
  4003                           ;rgl.c: 1311: else
  4004  005958  C078  F000         	movff	_rgl+3,btemp
  4005  00595C  0400               	decf	btemp,w,c
  4006  00595E  E102               	bnz	l344
  4007  005960  EFBC  F035         	goto	L34
  4008                           ;rgl.c: 1313: {
  4009                           ;rgl.c: 1315: rgl.tmp_pwm=PWM.PROP2;
  4010                           ;rgl.c: 1316: }
  4011  005964                     l344:
  4012                           ;rgl.c: 1317: else
  4013  005964  C078  FFE8         	movff	_rgl+3,wreg
  4014  005968  0A80               	xorlw	128
  4015  00596A  0F7F               	addlw	-129
  4016  00596C  E202               	bc	l337
  4017  00596E  EF31  F031         	goto	L35
  4018                           ;rgl.c: 1319: {
  4019                           ;rgl.c: 1321: rgl.tmp_pwm=PWM.PROP3;
  4020  005972                     l337:
  4021  005972  EF38  F031         	goto	l482
  4022                           ;rgl.c: 1322: }
  4023                           ;rgl.c: 1325: }
  4024                           ;rgl.c: 1326: else WriteOPWM(PWM.MDMOD);
  4025                           ;rgl.c: 1327: }
  4026  005976                     __end_of_PropCO:
  4027                           ;rgl.c: 1336: void StartCO4(void)
  4028                           ;rgl.c: 1337: {
  4029  005976                     _StartCO4:
  4030  000000                     
  4031                           ;rgl.c: 1338: unsigned char k;
  4032  005976  0100               	movlb	_rgl shr (0+8)
  4033  005978  A175               	btfss	_rgl& (0+255),0,b
  4034  00597A  B375               	btfsc	_rgl& (0+255),1,b
  4035  00597C  0012               	return	
  4036                           ;rgl.c: 1341: StartRTdS(2);
  4037  00597E  0E02               	movlw	2
  4038  005980  EC86  F06E         	call	_StartRTdS
  4039                           ;rgl.c: 1342: DtCO.dDCO=0;
  4040  005984  0102               	movlb	(_DtCO+9) shr (0+8)
  4041  005986  6B15               	clrf	(_DtCO+9)& (0+255),b
  4042                           ;rgl.c: 1343: DtCO.indCO=0;
  4043  005988  0102               	movlb	(_DtCO+10) shr (0+8)
  4044  00598A  6B16               	clrf	(_DtCO+10)& (0+255),b
  4045                           ;rgl.c: 1344: DtCW.dDCW=0;
  4046  00598C  0102               	movlb	(_DtCW+8) shr (0+8)
  4047  00598E  6B23               	clrf	(_DtCW+8)& (0+255),b
  4048                           ;rgl.c: 1345: DtCW.indCW=0;
  4049  005990  0102               	movlb	(_DtCW+10) shr (0+8)
  4050  005992  6B25               	clrf	(_DtCW+10)& (0+255),b
  4051                           ;rgl.c: 1346: rgl.fz=0;
  4052  005994  0100               	movlb	_rgl shr (0+8)
  4053  005996  9575               	bcf	_rgl& (0+255),2,b
  4054                           ;rgl.c: 1347: rgl.med_up=0;
  4055  005998  9775               	bcf	_rgl& (0+255),3,b
  4056                           ;rgl.c: 1348: rgl.fast_up=0;
  4057  00599A  9975               	bcf	_rgl& (0+255),4,b
  4058                           ;rgl.c: 1350: if(PWM.MMAXCO>PWM.FIRSTPB)
  4059  00599C  C28B  FFE8         	movff	_PWM+29,wreg
  4060  0059A0  0102               	movlb	(_PWM+24) shr (0+8)
  4061  0059A2  6186               	cpfslt	(_PWM+24)& (0+255),b
  4062  0059A4  D003               	goto	l352
  4063                           ;rgl.c: 1351: {
  4064  0059A6  C286  F07D         	movff	_PWM+24,_rgl+8
  4065                           ;rgl.c: 1353: }
  4066  0059AA  D002               	goto	l353
  4067  0059AC                     l352:
  4068                           ;rgl.c: 1354: else
  4069  0059AC  C28B  F07D         	movff	_PWM+29,_rgl+8
  4070  0059B0                     l353:
  4071                           ;rgl.c: 1357: }
  4072  0059B0  0100               	movlb	(_rgl+7) shr (0+8)
  4073  0059B2  6B7C               	clrf	(_rgl+7)& (0+255),b
  4074                           ;rgl.c: 1359: rgl.ytmp=0;
  4075  0059B4  6B7B               	clrf	(_rgl+6)& (0+255),b
  4076                           ;rgl.c: 1360: rgl.nmod=0;
  4077  0059B6  9B75               	bcf	_rgl& (0+255),5,b
  4078                           ;rgl.c: 1361: rgl.del1s=0;
  4079  0059B8  9D75               	bcf	_rgl& (0+255),6,b
  4080                           ;rgl.c: 1362: rgl.inv_mod=0;
  4081  0059BA  9176               	bcf	(_rgl+1)& (0+255),0,b
  4082                           ;rgl.c: 1363: }
  4083  0059BC  0012               	return	
  4084  0059BE                     __end_of_StartCO4:
  4085                           ;rgl.c: 1366: void StartMCW4(void)
  4086                           ;rgl.c: 1367: {
  4087  0059BE                     _StartMCW4:
  4088  000000                     
  4089                           ;rgl.c: 1368: if(rgl.btco||rgl.btcw) return;
  4090  0059BE  0100               	movlb	_rgl shr (0+8)
  4091  0059C0  A175               	btfss	_rgl& (0+255),0,b
  4092  0059C2  B375               	btfsc	_rgl& (0+255),1,b
  4093  0059C4  0012               	return	
  4094                           ;rgl.c: 1369: StartRTdS(2);
  4095  0059C6  0E02               	movlw	2
  4096  0059C8  EC86  F06E         	call	_StartRTdS
  4097                           ;rgl.c: 1370: DtCO.dDCO=0;
  4098  0059CC  0102               	movlb	(_DtCO+9) shr (0+8)
  4099  0059CE  6B15               	clrf	(_DtCO+9)& (0+255),b
  4100                           ;rgl.c: 1371: DtCW.dDCW=0;
  4101  0059D0  0102               	movlb	(_DtCW+8) shr (0+8)
  4102  0059D2  6B23               	clrf	(_DtCW+8)& (0+255),b
  4103                           ;rgl.c: 1372: DtCO.indCO=0;
  4104  0059D4  0102               	movlb	(_DtCO+10) shr (0+8)
  4105  0059D6  6B16               	clrf	(_DtCO+10)& (0+255),b
  4106                           ;rgl.c: 1373: DtCW.indCW=0;
  4107  0059D8  0102               	movlb	(_DtCW+10) shr (0+8)
  4108  0059DA  6B25               	clrf	(_DtCW+10)& (0+255),b
  4109                           ;rgl.c: 1374: rgl.fz=0;
  4110  0059DC  0100               	movlb	_rgl shr (0+8)
  4111  0059DE  9575               	bcf	_rgl& (0+255),2,b
  4112                           ;rgl.c: 1375: rgl.med_up=0;
  4113  0059E0  9775               	bcf	_rgl& (0+255),3,b
  4114                           ;rgl.c: 1376: rgl.fast_up=0;
  4115  0059E2  9975               	bcf	_rgl& (0+255),4,b
  4116                           ;rgl.c: 1378: rgl.srp=0;
  4117  0059E4  6B7C               	clrf	(_rgl+7)& (0+255),b
  4118                           ;rgl.c: 1379: rgl.ytmp=0;
  4119  0059E6  6B7B               	clrf	(_rgl+6)& (0+255),b
  4120                           ;rgl.c: 1380: rgl.nmod=0;
  4121  0059E8  9B75               	bcf	_rgl& (0+255),5,b
  4122                           ;rgl.c: 1381: rgl.del1s=0;
  4123  0059EA  9D75               	bcf	_rgl& (0+255),6,b
  4124                           ;rgl.c: 1382: rgl.inv_mod=0;
  4125  0059EC  9176               	bcf	(_rgl+1)& (0+255),0,b
  4126                           ;rgl.c: 1383: rgl.xmod=PWM.MDMOD;
  4127  0059EE  C277  F07D         	movff	_PWM+9,_rgl+8
  4128                           ;rgl.c: 1384: }
  4129  0059F2  0012               	return	
  4130  0059F4                     __end_of_StartMCW4:
  4131                           ;rgl.c: 1387: void FirstPCW4(void)
  4132                           ;rgl.c: 1388: {
  4133  0059F4                     _FirstPCW4:
  4134  000000                     
  4135                           ;rgl.c: 1389: if(PWM.MMAXCW>PWM.MGMOD)
  4136  0059F4  C28C  FFE8         	movff	_PWM+30,wreg
  4137  0059F8  0102               	movlb	(_PWM+10) shr (0+8)
  4138  0059FA  6178               	cpfslt	(_PWM+10)& (0+255),b
  4139  0059FC  D00B               	goto	l357
  4140                           ;rgl.c: 1390: {
  4141  0059FE  C222  FFE8         	movff	_DtCW+7,wreg
  4142  005A02  0A80               	xorlw	128
  4143  005A04  0F7F               	addlw	-129
  4144  005A06  E303               	bnc	l358
  4145  005A08  C278  F07D         	movff	_PWM+10,_rgl+8
  4146  005A0C  0012               	return	
  4147  005A0E                     l358:
  4148                           ;rgl.c: 1392: else rgl.xmod=PWM.FIRSTPB;
  4149  005A0E  C286  F07D         	movff	_PWM+24,_rgl+8
  4150                           ;rgl.c: 1393: }
  4151  005A12  0012               	return	
  4152  005A14                     l357:
  4153                           ;rgl.c: 1394: else
  4154  005A14  C222  FFE8         	movff	_DtCW+7,wreg
  4155  005A18  0A80               	xorlw	128
  4156  005A1A  0F7F               	addlw	-129
  4157  005A1C  E303               	bnc	l361
  4158  005A1E  C28C  F07D         	movff	_PWM+30,_rgl+8
  4159  005A22  0012               	return	
  4160  005A24                     l361:
  4161                           ;rgl.c: 1397: else
  4162  005A24  C28C  FFE8         	movff	_PWM+30,wreg
  4163  005A28  0102               	movlb	(_PWM+24) shr (0+8)
  4164  005A2A  6186               	cpfslt	(_PWM+24)& (0+255),b
  4165  005A2C  D003               	goto	l363
  4166  005A2E  C286  F07D         	movff	_PWM+24,_rgl+8
  4167  005A32  0012               	return	
  4168  005A34                     l363:
  4169                           ;rgl.c: 1400: else rgl.xmod=PWM.MMAXCW;
  4170  005A34  C28C  F07D         	movff	_PWM+30,_rgl+8
  4171                           ;rgl.c: 1401: }
  4172  005A38  0012               	return	
  4173  005A3A                     __end_of_FirstPCW4:
  4174                           ;rgl.c: 1406: void ClrMod4(void)
  4175                           ;rgl.c: 1407: {
  4176  005A3A                     _ClrMod4:
  4177  000000                     
  4178                           ;rgl.c: 1408: rgl.fz=0;
  4179  005A3A  0100               	movlb	_rgl shr (0+8)
  4180  005A3C  9575               	bcf	_rgl& (0+255),2,b
  4181                           ;rgl.c: 1409: rgl.med_up=0;
  4182  005A3E  9775               	bcf	_rgl& (0+255),3,b
  4183                           ;rgl.c: 1410: rgl.fast_up=0;
  4184  005A40  9975               	bcf	_rgl& (0+255),4,b
  4185                           ;rgl.c: 1411: rgl.xmod=PWM.BufPWM;
  4186  005A42  C26F  F07D         	movff	_PWM+1,_rgl+8
  4187                           ;rgl.c: 1412: rgl.srp=0;
  4188  005A46  6B7C               	clrf	(_rgl+7)& (0+255),b
  4189                           ;rgl.c: 1413: rgl.ytmp=0;
  4190  005A48  6B7B               	clrf	(_rgl+6)& (0+255),b
  4191                           ;rgl.c: 1414: rgl.nmod=0;
  4192  005A4A  9B75               	bcf	_rgl& (0+255),5,b
  4193                           ;rgl.c: 1415: rgl.del1s=0;
  4194  005A4C  9D75               	bcf	_rgl& (0+255),6,b
  4195                           ;rgl.c: 1416: rgl.inv_mod=0;
  4196  005A4E  9176               	bcf	(_rgl+1)& (0+255),0,b
  4197                           ;rgl.c: 1417: }
  4198  005A50  0012               	return	
  4199  005A52                     __end_of_ClrMod4:
  4200                           ;rgl.c: 1420: void ModToCW4(void)
  4201                           ;rgl.c: 1421: {
  4202  005A52                     _ModToCW4:
  4203  000000                     
  4204                           ;rgl.c: 1422: rgl.btcw=1;
  4205  005A52  0100               	movlb	_rgl shr (0+8)
  4206  005A54  8375               	bsf	_rgl& (0+255),1,b
  4207                           ;rgl.c: 1423: if(rgl.btco)
  4208  005A56  A175               	btfss	_rgl& (0+255),0,b
  4209  005A58  0012               	return	
  4210                           ;rgl.c: 1424: {
  4211  005A5A  9175               	bcf	_rgl& (0+255),0,b
  4212                           ;rgl.c: 1426: ClrMod4();
  4213  005A5C  D7EE               	goto	_ClrMod4	;wreg free
  4214                           ;rgl.c: 1427: }
  4215  005A5E                     __end_of_ModToCW4:
  4216                           ;rgl.c: 1431: void ModToCO4(void)
  4217                           ;rgl.c: 1432: {
  4218  005A5E                     _ModToCO4:
  4219  000000                     
  4220                           ;rgl.c: 1433: rgl.btco=1;
  4221  005A5E  0100               	movlb	_rgl shr (0+8)
  4222  005A60  8175               	bsf	_rgl& (0+255),0,b
  4223                           ;rgl.c: 1434: if(rgl.btcw)
  4224  005A62  A375               	btfss	_rgl& (0+255),1,b
  4225  005A64  0012               	return	
  4226                           ;rgl.c: 1435: {
  4227  005A66  9375               	bcf	_rgl& (0+255),1,b
  4228                           ;rgl.c: 1437: ClrMod4();
  4229  005A68  D7E8               	goto	_ClrMod4	;wreg free
  4230                           ;rgl.c: 1438: }
  4231  005A6A                     __end_of_ModToCO4:
  4232                           ;rgl.c: 1442: void IncConstCOCW4(void)
  4233                           ;rgl.c: 1443: {
  4234  005A6A                     _IncConstCOCW4:
  4235  000000                     
  4236                           ;rgl.c: 1444: if(Tstoi()) rgl.ytmp++;
  4237  005A6A  EC47  F036         	call	_Tstoi	;wreg free
  4238  005A6E  0100               	movlb	(_rgl+6) shr (0+8)
  4239  005A70  E302               	bnc	L19
  4240  005A72  2B7B               	incf	(_rgl+6)& (0+255),f,b
  4241  005A74  0C01               	retlw	1
  4242                           ;rgl.c: 1445: else rgl.ytmp=0;
  4243  005A76                     L19:
  4244  005A76  6B7B               	clrf	(_rgl+6)& (0+255),b
  4245                           ;rgl.c: 1446: }
  4246  005A78  0012               	return	
  4247  005A7A                     __end_of_IncConstCOCW4:
  4248                           ;rgl.c: 1449: void ReadDataCO4(void)
  4249                           ;rgl.c: 1450: {
  4250  005A7A                     _ReadDataCO4:
  4251  000000                     
  4252                           ;rgl.c: 1451: rgl.x_t=DtCO.DCO;
  4253  005A7A  C214  F077         	movff	_DtCO+8,_rgl+2
  4254                           ;rgl.c: 1452: rgl.x_dt=DtCO.dDCO;
  4255  005A7E  C215  F079         	movff	_DtCO+9,_rgl+4
  4256                           ;rgl.c: 1453: }
  4257  005A82  0012               	return	
  4258  005A84                     __end_of_ReadDataCO4:
  4259                           ;rgl.c: 1456: void ReadDataCW4(void)
  4260                           ;rgl.c: 1457: {
  4261  005A84                     _ReadDataCW4:
  4262  000000                     
  4263                           ;rgl.c: 1458: rgl.x_t=DtCW.DCW;
  4264  005A84  C222  F077         	movff	_DtCW+7,_rgl+2
  4265                           ;rgl.c: 1459: rgl.x_f=DtCO.DCO;
  4266  005A88  C214  F078         	movff	_DtCO+8,_rgl+3
  4267                           ;rgl.c: 1460: rgl.x_dt=DtCW.dDCW;
  4268  005A8C  C223  F079         	movff	_DtCW+8,_rgl+4
  4269                           ;rgl.c: 1461: rgl.x_df=DtCO.dDCO;
  4270  005A90  C215  F07A         	movff	_DtCO+9,_rgl+5
  4271                           ;rgl.c: 1462: }
  4272  005A94  0012               	return	
  4273  005A96                     __end_of_ReadDataCW4:
  4274                           ;rgl.c: 1465: void ModZgCW4(void)
  4275                           ;rgl.c: 1466: {
  4276  005A96                     _ModZgCW4:
  4277  000000                     
  4278                           ;rgl.c: 1467: signed long m;
  4279  005A96  0E0A               	movlw	10
  4280  005A98  EC4E  F036         	call	_Tnizsza
  4281  005A9C  E302               	bnc	l376
  4282                           ;rgl.c: 1472: {
  4283  005A9E  010E               	movlb	F1773 shr (0+8)
  4284  005AA0  6BD9               	clrf	F1773& (0+255),b
  4285  005AA2                     l376:
  4286                           ;rgl.c: 1475: }
  4287  005AA2  0100               	movlb	_rgl shr (0+8)
  4288  005AA4  A575               	btfss	_rgl& (0+255),2,b
  4289  005AA6  D00D               	goto	l377
  4290                           ;rgl.c: 1477: {
  4291  005AA8  0E02               	movlw	2
  4292  005AAA  EC4E  F036         	call	_Tnizsza
  4293  005AAE  A0D8               	btfss	status,0,c
  4294  005AB0  0012               	return	
  4295                           ;rgl.c: 1479: {
  4296  005AB2  C26F  F07D         	movff	_PWM+1,_rgl+8
  4297                           ;rgl.c: 1481: rgl.srp=0;
  4298  005AB6  0100               	movlb	(_rgl+7) shr (0+8)
  4299  005AB8  6B7C               	clrf	(_rgl+7)& (0+255),b
  4300                           ;rgl.c: 1482: rgl.ytmp=0;
  4301  005ABA  6B7B               	clrf	(_rgl+6)& (0+255),b
  4302                           ;rgl.c: 1483: rgl.del1s=0;
  4303  005ABC  9D75               	bcf	_rgl& (0+255),6,b
  4304                           ;rgl.c: 1484: pop=0;
  4305  005ABE  010E               	movlb	F1773 shr (0+8)
  4306  005AC0  6BD9               	clrf	F1773& (0+255),b
  4307                           ;rgl.c: 1485: }
  4308                           ;rgl.c: 1486: else return;
  4309  005AC2                     l377:
  4310                           ;rgl.c: 1487: }
  4311  005AC2  0E01               	movlw	1
  4312  005AC4  EC4E  F036         	call	_Tnizsza
  4313  005AC8  E229               	bc	l380
  4314                           ;rgl.c: 1489: {
  4315  005ACA  0100               	movlb	_rgl shr (0+8)
  4316  005ACC  8575               	bsf	_rgl& (0+255),2,b
  4317                           ;rgl.c: 1491: rgl.fast_up=0;
  4318  005ACE  9975               	bcf	_rgl& (0+255),4,b
  4319                           ;rgl.c: 1492: rgl.med_up=0;
  4320  005AD0  9775               	bcf	_rgl& (0+255),3,b
  4321                           ;rgl.c: 1493: rgl.srp=PWM.BufPWM+pop;
  4322  005AD2  CED9  FFE8         	movff	F1773,wreg
  4323  005AD6  0102               	movlb	(_PWM+1) shr (0+8)
  4324  005AD8  256F               	addwf	(_PWM+1)& (0+255),w,b
  4325  005ADA  CFE8 F07C          	movff	wreg,_rgl+7
  4326                           ;rgl.c: 1494: rgl.xmod=PWM.BufPWM+pop;
  4327  005ADE  CED9  FFE8         	movff	F1773,wreg
  4328  005AE2  256F               	addwf	(_PWM+1)& (0+255),w,b
  4329  005AE4  CFE8 F07D          	movff	wreg,_rgl+8
  4330                           ;rgl.c: 1495: pop=0;
  4331  005AE8  010E               	movlb	F1773 shr (0+8)
  4332  005AEA  6BD9               	clrf	F1773& (0+255),b
  4333                           ;rgl.c: 1496: if(PWM.MMAXCW>PWM.MGMOD)
  4334  005AEC  C28C  FFE8         	movff	_PWM+30,wreg
  4335  005AF0  0102               	movlb	(_PWM+10) shr (0+8)
  4336  005AF2  6178               	cpfslt	(_PWM+10)& (0+255),b
  4337  005AF4  D009               	goto	l381
  4338                           ;rgl.c: 1497: {
  4339  005AF6  C07D  FFE8         	movff	_rgl+8,wreg
  4340  005AFA  6178               	cpfslt	(_PWM+10)& (0+255),b
  4341  005AFC  0012               	return	
  4342                           ;rgl.c: 1499: {
  4343  005AFE  C278  F07C         	movff	_PWM+10,_rgl+7
  4344                           ;rgl.c: 1501: rgl.xmod=PWM.MGMOD;
  4345  005B02  C278  F07D         	movff	_PWM+10,_rgl+8
  4346                           ;rgl.c: 1502: }
  4347  005B06  0012               	return	
  4348  005B08                     l381:
  4349                           ;rgl.c: 1504: else
  4350  005B08  C07D  FFE8         	movff	_rgl+8,wreg
  4351  005B0C  0102               	movlb	(_PWM+30) shr (0+8)
  4352  005B0E  618C               	cpfslt	(_PWM+30)& (0+255),b
  4353  005B10  0012               	return	
  4354                           ;rgl.c: 1507: {
  4355  005B12  C28C  F07C         	movff	_PWM+30,_rgl+7
  4356                           ;rgl.c: 1509: rgl.xmod=PWM.MMAXCW;
  4357  005B16  C28C  F07D         	movff	_PWM+30,_rgl+8
  4358                           ;rgl.c: 1510: }
  4359  005B1A  0012               	return	
  4360  005B1C                     l380:
  4361                           ;rgl.c: 1513: }
  4362  005B1C  C277  FFE8         	movff	_PWM+9,wreg
  4363  005B20  0100               	movlb	(_rgl+8) shr (0+8)
  4364  005B22  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  4365  005B24  E318               	bnc	l385
  4366  005B26  0E0A               	movlw	10
  4367  005B28  6E02               	movwf	btemp+2,c
  4368  005B2A  6A03               	clrf	btemp+3,c
  4369  005B2C  C277  FFE8         	movff	_PWM+9,wreg
  4370  005B30  C07D  F000         	movff	_rgl+8,btemp
  4371  005B34  6A01               	clrf	btemp+1,c
  4372  005B36  5E00               	subwf	btemp,f,c
  4373  005B38  0E00               	movlw	0
  4374  005B3A  5A01               	subwfb	btemp+1,f,c
  4375  005B3C  EC03  F073         	call	awmul
  4376  005B40  0100               	movlb	__Lparam shr (0+8)
  4377  005B42  C004  F0D7         	movff	btemp+4,?a_ModZgCW4
  4378  005B46  C005  F0D8         	movff	btemp+5,?a_ModZgCW4+1
  4379  005B4A  0E00               	movlw	0
  4380  005B4C  BFD8               	btfsc	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),7,b
  4381  005B4E  0EFF               	movlw	-1
  4382  005B50  6FD9               	movwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4383  005B52  6FDA               	movwf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4384  005B54  D005               	goto	l386
  4385  005B56                     l385:
  4386                           ;rgl.c: 1515: else m=0;
  4387  005B56  0100               	movlb	__Lparam shr (0+8)
  4388  005B58  6BD7               	clrf	?a_ModZgCW4^(__Lparam& (0+65280)),b
  4389  005B5A  6BD8               	clrf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),b
  4390  005B5C  6BD9               	clrf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4391  005B5E  6BDA               	clrf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4392  005B60                     l386:
  4393                           ;rgl.c: 1516: m=m/(DtCW.MAD_CW-DtCW.DAD_CW);
  4394  005B60  C229  FFE8         	movff	_DtCW+14,wreg
  4395  005B64  C228  F000         	movff	_DtCW+13,btemp
  4396  005B68  5C00               	subwf	btemp,w,c
  4397  005B6A  6E04               	movwf	btemp+4,c
  4398  005B6C  6A05               	clrf	btemp+5,c
  4399  005B6E  A0D8               	btfss	status,0,c
  4400  005B70  0605               	decf	btemp+5,f,c
  4401  005B72  6A06               	clrf	btemp+6,c
  4402  005B74  BE05               	btfsc	btemp+5,7,c
  4403  005B76  0606               	decf	btemp+6,f,c
  4404  005B78  5006               	movf	btemp+6,w,c
  4405  005B7A  6E07               	movwf	btemp+7,c
  4406  005B7C  0ED7               	movlw	low ?a_ModZgCW4
  4407  005B7E  6EE9               	movwf	fsr0l,c
  4408  005B80  0E00               	movlw	high ?a_ModZgCW4
  4409  005B82  6EEA               	movwf	fsr0h,c
  4410  005B84  EC36  F073         	call	aldiv_f
  4411                           ;rgl.c: 1517: m=m*(DtCW.AC_CW-DtCW.DAD_CW);
  4412  005B88  C229  FFE8         	movff	_DtCW+14,wreg
  4413  005B8C  C227  F000         	movff	_DtCW+12,btemp
  4414  005B90  5C00               	subwf	btemp,w,c
  4415  005B92  6E04               	movwf	btemp+4,c
  4416  005B94  6A05               	clrf	btemp+5,c
  4417  005B96  A0D8               	btfss	status,0,c
  4418  005B98  0605               	decf	btemp+5,f,c
  4419  005B9A  6A06               	clrf	btemp+6,c
  4420  005B9C  BE05               	btfsc	btemp+5,7,c
  4421  005B9E  0606               	decf	btemp+6,f,c
  4422  005BA0  5006               	movf	btemp+6,w,c
  4423  005BA2  6E07               	movwf	btemp+7,c
  4424  005BA4  0ED7               	movlw	low ?a_ModZgCW4
  4425  005BA6  6EE9               	movwf	fsr0l,c
  4426  005BA8  0E00               	movlw	high ?a_ModZgCW4
  4427  005BAA  6EEA               	movwf	fsr0h,c
  4428  005BAC  EC2C  F073         	call	almul_f
  4429                           ;rgl.c: 1518: if(m<0) m=0;
  4430  005BB0  0100               	movlb	__Lparam shr (0+8)
  4431  005BB2  AFDA               	btfss	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),7,b
  4432  005BB4  D004               	goto	l387
  4433  005BB6  6BD7               	clrf	?a_ModZgCW4^(__Lparam& (0+65280)),b
  4434  005BB8  6BD8               	clrf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),b
  4435  005BBA  6BD9               	clrf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4436  005BBC  6BDA               	clrf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4437  005BBE                     l387:
  4438                           ;rgl.c: 1519: m=m/10+PWM.MDMOD;
  4439  005BBE  0E0A               	movlw	10
  4440  005BC0  6E04               	movwf	btemp+4,c
  4441  005BC2  6A05               	clrf	btemp+5,c
  4442  005BC4  6A06               	clrf	btemp+6,c
  4443  005BC6  6A07               	clrf	btemp+7,c
  4444  005BC8  C0D7  F000         	movff	?a_ModZgCW4,btemp
  4445  005BCC  C0D8  F001         	movff	?a_ModZgCW4+1,btemp+1
  4446  005BD0  C0D9  F002         	movff	?a_ModZgCW4+2,btemp+2
  4447  005BD4  C0DA  F003         	movff	?a_ModZgCW4+3,btemp+3
  4448  005BD8  EC93  F072         	call	aldiv
  4449  005BDC  C277  FFE8         	movff	_PWM+9,wreg
  4450  005BE0  2400               	addwf	btemp,w,c
  4451  005BE2  0100               	movlb	__Lparam shr (0+8)
  4452  005BE4  6FD7               	movwf	?a_ModZgCW4^(__Lparam& (0+65280)),b
  4453  005BE6  0E00               	movlw	0
  4454  005BE8  2001               	addwfc	btemp+1,w,c
  4455  005BEA  6FD8               	movwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),b
  4456  005BEC  0E00               	movlw	0
  4457  005BEE  2002               	addwfc	btemp+2,w,c
  4458  005BF0  6FD9               	movwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4459  005BF2  0E00               	movlw	0
  4460  005BF4  2003               	addwfc	btemp+3,w,c
  4461  005BF6  6FDA               	movwf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4462                           ;rgl.c: 1520: if(m>0xff)
  4463  005BF8  51DA               	movf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),w
  4464  005BFA  0A80               	xorlw	128
  4465  005BFC  0F80               	addlw	128
  4466  005BFE  E108               	bnz	u3125
  4467  005C00  0E00               	movlw	0
  4468  005C02  5DD9               	subwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),w
  4469  005C04  E105               	bnz	u3125
  4470  005C06  0E01               	movlw	1
  4471  005C08  5DD8               	subwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),w
  4472  005C0A  E102               	bnz	u3125
  4473  005C0C  0E00               	movlw	0
  4474  005C0E  5DD7               	subwf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4475  005C10                     u3125:
  4476                           ;rgl.c: 1521: {
  4477  005C10  0100               	movlb	_rgl shr (0+8)
  4478  005C12  E304               	bnc	L20
  4479  005C14  9575               	bcf	_rgl& (0+255),2,b
  4480                           ;rgl.c: 1523: rgl.tmp_pwm=rgl.xmod;
  4481  005C16  C07D  F07E         	movff	_rgl+8,_rgl+9
  4482                           ;rgl.c: 1524: return;
  4483  005C1A  0012               	return	
  4484                           ;rgl.c: 1525: }
  4485  005C1C                     L20:
  4486  005C1C  A575               	btfss	_rgl& (0+255),2,b
  4487  005C1E  D01C               	goto	l389
  4488  005C20  C07D  F000         	movff	_rgl+8,btemp
  4489  005C24  6A01               	clrf	btemp+1,c
  4490  005C26  6A02               	clrf	btemp+2,c
  4491  005C28  6A03               	clrf	btemp+3,c
  4492  005C2A  0100               	movlb	__Lparam shr (0+8)
  4493  005C2C  51DA               	movf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),w
  4494  005C2E  0A80               	xorlw	128
  4495  005C30  6E04               	movwf	btemp+4,c
  4496  005C32  5003               	movf	btemp+3,w,c
  4497  005C34  0A80               	xorlw	128
  4498  005C36  5C04               	subwf	btemp+4,w,c
  4499  005C38  E108               	bnz	u3145
  4500  005C3A  5002               	movf	btemp+2,w,c
  4501  005C3C  5DD9               	subwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),w
  4502  005C3E  E105               	bnz	u3145
  4503  005C40  5001               	movf	btemp+1,w,c
  4504  005C42  5DD8               	subwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),w
  4505  005C44  E102               	bnz	u3145
  4506  005C46  5000               	movf	btemp,w,c
  4507  005C48  5DD7               	subwf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4508  005C4A                     u3145:
  4509  005C4A  E206               	bc	l389
  4510                           ;rgl.c: 1527: rgl.srp=(rgl.xmod-m);
  4511  005C4C  0100               	movlb	__Lparam shr (0+8)
  4512  005C4E  51D7               	movf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4513  005C50  0100               	movlb	(_rgl+8) shr (0+8)
  4514  005C52  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  4515  005C54  CFE8 F07C          	movff	wreg,_rgl+7
  4516  005C58                     l389:
  4517                           ;rgl.c: 1528: m+=rgl.srp;
  4518  005C58  C07C  FFE8         	movff	_rgl+7,wreg
  4519  005C5C  0100               	movlb	__Lparam shr (0+8)
  4520  005C5E  27D7               	addwf	?a_ModZgCW4^(__Lparam& (0+65280)),f,b
  4521  005C60  0E01               	movlw	1
  4522  005C62  B0D8               	btfsc	status,0,c
  4523  005C64  27D8               	addwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),f,b
  4524  005C66  B0D8               	btfsc	status,0,c
  4525  005C68  27D9               	addwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),f,b
  4526  005C6A  B0D8               	btfsc	status,0,c
  4527  005C6C  27DA               	addwf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),f,b
  4528                           ;rgl.c: 1529: if(m>rgl.xmod) p=rgl.xmod;
  4529  005C6E  C07D  F000         	movff	_rgl+8,btemp
  4530  005C72  6A01               	clrf	btemp+1,c
  4531  005C74  6A02               	clrf	btemp+2,c
  4532  005C76  6A03               	clrf	btemp+3,c
  4533  005C78  5003               	movf	btemp+3,w,c
  4534  005C7A  0A80               	xorlw	128
  4535  005C7C  6E04               	movwf	btemp+4,c
  4536  005C7E  51DA               	movf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),w
  4537  005C80  0A80               	xorlw	128
  4538  005C82  5C04               	subwf	btemp+4,w,c
  4539  005C84  E108               	bnz	u3165
  4540  005C86  51D9               	movf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),w
  4541  005C88  5C02               	subwf	btemp+2,w,c
  4542  005C8A  E105               	bnz	u3165
  4543  005C8C  51D8               	movf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),w
  4544  005C8E  5C01               	subwf	btemp+1,w,c
  4545  005C90  E102               	bnz	u3165
  4546  005C92  51D7               	movf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4547  005C94  5C00               	subwf	btemp,w,c
  4548  005C96                     u3165:
  4549  005C96  E203               	bc	l390
  4550  005C98  C07D  FFD9         	movff	_rgl+8,fsr2l
  4551  005C9C  D003               	goto	l391
  4552  005C9E                     l390:
  4553                           ;rgl.c: 1530: else p=m;
  4554  005C9E  0100               	movlb	__Lparam shr (0+8)
  4555  005CA0  51D7               	movf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4556  005CA2  6ED9               	movwf	fsr2l,c
  4557  005CA4                     l391:
  4558                           ;rgl.c: 1531: rgl.fz=0;
  4559  005CA4  0100               	movlb	_rgl shr (0+8)
  4560  005CA6  9575               	bcf	_rgl& (0+255),2,b
  4561                           ;rgl.c: 1532: rgl.tmp_pwm=p;
  4562  005CA8  CFD9 F07E          	movff	fsr2l,_rgl+9
  4563                           ;rgl.c: 1533: }
  4564  005CAC  0012               	return	
  4565  005CAE                     __end_of_ModZgCW4:
  4566                           ;rgl.c: 1536: void ModDkCW4(void)
  4567                           ;rgl.c: 1537: {
  4568  005CAE                     _ModDkCW4:
  4569  000000                     
  4570                           ;rgl.c: 1538: signed long m;
  4571  005CAE  0100               	movlb	_rgl shr (0+8)
  4572  005CB0  A575               	btfss	_rgl& (0+255),2,b
  4573  005CB2  0012               	return	
  4574                           ;rgl.c: 1543: ada=DtCW.AC_CW-DtCW.DAD_CW;
  4575  005CB4  C229  FFE8         	movff	_DtCW+14,wreg
  4576  005CB8  0102               	movlb	(_DtCW+12) shr (0+8)
  4577  005CBA  5D27               	subwf	(_DtCW+12)& (0+255),w,b
  4578  005CBC  6ED9               	movwf	fsr2l,c
  4579                           ;rgl.c: 1544: k=2;
  4580  005CBE  0E02               	movlw	2
  4581  005CC0  6EE1               	movwf	fsr1l,c
  4582                           ;rgl.c: 1545: if(ada<0) k=1;
  4583  005CC2  AED9               	btfss	fsr2l,7,c
  4584  005CC4  D002               	goto	l394
  4585  005CC6  0E01               	movlw	1
  4586  005CC8  6EE1               	movwf	fsr1l,c
  4587  005CCA                     l394:
  4588                           ;rgl.c: 1546: m=rgl.srp+k*ada;
  4589  005CCA  CFD9 F002          	movff	fsr2l,btemp+2
  4590  005CCE  6A03               	clrf	btemp+3,c
  4591  005CD0  BE02               	btfsc	btemp+2,7,c
  4592  005CD2  0603               	decf	btemp+3,f,c
  4593  005CD4  CFE1 F000          	movff	fsr1l,btemp
  4594  005CD8  6A01               	clrf	btemp+1,c
  4595  005CDA  EC03  F073         	call	awmul
  4596  005CDE  C07C  FFE8         	movff	_rgl+7,wreg
  4597  005CE2  2404               	addwf	btemp+4,w,c
  4598  005CE4  6E00               	movwf	btemp,c
  4599  005CE6  0E00               	movlw	0
  4600  005CE8  2005               	addwfc	btemp+5,w,c
  4601  005CEA  6E01               	movwf	btemp+1,c
  4602  005CEC  0100               	movlb	__Lparam shr (0+8)
  4603  005CEE  C000  F0D7         	movff	btemp,?a_ModDkCW4
  4604  005CF2  C001  F0D8         	movff	btemp+1,?a_ModDkCW4+1
  4605  005CF6  0E00               	movlw	0
  4606  005CF8  BFD8               	btfsc	(?a_ModDkCW4+1)^(__Lparam& (0+65280)),7,b
  4607  005CFA  0EFF               	movlw	-1
  4608  005CFC  6FD9               	movwf	(?a_ModDkCW4+2)^(__Lparam& (0+65280)),b
  4609  005CFE  6FDA               	movwf	(?a_ModDkCW4+3)^(__Lparam& (0+65280)),b
  4610                           ;rgl.c: 1547: if(m>rgl.xmod) p=rgl.xmod;
  4611  005D00  C07D  F000         	movff	_rgl+8,btemp
  4612  005D04  6A01               	clrf	btemp+1,c
  4613  005D06  6A02               	clrf	btemp+2,c
  4614  005D08  6A03               	clrf	btemp+3,c
  4615  005D0A  5003               	movf	btemp+3,w,c
  4616  005D0C  0A80               	xorlw	128
  4617  005D0E  6E04               	movwf	btemp+4,c
  4618  005D10  51DA               	movf	(?a_ModDkCW4+3)^(__Lparam& (0+65280)),w
  4619  005D12  0A80               	xorlw	128
  4620  005D14  5C04               	subwf	btemp+4,w,c
  4621  005D16  E108               	bnz	u3195
  4622  005D18  51D9               	movf	(?a_ModDkCW4+2)^(__Lparam& (0+65280)),w
  4623  005D1A  5C02               	subwf	btemp+2,w,c
  4624  005D1C  E105               	bnz	u3195
  4625  005D1E  51D8               	movf	(?a_ModDkCW4+1)^(__Lparam& (0+65280)),w
  4626  005D20  5C01               	subwf	btemp+1,w,c
  4627  005D22  E102               	bnz	u3195
  4628  005D24  51D7               	movf	?a_ModDkCW4^(__Lparam& (0+65280)),w
  4629  005D26  5C00               	subwf	btemp,w,c
  4630  005D28                     u3195:
  4631  005D28  E203               	bc	l395
  4632  005D2A  C07D  FFD9         	movff	_rgl+8,fsr2l
  4633  005D2E  D01C               	goto	l396
  4634  005D30                     l395:
  4635                           ;rgl.c: 1548: else
  4636  005D30  C277  F000         	movff	_PWM+9,btemp
  4637  005D34  6A01               	clrf	btemp+1,c
  4638  005D36  6A02               	clrf	btemp+2,c
  4639  005D38  6A03               	clrf	btemp+3,c
  4640  005D3A  0100               	movlb	__Lparam shr (0+8)
  4641  005D3C  51DA               	movf	(?a_ModDkCW4+3)^(__Lparam& (0+65280)),w
  4642  005D3E  0A80               	xorlw	128
  4643  005D40  6E04               	movwf	btemp+4,c
  4644  005D42  5003               	movf	btemp+3,w,c
  4645  005D44  0A80               	xorlw	128
  4646  005D46  5C04               	subwf	btemp+4,w,c
  4647  005D48  E108               	bnz	u3205
  4648  005D4A  5002               	movf	btemp+2,w,c
  4649  005D4C  5DD9               	subwf	(?a_ModDkCW4+2)^(__Lparam& (0+65280)),w
  4650  005D4E  E105               	bnz	u3205
  4651  005D50  5001               	movf	btemp+1,w,c
  4652  005D52  5DD8               	subwf	(?a_ModDkCW4+1)^(__Lparam& (0+65280)),w
  4653  005D54  E102               	bnz	u3205
  4654  005D56  5000               	movf	btemp,w,c
  4655  005D58  5DD7               	subwf	?a_ModDkCW4^(__Lparam& (0+65280)),w
  4656  005D5A                     u3205:
  4657  005D5A  E203               	bc	l397
  4658  005D5C  C277  FFD9         	movff	_PWM+9,fsr2l
  4659  005D60  D003               	goto	l396
  4660  005D62                     l397:
  4661                           ;rgl.c: 1550: else p=m;
  4662  005D62  0100               	movlb	__Lparam shr (0+8)
  4663  005D64  51D7               	movf	?a_ModDkCW4^(__Lparam& (0+65280)),w
  4664  005D66  6ED9               	movwf	fsr2l,c
  4665  005D68                     l396:
  4666                           ;rgl.c: 1551: rgl.tmp_pwm=p;
  4667  005D68  CFD9 F07E          	movff	fsr2l,_rgl+9
  4668                           ;rgl.c: 1552: }
  4669  005D6C  0012               	return	
  4670  005D6E                     __end_of_ModDkCW4:
  4671                           ;rgl.c: 1557: void ModPruCW4(void)
  4672                           ;rgl.c: 1558: {
  4673  005D6E                     _ModPruCW4:
  4674  000000                     
  4675                           ;rgl.c: 1559: static unsigned char l,m,o,p,q,r,s
      +                          ;
  4676  005D6E  0100               	movlb	_rgl shr (0+8)
  4677  005D70  B575               	btfsc	_rgl& (0+255),2,b
  4678  005D72  D09F               	goto	l400
  4679                           ;rgl.c: 1563: {
  4680  005D74  010E               	movlb	F1780 shr (0+8)
  4681  005D76  6BDA               	clrf	F1780& (0+255),b
  4682                           ;rgl.c: 1565: m=0;
  4683  005D78  010E               	movlb	F1781 shr (0+8)
  4684  005D7A  6BDB               	clrf	F1781& (0+255),b
  4685                           ;rgl.c: 1566: o=0;
  4686  005D7C  010E               	movlb	F1782 shr (0+8)
  4687  005D7E  6BDC               	clrf	F1782& (0+255),b
  4688                           ;rgl.c: 1567: p=0;
  4689  005D80  010E               	movlb	F1783 shr (0+8)
  4690  005D82  6BDD               	clrf	F1783& (0+255),b
  4691                           ;rgl.c: 1568: if(q<255) q++;
  4692  005D84  CEDE  F000         	movff	F1784,btemp
  4693  005D88  2800               	incf	btemp,w,c
  4694  005D8A  E002               	bz	l401
  4695  005D8C  010E               	movlb	F1784 shr (0+8)
  4696  005D8E  2BDE               	incf	F1784& (0+255),f,b
  4697  005D90                     l401:
  4698                           ;rgl.c: 1569: if(s<255) s++;
  4699  005D90  CEE0  F000         	movff	F1786,btemp
  4700  005D94  2800               	incf	btemp,w,c
  4701  005D96  E002               	bz	l402
  4702  005D98  010E               	movlb	F1786 shr (0+8)
  4703  005D9A  2BE0               	incf	F1786& (0+255),f,b
  4704  005D9C                     l402:
  4705                           ;rgl.c: 1570: if(DtCW._newPCW) s=0;
  4706  005D9C  0102               	movlb	(_DtCW+1) shr (0+8)
  4707  005D9E  A11C               	btfss	(_DtCW+1)& (0+255),0,b
  4708  005DA0  D002               	goto	l403
  4709  005DA2  010E               	movlb	F1786 shr (0+8)
  4710  005DA4  6BE0               	clrf	F1786& (0+255),b
  4711  005DA6                     l403:
  4712                           ;rgl.c: 1571: if(Tnizsza(0))
  4713  005DA6  0E00               	movlw	0
  4714  005DA8  EC4E  F036         	call	_Tnizsza
  4715  005DAC  A0D8               	btfss	status,0,c
  4716  005DAE  0012               	return	
  4717                           ;rgl.c: 1572: {
  4718  005DB0  0E0A               	movlw	10
  4719  005DB2  EC4E  F036         	call	_Tnizsza
  4720  005DB6  B0D8               	btfsc	status,0,c
  4721  005DB8  0012               	return	
  4722                           ;rgl.c: 1574: {
  4723  005DBA  0100               	movlb	__Lparam shr (0+8)
  4724  005DBC  6BD7               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4725                           ;rgl.c: 1576: if(Tstoi()&&s>=1)
  4726  005DBE  EC47  F036         	call	_Tstoi	;wreg free
  4727  005DC2  E308               	bnc	l406
  4728  005DC4  0E00               	movlw	0
  4729  005DC6  010E               	movlb	F1786 shr (0+8)
  4730  005DC8  65E0               	cpfsgt	F1786& (0+255),b
  4731  005DCA  D004               	goto	l406
  4732                           ;rgl.c: 1577: {
  4733  005DCC  6BE0               	clrf	F1786& (0+255),b
  4734                           ;rgl.c: 1579: k=2;
  4735  005DCE  0E02               	movlw	2
  4736  005DD0  0100               	movlb	__Lparam shr (0+8)
  4737  005DD2  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4738  005DD4                     l406:
  4739                           ;rgl.c: 1580: }
  4740  005DD4  0E01               	movlw	1
  4741  005DD6  EC1F  F036         	call	_Trosnie
  4742  005DDA  E310               	bnc	l407
  4743  005DDC  0E00               	movlw	0
  4744  005DDE  010E               	movlb	F1786 shr (0+8)
  4745  005DE0  65E0               	cpfsgt	F1786& (0+255),b
  4746  005DE2  D00C               	goto	l407
  4747                           ;rgl.c: 1582: {
  4748  005DE4  6BE0               	clrf	F1786& (0+255),b
  4749                           ;rgl.c: 1584: k=10;
  4750  005DE6  0E0A               	movlw	10
  4751  005DE8  0100               	movlb	__Lparam shr (0+8)
  4752  005DEA  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4753                           ;rgl.c: 1585: if(Trosnie(2)) k=8;
  4754  005DEC  0E02               	movlw	2
  4755  005DEE  EC1F  F036         	call	_Trosnie
  4756  005DF2  E306               	bnc	l409
  4757  005DF4  0E08               	movlw	8
  4758  005DF6  0100               	movlb	__Lparam shr (0+8)
  4759  005DF8  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4760                           ;rgl.c: 1586: }
  4761  005DFA  D002               	goto	l409
  4762  005DFC                     l407:
  4763                           ;rgl.c: 1587: else
  4764  005DFC  0100               	movlb	(_rgl+6) shr (0+8)
  4765  005DFE  6B7B               	clrf	(_rgl+6)& (0+255),b
  4766  005E00                     l409:
  4767                           ;rgl.c: 1589: if(PWM.BufPWM>rgl.xmod) return;
  4768  005E00  C26F  FFE8         	movff	_PWM+1,wreg
  4769  005E04  0100               	movlb	(_rgl+8) shr (0+8)
  4770  005E06  617D               	cpfslt	(_rgl+8)& (0+255),b
  4771  005E08  D001               	goto	l410
  4772  005E0A  0012               	return	
  4773  005E0C                     l410:
  4774                           ;rgl.c: 1590: tmp=rgl.xmod-PWM.BufPWM;
  4775  005E0C  C26F  FFE8         	movff	_PWM+1,wreg
  4776  005E10  0100               	movlb	(_rgl+8) shr (0+8)
  4777  005E12  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  4778  005E14  6ED9               	movwf	fsr2l,c
  4779                           ;rgl.c: 1591: if(k>tmp) k=tmp;
  4780  005E16  50D9               	movf	fsr2l,w,c
  4781  005E18  0100               	movlb	__Lparam shr (0+8)
  4782  005E1A  94D8               	bcf	status,2,c
  4783  005E1C  90D8               	bcf	status,0,c
  4784  005E1E  AFD7               	btfss	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4785  005E20  5DD7               	subwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4786  005E22  B4D8               	btfsc	status,2,c
  4787  005E24  90D8               	bcf	status,0,c
  4788  005E26  E302               	bnc	l411
  4789  005E28  50D9               	movf	fsr2l,w,c
  4790  005E2A  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4791  005E2C                     l411:
  4792                           ;rgl.c: 1592: if(PWM.MMAXCW>PWM.MGMOD)
  4793  005E2C  C28C  FFE8         	movff	_PWM+30,wreg
  4794  005E30  0102               	movlb	(_PWM+10) shr (0+8)
  4795  005E32  6178               	cpfslt	(_PWM+10)& (0+255),b
  4796  005E34  D01F               	goto	l412
  4797                           ;rgl.c: 1593: {
  4798  005E36  C07C  FFE8         	movff	_rgl+7,wreg
  4799  005E3A  0100               	movlb	__Lparam shr (0+8)
  4800  005E3C  25D7               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4801  005E3E  6E02               	movwf	btemp+2,c
  4802  005E40  6A03               	clrf	btemp+3,c
  4803  005E42  B0D8               	btfsc	status,0,c
  4804  005E44  2A03               	incf	btemp+3,f,c
  4805  005E46  BFD7               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4806  005E48  0603               	decf	btemp+3,f,c
  4807  005E4A  C278  F000         	movff	_PWM+10,btemp
  4808  005E4E  6A01               	clrf	btemp+1,c
  4809  005E50  5001               	movf	btemp+1,w,c
  4810  005E52  0A80               	xorlw	128
  4811  005E54  6E04               	movwf	btemp+4,c
  4812  005E56  5003               	movf	btemp+3,w,c
  4813  005E58  0A80               	xorlw	128
  4814  005E5A  5C04               	subwf	btemp+4,w,c
  4815  005E5C  E102               	bnz	u3375
  4816  005E5E  5002               	movf	btemp+2,w,c
  4817  005E60  5C00               	subwf	btemp,w,c
  4818  005E62                     u3375:
  4819  005E62  E203               	bc	l413
  4820  005E64  C278  F07C         	movff	_PWM+10,_rgl+7
  4821  005E68  0012               	return	
  4822  005E6A                     l413:
  4823                           ;rgl.c: 1595: else rgl.srp+=k;
  4824  005E6A  0100               	movlb	__Lparam shr (0+8)
  4825  005E6C  51D7               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4826  005E6E  0100               	movlb	(_rgl+7) shr (0+8)
  4827  005E70  277C               	addwf	(_rgl+7)& (0+255),f,b
  4828                           ;rgl.c: 1596: }
  4829  005E72  0012               	return	
  4830  005E74                     l412:
  4831                           ;rgl.c: 1597: else
  4832  005E74  C07C  FFE8         	movff	_rgl+7,wreg
  4833  005E78  0100               	movlb	__Lparam shr (0+8)
  4834  005E7A  25D7               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4835  005E7C  6E02               	movwf	btemp+2,c
  4836  005E7E  6A03               	clrf	btemp+3,c
  4837  005E80  B0D8               	btfsc	status,0,c
  4838  005E82  2A03               	incf	btemp+3,f,c
  4839  005E84  BFD7               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4840  005E86  0603               	decf	btemp+3,f,c
  4841  005E88  C28C  F000         	movff	_PWM+30,btemp
  4842  005E8C  6A01               	clrf	btemp+1,c
  4843  005E8E  5001               	movf	btemp+1,w,c
  4844  005E90  0A80               	xorlw	128
  4845  005E92  6E04               	movwf	btemp+4,c
  4846  005E94  5003               	movf	btemp+3,w,c
  4847  005E96  0A80               	xorlw	128
  4848  005E98  5C04               	subwf	btemp+4,w,c
  4849  005E9A  E102               	bnz	u3385
  4850  005E9C  5002               	movf	btemp+2,w,c
  4851  005E9E  5C00               	subwf	btemp,w,c
  4852  005EA0                     u3385:
  4853  005EA0  E203               	bc	l416
  4854  005EA2  C28C  F07C         	movff	_PWM+30,_rgl+7
  4855  005EA6  0012               	return	
  4856  005EA8                     l416:
  4857                           ;rgl.c: 1600: else rgl.srp+=k;
  4858  005EA8  0100               	movlb	__Lparam shr (0+8)
  4859  005EAA  51D7               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4860  005EAC  0100               	movlb	(_rgl+7) shr (0+8)
  4861  005EAE  277C               	addwf	(_rgl+7)& (0+255),f,b
  4862                           ;rgl.c: 1601: }
  4863  005EB0  0012               	return	
  4864                           ;rgl.c: 1604: else return;
  4865                           ;rgl.c: 1606: else return;
  4866  005EB2                     l400:
  4867                           ;rgl.c: 1608: else
  4868  005EB2  010E               	movlb	F1784 shr (0+8)
  4869  005EB4  6BDE               	clrf	F1784& (0+255),b
  4870                           ;rgl.c: 1611: r=0;
  4871  005EB6  010E               	movlb	F1785 shr (0+8)
  4872  005EB8  6BDF               	clrf	F1785& (0+255),b
  4873                           ;rgl.c: 1612: s=0;
  4874  005EBA  010E               	movlb	F1786 shr (0+8)
  4875  005EBC  6BE0               	clrf	F1786& (0+255),b
  4876                           ;rgl.c: 1613: if(m<255) m++;
  4877  005EBE  CEDB  F000         	movff	F1781,btemp
  4878  005EC2  2800               	incf	btemp,w,c
  4879  005EC4  E002               	bz	l421
  4880  005EC6  010E               	movlb	F1781 shr (0+8)
  4881  005EC8  2BDB               	incf	F1781& (0+255),f,b
  4882  005ECA                     l421:
  4883                           ;rgl.c: 1614: if(p<255) p++;
  4884  005ECA  CEDD  F000         	movff	F1783,btemp
  4885  005ECE  2800               	incf	btemp,w,c
  4886  005ED0  E002               	bz	l422
  4887  005ED2  010E               	movlb	F1783 shr (0+8)
  4888  005ED4  2BDD               	incf	F1783& (0+255),f,b
  4889  005ED6                     l422:
  4890                           ;rgl.c: 1615: if(o<255) o++;
  4891  005ED6  CEDC  F000         	movff	F1782,btemp
  4892  005EDA  2800               	incf	btemp,w,c
  4893  005EDC  E002               	bz	l423
  4894  005EDE  010E               	movlb	F1782 shr (0+8)
  4895  005EE0  2BDC               	incf	F1782& (0+255),f,b
  4896  005EE2                     l423:
  4897                           ;rgl.c: 1616: if(DtCW.DAD_CW>DtCW.AC_CW)
  4898  005EE2  C229  FFE8         	movff	_DtCW+14,wreg
  4899  005EE6  0102               	movlb	(_DtCW+12) shr (0+8)
  4900  005EE8  6127               	cpfslt	(_DtCW+12)& (0+255),b
  4901  005EEA  D060               	goto	l424
  4902                           ;rgl.c: 1617: {
  4903  005EEC  0100               	movlb	__Lparam shr (0+8)
  4904  005EEE  6BD7               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4905                           ;rgl.c: 1619: if(Trosnie(0)&&m>=2)
  4906  005EF0  0E00               	movlw	0
  4907  005EF2  EC1F  F036         	call	_Trosnie
  4908  005EF6  E310               	bnc	l425
  4909  005EF8  0E01               	movlw	1
  4910  005EFA  010E               	movlb	F1781 shr (0+8)
  4911  005EFC  65DB               	cpfsgt	F1781& (0+255),b
  4912  005EFE  D00C               	goto	l425
  4913                           ;rgl.c: 1620: {
  4914  005F00  010E               	movlb	F1783 shr (0+8)
  4915  005F02  6BDD               	clrf	F1783& (0+255),b
  4916                           ;rgl.c: 1622: o=0;
  4917  005F04  010E               	movlb	F1782 shr (0+8)
  4918  005F06  6BDC               	clrf	F1782& (0+255),b
  4919                           ;rgl.c: 1623: l=0;
  4920  005F08  010E               	movlb	F1780 shr (0+8)
  4921  005F0A  6BDA               	clrf	F1780& (0+255),b
  4922                           ;rgl.c: 1624: m=0;
  4923  005F0C  010E               	movlb	F1781 shr (0+8)
  4924  005F0E  6BDB               	clrf	F1781& (0+255),b
  4925                           ;rgl.c: 1625: k=2;
  4926  005F10  0E02               	movlw	2
  4927  005F12  0100               	movlb	__Lparam shr (0+8)
  4928  005F14  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4929                           ;rgl.c: 1626: }
  4930  005F16  D01C               	goto	l426
  4931  005F18                     l425:
  4932                           ;rgl.c: 1627: else
  4933  005F18  0E01               	movlw	1
  4934  005F1A  EC5B  F036         	call	_Twyzsza
  4935  005F1E  E316               	bnc	l427
  4936                           ;rgl.c: 1629: {
  4937  005F20  EC47  F036         	call	_Tstoi	;wreg free
  4938  005F24  E315               	bnc	l426
  4939                           ;rgl.c: 1631: {
  4940  005F26  0E01               	movlw	1
  4941  005F28  010E               	movlb	F1780 shr (0+8)
  4942  005F2A  65DA               	cpfsgt	F1780& (0+255),b
  4943  005F2C  D00A               	goto	l429
  4944                           ;rgl.c: 1633: {
  4945  005F2E  0100               	movlb	__Lparam shr (0+8)
  4946  005F30  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4947                           ;rgl.c: 1635: if(Twyzsza(3)) k=2;
  4948  005F32  0E03               	movlw	3
  4949  005F34  EC5B  F036         	call	_Twyzsza
  4950  005F38  E309               	bnc	l427
  4951  005F3A  0E02               	movlw	2
  4952  005F3C  0100               	movlb	__Lparam shr (0+8)
  4953  005F3E  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4954  005F40  D005               	goto	l427
  4955                           ;rgl.c: 1636: l=0;
  4956                           ;rgl.c: 1637: }
  4957  005F42                     l429:
  4958                           ;rgl.c: 1638: else
  4959  005F42  0100               	movlb	__Lparam shr (0+8)
  4960  005F44  6BD7               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4961                           ;rgl.c: 1641: l++;
  4962  005F46  010E               	movlb	F1780 shr (0+8)
  4963  005F48  2BDA               	incf	F1780& (0+255),f,b
  4964                           ;rgl.c: 1642: }
  4965  005F4A  D002               	goto	l426
  4966  005F4C                     l427:
  4967  005F4C  010E               	movlb	F1780 shr (0+8)
  4968  005F4E  6BDA               	clrf	F1780& (0+255),b
  4969  005F50                     l426:
  4970                           ;rgl.c: 1645: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PW
      +                          M.MDMOD;
  4971  005F50  C277  F000         	movff	_PWM+9,btemp
  4972  005F54  6A01               	clrf	btemp+1,c
  4973  005F56  C07C  F002         	movff	_rgl+7,btemp+2
  4974  005F5A  0100               	movlb	__Lparam shr (0+8)
  4975  005F5C  51D7               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4976  005F5E  5C02               	subwf	btemp+2,w,c
  4977  005F60  6EF6               	movwf	tblptrl,c
  4978  005F62  6AF7               	clrf	tblptrh,c
  4979  005F64  B0D8               	btfsc	status,0,c
  4980  005F66  2AF7               	incf	tblptrh,f,c
  4981  005F68  AFD7               	btfss	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4982  005F6A  06F7               	decf	tblptrh,f,c
  4983  005F6C  50F7               	movf	tblptrh,w,c
  4984  005F6E  0A80               	xorlw	128
  4985  005F70  6E02               	movwf	btemp+2,c
  4986  005F72  5001               	movf	btemp+1,w,c
  4987  005F74  0A80               	xorlw	128
  4988  005F76  5C02               	subwf	btemp+2,w,c
  4989  005F78  E102               	bnz	u3505
  4990  005F7A  5000               	movf	btemp,w,c
  4991  005F7C  5CF6               	subwf	tblptrl,w,c
  4992  005F7E                     u3505:
  4993  005F7E  E203               	bc	l433
  4994  005F80  C277  F07C         	movff	_PWM+9,_rgl+7
  4995  005F84  D004               	goto	l434
  4996  005F86                     l433:
  4997                           ;rgl.c: 1646: else rgl.srp-=k;
  4998  005F86  0100               	movlb	__Lparam shr (0+8)
  4999  005F88  51D7               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  5000  005F8A  0100               	movlb	(_rgl+7) shr (0+8)
  5001  005F8C  5F7C               	subwf	(_rgl+7)& (0+255),f,b
  5002  005F8E                     l434:
  5003                           ;rgl.c: 1647: if(rgl.srp>PWM.MMAXCW) rgl.srp=PWM
      +                          .MMAXCW;
  5004  005F8E  C07C  FFE8         	movff	_rgl+7,wreg
  5005  005F92  0102               	movlb	(_PWM+30) shr (0+8)
  5006  005F94  618C               	cpfslt	(_PWM+30)& (0+255),b
  5007  005F96  D002               	goto	l435
  5008  005F98  C28C  F07C         	movff	_PWM+30,_rgl+7
  5009  005F9C                     l435:
  5010                           ;rgl.c: 1648: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  5011  005F9C  C07C  FFE8         	movff	_rgl+7,wreg
  5012  005FA0  0100               	movlb	(_rgl+8) shr (0+8)
  5013  005FA2  617D               	cpfslt	(_rgl+8)& (0+255),b
  5014  005FA4  0012               	return	
  5015  005FA6  C07C  F07D         	movff	_rgl+7,_rgl+8
  5016                           ;rgl.c: 1649: return;
  5017  005FAA  0012               	return	
  5018  005FAC                     l424:
  5019                           ;rgl.c: 1651: else
  5020  005FAC  0100               	movlb	__Lparam shr (0+8)
  5021  005FAE  6BD7               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5022                           ;rgl.c: 1654: if(Tmaleje(0)&&m>=2)
  5023  005FB0  0E00               	movlw	0
  5024  005FB2  EC2C  F036         	call	_Tmaleje
  5025  005FB6  E310               	bnc	l438
  5026  005FB8  0E01               	movlw	1
  5027  005FBA  010E               	movlb	F1781 shr (0+8)
  5028  005FBC  65DB               	cpfsgt	F1781& (0+255),b
  5029  005FBE  D00C               	goto	l438
  5030                           ;rgl.c: 1655: {
  5031  005FC0  010E               	movlb	F1783 shr (0+8)
  5032  005FC2  6BDD               	clrf	F1783& (0+255),b
  5033                           ;rgl.c: 1657: o=0;
  5034  005FC4  010E               	movlb	F1782 shr (0+8)
  5035  005FC6  6BDC               	clrf	F1782& (0+255),b
  5036                           ;rgl.c: 1658: l=0;
  5037  005FC8  010E               	movlb	F1780 shr (0+8)
  5038  005FCA  6BDA               	clrf	F1780& (0+255),b
  5039                           ;rgl.c: 1659: m=0;
  5040  005FCC  010E               	movlb	F1781 shr (0+8)
  5041  005FCE  6BDB               	clrf	F1781& (0+255),b
  5042                           ;rgl.c: 1660: k=1;
  5043  005FD0  0E01               	movlw	1
  5044  005FD2  0100               	movlb	__Lparam shr (0+8)
  5045  005FD4  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5046                           ;rgl.c: 1662: }
  5047  005FD6  D015               	goto	l439
  5048  005FD8                     l438:
  5049                           ;rgl.c: 1663: else
  5050  005FD8  0E01               	movlw	1
  5051  005FDA  EC4E  F036         	call	_Tnizsza
  5052  005FDE  E30F               	bnc	l440
  5053                           ;rgl.c: 1665: {
  5054  005FE0  EC47  F036         	call	_Tstoi	;wreg free
  5055  005FE4  E30E               	bnc	l439
  5056                           ;rgl.c: 1667: {
  5057  005FE6  0E02               	movlw	2
  5058  005FE8  010E               	movlb	F1780 shr (0+8)
  5059  005FEA  65DA               	cpfsgt	F1780& (0+255),b
  5060  005FEC  D003               	goto	l442
  5061                           ;rgl.c: 1669: {
  5062  005FEE  0100               	movlb	__Lparam shr (0+8)
  5063  005FF0  6FD7               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5064  005FF2  D005               	goto	l440
  5065                           ;rgl.c: 1671: l=0;
  5066                           ;rgl.c: 1672: }
  5067  005FF4                     l442:
  5068                           ;rgl.c: 1673: else
  5069  005FF4  0100               	movlb	__Lparam shr (0+8)
  5070  005FF6  6BD7               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5071                           ;rgl.c: 1676: l++;
  5072  005FF8  010E               	movlb	F1780 shr (0+8)
  5073  005FFA  2BDA               	incf	F1780& (0+255),f,b
  5074                           ;rgl.c: 1677: }
  5075  005FFC  D002               	goto	l439
  5076  005FFE                     l440:
  5077  005FFE  010E               	movlb	F1780 shr (0+8)
  5078  006000  6BDA               	clrf	F1780& (0+255),b
  5079  006002                     l439:
  5080                           ;rgl.c: 1680: if(PWM.MMAXCW>PWM.MGMOD)
  5081  006002  C28C  FFE8         	movff	_PWM+30,wreg
  5082  006006  0102               	movlb	(_PWM+10) shr (0+8)
  5083  006008  6178               	cpfslt	(_PWM+10)& (0+255),b
  5084  00600A  D01A               	goto	l445
  5085                           ;rgl.c: 1681: {
  5086  00600C  C07C  FFE8         	movff	_rgl+7,wreg
  5087  006010  0100               	movlb	__Lparam shr (0+8)
  5088  006012  25D7               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  5089  006014  6E02               	movwf	btemp+2,c
  5090  006016  6A03               	clrf	btemp+3,c
  5091  006018  B0D8               	btfsc	status,0,c
  5092  00601A  2A03               	incf	btemp+3,f,c
  5093  00601C  BFD7               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  5094  00601E  0603               	decf	btemp+3,f,c
  5095  006020  C278  F000         	movff	_PWM+10,btemp
  5096  006024  6A01               	clrf	btemp+1,c
  5097  006026  5001               	movf	btemp+1,w,c
  5098  006028  0A80               	xorlw	128
  5099  00602A  6E04               	movwf	btemp+4,c
  5100  00602C  5003               	movf	btemp+3,w,c
  5101  00602E  0A80               	xorlw	128
  5102  006030  5C04               	subwf	btemp+4,w,c
  5103  006032  E102               	bnz	u3605
  5104  006034  5002               	movf	btemp+2,w,c
  5105  006036  5C00               	subwf	btemp,w,c
  5106  006038                     u3605:
  5107  006038  E21D               	bc	l449
  5108  00603A  C278  F07C         	movff	_PWM+10,_rgl+7
  5109  00603E  D01E               	goto	l448
  5110                           ;rgl.c: 1683: else rgl.srp+=k;
  5111                           ;rgl.c: 1684: }
  5112  006040                     l445:
  5113                           ;rgl.c: 1685: else
  5114  006040  C07C  FFE8         	movff	_rgl+7,wreg
  5115  006044  0100               	movlb	__Lparam shr (0+8)
  5116  006046  25D7               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  5117  006048  6E02               	movwf	btemp+2,c
  5118  00604A  6A03               	clrf	btemp+3,c
  5119  00604C  B0D8               	btfsc	status,0,c
  5120  00604E  2A03               	incf	btemp+3,f,c
  5121  006050  BFD7               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  5122  006052  0603               	decf	btemp+3,f,c
  5123  006054  C28C  F000         	movff	_PWM+30,btemp
  5124  006058  6A01               	clrf	btemp+1,c
  5125  00605A  5001               	movf	btemp+1,w,c
  5126  00605C  0A80               	xorlw	128
  5127  00605E  6E04               	movwf	btemp+4,c
  5128  006060  5003               	movf	btemp+3,w,c
  5129  006062  0A80               	xorlw	128
  5130  006064  5C04               	subwf	btemp+4,w,c
  5131  006066  E102               	bnz	u3615
  5132  006068  5002               	movf	btemp+2,w,c
  5133  00606A  5C00               	subwf	btemp,w,c
  5134  00606C                     u3615:
  5135  00606C  E203               	bc	l449
  5136  00606E  C28C  F07C         	movff	_PWM+30,_rgl+7
  5137  006072  D004               	goto	l448
  5138  006074                     l449:
  5139                           ;rgl.c: 1688: else rgl.srp+=k;
  5140  006074  0100               	movlb	__Lparam shr (0+8)
  5141  006076  51D7               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  5142  006078  0100               	movlb	(_rgl+7) shr (0+8)
  5143  00607A  277C               	addwf	(_rgl+7)& (0+255),f,b
  5144  00607C                     l448:
  5145                           ;rgl.c: 1689: }
  5146  00607C  C07C  FFE8         	movff	_rgl+7,wreg
  5147  006080  0100               	movlb	(_rgl+8) shr (0+8)
  5148  006082  617D               	cpfslt	(_rgl+8)& (0+255),b
  5149  006084  0012               	return	
  5150  006086  C07C  F07D         	movff	_rgl+7,_rgl+8
  5151                           ;rgl.c: 1691: return;
  5152  00608A  0012               	return	
  5153                           ;rgl.c: 1692: }
  5154  00608C                     __end_of_ModPruCW4:
  5155                           ;rgl.c: 1698: void IncMaxCW4(void)
  5156                           ;rgl.c: 1699: {
  5157  00608C                     _IncMaxCW4:
  5158  000000                     
  5159                           ;rgl.c: 1700: unsigned char k;
  5160  00608C  0100               	movlb	_rgl shr (0+8)
  5161  00608E  A575               	btfss	_rgl& (0+255),2,b
  5162  006090  D014               	goto	l453
  5163                           ;rgl.c: 1704: {
  5164  006092  C28C  FFE8         	movff	_PWM+30,wreg
  5165  006096  0102               	movlb	(_PWM+10) shr (0+8)
  5166  006098  6178               	cpfslt	(_PWM+10)& (0+255),b
  5167  00609A  D007               	goto	l454
  5168                           ;rgl.c: 1706: {
  5169  00609C  C07D  FFE8         	movff	_rgl+8,wreg
  5170  0060A0  6178               	cpfslt	(_PWM+10)& (0+255),b
  5171  0060A2  0012               	return	
  5172  0060A4  C278  F07D         	movff	_PWM+10,_rgl+8
  5173                           ;rgl.c: 1708: }
  5174  0060A8  0012               	return	
  5175  0060AA                     l454:
  5176                           ;rgl.c: 1709: else
  5177  0060AA  C07D  FFE8         	movff	_rgl+8,wreg
  5178  0060AE  0102               	movlb	(_PWM+30) shr (0+8)
  5179  0060B0  618C               	cpfslt	(_PWM+30)& (0+255),b
  5180  0060B2  0012               	return	
  5181  0060B4  C28C  F07D         	movff	_PWM+30,_rgl+8
  5182                           ;rgl.c: 1712: }
  5183  0060B8  0012               	return	
  5184  0060BA                     l453:
  5185                           ;rgl.c: 1714: }
  5186  0060BA  0E01               	movlw	1
  5187  0060BC  EC1F  F036         	call	_Trosnie
  5188  0060C0  B0D8               	btfsc	status,0,c
  5189  0060C2  0012               	return	
  5190                           ;rgl.c: 1718: k=5;
  5191  0060C4  0E05               	movlw	5
  5192  0060C6  6ED9               	movwf	fsr2l,c
  5193                           ;rgl.c: 1719: if(rgl.xmod+k>0xF0) rgl.xmod=0xF0;
  5194  0060C8  C07D  F000         	movff	_rgl+8,btemp
  5195  0060CC  6A01               	clrf	btemp+1,c
  5196  0060CE  2600               	addwf	btemp,f,c
  5197  0060D0  0E00               	movlw	0
  5198  0060D2  2201               	addwfc	btemp+1,f,c
  5199  0060D4  5001               	movf	btemp+1,w,c
  5200  0060D6  0A80               	xorlw	128
  5201  0060D8  0F80               	addlw	-128
  5202  0060DA  0EF1               	movlw	241
  5203  0060DC  B4D8               	btfsc	status,2,c
  5204  0060DE  5C00               	subwf	btemp,w,c
  5205  0060E0  E304               	bnc	l459
  5206  0060E2  0EF0               	movlw	-16
  5207  0060E4  CFE8 F07D          	movff	wreg,_rgl+8
  5208  0060E8  D003               	goto	l460
  5209  0060EA                     l459:
  5210                           ;rgl.c: 1720: else rgl.xmod+=k;
  5211  0060EA  0100               	movlb	(_rgl+8) shr (0+8)
  5212  0060EC  0E05               	movlw	5
  5213  0060EE  277D               	addwf	(_rgl+8)& (0+255),f,b
  5214  0060F0                     l460:
  5215                           ;rgl.c: 1721: if(rgl.xmod>PWM.MMAXCW) rgl.xmod=P
      +                          WM.MMAXCW;
  5216  0060F0  C07D  FFE8         	movff	_rgl+8,wreg
  5217  0060F4  0102               	movlb	(_PWM+30) shr (0+8)
  5218  0060F6  618C               	cpfslt	(_PWM+30)& (0+255),b
  5219  0060F8  0012               	return	
  5220  0060FA  C28C  F07D         	movff	_PWM+30,_rgl+8
  5221                           ;rgl.c: 1722: }
  5222  0060FE  0012               	return	
  5223  006100                     __end_of_IncMaxCW4:
  5224                           ;rgl.c: 1725: void ModPrzCW4(void)
  5225                           ;rgl.c: 1726: {
  5226  006100                     _ModPrzCW4:
  5227  000000                     
  5228                           ;rgl.c: 1727: static unsigned char trb=0;
  5229  006100  0E64               	movlw	100
  5230  006102  6E02               	movwf	btemp+2,c
  5231  006104  6A03               	clrf	btemp+3,c
  5232  006106  C277  FFE8         	movff	_PWM+9,wreg
  5233  00610A  C07E  F000         	movff	_rgl+9,btemp
  5234  00610E  6A01               	clrf	btemp+1,c
  5235  006110  5E00               	subwf	btemp,f,c
  5236  006112  0E00               	movlw	0
  5237  006114  5A01               	subwfb	btemp+1,f,c
  5238  006116  EC03  F073         	call	lwmul
  5239  00611A  C004  FFF6         	movff	btemp+4,tblptrl
  5240  00611E  C005  FFF7         	movff	btemp+5,tblptrh
  5241                           ;rgl.c: 1731: p=p/(PWM.MGMOD-PWM.MDMOD);
  5242  006122  C277  FFE8         	movff	_PWM+9,wreg
  5243  006126  C278  F002         	movff	_PWM+10,btemp+2
  5244  00612A  6A03               	clrf	btemp+3,c
  5245  00612C  5E02               	subwf	btemp+2,f,c
  5246  00612E  0E00               	movlw	0
  5247  006130  5A03               	subwfb	btemp+3,f,c
  5248  006132  CFF6 F000          	movff	tblptrl,btemp
  5249  006136  CFF7 F001          	movff	tblptrh,btemp+1
  5250  00613A  EC32  F072         	call	lwdiv
  5251  00613E  C004  FFF6         	movff	btemp+4,tblptrl
  5252  006142  C005  FFF7         	movff	btemp+5,tblptrh
  5253                           ;rgl.c: 1733: if(!rgl.nmod)
  5254  006146  0100               	movlb	_rgl shr (0+8)
  5255  006148  BB75               	btfsc	_rgl& (0+255),5,b
  5256  00614A  D066               	goto	l474
  5257                           ;rgl.c: 1734: {
  5258  00614C  010E               	movlb	F1793 shr (0+8)
  5259  00614E  6BE1               	clrf	F1793& (0+255),b
  5260                           ;rgl.c: 1736: if(p<=35)
  5261  006150  0E00               	movlw	0
  5262  006152  5CF7               	subwf	tblptrh,w,c
  5263  006154  0E24               	movlw	36
  5264  006156  B4D8               	btfsc	status,2,c
  5265  006158  5CF6               	subwf	tblptrl,w,c
  5266                           ;rgl.c: 1737: {
  5267  00615A  0E00               	movlw	0
  5268  00615C  E20F               	bc	L21
  5269  00615E  EC2C  F036         	call	_Tmaleje
  5270  006162  B0D8               	btfsc	status,0,c
  5271  006164  0012               	return	
  5272  006166  0E03               	movlw	3
  5273  006168  EC5B  F036         	call	_Twyzsza
  5274  00616C  A0D8               	btfss	status,0,c
  5275  00616E  0012               	return	
  5276                           ;rgl.c: 1739: {
  5277  006170  0E01               	movlw	1
  5278  006172  CFE8 FEE1          	movff	wreg,F1793
  5279                           ;rgl.c: 1741: rgl.nmod=1;
  5280  006176  0100               	movlb	_rgl shr (0+8)
  5281  006178  8B75               	bsf	_rgl& (0+255),5,b
  5282                           ;rgl.c: 1742: }
  5283  00617A  0C01               	retlw	1
  5284                           ;rgl.c: 1744: else
  5285  00617C                     L21:
  5286  00617C  EC2C  F036         	call	_Tmaleje
  5287  006180  B0D8               	btfsc	status,0,c
  5288  006182  0012               	return	
  5289                           ;rgl.c: 1747: {
  5290  006184  0E05               	movlw	5
  5291  006186  EC5B  F036         	call	_Twyzsza
  5292  00618A  A0D8               	btfss	status,0,c
  5293  00618C  0012               	return	
  5294                           ;rgl.c: 1749: {
  5295  00618E  C277  F000         	movff	_PWM+9,btemp
  5296  006192  6A01               	clrf	btemp+1,c
  5297  006194  C07C  F002         	movff	_rgl+7,btemp+2
  5298  006198  0EFD               	movlw	253
  5299  00619A  2402               	addwf	btemp+2,w,c
  5300  00619C  6EF6               	movwf	tblptrl,c
  5301  00619E  6AF7               	clrf	tblptrh,c
  5302  0061A0  0EFF               	movlw	255
  5303  0061A2  22F7               	addwfc	tblptrh,f,c
  5304  0061A4  50F7               	movf	tblptrh,w,c
  5305  0061A6  0A80               	xorlw	128
  5306  0061A8  6E02               	movwf	btemp+2,c
  5307  0061AA  5001               	movf	btemp+1,w,c
  5308  0061AC  0A80               	xorlw	128
  5309  0061AE  5C02               	subwf	btemp+2,w,c
  5310  0061B0  E102               	bnz	u3775
  5311  0061B2  5000               	movf	btemp,w,c
  5312  0061B4  5CF6               	subwf	tblptrl,w,c
  5313  0061B6                     u3775:
  5314  0061B6  E203               	bc	l469
  5315  0061B8  C277  F07C         	movff	_PWM+9,_rgl+7
  5316  0061BC  D003               	goto	l470
  5317  0061BE                     l469:
  5318                           ;rgl.c: 1751: else rgl.srp-=3;
  5319  0061BE  0100               	movlb	(_rgl+7) shr (0+8)
  5320  0061C0  0EFD               	movlw	-3
  5321  0061C2  277C               	addwf	(_rgl+7)& (0+255),f,b
  5322  0061C4                     l470:
  5323                           ;rgl.c: 1752: trb=2;
  5324  0061C4  0E02               	movlw	2
  5325  0061C6  CFE8 FEE1          	movff	wreg,F1793
  5326                           ;rgl.c: 1753: rgl.nmod=1;
  5327  0061CA  0100               	movlb	_rgl shr (0+8)
  5328  0061CC  8B75               	bsf	_rgl& (0+255),5,b
  5329                           ;rgl.c: 1754: return;
  5330  0061CE  0C02               	retlw	2
  5331                           ;rgl.c: 1755: }
  5332                           ;rgl.c: 1757: else return;
  5333                           ;rgl.c: 1758: }
  5334                           ;rgl.c: 1760: else
  5335  0061D0                     l475:
  5336                           ;rgl.c: 1763: {
  5337                           ;rgl.c: 1765: {
  5338  0061D0  0E03               	movlw	3
  5339  0061D2  EC5B  F036         	call	_Twyzsza
  5340  0061D6  B0D8               	btfsc	status,0,c
  5341  0061D8  0012               	return	
  5342                           ;rgl.c: 1767: {
  5343  0061DA  0E03               	movlw	3
  5344  0061DC  EC4E  F036         	call	_Tnizsza
  5345  0061E0  E208               	bc	u3820
  5346  0061E2  EC47  F036         	call	_Tstoi	;wreg free
  5347  0061E6  E205               	bc	u3820
  5348  0061E8  0E00               	movlw	0
  5349  0061EA  EC2C  F036         	call	_Tmaleje
  5350  0061EE  A0D8               	btfss	status,0,c
  5351  0061F0  0012               	return	
  5352  0061F2                     u3820:
  5353                           ;rgl.c: 1769: {
  5354  0061F2  010E               	movlb	F1793 shr (0+8)
  5355  0061F4  6BE1               	clrf	F1793& (0+255),b
  5356                           ;rgl.c: 1771: rgl.nmod=0;
  5357  0061F6  0100               	movlb	_rgl shr (0+8)
  5358  0061F8  9B75               	bcf	_rgl& (0+255),5,b
  5359                           ;rgl.c: 1772: }
  5360  0061FA  0012               	return	
  5361  0061FC                     l478:
  5362                           ;rgl.c: 1775: }
  5363                           ;rgl.c: 1777: {
  5364  0061FC  0E00               	movlw	0
  5365  0061FE  EC2C  F036         	call	_Tmaleje
  5366  006202  E205               	bc	u3860
  5367  006204  0E04               	movlw	4
  5368  006206  EC5B  F036         	call	_Twyzsza
  5369  00620A  B0D8               	btfsc	status,0,c
  5370  00620C  0012               	return	
  5371  00620E                     u3860:
  5372                           ;rgl.c: 1779: {
  5373  00620E  010E               	movlb	F1793 shr (0+8)
  5374  006210  6BE1               	clrf	F1793& (0+255),b
  5375                           ;rgl.c: 1781: rgl.nmod=0;
  5376  006212  0100               	movlb	_rgl shr (0+8)
  5377  006214  9B75               	bcf	_rgl& (0+255),5,b
  5378                           ;rgl.c: 1782: return;
  5379  006216  0012               	return	
  5380                           ;rgl.c: 1783: }
  5381  006218                     l474:
  5382  006218  CEE1  FFE8         	movff	F1793,wreg
  5383  00621C  0A01               	xorlw	1
  5384  00621E  E0D8               	bz	l475
  5385  006220  0A03               	xorlw	3
  5386  006222  E0EC               	bz	l478
  5387  006224  0012               	return	
  5388                           ;rgl.c: 1787: }
  5389  006226                     __end_of_ModPrzCW4:
  5390                           ;rgl.c: 1791: void PropCO4(void)
  5391                           ;rgl.c: 1792: {
  5392  006226                     _PropCO4:
  5393  000000                     
  5394                           ;rgl.c: 1793: if(!rgl.nmod)
  5395  006226  0100               	movlb	_rgl shr (0+8)
  5396  006228  BB75               	btfsc	_rgl& (0+255),5,b
  5397  00622A  EFCF  F035         	goto	l637
  5398                           ;rgl.c: 1794: {
  5399  00622E  0102               	movlb	_DtCO shr (0+8)
  5400  006230  B10C               	btfsc	_DtCO& (0+255),0,b
  5401  006232  D01E               	goto	l482
  5402                           ;rgl.c: 1796: {
  5403  006234  C078  FFE8         	movff	_rgl+3,wreg
  5404  006238  0A03               	xorlw	3
  5405  00623A  E102               	bnz	l483
  5406  00623C  EFA0  F035         	goto	L32
  5407                           ;rgl.c: 1798: {
  5408                           ;rgl.c: 1800: rgl.tmp_pwm=PWM.MGMOD;
  5409                           ;rgl.c: 1801: }
  5410  006240                     l483:
  5411                           ;rgl.c: 1802: else
  5412  006240  C078  FFE8         	movff	_rgl+3,wreg
  5413  006244  0A02               	xorlw	2
  5414  006246  E102               	bnz	l486
  5415  006248  EFAE  F035         	goto	L33
  5416                           ;rgl.c: 1804: {
  5417                           ;rgl.c: 1806: rgl.tmp_pwm=PWM.PROP1;
  5418                           ;rgl.c: 1807: }
  5419  00624C                     l486:
  5420                           ;rgl.c: 1808: else
  5421  00624C  C078  F000         	movff	_rgl+3,btemp
  5422  006250  0400               	decf	btemp,w,c
  5423  006252  E102               	bnz	l489
  5424  006254  EFBC  F035         	goto	L34
  5425                           ;rgl.c: 1810: {
  5426                           ;rgl.c: 1812: rgl.tmp_pwm=PWM.PROP2;
  5427                           ;rgl.c: 1813: }
  5428  006258                     l489:
  5429                           ;rgl.c: 1814: else
  5430  006258  C078  FFE8         	movff	_rgl+3,wreg
  5431  00625C  0A80               	xorlw	128
  5432  00625E  0F7F               	addlw	-129
  5433  006260  E207               	bc	l482
  5434  006262                     L35:
  5435                           ;rgl.c: 1816: {
  5436  006262  C07E  FFE8         	movff	_rgl+9,wreg
  5437  006266  0102               	movlb	(_PWM+27) shr (0+8)
  5438  006268  6189               	cpfslt	(_PWM+27)& (0+255),b
  5439  00626A  D002               	goto	l482
  5440                           ;rgl.c: 2384: rgl.tmp_pwm=PWM.PROP3;
  5441  00626C  C289  F07E         	movff	_PWM+27,_rgl+9
  5442  006270                     l640:
  5443                           ;rgl.c: 1818: rgl.tmp_pwm=PWM.PROP3;
  5444  006270                     l482:
  5445                           ;rgl.c: 1819: }
  5446  006270  C07E  FFE8         	movff	_rgl+9,wreg
  5447  006274  EF47  F061         	goto	_WriteOPWM
  5448                           ;rgl.c: 1822: }
  5449                           ;rgl.c: 1823: else WriteOPWM(PWM.MDMOD);
  5450                           ;rgl.c: 1824: }
  5451  006278                     __end_of_PropCO4:
  5452                           ;rgl.c: 1833: void StartCO2(void)
  5453                           ;rgl.c: 1834: {
  5454  006278                     _StartCO2:
  5455  000000                     
  5456                           ;rgl.c: 1835: unsigned char k;
  5457  006278  0100               	movlb	_rgl shr (0+8)
  5458  00627A  A175               	btfss	_rgl& (0+255),0,b
  5459  00627C  B375               	btfsc	_rgl& (0+255),1,b
  5460  00627E  0012               	return	
  5461                           ;rgl.c: 1838: StartRTdS(2);
  5462  006280  0E02               	movlw	2
  5463  006282  EC86  F06E         	call	_StartRTdS
  5464                           ;rgl.c: 1839: DtCO.dDCO=0;
  5465  006286  0102               	movlb	(_DtCO+9) shr (0+8)
  5466  006288  6B15               	clrf	(_DtCO+9)& (0+255),b
  5467                           ;rgl.c: 1840: DtCO.indCO=0;
  5468  00628A  0102               	movlb	(_DtCO+10) shr (0+8)
  5469  00628C  6B16               	clrf	(_DtCO+10)& (0+255),b
  5470                           ;rgl.c: 1841: DtCW.dDCW=0;
  5471  00628E  0102               	movlb	(_DtCW+8) shr (0+8)
  5472  006290  6B23               	clrf	(_DtCW+8)& (0+255),b
  5473                           ;rgl.c: 1842: DtCW.indCW=0;
  5474  006292  0102               	movlb	(_DtCW+10) shr (0+8)
  5475  006294  6B25               	clrf	(_DtCW+10)& (0+255),b
  5476                           ;rgl.c: 1843: rgl.fz=0;
  5477  006296  0100               	movlb	_rgl shr (0+8)
  5478  006298  9575               	bcf	_rgl& (0+255),2,b
  5479                           ;rgl.c: 1844: rgl.med_up=0;
  5480  00629A  9775               	bcf	_rgl& (0+255),3,b
  5481                           ;rgl.c: 1845: rgl.fast_up=0;
  5482  00629C  9975               	bcf	_rgl& (0+255),4,b
  5483                           ;rgl.c: 1849: if(PWM.MMAXCO>PWM.FIRSTPB)
  5484  00629E  C28B  FFE8         	movff	_PWM+29,wreg
  5485  0062A2  0102               	movlb	(_PWM+24) shr (0+8)
  5486  0062A4  6186               	cpfslt	(_PWM+24)& (0+255),b
  5487  0062A6  D003               	goto	l497
  5488                           ;rgl.c: 1850: {
  5489  0062A8  C286  F07D         	movff	_PWM+24,_rgl+8
  5490                           ;rgl.c: 1852: }
  5491  0062AC  D002               	goto	l498
  5492  0062AE                     l497:
  5493                           ;rgl.c: 1853: else
  5494  0062AE  C28B  F07D         	movff	_PWM+29,_rgl+8
  5495  0062B2                     l498:
  5496                           ;rgl.c: 1856: }
  5497  0062B2  0100               	movlb	(_rgl+7) shr (0+8)
  5498  0062B4  6B7C               	clrf	(_rgl+7)& (0+255),b
  5499                           ;rgl.c: 1882: rgl.ytmp=0;
  5500  0062B6  6B7B               	clrf	(_rgl+6)& (0+255),b
  5501                           ;rgl.c: 1883: rgl.nmod=0;
  5502  0062B8  9B75               	bcf	_rgl& (0+255),5,b
  5503                           ;rgl.c: 1884: rgl.del1s=0;
  5504  0062BA  9D75               	bcf	_rgl& (0+255),6,b
  5505                           ;rgl.c: 1885: rgl.deln1=0;
  5506  0062BC  9F75               	bcf	_rgl& (0+255),7,b
  5507                           ;rgl.c: 1886: rgl.inv_mod=0;
  5508  0062BE  9176               	bcf	(_rgl+1)& (0+255),0,b
  5509                           ;rgl.c: 1887: }
  5510  0062C0  0012               	return	
  5511  0062C2                     __end_of_StartCO2:
  5512                           ;rgl.c: 1890: void StartMCW2(void)
  5513                           ;rgl.c: 1891: {
  5514  0062C2                     _StartMCW2:
  5515  000000                     
  5516                           ;rgl.c: 1892: if(rgl.btco||rgl.btcw) return;
  5517  0062C2  0100               	movlb	_rgl shr (0+8)
  5518  0062C4  A175               	btfss	_rgl& (0+255),0,b
  5519  0062C6  B375               	btfsc	_rgl& (0+255),1,b
  5520  0062C8  0012               	return	
  5521                           ;rgl.c: 1893: StartRTdS(2);
  5522  0062CA  0E02               	movlw	2
  5523  0062CC  EC86  F06E         	call	_StartRTdS
  5524                           ;rgl.c: 1894: DtCO.dDCO=0;
  5525  0062D0  0102               	movlb	(_DtCO+9) shr (0+8)
  5526  0062D2  6B15               	clrf	(_DtCO+9)& (0+255),b
  5527                           ;rgl.c: 1895: DtCW.dDCW=0;
  5528  0062D4  0102               	movlb	(_DtCW+8) shr (0+8)
  5529  0062D6  6B23               	clrf	(_DtCW+8)& (0+255),b
  5530                           ;rgl.c: 1896: DtCO.indCO=0;
  5531  0062D8  0102               	movlb	(_DtCO+10) shr (0+8)
  5532  0062DA  6B16               	clrf	(_DtCO+10)& (0+255),b
  5533                           ;rgl.c: 1897: DtCW.indCW=0;
  5534  0062DC  0102               	movlb	(_DtCW+10) shr (0+8)
  5535  0062DE  6B25               	clrf	(_DtCW+10)& (0+255),b
  5536                           ;rgl.c: 1898: rgl.fz=0;
  5537  0062E0  0100               	movlb	_rgl shr (0+8)
  5538  0062E2  9575               	bcf	_rgl& (0+255),2,b
  5539                           ;rgl.c: 1899: FirstPCW2();
  5540  0062E4  D805               	call	_FirstPCW2	;wreg free
  5541                           ;rgl.c: 1900: rgl.srp=0;
  5542  0062E6  0100               	movlb	(_rgl+7) shr (0+8)
  5543  0062E8  6B7C               	clrf	(_rgl+7)& (0+255),b
  5544                           ;rgl.c: 1901: rgl.ytmp=0;
  5545  0062EA  6B7B               	clrf	(_rgl+6)& (0+255),b
  5546                           ;rgl.c: 1902: rgl.del1s=0;
  5547  0062EC  9D75               	bcf	_rgl& (0+255),6,b
  5548                           ;rgl.c: 1903: }
  5549  0062EE  0012               	return	
  5550  0062F0                     __end_of_StartMCW2:
  5551                           ;rgl.c: 1906: void FirstPCW2(void)
  5552                           ;rgl.c: 1907: {
  5553  0062F0                     _FirstPCW2:
  5554  000000                     
  5555                           ;rgl.c: 1908: if(PWM.MMAXCW>PWM.MGMOD)
  5556  0062F0  C28C  FFE8         	movff	_PWM+30,wreg
  5557  0062F4  0102               	movlb	(_PWM+10) shr (0+8)
  5558  0062F6  6178               	cpfslt	(_PWM+10)& (0+255),b
  5559  0062F8  D00B               	goto	l502
  5560                           ;rgl.c: 1909: {
  5561  0062FA  C222  FFE8         	movff	_DtCW+7,wreg
  5562  0062FE  0A80               	xorlw	128
  5563  006300  0F7F               	addlw	-129
  5564  006302  E303               	bnc	l503
  5565  006304  C278  F07D         	movff	_PWM+10,_rgl+8
  5566  006308  0012               	return	
  5567  00630A                     l503:
  5568                           ;rgl.c: 1911: else rgl.xmod=PWM.FIRSTPB;
  5569  00630A  C286  F07D         	movff	_PWM+24,_rgl+8
  5570                           ;rgl.c: 1912: }
  5571  00630E  0012               	return	
  5572  006310                     l502:
  5573                           ;rgl.c: 1913: else
  5574  006310  C222  FFE8         	movff	_DtCW+7,wreg
  5575  006314  0A80               	xorlw	128
  5576  006316  0F7F               	addlw	-129
  5577  006318  E303               	bnc	l506
  5578  00631A  C28C  F07D         	movff	_PWM+30,_rgl+8
  5579  00631E  0012               	return	
  5580  006320                     l506:
  5581                           ;rgl.c: 1916: else
  5582  006320  C28C  FFE8         	movff	_PWM+30,wreg
  5583  006324  0102               	movlb	(_PWM+24) shr (0+8)
  5584  006326  6186               	cpfslt	(_PWM+24)& (0+255),b
  5585  006328  D003               	goto	l508
  5586  00632A  C286  F07D         	movff	_PWM+24,_rgl+8
  5587  00632E  0012               	return	
  5588  006330                     l508:
  5589                           ;rgl.c: 1919: else rgl.xmod=PWM.MMAXCW;
  5590  006330  C28C  F07D         	movff	_PWM+30,_rgl+8
  5591                           ;rgl.c: 1920: }
  5592  006334  0012               	return	
  5593  006336                     __end_of_FirstPCW2:
  5594                           ;rgl.c: 1960: void ClrMod2(void)
  5595                           ;rgl.c: 1961: {
  5596  006336                     _ClrMod2:
  5597  000000                     
  5598                           ;rgl.c: 1962: rgl.fz=0;
  5599  006336  0100               	movlb	_rgl shr (0+8)
  5600  006338  9575               	bcf	_rgl& (0+255),2,b
  5601                           ;rgl.c: 1963: rgl.xmod=PWM.BufPWM;
  5602  00633A  C26F  F07D         	movff	_PWM+1,_rgl+8
  5603                           ;rgl.c: 1964: rgl.srp=0;
  5604  00633E  6B7C               	clrf	(_rgl+7)& (0+255),b
  5605                           ;rgl.c: 1965: rgl.ytmp=0;
  5606  006340  6B7B               	clrf	(_rgl+6)& (0+255),b
  5607                           ;rgl.c: 1966: rgl.del1s=0;
  5608  006342  9D75               	bcf	_rgl& (0+255),6,b
  5609                           ;rgl.c: 1967: }
  5610  006344  0012               	return	
  5611  006346                     __end_of_ClrMod2:
  5612                           ;rgl.c: 1970: void ModToCW2(void)
  5613                           ;rgl.c: 1971: {
  5614  006346                     _ModToCW2:
  5615  000000                     
  5616                           ;rgl.c: 1972: rgl.btcw=1;
  5617  006346  0100               	movlb	_rgl shr (0+8)
  5618  006348  8375               	bsf	_rgl& (0+255),1,b
  5619                           ;rgl.c: 1973: if(rgl.btco)
  5620  00634A  A175               	btfss	_rgl& (0+255),0,b
  5621  00634C  0012               	return	
  5622                           ;rgl.c: 1974: {
  5623  00634E  9175               	bcf	_rgl& (0+255),0,b
  5624                           ;rgl.c: 1976: ClrMod2();
  5625  006350  D7F2               	goto	_ClrMod2	;wreg free
  5626                           ;rgl.c: 1977: }
  5627  006352                     __end_of_ModToCW2:
  5628                           ;rgl.c: 1981: void ModToCO2(void)
  5629                           ;rgl.c: 1982: {
  5630  006352                     _ModToCO2:
  5631  000000                     
  5632                           ;rgl.c: 1983: rgl.btco=1;
  5633  006352  0100               	movlb	_rgl shr (0+8)
  5634  006354  8175               	bsf	_rgl& (0+255),0,b
  5635                           ;rgl.c: 1984: if(rgl.btcw)
  5636  006356  A375               	btfss	_rgl& (0+255),1,b
  5637  006358  0012               	return	
  5638                           ;rgl.c: 1985: {
  5639  00635A  9375               	bcf	_rgl& (0+255),1,b
  5640                           ;rgl.c: 1987: ClrMod2();
  5641  00635C  D7EC               	goto	_ClrMod2	;wreg free
  5642                           ;rgl.c: 1988: }
  5643  00635E                     __end_of_ModToCO2:
  5644                           ;rgl.c: 1992: void IncConstCW2(void)
  5645                           ;rgl.c: 1993: {
  5646  00635E                     _IncConstCW2:
  5647  000000                     
  5648                           ;rgl.c: 1994: if(!TFrosnie(0))
  5649  00635E  0E00               	movlw	0
  5650  006360  EC7D  F036         	call	_TFrosnie
  5651  006364  E208               	bc	l516
  5652                           ;rgl.c: 1995: {
  5653  006366  EC47  F036         	call	_Tstoi	;wreg free
  5654  00636A  0100               	movlb	(_rgl+6) shr (0+8)
  5655  00636C  E302               	bnc	L22
  5656  00636E  2B7B               	incf	(_rgl+6)& (0+255),f,b
  5657  006370  0C01               	retlw	1
  5658                           ;rgl.c: 1997: else rgl.ytmp=0;
  5659  006372                     L22:
  5660  006372  6B7B               	clrf	(_rgl+6)& (0+255),b
  5661                           ;rgl.c: 1998: }
  5662  006374  0012               	return	
  5663  006376                     l516:
  5664                           ;rgl.c: 1999: else rgl.ytmp=0;
  5665  006376  0100               	movlb	(_rgl+6) shr (0+8)
  5666  006378  6B7B               	clrf	(_rgl+6)& (0+255),b
  5667                           ;rgl.c: 2000: }
  5668  00637A  0012               	return	
  5669  00637C                     __end_of_IncConstCW2:
  5670                           ;rgl.c: 2002: void IncConstCO2(void)
  5671                           ;rgl.c: 2003: {
  5672  00637C                     _IncConstCO2:
  5673  000000                     
  5674                           ;rgl.c: 2004: if(Tstoi()) rgl.ytmp++;
  5675  00637C  EC47  F036         	call	_Tstoi	;wreg free
  5676  006380  0100               	movlb	(_rgl+6) shr (0+8)
  5677  006382  E302               	bnc	L23
  5678  006384  2B7B               	incf	(_rgl+6)& (0+255),f,b
  5679  006386  0C01               	retlw	1
  5680                           ;rgl.c: 2005: else rgl.ytmp=0;
  5681  006388                     L23:
  5682  006388  6B7B               	clrf	(_rgl+6)& (0+255),b
  5683                           ;rgl.c: 2006: }
  5684  00638A  0012               	return	
  5685  00638C                     __end_of_IncConstCO2:
  5686                           ;rgl.c: 2009: void ReadDataCO2(void)
  5687                           ;rgl.c: 2010: {
  5688  00638C                     _ReadDataCO2:
  5689  000000                     
  5690                           ;rgl.c: 2011: rgl.x_t=DtCO.DCO;
  5691  00638C  C214  F077         	movff	_DtCO+8,_rgl+2
  5692                           ;rgl.c: 2012: rgl.x_dt=DtCO.dDCO;
  5693  006390  C215  F079         	movff	_DtCO+9,_rgl+4
  5694                           ;rgl.c: 2013: }
  5695  006394  0012               	return	
  5696  006396                     __end_of_ReadDataCO2:
  5697                           ;rgl.c: 2016: void ReadDataCW2(void)
  5698                           ;rgl.c: 2017: {
  5699  006396                     _ReadDataCW2:
  5700  000000                     
  5701                           ;rgl.c: 2018: rgl.x_t=DtCW.DCW;
  5702  006396  C222  F077         	movff	_DtCW+7,_rgl+2
  5703                           ;rgl.c: 2019: rgl.x_f=DtCO.DCO;
  5704  00639A  C214  F078         	movff	_DtCO+8,_rgl+3
  5705                           ;rgl.c: 2020: rgl.x_dt=DtCW.dDCW;
  5706  00639E  C223  F079         	movff	_DtCW+8,_rgl+4
  5707                           ;rgl.c: 2021: rgl.x_df=DtCO.dDCO;
  5708  0063A2  C215  F07A         	movff	_DtCO+9,_rgl+5
  5709                           ;rgl.c: 2022: }
  5710  0063A6  0012               	return	
  5711  0063A8                     __end_of_ReadDataCW2:
  5712                           ;rgl.c: 2025: void ModZgCW2(void)
  5713                           ;rgl.c: 2026: {
  5714  0063A8                     _ModZgCW2:
  5715  000000                     
  5716                           ;rgl.c: 2027: signed long m;
  5717  0063A8  0E0A               	movlw	10
  5718  0063AA  EC4E  F036         	call	_Tnizsza
  5719  0063AE  E304               	bnc	l526
  5720                           ;rgl.c: 2032: {
  5721  0063B0  0E14               	movlw	20
  5722  0063B2  CFE8 FEE2          	movff	wreg,F1810
  5723                           ;rgl.c: 2034: FirstPCW2();
  5724  0063B6  DF9C               	call	_FirstPCW2	;wreg free
  5725  0063B8                     l526:
  5726                           ;rgl.c: 2035: }
  5727  0063B8  0100               	movlb	_rgl shr (0+8)
  5728  0063BA  A575               	btfss	_rgl& (0+255),2,b
  5729  0063BC  D00D               	goto	l527
  5730                           ;rgl.c: 2037: {
  5731  0063BE  0E02               	movlw	2
  5732  0063C0  EC4E  F036         	call	_Tnizsza
  5733  0063C4  A0D8               	btfss	status,0,c
  5734  0063C6  0012               	return	
  5735                           ;rgl.c: 2039: {
  5736  0063C8  C26F  F07D         	movff	_PWM+1,_rgl+8
  5737                           ;rgl.c: 2041: rgl.srp=0;
  5738  0063CC  0100               	movlb	(_rgl+7) shr (0+8)
  5739  0063CE  6B7C               	clrf	(_rgl+7)& (0+255),b
  5740                           ;rgl.c: 2042: rgl.ytmp=0;
  5741  0063D0  6B7B               	clrf	(_rgl+6)& (0+255),b
  5742                           ;rgl.c: 2043: rgl.del1s=0;
  5743  0063D2  9D75               	bcf	_rgl& (0+255),6,b
  5744                           ;rgl.c: 2044: pop=0;
  5745  0063D4  010E               	movlb	F1810 shr (0+8)
  5746  0063D6  6BE2               	clrf	F1810& (0+255),b
  5747                           ;rgl.c: 2045: }
  5748                           ;rgl.c: 2046: else return;
  5749  0063D8                     l527:
  5750                           ;rgl.c: 2047: }
  5751  0063D8  0E01               	movlw	1
  5752  0063DA  EC4E  F036         	call	_Tnizsza
  5753  0063DE  E229               	bc	l530
  5754                           ;rgl.c: 2049: {
  5755  0063E0  0100               	movlb	_rgl shr (0+8)
  5756  0063E2  8575               	bsf	_rgl& (0+255),2,b
  5757                           ;rgl.c: 2051: rgl.fast_up=0;
  5758  0063E4  9975               	bcf	_rgl& (0+255),4,b
  5759                           ;rgl.c: 2052: rgl.med_up=0;
  5760  0063E6  9775               	bcf	_rgl& (0+255),3,b
  5761                           ;rgl.c: 2053: rgl.srp=PWM.BufPWM+pop;
  5762  0063E8  CEE2  FFE8         	movff	F1810,wreg
  5763  0063EC  0102               	movlb	(_PWM+1) shr (0+8)
  5764  0063EE  256F               	addwf	(_PWM+1)& (0+255),w,b
  5765  0063F0  CFE8 F07C          	movff	wreg,_rgl+7
  5766                           ;rgl.c: 2054: rgl.xmod=PWM.BufPWM+pop;
  5767  0063F4  CEE2  FFE8         	movff	F1810,wreg
  5768  0063F8  256F               	addwf	(_PWM+1)& (0+255),w,b
  5769  0063FA  CFE8 F07D          	movff	wreg,_rgl+8
  5770                           ;rgl.c: 2055: pop=0;
  5771  0063FE  010E               	movlb	F1810 shr (0+8)
  5772  006400  6BE2               	clrf	F1810& (0+255),b
  5773                           ;rgl.c: 2056: if(PWM.MMAXCW>PWM.MGMOD)
  5774  006402  C28C  FFE8         	movff	_PWM+30,wreg
  5775  006406  0102               	movlb	(_PWM+10) shr (0+8)
  5776  006408  6178               	cpfslt	(_PWM+10)& (0+255),b
  5777  00640A  D009               	goto	l531
  5778                           ;rgl.c: 2057: {
  5779  00640C  C07D  FFE8         	movff	_rgl+8,wreg
  5780  006410  6178               	cpfslt	(_PWM+10)& (0+255),b
  5781  006412  0012               	return	
  5782                           ;rgl.c: 2059: {
  5783  006414  C278  F07C         	movff	_PWM+10,_rgl+7
  5784                           ;rgl.c: 2061: rgl.xmod=PWM.MGMOD;
  5785  006418  C278  F07D         	movff	_PWM+10,_rgl+8
  5786                           ;rgl.c: 2062: }
  5787  00641C  0012               	return	
  5788  00641E                     l531:
  5789                           ;rgl.c: 2064: else
  5790  00641E  C07D  FFE8         	movff	_rgl+8,wreg
  5791  006422  0102               	movlb	(_PWM+30) shr (0+8)
  5792  006424  618C               	cpfslt	(_PWM+30)& (0+255),b
  5793  006426  0012               	return	
  5794                           ;rgl.c: 2067: {
  5795  006428  C28C  F07C         	movff	_PWM+30,_rgl+7
  5796                           ;rgl.c: 2069: rgl.xmod=PWM.MMAXCW;
  5797  00642C  C28C  F07D         	movff	_PWM+30,_rgl+8
  5798                           ;rgl.c: 2070: }
  5799  006430  0012               	return	
  5800  006432                     l530:
  5801                           ;rgl.c: 2073: }
  5802  006432  C277  FFE8         	movff	_PWM+9,wreg
  5803  006436  0100               	movlb	(_rgl+8) shr (0+8)
  5804  006438  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  5805  00643A  E318               	bnc	l535
  5806  00643C  0E0A               	movlw	10
  5807  00643E  6E02               	movwf	btemp+2,c
  5808  006440  6A03               	clrf	btemp+3,c
  5809  006442  C277  FFE8         	movff	_PWM+9,wreg
  5810  006446  C07D  F000         	movff	_rgl+8,btemp
  5811  00644A  6A01               	clrf	btemp+1,c
  5812  00644C  5E00               	subwf	btemp,f,c
  5813  00644E  0E00               	movlw	0
  5814  006450  5A01               	subwfb	btemp+1,f,c
  5815  006452  EC03  F073         	call	awmul
  5816  006456  0100               	movlb	__Lparam shr (0+8)
  5817  006458  C004  F0D7         	movff	btemp+4,?a_ModZgCW2
  5818  00645C  C005  F0D8         	movff	btemp+5,?a_ModZgCW2+1
  5819  006460  0E00               	movlw	0
  5820  006462  BFD8               	btfsc	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),7,b
  5821  006464  0EFF               	movlw	-1
  5822  006466  6FD9               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5823  006468  6FDA               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5824  00646A  D005               	goto	l536
  5825  00646C                     l535:
  5826                           ;rgl.c: 2075: else m=0;
  5827  00646C  0100               	movlb	__Lparam shr (0+8)
  5828  00646E  6BD7               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  5829  006470  6BD8               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  5830  006472  6BD9               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5831  006474  6BDA               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5832  006476                     l536:
  5833                           ;rgl.c: 2076: m=m/(DtCW.MAD_CW-DtCW.DAD_CW);
  5834  006476  C229  FFE8         	movff	_DtCW+14,wreg
  5835  00647A  C228  F000         	movff	_DtCW+13,btemp
  5836  00647E  5C00               	subwf	btemp,w,c
  5837  006480  6E04               	movwf	btemp+4,c
  5838  006482  6A05               	clrf	btemp+5,c
  5839  006484  A0D8               	btfss	status,0,c
  5840  006486  0605               	decf	btemp+5,f,c
  5841  006488  6A06               	clrf	btemp+6,c
  5842  00648A  BE05               	btfsc	btemp+5,7,c
  5843  00648C  0606               	decf	btemp+6,f,c
  5844  00648E  5006               	movf	btemp+6,w,c
  5845  006490  6E07               	movwf	btemp+7,c
  5846  006492  0ED7               	movlw	low ?a_ModZgCW2
  5847  006494  6EE9               	movwf	fsr0l,c
  5848  006496  0E00               	movlw	high ?a_ModZgCW2
  5849  006498  6EEA               	movwf	fsr0h,c
  5850  00649A  EC36  F073         	call	aldiv_f
  5851                           ;rgl.c: 2077: m=m*(DtCW.AC_CW-DtCW.DAD_CW);
  5852  00649E  C229  FFE8         	movff	_DtCW+14,wreg
  5853  0064A2  C227  F000         	movff	_DtCW+12,btemp
  5854  0064A6  5C00               	subwf	btemp,w,c
  5855  0064A8  6E04               	movwf	btemp+4,c
  5856  0064AA  6A05               	clrf	btemp+5,c
  5857  0064AC  A0D8               	btfss	status,0,c
  5858  0064AE  0605               	decf	btemp+5,f,c
  5859  0064B0  6A06               	clrf	btemp+6,c
  5860  0064B2  BE05               	btfsc	btemp+5,7,c
  5861  0064B4  0606               	decf	btemp+6,f,c
  5862  0064B6  5006               	movf	btemp+6,w,c
  5863  0064B8  6E07               	movwf	btemp+7,c
  5864  0064BA  0ED7               	movlw	low ?a_ModZgCW2
  5865  0064BC  6EE9               	movwf	fsr0l,c
  5866  0064BE  0E00               	movlw	high ?a_ModZgCW2
  5867  0064C0  6EEA               	movwf	fsr0h,c
  5868  0064C2  EC2C  F073         	call	almul_f
  5869                           ;rgl.c: 2078: if(m<0) m=0;
  5870  0064C6  0100               	movlb	__Lparam shr (0+8)
  5871  0064C8  AFDA               	btfss	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),7,b
  5872  0064CA  D004               	goto	l537
  5873  0064CC  6BD7               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  5874  0064CE  6BD8               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  5875  0064D0  6BD9               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5876  0064D2  6BDA               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5877  0064D4                     l537:
  5878                           ;rgl.c: 2079: m=m/10+PWM.MDMOD;
  5879  0064D4  0E0A               	movlw	10
  5880  0064D6  6E04               	movwf	btemp+4,c
  5881  0064D8  6A05               	clrf	btemp+5,c
  5882  0064DA  6A06               	clrf	btemp+6,c
  5883  0064DC  6A07               	clrf	btemp+7,c
  5884  0064DE  C0D7  F000         	movff	?a_ModZgCW2,btemp
  5885  0064E2  C0D8  F001         	movff	?a_ModZgCW2+1,btemp+1
  5886  0064E6  C0D9  F002         	movff	?a_ModZgCW2+2,btemp+2
  5887  0064EA  C0DA  F003         	movff	?a_ModZgCW2+3,btemp+3
  5888  0064EE  EC93  F072         	call	aldiv
  5889  0064F2  C277  FFE8         	movff	_PWM+9,wreg
  5890  0064F6  2400               	addwf	btemp,w,c
  5891  0064F8  0100               	movlb	__Lparam shr (0+8)
  5892  0064FA  6FD7               	movwf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  5893  0064FC  0E00               	movlw	0
  5894  0064FE  2001               	addwfc	btemp+1,w,c
  5895  006500  6FD8               	movwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  5896  006502  0E00               	movlw	0
  5897  006504  2002               	addwfc	btemp+2,w,c
  5898  006506  6FD9               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5899  006508  0E00               	movlw	0
  5900  00650A  2003               	addwfc	btemp+3,w,c
  5901  00650C  6FDA               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5902                           ;rgl.c: 2080: if(m>0xff)
  5903  00650E  51DA               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  5904  006510  0A80               	xorlw	128
  5905  006512  0F80               	addlw	128
  5906  006514  E108               	bnz	u4225
  5907  006516  0E00               	movlw	0
  5908  006518  5DD9               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  5909  00651A  E105               	bnz	u4225
  5910  00651C  0E01               	movlw	1
  5911  00651E  5DD8               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  5912  006520  E102               	bnz	u4225
  5913  006522  0E00               	movlw	0
  5914  006524  5DD7               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5915  006526                     u4225:
  5916                           ;rgl.c: 2081: {
  5917  006526  0100               	movlb	_rgl shr (0+8)
  5918  006528  E304               	bnc	L24
  5919  00652A  9575               	bcf	_rgl& (0+255),2,b
  5920                           ;rgl.c: 2083: rgl.tmp_pwm=rgl.xmod;
  5921  00652C  C07D  F07E         	movff	_rgl+8,_rgl+9
  5922                           ;rgl.c: 2084: return;
  5923  006530  0012               	return	
  5924                           ;rgl.c: 2085: }
  5925  006532                     L24:
  5926  006532  A575               	btfss	_rgl& (0+255),2,b
  5927  006534  D01C               	goto	l539
  5928  006536  C07D  F000         	movff	_rgl+8,btemp
  5929  00653A  6A01               	clrf	btemp+1,c
  5930  00653C  6A02               	clrf	btemp+2,c
  5931  00653E  6A03               	clrf	btemp+3,c
  5932  006540  0100               	movlb	__Lparam shr (0+8)
  5933  006542  51DA               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  5934  006544  0A80               	xorlw	128
  5935  006546  6E04               	movwf	btemp+4,c
  5936  006548  5003               	movf	btemp+3,w,c
  5937  00654A  0A80               	xorlw	128
  5938  00654C  5C04               	subwf	btemp+4,w,c
  5939  00654E  E108               	bnz	u4245
  5940  006550  5002               	movf	btemp+2,w,c
  5941  006552  5DD9               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  5942  006554  E105               	bnz	u4245
  5943  006556  5001               	movf	btemp+1,w,c
  5944  006558  5DD8               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  5945  00655A  E102               	bnz	u4245
  5946  00655C  5000               	movf	btemp,w,c
  5947  00655E  5DD7               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5948  006560                     u4245:
  5949  006560  E206               	bc	l539
  5950                           ;rgl.c: 2087: rgl.srp=(rgl.xmod-m);
  5951  006562  0100               	movlb	__Lparam shr (0+8)
  5952  006564  51D7               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5953  006566  0100               	movlb	(_rgl+8) shr (0+8)
  5954  006568  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  5955  00656A  CFE8 F07C          	movff	wreg,_rgl+7
  5956  00656E                     l539:
  5957                           ;rgl.c: 2088: m+=rgl.srp;
  5958  00656E  C07C  FFE8         	movff	_rgl+7,wreg
  5959  006572  0100               	movlb	__Lparam shr (0+8)
  5960  006574  27D7               	addwf	?a_ModZgCW2^(__Lparam& (0+65280)),f,b
  5961  006576  0E01               	movlw	1
  5962  006578  B0D8               	btfsc	status,0,c
  5963  00657A  27D8               	addwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),f,b
  5964  00657C  B0D8               	btfsc	status,0,c
  5965  00657E  27D9               	addwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),f,b
  5966  006580  B0D8               	btfsc	status,0,c
  5967  006582  27DA               	addwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),f,b
  5968                           ;rgl.c: 2089: if(m>rgl.xmod) p=rgl.xmod;
  5969  006584  C07D  F000         	movff	_rgl+8,btemp
  5970  006588  6A01               	clrf	btemp+1,c
  5971  00658A  6A02               	clrf	btemp+2,c
  5972  00658C  6A03               	clrf	btemp+3,c
  5973  00658E  5003               	movf	btemp+3,w,c
  5974  006590  0A80               	xorlw	128
  5975  006592  6E04               	movwf	btemp+4,c
  5976  006594  51DA               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  5977  006596  0A80               	xorlw	128
  5978  006598  5C04               	subwf	btemp+4,w,c
  5979  00659A  E108               	bnz	u4265
  5980  00659C  51D9               	movf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  5981  00659E  5C02               	subwf	btemp+2,w,c
  5982  0065A0  E105               	bnz	u4265
  5983  0065A2  51D8               	movf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  5984  0065A4  5C01               	subwf	btemp+1,w,c
  5985  0065A6  E102               	bnz	u4265
  5986  0065A8  51D7               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5987  0065AA  5C00               	subwf	btemp,w,c
  5988  0065AC                     u4265:
  5989  0065AC  E203               	bc	l540
  5990  0065AE  C07D  FFD9         	movff	_rgl+8,fsr2l
  5991  0065B2  D003               	goto	l541
  5992  0065B4                     l540:
  5993                           ;rgl.c: 2090: else p=m;
  5994  0065B4  0100               	movlb	__Lparam shr (0+8)
  5995  0065B6  51D7               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5996  0065B8  6ED9               	movwf	fsr2l,c
  5997  0065BA                     l541:
  5998                           ;rgl.c: 2091: rgl.fz=0;
  5999  0065BA  0100               	movlb	_rgl shr (0+8)
  6000  0065BC  9575               	bcf	_rgl& (0+255),2,b
  6001                           ;rgl.c: 2092: rgl.tmp_pwm=p;
  6002  0065BE  CFD9 F07E          	movff	fsr2l,_rgl+9
  6003                           ;rgl.c: 2093: }
  6004  0065C2  0012               	return	
  6005  0065C4                     __end_of_ModZgCW2:
  6006                           ;rgl.c: 2096: void ModDkCW2(void)
  6007                           ;rgl.c: 2097: {
  6008  0065C4                     _ModDkCW2:
  6009  000000                     
  6010                           ;rgl.c: 2098: signed long m;
  6011  0065C4  0100               	movlb	_rgl shr (0+8)
  6012  0065C6  A575               	btfss	_rgl& (0+255),2,b
  6013  0065C8  0012               	return	
  6014                           ;rgl.c: 2103: ada=DtCW.AC_CW-DtCW.DAD_CW;
  6015  0065CA  C229  FFE8         	movff	_DtCW+14,wreg
  6016  0065CE  0102               	movlb	(_DtCW+12) shr (0+8)
  6017  0065D0  5D27               	subwf	(_DtCW+12)& (0+255),w,b
  6018  0065D2  6ED9               	movwf	fsr2l,c
  6019                           ;rgl.c: 2104: k=9;
  6020  0065D4  0E09               	movlw	9
  6021  0065D6  6EE1               	movwf	fsr1l,c
  6022                           ;rgl.c: 2105: if(ada<0) k=8;
  6023  0065D8  AED9               	btfss	fsr2l,7,c
  6024  0065DA  D002               	goto	l544
  6025  0065DC  0E08               	movlw	8
  6026  0065DE  6EE1               	movwf	fsr1l,c
  6027  0065E0                     l544:
  6028                           ;rgl.c: 2106: m=rgl.srp+k*ada;
  6029  0065E0  CFD9 F002          	movff	fsr2l,btemp+2
  6030  0065E4  6A03               	clrf	btemp+3,c
  6031  0065E6  BE02               	btfsc	btemp+2,7,c
  6032  0065E8  0603               	decf	btemp+3,f,c
  6033  0065EA  CFE1 F000          	movff	fsr1l,btemp
  6034  0065EE  6A01               	clrf	btemp+1,c
  6035  0065F0  EC03  F073         	call	awmul
  6036  0065F4  C07C  FFE8         	movff	_rgl+7,wreg
  6037  0065F8  2404               	addwf	btemp+4,w,c
  6038  0065FA  6E00               	movwf	btemp,c
  6039  0065FC  0E00               	movlw	0
  6040  0065FE  2005               	addwfc	btemp+5,w,c
  6041  006600  6E01               	movwf	btemp+1,c
  6042  006602  0100               	movlb	__Lparam shr (0+8)
  6043  006604  C000  F0D7         	movff	btemp,?a_ModDkCW2
  6044  006608  C001  F0D8         	movff	btemp+1,?a_ModDkCW2+1
  6045  00660C  0E00               	movlw	0
  6046  00660E  BFD8               	btfsc	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),7,b
  6047  006610  0EFF               	movlw	-1
  6048  006612  6FD9               	movwf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),b
  6049  006614  6FDA               	movwf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),b
  6050                           ;rgl.c: 2107: if(m>rgl.xmod) p=rgl.xmod;
  6051  006616  C07D  F000         	movff	_rgl+8,btemp
  6052  00661A  6A01               	clrf	btemp+1,c
  6053  00661C  6A02               	clrf	btemp+2,c
  6054  00661E  6A03               	clrf	btemp+3,c
  6055  006620  5003               	movf	btemp+3,w,c
  6056  006622  0A80               	xorlw	128
  6057  006624  6E04               	movwf	btemp+4,c
  6058  006626  51DA               	movf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),w
  6059  006628  0A80               	xorlw	128
  6060  00662A  5C04               	subwf	btemp+4,w,c
  6061  00662C  E108               	bnz	u4295
  6062  00662E  51D9               	movf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),w
  6063  006630  5C02               	subwf	btemp+2,w,c
  6064  006632  E105               	bnz	u4295
  6065  006634  51D8               	movf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),w
  6066  006636  5C01               	subwf	btemp+1,w,c
  6067  006638  E102               	bnz	u4295
  6068  00663A  51D7               	movf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  6069  00663C  5C00               	subwf	btemp,w,c
  6070  00663E                     u4295:
  6071  00663E  E203               	bc	l545
  6072  006640  C07D  FFD9         	movff	_rgl+8,fsr2l
  6073  006644  D01C               	goto	l546
  6074  006646                     l545:
  6075                           ;rgl.c: 2108: else
  6076  006646  C277  F000         	movff	_PWM+9,btemp
  6077  00664A  6A01               	clrf	btemp+1,c
  6078  00664C  6A02               	clrf	btemp+2,c
  6079  00664E  6A03               	clrf	btemp+3,c
  6080  006650  0100               	movlb	__Lparam shr (0+8)
  6081  006652  51DA               	movf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),w
  6082  006654  0A80               	xorlw	128
  6083  006656  6E04               	movwf	btemp+4,c
  6084  006658  5003               	movf	btemp+3,w,c
  6085  00665A  0A80               	xorlw	128
  6086  00665C  5C04               	subwf	btemp+4,w,c
  6087  00665E  E108               	bnz	u4305
  6088  006660  5002               	movf	btemp+2,w,c
  6089  006662  5DD9               	subwf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),w
  6090  006664  E105               	bnz	u4305
  6091  006666  5001               	movf	btemp+1,w,c
  6092  006668  5DD8               	subwf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),w
  6093  00666A  E102               	bnz	u4305
  6094  00666C  5000               	movf	btemp,w,c
  6095  00666E  5DD7               	subwf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  6096  006670                     u4305:
  6097  006670  E203               	bc	l547
  6098  006672  C277  FFD9         	movff	_PWM+9,fsr2l
  6099  006676  D003               	goto	l546
  6100  006678                     l547:
  6101                           ;rgl.c: 2110: else p=m;
  6102  006678  0100               	movlb	__Lparam shr (0+8)
  6103  00667A  51D7               	movf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  6104  00667C  6ED9               	movwf	fsr2l,c
  6105  00667E                     l546:
  6106                           ;rgl.c: 2111: rgl.tmp_pwm=p;
  6107  00667E  CFD9 F07E          	movff	fsr2l,_rgl+9
  6108                           ;rgl.c: 2112: }
  6109  006682  0012               	return	
  6110  006684                     __end_of_ModDkCW2:
  6111                           ;rgl.c: 2117: void ModPruCW2(void)
  6112                           ;rgl.c: 2118: {
  6113  006684                     _ModPruCW2:
  6114  000000                     
  6115                           ;rgl.c: 2119: static unsigned char l,m,o,p,q,r,s
      +                          ;
  6116  006684  0100               	movlb	_rgl shr (0+8)
  6117  006686  B575               	btfsc	_rgl& (0+255),2,b
  6118  006688  D0AF               	goto	l550
  6119                           ;rgl.c: 2123: {
  6120  00668A  010E               	movlb	F1817 shr (0+8)
  6121  00668C  6BE3               	clrf	F1817& (0+255),b
  6122                           ;rgl.c: 2125: m=0;
  6123  00668E  010E               	movlb	F1818 shr (0+8)
  6124  006690  6BE4               	clrf	F1818& (0+255),b
  6125                           ;rgl.c: 2126: o=0;
  6126  006692  010E               	movlb	F1819 shr (0+8)
  6127  006694  6BE5               	clrf	F1819& (0+255),b
  6128                           ;rgl.c: 2127: p=0;
  6129  006696  010E               	movlb	F1820 shr (0+8)
  6130  006698  6BE6               	clrf	F1820& (0+255),b
  6131                           ;rgl.c: 2128: if(q<255) q++;
  6132  00669A  CEE7  F000         	movff	F1821,btemp
  6133  00669E  2800               	incf	btemp,w,c
  6134  0066A0  E002               	bz	l551
  6135  0066A2  010E               	movlb	F1821 shr (0+8)
  6136  0066A4  2BE7               	incf	F1821& (0+255),f,b
  6137  0066A6                     l551:
  6138                           ;rgl.c: 2129: if(s<255) s++;
  6139  0066A6  CEE9  F000         	movff	F1823,btemp
  6140  0066AA  2800               	incf	btemp,w,c
  6141  0066AC  E002               	bz	l552
  6142  0066AE  010E               	movlb	F1823 shr (0+8)
  6143  0066B0  2BE9               	incf	F1823& (0+255),f,b
  6144  0066B2                     l552:
  6145                           ;rgl.c: 2130: if(DtCW._newPCW) s=0;
  6146  0066B2  0102               	movlb	(_DtCW+1) shr (0+8)
  6147  0066B4  A11C               	btfss	(_DtCW+1)& (0+255),0,b
  6148  0066B6  D002               	goto	l553
  6149  0066B8  010E               	movlb	F1823 shr (0+8)
  6150  0066BA  6BE9               	clrf	F1823& (0+255),b
  6151  0066BC                     l553:
  6152                           ;rgl.c: 2131: if(Tnizsza(0))
  6153  0066BC  0E00               	movlw	0
  6154  0066BE  DAEE               	call	_Tnizsza
  6155  0066C0  A0D8               	btfss	status,0,c
  6156  0066C2  0012               	return	
  6157                           ;rgl.c: 2132: {
  6158  0066C4  0E0A               	movlw	10
  6159  0066C6  DAEA               	call	_Tnizsza
  6160  0066C8  B0D8               	btfsc	status,0,c
  6161  0066CA  0012               	return	
  6162                           ;rgl.c: 2134: {
  6163  0066CC  0100               	movlb	__Lparam shr (0+8)
  6164  0066CE  6BD7               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6165                           ;rgl.c: 2136: if((Trosnie(1)||TFrosnie(1))&&s>=1
      +                          )
  6166  0066D0  0E01               	movlw	1
  6167  0066D2  DAB5               	call	_Trosnie
  6168  0066D4  E203               	bc	u4390
  6169  0066D6  0E01               	movlw	1
  6170  0066D8  DB10               	call	_TFrosnie
  6171  0066DA  E310               	bnc	l556
  6172  0066DC                     u4390:
  6173  0066DC  0E00               	movlw	0
  6174  0066DE  010E               	movlb	F1823 shr (0+8)
  6175  0066E0  65E9               	cpfsgt	F1823& (0+255),b
  6176  0066E2  D00C               	goto	l556
  6177                           ;rgl.c: 2137: {
  6178  0066E4  6BE9               	clrf	F1823& (0+255),b
  6179                           ;rgl.c: 2139: k=10;
  6180  0066E6  0E0A               	movlw	10
  6181  0066E8  0100               	movlb	__Lparam shr (0+8)
  6182  0066EA  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6183                           ;rgl.c: 2140: if(Trosnie(2)||TFrosnie(2)) k=8;
  6184  0066EC  0E02               	movlw	2
  6185  0066EE  DAA7               	call	_Trosnie
  6186  0066F0  E203               	bc	u4440
  6187  0066F2  0E02               	movlw	2
  6188  0066F4  DB02               	call	_TFrosnie
  6189  0066F6  E31E               	bnc	l558
  6190  0066F8                     u4440:
  6191  0066F8  0E08               	movlw	8
  6192  0066FA  D009               	goto	L5
  6193                           ;rgl.c: 2141: }
  6194  0066FC                     l556:
  6195                           ;rgl.c: 2142: else
  6196  0066FC  0E00               	movlw	0
  6197  0066FE  DB0A               	call	_TFmaleje
  6198  006700  E309               	bnc	l559
  6199  006702  0E00               	movlw	0
  6200  006704  010E               	movlb	F1821 shr (0+8)
  6201  006706  65E7               	cpfsgt	F1821& (0+255),b
  6202  006708  D005               	goto	l559
  6203                           ;rgl.c: 2144: {
  6204  00670A  6BE7               	clrf	F1821& (0+255),b
  6205                           ;rgl.c: 2146: k=6;
  6206  00670C  0E06               	movlw	6
  6207  00670E                     L5:
  6208  00670E  0100               	movlb	__Lparam shr (0+8)
  6209  006710  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6210                           ;rgl.c: 2147: }else
  6211  006712  D010               	goto	l558
  6212  006714                     l559:
  6213                           ;rgl.c: 2148: if(TFstoi())
  6214  006714  DB1A               	call	_TFstoi	;wreg free
  6215  006716  E30E               	bnc	l558
  6216                           ;rgl.c: 2149: {
  6217  006718  0E00               	movlw	0
  6218  00671A  010E               	movlb	F1822 shr (0+8)
  6219  00671C  65E8               	cpfsgt	F1822& (0+255),b
  6220  00671E  D006               	goto	l562
  6221                           ;rgl.c: 2151: {
  6222  006720  0E06               	movlw	6
  6223  006722  0100               	movlb	__Lparam shr (0+8)
  6224  006724  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6225                           ;rgl.c: 2153: r=0;
  6226  006726  010E               	movlb	F1822 shr (0+8)
  6227  006728  6BE8               	clrf	F1822& (0+255),b
  6228                           ;rgl.c: 2154: }
  6229  00672A  D004               	goto	l558
  6230  00672C                     l562:
  6231                           ;rgl.c: 2155: else
  6232  00672C  0100               	movlb	__Lparam shr (0+8)
  6233  00672E  6BD7               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6234                           ;rgl.c: 2158: r++;
  6235  006730  010E               	movlb	F1822 shr (0+8)
  6236  006732  2BE8               	incf	F1822& (0+255),f,b
  6237  006734                     l558:
  6238                           ;rgl.c: 2159: }
  6239  006734  0100               	movlb	(_rgl+6) shr (0+8)
  6240  006736  6B7B               	clrf	(_rgl+6)& (0+255),b
  6241                           ;rgl.c: 2162: if(PWM.BufPWM>rgl.xmod) return;
  6242  006738  C26F  FFE8         	movff	_PWM+1,wreg
  6243  00673C  617D               	cpfslt	(_rgl+8)& (0+255),b
  6244  00673E  D001               	goto	l564
  6245  006740  0012               	return	
  6246  006742                     l564:
  6247                           ;rgl.c: 2163: tmp=rgl.xmod-PWM.BufPWM;
  6248  006742  C26F  FFE8         	movff	_PWM+1,wreg
  6249  006746  0100               	movlb	(_rgl+8) shr (0+8)
  6250  006748  5D7D               	subwf	(_rgl+8)& (0+255),w,b
  6251  00674A  6ED9               	movwf	fsr2l,c
  6252                           ;rgl.c: 2164: if(k>tmp) k=tmp;
  6253  00674C  50D9               	movf	fsr2l,w,c
  6254  00674E  0100               	movlb	__Lparam shr (0+8)
  6255  006750  94D8               	bcf	status,2,c
  6256  006752  90D8               	bcf	status,0,c
  6257  006754  AFD7               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6258  006756  5DD7               	subwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6259  006758  B4D8               	btfsc	status,2,c
  6260  00675A  90D8               	bcf	status,0,c
  6261  00675C  E302               	bnc	l565
  6262  00675E  50D9               	movf	fsr2l,w,c
  6263  006760  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6264  006762                     l565:
  6265                           ;rgl.c: 2167: if(PWM.MMAXCW>PWM.MGMOD)
  6266  006762  C28C  FFE8         	movff	_PWM+30,wreg
  6267  006766  0102               	movlb	(_PWM+10) shr (0+8)
  6268  006768  6178               	cpfslt	(_PWM+10)& (0+255),b
  6269  00676A  D01F               	goto	l566
  6270                           ;rgl.c: 2168: {
  6271  00676C  C07C  FFE8         	movff	_rgl+7,wreg
  6272  006770  0100               	movlb	__Lparam shr (0+8)
  6273  006772  25D7               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6274  006774  6E02               	movwf	btemp+2,c
  6275  006776  6A03               	clrf	btemp+3,c
  6276  006778  B0D8               	btfsc	status,0,c
  6277  00677A  2A03               	incf	btemp+3,f,c
  6278  00677C  BFD7               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6279  00677E  0603               	decf	btemp+3,f,c
  6280  006780  C278  F000         	movff	_PWM+10,btemp
  6281  006784  6A01               	clrf	btemp+1,c
  6282  006786  5001               	movf	btemp+1,w,c
  6283  006788  0A80               	xorlw	128
  6284  00678A  6E04               	movwf	btemp+4,c
  6285  00678C  5003               	movf	btemp+3,w,c
  6286  00678E  0A80               	xorlw	128
  6287  006790  5C04               	subwf	btemp+4,w,c
  6288  006792  E102               	bnz	u4535
  6289  006794  5002               	movf	btemp+2,w,c
  6290  006796  5C00               	subwf	btemp,w,c
  6291  006798                     u4535:
  6292  006798  E203               	bc	l567
  6293  00679A  C278  F07C         	movff	_PWM+10,_rgl+7
  6294  00679E  0012               	return	
  6295  0067A0                     l567:
  6296                           ;rgl.c: 2170: else rgl.srp+=k;
  6297  0067A0  0100               	movlb	__Lparam shr (0+8)
  6298  0067A2  51D7               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6299  0067A4  0100               	movlb	(_rgl+7) shr (0+8)
  6300  0067A6  277C               	addwf	(_rgl+7)& (0+255),f,b
  6301                           ;rgl.c: 2171: }
  6302  0067A8  0012               	return	
  6303  0067AA                     l566:
  6304                           ;rgl.c: 2172: else
  6305  0067AA  C07C  FFE8         	movff	_rgl+7,wreg
  6306  0067AE  0100               	movlb	__Lparam shr (0+8)
  6307  0067B0  25D7               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6308  0067B2  6E02               	movwf	btemp+2,c
  6309  0067B4  6A03               	clrf	btemp+3,c
  6310  0067B6  B0D8               	btfsc	status,0,c
  6311  0067B8  2A03               	incf	btemp+3,f,c
  6312  0067BA  BFD7               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6313  0067BC  0603               	decf	btemp+3,f,c
  6314  0067BE  C28C  F000         	movff	_PWM+30,btemp
  6315  0067C2  6A01               	clrf	btemp+1,c
  6316  0067C4  5001               	movf	btemp+1,w,c
  6317  0067C6  0A80               	xorlw	128
  6318  0067C8  6E04               	movwf	btemp+4,c
  6319  0067CA  5003               	movf	btemp+3,w,c
  6320  0067CC  0A80               	xorlw	128
  6321  0067CE  5C04               	subwf	btemp+4,w,c
  6322  0067D0  E102               	bnz	u4545
  6323  0067D2  5002               	movf	btemp+2,w,c
  6324  0067D4  5C00               	subwf	btemp,w,c
  6325  0067D6                     u4545:
  6326  0067D6  E203               	bc	l570
  6327  0067D8  C28C  F07C         	movff	_PWM+30,_rgl+7
  6328  0067DC  0012               	return	
  6329  0067DE                     l570:
  6330                           ;rgl.c: 2175: else rgl.srp+=k;
  6331  0067DE  0100               	movlb	__Lparam shr (0+8)
  6332  0067E0  51D7               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6333  0067E2  0100               	movlb	(_rgl+7) shr (0+8)
  6334  0067E4  277C               	addwf	(_rgl+7)& (0+255),f,b
  6335                           ;rgl.c: 2176: }
  6336  0067E6  0012               	return	
  6337                           ;rgl.c: 2179: else return;
  6338                           ;rgl.c: 2181: else return;
  6339  0067E8                     l550:
  6340                           ;rgl.c: 2183: else
  6341  0067E8  010E               	movlb	F1821 shr (0+8)
  6342  0067EA  6BE7               	clrf	F1821& (0+255),b
  6343                           ;rgl.c: 2186: r=0;
  6344  0067EC  010E               	movlb	F1822 shr (0+8)
  6345  0067EE  6BE8               	clrf	F1822& (0+255),b
  6346                           ;rgl.c: 2187: s=0;
  6347  0067F0  010E               	movlb	F1823 shr (0+8)
  6348  0067F2  6BE9               	clrf	F1823& (0+255),b
  6349                           ;rgl.c: 2188: if(m<255) m++;
  6350  0067F4  CEE4  F000         	movff	F1818,btemp
  6351  0067F8  2800               	incf	btemp,w,c
  6352  0067FA  E002               	bz	l575
  6353  0067FC  010E               	movlb	F1818 shr (0+8)
  6354  0067FE  2BE4               	incf	F1818& (0+255),f,b
  6355  006800                     l575:
  6356                           ;rgl.c: 2189: if(p<255) p++;
  6357  006800  CEE6  F000         	movff	F1820,btemp
  6358  006804  2800               	incf	btemp,w,c
  6359  006806  E002               	bz	l576
  6360  006808  010E               	movlb	F1820 shr (0+8)
  6361  00680A  2BE6               	incf	F1820& (0+255),f,b
  6362  00680C                     l576:
  6363                           ;rgl.c: 2190: if(o<255) o++;
  6364  00680C  CEE5  F000         	movff	F1819,btemp
  6365  006810  2800               	incf	btemp,w,c
  6366  006812  E002               	bz	l577
  6367  006814  010E               	movlb	F1819 shr (0+8)
  6368  006816  2BE5               	incf	F1819& (0+255),f,b
  6369  006818                     l577:
  6370                           ;rgl.c: 2191: if(DtCW.DAD_CW>DtCW.AC_CW)
  6371  006818  C229  FFE8         	movff	_DtCW+14,wreg
  6372  00681C  0102               	movlb	(_DtCW+12) shr (0+8)
  6373  00681E  6127               	cpfslt	(_DtCW+12)& (0+255),b
  6374  006820  D087               	goto	l578
  6375                           ;rgl.c: 2192: {
  6376  006822  0100               	movlb	__Lparam shr (0+8)
  6377  006824  6BD7               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6378                           ;rgl.c: 2194: if(TFmaleje(0)&&!Twyzsza(0)&&p>=2)
  6379  006826  0E00               	movlw	0
  6380  006828  DA75               	call	_TFmaleje
  6381  00682A  0E00               	movlw	0
  6382  00682C  E311               	bnc	L25
  6383  00682E  DA43               	call	_Twyzsza
  6384  006830  E20E               	bc	l579
  6385  006832  0E01               	movlw	1
  6386  006834  010E               	movlb	F1820 shr (0+8)
  6387  006836  65E6               	cpfsgt	F1820& (0+255),b
  6388  006838  D00A               	goto	l579
  6389                           ;rgl.c: 2195: {
  6390  00683A  6BE6               	clrf	F1820& (0+255),b
  6391                           ;rgl.c: 2197: o=0;
  6392  00683C  010E               	movlb	F1819 shr (0+8)
  6393  00683E  6BE5               	clrf	F1819& (0+255),b
  6394                           ;rgl.c: 2198: l=0;
  6395  006840  010E               	movlb	F1817 shr (0+8)
  6396  006842  6BE3               	clrf	F1817& (0+255),b
  6397                           ;rgl.c: 2199: m=0;
  6398  006844  010E               	movlb	F1818 shr (0+8)
  6399  006846  6BE4               	clrf	F1818& (0+255),b
  6400                           ;rgl.c: 2200: k=-1;
  6401  006848  0100               	movlb	__Lparam shr (0+8)
  6402  00684A  69D7               	setf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6403                           ;rgl.c: 2201: }
  6404  00684C  D043               	goto	l580
  6405  00684E                     l579:
  6406                           ;rgl.c: 2202: else
  6407  00684E  0E00               	movlw	0
  6408  006850                     L25:
  6409  006850  DA54               	call	_TFrosnie
  6410  006852  E312               	bnc	l581
  6411  006854  0E01               	movlw	1
  6412  006856  010E               	movlb	F1819 shr (0+8)
  6413  006858  65E5               	cpfsgt	F1819& (0+255),b
  6414  00685A  D00E               	goto	l581
  6415                           ;rgl.c: 2204: {
  6416  00685C  6BE5               	clrf	F1819& (0+255),b
  6417                           ;rgl.c: 2206: p=0;
  6418  00685E  010E               	movlb	F1820 shr (0+8)
  6419  006860  6BE6               	clrf	F1820& (0+255),b
  6420                           ;rgl.c: 2207: l=0;
  6421  006862  010E               	movlb	F1817 shr (0+8)
  6422  006864  6BE3               	clrf	F1817& (0+255),b
  6423                           ;rgl.c: 2208: m=0;
  6424  006866  010E               	movlb	F1818 shr (0+8)
  6425  006868  6BE4               	clrf	F1818& (0+255),b
  6426                           ;rgl.c: 2209: k=2;
  6427  00686A  0E02               	movlw	2
  6428  00686C  0100               	movlb	__Lparam shr (0+8)
  6429  00686E  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6430                           ;rgl.c: 2210: if(Trowna()) k=1;
  6431  006870  DA3D               	call	_Trowna	;wreg free
  6432  006872  E330               	bnc	l580
  6433  006874  0E01               	movlw	1
  6434  006876  D010               	goto	L6
  6435                           ;rgl.c: 2211: }
  6436  006878                     l581:
  6437                           ;rgl.c: 2212: else
  6438  006878  0E00               	movlw	0
  6439  00687A  D9E1               	call	_Trosnie
  6440  00687C  E310               	bnc	l584
  6441  00687E  0E01               	movlw	1
  6442  006880  010E               	movlb	F1818 shr (0+8)
  6443  006882  65E4               	cpfsgt	F1818& (0+255),b
  6444  006884  D00C               	goto	l584
  6445                           ;rgl.c: 2214: {
  6446  006886  010E               	movlb	F1820 shr (0+8)
  6447  006888  6BE6               	clrf	F1820& (0+255),b
  6448                           ;rgl.c: 2216: o=0;
  6449  00688A  010E               	movlb	F1819 shr (0+8)
  6450  00688C  6BE5               	clrf	F1819& (0+255),b
  6451                           ;rgl.c: 2217: l=0;
  6452  00688E  010E               	movlb	F1817 shr (0+8)
  6453  006890  6BE3               	clrf	F1817& (0+255),b
  6454                           ;rgl.c: 2218: m=0;
  6455  006892  010E               	movlb	F1818 shr (0+8)
  6456  006894  6BE4               	clrf	F1818& (0+255),b
  6457                           ;rgl.c: 2219: k=3;
  6458  006896  0E03               	movlw	3
  6459  006898                     L6:
  6460  006898  0100               	movlb	__Lparam shr (0+8)
  6461  00689A  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6462                           ;rgl.c: 2220: }
  6463  00689C  D01B               	goto	l580
  6464  00689E                     l584:
  6465                           ;rgl.c: 2221: else
  6466  00689E  0E01               	movlw	1
  6467  0068A0  DA0A               	call	_Twyzsza
  6468  0068A2  E316               	bnc	l586
  6469                           ;rgl.c: 2223: {
  6470  0068A4  D9F4               	call	_Tstoi	;wreg free
  6471  0068A6  E316               	bnc	l580
  6472  0068A8  DA50               	call	_TFstoi	;wreg free
  6473  0068AA  E314               	bnc	l580
  6474                           ;rgl.c: 2225: {
  6475  0068AC  0E01               	movlw	1
  6476  0068AE  010E               	movlb	F1817 shr (0+8)
  6477  0068B0  65E3               	cpfsgt	F1817& (0+255),b
  6478  0068B2  D009               	goto	l588
  6479                           ;rgl.c: 2227: {
  6480  0068B4  0100               	movlb	__Lparam shr (0+8)
  6481  0068B6  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6482                           ;rgl.c: 2229: if(Twyzsza(3)) k=2;
  6483  0068B8  0E03               	movlw	3
  6484  0068BA  D9FD               	call	_Twyzsza
  6485  0068BC  E309               	bnc	l586
  6486  0068BE  0E02               	movlw	2
  6487  0068C0  0100               	movlb	__Lparam shr (0+8)
  6488  0068C2  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6489  0068C4  D005               	goto	l586
  6490                           ;rgl.c: 2230: l=0;
  6491                           ;rgl.c: 2231: }
  6492  0068C6                     l588:
  6493                           ;rgl.c: 2232: else
  6494  0068C6  0100               	movlb	__Lparam shr (0+8)
  6495  0068C8  6BD7               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6496                           ;rgl.c: 2235: l++;
  6497  0068CA  010E               	movlb	F1817 shr (0+8)
  6498  0068CC  2BE3               	incf	F1817& (0+255),f,b
  6499                           ;rgl.c: 2236: }
  6500  0068CE  D002               	goto	l580
  6501  0068D0                     l586:
  6502  0068D0  010E               	movlb	F1817 shr (0+8)
  6503  0068D2  6BE3               	clrf	F1817& (0+255),b
  6504  0068D4                     l580:
  6505                           ;rgl.c: 2239: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PW
      +                          M.MDMOD;
  6506  0068D4  C277  F000         	movff	_PWM+9,btemp
  6507  0068D8  6A01               	clrf	btemp+1,c
  6508  0068DA  C07C  F002         	movff	_rgl+7,btemp+2
  6509  0068DE  0100               	movlb	__Lparam shr (0+8)
  6510  0068E0  51D7               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6511  0068E2  5C02               	subwf	btemp+2,w,c
  6512  0068E4  6EF6               	movwf	tblptrl,c
  6513  0068E6  6AF7               	clrf	tblptrh,c
  6514  0068E8  B0D8               	btfsc	status,0,c
  6515  0068EA  2AF7               	incf	tblptrh,f,c
  6516  0068EC  AFD7               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6517  0068EE  06F7               	decf	tblptrh,f,c
  6518  0068F0  50F7               	movf	tblptrh,w,c
  6519  0068F2  0A80               	xorlw	128
  6520  0068F4  6E02               	movwf	btemp+2,c
  6521  0068F6  5001               	movf	btemp+1,w,c
  6522  0068F8  0A80               	xorlw	128
  6523  0068FA  5C02               	subwf	btemp+2,w,c
  6524  0068FC  E102               	bnz	u4775
  6525  0068FE  5000               	movf	btemp,w,c
  6526  006900  5CF6               	subwf	tblptrl,w,c
  6527  006902                     u4775:
  6528  006902  E203               	bc	l592
  6529  006904  C277  F07C         	movff	_PWM+9,_rgl+7
  6530  006908  D004               	goto	l593
  6531  00690A                     l592:
  6532                           ;rgl.c: 2240: else rgl.srp-=k;
  6533  00690A  0100               	movlb	__Lparam shr (0+8)
  6534  00690C  51D7               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6535  00690E  0100               	movlb	(_rgl+7) shr (0+8)
  6536  006910  5F7C               	subwf	(_rgl+7)& (0+255),f,b
  6537  006912                     l593:
  6538                           ;rgl.c: 2241: if(rgl.srp>PWM.MMAXCW) rgl.srp=PWM
      +                          .MMAXCW;
  6539  006912  C07C  FFE8         	movff	_rgl+7,wreg
  6540  006916  0102               	movlb	(_PWM+30) shr (0+8)
  6541  006918  618C               	cpfslt	(_PWM+30)& (0+255),b
  6542  00691A  D002               	goto	l594
  6543  00691C  C28C  F07C         	movff	_PWM+30,_rgl+7
  6544  006920                     l594:
  6545                           ;rgl.c: 2242: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  6546  006920  C07C  FFE8         	movff	_rgl+7,wreg
  6547  006924  0100               	movlb	(_rgl+8) shr (0+8)
  6548  006926  617D               	cpfslt	(_rgl+8)& (0+255),b
  6549  006928  0012               	return	
  6550  00692A  C07C  F07D         	movff	_rgl+7,_rgl+8
  6551                           ;rgl.c: 2243: return;
  6552  00692E  0012               	return	
  6553  006930                     l578:
  6554                           ;rgl.c: 2245: else
  6555  006930  0100               	movlb	__Lparam shr (0+8)
  6556  006932  6BD7               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6557                           ;rgl.c: 2248: if(TFrosnie(0)&&o>=2)
  6558  006934  0E00               	movlw	0
  6559  006936  D9E1               	call	_TFrosnie
  6560  006938  E312               	bnc	l597
  6561  00693A  0E01               	movlw	1
  6562  00693C  010E               	movlb	F1819 shr (0+8)
  6563  00693E  65E5               	cpfsgt	F1819& (0+255),b
  6564  006940  D00E               	goto	l597
  6565                           ;rgl.c: 2249: {
  6566  006942  6BE5               	clrf	F1819& (0+255),b
  6567                           ;rgl.c: 2251: p=0;
  6568  006944  010E               	movlb	F1820 shr (0+8)
  6569  006946  6BE6               	clrf	F1820& (0+255),b
  6570                           ;rgl.c: 2252: l=0;
  6571  006948  010E               	movlb	F1817 shr (0+8)
  6572  00694A  6BE3               	clrf	F1817& (0+255),b
  6573                           ;rgl.c: 2253: m=0;
  6574  00694C  010E               	movlb	F1818 shr (0+8)
  6575  00694E  6BE4               	clrf	F1818& (0+255),b
  6576                           ;rgl.c: 2254: k=-3;
  6577  006950  0EFD               	movlw	253
  6578  006952  0100               	movlb	__Lparam shr (0+8)
  6579  006954  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6580                           ;rgl.c: 2255: if(Trowna()) k=-2;
  6581  006956  D9CA               	call	_Trowna	;wreg free
  6582  006958  E345               	bnc	l599
  6583  00695A  0EFE               	movlw	254
  6584  00695C  D02B               	goto	L8
  6585                           ;rgl.c: 2256: }
  6586  00695E                     l597:
  6587                           ;rgl.c: 2257: else
  6588  00695E  0E00               	movlw	0
  6589  006960  D9D9               	call	_TFmaleje
  6590  006962  E312               	bnc	l600
  6591  006964  0E01               	movlw	1
  6592  006966  010E               	movlb	F1820 shr (0+8)
  6593  006968  65E6               	cpfsgt	F1820& (0+255),b
  6594  00696A  D00E               	goto	l600
  6595                           ;rgl.c: 2259: {
  6596  00696C  6BE6               	clrf	F1820& (0+255),b
  6597                           ;rgl.c: 2261: o=0;
  6598  00696E  010E               	movlb	F1819 shr (0+8)
  6599  006970  6BE5               	clrf	F1819& (0+255),b
  6600                           ;rgl.c: 2262: l=0;
  6601  006972  010E               	movlb	F1817 shr (0+8)
  6602  006974  6BE3               	clrf	F1817& (0+255),b
  6603                           ;rgl.c: 2263: m=0;
  6604  006976  010E               	movlb	F1818 shr (0+8)
  6605  006978  6BE4               	clrf	F1818& (0+255),b
  6606                           ;rgl.c: 2264: k=2;
  6607  00697A  0E02               	movlw	2
  6608  00697C  0100               	movlb	__Lparam shr (0+8)
  6609  00697E  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6610                           ;rgl.c: 2265: if(Trowna()) k=1;
  6611  006980  D9B5               	call	_Trowna	;wreg free
  6612  006982  E330               	bnc	l599
  6613  006984  0E01               	movlw	1
  6614  006986  D016               	goto	L8
  6615                           ;rgl.c: 2266: }
  6616  006988                     l600:
  6617                           ;rgl.c: 2267: else
  6618  006988  0E00               	movlw	0
  6619  00698A  D966               	call	_Tmaleje
  6620  00698C  E316               	bnc	l603
  6621  00698E  0E01               	movlw	1
  6622  006990  010E               	movlb	F1818 shr (0+8)
  6623  006992  65E4               	cpfsgt	F1818& (0+255),b
  6624  006994  D012               	goto	l603
  6625                           ;rgl.c: 2269: {
  6626  006996  010E               	movlb	F1820 shr (0+8)
  6627  006998  6BE6               	clrf	F1820& (0+255),b
  6628                           ;rgl.c: 2271: o=0;
  6629  00699A  010E               	movlb	F1819 shr (0+8)
  6630  00699C  6BE5               	clrf	F1819& (0+255),b
  6631                           ;rgl.c: 2272: l=0;
  6632  00699E  010E               	movlb	F1817 shr (0+8)
  6633  0069A0  6BE3               	clrf	F1817& (0+255),b
  6634                           ;rgl.c: 2273: m=0;
  6635  0069A2  010E               	movlb	F1818 shr (0+8)
  6636  0069A4  6BE4               	clrf	F1818& (0+255),b
  6637                           ;rgl.c: 2274: k=2;
  6638  0069A6  0E02               	movlw	2
  6639  0069A8  0100               	movlb	__Lparam shr (0+8)
  6640  0069AA  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6641                           ;rgl.c: 2275: if(Tnizsza(0)) k=3;
  6642  0069AC  0E00               	movlw	0
  6643  0069AE  D976               	call	_Tnizsza
  6644  0069B0  E319               	bnc	l599
  6645  0069B2  0E03               	movlw	3
  6646  0069B4                     L8:
  6647  0069B4  0100               	movlb	__Lparam shr (0+8)
  6648  0069B6  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6649                           ;rgl.c: 2276: }
  6650  0069B8  D015               	goto	l599
  6651  0069BA                     l603:
  6652                           ;rgl.c: 2277: else
  6653  0069BA  0E01               	movlw	1
  6654  0069BC  D96F               	call	_Tnizsza
  6655  0069BE  E310               	bnc	l606
  6656                           ;rgl.c: 2279: {
  6657  0069C0  D966               	call	_Tstoi	;wreg free
  6658  0069C2  E310               	bnc	l599
  6659  0069C4  D9C2               	call	_TFstoi	;wreg free
  6660  0069C6  E30E               	bnc	l599
  6661                           ;rgl.c: 2281: {
  6662  0069C8  0E02               	movlw	2
  6663  0069CA  010E               	movlb	F1817 shr (0+8)
  6664  0069CC  65E3               	cpfsgt	F1817& (0+255),b
  6665  0069CE  D003               	goto	l608
  6666                           ;rgl.c: 2283: {
  6667  0069D0  0100               	movlb	__Lparam shr (0+8)
  6668  0069D2  6FD7               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6669  0069D4  D005               	goto	l606
  6670                           ;rgl.c: 2285: l=0;
  6671                           ;rgl.c: 2286: }
  6672  0069D6                     l608:
  6673                           ;rgl.c: 2287: else
  6674  0069D6  0100               	movlb	__Lparam shr (0+8)
  6675  0069D8  6BD7               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6676                           ;rgl.c: 2290: l++;
  6677  0069DA  010E               	movlb	F1817 shr (0+8)
  6678  0069DC  2BE3               	incf	F1817& (0+255),f,b
  6679                           ;rgl.c: 2291: }
  6680  0069DE  D002               	goto	l599
  6681  0069E0                     l606:
  6682  0069E0  010E               	movlb	F1817 shr (0+8)
  6683  0069E2  6BE3               	clrf	F1817& (0+255),b
  6684  0069E4                     l599:
  6685                           ;rgl.c: 2294: if(PWM.MMAXCW>PWM.MGMOD)
  6686  0069E4  C28C  FFE8         	movff	_PWM+30,wreg
  6687  0069E8  0102               	movlb	(_PWM+10) shr (0+8)
  6688  0069EA  6178               	cpfslt	(_PWM+10)& (0+255),b
  6689  0069EC  D01A               	goto	l611
  6690                           ;rgl.c: 2295: {
  6691  0069EE  C07C  FFE8         	movff	_rgl+7,wreg
  6692  0069F2  0100               	movlb	__Lparam shr (0+8)
  6693  0069F4  25D7               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6694  0069F6  6E02               	movwf	btemp+2,c
  6695  0069F8  6A03               	clrf	btemp+3,c
  6696  0069FA  B0D8               	btfsc	status,0,c
  6697  0069FC  2A03               	incf	btemp+3,f,c
  6698  0069FE  BFD7               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6699  006A00  0603               	decf	btemp+3,f,c
  6700  006A02  C278  F000         	movff	_PWM+10,btemp
  6701  006A06  6A01               	clrf	btemp+1,c
  6702  006A08  5001               	movf	btemp+1,w,c
  6703  006A0A  0A80               	xorlw	128
  6704  006A0C  6E04               	movwf	btemp+4,c
  6705  006A0E  5003               	movf	btemp+3,w,c
  6706  006A10  0A80               	xorlw	128
  6707  006A12  5C04               	subwf	btemp+4,w,c
  6708  006A14  E102               	bnz	u4985
  6709  006A16  5002               	movf	btemp+2,w,c
  6710  006A18  5C00               	subwf	btemp,w,c
  6711  006A1A                     u4985:
  6712  006A1A  E21D               	bc	l615
  6713  006A1C  C278  F07C         	movff	_PWM+10,_rgl+7
  6714  006A20  D01E               	goto	l614
  6715                           ;rgl.c: 2297: else rgl.srp+=k;
  6716                           ;rgl.c: 2298: }
  6717  006A22                     l611:
  6718                           ;rgl.c: 2299: else
  6719  006A22  C07C  FFE8         	movff	_rgl+7,wreg
  6720  006A26  0100               	movlb	__Lparam shr (0+8)
  6721  006A28  25D7               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6722  006A2A  6E02               	movwf	btemp+2,c
  6723  006A2C  6A03               	clrf	btemp+3,c
  6724  006A2E  B0D8               	btfsc	status,0,c
  6725  006A30  2A03               	incf	btemp+3,f,c
  6726  006A32  BFD7               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6727  006A34  0603               	decf	btemp+3,f,c
  6728  006A36  C28C  F000         	movff	_PWM+30,btemp
  6729  006A3A  6A01               	clrf	btemp+1,c
  6730  006A3C  5001               	movf	btemp+1,w,c
  6731  006A3E  0A80               	xorlw	128
  6732  006A40  6E04               	movwf	btemp+4,c
  6733  006A42  5003               	movf	btemp+3,w,c
  6734  006A44  0A80               	xorlw	128
  6735  006A46  5C04               	subwf	btemp+4,w,c
  6736  006A48  E102               	bnz	u4995
  6737  006A4A  5002               	movf	btemp+2,w,c
  6738  006A4C  5C00               	subwf	btemp,w,c
  6739  006A4E                     u4995:
  6740  006A4E  E203               	bc	l615
  6741  006A50  C28C  F07C         	movff	_PWM+30,_rgl+7
  6742  006A54  D004               	goto	l614
  6743  006A56                     l615:
  6744                           ;rgl.c: 2302: else rgl.srp+=k;
  6745  006A56  0100               	movlb	__Lparam shr (0+8)
  6746  006A58  51D7               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6747  006A5A  0100               	movlb	(_rgl+7) shr (0+8)
  6748  006A5C  277C               	addwf	(_rgl+7)& (0+255),f,b
  6749  006A5E                     l614:
  6750                           ;rgl.c: 2303: }
  6751  006A5E  C07C  FFE8         	movff	_rgl+7,wreg
  6752  006A62  0100               	movlb	(_rgl+8) shr (0+8)
  6753  006A64  617D               	cpfslt	(_rgl+8)& (0+255),b
  6754  006A66  0012               	return	
  6755  006A68  C07C  F07D         	movff	_rgl+7,_rgl+8
  6756                           ;rgl.c: 2305: return;
  6757  006A6C  0012               	return	
  6758                           ;rgl.c: 2306: }
  6759  006A6E                     __end_of_ModPruCW2:
  6760                           ;rgl.c: 2312: void IncMaxCW2(void)
  6761                           ;rgl.c: 2313: {
  6762  006A6E                     _IncMaxCW2:
  6763  000000                     
  6764                           ;rgl.c: 2314: unsigned char k;
  6765  006A6E  0100               	movlb	_rgl shr (0+8)
  6766  006A70  A575               	btfss	_rgl& (0+255),2,b
  6767  006A72  D014               	goto	l619
  6768                           ;rgl.c: 2318: {
  6769  006A74  C28C  FFE8         	movff	_PWM+30,wreg
  6770  006A78  0102               	movlb	(_PWM+10) shr (0+8)
  6771  006A7A  6178               	cpfslt	(_PWM+10)& (0+255),b
  6772  006A7C  D007               	goto	l620
  6773                           ;rgl.c: 2320: {
  6774  006A7E  C07D  FFE8         	movff	_rgl+8,wreg
  6775  006A82  6178               	cpfslt	(_PWM+10)& (0+255),b
  6776  006A84  0012               	return	
  6777  006A86  C278  F07D         	movff	_PWM+10,_rgl+8
  6778                           ;rgl.c: 2322: }
  6779  006A8A  0012               	return	
  6780  006A8C                     l620:
  6781                           ;rgl.c: 2323: else
  6782  006A8C  C07D  FFE8         	movff	_rgl+8,wreg
  6783  006A90  0102               	movlb	(_PWM+30) shr (0+8)
  6784  006A92  618C               	cpfslt	(_PWM+30)& (0+255),b
  6785  006A94  0012               	return	
  6786  006A96  C28C  F07D         	movff	_PWM+30,_rgl+8
  6787                           ;rgl.c: 2326: }
  6788  006A9A  0012               	return	
  6789  006A9C                     l619:
  6790                           ;rgl.c: 2328: }
  6791  006A9C  0E01               	movlw	1
  6792  006A9E  D8CF               	call	_Trosnie
  6793  006AA0  B0D8               	btfsc	status,0,c
  6794  006AA2  0012               	return	
  6795  006AA4  0E01               	movlw	1
  6796  006AA6  D929               	call	_TFrosnie
  6797  006AA8  B0D8               	btfsc	status,0,c
  6798  006AAA  0012               	return	
  6799                           ;rgl.c: 2331: k=5;
  6800  006AAC  0E05               	movlw	5
  6801  006AAE  6ED9               	movwf	fsr2l,c
  6802                           ;rgl.c: 2332: if(rgl.xmod+k>0xF0) rgl.xmod=0xF0;
  6803  006AB0  C07D  F000         	movff	_rgl+8,btemp
  6804  006AB4  6A01               	clrf	btemp+1,c
  6805  006AB6  2600               	addwf	btemp,f,c
  6806  006AB8  0E00               	movlw	0
  6807  006ABA  2201               	addwfc	btemp+1,f,c
  6808  006ABC  5001               	movf	btemp+1,w,c
  6809  006ABE  0A80               	xorlw	128
  6810  006AC0  0F80               	addlw	-128
  6811  006AC2  0EF1               	movlw	241
  6812  006AC4  B4D8               	btfsc	status,2,c
  6813  006AC6  5C00               	subwf	btemp,w,c
  6814  006AC8  E304               	bnc	l625
  6815  006ACA  0EF0               	movlw	-16
  6816  006ACC  CFE8 F07D          	movff	wreg,_rgl+8
  6817  006AD0  D003               	goto	l626
  6818  006AD2                     l625:
  6819                           ;rgl.c: 2333: else rgl.xmod+=k;
  6820  006AD2  0100               	movlb	(_rgl+8) shr (0+8)
  6821  006AD4  0E05               	movlw	5
  6822  006AD6  277D               	addwf	(_rgl+8)& (0+255),f,b
  6823  006AD8                     l626:
  6824                           ;rgl.c: 2334: if(rgl.xmod>PWM.MMAXCW) rgl.xmod=P
      +                          WM.MMAXCW;
  6825  006AD8  C07D  FFE8         	movff	_rgl+8,wreg
  6826  006ADC  0102               	movlb	(_PWM+30) shr (0+8)
  6827  006ADE  618C               	cpfslt	(_PWM+30)& (0+255),b
  6828  006AE0  0012               	return	
  6829  006AE2  C28C  F07D         	movff	_PWM+30,_rgl+8
  6830                           ;rgl.c: 2335: }
  6831  006AE6  0012               	return	
  6832  006AE8                     __end_of_IncMaxCW2:
  6833                           ;rgl.c: 2338: void ModPrzCW2(void)
  6834                           ;rgl.c: 2339: {
  6835  006AE8                     _ModPrzCW2:
  6836  000000                     
  6837                           ;rgl.c: 2340: if(!rgl.nmod)
  6838  006AE8  0100               	movlb	_rgl shr (0+8)
  6839  006AEA  BB75               	btfsc	_rgl& (0+255),5,b
  6840  006AEC  D00B               	goto	l629
  6841                           ;rgl.c: 2341: {
  6842  006AEE  0E00               	movlw	0
  6843  006AF0  D8B3               	call	_Tmaleje
  6844  006AF2  B0D8               	btfsc	status,0,c
  6845  006AF4  0012               	return	
  6846  006AF6  0E03               	movlw	3
  6847  006AF8  D8DE               	call	_Twyzsza
  6848  006AFA  A0D8               	btfss	status,0,c
  6849  006AFC  0012               	return	
  6850                           ;rgl.c: 2343: {
  6851  006AFE  0100               	movlb	_rgl shr (0+8)
  6852  006B00  8B75               	bsf	_rgl& (0+255),5,b
  6853                           ;rgl.c: 2345: }
  6854  006B02  0012               	return	
  6855  006B04                     l629:
  6856                           ;rgl.c: 2347: else
  6857  006B04  0E03               	movlw	3
  6858  006B06  D8D7               	call	_Twyzsza
  6859  006B08  B0D8               	btfsc	status,0,c
  6860  006B0A  0012               	return	
  6861                           ;rgl.c: 2350: {
  6862  006B0C  0E00               	movlw	0
  6863  006B0E  D8A4               	call	_Tmaleje
  6864  006B10  E302               	bnc	l633
  6865  006B12  0100               	movlb	_rgl shr (0+8)
  6866  006B14  9B75               	bcf	_rgl& (0+255),5,b
  6867  006B16                     l633:
  6868                           ;rgl.c: 2352: if(Tstoi()&&TFmaleje(0)) rgl.nmod=
      +                          0;
  6869  006B16  D8BB               	call	_Tstoi	;wreg free
  6870  006B18  E305               	bnc	l634
  6871  006B1A  0E00               	movlw	0
  6872  006B1C  D8FB               	call	_TFmaleje
  6873  006B1E  E302               	bnc	l634
  6874  006B20  0100               	movlb	_rgl shr (0+8)
  6875  006B22  9B75               	bcf	_rgl& (0+255),5,b
  6876  006B24                     l634:
  6877                           ;rgl.c: 2353: if(Tnizsza(3)) rgl.nmod=0;
  6878  006B24  0E03               	movlw	3
  6879  006B26  D8BA               	call	_Tnizsza
  6880  006B28  A0D8               	btfss	status,0,c
  6881  006B2A  0012               	return	
  6882  006B2C  0100               	movlb	_rgl shr (0+8)
  6883  006B2E  9B75               	bcf	_rgl& (0+255),5,b
  6884                           ;rgl.c: 2354: }
  6885  006B30  0012               	return	
  6886  006B32                     __end_of_ModPrzCW2:
  6887                           ;rgl.c: 2359: void PropCO2(void)
  6888                           ;rgl.c: 2360: {
  6889  006B32                     _PropCO2:
  6890  000000                     
  6891                           ;rgl.c: 2361: if(!rgl.nmod)
  6892  006B32  0100               	movlb	_rgl shr (0+8)
  6893  006B34  BB75               	btfsc	_rgl& (0+255),5,b
  6894  006B36  D033               	goto	l637
  6895                           ;rgl.c: 2362: {
  6896  006B38  C078  FFE8         	movff	_rgl+3,wreg
  6897  006B3C  0A03               	xorlw	3
  6898  006B3E  E10A               	bnz	l638
  6899  006B40                     L32:
  6900                           ;rgl.c: 2364: {
  6901  006B40  C07E  FFE8         	movff	_rgl+9,wreg
  6902  006B44  0102               	movlb	(_PWM+10) shr (0+8)
  6903  006B46  6178               	cpfslt	(_PWM+10)& (0+255),b
  6904  006B48  EF38  F031         	goto	l482
  6905                           ;rgl.c: 2366: rgl.tmp_pwm=PWM.MGMOD;
  6906  006B4C  C278  F07E         	movff	_PWM+10,_rgl+9
  6907                           ;rgl.c: 2367: }
  6908  006B50  EF38  F031         	goto	l482
  6909  006B54                     l638:
  6910                           ;rgl.c: 2368: else
  6911  006B54  C078  FFE8         	movff	_rgl+3,wreg
  6912  006B58  0A02               	xorlw	2
  6913  006B5A  E10A               	bnz	l641
  6914  006B5C                     L33:
  6915                           ;rgl.c: 2370: {
  6916  006B5C  C07E  FFE8         	movff	_rgl+9,wreg
  6917  006B60  0102               	movlb	(_PWM+25) shr (0+8)
  6918  006B62  6187               	cpfslt	(_PWM+25)& (0+255),b
  6919  006B64  EF38  F031         	goto	l482
  6920                           ;rgl.c: 2372: rgl.tmp_pwm=PWM.PROP1;
  6921  006B68  C287  F07E         	movff	_PWM+25,_rgl+9
  6922                           ;rgl.c: 2373: }
  6923  006B6C  EF38  F031         	goto	l482
  6924  006B70                     l641:
  6925                           ;rgl.c: 2374: else
  6926  006B70  C078  F000         	movff	_rgl+3,btemp
  6927  006B74  0400               	decf	btemp,w,c
  6928  006B76  E10A               	bnz	l644
  6929  006B78                     L34:
  6930                           ;rgl.c: 2376: {
  6931  006B78  C07E  FFE8         	movff	_rgl+9,wreg
  6932  006B7C  0102               	movlb	(_PWM+26) shr (0+8)
  6933  006B7E  6188               	cpfslt	(_PWM+26)& (0+255),b
  6934  006B80  EF38  F031         	goto	l482
  6935                           ;rgl.c: 2378: rgl.tmp_pwm=PWM.PROP2;
  6936  006B84  C288  F07E         	movff	_PWM+26,_rgl+9
  6937                           ;rgl.c: 2379: }
  6938  006B88  EF38  F031         	goto	l482
  6939  006B8C                     l644:
  6940                           ;rgl.c: 2380: else
  6941  006B8C  C078  FFE8         	movff	_rgl+3,wreg
  6942  006B90  0A80               	xorlw	128
  6943  006B92  0F7F               	addlw	-129
  6944  006B94  E302 EF38  F031    	bc	l640
  6945  006B9A  EF31  F031         	goto	L35
  6946                           ;rgl.c: 2382: {
  6947                           ;rgl.c: 2385: }
  6948                           ;rgl.c: 2388: }
  6949  006B9E                     l637:
  6950                           ;rgl.c: 2389: else WriteOPWM(PWM.MDMOD);
  6951  006B9E  C277  FFE8         	movff	_PWM+9,wreg
  6952  006BA2  EF47  F061         	goto	_WriteOPWM
  6953                           ;rgl.c: 2390: }
  6954  006BA6                     __end_of_PropCO2:
  6955                           ;rgl.c: 2400: void ModToCW3(void)
  6956                           ;rgl.c: 2401: {
  6957  006BA6                     _ModToCW3:
  6958  000000                     
  6959                           ;rgl.c: 2402: rgl.btcw=1;
  6960  006BA6  0100               	movlb	_rgl shr (0+8)
  6961  006BA8  8375               	bsf	_rgl& (0+255),1,b
  6962                           ;rgl.c: 2403: if(rgl.btco)
  6963  006BAA  A175               	btfss	_rgl& (0+255),0,b
  6964  006BAC  0012               	return	
  6965                           ;rgl.c: 2404: {
  6966  006BAE  9175               	bcf	_rgl& (0+255),0,b
  6967                           ;rgl.c: 2407: if(!Tnizsza(0))
  6968  006BB0  0E00               	movlw	0
  6969  006BB2  D874               	call	_Tnizsza
  6970  006BB4  B0D8               	btfsc	status,0,c
  6971  006BB6  0012               	return	
  6972                           ;rgl.c: 2408: {
  6973  006BB8  C277  F000         	movff	_PWM+9,btemp
  6974  006BBC  6A01               	clrf	btemp+1,c
  6975  006BBE  C07C  F002         	movff	_rgl+7,btemp+2
  6976  006BC2  0EF6               	movlw	246
  6977  006BC4  2402               	addwf	btemp+2,w,c
  6978  006BC6  6EF6               	movwf	tblptrl,c
  6979  006BC8  6AF7               	clrf	tblptrh,c
  6980  006BCA  0EFF               	movlw	255
  6981  006BCC  22F7               	addwfc	tblptrh,f,c
  6982  006BCE  50F7               	movf	tblptrh,w,c
  6983  006BD0  0A80               	xorlw	128
  6984  006BD2  6E02               	movwf	btemp+2,c
  6985  006BD4  5001               	movf	btemp+1,w,c
  6986  006BD6  0A80               	xorlw	128
  6987  006BD8  5C02               	subwf	btemp+2,w,c
  6988  006BDA  E102               	bnz	u5315
  6989  006BDC  5000               	movf	btemp,w,c
  6990  006BDE  5CF6               	subwf	tblptrl,w,c
  6991  006BE0                     u5315:
  6992  006BE0  E203               	bc	l653
  6993  006BE2  C277  F07C         	movff	_PWM+9,_rgl+7
  6994  006BE6  0012               	return	
  6995  006BE8                     l653:
  6996                           ;rgl.c: 2410: else rgl.srp-=10;
  6997  006BE8  0100               	movlb	(_rgl+7) shr (0+8)
  6998  006BEA  0EF6               	movlw	-10
  6999  006BEC  277C               	addwf	(_rgl+7)& (0+255),f,b
  7000                           ;rgl.c: 2411: }
  7001  006BEE  0CF6               	retlw	246
  7002  006BF0                     __end_of_ModToCW3:
  7003                           ;rgl.c: 2416: void ModToCO3(void)
  7004                           ;rgl.c: 2417: {
  7005  006BF0                     _ModToCO3:
  7006  000000                     
  7007                           ;rgl.c: 2418: rgl.btco=1;
  7008  006BF0  0100               	movlb	_rgl shr (0+8)
  7009  006BF2  8175               	bsf	_rgl& (0+255),0,b
  7010                           ;rgl.c: 2419: rgl.btcw=0;
  7011  006BF4  9375               	bcf	_rgl& (0+255),1,b
  7012                           ;rgl.c: 2420: }
  7013  006BF6  0012               	return	
  7014  006BF8                     __end_of_ModToCO3:
  7015                           ;rgl.c: 2423: void StartMCO3(void)
  7016                           ;rgl.c: 2424: {
  7017  006BF8                     _StartMCO3:
  7018  000000                     
  7019                           ;rgl.c: 2425: if(rgl.btco||rgl.btcw) return;
  7020  006BF8  0100               	movlb	_rgl shr (0+8)
  7021  006BFA  A175               	btfss	_rgl& (0+255),0,b
  7022  006BFC  B375               	btfsc	_rgl& (0+255),1,b
  7023  006BFE  0012               	return	
  7024                           ;rgl.c: 2426: StartRTdS(2);
  7025  006C00  0E02               	movlw	2
  7026  006C02  EC86  F06E         	call	_StartRTdS
  7027                           ;rgl.c: 2427: DtCO.dDCO=0;
  7028  006C06  0102               	movlb	(_DtCO+9) shr (0+8)
  7029  006C08  6B15               	clrf	(_DtCO+9)& (0+255),b
  7030                           ;rgl.c: 2428: DtCO.indCO=0;
  7031  006C0A  0102               	movlb	(_DtCO+10) shr (0+8)
  7032  006C0C  6B16               	clrf	(_DtCO+10)& (0+255),b
  7033                           ;rgl.c: 2429: rgl.fz=0;
  7034  006C0E  0100               	movlb	_rgl shr (0+8)
  7035  006C10  9575               	bcf	_rgl& (0+255),2,b
  7036                           ;rgl.c: 2430: rgl.med_up=0;
  7037  006C12  9775               	bcf	_rgl& (0+255),3,b
  7038                           ;rgl.c: 2431: rgl.fast_up=0;
  7039  006C14  9975               	bcf	_rgl& (0+255),4,b
  7040                           ;rgl.c: 2433: if(PWM.MAXPWM>PWM.FIRSTPB)
  7041  006C16  C28F  FFE8         	movff	_PWM+33,wreg
  7042  006C1A  0102               	movlb	(_PWM+24) shr (0+8)
  7043  006C1C  6186               	cpfslt	(_PWM+24)& (0+255),b
  7044  006C1E  D003               	goto	l658
  7045                           ;rgl.c: 2434: {
  7046  006C20  C286  F07D         	movff	_PWM+24,_rgl+8
  7047                           ;rgl.c: 2436: }
  7048  006C24  D002               	goto	l659
  7049  006C26                     l658:
  7050                           ;rgl.c: 2437: else
  7051  006C26  C28F  F07D         	movff	_PWM+33,_rgl+8
  7052  006C2A                     l659:
  7053                           ;rgl.c: 2440: }
  7054  006C2A  0100               	movlb	(_rgl+7) shr (0+8)
  7055  006C2C  6B7C               	clrf	(_rgl+7)& (0+255),b
  7056                           ;rgl.c: 2442: rgl.ytmp=0;
  7057  006C2E  6B7B               	clrf	(_rgl+6)& (0+255),b
  7058                           ;rgl.c: 2443: rgl.nmod=0;
  7059  006C30  9B75               	bcf	_rgl& (0+255),5,b
  7060                           ;rgl.c: 2444: rgl.btcw=0;
  7061  006C32  9375               	bcf	_rgl& (0+255),1,b
  7062                           ;rgl.c: 2445: rgl.btco=1;
  7063  006C34  8175               	bsf	_rgl& (0+255),0,b
  7064                           ;rgl.c: 2446: rgl.del1s=0;
  7065  006C36  9D75               	bcf	_rgl& (0+255),6,b
  7066                           ;rgl.c: 2447: rgl.deln1=0;
  7067  006C38  9F75               	bcf	_rgl& (0+255),7,b
  7068                           ;rgl.c: 2448: rgl.inv_mod=0;
  7069  006C3A  9176               	bcf	(_rgl+1)& (0+255),0,b
  7070                           ;rgl.c: 2449: }
  7071  006C3C  0012               	return	
  7072  006C3E                     __end_of_StartMCO3:
  7073                           ;rgl.c: 2459: bit Trosnie(const unsigned char t)
  7074                           ;rgl.c: 2460: {
  7075  006C3E                     _Trosnie:
  7076  000000                     
  7077                           ; _t loaded to fsr2l
  7078  006C3E  6ED9               	movwf	fsr2l,c
  7079                           ;rgl.c: 2461: return (rgl.x_dt>t);
  7080  006C40  C079  F000         	movff	_rgl+4,btemp
  7081  006C44  50D9               	movf	fsr2l,w,c
  7082  006C46  BE00               	btfsc	btemp,7,c
  7083  006C48  D005               	goto	u5360
  7084  006C4A  0AFF               	xorlw	255
  7085  006C4C  2400               	addwf	btemp,w,c
  7086  006C4E  E302               	bnc	u5360
  7087  006C50  80D8               	bsf	status,0,c
  7088  006C52  0012               	return	
  7089  006C54                     u5360:
  7090  006C54  90D8               	bcf	status,0,c
  7091  006C56  0012               	return	
  7092                           ;rgl.c: 2462: }
  7093  006C58                     __end_of_Trosnie:
  7094                           ;rgl.c: 2468: bit Tmaleje(const unsigned char t)
  7095                           ;rgl.c: 2469: {
  7096  006C58                     _Tmaleje:
  7097  000000                     
  7098                           ; _t loaded to fsr2l
  7099  006C58  6ED9               	movwf	fsr2l,c
  7100                           ;rgl.c: 2470: return (rgl.x_dt<(-1*t));
  7101  006C5A  CFD9 F000          	movff	fsr2l,btemp
  7102  006C5E  6A01               	clrf	btemp+1,c
  7103  006C60  1E00               	comf	btemp,f,c
  7104  006C62  1E01               	comf	btemp+1,f,c
  7105  006C64  4A00               	infsnz	btemp,f,c
  7106  006C66  2A01               	incf	btemp+1,f,c
  7107  006C68  C079  F002         	movff	_rgl+4,btemp+2
  7108  006C6C  6A03               	clrf	btemp+3,c
  7109  006C6E  BE02               	btfsc	btemp+2,7,c
  7110  006C70  0603               	decf	btemp+3,f,c
  7111  006C72  5003               	movf	btemp+3,w,c
  7112  006C74  0A80               	xorlw	128
  7113  006C76  6E04               	movwf	btemp+4,c
  7114  006C78  5001               	movf	btemp+1,w,c
  7115  006C7A  0A80               	xorlw	128
  7116  006C7C  5C04               	subwf	btemp+4,w,c
  7117  006C7E  E102               	bnz	u5385
  7118  006C80  5000               	movf	btemp,w,c
  7119  006C82  5C02               	subwf	btemp+2,w,c
  7120  006C84                     u5385:
  7121  006C84  E202               	bc	u5380
  7122  006C86  80D8               	bsf	status,0,c
  7123  006C88  0012               	return	
  7124  006C8A                     u5380:
  7125  006C8A  90D8               	bcf	status,0,c
  7126  006C8C  0012               	return	
  7127                           ;rgl.c: 2471: }
  7128  006C8E                     __end_of_Tmaleje:
  7129                           ;rgl.c: 2475: bit Tstoi(void)
  7130                           ;rgl.c: 2476: {
  7131  006C8E                     _Tstoi:
  7132  000000                     
  7133                           ;rgl.c: 2477: return !rgl.x_dt;
  7134  006C8E  EE00  F079         	lfsr	0,_rgl+4
  7135  006C92  50EF               	movf	indf0,w,c
  7136  006C94  90D8               	bcf	status,0,c
  7137  006C96  B4D8               	btfsc	status,2,c
  7138  006C98  80D8               	bsf	status,0,c
  7139  006C9A  0012               	return	
  7140                           ;rgl.c: 2478: }
  7141  006C9C                     __end_of_Tstoi:
  7142                           ;rgl.c: 2485: bit Tnizsza(const unsigned char t)
  7143                           ;rgl.c: 2486: {
  7144  006C9C                     _Tnizsza:
  7145  000000                     
  7146                           ; _t loaded to fsr2l
  7147  006C9C  6ED9               	movwf	fsr2l,c
  7148                           ;rgl.c: 2487: return (rgl.x_t>t);
  7149  006C9E  C077  F000         	movff	_rgl+2,btemp
  7150  006CA2  50D9               	movf	fsr2l,w,c
  7151  006CA4  BE00               	btfsc	btemp,7,c
  7152  006CA6  D005               	goto	u5400
  7153  006CA8  0AFF               	xorlw	255
  7154  006CAA  2400               	addwf	btemp,w,c
  7155  006CAC  E302               	bnc	u5400
  7156  006CAE  80D8               	bsf	status,0,c
  7157  006CB0  0012               	return	
  7158  006CB2                     u5400:
  7159  006CB2  90D8               	bcf	status,0,c
  7160  006CB4  0012               	return	
  7161                           ;rgl.c: 2488: }
  7162  006CB6                     __end_of_Tnizsza:
  7163                           ;rgl.c: 2494: bit Twyzsza(const unsigned char t)
  7164                           ;rgl.c: 2495: {
  7165  006CB6                     _Twyzsza:
  7166  000000                     
  7167                           ; _t loaded to fsr2l
  7168  006CB6  6ED9               	movwf	fsr2l,c
  7169                           ;rgl.c: 2496: return (rgl.x_t<(-1*t));
  7170  006CB8  CFD9 F000          	movff	fsr2l,btemp
  7171  006CBC  6A01               	clrf	btemp+1,c
  7172  006CBE  1E00               	comf	btemp,f,c
  7173  006CC0  1E01               	comf	btemp+1,f,c
  7174  006CC2  4A00               	infsnz	btemp,f,c
  7175  006CC4  2A01               	incf	btemp+1,f,c
  7176  006CC6  C077  F002         	movff	_rgl+2,btemp+2
  7177  006CCA  6A03               	clrf	btemp+3,c
  7178  006CCC  BE02               	btfsc	btemp+2,7,c
  7179  006CCE  0603               	decf	btemp+3,f,c
  7180  006CD0  5003               	movf	btemp+3,w,c
  7181  006CD2  0A80               	xorlw	128
  7182  006CD4  6E04               	movwf	btemp+4,c
  7183  006CD6  5001               	movf	btemp+1,w,c
  7184  006CD8  0A80               	xorlw	128
  7185  006CDA  5C04               	subwf	btemp+4,w,c
  7186  006CDC  E102               	bnz	u5425
  7187  006CDE  5000               	movf	btemp,w,c
  7188  006CE0  5C02               	subwf	btemp+2,w,c
  7189  006CE2                     u5425:
  7190  006CE2  E202               	bc	u5420
  7191  006CE4  80D8               	bsf	status,0,c
  7192  006CE6  0012               	return	
  7193  006CE8                     u5420:
  7194  006CE8  90D8               	bcf	status,0,c
  7195  006CEA  0012               	return	
  7196                           ;rgl.c: 2497: }
  7197  006CEC                     __end_of_Twyzsza:
  7198                           ;rgl.c: 2501: bit Trowna(void)
  7199                           ;rgl.c: 2502: {
  7200  006CEC                     _Trowna:
  7201  000000                     
  7202                           ;rgl.c: 2503: return !rgl.x_t;
  7203  006CEC  EE00  F077         	lfsr	0,_rgl+2
  7204  006CF0  50EF               	movf	indf0,w,c
  7205  006CF2  90D8               	bcf	status,0,c
  7206  006CF4  B4D8               	btfsc	status,2,c
  7207  006CF6  80D8               	bsf	status,0,c
  7208  006CF8  0012               	return	
  7209                           ;rgl.c: 2504: }
  7210  006CFA                     __end_of_Trowna:
  7211                           ;rgl.c: 2510: bit TFrosnie(const unsigned char t
      +                          )
  7212                           ;rgl.c: 2511: {
  7213  006CFA                     _TFrosnie:
  7214  000000                     
  7215                           ; _t loaded to fsr2l
  7216  006CFA  6ED9               	movwf	fsr2l,c
  7217                           ;rgl.c: 2512: return (rgl.x_df>t);
  7218  006CFC  C07A  F000         	movff	_rgl+5,btemp
  7219  006D00  50D9               	movf	fsr2l,w,c
  7220  006D02  BE00               	btfsc	btemp,7,c
  7221  006D04  D005               	goto	u5440
  7222  006D06  0AFF               	xorlw	255
  7223  006D08  2400               	addwf	btemp,w,c
  7224  006D0A  E302               	bnc	u5440
  7225  006D0C  80D8               	bsf	status,0,c
  7226  006D0E  0012               	return	
  7227  006D10                     u5440:
  7228  006D10  90D8               	bcf	status,0,c
  7229  006D12  0012               	return	
  7230                           ;rgl.c: 2513: }
  7231  006D14                     __end_of_TFrosnie:
  7232                           ;rgl.c: 2519: bit TFmaleje(const unsigned char t
      +                          )
  7233                           ;rgl.c: 2520: {
  7234  006D14                     _TFmaleje:
  7235  000000                     
  7236                           ; _t loaded to fsr2l
  7237  006D14  6ED9               	movwf	fsr2l,c
  7238                           ;rgl.c: 2521: return (rgl.x_df<(-1*t));
  7239  006D16  CFD9 F000          	movff	fsr2l,btemp
  7240  006D1A  6A01               	clrf	btemp+1,c
  7241  006D1C  1E00               	comf	btemp,f,c
  7242  006D1E  1E01               	comf	btemp+1,f,c
  7243  006D20  4A00               	infsnz	btemp,f,c
  7244  006D22  2A01               	incf	btemp+1,f,c
  7245  006D24  C07A  F002         	movff	_rgl+5,btemp+2
  7246  006D28  6A03               	clrf	btemp+3,c
  7247  006D2A  BE02               	btfsc	btemp+2,7,c
  7248  006D2C  0603               	decf	btemp+3,f,c
  7249  006D2E  5003               	movf	btemp+3,w,c
  7250  006D30  0A80               	xorlw	128
  7251  006D32  6E04               	movwf	btemp+4,c
  7252  006D34  5001               	movf	btemp+1,w,c
  7253  006D36  0A80               	xorlw	128
  7254  006D38  5C04               	subwf	btemp+4,w,c
  7255  006D3A  E102               	bnz	u5465
  7256  006D3C  5000               	movf	btemp,w,c
  7257  006D3E  5C02               	subwf	btemp+2,w,c
  7258  006D40                     u5465:
  7259  006D40  E202               	bc	u5460
  7260  006D42  80D8               	bsf	status,0,c
  7261  006D44  0012               	return	
  7262  006D46                     u5460:
  7263  006D46  90D8               	bcf	status,0,c
  7264  006D48  0012               	return	
  7265                           ;rgl.c: 2522: }
  7266  006D4A                     __end_of_TFmaleje:
  7267                           ;rgl.c: 2526: bit TFstoi(void)
  7268                           ;rgl.c: 2527: {
  7269  006D4A                     _TFstoi:
  7270  000000                     
  7271                           ;rgl.c: 2528: return !rgl.x_df;
  7272  006D4A  EE00  F07A         	lfsr	0,_rgl+5
  7273  006D4E  50EF               	movf	indf0,w,c
  7274  006D50  90D8               	bcf	status,0,c
  7275  006D52  B4D8               	btfsc	status,2,c
  7276  006D54  80D8               	bsf	status,0,c
  7277  006D56  0012               	return	
  7278                           ;rgl.c: 2529: }
  7279  006D58                     __end_of_TFstoi:
  7280                           ;rgl.c: 2532: void RestartMod(void)
  7281                           ;rgl.c: 2533: {
  7282  006D58                     _RestartMod:
  7283  000000                     
  7284                           ;rgl.c: 2534: rgl.btco=0;
  7285  006D58  0100               	movlb	_rgl shr (0+8)
  7286  006D5A  9175               	bcf	_rgl& (0+255),0,b
  7287                           ;rgl.c: 2535: rgl.btcw=0;
  7288  006D5C  9375               	bcf	_rgl& (0+255),1,b
  7289                           ;rgl.c: 2536: rgl.fz=0;
  7290  006D5E  9575               	bcf	_rgl& (0+255),2,b
  7291                           ;rgl.c: 2537: rgl.med_up=0;
  7292  006D60  9775               	bcf	_rgl& (0+255),3,b
  7293                           ;rgl.c: 2538: rgl.fast_up=0;
  7294  006D62  9975               	bcf	_rgl& (0+255),4,b
  7295                           ;rgl.c: 2539: rgl.nmod=0;
  7296  006D64  9B75               	bcf	_rgl& (0+255),5,b
  7297                           ;rgl.c: 2540: rgl.del1s=0;
  7298  006D66  9D75               	bcf	_rgl& (0+255),6,b
  7299                           ;rgl.c: 2541: rgl.deln1=0;
  7300  006D68  9F75               	bcf	_rgl& (0+255),7,b
  7301                           ;rgl.c: 2542: rgl.inv_mod=0;
  7302  006D6A  9176               	bcf	(_rgl+1)& (0+255),0,b
  7303                           ;rgl.c: 2543: }
  7304  006D6C  0012               	return	
  7305  006D6E                     __end_of_RestartMod:
  7306  000000                     
  7307  000000                     
  7308  000000                     
  7309  000000                     
  7310  000000                     
  7311  000000                     
  7312  000000                     
  7313  000000                     
  7314  000000                     
  7315  000000                     
  7316  000000                     
  7317  000000                     
  7318  000000                     
  7319  000000                     
  7320  000000                     
  7321  000000                     
  7322  000000                     
  7323  000000                     
  7324  000000                     
  7325  000000                     
  7326  000000                     
  7327  000000                     
  7328  000000                     
  7329  000000                     
  7330  000000                     
  7331  000000                     
  7332  000000                     
  7333  000000                     
  7334  000000                     
  7335  000000                     
  7336  000000                     
  7337  000000                     
  7338  000000                     
  7339  000000                     
  7340  000000                     
  7341  000000                     
  7342  000000                     
  7343  000000                     
  7344  000000                     
  7345  000000                     
  7346  000000                     
  7347  000000                     
  7348  000000                     
  7349  000000                     
  7350  000000                     
  7351  000000                     
  7352  000000                     
  7353  000000                     
  7354  000000                     
  7355  000000                     
  7356  000000                     
  7357  000000                     
  7358  000000                     
  7359  000000                     
  7360  000000                     
  7361  000000                     
  7362  000000                     
  7363  000000                     
  7364  000000                     
  7365  000000                     
  7366  000000                     
  7367  000000                     
  7368  000000                     
  7369  000000                     
  7370  000000                     
  7371  000000                     
  7372  000000                     
  7373  000000                     
  7374  000000                     
  7375  000000                     
  7376  000000                     
  7377  000000                     
  7378  000000                     
  7379  000000                     
  7380  000000                     
  7381  000000                     
  7382  000000                     
  7383  000000                     
  7384  000000                     
  7385  000000                     
  7386  000000                     
  7387  000000                     
  7388  000000                     
  7389  000000                     
  7390  000000                     
  7391  000000                     
  7392  000000                     
  7393  000000                     
  7394  000000                     
  7395  000000                     
  7396  000000                     
  7397  000000                     
  7398  000000                     
  7399  000000                     
  7400  000000                     
  7401  000000                     
  7402  000000                     
  7403  000000                     
  7404  000000                     
  7405  000000                     
  7406  000000                     
  7407  000000                     
  7408  000000                     
  7409  000000                     
  7410  000000                     
  7411  000000                     
  7412  000000                     
  7413  000000                     
  7414  000000                     
  7415  000000                     
  7416  000000                     
  7417  000000                     
  7418  000000                     
  7419  000000                     
  7420  000000                     
  7421  000000                     
  7422  000000                     
  7423  000000                     
  7424  000000                     
  7425  000000                     
  7426  000000                     
  7427  000000                     
  7428  000000                     
  7429  000000                     
  7430  000000                     
  7431  000000                     
  7432  000000                     
  7433  000000                     
  7434  000000                     
  7435  000000                     
  7436  000000                     
  7437  000000                     
  7438  000000                     
  7439  000000                     
  7440  000000                     
  7441  000000                     
  7442  000000                     
  7443  000000                     
  7444  000000                     
  7445  000000                     
  7446  000000                     
  7447  000000                     
  7448  000000                     
  7449  000000                     
  7450  000000                     
  7451  000000                     
  7452  000000                     
  7453  000000                     
  7454  000000                     
  7455  000000                     
  7456  000000                     
  7457  000000                     
  7458  000000                     
  7459  000000                     
  7460  000000                     
  7461  000000                     
  7462  000000                     
  7463  000000                     
  7464  000000                     
  7465  000000                     
  7466  000000                     
  7467  000000                     
  7468  000000                     
  7469  000000                     
  7470  000000                     
  7471  000000                     
  7472  000000                     
  7473  000000                     
  7474  000000                     
  7475  000000                     
  7476  000000                     
  7477  000000                     
  7478  000000                     
  7479  000000                     
  7480  000000                     
  7481  000000                     
  7482  000000                     
  7483  000000                     
  7484  000000                     
  7485  000000                     
  7486  000000                     
  7487  000000                     
  7488  000000                     
  7489  000000                     
  7490  000000                     
  7491  000000                     
  7492  000000                     
  7493  000000                     
  7494  000000                     
  7495  000000                     
  7496  000000                     
  7497  000000                     
  7498  000000                     
  7499  000000                     
  7500  000000                     
  7501  000000                     
  7502  000000                     
  7503  000000                     
  7504  000000                     
  7505  000000                     
  7506  000000                     
  7507  000000                     
  7508  000000                     
  7509  000000                     
  7510  000000                     
  7511  000000                     
  7512  000000                     
  7513  000000                     
  7514  000000                     
  7515  000000                     
  7516  000000                     
  7517  000000                     
  7518  000000                     
  7519  000000                     
  7520  000000                     
  7521  000000                     
  7522  000000                     
  7523  000000                     
  7524  000000                     
  7525  000000                     
  7526  000000                     
  7527  000000                     
  7528  000000                     
  7529  000000                     
  7530  000000                     
  7531  000000                     
  7532  000000                     
  7533  000000                     
  7534  000000                     
  7535  000000                     
  7536  000000                     
  7537  000000                     
  7538  000000                     
  7539  000000                     
  7540  000000                     
  7541  000000                     
  7542  000000                     
  7543  000000                     
  7544  000000                     
  7545  000000                     
  7546  000000                     
  7547  000000                     
  7548  000000                     
  7549  000000                     
  7550  000000                     
  7551  000000                     
  7552  000000                     
  7553  000000                     
  7554  000000                     
  7555  000000                     
  7556  000000                     
  7557  000000                     
  7558  000000                     
  7559  000000                     
  7560  000000                     
  7561  000000                     
  7562  000000                     
  7563  000000                     
  7564  000000                     
  7565  000000                     
  7566  000000                     
  7567  000000                     
  7568  000000                     
  7569  000000                     
  7570  000000                     
  7571  000000                     
  7572  000000                     
  7573  000000                     
  7574  000000                     
  7575  000000                     
  7576  000000                     
  7577  000000                     
  7578  000000                     
  7579  000000                     
  7580  000000                     
  7581  000000                     
  7582  000000                     
  7583  000000                     
  7584  000000                     
  7585  000000                     
  7586  000000                     
  7587  000000                     
  7588  000000                     
  7589  000000                     
  7590  000000                     
  7591  000000                     
  7592  000000                     
  7593  000000                     
  7594  000000                     
  7595  000000                     
  7596  000000                     
  7597  000000                     
  7598  000000                     
  7599  000000                     
  7600  000000                     
  7601  000000                     
  7602  000000                     
  7603  000000                     
  7604  000000                     
  7605  000000                     
  7606  000000                     
  7607  000000                     
  7608  000000                     
  7609  000000                     
  7610  000000                     
  7611  000000                     
  7612  000000                     
  7613  000000                     
  7614  000000                     
  7615  000000                     
  7616  000000                     
  7617  000000                     
  7618  000000                     
  7619  000000                     
  7620  000000                     
  7621  000000                     
  7622  000000                     
  7623  000000                     
  7624  000000                     
  7625  000000                     
  7626  000000                     
  7627  000000                     
  7628  000000                     
  7629  000000                     
  7630  000000                     
  7631  000000                     
  7632  000000                     
  7633  000000                     
  7634  000000                     
  7635  000000                     
  7636  000000                     
  7637  000000                     
  7638  000000                     
  7639  000000                     
  7640  000000                     
  7641  000000                     
  7642  000000                     
  7643  000000                     
  7644  000000                     
  7645  000000                     
  7646  000000                     
  7647  000000                     
  7648  000000                     
  7649  000000                     
  7650  000000                     
  7651  000000                     
  7652  000000                     
  7653  000000                     
  7654  000000                     
  7655  000000                     
  7656  000000                     
  7657  000000                     
  7658  000000                     
  7659  000000                     
  7660  000000                     
  7661  000000                     
  7662  000000                     
  7663  000000                     
  7664  000000                     
  7665  000000                     
  7666  000000                     
  7667  000000                     
  7668  000000                     
  7669  000000                     
  7670  000000                     
  7671  000000                     
  7672  000000                     
  7673  000000                     
  7674  000000                     
  7675  000000                     
  7676  000000                     
  7677  000000                     
  7678  000000                     
  7679  000000                     
  7680  000000                     
  7681  000000                     
  7682  000000                     
  7683  000000                     
  7684  000000                     
  7685  000000                     
  7686  000000                     
  7687  000000                     
  7688  000000                     
  7689  000000                     
  7690  000000                     
  7691  000000                     
  7692  000000                     
  7693  000000                     
  7694  000000                     
  7695  000000                     
  7696  000000                     
  7697  000000                     
  7698  000000                     
  7699  000000                     
  7700  000000                     
  7701  000000                     
  7702  000000                     
  7703  000000                     
  7704  000000                     
  7705  000000                     
  7706  000000                     
  7707  000000                     
  7708  000000                     
  7709  000000                     
  7710  000000                     
  7711  000000                     
  7712  000000                     
  7713  000000                     
  7714  000000                     
  7715  000000                     
  7716  000000                     
  7717  000000                     
  7718  000000                     
  7719  000000                     
  7720  000000                     
  7721  000000                     
  7722  000000                     
  7723  000000                     
  7724  000000                     
  7725  000000                     
  7726  000000                     
  7727  000000                     
  7728  000000                     
  7729  000000                     
  7730  000000                     
  7731  000000                     
  7732  000000                     
  7733  000000                     
  7734  000000                     
  7735  000000                     
  7736  000000                     
  7737  000000                     
  7738  000000                     
  7739  000000                     
  7740  000000                     
  7741  000000                     
  7742                           
  7743                           	psect	bigbss
  7744  000ED0                     F1706:
  7745  000ED0                     	ds	1
  7746  000ED0                     F1739:
  7747  000ED0                     	ds	1
  7748  000ED0                     F1740:
  7749  000ED0                     	ds	1
  7750  000ED0                     F1741:
  7751  000ED0                     	ds	1
  7752  000ED0                     F1742:
  7753  000ED0                     	ds	1
  7754  000ED0                     F1743:
  7755  000ED0                     	ds	1
  7756  000ED0                     F1744:
  7757  000ED0                     	ds	1
  7758  000ED0                     F1745:
  7759  000ED0                     	ds	1
  7760  000ED0                     F1758:
  7761  000ED0                     	ds	1
  7762  000ED0                     F1773:
  7763  000ED0                     	ds	1
  7764  000ED0                     F1780:
  7765  000ED0                     	ds	1
  7766  000ED0                     F1781:
  7767  000ED0                     	ds	1
  7768  000ED0                     F1782:
  7769  000ED0                     	ds	1
  7770  000ED0                     F1783:
  7771  000ED0                     	ds	1
  7772  000ED0                     F1784:
  7773  000ED0                     	ds	1
  7774  000ED0                     F1785:
  7775  000ED0                     	ds	1
  7776  000ED0                     F1786:
  7777  000ED0                     	ds	1
  7778  000ED0                     F1793:
  7779  000ED0                     	ds	1
  7780  000ED0                     F1810:
  7781  000ED0                     	ds	1
  7782  000ED0                     F1817:
  7783  000ED0                     	ds	1
  7784  000ED0                     F1818:
  7785  000ED0                     	ds	1
  7786  000ED0                     F1819:
  7787  000ED0                     	ds	1
  7788  000ED0                     F1820:
  7789  000ED0                     	ds	1
  7790  000ED0                     F1821:
  7791  000ED0                     	ds	1
  7792  000ED0                     F1822:
  7793  000ED0                     	ds	1
  7794  000ED0                     F1823:
  7795  000ED0                     	ds	1
  7796  000000                     
  7797  000000                     
  7798  000000                     
  7799  000000                     
  7800  000000                     
  7801  000000                     
  7802  000000                     
  7803  000000                     
  7804  000000                     
  7805  000000                     
  7806  000000                     
  7807  000000                     
  7808  000000                     
  7809  000000                     
  7810  000000                     
  7811  000000                     
  7812  000000                     
  7813  000000                     
  7814  000000                     
  7815  000000                     
  7816  000000                     
  7817  000000                     
  7818  000000                     
  7819  000000                     
  7820  000000                     
  7821  000000                     
  7822  000000                     
  7823  000000                     
  7824  000000                     
  7825  000000                     
  7826  000000                     
  7827  000000                     
  7828  000000                     
  7829  000000                     
  7830  000000                     
  7831  000000                     
  7832  000000                     
  7833  000000                     
  7834  000000                     
  7835  000000                     
  7836  000000                     
  7837  000000                     
  7838  000000                     
  7839  000000                     
  7840  000000                     
  7841  000000                     
  7842  000000                     
  7843  000000                     
  7844  000000                     
  7845  000000                     
  7846  000000                     
  7847  000000                     
  7848  000000                     
  7849  000000                     
  7850  000000                     
  7851  000000                     
  7852  000000                     
  7853  000000                     
  7854  000000                     
  7855  000000                     
  7856  000000                     
  7857  000000                     
  7858  000000                     
  7859  000000                     
  7860  000000                     
  7861  000000                     
  7862  000000                     
  7863  000000                     
  7864  000000                     
  7865  000000                     
  7866  000000                     
  7867  000000                     
  7868  000000                     
  7869  000000                     
  7870  000000                     
  7871  000000                     
  7872  000000                     
  7873  000000                     
  7874  000000                     
  7875  000000                     
  7876  000000                     
  7877  000000                     
  7878  000000                     
  7879  000000                     
  7880  000000                     
  7881  000000                     
  7882  000000                     
  7883  000000                     
  7884  000000                     
  7885  000000                     
  7886  000000                     
  7887  000000                     
  7888  000000                     
  7889  000000                     
  7890  000000                     
  7891  000000                     
  7892  000000                     
  7893  000000                     
  7894  000000                     
  7895  000000                     
  7896  000000                     
  7897  000000                     
  7898  000000                     
  7899  000000                     
  7900  000000                     
  7901  000000                     
  7902  000000                     
  7903  000000                     
  7904  000000                     
  7905  000000                     
  7906  000000                     
  7907  000000                     
  7908  000000                     
  7909  000000                     
  7910  000000                     
  7911  000000                     
  7912  000000                     
  7913  000000                     
  7914  000000                     
  7915  000000                     
  7916  000000                     
  7917  000000                     
  7918  000000                     
  7919  000000                     
  7920  000000                     
  7921  000ED0                     _pwm_center:
  7922  000ED0                     	ds	1
  7923  000ED0                     _pwm_kwr:
  7924  000ED0                     	ds	1
  7925  000ED0                     _tmr:
  7926  000ED0                     	ds	1
  7927  000ED0                     _tmr2:
  7928  000ED0                     	ds	1
  7929  000000                     
  7930  000000                     
  7931  000000                     
  7932  000000                     
  7933  000000                     
  7934  000000                     
  7935  000000                     
  7936                           
  7937                           	psect	bss
  7938  000075                     _rgl:
  7939  000075                     	ds	10
  7940                           
  7941                           	psect	temp
  7942  000000                     btemp:
  7943  000000                     	ds	8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           prodh	equ	0xFF4
  7947                           prodl	equ	0xFF3
  7948                           indf0	equ	0xFEF
  7949                           fsr0h	equ	0xFEA
  7950                           fsr0l	equ	0xFE9
  7951                           wreg	equ	0xFE8
  7952                           fsr1l	equ	0xFE1
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Wed Mar 20 08:54:40 2013

                    _M 017A              ?a_ModDkCO 00D7  
            ?a_ModDkCW 00D7                     l20 408A  
                   l21 4072                     l30 4158  
                   l22 407E                     l14 42AA  
                   l31 4154                     l23 4092  
                   l15 3FF0                     l40 421C  
                   l24 40D2                     l16 4034  
                   l41 4224                     l25 40CE  
                   l17 402C                     l42 4264  
                   l34 419A                     l51 431A  
                   l43 4260                     l35 419E  
                   l60 43B8                     l36 41DE  
                   l28 4110                     l37 41DA  
                   l29 4118                     l62 43F2  
                   l54 4348                     l46 42A2  
                   l71 456E                     l63 43FC  
                   l55 434C                     l80 464C  
                   l72 45D4                     l64 445A  
                   l48 42D2                     l81 467A  
                   l73 460C                     l57 437A  
                   l49 4322                     l90 46E6  
                   l74 4606                     l66 44F4  
                   l91 46F4                     l67 453A  
                   l84 47A0                     l68 4540  
                   l85 4704                     l77 4682  
                   l95 471E                     l87 46AC  
                   l79 4636                     l96 4724  
                   l88 46B2                     l97 475C  
                   l89 46E0              ?a_ModZgCO 00D7  
            ?a_ModZgCW 00D7               _StartCO2 6278  
             _StartCO4 5976               _StartMCW 491C  
           ?a_ModDkCW2 00D7             ?a_ModDkCW4 00D7  
           ?a_FirstPCW 00D7                    l100 4790  
                  l101 478A                    l112 4832  
                  l121 48B0                    l113 482A  
                  l202 513E                    l130 490A  
                  l203 510A                    l131 490E  
                  l107 47F2                    l220 51A0  
                  l212 5128                    l204 50D0  
                  l116 4860                    l108 47DC  
                  l221 51E8                    l141 4AFA  
                  l109 47E2                    l310 5756  
                  l302 56CE                    l230 523E  
                  l222 51DE                    l206 50EC  
                  l150 4CB0                    l142 4AEE  
                  l311 575E                    l231 524A  
                  l215 5174                    l135 49FA  
                  l119 48B8                    l400 5EB2  
                  l312 57D0                    l232 5256  
                  l216 5170                    l208 5104  
                  l152 4CCE                    l144 4B6C  
                  l136 49FE                    l401 5D90  
                  l321 58B2                    l233 5338  
                  l225 521C                    l153 4CC4  
                  l145 4BC4                    l137 4AE0  
                  l410 5E0C                    l402 5D9C  
                  l322 58B6                    l250 5364  
                  l242 52DC                    l234 528C  
                  l170 4D8C                    l138 4A80  
                  l411 5E2C                    l403 5DA6  
                  l323 591E                    l251 538E  
                  l235 52C4                    l219 5180  
                  l155 4CDA                    l147 4BD6  
                  l139 4ADA                    l412 5E74  
                  l316 5842                    l260 5408  
                  l252 538A                    l244 52EA  
                  l236 52C0                    l172 4DC6  
                  l148 4CB6                    l421 5ECA  
                  l413 5E6A                    l341 5958  
                  l333 592A                    l261 5400  
                  l173 4DD0                    l149 4C56  
                  l502 6310                    l422 5ED6  
                  l406 5DD4                    l270 54C8  
                  l254 5380                    l246 5320  
                  l238 52B6                    l190 501C  
                  l182 4F4A                    l174 4E2E  
                  l503 630A                    l423 5EE2  
                  l407 5DFC                    l327 5918  
                  l271 5494                    l247 5328  
                  l191 5026                    l183 4FB0  
                  l167 4D5A                    l600 6988  
                  l440 5FFE                    l424 5FAC  
                  l416 5EA8                    l352 59AC  
                  l344 5964                    l328 5912  
                  l184 4FE8                    l176 4EC8  
                  l433 5F86                    l425 5F18  
                  l409 5E00                    l361 5A24  
                  l353 59B0                    l337 5972  
                  l265 5446                    l257 53CC  
                  l185 4FE2                    l177 4F0E  
                  l530 6432                    l506 6320  
                  l442 5FF4                    l434 5F8E  
                  l426 5F50                    l338 594C  
                  l282 5544                    l266 5436  
                  l194 50A8                    l178 4F14  
                  l611 6A22                    l603 69BA  
                  l531 641E                    l435 5F9C  
                  l427 5F4C                    l363 5A34  
                  l275 54C2                    l195 5064  
                  l620 6A8C                    l540 65B4  
                  l516 6376                    l508 6330  
                  l460 60F0                    l380 5B1C  
                  l292 58BA                    l284 555C  
                  l188 5226                    l541 65BA  
                  l453 60BA                    l445 6040  
                  l429 5F42                    l381 5B08  
                  l357 5A14                    l293 55BC  
                  l277 554A                    l197 5080  
                  l189 5010                    l614 6A5E  
                  l606 69E0                    l550 67E8  
                  l526 63B8                    l470 61C4  
                  l454 60AA                    l438 5FD8  
                  l390 5C9E                    l358 5A0E  
                  l294 55C0                    l278 5516  
                  l615 6A56                    l551 66A6  
                  l535 646C                    l527 63D8  
                  l439 6002                    l391 5CA4  
                  l295 5748                    l199 5098  
                  l640 6270                    l608 69D6  
                  l552 66B2                    l544 65E0  
                  l536 6476                    l448 607C  
                  l376 5AA2                    l296 55DA  
                  l288 558C                    l641 6B70  
                  l633 6B16                    l625 6AD2  
                  l553 66BC                    l545 6646  
                  l537 64D4                    l449 6074  
                  l385 5B56                    l377 5AC2  
                  l297 55E2                    l289 5592  
                  l634 6B24                    l626 6AD8  
                  l570 67DE                    l562 672C  
                  l546 667E                    l482 6270  
                  l474 6218                    l394 5CCA  
                  l386 5B60                    l298 5656  
                  l619 6A9C                    l547 6678  
                  l539 656E                    l483 6240  
                  l475 61D0                    l459 60EA  
                  l395 5D30                    l387 5BBE  
                  l644 6B8C                    l580 68D4  
                  l564 6742                    l556 66FC  
                  l396 5D68                    l653 6BE8  
                  l637 6B9E                    l629 6B04  
                  l581 6878                    l565 6762  
                  l469 61BE                    l397 5D62  
                  l389 5C58                    l638 6B54  
                  l566 67AA                    l558 6734  
                  l486 624C                    l478 61FC  
                  l575 6800                    l567 67A0  
                  l559 6714                    l592 690A  
                  l584 689E                    l576 680C  
                  l593 6912                    l577 6818  
                  l497 62AE                    l489 6258  
                  l658 6C26                    l594 6920  
                  l586 68D0                    l578 6930  
                  l498 62B2                    l659 6C2A  
                  l579 684E                    l588 68C6  
                  l597 695E                    l599 69E4  
                  u150 416A                    u420 4398  
                  u325 4312                    u505 4532  
                  u381 438A                    u615 4672  
                  u535 45CC                    u545 45FE  
                  u465 44AC                    u580 4628  
                  u805 4822                    u725 4754  
                  u485 44E6                    u815 4858  
                  u735 4782                    u665 46D8  
                  u845 48A8                    u945 49EE  
                  u995 4AD2                    _PWM 026E  
           ?a_ModZgCW2 00D7             ?a_ModZgCW4 00D7  
           ?a_ModPruCW 00D7                    _rgl 0075  
            _StartMCO3 6BF8              _StartMCW2 62C2  
            _StartMCW4 59BE                    _tmr 0EEC  
    __end_of_StartMCO3 6C3E      __end_of_StartMCW2 62F0  
    __end_of_StartMCW4 59F4                    wreg 000FE8  
            _StartRTdS DD0C             _RestartMod 6D58  
                 F1810 0EE2                   F1706 0ED0  
                 F1820 0EE6                   F1740 0ED2  
                 F1821 0EE7                   F1741 0ED3  
                 F1822 0EE8                   F1742 0ED4  
                 F1823 0EE9                   F1743 0ED5  
                 F1744 0ED6                   F1817 0EE3  
                 F1745 0ED7                   F1818 0EE4  
                 F1819 0EE5                   F1739 0ED1  
                 F1780 0EDA                   F1781 0EDB  
                 F1773 0ED9                   F1782 0EDC  
                 F1758 0ED8                   F1783 0EDD  
                 F1784 0EDE                   F1793 0EE1  
                 F1785 0EDF                   F1786 0EE0  
   __end_of_RestartMod 6D6E                   u1035 4BBE  
                 u2105 5318                   u2205 53F8  
                 u1325 4FA8                   u1245 4E80  
                 u1335 4FDA                   u1095 4CA8  
                 u2305 548C                   u1265 4EBA  
                 u2315 54BA                   u3205 5D5A  
                 u3125 5C10                   u1285 4F06  
                 u1640 50C8                   u3145 5C4A  
                 u2505 563E                   u2195 53C4  
                 u1820 5120                   u3165 5C96  
                 u2365 550E                   u2375 553C  
                 u4305 6670                   u4225 6526  
                 u3505 5F7E                   u2545 56B2  
                 u3195 5D28                   u2715 589C  
                 u2635 57BA                   u4245 6560  
                 u3605 6038                   u3615 606C  
                 u3375 5E62                   u5400 6CB2  
                 u4440 66F8                   u4265 65AC  
                 u3385 5EA0                   u2585 572C  
                 u1945 51D6                   u5315 6BE0  
                 u2675 582C                   u1955 5214  
                 u5420 6CE8                   u3820 61F2  
                 u4390 66DC                   u4535 6798  
                 u4295 663E                   u2775 590A  
                 u5440 6D10                   u5360 6C54  
                 u5425 6CE2                   u4545 67D6  
                 u5460 6D46                   u5380 6C8A  
                 u3860 620E                   u3775 61B6  
                 u5465 6D40                   u5385 6C84  
                 u4775 6902                   u4985 6A1A  
                 u4995 6A4E                   _DtCO 020C  
                 _DtCW 021B              _WriteOPWM C28E  
                 _RTdS DD30        __end_of_ClrMod2 6346  
      __end_of_ClrMod4 5A52            ?a_ModPruCW2 00D7  
          ?a_ModPruCW4 00D7             _StartMCO1F 42C8  
                 aldiv E526                   _tmr2 0EED  
                 fsr0h 000FEA                   indf0 000FEF  
                 fsr0l 000FE9                   fsr1l 000FE1  
                 fsr2l 000FD9                   btemp 0000  
                 awdiv E598                   awmul E606  
   __end_of_StartMCO1F 4360                   lwdiv E464  
      __end_of_ModDkCO 4612        __end_of_ModDkCW 4FEE  
                 prodl 000FF3                   lwmul E606  
           _pwm_center 0EEA        __end_of_ModToCO 4D10  
      __end_of_ModToCW 4D04        __end_of_ModZgCO 454A  
      __end_of_ModZgCW 4F1E        __end_of_Moduluj 42C8  
      __end_of_PropCO2 6BA6        __end_of_PropCO4 6278  
      __end_of_Tmaleje 6C8E        __end_of_PropOPT 48D4  
      __end_of_StartCO 491C        __end_of_Tnizsza 6CB6  
      __end_of_Trosnie 6C58        __end_of_Twyzsza 6CEC  
        __end_of_Tstoi 6C9C            _IncConstCO2 637C  
          _IncConstCW2 635E                  _DtKNF 0084  
  __end_of_IncConstCO2 638C    __end_of_IncConstCW2 637C  
        _IncConstCOCW4 5A6A             used_btemp0 0001  
           used_btemp1 0001             used_btemp2 0001  
           used_btemp3 0001             used_btemp4 0001  
           used_btemp5 0001             used_btemp6 0001  
           used_btemp7 0001                  _Tstoi 6C8E  
     __end_of_TFmaleje 6D4A       __end_of_IncMaxCO 4868  
     __end_of_IncMaxCW 55A2       __end_of_TFrosnie 6D14  
     __end_of_ModDkCW2 6684       __end_of_ModDkCW4 5D6E  
     __end_of_FirstPCW 4CE0                _ClrMod2 6336  
              _ClrMod4 5A3A                  status 000FD8  
__end_of_IncConstCOCW4 5A7A       __end_of_ModToCO2 635E  
     __end_of_ModToCO3 6BF8       __end_of_ModToCO4 5A6A  
     __end_of_ModToCW2 6352       __end_of_ModToCW3 6BF0  
     __end_of_ModToCW4 5A5E       __end_of_ModZgCW2 65C4  
     __end_of_ModZgCW4 5CAE       __end_of_ModPruCO 47A6  
     __end_of_ModPruCW 5418       __end_of_ModPrzCO 48C8  
     __end_of_ModPrzCW 5930                _ModDkCO 454A  
              _ModDkCW 4F1E                _ModToCO 4D04  
              _ModToCW 4CF8                _ModZgCO 4360  
              _ModZgCW 4D3C                _Moduluj 3FEE  
              __Lparam 00D7                _PropCO2 6B32  
              _PropCO4 6226                _Tmaleje 6C58  
              _PropOPT 48C8                _StartCO 48D4  
              _Tnizsza 6C9C                _Trosnie 6C3E  
     __end_of_StartCO2 62C2       __end_of_StartCO4 59BE  
     __end_of_StartMCW 49AA                _Twyzsza 6CB6  
              __ramtop 1000         __end_of_ClrMod 4CF8  
       __end_of_TFstoi 6D58         __end_of_PropCO 5976  
       __end_of_Trowna 6CFA            _ReadDataCO2 638C  
          _ReadDataCO4 5A7A                _pwm_kwr 0EEB  
          _ReadDataCW2 6396            _ReadDataCW4 5A84  
  __end_of_ReadDataCO2 6396    __end_of_ReadDataCO4 5A84  
  __end_of_ReadDataCW2 63A8    __end_of_ReadDataCW4 5A96  
         _IncConstCOCW 4D10                 _ClrMod 4CE0  
 __end_of_IncConstCOCW 4D20                 _TFstoi 6D4A  
               _PropCO 5930                 _Trowna 6CEC  
               aldiv_f E66C                 almul_f E658  
           _ReadDataCO 4D20             _ReadDataCW 4D2A  
            _IncMaxCW2 6A6E              _IncMaxCW4 608C  
    __end_of_IncMaxCW2 6AE8      __end_of_IncMaxCW4 6100  
   __end_of_ReadDataCO 4D2A     __end_of_ReadDataCW 4D3C  
            _FirstPCW2 62F0              _FirstPCW4 59F4  
               tblptrh 000FF7                 tblptrl 000FF6  
    __end_of_FirstPCW2 6336      __end_of_FirstPCW4 5A3A  
             _TFmaleje 6D14               _IncMaxCO 47A6  
             _IncMaxCW 5418               _TFrosnie 6CFA  
            _ModPruCW2 6684              _ModPruCW4 5D6E  
            _ModPrzCW2 6AE8              _ModPrzCW4 6100  
    __end_of_ModPruCW2 6A6E      __end_of_ModPruCW4 608C  
    __end_of_ModPrzCW2 6B32      __end_of_ModPrzCW4 6226  
             _ModDkCW2 65C4               _ModDkCW4 5CAE  
             _FirstPCW 49AA               _ModToCO2 6352  
             _ModToCO3 6BF0               _ModToCO4 5A5E  
             _ModToCW2 6346               _ModToCW3 6BA6  
             _ModToCW4 5A52               _ModZgCW2 63A8  
             _ModZgCW4 5A96               _ModPruCO 4612  
             _ModPruCW 4FEE               _ModPrzCO 4868  
             _ModPrzCW 55A2  
