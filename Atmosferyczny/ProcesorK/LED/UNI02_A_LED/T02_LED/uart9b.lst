

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Wed Mar 20 08:54:40 2013


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	rbss,global,common,class=COMRAM,space=1,d
      +                          elta=1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           
    99                           	psect	text
   100                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   101                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   102                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   103                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   104                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   105                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   106                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   107                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   108                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   109                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   110                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   111                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   112                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   113                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   114                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   115                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   116                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   117                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   118                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   119                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   120                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   121                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   122                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   123                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   124                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   125                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   126                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   127                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   128                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   129                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   130                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   131                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   132                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   133                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   134                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   135                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   136                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   137                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   138                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   139                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   140                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   141                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   142                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   143                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   144                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   145                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   146                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   147                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   148                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   149                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   150                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   151                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   152                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   153                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   154                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   155                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   156                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   157                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   158                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   159                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   160                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   161                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   162                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   163                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   164                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   165                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   166                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   167                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   168                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   169                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   170                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   171                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   172                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   173                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   174                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   175                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   176                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   177                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   178                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   179                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   180                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   181                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   182                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   183                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   184                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   185                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   186                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   187                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   188                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   189                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   190                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   191                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   192                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   193                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   194                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   195                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   196                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   197                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   198                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   199                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   200  00DA18                     _InitUart:
   201                           ;       param _nData assigned to ?_LiczRSCHK+2
   202  000000                     _LiczRSCHK$nData	set	?_LiczRSCHK+2
   203                           ;       param _bf assigned to ?_LiczRSCHK+0
   204  000000                     _LiczRSCHK$bf	set	?_LiczRSCHK
   205                           ;       param _data assigned to ?_SetRSTBuf+0
   206  000000                     _SetRSTBuf$data	set	?_SetRSTBuf
   207  000000                     
   208                           ;uart9b.c: 22: unsigned char rc;
   209  00DA18  9EAC               	bcf	4012,7,c
   210                           ;uart9b.c: 27: RX9=1;
   211  00DA1A  8CAB               	bsf	4011,6,c
   212                           ;uart9b.c: 28: SPBRG=((8*4*1000000/2400)/64)-1;
   213  00DA1C  0ECF               	movlw	207
   214  00DA1E  6EAF               	movwf	4015,c
   215                           ;uart9b.c: 29: SYNC=0;
   216  00DA20  98AC               	bcf	4012,4,c
   217                           ;uart9b.c: 30: BRGH=0;
   218  00DA22  94AC               	bcf	4012,2,c
   219                           ;uart9b.c: 31: ADDEN=1;
   220  00DA24  86AB               	bsf	4011,3,c
   221                           ;uart9b.c: 32: TX9=1;
   222  00DA26  8CAC               	bsf	4012,6,c
   223                           ;uart9b.c: 33: RCIP=1;
   224  00DA28  8A9F               	bsf	3999,5,c
   225                           ;uart9b.c: 34: RCIE=1;
   226  00DA2A  8A9D               	bsf	3997,5,c
   227                           ;uart9b.c: 35: TXIP=1;
   228  00DA2C  889F               	bsf	3999,4,c
   229                           ;uart9b.c: 36: TXEN=1;
   230  00DA2E  8AAC               	bsf	4012,5,c
   231                           ;uart9b.c: 37: SPEN=1;
   232  00DA30  8EAB               	bsf	4011,7,c
   233                           ;uart9b.c: 38: CREN=1;
   234  00DA32  88AB               	bsf	4011,4,c
   235                           ;uart9b.c: 41: UADt.RData=0;
   236  00DA34  0100               	movlb	_UADt shr (0+8)
   237  00DA36  9170               	bcf	_UADt& (0+255),0,b
   238                           ;uart9b.c: 42: UADt.RErrREC=0;
   239  00DA38  9570               	bcf	_UADt& (0+255),2,b
   240                           ;uart9b.c: 43: UADt.RErrBUF=0;
   241  00DA3A  9770               	bcf	_UADt& (0+255),3,b
   242                           ;uart9b.c: 45: UADt.TData=0;
   243  00DA3C  9970               	bcf	_UADt& (0+255),4,b
   244                           ;uart9b.c: 46: UADt.RNData=0;
   245  00DA3E  6B72               	clrf	(_UADt+2)& (0+255),b
   246                           ;uart9b.c: 47: UADt.TNData=0;
   247  00DA40  6B73               	clrf	(_UADt+3)& (0+255),b
   248                           ;uart9b.c: 49: UADt.REnd=0;
   249  00DA42  9370               	bcf	_UADt& (0+255),1,b
   250                           ;uart9b.c: 50: UADt.TEnd=0;
   251  00DA44  9B70               	bcf	_UADt& (0+255),5,b
   252                           ;uart9b.c: 51: UADt.indeks=0;
   253  00DA46  6B71               	clrf	(_UADt+1)& (0+255),b
   254                           ;uart9b.c: 52: rc=RCREG;
   255  00DA48  50AE               	movf	4014,w,c	;volatile
   256  00DA4A  6ED9               	movwf	fsr2l,c
   257                           ;uart9b.c: 53: TXIE=0;
   258  00DA4C  989D               	bcf	3997,4,c
   259                           ;uart9b.c: 54: }
   260  00DA4E  0012               	return	
   261  00DA50                     __end_of_InitUart:
   262                           ;uart9b.c: 58: void IntUSARTRC(void)
   263                           ;uart9b.c: 59: {
   264  00DA50                     _IntUSARTRC:
   265  000000                     
   266                           ;uart9b.c: 60: if(ADDEN&&RX9D)
   267  00DA50  B6AB               	btfsc	4011,3,c
   268  00DA52  A0AB               	btfss	4011,0,c	;volatile
   269  00DA54  D016               	goto	l4
   270                           ;uart9b.c: 61: {
   271  00DA56  CFAE F05C          	movff	4014,_RSerial	;volatile
   272                           ;uart9b.c: 63: if(RSerial==0x02)
   273  00DA5A  505C               	movf	_RSerial,w,c	;volatile
   274  00DA5C  0A02               	xorlw	2
   275  00DA5E  A4D8               	btfss	status,2,c
   276  00DA60  0012               	return	
   277                           ;uart9b.c: 64: {
   278  00DA62  96AB               	bcf	4011,3,c
   279                           ;uart9b.c: 66: UADt.indeks=0;
   280  00DA64  0100               	movlb	(_UADt+1) shr (0+8)
   281  00DA66  6B71               	clrf	(_UADt+1)& (0+255),b
   282                           ;uart9b.c: 67: bufRUART[UADt.indeks++]=RSerial;
   283  00DA68  EE00  F071         	lfsr	0,_UADt+1
   284  00DA6C  50EF               	movf	indf0,w,c
   285  00DA6E  2AEF               	incf	indf0,f,c
   286  00DA70  EE0E  F0F0         	lfsr	0,_bufRUART
   287  00DA74  26E9               	addwf	fsr0l,f,c
   288  00DA76  0E00               	movlw	0
   289  00DA78  22EA               	addwfc	fsr0h,f,c
   290  00DA7A  C05C  FFEF         	movff	_RSerial,indf0	;volatile
   291                           ;uart9b.c: 68: UADt.RData=1;
   292  00DA7E  8170               	bsf	_UADt& (0+255),0,b
   293                           ;uart9b.c: 69: }
   294  00DA80  0C00               	retlw	0
   295  00DA82                     l4:
   296                           ;uart9b.c: 71: }
   297  00DA82  CFAE F05C          	movff	4014,_RSerial	;volatile
   298                           ;uart9b.c: 73: if (UADt.indeks<35)
   299  00DA86  0E23               	movlw	35
   300  00DA88  0100               	movlb	(_UADt+1) shr (0+8)
   301  00DA8A  6171               	cpfslt	(_UADt+1)& (0+255),b
   302  00DA8C  D02D               	goto	l6
   303                           ;uart9b.c: 74: {
   304  00DA8E  EE00  F071         	lfsr	0,_UADt+1
   305  00DA92  50EF               	movf	indf0,w,c
   306  00DA94  2AEF               	incf	indf0,f,c
   307  00DA96  EE0E  F0F0         	lfsr	0,_bufRUART
   308  00DA9A  26E9               	addwf	fsr0l,f,c
   309  00DA9C  0E00               	movlw	0
   310  00DA9E  22EA               	addwfc	fsr0h,f,c
   311  00DAA0  C05C  FFEF         	movff	_RSerial,indf0	;volatile
   312                           ;uart9b.c: 76: UADt.RNData=bufRUART[1];
   313  00DAA4  CEF1  F072         	movff	_bufRUART+1,_UADt+2
   314                           ;uart9b.c: 77: if(VerifyNDatCHK(UADt.RNData))
   315  00DAA8  C072  FFE8         	movff	_UADt+2,wreg
   316  00DAAC  D928               	call	_VerifyNDatCHK
   317  00DAAE  0900               	iorlw	0
   318  00DAB0  E015               	bz	l7
   319                           ;uart9b.c: 78: {
   320  00DAB2  C072  FFE8         	movff	_UADt+2,wreg
   321  00DAB6  0B1F               	andlw	31
   322  00DAB8  CFE8 F072          	movff	wreg,_UADt+2
   323                           ;uart9b.c: 81: if(UADt.RNData>35) UADt.RNData=35
      +                          ;
   324  00DABC  0E23               	movlw	35
   325  00DABE  0100               	movlb	(_UADt+2) shr (0+8)
   326  00DAC0  6572               	cpfsgt	(_UADt+2)& (0+255),b
   327  00DAC2  D002               	goto	l8
   328  00DAC4  CFE8 F072          	movff	wreg,_UADt+2
   329  00DAC8                     l8:
   330                           ;uart9b.c: 82: if (UADt.indeks>=UADt.RNData)
   331  00DAC8  C072  FFE8         	movff	_UADt+2,wreg
   332  00DACC  0100               	movlb	(_UADt+1) shr (0+8)
   333  00DACE  5D71               	subwf	(_UADt+1)& (0+255),w,b
   334  00DAD0  A0D8               	btfss	status,0,c
   335  00DAD2  0012               	return	
   336                           ;uart9b.c: 83: {
   337  00DAD4  86AB               	bsf	4011,3,c
   338                           ;uart9b.c: 85: UADt.RData=0;
   339  00DAD6  9170               	bcf	_UADt& (0+255),0,b
   340                           ;uart9b.c: 86: UADt.REnd=1;
   341  00DAD8  8370               	bsf	_UADt& (0+255),1,b
   342                           ;uart9b.c: 87: }
   343  00DADA  0012               	return	
   344  00DADC                     l7:
   345                           ;uart9b.c: 89: else
   346  00DADC  86AB               	bsf	4011,3,c
   347                           ;uart9b.c: 92: UADt.RData=0;
   348  00DADE  0100               	movlb	_UADt shr (0+8)
   349  00DAE0  9170               	bcf	_UADt& (0+255),0,b
   350                           ;uart9b.c: 93: UADt.REnd=0;
   351  00DAE2  9370               	bcf	_UADt& (0+255),1,b
   352                           ;uart9b.c: 94: UADt.RErrBUF=1;
   353  00DAE4  8770               	bsf	_UADt& (0+255),3,b
   354                           ;uart9b.c: 95: }
   355  00DAE6  0012               	return	
   356  00DAE8                     l6:
   357                           ;uart9b.c: 97: else
   358  00DAE8  86AB               	bsf	4011,3,c
   359                           ;uart9b.c: 100: UADt.RData=0;
   360  00DAEA  0100               	movlb	_UADt shr (0+8)
   361  00DAEC  9170               	bcf	_UADt& (0+255),0,b
   362                           ;uart9b.c: 101: UADt.REnd=0;
   363  00DAEE  9370               	bcf	_UADt& (0+255),1,b
   364                           ;uart9b.c: 102: UADt.RErrBUF=1;
   365  00DAF0  8770               	bsf	_UADt& (0+255),3,b
   366                           ;uart9b.c: 104: }
   367  00DAF2  0012               	return	
   368  00DAF4                     __end_of_IntUSARTRC:
   369                           ;uart9b.c: 110: void StartUSARTRC(void)
   370                           ;uart9b.c: 111: {
   371  00DAF4                     _StartUSARTRC:
   372  000000                     
   373                           ;uart9b.c: 112: UADt.REnd=0;
   374  00DAF4  0100               	movlb	_UADt shr (0+8)
   375  00DAF6  9370               	bcf	_UADt& (0+255),1,b
   376                           ;uart9b.c: 113: ADDEN=1;
   377  00DAF8  86AB               	bsf	4011,3,c
   378                           ;uart9b.c: 114: CREN=1;
   379  00DAFA  88AB               	bsf	4011,4,c
   380                           ;uart9b.c: 115: }
   381  00DAFC  0012               	return	
   382  00DAFE                     __end_of_StartUSARTRC:
   383                           ;uart9b.c: 127: void IntUSARTTR(void)
   384                           ;uart9b.c: 128: {
   385  00DAFE                     _IntUSARTTR:
   386  000000                     
   387                           ;uart9b.c: 129: if(!UADt.indeks) TX9D=1;
   388  00DAFE  EE00  F071         	lfsr	0,_UADt+1
   389  00DB02  50EF               	movf	indf0,w,c
   390  00DB04  E102               	bnz	l14
   391  00DB06  80AC               	bsf	4012,0,c	;volatile
   392  00DB08  D001               	goto	l15
   393  00DB0A                     l14:
   394                           ;uart9b.c: 130: else TX9D=0;
   395  00DB0A  90AC               	bcf	4012,0,c	;volatile
   396  00DB0C                     l15:
   397                           ;uart9b.c: 131: if(UADt.TNData>35) UADt.TNData=3
      +                          5;
   398  00DB0C  0E23               	movlw	35
   399  00DB0E  0100               	movlb	(_UADt+3) shr (0+8)
   400  00DB10  6573               	cpfsgt	(_UADt+3)& (0+255),b
   401  00DB12  D002               	goto	l16
   402  00DB14  CFE8 F073          	movff	wreg,_UADt+3
   403  00DB18                     l16:
   404                           ;uart9b.c: 132: if(UADt.indeks>35-1) UADt.indeks
      +                          =35-1;
   405  00DB18  0E22               	movlw	34
   406  00DB1A  0100               	movlb	(_UADt+1) shr (0+8)
   407  00DB1C  6571               	cpfsgt	(_UADt+1)& (0+255),b
   408  00DB1E  D002               	goto	l17
   409  00DB20  CFE8 F071          	movff	wreg,_UADt+1
   410  00DB24                     l17:
   411                           ;uart9b.c: 133: TXREG=bufTUART[UADt.indeks++];
   412  00DB24  EE00  F071         	lfsr	0,_UADt+1
   413  00DB28  50EF               	movf	indf0,w,c
   414  00DB2A  2AEF               	incf	indf0,f,c
   415  00DB2C  EE0F  F013         	lfsr	0,_bufTUART
   416  00DB30  26E9               	addwf	fsr0l,f,c
   417  00DB32  0E00               	movlw	0
   418  00DB34  22EA               	addwfc	fsr0h,f,c
   419  00DB36  50EF               	movf	indf0,w,c
   420  00DB38  6EAD               	movwf	4013,c	;volatile
   421                           ;uart9b.c: 134: if(UADt.indeks<UADt.TNData) UADt
      +                          .TData=1;
   422  00DB3A  C073  FFE8         	movff	_UADt+3,wreg
   423  00DB3E  0100               	movlb	(_UADt+1) shr (0+8)
   424  00DB40  6171               	cpfslt	(_UADt+1)& (0+255),b
   425  00DB42  D002               	goto	l18
   426  00DB44  8970               	bsf	_UADt& (0+255),4,b
   427  00DB46  0012               	return	
   428  00DB48                     l18:
   429                           ;uart9b.c: 135: else
   430  00DB48  0100               	movlb	_UADt shr (0+8)
   431  00DB4A  9970               	bcf	_UADt& (0+255),4,b
   432                           ;uart9b.c: 138: UADt.TEnd=1;
   433  00DB4C  8B70               	bsf	_UADt& (0+255),5,b
   434                           ;uart9b.c: 139: TXIE=0;
   435  00DB4E  989D               	bcf	3997,4,c
   436                           ;uart9b.c: 140: }
   437  00DB50  0012               	return	
   438  00DB52                     __end_of_IntUSARTTR:
   439                           ;uart9b.c: 145: void StartUSARTTR(void)
   440                           ;uart9b.c: 146: {
   441  00DB52                     _StartUSARTTR:
   442  000000                     
   443                           ;uart9b.c: 147: if(TXIE) return;
   444  00DB52  B89D               	btfsc	3997,4,c
   445  00DB54  0012               	return	
   446                           ;uart9b.c: 148: UADt.TNData=(bufTUART[1]&0b00011
      +                          111);
   447  00DB56  CF14  FFE8         	movff	_bufTUART+1,wreg
   448  00DB5A  0B1F               	andlw	31
   449  00DB5C  CFE8 F073          	movff	wreg,_UADt+3
   450                           ;uart9b.c: 149: if(UADt.TNData>35) UADt.TNData=3
      +                          5;
   451  00DB60  0E23               	movlw	35
   452  00DB62  0100               	movlb	(_UADt+3) shr (0+8)
   453  00DB64  6573               	cpfsgt	(_UADt+3)& (0+255),b
   454  00DB66  D002               	goto	l22
   455  00DB68  CFE8 F073          	movff	wreg,_UADt+3
   456  00DB6C                     l22:
   457                           ;uart9b.c: 150: UADt.indeks=0;
   458  00DB6C  0100               	movlb	(_UADt+1) shr (0+8)
   459  00DB6E  6B71               	clrf	(_UADt+1)& (0+255),b
   460                           ;uart9b.c: 151: UADt.TEnd=0;
   461  00DB70  9B70               	bcf	_UADt& (0+255),5,b
   462                           ;uart9b.c: 152: TXIE=1;
   463  00DB72  889D               	bsf	3997,4,c
   464                           ;uart9b.c: 153: }
   465  00DB74  0012               	return	
   466  00DB76                     __end_of_StartUSARTTR:
   467                           ;uart9b.c: 155: void StopUSARTTR(void)
   468                           ;uart9b.c: 156: {
   469  00DB76                     _StopUSARTTR:
   470  000000                     
   471                           ;uart9b.c: 157: TXIE=0;
   472  00DB76  989D               	bcf	3997,4,c
   473                           ;uart9b.c: 158: UADt.TData=0;
   474  00DB78  0100               	movlb	_UADt shr (0+8)
   475  00DB7A  9970               	bcf	_UADt& (0+255),4,b
   476                           ;uart9b.c: 159: UADt.TEnd=0;
   477  00DB7C  9B70               	bcf	_UADt& (0+255),5,b
   478                           ;uart9b.c: 161: }
   479  00DB7E  0012               	return	
   480  00DB80                     __end_of_StopUSARTTR:
   481                           ;uart9b.c: 165: void ClrRSRBuf(void)
   482                           ;uart9b.c: 166: {
   483  00DB80                     _ClrRSRBuf:
   484  000000                     
   485                           ;uart9b.c: 167: unsigned char i;
   486  00DB80  6AD9               	clrf	fsr2l,c
   487  00DB82                     l25:
   488  00DB82  50D9               	movf	fsr2l,w,c
   489  00DB84  EE0E  F0F0         	lfsr	0,_bufRUART
   490  00DB88  26E9               	addwf	fsr0l,f,c
   491  00DB8A  0E00               	movlw	0
   492  00DB8C  22EA               	addwfc	fsr0h,f,c
   493  00DB8E  6AEF               	clrf	indf0,c
   494  00DB90  2AD9               	incf	fsr2l,f,c
   495  00DB92  0E22               	movlw	34
   496  00DB94  64D9               	cpfsgt	fsr2l,c
   497  00DB96  D7F5               	goto	l25
   498  00DB98  0C22               	retlw	34
   499                           ;uart9b.c: 169: }
   500  00DB9A                     __end_of_ClrRSRBuf:
   501                           ;uart9b.c: 172: void ClrRSTBuf(void)
   502                           ;uart9b.c: 173: {
   503  00DB9A                     _ClrRSTBuf:
   504  000000                     
   505                           ;uart9b.c: 174: unsigned char i;
   506  00DB9A  6AD9               	clrf	fsr2l,c
   507  00DB9C                     l29:
   508  00DB9C  50D9               	movf	fsr2l,w,c
   509  00DB9E  EE0F  F013         	lfsr	0,_bufTUART
   510  00DBA2  26E9               	addwf	fsr0l,f,c
   511  00DBA4  0E00               	movlw	0
   512  00DBA6  22EA               	addwfc	fsr0h,f,c
   513  00DBA8  6AEF               	clrf	indf0,c
   514  00DBAA  2AD9               	incf	fsr2l,f,c
   515  00DBAC  0E22               	movlw	34
   516  00DBAE  64D9               	cpfsgt	fsr2l,c
   517  00DBB0  D7F5               	goto	l29
   518  00DBB2  0C22               	retlw	34
   519                           ;uart9b.c: 176: }
   520  00DBB4                     __end_of_ClrRSTBuf:
   521                           ;uart9b.c: 179: void SetRSTBuf(const unsigned ch
      +                          ar indeks,const unsigned char data)
   522                           ;uart9b.c: 180: {
   523  00DBB4  00D7               	dw	?_SetRSTBuf
   524  00DBB6                     _SetRSTBuf:
   525  000000                     
   526                           ; _indeks loaded to fsr2l
   527  00DBB6  6ED9               	movwf	fsr2l,c
   528                           ;uart9b.c: 181: if(indeks<35) bufTUART[indeks]=d
      +                          ata;
   529  00DBB8  0E23               	movlw	35
   530  00DBBA  60D9               	cpfslt	fsr2l,c
   531  00DBBC  D009               	goto	l33
   532  00DBBE  50D9               	movf	fsr2l,w,c
   533  00DBC0  EE0F  F013         	lfsr	0,_bufTUART
   534  00DBC4  26E9               	addwf	fsr0l,f,c
   535  00DBC6  0E00               	movlw	0
   536  00DBC8  22EA               	addwfc	fsr0h,f,c
   537  00DBCA  C0D7  FFEF         	movff	?_SetRSTBuf,indf0
   538  00DBCE  0C00               	retlw	0
   539  00DBD0                     l33:
   540                           ;uart9b.c: 182: else bufTUART[35-1]=data;
   541  00DBD0  C0D7  FF35         	movff	?_SetRSTBuf,_bufTUART+34
   542                           ;uart9b.c: 184: }
   543  00DBD4  0012               	return	
   544  00DBD6                     __end_of_SetRSTBuf:
   545                           ;uart9b.c: 187: unsigned char GetRSRBuf(const un
      +                          signed char indeks)
   546                           ;uart9b.c: 188: {
   547  00DBD6                     _GetRSRBuf:
   548  000000                     
   549                           ; _indeks loaded to fsr2l
   550  00DBD6  6ED9               	movwf	fsr2l,c
   551                           ;uart9b.c: 189: if(indeks<35) return bufRUART[in
      +                          deks];
   552  00DBD8  0E23               	movlw	35
   553  00DBDA  60D9               	cpfslt	fsr2l,c
   554  00DBDC  D008               	goto	l36
   555  00DBDE  50D9               	movf	fsr2l,w,c
   556  00DBE0  EE0E  F0F0         	lfsr	0,_bufRUART
   557  00DBE4  26E9               	addwf	fsr0l,f,c
   558  00DBE6  0E00               	movlw	0
   559  00DBE8  22EA               	addwfc	fsr0h,f,c
   560  00DBEA  50EF               	movf	indf0,w,c
   561  00DBEC  0012               	return	
   562  00DBEE                     l36:
   563                           ;uart9b.c: 190: else return bufRUART[35-1];
   564  00DBEE  CF12  FFE8         	movff	_bufRUART+34,wreg
   565  00DBF2  0012               	return	
   566                           ;uart9b.c: 191: }
   567  00DBF4                     __end_of_GetRSRBuf:
   568                           ;uart9b.c: 195: unsigned char LiczRSCHK(const un
      +                          signed char *bf,const unsigned char nData)
   569                           ;uart9b.c: 196: {
   570  00DBF4  00D7               	dw	?_LiczRSCHK
   571  00DBF6                     _LiczRSCHK:
   572  000000                     
   573                           ;uart9b.c: 197: unsigned char i,chk;
   574  00DBF6  6AE1               	clrf	fsr1l,c
   575                           ;uart9b.c: 199: for(i=0;i<nData;i++) chk+=(*(bf+
      +                          i)+i)^0xAA;
   576  00DBF8  6AD9               	clrf	fsr2l,c
   577  00DBFA                     l42:
   578  00DBFA  0100               	movlb	__Lparam shr (0+8)
   579  00DBFC  51D9               	movf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),w
   580  00DBFE  5CD9               	subwf	fsr2l,w,c
   581  00DC00  E21C               	bc	u200
   582  00DC02  50D9               	movf	fsr2l,w,c
   583  00DC04  25D7               	addwf	?_LiczRSCHK^(__Lparam& (0+65280)),w
   584  00DC06  6E00               	movwf	btemp,c
   585  00DC08  0E00               	movlw	0
   586  00DC0A  21D8               	addwfc	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),w
   587  00DC0C  6E01               	movwf	btemp+1,c
   588  00DC0E  C000  FFF6         	movff	btemp,tblptrl
   589  00DC12  C001  FFF7         	movff	btemp+1,tblptrh
   590  00DC16  0E0F               	movlw	(high __ramtop+-1)
   591  00DC18  64F7               	cpfsgt	tblptrh,c
   592  00DC1A  D003               	bra	u197
   593  00DC1C  0008               	tblrd		*
   594  00DC1E  50F5               	movf	tablat,w,c
   595  00DC20  D005               	bra	u190
   596  00DC22                     u197:
   597  00DC22  CFF6 FFE9          	movff	tblptrl,fsr0l
   598  00DC26  CFF7 FFEA          	movff	tblptrh,fsr0h
   599  00DC2A  50EF               	movf	indf0,w,c
   600  00DC2C                     u190:
   601  00DC2C  6E00               	movwf	btemp,c
   602  00DC2E  50D9               	movf	fsr2l,w,c
   603  00DC30  2400               	addwf	btemp,w,c
   604  00DC32  0AAA               	xorlw	-86
   605  00DC34  26E1               	addwf	fsr1l,f,c
   606  00DC36  2AD9               	incf	fsr2l,f,c
   607  00DC38  D7E0               	goto	l42
   608  00DC3A                     u200:
   609                           ;uart9b.c: 200: return chk;
   610  00DC3A  50E1               	movf	fsr1l,w,c
   611  00DC3C  0012               	return	
   612                           ;uart9b.c: 201: }
   613  00DC3E                     __end_of_LiczRSCHK:
   614                           ;uart9b.c: 205: void SetRSCHK(unsigned char nDat
      +                          a)
   615                           ;uart9b.c: 206: {
   616  00DC3E                     _SetRSCHK:
   617  000000                     
   618                           ; _nData loaded to prodl
   619  00DC3E  6EF3               	movwf	prodl,c
   620                           ;uart9b.c: 207: if(nData>35) nData=35;
   621  00DC40  0E23               	movlw	35
   622  00DC42  64F3               	cpfsgt	prodl,c
   623  00DC44  D001               	goto	l44
   624  00DC46  6EF3               	movwf	prodl,c
   625  00DC48                     l44:
   626                           ;uart9b.c: 208: if(!nData) nData=35;
   627  00DC48  50F3               	movf	prodl,w,c
   628  00DC4A  E102               	bnz	l45
   629  00DC4C  0E23               	movlw	35
   630  00DC4E  6EF3               	movwf	prodl,c
   631  00DC50                     l45:
   632                           ;uart9b.c: 209: UADt.CHK=LiczRSCHK(bufTUART,nDat
      +                          a-1);
   633  00DC50  0100               	movlb	__Lparam shr (0+8)
   634  00DC52  0E13               	movlw	low _bufTUART
   635  00DC54  6FD7               	movwf	?_LiczRSCHK^(__Lparam& (0+65280)),b
   636  00DC56  0E0F               	movlw	high _bufTUART
   637  00DC58  6FD8               	movwf	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),b
   638  00DC5A  04F3               	decf	prodl,w,c
   639  00DC5C  6FD9               	movwf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),b
   640  00DC5E  DFCB               	call	_LiczRSCHK	;wreg free
   641  00DC60  CFE8 F074          	movff	wreg,_UADt+4
   642                           ;uart9b.c: 210: bufTUART[nData-1]=UADt.CHK;
   643  00DC64  50F3               	movf	prodl,w,c
   644  00DC66  EE0F  F012         	lfsr	0,_bufTUART+-1
   645  00DC6A  26E9               	addwf	fsr0l,f,c
   646  00DC6C  0E00               	movlw	0
   647  00DC6E  22EA               	addwfc	fsr0h,f,c
   648  00DC70  C074  FFEF         	movff	_UADt+4,indf0
   649                           ;uart9b.c: 211: }
   650  00DC74  0C00               	retlw	0
   651  00DC76                     __end_of_SetRSCHK:
   652                           ;uart9b.c: 216: unsigned char VerifyRSACK(void)
   653                           ;uart9b.c: 217: {
   654  00DC76                     _VerifyRSACK:
   655  000000                     
   656                           ;uart9b.c: 218: if(bufRUART[2]==0xff) return 1;
   657  00DC76  CEF2  F000         	movff	_bufRUART+2,btemp
   658  00DC7A  2800               	incf	btemp,w,c
   659  00DC7C  E101               	bnz	l47
   660  00DC7E  0C01               	retlw	1
   661  00DC80                     l47:
   662                           ;uart9b.c: 219: return 0;
   663  00DC80  0C00               	retlw	0
   664                           ;uart9b.c: 220: }
   665  00DC82                     __end_of_VerifyRSACK:
   666                           ;uart9b.c: 225: unsigned char VerifyRSCHK(unsign
      +                          ed char nData)
   667                           ;uart9b.c: 226: {
   668  00DC82                     _VerifyRSCHK:
   669  000000                     
   670                           ; _nData loaded to prodl
   671  00DC82  6EF3               	movwf	prodl,c
   672                           ;uart9b.c: 227: if(nData>35) nData=35;
   673  00DC84  0E23               	movlw	35
   674  00DC86  64F3               	cpfsgt	prodl,c
   675  00DC88  D001               	goto	l49
   676  00DC8A  6EF3               	movwf	prodl,c
   677  00DC8C                     l49:
   678                           ;uart9b.c: 228: if(!nData) nData=35;
   679  00DC8C  50F3               	movf	prodl,w,c
   680  00DC8E  E102               	bnz	l50
   681  00DC90  0E23               	movlw	35
   682  00DC92  6EF3               	movwf	prodl,c
   683  00DC94                     l50:
   684                           ;uart9b.c: 229: if(bufRUART[nData-1]==LiczRSCHK(
      +                          bufRUART,nData-1)) return 1;
   685  00DC94  0100               	movlb	__Lparam shr (0+8)
   686  00DC96  0EF0               	movlw	low _bufRUART
   687  00DC98  6FD7               	movwf	?_LiczRSCHK^(__Lparam& (0+65280)),b
   688  00DC9A  0E0E               	movlw	high _bufRUART
   689  00DC9C  6FD8               	movwf	(?_LiczRSCHK+1)^(__Lparam& (0+65280)),b
   690  00DC9E  04F3               	decf	prodl,w,c
   691  00DCA0  6FD9               	movwf	(?_LiczRSCHK+2)^(__Lparam& (0+65280)),b
   692  00DCA2  DFA9               	call	_LiczRSCHK	;wreg free
   693  00DCA4  6E00               	movwf	btemp,c
   694  00DCA6  C000  F002         	movff	btemp,btemp+2
   695  00DCAA  6A03               	clrf	btemp+3,c
   696  00DCAC  50F3               	movf	prodl,w,c
   697  00DCAE  EE0E  F0EF         	lfsr	0,_bufRUART+-1
   698  00DCB2  26E9               	addwf	fsr0l,f,c
   699  00DCB4  0E00               	movlw	0
   700  00DCB6  22EA               	addwfc	fsr0h,f,c
   701  00DCB8  50EF               	movf	indf0,w,c
   702  00DCBA  6E00               	movwf	btemp,c
   703  00DCBC  1802               	xorwf	btemp+2,w,c
   704  00DCBE  E101               	bnz	u265
   705  00DCC0  5203               	movf	btemp+3,f,c
   706  00DCC2                     u265:
   707  00DCC2  E101               	bnz	l51
   708  00DCC4  0C01               	retlw	1
   709  00DCC6                     l51:
   710                           ;uart9b.c: 230: return 0;
   711  00DCC6  0C00               	retlw	0
   712                           ;uart9b.c: 231: }
   713  00DCC8                     __end_of_VerifyRSCHK:
   714                           ;uart9b.c: 234: unsigned char GetRSCHK(void)
   715                           ;uart9b.c: 235: {
   716  00DCC8                     _GetRSCHK:
   717  000000                     
   718                           ;uart9b.c: 236: return UADt.CHK;
   719  00DCC8  C074  FFE8         	movff	_UADt+4,wreg
   720  00DCCC  0012               	return	
   721                           ;uart9b.c: 237: }
   722  00DCCE                     __end_of_GetRSCHK:
   723                           ;uart9b.c: 240: unsigned char SetNDatCHK(const u
      +                          nsigned char Data)
   724                           ;uart9b.c: 241: {
   725  00DCCE                     _SetNDatCHK:
   726  000000                     
   727                           ; _Data loaded to prodl
   728  00DCCE  6EF3               	movwf	prodl,c
   729                           ;uart9b.c: 242: unsigned char a,b,d;
   730  00DCD0  50F3               	movf	prodl,w,c
   731  00DCD2  0B1F               	andlw	31
   732  00DCD4  6ED9               	movwf	fsr2l,c
   733                           ;uart9b.c: 244: a=d&0b00000111;
   734  00DCD6  50D9               	movf	fsr2l,w,c
   735  00DCD8  0B07               	andlw	7
   736  00DCDA  6EE1               	movwf	fsr1l,c
   737                           ;uart9b.c: 245: b=0b00000100|(d>>3);
   738  00DCDC  38D9               	swapf	fsr2l,w,c
   739  00DCDE  46E8               	rlncf	wreg,f,c
   740  00DCE0  0B1F               	andlw	31
   741  00DCE2  0904               	iorlw	4
   742  00DCE4  6EE9               	movwf	fsr0l,c
   743                           ;uart9b.c: 246: return d|((a^b)<<5);
   744  00DCE6  50E9               	movf	fsr0l,w,c
   745  00DCE8  18E1               	xorwf	fsr1l,w,c
   746  00DCEA  6E00               	movwf	btemp,c
   747  00DCEC  0E05               	movlw	5
   748  00DCEE  6E01               	movwf	btemp+1,c
   749  00DCF0                     u275:
   750  00DCF0  90D8               	bcf	status,0,c
   751  00DCF2  3600               	rlcf	btemp,f,c
   752  00DCF4  2E01               	decfsz	btemp+1,f,c
   753  00DCF6  D7FC               	goto	u275
   754  00DCF8  50D9               	movf	fsr2l,w,c
   755  00DCFA  1000               	iorwf	btemp,w,c
   756  00DCFC  0012               	return	
   757                           ;uart9b.c: 247: }
   758  00DCFE                     __end_of_SetNDatCHK:
   759                           ;uart9b.c: 249: unsigned char VerifyNDatCHK(cons
      +                          t unsigned char Data)
   760                           ;uart9b.c: 250: {
   761  00DCFE                     _VerifyNDatCHK:
   762  000000                     
   763                           ; _Data loaded to prodh
   764  00DCFE  6EF4               	movwf	prodh,c
   765                           ;uart9b.c: 251: if(SetNDatCHK(Data)==Data) retur
      +                          n 1;
   766  00DD00  50F4               	movf	prodh,w,c
   767  00DD02  DFE5               	call	_SetNDatCHK
   768  00DD04  18F4               	xorwf	prodh,w,c
   769  00DD06  E101               	bnz	l55
   770  00DD08  0C01               	retlw	1
   771  00DD0A                     l55:
   772                           ;uart9b.c: 252: return 0;
   773  00DD0A  0C00               	retlw	0
   774                           ;uart9b.c: 253: }
   775  00DD0C                     __end_of_VerifyNDatCHK:
   776  000000                     
   777  000000                     
   778  000000                     
   779  000000                     
   780  000000                     
   781  000000                     
   782  000000                     
   783  000000                     
   784  000000                     
   785  000000                     
   786  000000                     
   787  000000                     
   788  000000                     
   789  000000                     
   790  000000                     
   791  000000                     
   792  000000                     
   793  000000                     
   794  000000                     
   795  000000                     
   796  000000                     
   797  000000                     
   798  000000                     
   799  000000                     
   800  000000                     
   801  000000                     
   802  000000                     
   803  000000                     
   804  000000                     
   805  000000                     
   806  000000                     
   807  000000                     
   808  000000                     
   809  000000                     
   810  000000                     
   811  000000                     
   812  000000                     
   813  000000                     
   814  000000                     
   815  000000                     
   816  000000                     
   817  000000                     
   818  000000                     
   819  000000                     
   820  000000                     
   821  000000                     
   822  000000                     
   823  000000                     
   824  000000                     
   825  000000                     
   826  000000                     
   827  000000                     
   828  000000                     
   829  000000                     
   830  000000                     
   831  000000                     
   832  000000                     
   833  000000                     
   834  000000                     
   835  000000                     
   836  000000                     
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295                           
  1296                           	psect	rbss
  1297  00005C                     _RSerial:
  1298  00005C                     	ds	1
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348                           
  1349                           	psect	bss
  1350  000070                     _UADt:
  1351  000070                     	ds	5
  1352                           
  1353                           	psect	bigbss
  1354  000EF0                     _bufRUART:
  1355  000EF0                     	ds	35
  1356  000EF0                     _bufTUART:
  1357  000EF0                     	ds	35
  1358                           
  1359                           	psect	temp
  1360  000000                     btemp:
  1361  000000                     	ds	4
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           prodh	equ	0xFF4
  1366                           prodl	equ	0xFF3
  1367                           indf0	equ	0xFEF
  1368                           fsr0h	equ	0xFEA
  1369                           fsr0l	equ	0xFE9
  1370                           wreg	equ	0xFE8
  1371                           fsr1l	equ	0xFE1
  1372                           fsr2l	equ	0xFD9
  1373                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Wed Mar 20 08:54:40 2013

                    l4 DA82                      l6 DAE8  
                    l7 DADC                      l8 DAC8  
                   l22 DB6C                     l14 DB0A  
                   l15 DB0C                     l16 DB18  
                   l33 DBD0                     l25 DB82  
                   l17 DB24                     l50 DC94  
                   l42 DBFA                     l18 DB48  
                   l51 DCC6                     l44 DC48  
                   l36 DBEE                     l45 DC50  
                   l29 DB9C                     l55 DD0A  
                   l47 DC80                     l49 DC8C  
                  u200 DC3A                    u190 DC2C  
                  u265 DCC2                    u275 DCF0  
                  u197 DC22                    wreg 000FE8  
             _bufRUART 0EF0               _bufTUART 0F13  
                 _UADt 0070                   fsr0h 000FEA  
                 indf0 000FEF                   fsr0l 000FE9  
                 fsr1l 000FE1                   fsr2l 000FD9  
                 btemp 0000                   prodh 000FF4  
                 prodl 000FF3            _VerifyRSACK DC76  
          _VerifyRSCHK DC82             used_btemp0 0001  
           used_btemp1 0001             used_btemp2 0001  
           used_btemp3 0001       __end_of_GetRSCHK DCCE  
  __end_of_VerifyRSACK DC82    __end_of_VerifyRSCHK DCC8  
                tablat 000FF5                  status 000FD8  
              _RSerial 005C       __end_of_InitUart DA50  
        _VerifyNDatCHK DCFE       __end_of_SetRSCHK DC76  
              __Lparam 00D7            _StopUSARTTR DB76  
  __end_of_StopUSARTTR DB80  __end_of_VerifyNDatCHK DD0C  
              __ramtop 1000             _IntUSARTRC DA50  
           _IntUSARTTR DAFE              _ClrRSRBuf DB80  
            _ClrRSTBuf DB9A     __end_of_IntUSARTRC DAF4  
   __end_of_IntUSARTTR DB52      __end_of_ClrRSRBuf DB9A  
    __end_of_ClrRSTBuf DBB4              _GetRSRBuf DBD6  
    __end_of_GetRSRBuf DBF4           _StartUSARTRC DAF4  
         _StartUSARTTR DB52                 tblptrh 000FF7  
               tblptrl 000FF6               _GetRSCHK DCC8  
            _LiczRSCHK DBF6      __end_of_LiczRSCHK DC3E  
 __end_of_StartUSARTRC DAFE   __end_of_StartUSARTTR DB76  
           _SetNDatCHK DCCE             ?_LiczRSCHK 00D7  
   __end_of_SetNDatCHK DCFE               _InitUart DA18  
            _SetRSTBuf DBB6      __end_of_SetRSTBuf DBD6  
             _SetRSCHK DC3E             ?_SetRSTBuf 00D7  
