

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Wed Mar 20 08:54:41 2013


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	text
    99                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   146                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   167                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   168                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   169                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   170                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   171                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   172                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   173                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   174                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   175                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   176                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   177                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   178                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   179                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   180                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   181                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   182                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   183                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   184                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   185                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   186                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   187                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   188                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   189                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   190                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   191                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   192                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   193                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   194                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   195                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   196                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   197                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   198                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   199  00A080                     _ProcToPmpPwm:
   200                           ;	_ppwm assigned to ?a_ModPmp2+4
   201  000000                     _ModPmp2$ppwm	set	?a_ModPmp2+4
   202                           ;	_tim assigned to ?a_ModPmp2+3
   203  000000                     _ModPmp2$tim	set	?a_ModPmp2+3
   204                           ;	_pup assigned to ?a_ModPmp2+2
   205  000000                     _ModPmp2$pup	set	?a_ModPmp2+2
   206                           ;	_pdw assigned to ?a_ModPmp2+1
   207  000000                     _ModPmp2$pdw	set	?a_ModPmp2+1
   208                           ;	_p assigned to ?a_ModPmp2+0
   209  000000                     _ModPmp2$p	set	?a_ModPmp2
   210                           ;	_k assigned to ?a_RetDelta+1
   211  000000                     _RetDelta$k	set	?a_RetDelta+1
   212                           ;	_pco assigned to ?a_RetDelta+0
   213  000000                     _RetDelta$pco	set	?a_RetDelta
   214                           ;       param _eco assigned to ?_RetDelta+0
   215  000000                     _RetDelta$eco	set	?_RetDelta
   216                           ;	_i assigned to ?a_RetKrkDelta+4
   217  000000                     _RetKrkDelta$i	set	?a_RetKrkDelta+4
   218                           ;	_pco assigned to ?a_RetKrkDelta+3
   219  000000                     _RetKrkDelta$pco	set	?a_RetKrkDelta+3
   220                           ;	_min assigned to ?a_RetKrkDelta+2
   221  000000                     _RetKrkDelta$min	set	?a_RetKrkDelta+2
   222                           ;	_max assigned to ?a_RetKrkDelta+1
   223  000000                     _RetKrkDelta$max	set	?a_RetKrkDelta+1
   224                           ;	_d assigned to ?a_RetKrkDelta+0
   225  000000                     _RetKrkDelta$d	set	?a_RetKrkDelta
   226                           ;       param _lo assigned to ?_RetDelta4+2
   227  000000                     _RetDelta4$lo	set	?_RetDelta4+2
   228                           ;       param _hi assigned to ?_RetDelta4+1
   229  000000                     _RetDelta4$hi	set	?_RetDelta4+1
   230                           ;       param _eco assigned to ?_RetDelta4+0
   231  000000                     _RetDelta4$eco	set	?_RetDelta4
   232                           ;       param _lo assigned to ?_RetDelta3+0
   233  000000                     _RetDelta3$lo	set	?_RetDelta3
   234                           ;       param _ddlt assigned to ?_RetDelta2+0
   235  000000                     _RetDelta2$ddlt	set	?_RetDelta2
   236                           ;       param _hi assigned to ?_RetDelta1+0
   237  000000                     _RetDelta1$hi	set	?_RetDelta1
   238                           ;       param _min assigned to ?_RetLO+1
   239  000000                     _RetLO$min	set	?_RetLO+1
   240                           ;       param _eco assigned to ?_RetLO+0
   241  000000                     _RetLO$eco	set	?_RetLO
   242                           ;       param _max assigned to ?_RetHI+1
   243  000000                     _RetHI$max	set	?_RetHI+1
   244                           ;       param _eco assigned to ?_RetHI+0
   245  000000                     _RetHI$eco	set	?_RetHI
   246                           ;       param _b assigned to ?_RetMax+0
   247  000000                     _RetMax$b	set	?_RetMax
   248                           ;       param _b assigned to ?_RetMin+0
   249  000000                     _RetMin$b	set	?_RetMin
   250                           ;	_ppwm assigned to ?a_ModPmp1+3
   251  000000                     _ModPmp1$ppwm	set	?a_ModPmp1+3
   252                           ;	_tim assigned to ?a_ModPmp1+2
   253  000000                     _ModPmp1$tim	set	?a_ModPmp1+2
   254                           ;	_pup assigned to ?a_ModPmp1+1
   255  000000                     _ModPmp1$pup	set	?a_ModPmp1+1
   256  000000                     
   257                           ; _prc loaded to fsr2l
   258  00A080  6ED9               	movwf	fsr2l,c
   259                           ;pompa.c: 27: unsigned int p;
   260  00A082  0E64               	movlw	100
   261  00A084  64D9               	cpfsgt	fsr2l,c
   262  00A086  D001               	goto	l14
   263  00A088  6ED9               	movwf	fsr2l,c
   264  00A08A                     l14:
   265                           ;pompa.c: 30: p=PWM.HIPWM;
   266  00A08A  C276  FFE8         	movff	_PWM+8,wreg
   267  00A08E  6EF6               	movwf	tblptrl,c
   268  00A090  6AF7               	clrf	tblptrh,c
   269                           ;pompa.c: 31: p=(prc*p)/100;
   270  00A092  CFF6 F002          	movff	tblptrl,btemp+2
   271  00A096  CFF7 F003          	movff	tblptrh,btemp+3
   272  00A09A  CFD9 F000          	movff	fsr2l,btemp
   273  00A09E  6A01               	clrf	btemp+1,c
   274  00A0A0  EC03  F073         	call	lwmul
   275  00A0A4  C004  F000         	movff	btemp+4,btemp
   276  00A0A8  C005  F001         	movff	btemp+5,btemp+1
   277  00A0AC  0E64               	movlw	100
   278  00A0AE  6E02               	movwf	btemp+2,c
   279  00A0B0  6A03               	clrf	btemp+3,c
   280  00A0B2  EC32  F072         	call	lwdiv
   281  00A0B6  C004  FFF6         	movff	btemp+4,tblptrl
   282  00A0BA  C005  FFF7         	movff	btemp+5,tblptrh
   283                           ;pompa.c: 32: return (unsigned char)p;
   284  00A0BE  50F6               	movf	tblptrl,w,c
   285  00A0C0  0012               	return	
   286                           ;pompa.c: 33: }
   287  00A0C2                     __end_of_ProcToPmpPwm:
   288                           ;pompa.c: 38: unsigned char ModPmp1(unsigned cha
      +                          r p)
   289                           ;pompa.c: 39: {
   290  00A0C2                     _ModPmp1:
   291  000000                     
   292                           ;	_pdw assigned to ?a_ModPmp1+0
   293  000000                     _ModPmp1$pdw	set	?a_ModPmp1
   294                           ;pompa.c: 40: unsigned char ppwm, tim, pup, pdw;
   295  00A0C2  0100               	movlb	__Lparam shr (0+8)
   296  00A0C4  6FDA               	movwf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),b
   297                           ;pompa.c: 44: if(rgl.fz||ppwm!=PMP.MGPROC)
   298  00A0C6  0100               	movlb	_rgl shr (0+8)
   299  00A0C8  B575               	btfsc	_rgl& (0+255),2,b
   300  00A0CA  D006               	goto	u40
   301  00A0CC  0100               	movlb	__Lparam shr (0+8)
   302  00A0CE  51DA               	movf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),w
   303  00A0D0  0100               	movlb	_PMP shr (0+8)
   304  00A0D2  196D               	xorwf	_PMP& (0+255),w,b
   305  00A0D4  E101 D139          	bz	l16
   306  00A0D8                     u40:
   307                           ;pompa.c: 45: {
   308  00A0D8  C22E  FFE8         	movff	_DtIN+4,wreg
   309  00A0DC  0102               	movlb	(_DtIN+5) shr (0+8)
   310  00A0DE  612F               	cpfslt	(_DtIN+5)& (0+255),b
   311  00A0E0  D01E               	goto	l17
   312                           ;pompa.c: 48: {
   313  00A0E2  0E64               	movlw	100
   314  00A0E4  0100               	movlb	__Lparam shr (0+8)
   315  00A0E6  6FD9               	movwf	(?a_ModPmp1+2)^(__Lparam& (0+65280)),b
   316                           ;pompa.c: 51: if(DtIN.DIN2-DtIN.DDLT==2) tim=120
      +                          ;
   317  00A0E8  C22F  FFE8         	movff	_DtIN+5,wreg
   318  00A0EC  C22E  F000         	movff	_DtIN+4,btemp
   319  00A0F0  6A01               	clrf	btemp+1,c
   320  00A0F2  5E00               	subwf	btemp,f,c
   321  00A0F4  0E00               	movlw	0
   322  00A0F6  5A01               	subwfb	btemp+1,f,c
   323  00A0F8  5000               	movf	btemp,w,c
   324  00A0FA  0A02               	xorlw	2
   325  00A0FC  1001               	iorwf	btemp+1,w,c
   326  00A0FE  E102               	bnz	l18
   327  00A100  0E78               	movlw	120
   328  00A102  D02B               	goto	L4
   329  00A104                     l18:
   330                           ;pompa.c: 52: else
   331  00A104  C22F  FFE8         	movff	_DtIN+5,wreg
   332  00A108  C22E  F000         	movff	_DtIN+4,btemp
   333  00A10C  6A01               	clrf	btemp+1,c
   334  00A10E  5E00               	subwf	btemp,f,c
   335  00A110  0E00               	movlw	0
   336  00A112  5A01               	subwfb	btemp+1,f,c
   337  00A114  0400               	decf	btemp,w,c
   338  00A116  1001               	iorwf	btemp+1,w,c
   339  00A118  E121               	bnz	l21
   340  00A11A  0E96               	movlw	150
   341  00A11C  D01D               	goto	L6
   342                           ;pompa.c: 54: }
   343  00A11E                     l17:
   344                           ;pompa.c: 55: else
   345  00A11E  0E78               	movlw	120
   346  00A120  0100               	movlb	__Lparam shr (0+8)
   347  00A122  6FD9               	movwf	(?a_ModPmp1+2)^(__Lparam& (0+65280)),b
   348                           ;pompa.c: 59: if(DtIN.DDLT-DtIN.DIN2==2) tim=150
      +                          ;
   349  00A124  C22E  FFE8         	movff	_DtIN+4,wreg
   350  00A128  C22F  F000         	movff	_DtIN+5,btemp
   351  00A12C  6A01               	clrf	btemp+1,c
   352  00A12E  5E00               	subwf	btemp,f,c
   353  00A130  0E00               	movlw	0
   354  00A132  5A01               	subwfb	btemp+1,f,c
   355  00A134  5000               	movf	btemp,w,c
   356  00A136  0A02               	xorlw	2
   357  00A138  1001               	iorwf	btemp+1,w,c
   358  00A13A  E102               	bnz	l22
   359  00A13C  0E96               	movlw	150
   360  00A13E  D00D               	goto	L4
   361  00A140                     l22:
   362                           ;pompa.c: 60: else
   363  00A140  C22E  FFE8         	movff	_DtIN+4,wreg
   364  00A144  C22F  F000         	movff	_DtIN+5,btemp
   365  00A148  6A01               	clrf	btemp+1,c
   366  00A14A  5E00               	subwf	btemp,f,c
   367  00A14C  0E00               	movlw	0
   368  00A14E  5A01               	subwfb	btemp+1,f,c
   369  00A150  0400               	decf	btemp,w,c
   370  00A152  1001               	iorwf	btemp+1,w,c
   371  00A154  E103               	bnz	l21
   372  00A156  0EB4               	movlw	180
   373  00A158                     L6:
   374  00A158  0100               	movlb	__Lparam shr (0+8)
   375  00A15A                     L4:
   376  00A15A  6FD9               	movwf	(?a_ModPmp1+2)^(__Lparam& (0+65280)),b
   377  00A15C                     l21:
   378                           ;pompa.c: 62: }
   379  00A15C  0100               	movlb	__Lparam shr (0+8)
   380  00A15E  6BD8               	clrf	(?a_ModPmp1+1)^(__Lparam& (0+65280)),b
   381                           ;pompa.c: 64: pdw=0;
   382  00A160  6BD7               	clrf	?a_ModPmp1^(__Lparam& (0+65280)),b
   383                           ;pompa.c: 65: if((RTdS(8)>tim)||(ppwm<=PMP.MDPRO
      +                          C)||(ppwm>=PMP.MGPROC))
   384  00A162  0E08               	movlw	8
   385  00A164  EC98  F06E         	call	_RTdS
   386  00A168  0100               	movlb	__Lparam shr (0+8)
   387  00A16A  61D9               	cpfslt	(?a_ModPmp1+2)^(__Lparam& (0+65280)),b
   388  00A16C  D001               	goto	u101
   389  00A16E  D00A               	goto	u130
   390  00A170                     u101:
   391  00A170  51DA               	movf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),w
   392  00A172  0100               	movlb	(_PMP+1) shr (0+8)
   393  00A174  5D6E               	subwf	(_PMP+1)& (0+255),w,b
   394  00A176  E206               	bc	u130
   395  00A178  0100               	movlb	__Lparam shr (0+8)
   396  00A17A  C06D  FFE8         	movff	_PMP,wreg
   397  00A17E  5DDA               	subwf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),w
   398  00A180  E201 D0E8          	bnc	l54
   399  00A184                     u130:
   400                           ;pompa.c: 66: {
   401  00A184  0E08               	movlw	8
   402  00A186  EC86  F06E         	call	_StartRTdS
   403                           ;pompa.c: 69: if(!pup)
   404                           ;pompa.c: 70: if(rgl.tmp_pwm<=PWM.MINPWM)
   405  00A18A  C07E  FFE8         	movff	_rgl+9,wreg
   406  00A18E  0102               	movlb	(_PWM+32) shr (0+8)
   407  00A190  5D8E               	subwf	(_PWM+32)& (0+255),w,b
   408  00A192  E327               	bnc	l26
   409                           ;pompa.c: 71: {
   410  00A194  0E02               	movlw	2
   411  00A196  EC5B  F036         	call	_Twyzsza
   412  00A19A  E204               	bc	u180
   413  00A19C  0E02               	movlw	2
   414  00A19E  EC4E  F036         	call	_Tnizsza
   415  00A1A2  E31F               	bnc	l26
   416  00A1A4                     u180:
   417                           ;pompa.c: 73: {
   418  00A1A4  C06D  FFE8         	movff	_PMP,wreg
   419  00A1A8  0100               	movlb	__Lparam shr (0+8)
   420  00A1AA  61DA               	cpfslt	(?a_ModPmp1+3)^(__Lparam& (0+65280)),b
   421  00A1AC  D01A               	goto	l26
   422                           ;pompa.c: 75: {
   423  00A1AE  C06D  F000         	movff	_PMP,btemp
   424  00A1B2  6A01               	clrf	btemp+1,c
   425  00A1B4  0E01               	movlw	1
   426  00A1B6  C0DA  F002         	movff	?a_ModPmp1+3,btemp+2
   427  00A1BA  6A03               	clrf	btemp+3,c
   428  00A1BC  2602               	addwf	btemp+2,f,c
   429  00A1BE  0E00               	movlw	0
   430  00A1C0  2203               	addwfc	btemp+3,f,c
   431  00A1C2  5003               	movf	btemp+3,w,c
   432  00A1C4  0A80               	xorlw	128
   433  00A1C6  6E04               	movwf	btemp+4,c
   434  00A1C8  5001               	movf	btemp+1,w,c
   435  00A1CA  0A80               	xorlw	128
   436  00A1CC  5C04               	subwf	btemp+4,w,c
   437  00A1CE  E102               	bnz	u205
   438  00A1D0  5000               	movf	btemp,w,c
   439  00A1D2  5C02               	subwf	btemp+2,w,c
   440  00A1D4                     u205:
   441  00A1D4  E204               	bc	l30
   442                           ;pompa.c: 77: {
   443  00A1D6  2BDA               	incf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),f,b
   444                           ;pompa.c: 79: pup=1;
   445  00A1D8  0E01               	movlw	1
   446  00A1DA  6FD8               	movwf	(?a_ModPmp1+1)^(__Lparam& (0+65280)),b
   447                           ;pompa.c: 80: }
   448  00A1DC  D002               	goto	l26
   449  00A1DE                     l30:
   450                           ;pompa.c: 81: else ppwm=PMP.MGPROC;
   451  00A1DE  C06D  F0DA         	movff	_PMP,?a_ModPmp1+3
   452  00A1E2                     l26:
   453                           ;pompa.c: 82: }
   454  00A1E2  C07E  FFE8         	movff	_rgl+9,wreg
   455  00A1E6  0102               	movlb	(_PWM+32) shr (0+8)
   456  00A1E8  618E               	cpfslt	(_PWM+32)& (0+255),b
   457  00A1EA  D001               	goto	u211
   458  00A1EC  D009               	goto	u250
   459  00A1EE                     u211:
   460  00A1EE  C07E  FFE8         	movff	_rgl+9,wreg
   461  00A1F2  0102               	movlb	(_PWM+32) shr (0+8)
   462  00A1F4  5D8E               	subwf	(_PWM+32)& (0+255),w,b
   463  00A1F6  E34F               	bnc	l32
   464  00A1F8  0E01               	movlw	1
   465  00A1FA  EC5B  F036         	call	_Twyzsza
   466  00A1FE  E24B               	bc	l32
   467  00A200                     u250:
   468                           ;pompa.c: 87: {
   469  00A200  C22F  FFE8         	movff	_DtIN+5,wreg
   470  00A204  0102               	movlb	(_DtIN+3) shr (0+8)
   471  00A206  612D               	cpfslt	(_DtIN+3)& (0+255),b
   472  00A208  D046               	goto	l32
   473                           ;pompa.c: 89: {
   474                           ;pompa.c: 91: if(ppwm>PMP.MDPROC)
   475  00A20A  0100               	movlb	__Lparam shr (0+8)
   476  00A20C  51DA               	movf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),w
   477  00A20E  0100               	movlb	(_PMP+1) shr (0+8)
   478  00A210  616E               	cpfslt	(_PMP+1)& (0+255),b
   479  00A212  D01A               	goto	l34
   480                           ;pompa.c: 92: {
   481  00A214  0100               	movlb	__Lparam shr (0+8)
   482  00A216  0FFE               	addlw	254
   483  00A218  6E00               	movwf	btemp,c
   484  00A21A  6A01               	clrf	btemp+1,c
   485  00A21C  0EFF               	movlw	255
   486  00A21E  2201               	addwfc	btemp+1,f,c
   487  00A220  C06E  F002         	movff	_PMP+1,btemp+2
   488  00A224  6A03               	clrf	btemp+3,c
   489  00A226  5003               	movf	btemp+3,w,c
   490  00A228  0A80               	xorlw	128
   491  00A22A  6E04               	movwf	btemp+4,c
   492  00A22C  5001               	movf	btemp+1,w,c
   493  00A22E  0A80               	xorlw	128
   494  00A230  5C04               	subwf	btemp+4,w,c
   495  00A232  E102               	bnz	u285
   496  00A234  5000               	movf	btemp,w,c
   497  00A236  5C02               	subwf	btemp+2,w,c
   498  00A238                     u285:
   499  00A238  E205               	bc	l36
   500                           ;pompa.c: 94: {
   501  00A23A  0EFE               	movlw	254
   502  00A23C  27DA               	addwf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),f,b
   503                           ;pompa.c: 96: pdw=1;
   504  00A23E  0E01               	movlw	1
   505  00A240  6FD7               	movwf	?a_ModPmp1^(__Lparam& (0+65280)),b
   506                           ;pompa.c: 97: }
   507  00A242  D002               	goto	l34
   508  00A244                     l36:
   509                           ;pompa.c: 98: else ppwm=PMP.MDPROC;
   510  00A244  C06E  F0DA         	movff	_PMP+1,?a_ModPmp1+3
   511  00A248                     l34:
   512                           ;pompa.c: 99: }
   513  00A248  0100               	movlb	__Lparam shr (0+8)
   514  00A24A  51D7               	movf	?a_ModPmp1^(__Lparam& (0+65280)),w
   515  00A24C  E124               	bnz	l32
   516                           ;pompa.c: 101: if(DtIN.DIN<DtIN.DIN2)
   517  00A24E  C22E  FFE8         	movff	_DtIN+4,wreg
   518  00A252  0102               	movlb	(_DtIN+3) shr (0+8)
   519  00A254  612D               	cpfslt	(_DtIN+3)& (0+255),b
   520  00A256  D01F               	goto	l32
   521                           ;pompa.c: 102: {
   522  00A258  0100               	movlb	__Lparam shr (0+8)
   523  00A25A  51DA               	movf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),w
   524  00A25C  0100               	movlb	(_PMP+1) shr (0+8)
   525  00A25E  616E               	cpfslt	(_PMP+1)& (0+255),b
   526  00A260  D01A               	goto	l32
   527                           ;pompa.c: 104: {
   528  00A262  0100               	movlb	__Lparam shr (0+8)
   529  00A264  0FFE               	addlw	254
   530  00A266  6E00               	movwf	btemp,c
   531  00A268  6A01               	clrf	btemp+1,c
   532  00A26A  0EFF               	movlw	255
   533  00A26C  2201               	addwfc	btemp+1,f,c
   534  00A26E  C06E  F002         	movff	_PMP+1,btemp+2
   535  00A272  6A03               	clrf	btemp+3,c
   536  00A274  5003               	movf	btemp+3,w,c
   537  00A276  0A80               	xorlw	128
   538  00A278  6E04               	movwf	btemp+4,c
   539  00A27A  5001               	movf	btemp+1,w,c
   540  00A27C  0A80               	xorlw	128
   541  00A27E  5C04               	subwf	btemp+4,w,c
   542  00A280  E102               	bnz	u325
   543  00A282  5000               	movf	btemp,w,c
   544  00A284  5C02               	subwf	btemp+2,w,c
   545  00A286                     u325:
   546  00A286  E205               	bc	l41
   547                           ;pompa.c: 106: {
   548  00A288  0EFE               	movlw	254
   549  00A28A  27DA               	addwf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),f,b
   550                           ;pompa.c: 108: pdw=1;
   551  00A28C  0E01               	movlw	1
   552  00A28E  6ED9               	movwf	fsr2l,c
   553                           ;pompa.c: 109: }
   554  00A290  D002               	goto	l32
   555  00A292                     l41:
   556                           ;pompa.c: 110: else ppwm=PMP.MDPROC;
   557  00A292  C06E  F0DA         	movff	_PMP+1,?a_ModPmp1+3
   558  00A296                     l32:
   559                           ;pompa.c: 111: }
   560  00A296  C28F  FFE8         	movff	_PWM+33,wreg
   561  00A29A  0100               	movlb	(_rgl+9) shr (0+8)
   562  00A29C  617E               	cpfslt	(_rgl+9)& (0+255),b
   563  00A29E  D001               	goto	u331
   564  00A2A0  D009               	goto	u370
   565  00A2A2                     u331:
   566  00A2A2  C28F  FFE8         	movff	_PWM+33,wreg
   567  00A2A6  0100               	movlb	(_rgl+9) shr (0+8)
   568  00A2A8  5D7E               	subwf	(_rgl+9)& (0+255),w,b
   569  00A2AA  E354               	bnc	l54
   570  00A2AC  0E01               	movlw	1
   571  00A2AE  EC4E  F036         	call	_Tnizsza
   572  00A2B2  E250               	bc	l54
   573  00A2B4                     u370:
   574                           ;pompa.c: 117: {
   575  00A2B4  C22D  FFE8         	movff	_DtIN+3,wreg
   576  00A2B8  0102               	movlb	(_DtIN+5) shr (0+8)
   577  00A2BA  612F               	cpfslt	(_DtIN+5)& (0+255),b
   578  00A2BC  D04B               	goto	l54
   579                           ;pompa.c: 119: {
   580  00A2BE  0100               	movlb	__Lparam shr (0+8)
   581  00A2C0  51D8               	movf	(?a_ModPmp1+1)^(__Lparam& (0+65280)),w
   582  00A2C2  E11E               	bnz	l45
   583                           ;pompa.c: 121: if(ppwm<PMP.MGPROC)
   584  00A2C4  C06D  FFE8         	movff	_PMP,wreg
   585  00A2C8  61DA               	cpfslt	(?a_ModPmp1+3)^(__Lparam& (0+65280)),b
   586  00A2CA  D01A               	goto	l45
   587                           ;pompa.c: 122: {
   588  00A2CC  C06D  F000         	movff	_PMP,btemp
   589  00A2D0  6A01               	clrf	btemp+1,c
   590  00A2D2  0E01               	movlw	1
   591  00A2D4  C0DA  F002         	movff	?a_ModPmp1+3,btemp+2
   592  00A2D8  6A03               	clrf	btemp+3,c
   593  00A2DA  2602               	addwf	btemp+2,f,c
   594  00A2DC  0E00               	movlw	0
   595  00A2DE  2203               	addwfc	btemp+3,f,c
   596  00A2E0  5003               	movf	btemp+3,w,c
   597  00A2E2  0A80               	xorlw	128
   598  00A2E4  6E04               	movwf	btemp+4,c
   599  00A2E6  5001               	movf	btemp+1,w,c
   600  00A2E8  0A80               	xorlw	128
   601  00A2EA  5C04               	subwf	btemp+4,w,c
   602  00A2EC  E102               	bnz	u415
   603  00A2EE  5000               	movf	btemp,w,c
   604  00A2F0  5C02               	subwf	btemp+2,w,c
   605  00A2F2                     u415:
   606  00A2F2  E204               	bc	l47
   607                           ;pompa.c: 124: {
   608  00A2F4  2BDA               	incf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),f,b
   609                           ;pompa.c: 126: pup=1;
   610  00A2F6  0E01               	movlw	1
   611  00A2F8  6FD8               	movwf	(?a_ModPmp1+1)^(__Lparam& (0+65280)),b
   612                           ;pompa.c: 127: }
   613  00A2FA  D002               	goto	l45
   614  00A2FC                     l47:
   615                           ;pompa.c: 128: else ppwm=PMP.MGPROC;
   616  00A2FC  C06D  F0DA         	movff	_PMP,?a_ModPmp1+3
   617  00A300                     l45:
   618                           ;pompa.c: 129: }
   619  00A300  0100               	movlb	__Lparam shr (0+8)
   620  00A302  51D8               	movf	(?a_ModPmp1+1)^(__Lparam& (0+65280)),w
   621  00A304  E127               	bnz	l54
   622                           ;pompa.c: 131: if(DtIN.DIN>DtIN.DIN2)
   623  00A306  C22D  FFE8         	movff	_DtIN+3,wreg
   624  00A30A  0102               	movlb	(_DtIN+4) shr (0+8)
   625  00A30C  612E               	cpfslt	(_DtIN+4)& (0+255),b
   626  00A30E  D022               	goto	l54
   627                           ;pompa.c: 132: {
   628  00A310  C06D  FFE8         	movff	_PMP,wreg
   629  00A314  0100               	movlb	__Lparam shr (0+8)
   630  00A316  61DA               	cpfslt	(?a_ModPmp1+3)^(__Lparam& (0+65280)),b
   631  00A318  D01D               	goto	l54
   632                           ;pompa.c: 134: {
   633  00A31A  C06D  F000         	movff	_PMP,btemp
   634  00A31E  6A01               	clrf	btemp+1,c
   635  00A320  0E01               	movlw	1
   636  00A322  C0DA  F002         	movff	?a_ModPmp1+3,btemp+2
   637  00A326  6A03               	clrf	btemp+3,c
   638  00A328  2602               	addwf	btemp+2,f,c
   639  00A32A  0E00               	movlw	0
   640  00A32C  2203               	addwfc	btemp+3,f,c
   641  00A32E  5003               	movf	btemp+3,w,c
   642  00A330  0A80               	xorlw	128
   643  00A332  6E04               	movwf	btemp+4,c
   644  00A334  5001               	movf	btemp+1,w,c
   645  00A336  0A80               	xorlw	128
   646  00A338  5C04               	subwf	btemp+4,w,c
   647  00A33A  E102               	bnz	u455
   648  00A33C  5000               	movf	btemp,w,c
   649  00A33E  5C02               	subwf	btemp+2,w,c
   650  00A340                     u455:
   651  00A340  E207               	bc	L7
   652                           ;pompa.c: 136: {
   653  00A342  2BDA               	incf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),f,b
   654                           ;pompa.c: 138: pup=1;
   655  00A344  0E01               	movlw	1
   656  00A346  6ED9               	movwf	fsr2l,c
   657                           ;pompa.c: 139: }
   658  00A348  D005               	goto	l54
   659                           ;pompa.c: 140: else ppwm=PMP.MGPROC;
   660                           ;pompa.c: 141: }
   661  00A34A                     l16:
   662                           ;pompa.c: 148: else
   663  00A34A  0E08               	movlw	8
   664  00A34C  EC86  F06E         	call	_StartRTdS
   665  00A350                     L7:
   666                           ;pompa.c: 151: ppwm=PMP.MGPROC;
   667  00A350  C06D  F0DA         	movff	_PMP,?a_ModPmp1+3
   668  00A354                     l54:
   669                           ;pompa.c: 152: }
   670  00A354  0100               	movlb	__Lparam shr (0+8)
   671  00A356  51DA               	movf	(?a_ModPmp1+3)^(__Lparam& (0+65280)),w
   672  00A358  0012               	return	
   673                           ;pompa.c: 154: }
   674  00A35A                     __end_of_ModPmp1:
   675                           ;pompa.c: 158: void RglPmp1(void)
   676                           ;pompa.c: 159: {
   677  00A35A                     _RglPmp1:
   678  000000                     
   679                           ;pompa.c: 160: PMP.MGPROC=100;
   680  00A35A  0E64               	movlw	100
   681  00A35C  CFE8 F06D          	movff	wreg,_PMP
   682                           ;pompa.c: 161: PMP.MDPROC=DtKNF.mdpm;
   683  00A360  C08F  F06E         	movff	_DtKNF+11,_PMP+1
   684                           ;pompa.c: 162: DtIN.DDLT=DtKNF.dtpm;
   685  00A364  C08E  F22F         	movff	_DtKNF+10,_DtIN+5
   686                           ;pompa.c: 163: if(!M._PRACA)
   687  00A368  0101               	movlb	(_M+27) shr (0+8)
   688  00A36A  B595               	btfsc	(_M+27)& (0+255),2,b
   689  00A36C  D011               	goto	l56
   690                           ;pompa.c: 164: {
   691  00A36E  0102               	movlb	(_DtIN+19) shr (0+8)
   692  00A370  6B3D               	clrf	(_DtIN+19)& (0+255),b
   693                           ;pompa.c: 166: StartRTS(15);
   694  00A372  0E0F               	movlw	15
   695  00A374  ECA4  F06E         	call	_StartRTS
   696                           ;pompa.c: 167: if(RD2)
   697  00A378  A483               	btfss	3971,2,c	;volatile
   698  00A37A  D003               	goto	l57
   699                           ;pompa.c: 168: {
   700  00A37C  C06D  F06F         	movff	_PMP,_PMP+2
   701                           ;pompa.c: 170: }
   702  00A380  D002               	goto	l58
   703  00A382                     l57:
   704                           ;pompa.c: 171: else
   705  00A382  0100               	movlb	(_PMP+2) shr (0+8)
   706  00A384  6B6F               	clrf	(_PMP+2)& (0+255),b
   707  00A386                     l58:
   708                           ;pompa.c: 174: }
   709  00A386  C06F  FFE8         	movff	_PMP+2,wreg
   710  00A38A  DE7A               	call	_ProcToPmpPwm
   711  00A38C  EF3F  F061         	goto	_WritePWM2
   712                           ;pompa.c: 176: }
   713  00A390                     l56:
   714                           ;pompa.c: 177: else
   715  00A390  0101               	movlb	(_M+17) shr (0+8)
   716  00A392  AB8B               	btfss	(_M+17)& (0+255),5,b
   717  00A394  D013               	goto	l60
   718  00A396  0102               	movlb	_DtIN shr (0+8)
   719  00A398  B12A               	btfsc	_DtIN& (0+255),0,b
   720  00A39A  D010               	goto	l60
   721  00A39C  0101               	movlb	(_M+27) shr (0+8)
   722  00A39E  BF95               	btfsc	(_M+27)& (0+255),7,b
   723  00A3A0  D00D               	goto	l60
   724  00A3A2  0E0F               	movlw	15
   725  00A3A4  ECB6  F06E         	call	_RTS
   726  00A3A8  6E00               	movwf	btemp,c
   727  00A3AA  0E0B               	movlw	11
   728  00A3AC  5C00               	subwf	btemp,w,c
   729  00A3AE  E306               	bnc	l60
   730                           ;pompa.c: 180: {
   731  00A3B0  C06F  FFE8         	movff	_PMP+2,wreg
   732  00A3B4  DE86               	call	_ModPmp1
   733  00A3B6  CFE8 F06F          	movff	wreg,_PMP+2
   734                           ;pompa.c: 182: }
   735  00A3BA  D002               	goto	l61
   736  00A3BC                     l60:
   737                           ;pompa.c: 183: else
   738  00A3BC  C06D  F06F         	movff	_PMP,_PMP+2
   739  00A3C0                     l61:
   740                           ;pompa.c: 186: }
   741  00A3C0  C06F  FFE8         	movff	_PMP+2,wreg
   742  00A3C4  DE5D               	call	_ProcToPmpPwm
   743  00A3C6  EF3F  F061         	goto	_WritePWM2
   744                           ;pompa.c: 188: }
   745  00A3CA                     __end_of_RglPmp1:
   746                           ;pompa.c: 196: signed char RetMin(signed char a,
      +                           signed char b)
   747                           ;pompa.c: 197: {
   748  00A3CA  00E7               	dw	?_RetMin
   749  00A3CC                     _RetMin:
   750  000000                     
   751                           ; _a loaded to fsr2l
   752  00A3CC  6ED9               	movwf	fsr2l,c
   753                           ;pompa.c: 198: if(a<=b) return a;
   754  00A3CE  0100               	movlb	__Lparam shr (0+8)
   755  00A3D0  51E7               	movf	?_RetMin^(__Lparam& (0+65280)),w
   756  00A3D2  0A80               	xorlw	128
   757  00A3D4  6E00               	movwf	btemp,c
   758  00A3D6  50D9               	movf	fsr2l,w,c
   759  00A3D8  0A80               	xorlw	128
   760  00A3DA  5C00               	subwf	btemp,w,c
   761  00A3DC  E302               	bnc	l63
   762  00A3DE  50D9               	movf	fsr2l,w,c
   763  00A3E0  0012               	return	
   764  00A3E2                     l63:
   765                           ;pompa.c: 199: return b;
   766  00A3E2  0100               	movlb	__Lparam shr (0+8)
   767  00A3E4  51E7               	movf	?_RetMin^(__Lparam& (0+65280)),w
   768  00A3E6  0012               	return	
   769                           ;pompa.c: 200: }
   770  00A3E8                     __end_of_RetMin:
   771                           ;pompa.c: 203: signed char RetMax(signed char a,
      +                           signed char b)
   772                           ;pompa.c: 204: {
   773  00A3E8  00E8               	dw	?_RetMax
   774  00A3EA                     _RetMax:
   775  000000                     
   776                           ; _a loaded to fsr2l
   777  00A3EA  6ED9               	movwf	fsr2l,c
   778                           ;pompa.c: 205: if(a>=b) return a;
   779  00A3EC  50D9               	movf	fsr2l,w,c
   780  00A3EE  0A80               	xorlw	128
   781  00A3F0  6E00               	movwf	btemp,c
   782  00A3F2  0100               	movlb	__Lparam shr (0+8)
   783  00A3F4  51E8               	movf	?_RetMax^(__Lparam& (0+65280)),w
   784  00A3F6  0A80               	xorlw	128
   785  00A3F8  5C00               	subwf	btemp,w,c
   786  00A3FA  E302               	bnc	l65
   787  00A3FC  50D9               	movf	fsr2l,w,c
   788  00A3FE  0012               	return	
   789  00A400                     l65:
   790                           ;pompa.c: 206: return b;
   791  00A400  0100               	movlb	__Lparam shr (0+8)
   792  00A402  51E8               	movf	?_RetMax^(__Lparam& (0+65280)),w
   793  00A404  0012               	return	
   794                           ;pompa.c: 207: }
   795  00A406                     __end_of_RetMax:
   796                           ;pompa.c: 211: unsigned char RetHI(unsigned char
      +                           pco, unsigned char eco, unsigned char max)
   797                           ;pompa.c: 212: {
   798  00A406  00E7               	dw	?_RetHI
   799  00A408                     _RetHI:
   800  000000                     
   801                           ; _pco loaded to fsr1l
   802  00A408  6EE1               	movwf	fsr1l,c
   803                           ;pompa.c: 213: signed char w;
   804  00A40A  50E1               	movf	fsr1l,w,c
   805  00A40C  0100               	movlb	__Lparam shr (0+8)
   806  00A40E  61E8               	cpfslt	(?_RetHI+1)^(__Lparam& (0+65280)),b
   807  00A410  D002               	goto	l67
   808  00A412  50E1               	movf	fsr1l,w,c
   809  00A414  D002               	goto	L2
   810  00A416                     l67:
   811                           ;pompa.c: 217: else emax=max;
   812  00A416  0100               	movlb	__Lparam shr (0+8)
   813  00A418  51E8               	movf	(?_RetHI+1)^(__Lparam& (0+65280)),w
   814  00A41A                     L2:
   815  00A41A  6ED9               	movwf	fsr2l,c
   816                           ;pompa.c: 219: k=(emax-DtIN.Eco5HI)/4;
   817  00A41C  0E04               	movlw	4
   818  00A41E  6E02               	movwf	btemp+2,c
   819  00A420  6A03               	clrf	btemp+3,c
   820  00A422  C235  FFE8         	movff	_DtIN+11,wreg
   821  00A426  CFD9 F000          	movff	fsr2l,btemp
   822  00A42A  6A01               	clrf	btemp+1,c
   823  00A42C  5E00               	subwf	btemp,f,c
   824  00A42E  0E00               	movlw	0
   825  00A430  5A01               	subwfb	btemp+1,f,c
   826  00A432  ECCC  F072         	call	awdiv
   827  00A436  5004               	movf	btemp+4,w,c
   828  00A438  6EE9               	movwf	fsr0l,c
   829                           ;pompa.c: 220: w=(DtIN.Eco5HI+((5-eco)*k));
   830  00A43A  0100               	movlb	__Lparam shr (0+8)
   831  00A43C  51E7               	movf	?_RetHI^(__Lparam& (0+65280)),w
   832  00A43E  0805               	sublw	5
   833  00A440  02E9               	mulwf	fsr0l,c
   834  00A442  C235  FFE8         	movff	_DtIN+11,wreg
   835  00A446  24F3               	addwf	prodl,w,c
   836  00A448  6EE1               	movwf	fsr1l,c
   837                           ;pompa.c: 221: if(w<=emax&&w>=DtIN.Eco5LO) retur
      +                          n w;
   838  00A44A  50D9               	movf	fsr2l,w,c
   839  00A44C  BEE1               	btfsc	fsr1l,7,c
   840  00A44E  D003               	goto	u580
   841  00A450  0AFF               	xorlw	255
   842  00A452  24E1               	addwf	fsr1l,w,c
   843  00A454  E214               	bc	l69
   844  00A456                     u580:
   845  00A456  C236  F002         	movff	_DtIN+12,btemp+2
   846  00A45A  6A03               	clrf	btemp+3,c
   847  00A45C  CFE1 F000          	movff	fsr1l,btemp
   848  00A460  6A01               	clrf	btemp+1,c
   849  00A462  BE00               	btfsc	btemp,7,c
   850  00A464  0601               	decf	btemp+1,f,c
   851  00A466  5001               	movf	btemp+1,w,c
   852  00A468  0A80               	xorlw	128
   853  00A46A  6E04               	movwf	btemp+4,c
   854  00A46C  5003               	movf	btemp+3,w,c
   855  00A46E  0A80               	xorlw	128
   856  00A470  5C04               	subwf	btemp+4,w,c
   857  00A472  E102               	bnz	u595
   858  00A474  5002               	movf	btemp+2,w,c
   859  00A476  5C00               	subwf	btemp,w,c
   860  00A478                     u595:
   861  00A478  E302               	bnc	l69
   862  00A47A  50E1               	movf	fsr1l,w,c
   863  00A47C  0012               	return	
   864  00A47E                     l69:
   865                           ;pompa.c: 222: else
   866  00A47E  50D9               	movf	fsr2l,w,c
   867  00A480  94D8               	bcf	status,2,c
   868  00A482  90D8               	bcf	status,0,c
   869  00A484  AEE1               	btfss	fsr1l,7,c
   870  00A486  5CE1               	subwf	fsr1l,w,c
   871  00A488  B4D8               	btfsc	status,2,c
   872  00A48A  90D8               	bcf	status,0,c
   873  00A48C  E302               	bnc	l71
   874  00A48E  50D9               	movf	fsr2l,w,c
   875  00A490  0012               	return	
   876  00A492                     l71:
   877                           ;pompa.c: 224: else return DtIN.Eco5LO;
   878  00A492  C236  FFE8         	movff	_DtIN+12,wreg
   879  00A496  0012               	return	
   880                           ;pompa.c: 225: }
   881  00A498                     __end_of_RetHI:
   882                           ;pompa.c: 229: unsigned char RetLO(unsigned char
      +                           pco, unsigned char eco, unsigned char min)
   883                           ;pompa.c: 230: {
   884  00A498  00E7               	dw	?_RetLO
   885  00A49A                     _RetLO:
   886  000000                     
   887                           ; _pco loaded to fsr1l
   888  00A49A  6EE1               	movwf	fsr1l,c
   889                           ;pompa.c: 231: signed char w;
   890  00A49C  C235  FFE8         	movff	_DtIN+11,wreg
   891  00A4A0  60E1               	cpfslt	fsr1l,c
   892  00A4A2  D003               	goto	l74
   893  00A4A4  50E1               	movf	fsr1l,w,c
   894  00A4A6  6ED9               	movwf	fsr2l,c
   895  00A4A8  D002               	goto	l75
   896  00A4AA                     l74:
   897                           ;pompa.c: 235: else ehi=DtIN.Eco5HI;
   898  00A4AA  C235  FFD9         	movff	_DtIN+11,fsr2l
   899  00A4AE                     l75:
   900                           ;pompa.c: 237: k=(ehi-DtIN.Eco5LO)/4;
   901  00A4AE  0E04               	movlw	4
   902  00A4B0  6E02               	movwf	btemp+2,c
   903  00A4B2  6A03               	clrf	btemp+3,c
   904  00A4B4  C236  FFE8         	movff	_DtIN+12,wreg
   905  00A4B8  CFD9 F000          	movff	fsr2l,btemp
   906  00A4BC  6A01               	clrf	btemp+1,c
   907  00A4BE  5E00               	subwf	btemp,f,c
   908  00A4C0  0E00               	movlw	0
   909  00A4C2  5A01               	subwfb	btemp+1,f,c
   910  00A4C4  ECCC  F072         	call	awdiv
   911  00A4C8  5004               	movf	btemp+4,w,c
   912  00A4CA  6EE9               	movwf	fsr0l,c
   913                           ;pompa.c: 238: w=(DtIN.Eco5LO+((5-eco)*k));
   914  00A4CC  0100               	movlb	__Lparam shr (0+8)
   915  00A4CE  51E7               	movf	?_RetLO^(__Lparam& (0+65280)),w
   916  00A4D0  0805               	sublw	5
   917  00A4D2  02E9               	mulwf	fsr0l,c
   918  00A4D4  C236  FFE8         	movff	_DtIN+12,wreg
   919  00A4D8  24F3               	addwf	prodl,w,c
   920  00A4DA  6EE1               	movwf	fsr1l,c
   921                           ;pompa.c: 240: if(w<=ehi&&w>=min) return w;
   922  00A4DC  50D9               	movf	fsr2l,w,c
   923  00A4DE  BEE1               	btfsc	fsr1l,7,c
   924  00A4E0  D003               	goto	u630
   925  00A4E2  0AFF               	xorlw	255
   926  00A4E4  24E1               	addwf	fsr1l,w,c
   927  00A4E6  E214               	bc	l76
   928  00A4E8                     u630:
   929  00A4E8  C0E8  F002         	movff	?_RetLO+1,btemp+2
   930  00A4EC  6A03               	clrf	btemp+3,c
   931  00A4EE  CFE1 F000          	movff	fsr1l,btemp
   932  00A4F2  6A01               	clrf	btemp+1,c
   933  00A4F4  BE00               	btfsc	btemp,7,c
   934  00A4F6  0601               	decf	btemp+1,f,c
   935  00A4F8  5001               	movf	btemp+1,w,c
   936  00A4FA  0A80               	xorlw	128
   937  00A4FC  6E04               	movwf	btemp+4,c
   938  00A4FE  5003               	movf	btemp+3,w,c
   939  00A500  0A80               	xorlw	128
   940  00A502  5C04               	subwf	btemp+4,w,c
   941  00A504  E102               	bnz	u645
   942  00A506  5002               	movf	btemp+2,w,c
   943  00A508  5C00               	subwf	btemp,w,c
   944  00A50A                     u645:
   945  00A50A  E302               	bnc	l76
   946  00A50C  50E1               	movf	fsr1l,w,c
   947  00A50E  0012               	return	
   948  00A510                     l76:
   949                           ;pompa.c: 241: else
   950  00A510  50D9               	movf	fsr2l,w,c
   951  00A512  94D8               	bcf	status,2,c
   952  00A514  90D8               	bcf	status,0,c
   953  00A516  AEE1               	btfss	fsr1l,7,c
   954  00A518  5CE1               	subwf	fsr1l,w,c
   955  00A51A  B4D8               	btfsc	status,2,c
   956  00A51C  90D8               	bcf	status,0,c
   957  00A51E  E302               	bnc	l78
   958  00A520  50D9               	movf	fsr2l,w,c
   959  00A522  0012               	return	
   960  00A524                     l78:
   961                           ;pompa.c: 243: else return min;
   962  00A524  0100               	movlb	__Lparam shr (0+8)
   963  00A526  51E8               	movf	(?_RetLO+1)^(__Lparam& (0+65280)),w
   964  00A528  0012               	return	
   965                           ;pompa.c: 244: }
   966  00A52A                     __end_of_RetLO:
   967                           ;pompa.c: 247: signed char RetDelta1(unsigned ch
      +                          ar pco,unsigned char hi)
   968                           ;pompa.c: 248: {
   969  00A52A  00E7               	dw	?_RetDelta1
   970  00A52C                     _RetDelta1:
   971  000000                     
   972                           ; _pco loaded to fsr2l
   973  00A52C  6ED9               	movwf	fsr2l,c
   974                           ;pompa.c: 249: return (pco-hi);
   975  00A52E  0100               	movlb	__Lparam shr (0+8)
   976  00A530  51E7               	movf	?_RetDelta1^(__Lparam& (0+65280)),w
   977  00A532  5CD9               	subwf	fsr2l,w,c
   978  00A534  0012               	return	
   979                           ;pompa.c: 250: }
   980  00A536                     __end_of_RetDelta1:
   981                           ;pompa.c: 254: signed char RetDelta2(unsigned ch
      +                          ar eco,unsigned char ddlt)
   982                           ;pompa.c: 255: {
   983  00A536  00E7               	dw	?_RetDelta2
   984  00A538                     _RetDelta2:
   985  000000                     
   986                           ; _eco loaded to fsr1l
   987  00A538  6EE1               	movwf	fsr1l,c
   988                           ;pompa.c: 256: unsigned char kD;
   989  00A53A  0100               	movlb	__Lparam shr (0+8)
   990  00A53C  41E7               	rrncf	?_RetDelta2^(__Lparam& (0+65280)),w
   991  00A53E  42E8               	rrncf	wreg,f,c
   992  00A540  0B3F               	andlw	63
   993  00A542  6ED9               	movwf	fsr2l,c
   994                           ;pompa.c: 259: return (ddlt+(kD*(eco-5)));
   995  00A544  50E1               	movf	fsr1l,w,c
   996  00A546  0FFB               	addlw	-5
   997  00A548  02D9               	mulwf	fsr2l,c
   998  00A54A  51E7               	movf	?_RetDelta2^(__Lparam& (0+65280)),w
   999  00A54C  24F3               	addwf	prodl,w,c
  1000  00A54E  0012               	return	
  1001                           ;pompa.c: 260: }
  1002  00A550                     __end_of_RetDelta2:
  1003                           ;pompa.c: 263: signed char RetDelta3(unsigned ch
      +                          ar pco,unsigned char lo)
  1004                           ;pompa.c: 264: {
  1005  00A550  00E7               	dw	?_RetDelta3
  1006  00A552                     _RetDelta3:
  1007  000000                     
  1008                           ; _pco loaded to fsr2l
  1009  00A552  6ED9               	movwf	fsr2l,c
  1010                           ;pompa.c: 265: return (pco-lo);
  1011  00A554  0100               	movlb	__Lparam shr (0+8)
  1012  00A556  51E7               	movf	?_RetDelta3^(__Lparam& (0+65280)),w
  1013  00A558  5CD9               	subwf	fsr2l,w,c
  1014  00A55A  0012               	return	
  1015                           ;pompa.c: 266: }
  1016  00A55C                     __end_of_RetDelta3:
  1017                           ;pompa.c: 269: unsigned char RetDelta4(unsigned 
      +                          char pco,unsigned char eco,unsigned char hi,unsi
      +                          gned char lo)
  1018                           ;pompa.c: 270: {
  1019  00A55C  00E4               	dw	?_RetDelta4
  1020  00A55E                     _RetDelta4:
  1021  000000                     
  1022                           ; _pco loaded to fsr0l
  1023  00A55E  6EE9               	movwf	fsr0l,c
  1024                           ;pompa.c: 271: signed char d;
  1025  00A560  0100               	movlb	__Lparam shr (0+8)
  1026  00A562  51E5               	movf	(?_RetDelta4+1)^(__Lparam& (0+65280)),w
  1027  00A564  6FE7               	movwf	?_RetDelta1^(__Lparam& (0+65280)),b
  1028  00A566  50E9               	movf	fsr0l,w,c
  1029  00A568  DFE1               	call	_RetDelta1
  1030  00A56A  CFE8 F239          	movff	wreg,_DtIN+15
  1031                           ;pompa.c: 274: DtIN.delta2=RetDelta2(eco,20);
  1032  00A56E  0E14               	movlw	20
  1033  00A570  0100               	movlb	__Lparam shr (0+8)
  1034  00A572  6FE7               	movwf	?_RetDelta2^(__Lparam& (0+65280)),b
  1035  00A574  51E4               	movf	?_RetDelta4^(__Lparam& (0+65280)),w
  1036  00A576  DFE0               	call	_RetDelta2
  1037  00A578  CFE8 F23A          	movff	wreg,_DtIN+16
  1038                           ;pompa.c: 275: DtIN.delta3=RetDelta3(pco,lo);
  1039  00A57C  0100               	movlb	__Lparam shr (0+8)
  1040  00A57E  51E6               	movf	(?_RetDelta4+2)^(__Lparam& (0+65280)),w
  1041  00A580  6FE7               	movwf	?_RetDelta3^(__Lparam& (0+65280)),b
  1042  00A582  50E9               	movf	fsr0l,w,c
  1043  00A584  DFE6               	call	_RetDelta3
  1044  00A586  CFE8 F23B          	movff	wreg,_DtIN+17
  1045                           ;pompa.c: 276: d=RetMin(DtIN.delta3,RetMax(DtIN.
      +                          delta1,DtIN.delta2));
  1046  00A58A  C23A  F0E8         	movff	_DtIN+16,?_RetMax
  1047  00A58E  C239  FFE8         	movff	_DtIN+15,wreg
  1048  00A592  DF2B               	call	_RetMax
  1049  00A594  0100               	movlb	__Lparam shr (0+8)
  1050  00A596  6FE7               	movwf	?_RetMin^(__Lparam& (0+65280)),b
  1051  00A598  C23B  FFE8         	movff	_DtIN+17,wreg
  1052  00A59C  DF17               	call	_RetMin
  1053  00A59E  6EE9               	movwf	fsr0l,c
  1054                           ;pompa.c: 277: if(d>0) return d;
  1055  00A5A0  50E9               	movf	fsr0l,w,c
  1056  00A5A2  0A80               	xorlw	128
  1057  00A5A4  0F7F               	addlw	-129
  1058  00A5A6  E302               	bnc	l84
  1059  00A5A8  50E9               	movf	fsr0l,w,c
  1060  00A5AA  0012               	return	
  1061  00A5AC                     l84:
  1062                           ;pompa.c: 278: return 0;
  1063  00A5AC  0C00               	retlw	0
  1064                           ;pompa.c: 279: }
  1065  00A5AE                     __end_of_RetDelta4:
  1066                           ;pompa.c: 282: unsigned char RetKrkDelta(unsigne
      +                          d char pco)
  1067                           ;pompa.c: 283: {
  1068  00A5AE                     _RetKrkDelta:
  1069  000000                     
  1070                           ;_pco stored from wreg
  1071  00A5AE  0100               	movlb	__Lparam shr (0+8)
  1072  00A5B0  6FE2               	movwf	(?a_RetKrkDelta+3)^(__Lparam& (0+65280)),
      +                          b
  1073                           ;pompa.c: 284: unsigned char i,d,min,max;
  1074  00A5B2  6BE0               	clrf	(?a_RetKrkDelta+1)^(__Lparam& (0+65280)),b
  1075                           ;pompa.c: 287: min=100;
  1076  00A5B4  0E64               	movlw	100
  1077  00A5B6  6FE1               	movwf	(?a_RetKrkDelta+2)^(__Lparam& (0+65280)),
      +                          b
  1078                           ;pompa.c: 288: for(i=1;i<10;i++)
  1079  00A5B8  0E01               	movlw	1
  1080  00A5BA  6FE3               	movwf	(?a_RetKrkDelta+4)^(__Lparam& (0+65280)),
      +                          b
  1081  00A5BC                     l86:
  1082                           ;pompa.c: 289: {
  1083  00A5BC  0100               	movlb	__Lparam shr (0+8)
  1084  00A5BE  51E3               	movf	(?a_RetKrkDelta+4)^(__Lparam& (0+65280)),w
  1085  00A5C0  6FE4               	movwf	?_RetDelta4^(__Lparam& (0+65280)),b
  1086  00A5C2  51E3               	movf	(?a_RetKrkDelta+4)^(__Lparam& (0+65280)),w
  1087  00A5C4  6FE7               	movwf	?_RetHI^(__Lparam& (0+65280)),b
  1088  00A5C6  0E50               	movlw	80
  1089  00A5C8  6FE8               	movwf	(?_RetHI+1)^(__Lparam& (0+65280)),b
  1090  00A5CA  51E2               	movf	(?a_RetKrkDelta+3)^(__Lparam& (0+65280)),w
  1091  00A5CC  DF1D               	call	_RetHI
  1092  00A5CE  0100               	movlb	__Lparam shr (0+8)
  1093  00A5D0  6FE5               	movwf	(?_RetDelta4+1)^(__Lparam& (0+65280)),b
  1094  00A5D2  51E3               	movf	(?a_RetKrkDelta+4)^(__Lparam& (0+65280)),w
  1095  00A5D4  6FE7               	movwf	?_RetLO^(__Lparam& (0+65280)),b
  1096  00A5D6  0E0A               	movlw	10
  1097  00A5D8  6FE8               	movwf	(?_RetLO+1)^(__Lparam& (0+65280)),b
  1098  00A5DA  51E2               	movf	(?a_RetKrkDelta+3)^(__Lparam& (0+65280)),w
  1099  00A5DC  DF5E               	call	_RetLO
  1100  00A5DE  0100               	movlb	__Lparam shr (0+8)
  1101  00A5E0  6FE6               	movwf	(?_RetDelta4+2)^(__Lparam& (0+65280)),b
  1102  00A5E2  51E2               	movf	(?a_RetKrkDelta+3)^(__Lparam& (0+65280)),w
  1103  00A5E4  DFBC               	call	_RetDelta4
  1104  00A5E6  0100               	movlb	__Lparam shr (0+8)
  1105  00A5E8  6FDF               	movwf	?a_RetKrkDelta^(__Lparam& (0+65280)),b
  1106                           ;pompa.c: 291: if(d>max) max=d;
  1107  00A5EA  51DF               	movf	?a_RetKrkDelta^(__Lparam& (0+65280)),w
  1108  00A5EC  61E0               	cpfslt	(?a_RetKrkDelta+1)^(__Lparam& (0+65280))
      +                          ,b
  1109  00A5EE  D002               	goto	l89
  1110  00A5F0  51DF               	movf	?a_RetKrkDelta^(__Lparam& (0+65280)),w
  1111  00A5F2  6FE0               	movwf	(?a_RetKrkDelta+1)^(__Lparam& (0+65280)),
      +                          b
  1112  00A5F4                     l89:
  1113                           ;pompa.c: 292: if(d<min) min=d;
  1114  00A5F4  0100               	movlb	__Lparam shr (0+8)
  1115  00A5F6  51E1               	movf	(?a_RetKrkDelta+2)^(__Lparam& (0+65280)),w
  1116  00A5F8  61DF               	cpfslt	?a_RetKrkDelta^(__Lparam& (0+65280)),b
  1117  00A5FA  D002               	goto	l90
  1118  00A5FC  51DF               	movf	?a_RetKrkDelta^(__Lparam& (0+65280)),w
  1119  00A5FE  6FE1               	movwf	(?a_RetKrkDelta+2)^(__Lparam& (0+65280)),
      +                          b
  1120  00A600                     l90:
  1121  00A600  0100               	movlb	__Lparam shr (0+8)
  1122  00A602  2BE3               	incf	(?a_RetKrkDelta+4)^(__Lparam& (0+65280)),f
      +                          ,b
  1123  00A604  0E09               	movlw	9
  1124  00A606  65E3               	cpfsgt	(?a_RetKrkDelta+4)^(__Lparam& (0+65280))
      +                          ,b
  1125  00A608  D7D9               	goto	l86
  1126                           ;pompa.c: 293: }
  1127  00A60A  51E0               	movf	(?a_RetKrkDelta+1)^(__Lparam& (0+65280)),w
  1128  00A60C  5DE1               	subwf	(?a_RetKrkDelta+2)^(__Lparam& (0+65280)),
      +                          w
  1129  00A60E  E301               	bnc	l91
  1130  00A610  0C00               	retlw	0
  1131  00A612                     l91:
  1132                           ;pompa.c: 295: return ((max-min)*10)/9;
  1133  00A612  0E0A               	movlw	10
  1134  00A614  6E02               	movwf	btemp+2,c
  1135  00A616  6A03               	clrf	btemp+3,c
  1136  00A618  0100               	movlb	__Lparam shr (0+8)
  1137  00A61A  51E1               	movf	(?a_RetKrkDelta+2)^(__Lparam& (0+65280)),w
  1138  00A61C  C0E0  F000         	movff	?a_RetKrkDelta+1,btemp
  1139  00A620  6A01               	clrf	btemp+1,c
  1140  00A622  5E00               	subwf	btemp,f,c
  1141  00A624  0E00               	movlw	0
  1142  00A626  5A01               	subwfb	btemp+1,f,c
  1143  00A628  EC03  F073         	call	awmul
  1144  00A62C  C004  F000         	movff	btemp+4,btemp
  1145  00A630  C005  F001         	movff	btemp+5,btemp+1
  1146  00A634  0E09               	movlw	9
  1147  00A636  6E02               	movwf	btemp+2,c
  1148  00A638  6A03               	clrf	btemp+3,c
  1149  00A63A  ECCC  F072         	call	awdiv
  1150  00A63E  5004               	movf	btemp+4,w,c
  1151  00A640  0012               	return	
  1152                           ;pompa.c: 296: }
  1153  00A642                     __end_of_RetKrkDelta:
  1154                           ;pompa.c: 299: unsigned char RetDelta(unsigned c
      +                          har pco,unsigned char eco)
  1155                           ;pompa.c: 300: {
  1156  00A642  00DC               	dw	?_RetDelta
  1157  00A644                     _RetDelta:
  1158  000000                     
  1159                           ;_pco stored from wreg
  1160  00A644  0100               	movlb	__Lparam shr (0+8)
  1161  00A646  6FDD               	movwf	?a_RetDelta^(__Lparam& (0+65280)),b
  1162                           ;pompa.c: 301: unsigned char k;
  1163  00A648  51DD               	movf	?a_RetDelta^(__Lparam& (0+65280)),w
  1164  00A64A  DFB1               	call	_RetKrkDelta
  1165  00A64C  0100               	movlb	__Lparam shr (0+8)
  1166  00A64E  6FDE               	movwf	(?a_RetDelta+1)^(__Lparam& (0+65280)),b
  1167                           ;pompa.c: 304: if(eco&&k) return (k*(eco))/10;
  1168  00A650  51DC               	movf	?_RetDelta^(__Lparam& (0+65280)),w
  1169  00A652  E00F               	bz	l93
  1170  00A654  51DE               	movf	(?a_RetDelta+1)^(__Lparam& (0+65280)),w
  1171  00A656  E00D               	bz	l93
  1172  00A658  0E0A               	movlw	10
  1173  00A65A  6E02               	movwf	btemp+2,c
  1174  00A65C  6A03               	clrf	btemp+3,c
  1175  00A65E  51DE               	movf	(?a_RetDelta+1)^(__Lparam& (0+65280)),w
  1176  00A660  03DC               	mulwf	?_RetDelta^(__Lparam& (0+65280)),b
  1177  00A662  CFF3 F000          	movff	prodl,btemp
  1178  00A666  CFF4 F001          	movff	prodh,btemp+1
  1179  00A66A  ECCC  F072         	call	awdiv
  1180  00A66E  5004               	movf	btemp+4,w,c
  1181  00A670  0012               	return	
  1182  00A672                     l93:
  1183                           ;pompa.c: 305: else return 0;
  1184  00A672  0C00               	retlw	0
  1185                           ;pompa.c: 306: }
  1186  00A674                     __end_of_RetDelta:
  1187                           ;pompa.c: 310: unsigned char ModPmp2(unsigned ch
      +                          ar p)
  1188                           ;pompa.c: 311: {
  1189  00A674                     _ModPmp2:
  1190  000000                     
  1191                           ;_p stored from wreg
  1192  00A674  0100               	movlb	__Lparam shr (0+8)
  1193  00A676  6FD7               	movwf	?a_ModPmp2^(__Lparam& (0+65280)),b
  1194                           ;pompa.c: 312: unsigned char ppwm, tim, pup, pdw
      +                          ;
  1195  00A678  0E19               	movlw	25
  1196  00A67A  CFE8 F236          	movff	wreg,_DtIN+12
  1197                           ;pompa.c: 316: DtIN.Eco5HI=55;
  1198  00A67E  0E37               	movlw	55
  1199  00A680  CFE8 F235          	movff	wreg,_DtIN+11
  1200                           ;pompa.c: 317: if(DtIN.PPEco)
  1201  00A684  EE02  F034         	lfsr	0,_DtIN+10
  1202  00A688  50EF               	movf	indf0,w,c
  1203  00A68A  E020               	bz	l96
  1204                           ;pompa.c: 318: {
  1205  00A68C  0102               	movlb	(_DtIN+10) shr (0+8)
  1206  00A68E  0534               	decf	(_DtIN+10)& (0+255),w,b
  1207  00A690  0100               	movlb	__Lparam shr (0+8)
  1208  00A692  6FE7               	movwf	?_RetHI^(__Lparam& (0+65280)),b
  1209  00A694  0E50               	movlw	80
  1210  00A696  6FE8               	movwf	(?_RetHI+1)^(__Lparam& (0+65280)),b
  1211  00A698  C210  FFE8         	movff	_DtCO+4,wreg
  1212  00A69C  DEB5               	call	_RetHI
  1213  00A69E  CFE8 F237          	movff	wreg,_DtIN+13
  1214                           ;pompa.c: 320: DtIN.LO=RetLO(DtCO.PPCO,DtIN.PPEc
      +                          o-1,10);
  1215  00A6A2  0102               	movlb	(_DtIN+10) shr (0+8)
  1216  00A6A4  0534               	decf	(_DtIN+10)& (0+255),w,b
  1217  00A6A6  0100               	movlb	__Lparam shr (0+8)
  1218  00A6A8  6FE7               	movwf	?_RetLO^(__Lparam& (0+65280)),b
  1219  00A6AA  0E0A               	movlw	10
  1220  00A6AC  6FE8               	movwf	(?_RetLO+1)^(__Lparam& (0+65280)),b
  1221  00A6AE  C210  FFE8         	movff	_DtCO+4,wreg
  1222  00A6B2  DEF3               	call	_RetLO
  1223  00A6B4  CFE8 F238          	movff	wreg,_DtIN+14
  1224                           ;pompa.c: 321: DtIN.delta=RetDelta(DtCO.PPCO,DtI
      +                          N.PPEco-1);
  1225  00A6B8  0102               	movlb	(_DtIN+10) shr (0+8)
  1226  00A6BA  0534               	decf	(_DtIN+10)& (0+255),w,b
  1227  00A6BC  0100               	movlb	__Lparam shr (0+8)
  1228  00A6BE  6FDC               	movwf	?_RetDelta^(__Lparam& (0+65280)),b
  1229  00A6C0  C210  FFE8         	movff	_DtCO+4,wreg
  1230  00A6C4  DFBF               	call	_RetDelta
  1231  00A6C6  CFE8 F23C          	movff	wreg,_DtIN+18
  1232                           ;pompa.c: 322: }
  1233  00A6CA  D004               	goto	l97
  1234  00A6CC                     l96:
  1235                           ;pompa.c: 323: else
  1236  00A6CC  0102               	movlb	(_DtIN+13) shr (0+8)
  1237  00A6CE  6B37               	clrf	(_DtIN+13)& (0+255),b
  1238                           ;pompa.c: 326: DtIN.LO==0;
  1239  00A6D0  0102               	movlb	(_DtIN+18) shr (0+8)
  1240  00A6D2  6B3C               	clrf	(_DtIN+18)& (0+255),b
  1241  00A6D4                     l97:
  1242                           ;pompa.c: 328: }
  1243  00A6D4  EE02  F03C         	lfsr	0,_DtIN+18
  1244  00A6D8  50EF               	movf	indf0,w,c
  1245  00A6DA  E106               	bnz	l98
  1246                           ;pompa.c: 330: {
  1247  00A6DC  0E08               	movlw	8
  1248  00A6DE  EC86  F06E         	call	_StartRTdS
  1249                           ;pompa.c: 332: return PMP.MGPROC;
  1250  00A6E2  C06D  FFE8         	movff	_PMP,wreg
  1251  00A6E6  0012               	return	
  1252  00A6E8                     l98:
  1253                           ;pompa.c: 333: }
  1254  00A6E8  0100               	movlb	__Lparam shr (0+8)
  1255  00A6EA  51D7               	movf	?a_ModPmp2^(__Lparam& (0+65280)),w
  1256  00A6EC  6FDB               	movwf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),b
  1257                           ;pompa.c: 338: if(rgl.fz||ppwm!=PMP.MGPROC)
  1258  00A6EE  0100               	movlb	_rgl shr (0+8)
  1259  00A6F0  B575               	btfsc	_rgl& (0+255),2,b
  1260  00A6F2  D006               	goto	u790
  1261  00A6F4  0100               	movlb	__Lparam shr (0+8)
  1262  00A6F6  51DB               	movf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),w
  1263  00A6F8  0100               	movlb	_PMP shr (0+8)
  1264  00A6FA  196D               	xorwf	_PMP& (0+255),w,b
  1265  00A6FC  E101 D131          	bz	l99
  1266  00A700                     u790:
  1267                           ;pompa.c: 339: {
  1268  00A700  C23C  F230         	movff	_DtIN+18,_DtIN+6
  1269                           ;pompa.c: 344: if(DtIN.DIN2>DtIN.cDLT)
  1270  00A704  C22E  FFE8         	movff	_DtIN+4,wreg
  1271  00A708  0102               	movlb	(_DtIN+6) shr (0+8)
  1272  00A70A  6130               	cpfslt	(_DtIN+6)& (0+255),b
  1273  00A70C  D016               	goto	l100
  1274                           ;pompa.c: 345: {
  1275  00A70E  0E32               	movlw	50
  1276  00A710  0100               	movlb	__Lparam shr (0+8)
  1277  00A712  6FDA               	movwf	(?a_ModPmp2+3)^(__Lparam& (0+65280)),b
  1278                           ;pompa.c: 347: if(DtIN.DIN2-DtIN.cDLT==2) tim=10
      +                          0;
  1279  00A714  C230  FFE8         	movff	_DtIN+6,wreg
  1280  00A718  C22E  F000         	movff	_DtIN+4,btemp
  1281  00A71C  6A01               	clrf	btemp+1,c
  1282  00A71E  5E00               	subwf	btemp,f,c
  1283  00A720  0E00               	movlw	0
  1284  00A722  5A01               	subwfb	btemp+1,f,c
  1285  00A724  5000               	movf	btemp,w,c
  1286  00A726  0A02               	xorlw	2
  1287  00A728  1001               	iorwf	btemp+1,w,c
  1288  00A72A  E102               	bnz	l101
  1289  00A72C                     u810:
  1290  00A72C  0E64               	movlw	100
  1291  00A72E  D021               	goto	L5
  1292  00A730                     l101:
  1293                           ;pompa.c: 348: else
  1294  00A730  C230  FFE8         	movff	_DtIN+6,wreg
  1295  00A734  C22E  F000         	movff	_DtIN+4,btemp
  1296  00A738  D013               	goto	L8
  1297                           ;pompa.c: 350: }
  1298  00A73A                     l100:
  1299                           ;pompa.c: 351: else
  1300  00A73A  0E50               	movlw	80
  1301  00A73C  0100               	movlb	__Lparam shr (0+8)
  1302  00A73E  6FDA               	movwf	(?a_ModPmp2+3)^(__Lparam& (0+65280)),b
  1303                           ;pompa.c: 354: if(DtIN.cDLT-DtIN.DIN2==2) tim=10
      +                          0;
  1304  00A740  C22E  FFE8         	movff	_DtIN+4,wreg
  1305  00A744  C230  F000         	movff	_DtIN+6,btemp
  1306  00A748  6A01               	clrf	btemp+1,c
  1307  00A74A  5E00               	subwf	btemp,f,c
  1308  00A74C  0E00               	movlw	0
  1309  00A74E  5A01               	subwfb	btemp+1,f,c
  1310  00A750  5000               	movf	btemp,w,c
  1311  00A752  0A02               	xorlw	2
  1312  00A754  1001               	iorwf	btemp+1,w,c
  1313  00A756  E0EA               	bz	u810
  1314                           ;pompa.c: 355: else
  1315  00A758  C22E  FFE8         	movff	_DtIN+4,wreg
  1316  00A75C  C230  F000         	movff	_DtIN+6,btemp
  1317  00A760                     L8:
  1318  00A760  6A01               	clrf	btemp+1,c
  1319  00A762  5E00               	subwf	btemp,f,c
  1320  00A764  0E00               	movlw	0
  1321  00A766  5A01               	subwfb	btemp+1,f,c
  1322  00A768  0400               	decf	btemp,w,c
  1323  00A76A  1001               	iorwf	btemp+1,w,c
  1324  00A76C  E103               	bnz	l104
  1325  00A76E  0E96               	movlw	150
  1326  00A770  0100               	movlb	__Lparam shr (0+8)
  1327  00A772                     L5:
  1328  00A772  6FDA               	movwf	(?a_ModPmp2+3)^(__Lparam& (0+65280)),b
  1329  00A774                     l104:
  1330                           ;pompa.c: 357: }
  1331  00A774  0100               	movlb	__Lparam shr (0+8)
  1332  00A776  6BD9               	clrf	(?a_ModPmp2+2)^(__Lparam& (0+65280)),b
  1333                           ;pompa.c: 361: pdw=0;
  1334  00A778  6BD8               	clrf	(?a_ModPmp2+1)^(__Lparam& (0+65280)),b
  1335                           ;pompa.c: 362: if((RTdS(8)>tim)||(ppwm<=PMP.MDPR
      +                          OC)||(ppwm>=PMP.MGPROC))
  1336  00A77A  0E08               	movlw	8
  1337  00A77C  EC98  F06E         	call	_RTdS
  1338  00A780  0100               	movlb	__Lparam shr (0+8)
  1339  00A782  61DA               	cpfslt	(?a_ModPmp2+3)^(__Lparam& (0+65280)),b
  1340  00A784  D001               	goto	u851
  1341  00A786  D00A               	goto	u880
  1342  00A788                     u851:
  1343  00A788  51DB               	movf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),w
  1344  00A78A  0100               	movlb	(_PMP+1) shr (0+8)
  1345  00A78C  5D6E               	subwf	(_PMP+1)& (0+255),w,b
  1346  00A78E  E206               	bc	u880
  1347  00A790  0100               	movlb	__Lparam shr (0+8)
  1348  00A792  C06D  FFE8         	movff	_PMP,wreg
  1349  00A796  5DDB               	subwf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),w
  1350  00A798  E201 D0E8          	bnc	l137
  1351  00A79C                     u880:
  1352                           ;pompa.c: 363: {
  1353  00A79C  0E08               	movlw	8
  1354  00A79E  EC86  F06E         	call	_StartRTdS
  1355                           ;pompa.c: 366: if(!pup)
  1356                           ;pompa.c: 367: if(rgl.tmp_pwm<=PWM.MINPWM)
  1357  00A7A2  C07E  FFE8         	movff	_rgl+9,wreg
  1358  00A7A6  0102               	movlb	(_PWM+32) shr (0+8)
  1359  00A7A8  5D8E               	subwf	(_PWM+32)& (0+255),w,b
  1360  00A7AA  E327               	bnc	l109
  1361                           ;pompa.c: 368: {
  1362  00A7AC  0E02               	movlw	2
  1363  00A7AE  EC5B  F036         	call	_Twyzsza
  1364  00A7B2  E204               	bc	u930
  1365  00A7B4  0E02               	movlw	2
  1366  00A7B6  EC4E  F036         	call	_Tnizsza
  1367  00A7BA  E31F               	bnc	l109
  1368  00A7BC                     u930:
  1369                           ;pompa.c: 370: {
  1370  00A7BC  C06D  FFE8         	movff	_PMP,wreg
  1371  00A7C0  0100               	movlb	__Lparam shr (0+8)
  1372  00A7C2  61DB               	cpfslt	(?a_ModPmp2+4)^(__Lparam& (0+65280)),b
  1373  00A7C4  D01A               	goto	l109
  1374                           ;pompa.c: 372: {
  1375  00A7C6  C06D  F000         	movff	_PMP,btemp
  1376  00A7CA  6A01               	clrf	btemp+1,c
  1377  00A7CC  0E01               	movlw	1
  1378  00A7CE  C0DB  F002         	movff	?a_ModPmp2+4,btemp+2
  1379  00A7D2  6A03               	clrf	btemp+3,c
  1380  00A7D4  2602               	addwf	btemp+2,f,c
  1381  00A7D6  0E00               	movlw	0
  1382  00A7D8  2203               	addwfc	btemp+3,f,c
  1383  00A7DA  5003               	movf	btemp+3,w,c
  1384  00A7DC  0A80               	xorlw	128
  1385  00A7DE  6E04               	movwf	btemp+4,c
  1386  00A7E0  5001               	movf	btemp+1,w,c
  1387  00A7E2  0A80               	xorlw	128
  1388  00A7E4  5C04               	subwf	btemp+4,w,c
  1389  00A7E6  E102               	bnz	u955
  1390  00A7E8  5000               	movf	btemp,w,c
  1391  00A7EA  5C02               	subwf	btemp+2,w,c
  1392  00A7EC                     u955:
  1393  00A7EC  E204               	bc	l113
  1394                           ;pompa.c: 374: {
  1395  00A7EE  2BDB               	incf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),f,b
  1396                           ;pompa.c: 376: pup=1;
  1397  00A7F0  0E01               	movlw	1
  1398  00A7F2  6FD9               	movwf	(?a_ModPmp2+2)^(__Lparam& (0+65280)),b
  1399                           ;pompa.c: 377: }
  1400  00A7F4  D002               	goto	l109
  1401  00A7F6                     l113:
  1402                           ;pompa.c: 378: else ppwm=PMP.MGPROC;
  1403  00A7F6  C06D  F0DB         	movff	_PMP,?a_ModPmp2+4
  1404  00A7FA                     l109:
  1405                           ;pompa.c: 379: }
  1406  00A7FA  C07E  FFE8         	movff	_rgl+9,wreg
  1407  00A7FE  0102               	movlb	(_PWM+32) shr (0+8)
  1408  00A800  618E               	cpfslt	(_PWM+32)& (0+255),b
  1409  00A802  D001               	goto	u961
  1410  00A804  D009               	goto	u1000
  1411  00A806                     u961:
  1412  00A806  C07E  FFE8         	movff	_rgl+9,wreg
  1413  00A80A  0102               	movlb	(_PWM+32) shr (0+8)
  1414  00A80C  5D8E               	subwf	(_PWM+32)& (0+255),w,b
  1415  00A80E  E34F               	bnc	l115
  1416  00A810  0E01               	movlw	1
  1417  00A812  EC5B  F036         	call	_Twyzsza
  1418  00A816  E24B               	bc	l115
  1419  00A818                     u1000:
  1420                           ;pompa.c: 384: {
  1421  00A818  C230  FFE8         	movff	_DtIN+6,wreg
  1422  00A81C  0102               	movlb	(_DtIN+3) shr (0+8)
  1423  00A81E  612D               	cpfslt	(_DtIN+3)& (0+255),b
  1424  00A820  D046               	goto	l115
  1425                           ;pompa.c: 386: {
  1426                           ;pompa.c: 388: if(ppwm>PMP.MDPROC)
  1427  00A822  0100               	movlb	__Lparam shr (0+8)
  1428  00A824  51DB               	movf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),w
  1429  00A826  0100               	movlb	(_PMP+1) shr (0+8)
  1430  00A828  616E               	cpfslt	(_PMP+1)& (0+255),b
  1431  00A82A  D01A               	goto	l117
  1432                           ;pompa.c: 389: {
  1433  00A82C  0100               	movlb	__Lparam shr (0+8)
  1434  00A82E  0FFE               	addlw	254
  1435  00A830  6E00               	movwf	btemp,c
  1436  00A832  6A01               	clrf	btemp+1,c
  1437  00A834  0EFF               	movlw	255
  1438  00A836  2201               	addwfc	btemp+1,f,c
  1439  00A838  C06E  F002         	movff	_PMP+1,btemp+2
  1440  00A83C  6A03               	clrf	btemp+3,c
  1441  00A83E  5003               	movf	btemp+3,w,c
  1442  00A840  0A80               	xorlw	128
  1443  00A842  6E04               	movwf	btemp+4,c
  1444  00A844  5001               	movf	btemp+1,w,c
  1445  00A846  0A80               	xorlw	128
  1446  00A848  5C04               	subwf	btemp+4,w,c
  1447  00A84A  E102               	bnz	u1035
  1448  00A84C  5000               	movf	btemp,w,c
  1449  00A84E  5C02               	subwf	btemp+2,w,c
  1450  00A850                     u1035:
  1451  00A850  E205               	bc	l119
  1452                           ;pompa.c: 391: {
  1453  00A852  0EFE               	movlw	254
  1454  00A854  27DB               	addwf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),f,b
  1455                           ;pompa.c: 393: pdw=1;
  1456  00A856  0E01               	movlw	1
  1457  00A858  6FD8               	movwf	(?a_ModPmp2+1)^(__Lparam& (0+65280)),b
  1458                           ;pompa.c: 394: }
  1459  00A85A  D002               	goto	l117
  1460  00A85C                     l119:
  1461                           ;pompa.c: 395: else ppwm=PMP.MDPROC;
  1462  00A85C  C06E  F0DB         	movff	_PMP+1,?a_ModPmp2+4
  1463  00A860                     l117:
  1464                           ;pompa.c: 396: }
  1465  00A860  0100               	movlb	__Lparam shr (0+8)
  1466  00A862  51D8               	movf	(?a_ModPmp2+1)^(__Lparam& (0+65280)),w
  1467  00A864  E124               	bnz	l115
  1468                           ;pompa.c: 398: if(DtIN.DIN<DtIN.DIN2)
  1469  00A866  C22E  FFE8         	movff	_DtIN+4,wreg
  1470  00A86A  0102               	movlb	(_DtIN+3) shr (0+8)
  1471  00A86C  612D               	cpfslt	(_DtIN+3)& (0+255),b
  1472  00A86E  D01F               	goto	l115
  1473                           ;pompa.c: 399: {
  1474  00A870  0100               	movlb	__Lparam shr (0+8)
  1475  00A872  51DB               	movf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),w
  1476  00A874  0100               	movlb	(_PMP+1) shr (0+8)
  1477  00A876  616E               	cpfslt	(_PMP+1)& (0+255),b
  1478  00A878  D01A               	goto	l115
  1479                           ;pompa.c: 401: {
  1480  00A87A  0100               	movlb	__Lparam shr (0+8)
  1481  00A87C  0FFE               	addlw	254
  1482  00A87E  6E00               	movwf	btemp,c
  1483  00A880  6A01               	clrf	btemp+1,c
  1484  00A882  0EFF               	movlw	255
  1485  00A884  2201               	addwfc	btemp+1,f,c
  1486  00A886  C06E  F002         	movff	_PMP+1,btemp+2
  1487  00A88A  6A03               	clrf	btemp+3,c
  1488  00A88C  5003               	movf	btemp+3,w,c
  1489  00A88E  0A80               	xorlw	128
  1490  00A890  6E04               	movwf	btemp+4,c
  1491  00A892  5001               	movf	btemp+1,w,c
  1492  00A894  0A80               	xorlw	128
  1493  00A896  5C04               	subwf	btemp+4,w,c
  1494  00A898  E102               	bnz	u1075
  1495  00A89A  5000               	movf	btemp,w,c
  1496  00A89C  5C02               	subwf	btemp+2,w,c
  1497  00A89E                     u1075:
  1498  00A89E  E205               	bc	l124
  1499                           ;pompa.c: 403: {
  1500  00A8A0  0EFE               	movlw	254
  1501  00A8A2  27DB               	addwf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),f,b
  1502                           ;pompa.c: 405: pdw=1;
  1503  00A8A4  0E01               	movlw	1
  1504  00A8A6  6ED9               	movwf	fsr2l,c
  1505                           ;pompa.c: 406: }
  1506  00A8A8  D002               	goto	l115
  1507  00A8AA                     l124:
  1508                           ;pompa.c: 407: else ppwm=PMP.MDPROC;
  1509  00A8AA  C06E  F0DB         	movff	_PMP+1,?a_ModPmp2+4
  1510  00A8AE                     l115:
  1511                           ;pompa.c: 408: }
  1512  00A8AE  C28F  FFE8         	movff	_PWM+33,wreg
  1513  00A8B2  0100               	movlb	(_rgl+9) shr (0+8)
  1514  00A8B4  617E               	cpfslt	(_rgl+9)& (0+255),b
  1515  00A8B6  D001               	goto	u1081
  1516  00A8B8  D009               	goto	u1120
  1517  00A8BA                     u1081:
  1518  00A8BA  C28F  FFE8         	movff	_PWM+33,wreg
  1519  00A8BE  0100               	movlb	(_rgl+9) shr (0+8)
  1520  00A8C0  5D7E               	subwf	(_rgl+9)& (0+255),w,b
  1521  00A8C2  E354               	bnc	l137
  1522  00A8C4  0E01               	movlw	1
  1523  00A8C6  EC4E  F036         	call	_Tnizsza
  1524  00A8CA  E250               	bc	l137
  1525  00A8CC                     u1120:
  1526                           ;pompa.c: 414: {
  1527  00A8CC  C22D  FFE8         	movff	_DtIN+3,wreg
  1528  00A8D0  0102               	movlb	(_DtIN+6) shr (0+8)
  1529  00A8D2  6130               	cpfslt	(_DtIN+6)& (0+255),b
  1530  00A8D4  D04B               	goto	l137
  1531                           ;pompa.c: 416: {
  1532  00A8D6  0100               	movlb	__Lparam shr (0+8)
  1533  00A8D8  51D9               	movf	(?a_ModPmp2+2)^(__Lparam& (0+65280)),w
  1534  00A8DA  E11E               	bnz	l128
  1535                           ;pompa.c: 418: if(ppwm<PMP.MGPROC)
  1536  00A8DC  C06D  FFE8         	movff	_PMP,wreg
  1537  00A8E0  61DB               	cpfslt	(?a_ModPmp2+4)^(__Lparam& (0+65280)),b
  1538  00A8E2  D01A               	goto	l128
  1539                           ;pompa.c: 419: {
  1540  00A8E4  C06D  F000         	movff	_PMP,btemp
  1541  00A8E8  6A01               	clrf	btemp+1,c
  1542  00A8EA  0E01               	movlw	1
  1543  00A8EC  C0DB  F002         	movff	?a_ModPmp2+4,btemp+2
  1544  00A8F0  6A03               	clrf	btemp+3,c
  1545  00A8F2  2602               	addwf	btemp+2,f,c
  1546  00A8F4  0E00               	movlw	0
  1547  00A8F6  2203               	addwfc	btemp+3,f,c
  1548  00A8F8  5003               	movf	btemp+3,w,c
  1549  00A8FA  0A80               	xorlw	128
  1550  00A8FC  6E04               	movwf	btemp+4,c
  1551  00A8FE  5001               	movf	btemp+1,w,c
  1552  00A900  0A80               	xorlw	128
  1553  00A902  5C04               	subwf	btemp+4,w,c
  1554  00A904  E102               	bnz	u1165
  1555  00A906  5000               	movf	btemp,w,c
  1556  00A908  5C02               	subwf	btemp+2,w,c
  1557  00A90A                     u1165:
  1558  00A90A  E204               	bc	l130
  1559                           ;pompa.c: 421: {
  1560  00A90C  2BDB               	incf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),f,b
  1561                           ;pompa.c: 423: pup=1;
  1562  00A90E  0E01               	movlw	1
  1563  00A910  6FD9               	movwf	(?a_ModPmp2+2)^(__Lparam& (0+65280)),b
  1564                           ;pompa.c: 424: }
  1565  00A912  D002               	goto	l128
  1566  00A914                     l130:
  1567                           ;pompa.c: 425: else ppwm=PMP.MGPROC;
  1568  00A914  C06D  F0DB         	movff	_PMP,?a_ModPmp2+4
  1569  00A918                     l128:
  1570                           ;pompa.c: 426: }
  1571  00A918  0100               	movlb	__Lparam shr (0+8)
  1572  00A91A  51D9               	movf	(?a_ModPmp2+2)^(__Lparam& (0+65280)),w
  1573  00A91C  E127               	bnz	l137
  1574                           ;pompa.c: 428: if(DtIN.DIN>DtIN.DIN2)
  1575  00A91E  C22D  FFE8         	movff	_DtIN+3,wreg
  1576  00A922  0102               	movlb	(_DtIN+4) shr (0+8)
  1577  00A924  612E               	cpfslt	(_DtIN+4)& (0+255),b
  1578  00A926  D022               	goto	l137
  1579                           ;pompa.c: 429: {
  1580  00A928  C06D  FFE8         	movff	_PMP,wreg
  1581  00A92C  0100               	movlb	__Lparam shr (0+8)
  1582  00A92E  61DB               	cpfslt	(?a_ModPmp2+4)^(__Lparam& (0+65280)),b
  1583  00A930  D01D               	goto	l137
  1584                           ;pompa.c: 431: {
  1585  00A932  C06D  F000         	movff	_PMP,btemp
  1586  00A936  6A01               	clrf	btemp+1,c
  1587  00A938  0E01               	movlw	1
  1588  00A93A  C0DB  F002         	movff	?a_ModPmp2+4,btemp+2
  1589  00A93E  6A03               	clrf	btemp+3,c
  1590  00A940  2602               	addwf	btemp+2,f,c
  1591  00A942  0E00               	movlw	0
  1592  00A944  2203               	addwfc	btemp+3,f,c
  1593  00A946  5003               	movf	btemp+3,w,c
  1594  00A948  0A80               	xorlw	128
  1595  00A94A  6E04               	movwf	btemp+4,c
  1596  00A94C  5001               	movf	btemp+1,w,c
  1597  00A94E  0A80               	xorlw	128
  1598  00A950  5C04               	subwf	btemp+4,w,c
  1599  00A952  E102               	bnz	u1205
  1600  00A954  5000               	movf	btemp,w,c
  1601  00A956  5C02               	subwf	btemp+2,w,c
  1602  00A958                     u1205:
  1603  00A958  E207               	bc	L9
  1604                           ;pompa.c: 433: {
  1605  00A95A  2BDB               	incf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),f,b
  1606                           ;pompa.c: 435: pup=1;
  1607  00A95C  0E01               	movlw	1
  1608  00A95E  6ED9               	movwf	fsr2l,c
  1609                           ;pompa.c: 436: }
  1610  00A960  D005               	goto	l137
  1611                           ;pompa.c: 437: else ppwm=PMP.MGPROC;
  1612                           ;pompa.c: 438: }
  1613  00A962                     l99:
  1614                           ;pompa.c: 445: else
  1615  00A962  0E08               	movlw	8
  1616  00A964  EC86  F06E         	call	_StartRTdS
  1617  00A968                     L9:
  1618                           ;pompa.c: 448: ppwm=PMP.MGPROC;
  1619  00A968  C06D  F0DB         	movff	_PMP,?a_ModPmp2+4
  1620  00A96C                     l137:
  1621                           ;pompa.c: 449: }
  1622  00A96C  0100               	movlb	__Lparam shr (0+8)
  1623  00A96E  51DB               	movf	(?a_ModPmp2+4)^(__Lparam& (0+65280)),w
  1624  00A970  0012               	return	
  1625                           ;pompa.c: 451: }
  1626  00A972                     __end_of_ModPmp2:
  1627                           ;pompa.c: 455: void RglPmp2(void)
  1628                           ;pompa.c: 456: {
  1629  00A972                     _RglPmp2:
  1630  000000                     
  1631                           ;pompa.c: 457: PMP.MGPROC=100;
  1632  00A972  0E64               	movlw	100
  1633  00A974  CFE8 F06D          	movff	wreg,_PMP
  1634                           ;pompa.c: 458: PMP.MDPROC=DtKNF.mdpm;
  1635  00A978  C08F  F06E         	movff	_DtKNF+11,_PMP+1
  1636                           ;pompa.c: 461: if(!M._PRACA)
  1637  00A97C  0101               	movlb	(_M+27) shr (0+8)
  1638  00A97E  B595               	btfsc	(_M+27)& (0+255),2,b
  1639  00A980  D012               	goto	l139
  1640                           ;pompa.c: 462: {
  1641  00A982  0102               	movlb	(_DtIN+19) shr (0+8)
  1642  00A984  6B3D               	clrf	(_DtIN+19)& (0+255),b
  1643                           ;pompa.c: 464: StartRTS(15);
  1644  00A986  0E0F               	movlw	15
  1645  00A988  ECA4  F06E         	call	_StartRTS
  1646                           ;pompa.c: 465: if(RD2)
  1647  00A98C  A483               	btfss	3971,2,c	;volatile
  1648  00A98E  D003               	goto	l140
  1649                           ;pompa.c: 466: {
  1650  00A990  C06D  F06F         	movff	_PMP,_PMP+2
  1651                           ;pompa.c: 468: }
  1652  00A994  D002               	goto	l141
  1653  00A996                     l140:
  1654                           ;pompa.c: 469: else
  1655  00A996  0100               	movlb	(_PMP+2) shr (0+8)
  1656  00A998  6B6F               	clrf	(_PMP+2)& (0+255),b
  1657  00A99A                     l141:
  1658                           ;pompa.c: 472: }
  1659  00A99A  C06F  FFE8         	movff	_PMP+2,wreg
  1660  00A99E  EC40  F050         	call	_ProcToPmpPwm
  1661  00A9A2  EF3F  F061         	goto	_WritePWM2
  1662                           ;pompa.c: 474: }
  1663  00A9A6                     l139:
  1664                           ;pompa.c: 475: else
  1665  00A9A6  0101               	movlb	(_M+17) shr (0+8)
  1666  00A9A8  AB8B               	btfss	(_M+17)& (0+255),5,b
  1667  00A9AA  D016               	goto	l143
  1668  00A9AC  0102               	movlb	_DtIN shr (0+8)
  1669  00A9AE  B12A               	btfsc	_DtIN& (0+255),0,b
  1670  00A9B0  D013               	goto	l143
  1671  00A9B2  0101               	movlb	(_M+27) shr (0+8)
  1672  00A9B4  BF95               	btfsc	(_M+27)& (0+255),7,b
  1673  00A9B6  D010               	goto	l143
  1674  00A9B8  0E0F               	movlw	15
  1675  00A9BA  ECB6  F06E         	call	_RTS
  1676  00A9BE  6E00               	movwf	btemp,c
  1677  00A9C0  0E0B               	movlw	11
  1678  00A9C2  5C00               	subwf	btemp,w,c
  1679  00A9C4  E309               	bnc	l143
  1680                           ;pompa.c: 478: {
  1681  00A9C6  0100               	movlb	_rgl shr (0+8)
  1682                           ;pompa.c: 480: {
  1683  00A9C8  C06F  FFE8         	movff	_PMP+2,wreg
  1684  00A9CC  A575               	btfss	_rgl& (0+255),2,b
  1685  00A9CE  D008               	goto	L10
  1686  00A9D0  DE51               	call	_ModPmp2
  1687  00A9D2  CFE8 F06F          	movff	wreg,_PMP+2
  1688                           ;pompa.c: 482: }
  1689  00A9D6  D002               	goto	l145
  1690  00A9D8                     l143:
  1691                           ;pompa.c: 484: else
  1692  00A9D8  C06D  F06F         	movff	_PMP,_PMP+2
  1693  00A9DC                     l145:
  1694                           ;pompa.c: 487: }
  1695  00A9DC  C06F  FFE8         	movff	_PMP+2,wreg
  1696  00A9E0                     L10:
  1697  00A9E0  EC40  F050         	call	_ProcToPmpPwm
  1698  00A9E4  EF3F  F061         	goto	_WritePWM2
  1699                           ;pompa.c: 489: }
  1700  00A9E8                     __end_of_RglPmp2:
  1701                           ;pompa.c: 492: void PmpToUP(void)
  1702                           ;pompa.c: 493: {
  1703  00A9E8                     _PmpToUP:
  1704  000000                     
  1705                           ;pompa.c: 494: static unsigned char tm;
  1706  00A9E8  EE00  F08D         	lfsr	0,_DtKNF+9
  1707  00A9EC  50EF               	movf	indf0,w,c
  1708  00A9EE  E020               	bz	l147
  1709                           ;pompa.c: 497: {
  1710  00A9F0  010F               	movlb	F1541 shr (0+8)
  1711  00A9F2  2B36               	incf	F1541& (0+255),f,b
  1712                           ;pompa.c: 499: if(tm>30)
  1713  00A9F4  0E1E               	movlw	30
  1714  00A9F6  6536               	cpfsgt	F1541& (0+255),b
  1715  00A9F8  0C1E               	retlw	30
  1716                           ;pompa.c: 500: {
  1717  00A9FA  6B36               	clrf	F1541& (0+255),b
  1718                           ;pompa.c: 502: if(PMP.APROC+1<PMP.MGPROC) PMP.AP
      +                          ROC=PMP.APROC+1;
  1719  00A9FC  C06D  F000         	movff	_PMP,btemp
  1720  00AA00  6A01               	clrf	btemp+1,c
  1721  00AA02  0E01               	movlw	1
  1722  00AA04  C06F  F002         	movff	_PMP+2,btemp+2
  1723  00AA08  6A03               	clrf	btemp+3,c
  1724  00AA0A  2602               	addwf	btemp+2,f,c
  1725  00AA0C  0E00               	movlw	0
  1726  00AA0E  2203               	addwfc	btemp+3,f,c
  1727  00AA10  5003               	movf	btemp+3,w,c
  1728  00AA12  0A80               	xorlw	128
  1729  00AA14  6E04               	movwf	btemp+4,c
  1730  00AA16  5001               	movf	btemp+1,w,c
  1731  00AA18  0A80               	xorlw	128
  1732  00AA1A  5C04               	subwf	btemp+4,w,c
  1733  00AA1C  E102               	bnz	u1335
  1734  00AA1E  5000               	movf	btemp,w,c
  1735  00AA20  5C02               	subwf	btemp+2,w,c
  1736  00AA22                     u1335:
  1737  00AA22  B0D8               	btfsc	status,0,c
  1738  00AA24  0012               	return	
  1739  00AA26  0100               	movlb	(_PMP+2) shr (0+8)
  1740  00AA28  296F               	incf	(_PMP+2)& (0+255),w,b
  1741  00AA2A  CFE8 F06F          	movff	wreg,_PMP+2
  1742                           ;pompa.c: 503: }
  1743  00AA2E  0012               	return	
  1744  00AA30                     l147:
  1745                           ;pompa.c: 505: else PMP.APROC=PMP.MGPROC;
  1746  00AA30  C06D  F06F         	movff	_PMP,_PMP+2
  1747                           ;pompa.c: 506: }
  1748  00AA34  0012               	return	
  1749  00AA36                     __end_of_PmpToUP:
  1750                           ;pompa.c: 508: void PmpToDW(void)
  1751                           ;pompa.c: 509: {
  1752  00AA36                     _PmpToDW:
  1753  000000                     
  1754                           ;pompa.c: 510: static unsigned char tm;
  1755  00AA36  EE00  F08D         	lfsr	0,_DtKNF+9
  1756  00AA3A  50EF               	movf	indf0,w,c
  1757  00AA3C  E01C               	bz	l152
  1758                           ;pompa.c: 513: {
  1759  00AA3E  010F               	movlb	F1544 shr (0+8)
  1760  00AA40  0E01               	movlw	1
  1761  00AA42  2B37               	incf	F1544& (0+255),f,b
  1762                           ;pompa.c: 515: if(tm>0)
  1763  00AA44  5337               	movf	F1544& (0+255),f,b
  1764  00AA46  B4D8               	btfsc	status,2,c
  1765  00AA48  0C01               	retlw	1
  1766                           ;pompa.c: 516: {
  1767  00AA4A  6B37               	clrf	F1544& (0+255),b
  1768                           ;pompa.c: 518: if(PMP.APROC-1>50) PMP.APROC=PMP.
      +                          APROC-1;
  1769  00AA4C  C06F  F000         	movff	_PMP+2,btemp
  1770  00AA50  0EFF               	movlw	255
  1771  00AA52  2400               	addwf	btemp,w,c
  1772  00AA54  6E02               	movwf	btemp+2,c
  1773  00AA56  6A03               	clrf	btemp+3,c
  1774  00AA58  0EFF               	movlw	255
  1775  00AA5A  2203               	addwfc	btemp+3,f,c
  1776  00AA5C  5003               	movf	btemp+3,w,c
  1777  00AA5E  0A80               	xorlw	128
  1778  00AA60  0F80               	addlw	-128
  1779  00AA62  0E33               	movlw	51
  1780  00AA64  B4D8               	btfsc	status,2,c
  1781  00AA66  5C02               	subwf	btemp+2,w,c
  1782  00AA68  A0D8               	btfss	status,0,c
  1783  00AA6A  0012               	return	
  1784  00AA6C  0100               	movlb	(_PMP+2) shr (0+8)
  1785  00AA6E  056F               	decf	(_PMP+2)& (0+255),w,b
  1786  00AA70  CFE8 F06F          	movff	wreg,_PMP+2
  1787                           ;pompa.c: 519: }
  1788  00AA74  0012               	return	
  1789  00AA76                     l152:
  1790                           ;pompa.c: 521: else PMP.APROC=PMP.MGPROC;
  1791  00AA76  C06D  F06F         	movff	_PMP,_PMP+2
  1792                           ;pompa.c: 522: }
  1793  00AA7A  0012               	return	
  1794  00AA7C                     __end_of_PmpToDW:
  1795                           ;pompa.c: 527: void RglPmp(void)
  1796                           ;pompa.c: 528: {
  1797  00AA7C                     _RglPmp:
  1798  000000                     
  1799                           ;pompa.c: 529: if(DtKNF.rdpm)
  1800  00AA7C  EE00  F08D         	lfsr	0,_DtKNF+9
  1801  00AA80  50EF               	movf	indf0,w,c
  1802  00AA82  E006               	bz	l157
  1803                           ;pompa.c: 530: {
  1804  00AA84  EE00  F090         	lfsr	0,_DtKNF+12
  1805  00AA88  50EF               	movf	indf0,w,c
  1806  00AA8A  E101               	bnz	l158
  1807                           ;pompa.c: 532: {
  1808  00AA8C  D466               	goto	_RglPmp1	;wreg free
  1809                           ;pompa.c: 534: }
  1810  00AA8E                     l158:
  1811                           ;pompa.c: 535: else
  1812  00AA8E  D771               	goto	_RglPmp2	;wreg free
  1813                           ;pompa.c: 538: }
  1814  00AA90                     l157:
  1815                           ;pompa.c: 540: else
  1816  00AA90  0101               	movlb	(_M+27) shr (0+8)
  1817                           ;pompa.c: 543: {
  1818  00AA92  0E0F               	movlw	15
  1819  00AA94  B595               	btfsc	(_M+27)& (0+255),2,b
  1820  00AA96  D008               	goto	L11
  1821  00AA98  ECA4  F06E         	call	_StartRTS
  1822                           ;pompa.c: 545: if(RD2)
  1823  00AA9C  B483               	btfsc	3971,2,c	;volatile
  1824  00AA9E  D003               	goto	l161
  1825                           ;pompa.c: 546: {
  1826                           ;pompa.c: 548: }
  1827                           ;pompa.c: 549: else
  1828  00AAA0  0100               	movlb	(_PMP+2) shr (0+8)
  1829  00AAA2  6B6F               	clrf	(_PMP+2)& (0+255),b
  1830                           ;pompa.c: 552: }
  1831  00AAA4  D003               	goto	l164
  1832  00AAA6                     l161:
  1833                           ;pompa.c: 554: else
  1834  00AAA6  0E0F               	movlw	15
  1835  00AAA8                     L11:
  1836  00AAA8  CFE8 F06F          	movff	wreg,_PMP+2
  1837  00AAAC                     l164:
  1838                           ;pompa.c: 557: }
  1839  00AAAC  C06F  FFE8         	movff	_PMP+2,wreg
  1840  00AAB0  EC40  F050         	call	_ProcToPmpPwm
  1841  00AAB4  EF3F  F061         	goto	_WritePWM2
  1842                           ;pompa.c: 559: }
  1843  00AAB8                     __end_of_RglPmp:
  1844  000000                     
  1845  000000                     
  1846  000000                     
  1847  000000                     
  1848  000000                     
  1849  000000                     
  1850  000000                     
  1851  000000                     
  1852  000000                     
  1853  000000                     
  1854  000000                     
  1855  000000                     
  1856  000000                     
  1857  000000                     
  1858  000000                     
  1859  000000                     
  1860  000000                     
  1861  000000                     
  1862  000000                     
  1863  000000                     
  1864  000000                     
  1865  000000                     
  1866  000000                     
  1867  000000                     
  1868  000000                     
  1869  000000                     
  1870  000000                     
  1871  000000                     
  1872  000000                     
  1873  000000                     
  1874  000000                     
  1875  000000                     
  1876  000000                     
  1877  000000                     
  1878  000000                     
  1879  000000                     
  1880  000000                     
  1881  000000                     
  1882  000000                     
  1883  000000                     
  1884  000000                     
  1885  000000                     
  1886  000000                     
  1887  000000                     
  1888  000000                     
  1889  000000                     
  1890  000000                     
  1891  000000                     
  1892  000000                     
  1893  000000                     
  1894  000000                     
  1895  000000                     
  1896  000000                     
  1897  000000                     
  1898  000000                     
  1899  000000                     
  1900  000000                     
  1901  000000                     
  1902  000000                     
  1903  000000                     
  1904  000000                     
  1905  000000                     
  1906  000000                     
  1907  000000                     
  1908  000000                     
  1909  000000                     
  1910  000000                     
  1911  000000                     
  1912  000000                     
  1913  000000                     
  1914  000000                     
  1915  000000                     
  1916  000000                     
  1917  000000                     
  1918  000000                     
  1919  000000                     
  1920  000000                     
  1921  000000                     
  1922  000000                     
  1923  000000                     
  1924  000000                     
  1925  000000                     
  1926  000000                     
  1927  000000                     
  1928  000000                     
  1929  000000                     
  1930  000000                     
  1931  000000                     
  1932  000000                     
  1933  000000                     
  1934  000000                     
  1935  000000                     
  1936  000000                     
  1937  000000                     
  1938  000000                     
  1939  000000                     
  1940  000000                     
  1941  000000                     
  1942  000000                     
  1943  000000                     
  1944  000000                     
  1945  000000                     
  1946  000000                     
  1947  000000                     
  1948  000000                     
  1949  000000                     
  1950  000000                     
  1951  000000                     
  1952  000000                     
  1953  000000                     
  1954  000000                     
  1955  000000                     
  1956  000000                     
  1957  000000                     
  1958  000000                     
  1959  000000                     
  1960  000000                     
  1961  000000                     
  1962  000000                     
  1963  000000                     
  1964  000000                     
  1965  000000                     
  1966  000000                     
  1967  000000                     
  1968  000000                     
  1969  000000                     
  1970  000000                     
  1971  000000                     
  1972  000000                     
  1973  000000                     
  1974  000000                     
  1975  000000                     
  1976  000000                     
  1977  000000                     
  1978  000000                     
  1979  000000                     
  1980  000000                     
  1981  000000                     
  1982  000000                     
  1983  000000                     
  1984  000000                     
  1985  000000                     
  1986  000000                     
  1987  000000                     
  1988  000000                     
  1989  000000                     
  1990  000000                     
  1991  000000                     
  1992  000000                     
  1993  000000                     
  1994  000000                     
  1995  000000                     
  1996  000000                     
  1997  000000                     
  1998  000000                     
  1999  000000                     
  2000  000000                     
  2001  000000                     
  2002  000000                     
  2003  000000                     
  2004  000000                     
  2005  000000                     
  2006  000000                     
  2007  000000                     
  2008  000000                     
  2009  000000                     
  2010  000000                     
  2011  000000                     
  2012  000000                     
  2013  000000                     
  2014  000000                     
  2015  000000                     
  2016  000000                     
  2017  000000                     
  2018  000000                     
  2019  000000                     
  2020  000000                     
  2021  000000                     
  2022  000000                     
  2023  000000                     
  2024  000000                     
  2025  000000                     
  2026  000000                     
  2027  000000                     
  2028  000000                     
  2029  000000                     
  2030  000000                     
  2031  000000                     
  2032  000000                     
  2033  000000                     
  2034  000000                     
  2035  000000                     
  2036  000000                     
  2037  000000                     
  2038  000000                     
  2039  000000                     
  2040  000000                     
  2041  000000                     
  2042  000000                     
  2043  000000                     
  2044  000000                     
  2045  000000                     
  2046  000000                     
  2047  000000                     
  2048  000000                     
  2049  000000                     
  2050  000000                     
  2051  000000                     
  2052  000000                     
  2053  000000                     
  2054  000000                     
  2055  000000                     
  2056  000000                     
  2057  000000                     
  2058  000000                     
  2059  000000                     
  2060  000000                     
  2061  000000                     
  2062  000000                     
  2063  000000                     
  2064  000000                     
  2065  000000                     
  2066  000000                     
  2067  000000                     
  2068  000000                     
  2069  000000                     
  2070  000000                     
  2071  000000                     
  2072  000000                     
  2073  000000                     
  2074  000000                     
  2075  000000                     
  2076  000000                     
  2077  000000                     
  2078  000000                     
  2079  000000                     
  2080  000000                     
  2081  000000                     
  2082  000000                     
  2083  000000                     
  2084  000000                     
  2085  000000                     
  2086  000000                     
  2087  000000                     
  2088  000000                     
  2089  000000                     
  2090  000000                     
  2091  000000                     
  2092  000000                     
  2093  000000                     
  2094  000000                     
  2095  000000                     
  2096  000000                     
  2097  000000                     
  2098  000000                     
  2099  000000                     
  2100  000000                     
  2101  000000                     
  2102  000000                     
  2103  000000                     
  2104  000000                     
  2105  000000                     
  2106  000000                     
  2107  000000                     
  2108  000000                     
  2109  000000                     
  2110  000000                     
  2111  000000                     
  2112  000000                     
  2113  000000                     
  2114  000000                     
  2115  000000                     
  2116  000000                     
  2117  000000                     
  2118  000000                     
  2119  000000                     
  2120  000000                     
  2121  000000                     
  2122  000000                     
  2123  000000                     
  2124  000000                     
  2125  000000                     
  2126  000000                     
  2127  000000                     
  2128  000000                     
  2129  000000                     
  2130  000000                     
  2131  000000                     
  2132  000000                     
  2133  000000                     
  2134  000000                     
  2135  000000                     
  2136  000000                     
  2137  000000                     
  2138  000000                     
  2139  000000                     
  2140  000000                     
  2141  000000                     
  2142  000000                     
  2143  000000                     
  2144  000000                     
  2145  000000                     
  2146  000000                     
  2147  000000                     
  2148  000000                     
  2149  000000                     
  2150  000000                     
  2151  000000                     
  2152  000000                     
  2153  000000                     
  2154  000000                     
  2155  000000                     
  2156  000000                     
  2157  000000                     
  2158  000000                     
  2159  000000                     
  2160  000000                     
  2161  000000                     
  2162  000000                     
  2163  000000                     
  2164  000000                     
  2165  000000                     
  2166  000000                     
  2167  000000                     
  2168  000000                     
  2169  000000                     
  2170  000000                     
  2171  000000                     
  2172  000000                     
  2173  000000                     
  2174  000000                     
  2175  000000                     
  2176  000000                     
  2177  000000                     
  2178  000000                     
  2179  000000                     
  2180  000000                     
  2181  000000                     
  2182  000000                     
  2183  000000                     
  2184  000000                     
  2185  000000                     
  2186  000000                     
  2187  000000                     
  2188  000000                     
  2189  000000                     
  2190  000000                     
  2191  000000                     
  2192  000000                     
  2193  000000                     
  2194  000000                     
  2195  000000                     
  2196  000000                     
  2197  000000                     
  2198  000000                     
  2199  000000                     
  2200  000000                     
  2201  000000                     
  2202  000000                     
  2203  000000                     
  2204  000000                     
  2205  000000                     
  2206  000000                     
  2207  000000                     
  2208  000000                     
  2209  000000                     
  2210  000000                     
  2211  000000                     
  2212  000000                     
  2213  000000                     
  2214  000000                     
  2215  000000                     
  2216  000000                     
  2217  000000                     
  2218  000000                     
  2219  000000                     
  2220  000000                     
  2221  000000                     
  2222  000000                     
  2223  000000                     
  2224  000000                     
  2225  000000                     
  2226  000000                     
  2227  000000                     
  2228  000000                     
  2229  000000                     
  2230  000000                     
  2231  000000                     
  2232  000000                     
  2233  000000                     
  2234  000000                     
  2235  000000                     
  2236  000000                     
  2237  000000                     
  2238  000000                     
  2239  000000                     
  2240  000000                     
  2241  000000                     
  2242  000000                     
  2243  000000                     
  2244  000000                     
  2245  000000                     
  2246  000000                     
  2247  000000                     
  2248  000000                     
  2249  000000                     
  2250  000000                     
  2251  000000                     
  2252  000000                     
  2253  000000                     
  2254  000000                     
  2255  000000                     
  2256  000000                     
  2257  000000                     
  2258  000000                     
  2259  000000                     
  2260  000000                     
  2261  000000                     
  2262  000000                     
  2263  000000                     
  2264  000000                     
  2265  000000                     
  2266  000000                     
  2267  000000                     
  2268  000000                     
  2269  000000                     
  2270  000000                     
  2271  000000                     
  2272  000000                     
  2273  000000                     
  2274  000000                     
  2275  000000                     
  2276  000000                     
  2277  000000                     
  2278  000000                     
  2279  000000                     
  2280                           
  2281                           	psect	bigbss
  2282  000F36                     F1541:
  2283  000F36                     	ds	1
  2284  000F36                     F1544:
  2285  000F36                     	ds	1
  2286  000000                     
  2287  000000                     
  2288  000000                     
  2289  000000                     
  2290  000000                     
  2291  000000                     
  2292  000000                     
  2293  000000                     
  2294  000000                     
  2295  000000                     
  2296  000000                     
  2297  000000                     
  2298  000000                     
  2299  000000                     
  2300  000000                     
  2301  000000                     
  2302  000000                     
  2303  000000                     
  2304  000000                     
  2305  000000                     
  2306  000000                     
  2307  000000                     
  2308  000000                     
  2309  000000                     
  2310  000000                     
  2311  000000                     
  2312  000000                     
  2313  000000                     
  2314  000000                     
  2315  000000                     
  2316  000000                     
  2317  000000                     
  2318  000000                     
  2319  000000                     
  2320  000000                     
  2321  000000                     
  2322  000000                     
  2323  000000                     
  2324  000000                     
  2325  000000                     
  2326  000000                     
  2327  000000                     
  2328  000000                     
  2329  000000                     
  2330  000000                     
  2331  000000                     
  2332  000000                     
  2333  000000                     
  2334  000000                     
  2335  000000                     
  2336  000000                     
  2337  000000                     
  2338  000000                     
  2339  000000                     
  2340  000000                     
  2341  000000                     
  2342  000000                     
  2343  000000                     
  2344  000000                     
  2345  000000                     
  2346  000000                     
  2347  000000                     
  2348  000000                     
  2349  000000                     
  2350  000000                     
  2351  000000                     
  2352  000000                     
  2353  000000                     
  2354  000000                     
  2355  000000                     
  2356  000000                     
  2357  000000                     
  2358  000000                     
  2359  000000                     
  2360  000000                     
  2361  000000                     
  2362  000000                     
  2363  000000                     
  2364  000000                     
  2365  000000                     
  2366  000000                     
  2367  000000                     
  2368  000000                     
  2369  000000                     
  2370  000000                     
  2371  000000                     
  2372  000000                     
  2373  000000                     
  2374  000000                     
  2375  000000                     
  2376  000000                     
  2377  000000                     
  2378  000000                     
  2379  000000                     
  2380  000000                     
  2381  000000                     
  2382  000000                     
  2383  000000                     
  2384  000000                     
  2385  000000                     
  2386  000000                     
  2387  000000                     
  2388  000000                     
  2389  000000                     
  2390  000000                     
  2391  000000                     
  2392  000000                     
  2393  000000                     
  2394  000000                     
  2395  000000                     
  2396  000000                     
  2397  000000                     
  2398  000000                     
  2399  000000                     
  2400  000000                     
  2401  000000                     
  2402  000000                     
  2403  000000                     
  2404  000000                     
  2405  000000                     
  2406  000000                     
  2407  000000                     
  2408  000000                     
  2409  000000                     
  2410  000000                     
  2411  000000                     
  2412  000000                     
  2413  000000                     
  2414  000000                     
  2415  000000                     
  2416  000000                     
  2417  000000                     
  2418                           
  2419                           	psect	bss
  2420  00006D                     _PMP:
  2421  00006D                     	ds	3
  2422                           
  2423                           	psect	temp
  2424  000000                     btemp:
  2425  000000                     	ds	6
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           prodh	equ	0xFF4
  2429                           prodl	equ	0xFF3
  2430                           indf0	equ	0xFEF
  2431                           fsr0l	equ	0xFE9
  2432                           wreg	equ	0xFE8
  2433                           fsr1l	equ	0xFE1
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Wed Mar 20 08:54:41 2013

       ?a_RetKrkDelta 00DF                     _M 017A  
                  l21 A15C                    l30 A1DE  
                  l22 A140                    l14 A08A  
                  l32 A296                    l16 A34A  
                  l41 A292                    l17 A11E  
                  l34 A248                    l26 A1E2  
                  l18 A104                    l60 A3BC  
                  l36 A244                    l61 A3C0  
                  l45 A300                    l54 A354  
                  l71 A492                    l63 A3E2  
                  l47 A2FC                    l56 A390  
                  l65 A400                    l57 A382  
                  l90 A600                    l74 A4AA  
                  l58 A386                    l91 A612  
                  l75 A4AE                    l67 A416  
                  l84 A5AC                    l76 A510  
                  l93 A672                    l69 A47E  
                  l86 A5BC                    l78 A524  
                  l96 A6CC                    l97 A6D4  
                  l89 A5F4                    l98 A6E8  
                  l99 A962                    u40 A0D8  
           ?a_ModPmp1 00D7             ?a_ModPmp2 00D7  
            _StartRTS DD48                   l100 A73A  
                 l101 A730                   l104 A774  
                 l113 A7F6                   l130 A914  
                 l115 A8AE                   l140 A996  
                 l124 A8AA                   l141 A99A  
                 l117 A860                   l109 A7FA  
                 l143 A9D8                   l119 A85C  
                 l152 AA76                   l128 A918  
                 l161 AAA6                   l145 A9DC  
                 l137 A96C                   l147 AA30  
                 l139 A9A6                   l164 AAAC  
                 l157 AA90                   l158 AA8E  
                 u101 A170                   u130 A184  
                 u211 A1EE                   u205 A1D4  
                 u250 A200                   u331 A2A2  
                 u180 A1A4                   u325 A286  
                 u415 A2F2                   u370 A2B4  
                 u285 A238                   u630 A4E8  
                 u455 A340                   u810 A72C  
                 u580 A456                   u645 A50A  
                 u930 A7BC                   _PMP 006D  
                 u851 A788                   u595 A478  
                 u790 A700                   u880 A79C  
                 u961 A806                   u955 A7EC  
                 _PWM 026E                   _RTS DD6C  
                 _rgl 0075                   wreg 000FE8  
           _StartRTdS DD0C            ?a_RetDelta 00DD  
                F1541 0F36                  F1544 0F37  
                u1000 A818                  u1120 A8CC  
                u1035 A850                  u1205 A958  
                u1081 A8BA                  u1075 A89E  
                u1165 A90A                  u1335 AA22  
           _WritePWM2 C27E                  _DtCO 020C  
                _DtIN 022A                  _RTdS DD30  
                indf0 000FEF                  fsr0l 000FE9  
                fsr1l 000FE1                  fsr2l 000FD9  
                btemp 0000                  awdiv E598  
                awmul E606                  lwdiv E464  
                prodh 000FF4                  prodl 000FF3  
                lwmul E606       __end_of_ModPmp1 A35A  
     __end_of_ModPmp2 A972       __end_of_RglPmp1 A3CA  
     __end_of_RglPmp2 A9E8       __end_of_PmpToDW AA7C  
             ?_RetMax 00E8               ?_RetMin 00E7  
     __end_of_PmpToUP AA36         __end_of_RetHI A498  
       __end_of_RetLO A52A                 _DtKNF 0084  
               _RetHI A408                 _RetLO A49A  
          used_btemp0 0001            used_btemp1 0001  
          used_btemp2 0001            used_btemp3 0001  
          used_btemp4 0001            used_btemp5 0001  
               status 000FD8          _ProcToPmpPwm A080  
             _ModPmp1 A0C2               _ModPmp2 A674  
    __end_of_RetDelta A674               _RglPmp1 A35A  
             _RglPmp2 A972               _PmpToDW AA36  
             _PmpToUP A9E8               __Lparam 00D7  
__end_of_ProcToPmpPwm A0C2               _Tnizsza 6C9C  
             _Twyzsza 6CB6               __ramtop 1000  
              ?_RetHI 00E7        __end_of_RglPmp AAB8  
      __end_of_RetMax A406        __end_of_RetMin A3E8  
              ?_RetLO 00E7                _RglPmp AA7C  
              _RetMax A3EA                _RetMin A3CC  
              tblptrl 000FF6           _RetKrkDelta A5AE  
 __end_of_RetKrkDelta A642             _RetDelta1 A52C  
           _RetDelta2 A538             _RetDelta3 A552  
           _RetDelta4 A55E     __end_of_RetDelta1 A536  
   __end_of_RetDelta2 A550     __end_of_RetDelta3 A55C  
   __end_of_RetDelta4 A5AE              _RetDelta A644  
          ?_RetDelta1 00E7            ?_RetDelta2 00E7  
          ?_RetDelta3 00E7            ?_RetDelta4 00E4  
           ?_RetDelta 00DC  
