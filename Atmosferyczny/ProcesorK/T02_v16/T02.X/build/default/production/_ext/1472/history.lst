

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:44:54 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     	;#
    97                           
    98                           	psect	text
    99                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   146                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   167                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   168                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   169                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   170                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   171                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   172                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   173                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   174                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   175                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   176                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   177                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   178                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   179                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   180                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   181                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   182                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   183                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   184                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   185                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   186                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   187                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   188                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   189                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   190                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   191                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   192                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   193                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   194                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   195                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   196                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   197                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   198                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   199  000000                     	;#
   200                           ;	_i assigned to ?a_AddSTPoz+1
   201  000000                     _AddSTPoz$i	set	?a_AddSTPoz+1
   202                           ;	_j assigned to ?a_AddSTPoz+0
   203  000000                     _AddSTPoz$j	set	?a_AddSTPoz
   204                           ;	_hp assigned to ?a_RefBHist+3
   205  000000                     _RefBHist$hp	set	?a_RefBHist+3
   206                           ;	_e assigned to ?a_RefBHist+2
   207  000000                     _RefBHist$e	set	?a_RefBHist+2
   208                           ;	_s_hp assigned to ?a_RefBHist+1
   209  000000                     _RefBHist$s_hp	set	?a_RefBHist+1
   210                           ;	_res assigned to ?a_RefBHist+0
   211  000000                     _RefBHist$res	set	?a_RefBHist
   212                           ;	_i assigned to ?a_AddHPoz+2
   213  000000                     _AddHPoz$i	set	?a_AddHPoz+2
   214                           ;	_d assigned to ?a_AddHPoz+1
   215  000000                     _AddHPoz$d	set	?a_AddHPoz+1
   216                           ;main.h: 36: asm("\tglobal __config" "2"); asm("
      +                          \t__config" "2" " equ " "0xFFFF&0xFFFF&0xFFEF&0x
      +                          FFFF&0xEFFF");
   217  000000                     	;#
   218                           ;main.h: 38: asm("\tglobal __config" "3"); asm("
      +                          \t__config" "3" " equ " "0xFFFF&0x7FFF&0xFDFF");
   219  000000                     	;#
   220                           ;main.h: 39: asm("\tglobal __config" "4"); asm("
      +                          \t__config" "4" " equ " "0xFFFF&0xFFFF&0xFFFB&0x
      +                          FFFF");
   221  000000                     	;#
   222                           ;main.h: 42: asm("\tglobal __config" "5"); asm("
      +                          \t__config" "5" " equ " "0xFFF0");
   223  000000                     	;#
   224                           ;main.h: 43: asm("\tglobal __config" "6"); asm("
      +                          \t__config" "6" " equ " "0xFFF0&0xDFFF");
   225  000000                     	;#
   226                           ;main.h: 130: extern void GoldenEye(void);
   227                           ;main.h: 133: void InitGlobal(void);
   228                           ;main.h: 134: void ErrDTF(void);
   229                           ;main.h: 135: void ErrPTG(void);
   230                           ;main.h: 136: void ToReset(void);
   231                           ;main.h: 137: void DecWSW(void);
   232                           ;main.h: 138: void DecERR(void);
   233                           ;main.h: 139: void DecSTR(void);
   234                           ;main.h: 140: void DecRozruch(void);
   235                           ;main.h: 141: void SetRozruch(void);
   236                           ;main.h: 142: void DecWylacz(void);
   237                           ;main.h: 143: void SetWylacz(void);
   238                           ;main.h: 144: void RuszPlomien(void);
   239                           ;main.h: 145: void ReloadPlomien(void);
   240                           ;main.h: 146: void RuszCiag(void);
   241                           ;main.h: 147: void ReloadCiag(void);
   242                           ;main.h: 148: void Proba48(void);
   243                           ;main.h: 149: void Rusz48(void);
   244                           ;main.h: 150: void Proba48Z3(void);
   245                           ;main.h: 151: void Rusz48Z3(void);
   246                           ;main.h: 152: void Rozruch(void);
   247                           ;main.h: 153: void DecyzjaPLM(void);
   248                           ;main.h: 154: void DecyzjaPLM2(void);
   249                           ;main.h: 155: void VWybieg(void);
   250                           ;main.h: 156: void ZmienKCOKCW(void);
   251                           ;main.h: 157: void FunkcjaSerwisowa(void);
   252                           ;main.h: 158: void KolejkaPobudzen(void);
   253                           ;main.h: 159: void BlokadaL3(void);
   254                           ;main.h: 160: void Blokada15S(void);
   255                           ;main.h: 161: void ToObiegCW(void);
   256                           ;main.h: 162: void ToObiegCO(void);
   257                           ;main.h: 163: void Wylacz(void);
   258                           ;main.h: 164: void RuszPWR(void);
   259                           ;main.h: 165: void ClearData(void);
   260                           ;main.h: 166: void SetLoMod(void);
   261                           ;main.h: 167: void RestartFltPrt(void);
   262                           ;main.h: 168: void ClearDiode(void);
   263                           ;main.h: 169: void DecyzjaAntyLeg(void);
   264                           ;main.h: 170: void DetekcjaPrzeplywuWG(void);
   265                           ;main.h: 171: void OczekujNaPrzeplywWG(void);
   266                           ;main.h: 172: void RefLCDData(void);
   267                           ;main.h: 173: void GrzejON(void);
   268                           ;main.h: 174: void GrzejOFF(void);
   269                           ;main.h: 176: extern void InitOsc(void);
   270                           ;main.h: 178: extern void InitAC(void);
   271                           ;main.h: 180: extern void InitWsw(void);
   272                           ;main.h: 181: extern bit GetPoz(const unsigned c
      +                          har nrkol,const unsigned char nrpoz);
   273                           ;main.h: 183: extern void InitPWM(void);
   274                           ;main.h: 184: extern void WritePWM(const unsigne
      +                          d char tpwm);
   275                           ;main.h: 185: extern void WriteOPWM(unsigned cha
      +                          r tpwm);
   276                           ;main.h: 186: extern void WritePWM2(const unsign
      +                          ed char tpwm);
   277                           ;main.h: 187: extern unsigned char ModToProc(uns
      +                          igned char wrt);
   278                           ;main.h: 189: extern void ClsScr(void);
   279                           ;main.h: 190: extern void EndClsScr(void);
   280                           ;main.h: 191: extern void TestScr(void);
   281                           ;main.h: 192: extern void EndTestScr(void);
   282                           ;main.h: 193: extern void ClsScr(void);
   283                           ;main.h: 194: extern void EndClsScr(void);
   284                           ;main.h: 195: extern void PrintErr(const unsigne
      +                          d char kod, const unsigned char pls);
   285                           ;main.h: 196: extern void PrintErrCs(const unsig
      +                          ned char kod,const unsigned char cs, const unsig
      +                          ned char pls);
   286                           ;main.h: 197: extern void PrintErrTm(const unsig
      +                          ned char kod,const unsigned char tm, const unsig
      +                          ned char pls);
   287                           ;main.h: 198: extern void EndErr(void);
   288                           ;main.h: 199: extern void PrintPR(const unsigned
      +                           char lkod,unsigned char nkod,unsigned char tryb
      +                          );
   289                           ;main.h: 200: extern void EndPR(void);
   290                           ;main.h: 201: extern void PrintNstCO(const unsig
      +                          ned char nst);
   291                           ;main.h: 202: extern void PrintNstCW(const unsig
      +                          ned char nst);
   292                           ;main.h: 203: extern void PrintNstKt(const unsig
      +                          ned char nst);
   293                           ;main.h: 204: extern void EndNst(void);
   294                           ;main.h: 205: extern void PrintL3(void);
   295                           ;main.h: 206: extern void EndL3(void);
   296                           ;main.h: 207: extern void PrintTdzCO(const unsig
      +                          ned char tm);
   297                           ;main.h: 208: extern void EndTdzCO(void);
   298                           ;main.h: 209: extern void PrintTdzCW(const unsig
      +                          ned char tm);
   299                           ;main.h: 210: extern void EndTdzCW(void);
   300                           ;main.h: 211: extern void PrintOFF(void);
   301                           ;main.h: 212: extern void EndOFF(void);
   302                           ;main.h: 213: extern void PrintCS(const unsigned
      +                           char cs);
   303                           ;main.h: 214: extern void EndCS(void);
   304                           ;main.h: 215: extern void PrintCW(const unsigned
      +                           char tm);
   305                           ;main.h: 216: extern void EndCW(void);
   306                           ;main.h: 217: extern void PrintCO(const unsigned
      +                           char tm);
   307                           ;main.h: 218: extern void PrintHex(const unsigne
      +                          d char tm);
   308                           ;main.h: 219: extern void SetDiode(unsigned char
      +                           nrd, unsigned char stn);
   309                           ;main.h: 220: extern void RefreshNst(const unsig
      +                          ned char nst);
   310                           ;main.h: 222: extern bit GetBit(const unsigned c
      +                          har data,const unsigned char nbit);
   311                           ;main.h: 223: extern void BitSet(unsigned char *
      +                          data, const unsigned char nbit,const unsigned ch
      +                          ar bt);
   312                           ;main.h: 224: extern void BitSet2(unsigned char 
      +                          *data, const unsigned char nbit,const unsigned c
      +                          har bt);
   313                           ;main.h: 226: extern void StartRTG(const unsigne
      +                          d char Index);
   314                           ;main.h: 227: extern unsigned char RTG(const uns
      +                          igned char Index);
   315                           ;main.h: 228: extern void StartRTS(const unsigne
      +                          d char Index);
   316                           ;main.h: 229: extern unsigned char RTS(const uns
      +                          igned char Index);
   317                           ;main.h: 230: extern void StartRTdS(const unsign
      +                          ed char Index);
   318                           ;main.h: 231: extern unsigned char RTdS(const un
      +                          signed char Index);
   319                           ;main.h: 233: extern void InitTimer1(void);
   320                           ;main.h: 235: extern void InitPort(void);
   321                           ;main.h: 236: extern bit RdPrt(const unsigned ch
      +                          ar Index);
   322                           ;main.h: 237: extern void SetPrt(const unsigned 
      +                          char Index, const unsigned char nw);
   323                           ;main.h: 238: extern void RefPrt(const unsigned 
      +                          char Index);
   324                           ;main.h: 240: extern void PwrOnDelay(void);
   325                           ;main.h: 242: extern void InitI2C(void);
   326  00E340                     _AddHPoz:
   327  000000                     
   328                           ;	_HP assigned to ?a_AddHPoz+0
   329  000000                     _AddHPoz$HP	set	?a_AddHPoz
   330                           ;_HP stored from wreg
   331  00E340  0100               	movlb	__Lparam shr (0+8)
   332  00E342  6FF0               	movwf	?a_AddHPoz^(__Lparam& (0+65280)),b
   333                           ;history.c: 21: volatile unsigned char i,d;
   334  00E344  0EC8               	movlw	200
   335  00E346  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   336  00E348  0E01               	movlw	1
   337  00E34A  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   338  00E34C  ECA2  F078         	call	_eeprom_read	;wreg free
   339  00E350  CFE8 FF42          	movff	wreg,_Hind	;volatile
   340                           ;history.c: 24: Hflg=eeprom_read(0x01CD);
   341  00E354  0100               	movlb	__Lparam shr (0+8)
   342  00E356  0ECD               	movlw	205
   343  00E358  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   344  00E35A  0E01               	movlw	1
   345  00E35C  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   346  00E35E  ECA2  F078         	call	_eeprom_read	;wreg free
   347  00E362  CFE8 FF41          	movff	wreg,_Hflg	;volatile
   348                           ;history.c: 26: if(Hind>(16-1))
   349  00E366  0E0F               	movlw	15
   350  00E368  010F               	movlb	_Hind shr (0+8)	;volatile
   351  00E36A  6542               	cpfsgt	_Hind& (0+255),b	;volatile
   352  00E36C  D029               	goto	l15
   353                           ;history.c: 27: {
   354  00E36E  0100               	movlb	__Lparam shr (0+8)
   355  00E370  6BF2               	clrf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),b	;vo
      +                          latile
   356  00E372  D017               	goto	L3
   357  00E374                     l16:
   358                           ;history.c: 29: {
   359  00E374  0100               	movlb	__Lparam shr (0+8)
   360  00E376  0ECF               	movlw	207
   361  00E378  25F2               	addwf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   362  00E37A  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   363  00E37C  6BFA               	clrf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   364  00E37E  0E01               	movlw	1
   365  00E380  23FA               	addwfc	(?_eeprom_read+1)^(__Lparam& (0+65280)),
      +                          f,b
   366  00E382  ECA2  F078         	call	_eeprom_read	;wreg free
   367  00E386  0100               	movlb	__Lparam shr (0+8)
   368  00E388  6FF1               	movwf	(?a_AddHPoz+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   369                           ;history.c: 31: if_eeprom_write(0x01CE+i,d);
   370  00E38A  0ECE               	movlw	206
   371  00E38C  25F2               	addwf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   372  00E38E  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   373  00E390  6BF7               	clrf	(?_if_eeprom_write+1)^(__Lparam& (0+65280)
      +                          ),b
   374  00E392  0E01               	movlw	1
   375  00E394  23F7               	addwfc	(?_if_eeprom_write+1)^(__Lparam& (0+6528
      +                          0)),f,b
   376  00E396  51F1               	movf	(?a_AddHPoz+1)^(__Lparam& (0+65280)),w	;vo
      +                          latile
   377  00E398  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   378  00E39A  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   379  00E39E  0100               	movlb	__Lparam shr (0+8)
   380  00E3A0  2BF2               	incf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),f,b	;
      +                          volatile
   381  00E3A2                     L3:
   382  00E3A2  0E0E               	movlw	14
   383  00E3A4  65F2               	cpfsgt	(?a_AddHPoz+2)^(__Lparam& (0+65280)),b	;
      +                          volatile
   384  00E3A6  D7E6               	goto	l16
   385                           ;history.c: 32: }
   386  00E3A8  0100               	movlb	__Lparam shr (0+8)
   387  00E3AA  0ECE               	movlw	206
   388  00E3AC  25F2               	addwf	(?a_AddHPoz+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   389  00E3AE  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   390  00E3B0  6BF7               	clrf	(?_if_eeprom_write+1)^(__Lparam& (0+65280)
      +                          ),b
   391  00E3B2  0E01               	movlw	1
   392  00E3B4  23F7               	addwfc	(?_if_eeprom_write+1)^(__Lparam& (0+6528
      +                          0)),f,b
   393  00E3B6  51F0               	movf	?a_AddHPoz^(__Lparam& (0+65280)),w
   394  00E3B8  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   395  00E3BA  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   396                           ;history.c: 34: }
   397  00E3BE  D00D               	goto	l19
   398  00E3C0                     l15:
   399                           ;history.c: 35: else
   400  00E3C0  CF42  F000         	movff	_Hind,btemp	;volatile
   401  00E3C4  0ECE               	movlw	206
   402  00E3C6  2400               	addwf	btemp,w,c
   403  00E3C8  0100               	movlb	__Lparam shr (0+8)
   404  00E3CA  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   405  00E3CC  6BF7               	clrf	(?_if_eeprom_write+1)^(__Lparam& (0+65280)
      +                          ),b
   406  00E3CE  0E01               	movlw	1
   407  00E3D0  23F7               	addwfc	(?_if_eeprom_write+1)^(__Lparam& (0+6528
      +                          0)),f,b
   408  00E3D2  51F0               	movf	?a_AddHPoz^(__Lparam& (0+65280)),w
   409  00E3D4  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   410  00E3D6  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   411  00E3DA                     l19:
   412                           ;history.c: 38: }
   413  00E3DA  010F               	movlb	_Hind shr (0+8)	;volatile
   414  00E3DC  2942               	incf	_Hind& (0+255),w,b	;volatile
   415  00E3DE  CFE8 FF40          	movff	wreg,_HNPz	;volatile
   416                           ;history.c: 41: Hflg=Hflg+1;
   417  00E3E2  010F               	movlb	_Hflg shr (0+8)	;volatile
   418  00E3E4  2B41               	incf	_Hflg& (0+255),f,b	;volatile
   419                           ;history.c: 42: if(HNPz>16) HNPz=16;
   420  00E3E6  0E10               	movlw	16
   421  00E3E8  010F               	movlb	_HNPz shr (0+8)	;volatile
   422  00E3EA  6540               	cpfsgt	_HNPz& (0+255),b	;volatile
   423  00E3EC  D002               	goto	l20
   424  00E3EE  CFE8 FF40          	movff	wreg,_HNPz	;volatile
   425  00E3F2                     l20:
   426                           ;history.c: 43: if(Hflg>16) Hflg=16;
   427  00E3F2  0E10               	movlw	16
   428  00E3F4  010F               	movlb	_Hflg shr (0+8)	;volatile
   429  00E3F6  6541               	cpfsgt	_Hflg& (0+255),b	;volatile
   430  00E3F8  D002               	goto	l21
   431  00E3FA  CFE8 FF41          	movff	wreg,_Hflg	;volatile
   432  00E3FE                     l21:
   433                           ;history.c: 44: if(Hind<16) Hind++;
   434  00E3FE  0E10               	movlw	16
   435  00E400  010F               	movlb	_Hind shr (0+8)	;volatile
   436  00E402  6142               	cpfslt	_Hind& (0+255),b	;volatile
   437  00E404  D001               	goto	l22
   438  00E406  2B42               	incf	_Hind& (0+255),f,b	;volatile
   439  00E408                     l22:
   440                           ;history.c: 45: if_eeprom_write(0x01C8,Hind);
   441  00E408  0100               	movlb	__Lparam shr (0+8)
   442  00E40A  0EC8               	movlw	200
   443  00E40C  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   444  00E40E  0E01               	movlw	1
   445  00E410  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   446  00E412  CF42  F0F8         	movff	_Hind,?_if_eeprom_write+2	;volatile
   447  00E416  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   448                           ;history.c: 46: if_eeprom_write(0x01CA,HNPz);
   449  00E41A  0100               	movlb	__Lparam shr (0+8)
   450  00E41C  0ECA               	movlw	202
   451  00E41E  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   452  00E420  0E01               	movlw	1
   453  00E422  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   454  00E424  CF40  F0F8         	movff	_HNPz,?_if_eeprom_write+2	;volatile
   455  00E428  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   456  00E42C  D131               	goto	L4
   457                           ;history.c: 47: if_eeprom_write(0x01CD,Hflg);
   458                           ;history.c: 48: }
   459  00E42E                     __end_of_AddHPoz:
   460                           ;history.c: 51: unsigned char RefBHist(const uns
      +                          igned char res)
   461                           ;history.c: 52: {
   462  00E42E                     _RefBHist:
   463  000000                     
   464                           ;_res stored from wreg
   465  00E42E  0100               	movlb	__Lparam shr (0+8)
   466  00E430  6FEB               	movwf	?a_RefBHist^(__Lparam& (0+65280)),b
   467                           ;history.c: 53: volatile HIST_POZ s_hp;
   468  00E432  0EC9               	movlw	201
   469  00E434  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   470  00E436  0E01               	movlw	1
   471  00E438  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   472  00E43A  ECA2  F078         	call	_eeprom_read	;wreg free
   473  00E43E  0100               	movlb	__Lparam shr (0+8)
   474  00E440  6FEC               	movwf	(?a_RefBHist+1)^(__Lparam& (0+65280)),b	;
      +                          volatile
   475                           ;history.c: 58: if(res)
   476  00E442  51EB               	movf	?a_RefBHist^(__Lparam& (0+65280)),w
   477  00E444  E037               	bz	l24
   478                           ;history.c: 59: {
   479  00E446  6BEE               	clrf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   480                           ;history.c: 61: if(!eeprom_read(0x01CA))
   481  00E448  0ECA               	movlw	202
   482  00E44A  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   483  00E44C  0E01               	movlw	1
   484  00E44E  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   485  00E450  ECA2  F078         	call	_eeprom_read	;wreg free
   486  00E454  0A00               	xorlw	0
   487  00E456  E12D               	bnz	l26
   488                           ;history.c: 62: {
   489  00E458  0100               	movlb	__Lparam shr (0+8)
   490  00E45A  6BEC               	clrf	(?a_RefBHist+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   491                           ;history.c: 64: if_eeprom_write(0x01C9,0);
   492  00E45C  0EC9               	movlw	201
   493  00E45E  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   494  00E460  0E01               	movlw	1
   495  00E462  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   496  00E464  6BF8               	clrf	(?_if_eeprom_write+2)^(__Lparam& (0+65280)
      +                          ),b
   497  00E466  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   498                           ;history.c: 66: HRef=0;
   499  00E46A  EE02  F074         	lfsr	0,_HRef	;volatile
   500  00E46E  6AEE               	clrf	postinc0,c
   501  00E470  6AEE               	clrf	postinc0,c
   502                           ;history.c: 68: e=(unsigned char)(HRef&0x00ff);
   503  00E472  C274  F0ED         	movff	_HRef,?a_RefBHist+2	;volatile
   504                           ;history.c: 69: if_eeprom_write(0x01CB,e);
   505  00E476  0100               	movlb	__Lparam shr (0+8)
   506  00E478  0ECB               	movlw	203
   507  00E47A  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   508  00E47C  0E01               	movlw	1
   509  00E47E  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   510  00E480  51ED               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   511  00E482  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   512  00E484  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   513                           ;history.c: 70: e=(unsigned char)((HRef&0xff00)>
      +                          >8);
   514  00E488  C274  F000         	movff	_HRef,btemp	;volatile
   515  00E48C  C275  F001         	movff	_HRef+1,btemp+1	;volatile
   516  00E490  6A02               	clrf	btemp+2,c
   517  00E492  5001               	movf	btemp+1,w,c
   518  00E494  6E03               	movwf	btemp+3,c
   519  00E496  C003  F002         	movff	btemp+3,btemp+2
   520  00E49A  6A03               	clrf	btemp+3,c
   521  00E49C  5002               	movf	btemp+2,w,c
   522  00E49E  0100               	movlb	__Lparam shr (0+8)
   523  00E4A0  6FED               	movwf	(?a_RefBHist+2)^(__Lparam& (0+65280)),b	;
      +                          volatile
   524                           ;history.c: 71: if_eeprom_write(0x01CC,e);
   525  00E4A2  0ECC               	movlw	204
   526  00E4A4  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   527  00E4A6  0E01               	movlw	1
   528  00E4A8  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   529  00E4AA  51ED               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   530  00E4AC  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   531  00E4AE  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   532                           ;history.c: 72: }
   533  00E4B2                     l26:
   534                           ;history.c: 73: else
   535                           ;history.c: 76: }
   536  00E4B2  0C00               	retlw	0
   537  00E4B4                     l24:
   538                           ;history.c: 78: }
   539  00E4B4  EE01  F023         	lfsr	0,_M+35
   540  00E4B8  50EF               	movf	indf0,w,c
   541  00E4BA  E001               	bz	l27
   542  00E4BC  0C00               	retlw	0
   543  00E4BE                     l27:
   544                           ;history.c: 82: hp.EST.rST=0;
   545  00E4BE  0100               	movlb	__Lparam shr (0+8)
   546  00E4C0  0E3F               	movlw	-193
   547  00E4C2  17EE               	andwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),f,b
      +                          	;volatile
   548                           ;history.c: 83: hp.EST.wST=0;
   549  00E4C4  0EC0               	movlw	-64
   550  00E4C6  17EE               	andwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),f,b
      +                          	;volatile
   551                           ;history.c: 85: if(GetBit2(RSDT1.outSTAT1,3))
   552  00E4C8  0E03               	movlw	3
   553  00E4CA  6FF0               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   554  00E4CC  C137  FFE8         	movff	_RSDT1+19,wreg
   555  00E4D0  ECC7  F076         	call	_GetBit2
   556  00E4D4  E315               	bnc	l28
   557                           ;history.c: 86: {
   558  00E4D6  0100               	movlb	__Lparam shr (0+8)
   559  00E4D8  6BF0               	clrf	?_GetBit2^(__Lparam& (0+65280)),b
   560  00E4DA  C136  FFE8         	movff	_RSDT1+18,wreg
   561  00E4DE  ECC7  F076         	call	_GetBit2
   562  00E4E2  E305               	bnc	l29
   563                           ;history.c: 88: {
   564  00E4E4  0100               	movlb	__Lparam shr (0+8)
   565  00E4E6  51EE               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   566  00E4E8  0B3F               	andlw	-193
   567  00E4EA  0980               	iorlw	128
   568  00E4EC  D004               	goto	L1
   569                           ;history.c: 90: }
   570  00E4EE                     l29:
   571                           ;history.c: 91: else
   572  00E4EE  0100               	movlb	__Lparam shr (0+8)
   573  00E4F0  51EE               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   574  00E4F2  0B3F               	andlw	-193
   575  00E4F4  09C0               	iorlw	192
   576  00E4F6                     L1:
   577  00E4F6  6FEE               	movwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;
      +                          volatile
   578                           ;history.c: 94: }
   579  00E4F8  C134  F000         	movff	_RSDT1+16,btemp
   580  00E4FC  0100               	movlb	__Lparam shr (0+8)
   581  00E4FE  D00F               	goto	L2
   582                           ;history.c: 96: }
   583  00E500                     l28:
   584                           ;history.c: 97: else
   585  00E500  0E02               	movlw	2
   586  00E502  0100               	movlb	__Lparam shr (0+8)
   587  00E504  6FF0               	movwf	?_GetBit2^(__Lparam& (0+65280)),b
   588  00E506  C137  FFE8         	movff	_RSDT1+19,wreg
   589  00E50A  ECC7  F076         	call	_GetBit2
   590  00E50E  E30D               	bnc	l32
   591                           ;history.c: 99: {
   592  00E510  0100               	movlb	__Lparam shr (0+8)
   593  00E512  51EE               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   594  00E514  0B3F               	andlw	-193
   595  00E516  0940               	iorlw	64
   596  00E518  6FEE               	movwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;
      +                          volatile
   597                           ;history.c: 101: hp.EST.wST=RSDT1.outAWR;
   598  00E51A  C135  F000         	movff	_RSDT1+17,btemp
   599  00E51E                     L2:
   600  00E51E  51EE               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   601  00E520  1800               	xorwf	btemp,w,c
   602  00E522  0BC0               	andlw	-64
   603  00E524  1800               	xorwf	btemp,w,c
   604  00E526  6FEE               	movwf	(?a_RefBHist+3)^(__Lparam& (0+65280)),b	;
      +                          volatile
   605                           ;history.c: 102: }
   606  00E528  D009               	goto	l31
   607  00E52A                     l32:
   608                           ;history.c: 103: else
   609  00E52A  0100               	movlb	__Lparam shr (0+8)
   610  00E52C  6BEC               	clrf	(?a_RefBHist+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   611                           ;history.c: 106: if_eeprom_write(0x01C9,0);
   612  00E52E  0EC9               	movlw	201
   613  00E530  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   614  00E532  0E01               	movlw	1
   615  00E534  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   616  00E536  6BF8               	clrf	(?_if_eeprom_write+2)^(__Lparam& (0+65280)
      +                          ),b
   617  00E538  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   618  00E53C                     l31:
   619                           ;history.c: 107: }
   620  00E53C  0100               	movlb	__Lparam shr (0+8)
   621  00E53E  51EE               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   622  00E540  E05D               	bz	l34
   623  00E542  51EE               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   624  00E544  19EC               	xorwf	(?a_RefBHist+1)^(__Lparam& (0+65280)),w	;
      +                          volatile
   625  00E546  E05A               	bz	l34
   626                           ;history.c: 110: {
   627  00E548  C0EE  F0EC         	movff	?a_RefBHist+3,?a_RefBHist+1	;volatile
   628                           ;history.c: 112: if_eeprom_write(0x01C9,s_hp.war
      +                          );
   629  00E54C  0EC9               	movlw	201
   630  00E54E  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   631  00E550  0E01               	movlw	1
   632  00E552  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   633  00E554  51EC               	movf	(?a_RefBHist+1)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   634  00E556  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   635  00E558  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   636                           ;history.c: 113: AddHPoz(hp);
   637  00E55C  0100               	movlb	__Lparam shr (0+8)
   638  00E55E  51EE               	movf	(?a_RefBHist+3)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   639  00E560  DEEF               	call	_AddHPoz
   640                           ;history.c: 114: HRef=eeprom_read(0x01CB)+(eepro
      +                          m_read(0x01CC)*256);
   641  00E562  0100               	movlb	__Lparam shr (0+8)
   642  00E564  0ECB               	movlw	203
   643  00E566  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   644  00E568  0E01               	movlw	1
   645  00E56A  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   646  00E56C  ECA2  F078         	call	_eeprom_read	;wreg free
   647  00E570  0100               	movlb	__Lparam shr (0+8)
   648  00E572  6FEF               	movwf	(?a_RefBHist+4)^(?a_RefBHist& (0+65280)),
      +                          b
   649  00E574  0ECC               	movlw	204
   650  00E576  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   651  00E578  0E01               	movlw	1
   652  00E57A  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   653  00E57C  ECA2  F078         	call	_eeprom_read	;wreg free
   654  00E580  6E00               	movwf	btemp,c
   655  00E582  C000  F002         	movff	btemp,btemp+2
   656  00E586  6A03               	clrf	btemp+3,c
   657  00E588  C002  F275         	movff	btemp+2,_HRef+1	;volatile
   658  00E58C  C0EF  F274         	movff	?a_RefBHist+4,_HRef
   659                           ;history.c: 115: if(HRef<0xFFFF) HRef++;
   660  00E590  0102               	movlb	_HRef shr (0+8)	;volatile
   661  00E592  1D75               	comf	(_HRef+1)& (0+255),w,b	;volatile
   662  00E594  0EFF               	movlw	255
   663  00E596  B4D8               	btfsc	status,2,c
   664  00E598  1974               	xorwf	_HRef& (0+255),w,b	;volatile
   665  00E59A  E003               	bz	l35
   666  00E59C  4B74               	infsnz	_HRef& (0+255),f,b	;volatile
   667  00E59E  2B75               	incf	(_HRef+1)& (0+255),f,b	;volatile
   668  00E5A0  D00C               	goto	l36
   669  00E5A2                     l35:
   670                           ;history.c: 116: else HRef=eeprom_read(0x01CA);
   671  00E5A2  0100               	movlb	__Lparam shr (0+8)
   672  00E5A4  0ECA               	movlw	202
   673  00E5A6  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   674  00E5A8  0E01               	movlw	1
   675  00E5AA  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   676  00E5AC  ECA2  F078         	call	_eeprom_read	;wreg free
   677  00E5B0  6E00               	movwf	btemp,c
   678  00E5B2  0102               	movlb	_HRef shr (0+8)	;volatile
   679  00E5B4  C000  F274         	movff	btemp,_HRef	;volatile
   680  00E5B8  6B75               	clrf	(_HRef+1)& (0+255),b	;volatile
   681  00E5BA                     l36:
   682                           ;history.c: 118: e=(unsigned char)(HRef&0x00ff);
   683  00E5BA  C274  F0ED         	movff	_HRef,?a_RefBHist+2	;volatile
   684                           ;history.c: 119: if_eeprom_write(0x01CB,e);
   685  00E5BE  0100               	movlb	__Lparam shr (0+8)
   686  00E5C0  0ECB               	movlw	203
   687  00E5C2  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   688  00E5C4  0E01               	movlw	1
   689  00E5C6  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   690  00E5C8  51ED               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   691  00E5CA  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   692  00E5CC  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   693                           ;history.c: 120: e=(unsigned char)((HRef&0xff00)
      +                          >>8);
   694  00E5D0  C274  F000         	movff	_HRef,btemp	;volatile
   695  00E5D4  C275  F001         	movff	_HRef+1,btemp+1	;volatile
   696  00E5D8  6A02               	clrf	btemp+2,c
   697  00E5DA  5001               	movf	btemp+1,w,c
   698  00E5DC  6E03               	movwf	btemp+3,c
   699  00E5DE  C003  F002         	movff	btemp+3,btemp+2
   700  00E5E2  6A03               	clrf	btemp+3,c
   701  00E5E4  5002               	movf	btemp+2,w,c
   702  00E5E6  0100               	movlb	__Lparam shr (0+8)
   703  00E5E8  6FED               	movwf	(?a_RefBHist+2)^(__Lparam& (0+65280)),b	;
      +                          volatile
   704                           ;history.c: 121: if_eeprom_write(0x01CC,e);
   705  00E5EA  0ECC               	movlw	204
   706  00E5EC  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   707  00E5EE  0E01               	movlw	1
   708  00E5F0  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   709  00E5F2  51ED               	movf	(?a_RefBHist+2)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   710  00E5F4  6FF8               	movwf	(?_if_eeprom_write+2)^(__Lparam& (0+65280
      +                          )),b
   711  00E5F6  ECFE  F04F         	call	_if_eeprom_write	;wreg free
   712                           ;history.c: 122: }
   713  00E5FA  0C01               	retlw	1
   714  00E5FC                     l34:
   715                           ;history.c: 123: else return 0;
   716  00E5FC  0C00               	retlw	0
   717                           ;history.c: 124: return 1;
   718                           ;history.c: 125: }
   719  00E5FE                     __end_of_RefBHist:
   720                           ;history.c: 129: void AddSTPoz(void)
   721                           ;history.c: 130: {
   722  00E5FE                     _AddSTPoz:
   723  000000                     
   724                           ;history.c: 131: volatile unsigned char i,j;
   725  00E5FE  0100               	movlb	__Lparam shr (0+8)
   726  00E600  0EE2               	movlw	226
   727  00E602  6FF9               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   728  00E604  0E01               	movlw	1
   729  00E606  6FFA               	movwf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   730  00E608  ECA2  F078         	call	_eeprom_read	;wreg free
   731  00E60C  CFE8 FF43          	movff	wreg,_STPz	;volatile
   732                           ;history.c: 134: if(STPz)
   733  00E610  010F               	movlb	_STPz shr (0+8)	;volatile
   734  00E612  5343               	movf	_STPz& (0+255),f,b	;volatile
   735  00E614  E016               	bz	l39
   736                           ;history.c: 135: {
   737  00E616  0100               	movlb	__Lparam shr (0+8)
   738  00E618  6BEC               	clrf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),b	;v
      +                          olatile
   739  00E61A                     l43:
   740  00E61A  0100               	movlb	__Lparam shr (0+8)
   741  00E61C  CF43  FFE8         	movff	_STPz,wreg	;volatile
   742  00E620  5DEC               	subwf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),w	;
      +                          volatile
   743  00E622  E20F               	bc	l39
   744                           ;history.c: 137: {
   745  00E624  CF43  F000         	movff	_STPz,btemp	;volatile
   746  00E628  0EFF               	movlw	-1
   747  00E62A  2600               	addwf	btemp,f,c
   748  00E62C  51EC               	movf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),w	;v
      +                          olatile
   749  00E62E  5C00               	subwf	btemp,w,c
   750  00E630  6FEB               	movwf	?a_AddSTPoz^(__Lparam& (0+65280)),b	;vola
      +                          tile
   751                           ;history.c: 139: CopyEESTAT(j,j+1);
   752  00E632  29EB               	incf	?a_AddSTPoz^(__Lparam& (0+65280)),w	;volat
      +                          ile
   753  00E634  6FED               	movwf	?_CopyEESTAT^(__Lparam& (0+65280)),b
   754  00E636  51EB               	movf	?a_AddSTPoz^(__Lparam& (0+65280)),w	;volat
      +                          ile
   755  00E638  EC93  F051         	call	_CopyEESTAT
   756  00E63C  0100               	movlb	__Lparam shr (0+8)
   757  00E63E  2BEC               	incf	(?a_AddSTPoz+1)^(__Lparam& (0+65280)),f,b	
      +                          ;volatile
   758  00E640  D7EC               	goto	l43
   759  00E642                     l39:
   760                           ;history.c: 140: }
   761  00E642  0E00               	movlw	0
   762  00E644  ECB3  F050         	call	_WriteEESTAT
   763                           ;history.c: 143: if(STPz<4) STPz++;
   764  00E648  0E04               	movlw	4
   765  00E64A  010F               	movlb	_STPz shr (0+8)	;volatile
   766  00E64C  6143               	cpfslt	_STPz& (0+255),b	;volatile
   767  00E64E  D001               	goto	l44
   768  00E650  2B43               	incf	_STPz& (0+255),f,b	;volatile
   769  00E652                     l44:
   770                           ;history.c: 144: if_eeprom_write(0x01E2,STPz);
   771  00E652  0100               	movlb	__Lparam shr (0+8)
   772  00E654  0EE2               	movlw	226
   773  00E656  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   774  00E658  0E01               	movlw	1
   775  00E65A  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   776  00E65C  CF43  F0F8         	movff	_STPz,?_if_eeprom_write+2	;volatile
   777  00E660  EFFE  F04F         	goto	_if_eeprom_write	;wreg free
   778                           ;history.c: 146: }
   779  00E664                     __end_of_AddSTPoz:
   780                           ;history.c: 150: void ToWriteESTAT(void)
   781                           ;history.c: 151: {
   782  00E664                     _ToWriteESTAT:
   783  000000                     
   784                           ;history.c: 152: WrST=1;
   785  00E664  0E01               	movlw	1
   786  00E666  CFE8 FF44          	movff	wreg,_WrST	;volatile
   787                           ;history.c: 153: }
   788  00E66A  0C01               	retlw	1
   789  00E66C                     __end_of_ToWriteESTAT:
   790                           ;history.c: 156: void RefBStat(const unsigned ch
      +                          ar res)
   791                           ;history.c: 157: {
   792  00E66C                     _RefBStat:
   793  000000                     
   794                           ;history.c: 158: if(res)
   795  00E66C  52E8               	movf	wreg,f,c
   796  00E66E  E003               	bz	l47
   797                           ;history.c: 159: {
   798  00E670  010F               	movlb	_WrST shr (0+8)	;volatile
   799  00E672  6B44               	clrf	_WrST& (0+255),b	;volatile
   800                           ;history.c: 161: return;
   801  00E674  0012               	return	
   802  00E676                     l47:
   803                           ;history.c: 162: }
   804  00E676  EE01  F023         	lfsr	0,_M+35
   805  00E67A  50EF               	movf	indf0,w,c
   806  00E67C  A4D8               	btfss	status,2,c
   807  00E67E  0012               	return	
   808                           ;history.c: 164: if(WrST)
   809  00E680  010F               	movlb	_WrST shr (0+8)	;volatile
   810  00E682  5344               	movf	_WrST& (0+255),f,b	;volatile
   811  00E684  B4D8               	btfsc	status,2,c
   812  00E686  0012               	return	
   813                           ;history.c: 165: {
   814  00E688  6B44               	clrf	_WrST& (0+255),b	;volatile
   815                           ;history.c: 167: AddSTPoz();
   816  00E68A  D7B9               	goto	_AddSTPoz	;wreg free
   817                           ;history.c: 168: }
   818  00E68C                     __end_of_RefBStat:
   819                           ;history.c: 173: void ClrHFLG(void)
   820                           ;history.c: 174: {
   821  00E68C                     _ClrHFLG:
   822  000000                     
   823                           ;history.c: 175: Hflg=0;
   824  00E68C  010F               	movlb	_Hflg shr (0+8)	;volatile
   825  00E68E  6B41               	clrf	_Hflg& (0+255),b	;volatile
   826  00E690                     L4:
   827                           ;history.c: 176: if_eeprom_write(0x01CD,Hflg);
   828  00E690  0100               	movlb	__Lparam shr (0+8)
   829  00E692  0ECD               	movlw	205
   830  00E694  6FF6               	movwf	?_if_eeprom_write^(__Lparam& (0+65280)),b
   831  00E696  0E01               	movlw	1
   832  00E698  6FF7               	movwf	(?_if_eeprom_write+1)^(__Lparam& (0+65280
      +                          )),b
   833  00E69A  CF41  F0F8         	movff	_Hflg,?_if_eeprom_write+2	;volatile
   834  00E69E  EFFE  F04F         	goto	_if_eeprom_write	;wreg free
   835                           ;history.c: 177: }
   836  00E6A2                     __end_of_ClrHFLG:
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306                           
  1307                           	psect	bigbss
  1308  000F40                     _HNPz:
  1309  000F40                     	ds	1
  1310  000F40                     _Hflg:
  1311  000F40                     	ds	1
  1312  000F40                     _Hind:
  1313  000F40                     	ds	1
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000F40                     _STPz:
  1377  000F40                     	ds	1
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000F40                     _WrST:
  1409  000F40                     	ds	1
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413                           
  1414                           	psect	bss
  1415  000274                     _HRef:
  1416  000274                     	ds	2
  1417  000000                     
  1418  000000                     
  1419  000000                     
  1420  000000                     
  1421                           
  1422                           	psect	temp
  1423  000000                     btemp:
  1424  000000                     	ds	4
  1425                           indf0	equ	0xFEF
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:44:54 2020

                   _M 0100                    l20 E3F2  
                  l21 E3FE                    l22 E408  
                  l31 E53C                    l15 E3C0  
                  l32 E52A                    l24 E4B4  
                  l16 E374                    l34 E5FC  
                  l26 E4B2                    l43 E61A  
                  l35 E5A2                    l27 E4BE  
                  l19 E3DA                    l44 E652  
                  l36 E5BA                    l28 E500  
                  l29 E4EE                    l47 E676  
                  l39 E642            ?a_RefBHist 00EB  
            __config1 0030FF              __config2 00EFEF  
            __config3 007DFF              __config4 00FFFB  
            __config5 00FFF0              __config6 00DFF0  
                 wreg 000FE8       _if_eeprom_write 9FFC  
     __end_of_AddHPoz E42E                  f5783 00EF  
    ?_if_eeprom_write 00F6                  _HNPz 0F40  
                _HRef 0274                  _STPz 0F43  
                _Hflg 0F41       __end_of_ClrHFLG E6A2  
                _Hind 0F42                  _WrST 0F44  
                indf0 000FEF                  btemp 0000  
    __end_of_AddSTPoz E664                 _RSDT1 0124  
          used_btemp0 0001            used_btemp1 0001  
          used_btemp2 0001            used_btemp3 0001  
             _AddHPoz E340           _eeprom_read F144  
             _ClrHFLG E68C          _ToWriteESTAT E664  
    __end_of_RefBHist E5FE               _GetBit2 ED8E  
    __end_of_RefBStat E68C                 status 000FD8  
            ?_GetBit2 00F0  __end_of_ToWriteESTAT E66C  
             __Lparam 00E9          ?_eeprom_read 00F9  
             __ramtop 1000            _CopyEESTAT A326  
         _WriteEESTAT A166           ?_CopyEESTAT 00ED  
             postinc0 000FEE              _AddSTPoz E5FE  
            _RefBHist E42E              _RefBStat E66C  
          ?a_AddSTPoz 00EB             ?a_AddHPoz 00F0  
          ??_RefBHist 00EB  
