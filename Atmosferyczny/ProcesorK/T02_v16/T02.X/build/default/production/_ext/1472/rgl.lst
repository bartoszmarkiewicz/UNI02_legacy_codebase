

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:44:53 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	text
    99                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   146                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   167                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   168                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   169                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   170                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   171                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   172                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   173                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   174                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   175                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   176                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   177                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   178                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   179                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   180                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   181                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   182                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   183                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   184                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   185                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   186                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   187                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   188                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   189                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   190                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   191                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   192                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   193                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   194                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   195                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   196                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   197                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   198                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   199  0040C4                     _Moduluj:
   200                           ;	_k assigned to ?a_ModPruCW2+0
   201  000000                     _ModPruCW2$k	set	?a_ModPruCW2
   202                           ;	_m assigned to ?a_ModDkCW2+0
   203  000000                     _ModDkCW2$m	set	?a_ModDkCW2
   204                           ;	_m assigned to ?a_ModZgCW2+0
   205  000000                     _ModZgCW2$m	set	?a_ModZgCW2
   206                           ;	_k assigned to ?a_ModPruCW4+0
   207  000000                     _ModPruCW4$k	set	?a_ModPruCW4
   208                           ;	_m assigned to ?a_ModDkCW4+0
   209  000000                     _ModDkCW4$m	set	?a_ModDkCW4
   210                           ;	_m assigned to ?a_ModZgCW4+0
   211  000000                     _ModZgCW4$m	set	?a_ModZgCW4
   212                           ;	_k assigned to ?a_ModPruCW+0
   213  000000                     _ModPruCW$k	set	?a_ModPruCW
   214                           ;	_m assigned to ?a_ModDkCW+2
   215  000000                     _ModDkCW$m	set	?a_ModDkCW+2
   216                           ;	_k assigned to ?a_ModDkCW+1
   217  000000                     _ModDkCW$k	set	?a_ModDkCW+1
   218                           ;	_ada assigned to ?a_ModDkCW+0
   219  000000                     _ModDkCW$ada	set	?a_ModDkCW
   220                           ;	_m assigned to ?a_ModZgCW+0
   221  000000                     _ModZgCW$m	set	?a_ModZgCW
   222                           ;	_m assigned to ?a_FirstPCW+1
   223  000000                     _FirstPCW$m	set	?a_FirstPCW+1
   224                           ;	_p assigned to ?a_FirstPCW+0
   225  000000                     _FirstPCW$p	set	?a_FirstPCW
   226                           ;	_m assigned to ?a_ModDkCO+2
   227  000000                     _ModDkCO$m	set	?a_ModDkCO+2
   228                           ;	_k assigned to ?a_ModDkCO+1
   229  000000                     _ModDkCO$k	set	?a_ModDkCO+1
   230                           ;	_ada assigned to ?a_ModDkCO+0
   231  000000                     _ModDkCO$ada	set	?a_ModDkCO
   232                           ;	_m assigned to ?a_ModZgCO+0
   233  000000                     _ModZgCO$m	set	?a_ModZgCO
   234  000000                     
   235                           ;rgl.c: 28: unsigned int wpw;
   236  0040C4  D14F               	goto	l18
   237  0040C6                     l19:
   238                           ;rgl.c: 32: {
   239                           ;rgl.c: 34: {
   240  0040C6  0101               	movlb	_M shr (0+8)
   241  0040C8  AB00               	btfss	_M& (0+255),5,b
   242  0040CA  D01E               	goto	l20
   243                           ;rgl.c: 36: {
   244  0040CC  C1FA  F1FE         	movff	_PWM+31,_PWM+35
   245                           ;rgl.c: 38: PWM.MINPWM = PWM.MDMOD;
   246  0040D0  C1E4  F1FD         	movff	_PWM+9,_PWM+34
   247                           ;rgl.c: 39: StartCO();
   248  0040D4  ECCF  F024         	call	_StartCO	;wreg free
   249                           ;rgl.c: 40: ReadDataCO();
   250  0040D8  ECF5  F026         	call	_ReadDataCO	;wreg free
   251                           ;rgl.c: 41: ModToCO();
   252  0040DC  ECE7  F026         	call	_ModToCO	;wreg free
   253                           ;rgl.c: 42: ModZgCO();
   254  0040E0  D99C               	call	_ModZgCO	;wreg free
   255                           ;rgl.c: 43: ModDkCO();
   256  0040E2  DA90               	call	_ModDkCO	;wreg free
   257                           ;rgl.c: 44: if(RTdS(3)>10)
   258  0040E4  0E03               	movlw	3
   259  0040E6  EC63  F073         	call	_RTdS
   260  0040EA  6E00               	movwf	btemp,c
   261  0040EC  0E0B               	movlw	11
   262  0040EE  5C00               	subwf	btemp,w,c
   263  0040F0  E307               	bnc	l21
   264                           ;rgl.c: 45: {
   265  0040F2  0E03               	movlw	3
   266  0040F4  EC51  F073         	call	_StartRTdS
   267                           ;rgl.c: 47: IncConstCOCW();
   268  0040F8  ECED  F026         	call	_IncConstCOCW	;wreg free
   269                           ;rgl.c: 48: IncMaxCO();
   270  0040FC  DBB1               	call	_IncMaxCO	;wreg free
   271                           ;rgl.c: 49: ModPruCO();
   272  0040FE  DAE6               	call	_ModPruCO	;wreg free
   273  004100                     l21:
   274                           ;rgl.c: 50: }
   275  004100  EC99  F024         	call	_ModPrzCO	;wreg free
   276                           ;rgl.c: 52: PropOPT();
   277  004104  EFC9  F024         	goto	_PropOPT	;wreg free
   278                           ;rgl.c: 53: }
   279  004108                     l20:
   280                           ;rgl.c: 54: else
   281  004108  0101               	movlb	_M shr (0+8)
   282  00410A  A900               	btfss	_M& (0+255),4,b
   283  00410C  0012               	return	
   284                           ;rgl.c: 56: {
   285  00410E  ECF3  F024         	call	_StartMCW	;wreg free
   286                           ;rgl.c: 58: ReadDataCW();
   287  004112  ECFA  F026         	call	_ReadDataCW	;wreg free
   288                           ;rgl.c: 59: ModToCW();
   289  004116  ECE1  F026         	call	_ModToCW	;wreg free
   290                           ;rgl.c: 60: ModZgCW();
   291  00411A  EC03  F027         	call	_ModZgCW	;wreg free
   292                           ;rgl.c: 61: ModDkCW();
   293  00411E  ECF4  F027         	call	_ModDkCW	;wreg free
   294                           ;rgl.c: 62: if(RTdS(3)>10)
   295  004122  0E03               	movlw	3
   296  004124  EC63  F073         	call	_RTdS
   297  004128  6E00               	movwf	btemp,c
   298  00412A  0E0B               	movlw	11
   299  00412C  5C00               	subwf	btemp,w,c
   300  00412E  E315               	bnc	l24
   301                           ;rgl.c: 63: {
   302  004130  0E03               	movlw	3
   303  004132  EC51  F073         	call	_StartRTdS
   304                           ;rgl.c: 65: if(tmr<0xff) tmr++;
   305  004136  CEE6  F000         	movff	_tmr,btemp
   306  00413A  2800               	incf	btemp,w,c
   307  00413C  E002               	bz	l25
   308  00413E  010E               	movlb	_tmr shr (0+8)
   309  004140  2BE6               	incf	_tmr& (0+255),f,b
   310  004142                     l25:
   311                           ;rgl.c: 66: if(tmr2<0xff) tmr2++;
   312  004142  CEE7  F000         	movff	_tmr2,btemp
   313  004146  2800               	incf	btemp,w,c
   314  004148  E002               	bz	l26
   315  00414A  010E               	movlb	_tmr2 shr (0+8)
   316  00414C  2BE7               	incf	_tmr2& (0+255),f,b
   317  00414E                     l26:
   318                           ;rgl.c: 67: IncConstCOCW();
   319  00414E  ECED  F026         	call	_IncConstCOCW	;wreg free
   320                           ;rgl.c: 68: IncMaxCW();
   321  004152  EC71  F02A         	call	_IncMaxCW	;wreg free
   322                           ;rgl.c: 69: ModPruCW();
   323  004156  EC5C  F028         	call	_ModPruCW	;wreg free
   324  00415A                     l24:
   325                           ;rgl.c: 70: }
   326  00415A  EC36  F02B         	call	_ModPrzCW	;wreg free
   327                           ;rgl.c: 72: PropCO();
   328  00415E  EFFD  F02C         	goto	_PropCO	;wreg free
   329                           ;rgl.c: 73: }
   330  004162                     l27:
   331                           ;rgl.c: 75: }
   332                           ;rgl.c: 77: {
   333  004162  0101               	movlb	_M shr (0+8)
   334  004164  AB00               	btfss	_M& (0+255),5,b
   335  004166  D01C               	goto	l28
   336                           ;rgl.c: 79: {
   337  004168  C1FA  F1FE         	movff	_PWM+31,_PWM+35
   338                           ;rgl.c: 81: PWM.MINPWM = PWM.MDMOD;
   339  00416C  C1E4  F1FD         	movff	_PWM+9,_PWM+34
   340                           ;rgl.c: 82: StartCO2();
   341  004170  ECA1  F031         	call	_StartCO2	;wreg free
   342                           ;rgl.c: 83: ReadDataCO2();
   343  004174  EC2B  F032         	call	_ReadDataCO2	;wreg free
   344                           ;rgl.c: 84: ModToCO2();
   345  004178  EC0E  F032         	call	_ModToCO2	;wreg free
   346                           ;rgl.c: 85: ModZgCO();
   347  00417C  D94E               	call	_ModZgCO	;wreg free
   348                           ;rgl.c: 86: ModDkCO();
   349  00417E  DA42               	call	_ModDkCO	;wreg free
   350                           ;rgl.c: 87: if(RTdS(3)>10)
   351  004180  0E03               	movlw	3
   352  004182  EC63  F073         	call	_RTdS
   353  004186  6E00               	movwf	btemp,c
   354  004188  0E0B               	movlw	11
   355  00418A  5C00               	subwf	btemp,w,c
   356  00418C  E307               	bnc	l29
   357                           ;rgl.c: 88: {
   358  00418E  0E03               	movlw	3
   359  004190  EC51  F073         	call	_StartRTdS
   360                           ;rgl.c: 90: IncConstCO2();
   361  004194  EC23  F032         	call	_IncConstCO2	;wreg free
   362                           ;rgl.c: 91: IncMaxCO();
   363  004198  DB63               	call	_IncMaxCO	;wreg free
   364                           ;rgl.c: 92: ModPruCO();
   365  00419A  DA98               	call	_ModPruCO	;wreg free
   366  00419C                     l29:
   367                           ;rgl.c: 93: }
   368  00419C  DBCA               	call	_ModPrzCO	;wreg free
   369                           ;rgl.c: 96: PropOPT();
   370  00419E  D3F9               	goto	_PropOPT	;wreg free
   371                           ;rgl.c: 97: }
   372  0041A0                     l28:
   373                           ;rgl.c: 98: else
   374  0041A0  0101               	movlb	_M shr (0+8)
   375  0041A2  A900               	btfss	_M& (0+255),4,b
   376  0041A4  0012               	return	
   377                           ;rgl.c: 100: {
   378  0041A6  ECC6  F031         	call	_StartMCW2	;wreg free
   379                           ;rgl.c: 102: ReadDataCW2();
   380  0041AA  EC30  F032         	call	_ReadDataCW2	;wreg free
   381                           ;rgl.c: 103: ModToCW2();
   382  0041AE  EC08  F032         	call	_ModToCW2	;wreg free
   383                           ;rgl.c: 104: ModZgCW2();
   384  0041B2  EC39  F032         	call	_ModZgCW2	;wreg free
   385                           ;rgl.c: 105: ModDkCW2();
   386  0041B6  EC47  F033         	call	_ModDkCW2	;wreg free
   387                           ;rgl.c: 106: if(RTdS(3)>10)
   388  0041BA  0E03               	movlw	3
   389  0041BC  EC63  F073         	call	_RTdS
   390  0041C0  6E00               	movwf	btemp,c
   391  0041C2  0E0B               	movlw	11
   392  0041C4  5C00               	subwf	btemp,w,c
   393  0041C6  E309               	bnc	l32
   394                           ;rgl.c: 107: {
   395  0041C8  0E03               	movlw	3
   396  0041CA  EC51  F073         	call	_StartRTdS
   397                           ;rgl.c: 109: IncConstCW2();
   398  0041CE  EC14  F032         	call	_IncConstCW2	;wreg free
   399                           ;rgl.c: 110: IncMaxCW2();
   400  0041D2  EC9C  F035         	call	_IncMaxCW2	;wreg free
   401                           ;rgl.c: 111: ModPruCW2();
   402  0041D6  ECA7  F033         	call	_ModPruCW2	;wreg free
   403  0041DA                     l32:
   404                           ;rgl.c: 112: }
   405  0041DA  ECD9  F035         	call	_ModPrzCW2	;wreg free
   406                           ;rgl.c: 114: PropCO2();
   407  0041DE  EFFE  F035         	goto	_PropCO2	;wreg free
   408                           ;rgl.c: 115: }
   409  0041E2                     l33:
   410                           ;rgl.c: 117: }
   411                           ;rgl.c: 119: {
   412  0041E2  0101               	movlb	_M shr (0+8)
   413  0041E4  AB00               	btfss	_M& (0+255),5,b
   414  0041E6  D01C               	goto	l34
   415                           ;rgl.c: 121: {
   416  0041E8  C1FA  F1FE         	movff	_PWM+31,_PWM+35
   417                           ;rgl.c: 123: PWM.MINPWM = PWM.MDMOD;
   418  0041EC  C1E4  F1FD         	movff	_PWM+9,_PWM+34
   419                           ;rgl.c: 124: StartMCO3();
   420  0041F0  EC61  F036         	call	_StartMCO3	;wreg free
   421                           ;rgl.c: 125: ReadDataCO2();
   422  0041F4  EC2B  F032         	call	_ReadDataCO2	;wreg free
   423                           ;rgl.c: 126: ModToCO3();
   424  0041F8  EC5D  F036         	call	_ModToCO3	;wreg free
   425                           ;rgl.c: 127: ModZgCO();
   426  0041FC  D90E               	call	_ModZgCO	;wreg free
   427                           ;rgl.c: 128: ModDkCO();
   428  0041FE  DA02               	call	_ModDkCO	;wreg free
   429                           ;rgl.c: 129: if(RTdS(3)>10)
   430  004200  0E03               	movlw	3
   431  004202  EC63  F073         	call	_RTdS
   432  004206  6E00               	movwf	btemp,c
   433  004208  0E0B               	movlw	11
   434  00420A  5C00               	subwf	btemp,w,c
   435  00420C  E307               	bnc	l35
   436                           ;rgl.c: 130: {
   437  00420E  0E03               	movlw	3
   438  004210  EC51  F073         	call	_StartRTdS
   439                           ;rgl.c: 132: IncConstCO2();
   440  004214  EC23  F032         	call	_IncConstCO2	;wreg free
   441                           ;rgl.c: 133: IncMaxCO();
   442  004218  DB23               	call	_IncMaxCO	;wreg free
   443                           ;rgl.c: 134: ModPruCO();
   444  00421A  DA58               	call	_ModPruCO	;wreg free
   445  00421C                     l35:
   446                           ;rgl.c: 135: }
   447  00421C  DB8A               	call	_ModPrzCO	;wreg free
   448                           ;rgl.c: 138: PropOPT();
   449  00421E  D3B9               	goto	_PropOPT	;wreg free
   450                           ;rgl.c: 139: }
   451  004220                     l34:
   452                           ;rgl.c: 140: else
   453  004220  0101               	movlb	_M shr (0+8)
   454  004222  B900               	btfsc	_M& (0+255),4,b
   455  004224  D003               	goto	u150
   456  004226  0101               	movlb	_M shr (0+8)
   457  004228  A700               	btfss	_M& (0+255),3,b
   458  00422A  0012               	return	
   459  00422C                     u150:
   460                           ;rgl.c: 142: {
   461  00422C  C1FB  F1FE         	movff	_PWM+32,_PWM+35
   462                           ;rgl.c: 144: PWM.MINPWM = PWM.MDMOD;
   463  004230  C1E4  F1FD         	movff	_PWM+9,_PWM+34
   464                           ;rgl.c: 145: StartMCO3();
   465  004234  EC61  F036         	call	_StartMCO3	;wreg free
   466                           ;rgl.c: 146: ReadDataCO2();
   467  004238  EC2B  F032         	call	_ReadDataCO2	;wreg free
   468                           ;rgl.c: 147: ModToCW3();
   469  00423C  EC38  F036         	call	_ModToCW3	;wreg free
   470                           ;rgl.c: 148: ModZgCO();
   471  004240  D8EC               	call	_ModZgCO	;wreg free
   472                           ;rgl.c: 149: ModDkCO();
   473  004242  D9E0               	call	_ModDkCO	;wreg free
   474                           ;rgl.c: 150: if(RTdS(3)>10)
   475  004244  0E03               	movlw	3
   476  004246  EC63  F073         	call	_RTdS
   477  00424A  6E00               	movwf	btemp,c
   478  00424C  0E0B               	movlw	11
   479  00424E  5C00               	subwf	btemp,w,c
   480  004250  E307               	bnc	l38
   481                           ;rgl.c: 151: {
   482  004252  0E03               	movlw	3
   483  004254  EC51  F073         	call	_StartRTdS
   484                           ;rgl.c: 153: IncConstCO2();
   485  004258  EC23  F032         	call	_IncConstCO2	;wreg free
   486                           ;rgl.c: 154: IncMaxCO();
   487  00425C  DB01               	call	_IncMaxCO	;wreg free
   488                           ;rgl.c: 155: ModPruCO();
   489  00425E  DA36               	call	_ModPruCO	;wreg free
   490  004260                     l38:
   491                           ;rgl.c: 156: }
   492  004260  DB68               	call	_ModPrzCO	;wreg free
   493                           ;rgl.c: 159: PropOPT();
   494  004262  D397               	goto	_PropOPT	;wreg free
   495                           ;rgl.c: 160: }
   496  004264                     l39:
   497                           ;rgl.c: 162: }
   498                           ;rgl.c: 164: {
   499  004264  0101               	movlb	_M shr (0+8)
   500  004266  AB00               	btfss	_M& (0+255),5,b
   501  004268  D01C               	goto	l40
   502                           ;rgl.c: 166: {
   503  00426A  C1FA  F1FE         	movff	_PWM+31,_PWM+35
   504                           ;rgl.c: 168: PWM.MINPWM = PWM.MDMOD;
   505  00426E  C1E4  F1FD         	movff	_PWM+9,_PWM+34
   506                           ;rgl.c: 169: StartCO4();
   507  004272  EC20  F02D         	call	_StartCO4	;wreg free
   508                           ;rgl.c: 170: ReadDataCO4();
   509  004276  ECA2  F02D         	call	_ReadDataCO4	;wreg free
   510                           ;rgl.c: 171: ModToCO4();
   511  00427A  EC94  F02D         	call	_ModToCO4	;wreg free
   512                           ;rgl.c: 172: ModZgCO();
   513  00427E  D8CD               	call	_ModZgCO	;wreg free
   514                           ;rgl.c: 173: ModDkCO();
   515  004280  D9C1               	call	_ModDkCO	;wreg free
   516                           ;rgl.c: 174: if(RTdS(3)>10)
   517  004282  0E03               	movlw	3
   518  004284  EC63  F073         	call	_RTdS
   519  004288  6E00               	movwf	btemp,c
   520  00428A  0E0B               	movlw	11
   521  00428C  5C00               	subwf	btemp,w,c
   522  00428E  E307               	bnc	l41
   523                           ;rgl.c: 175: {
   524  004290  0E03               	movlw	3
   525  004292  EC51  F073         	call	_StartRTdS
   526                           ;rgl.c: 177: IncConstCOCW4();
   527  004296  EC9A  F02D         	call	_IncConstCOCW4	;wreg free
   528                           ;rgl.c: 178: IncMaxCO();
   529  00429A  DAE2               	call	_IncMaxCO	;wreg free
   530                           ;rgl.c: 179: ModPruCO();
   531  00429C  DA17               	call	_ModPruCO	;wreg free
   532  00429E                     l41:
   533                           ;rgl.c: 180: }
   534  00429E  DB49               	call	_ModPrzCO	;wreg free
   535                           ;rgl.c: 182: PropOPT();
   536  0042A0  D378               	goto	_PropOPT	;wreg free
   537                           ;rgl.c: 183: }
   538  0042A2                     l40:
   539                           ;rgl.c: 184: else
   540  0042A2  0101               	movlb	_M shr (0+8)
   541  0042A4  A900               	btfss	_M& (0+255),4,b
   542  0042A6  0012               	return	
   543                           ;rgl.c: 186: {
   544  0042A8  EC44  F02D         	call	_StartMCW4	;wreg free
   545                           ;rgl.c: 188: ReadDataCW4();
   546  0042AC  ECA7  F02D         	call	_ReadDataCW4	;wreg free
   547                           ;rgl.c: 189: ModToCW4();
   548  0042B0  EC8E  F02D         	call	_ModToCW4	;wreg free
   549                           ;rgl.c: 190: ModZgCW4();
   550  0042B4  ECB0  F02D         	call	_ModZgCW4	;wreg free
   551                           ;rgl.c: 191: ModDkCW4();
   552  0042B8  ECBC  F02E         	call	_ModDkCW4	;wreg free
   553                           ;rgl.c: 192: if(RTdS(3)>10)
   554  0042BC  0E03               	movlw	3
   555  0042BE  EC63  F073         	call	_RTdS
   556  0042C2  6E00               	movwf	btemp,c
   557  0042C4  0E0B               	movlw	11
   558  0042C6  5C00               	subwf	btemp,w,c
   559  0042C8  E309               	bnc	l44
   560                           ;rgl.c: 193: {
   561  0042CA  0E03               	movlw	3
   562  0042CC  EC51  F073         	call	_StartRTdS
   563                           ;rgl.c: 195: IncConstCOCW4();
   564  0042D0  EC9A  F02D         	call	_IncConstCOCW4	;wreg free
   565                           ;rgl.c: 196: IncMaxCW4();
   566  0042D4  ECAB  F030         	call	_IncMaxCW4	;wreg free
   567                           ;rgl.c: 197: ModPruCW4();
   568  0042D8  EC1C  F02F         	call	_ModPruCW4	;wreg free
   569  0042DC                     l44:
   570                           ;rgl.c: 198: }
   571  0042DC  ECE5  F030         	call	_ModPrzCW4	;wreg free
   572                           ;rgl.c: 200: PropCO4();
   573  0042E0  EF78  F031         	goto	_PropCO4	;wreg free
   574                           ;rgl.c: 201: }
   575  0042E4                     l45:
   576                           ;rgl.c: 203: }
   577                           ;rgl.c: 205: {
   578  0042E4  0101               	movlb	_M shr (0+8)
   579  0042E6  AB00               	btfss	_M& (0+255),5,b
   580  0042E8  D01C               	goto	l46
   581                           ;rgl.c: 207: {
   582  0042EA  C1FA  F1FE         	movff	_PWM+31,_PWM+35
   583                           ;rgl.c: 209: PWM.MINPWM = PWM.MDMOD;
   584  0042EE  C1E4  F1FD         	movff	_PWM+9,_PWM+34
   585                           ;rgl.c: 210: StartCO2();
   586  0042F2  ECA1  F031         	call	_StartCO2	;wreg free
   587                           ;rgl.c: 211: ReadDataCO2();
   588  0042F6  EC2B  F032         	call	_ReadDataCO2	;wreg free
   589                           ;rgl.c: 212: ModToCO2();
   590  0042FA  EC0E  F032         	call	_ModToCO2	;wreg free
   591                           ;rgl.c: 213: ModZgCO();
   592  0042FE  D88D               	call	_ModZgCO	;wreg free
   593                           ;rgl.c: 214: ModDkCO();
   594  004300  D981               	call	_ModDkCO	;wreg free
   595                           ;rgl.c: 215: if(RTdS(3)>10)
   596  004302  0E03               	movlw	3
   597  004304  EC63  F073         	call	_RTdS
   598  004308  6E00               	movwf	btemp,c
   599  00430A  0E0B               	movlw	11
   600  00430C  5C00               	subwf	btemp,w,c
   601  00430E  E307               	bnc	l47
   602                           ;rgl.c: 216: {
   603  004310  0E03               	movlw	3
   604  004312  EC51  F073         	call	_StartRTdS
   605                           ;rgl.c: 218: IncConstCO2();
   606  004316  EC23  F032         	call	_IncConstCO2	;wreg free
   607                           ;rgl.c: 219: IncMaxCO();
   608  00431A  DAA2               	call	_IncMaxCO	;wreg free
   609                           ;rgl.c: 220: ModPruCO();
   610  00431C  D9D7               	call	_ModPruCO	;wreg free
   611  00431E                     l47:
   612                           ;rgl.c: 221: }
   613  00431E  DB09               	call	_ModPrzCO	;wreg free
   614                           ;rgl.c: 224: PropOPT();
   615  004320  D338               	goto	_PropOPT	;wreg free
   616                           ;rgl.c: 225: }
   617  004322                     l46:
   618                           ;rgl.c: 226: else
   619  004322  0101               	movlb	_M shr (0+8)
   620  004324  A900               	btfss	_M& (0+255),4,b
   621  004326  0012               	return	
   622                           ;rgl.c: 228: {
   623  004328  ECC6  F031         	call	_StartMCW2	;wreg free
   624                           ;rgl.c: 230: ReadDataCW2();
   625  00432C  EC30  F032         	call	_ReadDataCW2	;wreg free
   626                           ;rgl.c: 231: ModToCW2();
   627  004330  EC08  F032         	call	_ModToCW2	;wreg free
   628                           ;rgl.c: 232: ModZgCW2();
   629  004334  EC39  F032         	call	_ModZgCW2	;wreg free
   630                           ;rgl.c: 233: ModDkCW2();
   631  004338  EC47  F033         	call	_ModDkCW2	;wreg free
   632                           ;rgl.c: 234: if(RTdS(3)>10)
   633  00433C  0E03               	movlw	3
   634  00433E  EC63  F073         	call	_RTdS
   635  004342  6E00               	movwf	btemp,c
   636  004344  0E0B               	movlw	11
   637  004346  5C00               	subwf	btemp,w,c
   638  004348  E309               	bnc	l50
   639                           ;rgl.c: 235: {
   640  00434A  0E03               	movlw	3
   641  00434C  EC51  F073         	call	_StartRTdS
   642                           ;rgl.c: 237: IncConstCW2();
   643  004350  EC14  F032         	call	_IncConstCW2	;wreg free
   644                           ;rgl.c: 238: IncMaxCW2();
   645  004354  EC9C  F035         	call	_IncMaxCW2	;wreg free
   646                           ;rgl.c: 239: ModPruCW2();
   647  004358  ECA7  F033         	call	_ModPruCW2	;wreg free
   648  00435C                     l50:
   649                           ;rgl.c: 240: }
   650  00435C  ECD9  F035         	call	_ModPrzCW2	;wreg free
   651                           ;rgl.c: 242: PropCO2();
   652  004360  EFFE  F035         	goto	_PropCO2	;wreg free
   653                           ;rgl.c: 243: }
   654  004364                     l18:
   655  004364  C237  FFE8         	movff	_DtKNF+7,wreg
   656  004368  0A00               	xorlw	0
   657  00436A  E101 D73A          	bz	l33
   658  00436E  0A01               	xorlw	1
   659  004370  E101 D6A9          	bz	l19
   660  004374  0A03               	xorlw	3
   661  004376  E101 D775          	bz	l39
   662  00437A  0A01               	xorlw	1
   663  00437C  E101 D6F1          	bz	l27
   664  004380  D7B1               	goto	l45
   665                           ;rgl.c: 247: }
   666  004382                     __end_of_Moduluj:
   667                           ;rgl.c: 256: void StartMCO1F(void)
   668                           ;rgl.c: 257: {
   669  004382                     _StartMCO1F:
   670  000000                     
   671                           ;rgl.c: 258: unsigned char k;
   672  004382  0102               	movlb	_rgl shr (0+8)
   673  004384  B165               	btfsc	_rgl& (0+255),0,b
   674  004386  B365               	btfsc	_rgl& (0+255),1,b
   675  004388  D001               	goto	l52
   676  00438A  0012               	return	
   677  00438C                     l52:
   678                           ;rgl.c: 261: if(rgl.btco&&rgl.btcw)
   679  00438C  0102               	movlb	_rgl shr (0+8)
   680  00438E  B165               	btfsc	_rgl& (0+255),0,b
   681  004390  A365               	btfss	_rgl& (0+255),1,b
   682  004392  D024               	goto	l53
   683                           ;rgl.c: 262: {
   684  004394  9365               	bcf	_rgl& (0+255),1,b
   685                           ;rgl.c: 264: if(!Tnizsza(0))
   686  004396  0E00               	movlw	0
   687  004398  ECB3  F036         	call	_Tnizsza
   688  00439C  B0D8               	btfsc	status,0,c
   689  00439E  0012               	return	
   690                           ;rgl.c: 265: {
   691  0043A0  0E0A               	movlw	10
   692  0043A2  6ED9               	movwf	fsr2l,c
   693                           ;rgl.c: 267: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PWM
      +                          .MDMOD;
   694  0043A4  C1E4  F000         	movff	_PWM+9,btemp
   695  0043A8  6A01               	clrf	btemp+1,c
   696  0043AA  C26C  F002         	movff	_rgl+7,btemp+2
   697  0043AE  0EF6               	movlw	246
   698  0043B0  2402               	addwf	btemp+2,w,c
   699  0043B2  6EF6               	movwf	tblptrl,c
   700  0043B4  6AF7               	clrf	tblptrh,c
   701  0043B6  0EFF               	movlw	255
   702  0043B8  22F7               	addwfc	tblptrh,f,c
   703  0043BA  50F7               	movf	tblptrh,w,c
   704  0043BC  0A80               	xorlw	128
   705  0043BE  6E02               	movwf	btemp+2,c
   706  0043C0  5001               	movf	btemp+1,w,c
   707  0043C2  0A80               	xorlw	128
   708  0043C4  5C02               	subwf	btemp+2,w,c
   709  0043C6  E102               	bnz	u325
   710  0043C8  5000               	movf	btemp,w,c
   711  0043CA  5CF6               	subwf	tblptrl,w,c
   712  0043CC                     u325:
   713  0043CC  E203               	bc	l55
   714  0043CE  C1E4  F26C         	movff	_PWM+9,_rgl+7
   715  0043D2  0012               	return	
   716  0043D4                     l55:
   717                           ;rgl.c: 268: else rgl.srp-=k;
   718  0043D4  0102               	movlb	(_rgl+7) shr (0+8)
   719  0043D6  0EF6               	movlw	-10
   720  0043D8  276C               	addwf	(_rgl+7)& (0+255),f,b
   721                           ;rgl.c: 269: }
   722  0043DA  0CF6               	retlw	246
   723  0043DC                     l53:
   724                           ;rgl.c: 271: else
   725  0043DC  0E03               	movlw	3
   726  0043DE  EC51  F073         	call	_StartRTdS
   727                           ;rgl.c: 274: DtCO.dDCO=0;
   728  0043E2  0101               	movlb	(_DtCO+9) shr (0+8)
   729  0043E4  6BBF               	clrf	(_DtCO+9)& (0+255),b
   730                           ;rgl.c: 275: DtCO.indCO=0;
   731  0043E6  0101               	movlb	(_DtCO+10) shr (0+8)
   732  0043E8  6BC0               	clrf	(_DtCO+10)& (0+255),b
   733                           ;rgl.c: 276: rgl.fz=0;
   734  0043EA  0102               	movlb	_rgl shr (0+8)
   735  0043EC  9565               	bcf	_rgl& (0+255),2,b
   736                           ;rgl.c: 277: rgl.med_up=0;
   737  0043EE  9765               	bcf	_rgl& (0+255),3,b
   738                           ;rgl.c: 278: rgl.fast_up=0;
   739  0043F0  9965               	bcf	_rgl& (0+255),4,b
   740                           ;rgl.c: 280: if(PWM.MMAXCO>PWM.FIRSTPB)
   741  0043F2  C1FA  FFE8         	movff	_PWM+31,wreg
   742  0043F6  0101               	movlb	(_PWM+26) shr (0+8)
   743  0043F8  61F5               	cpfslt	(_PWM+26)& (0+255),b
   744  0043FA  D003               	goto	l58
   745                           ;rgl.c: 281: {
   746  0043FC  C1F5  F26D         	movff	_PWM+26,_rgl+8
   747                           ;rgl.c: 283: }
   748  004400  D002               	goto	l59
   749  004402                     l58:
   750                           ;rgl.c: 284: else
   751  004402  C1FA  F26D         	movff	_PWM+31,_rgl+8
   752  004406                     l59:
   753                           ;rgl.c: 287: }
   754  004406  0102               	movlb	(_rgl+7) shr (0+8)
   755  004408  6B6C               	clrf	(_rgl+7)& (0+255),b
   756                           ;rgl.c: 291: rgl.ytmp=0;
   757  00440A  6B6B               	clrf	(_rgl+6)& (0+255),b
   758                           ;rgl.c: 292: rgl.nmod=0;
   759  00440C  9B65               	bcf	_rgl& (0+255),5,b
   760                           ;rgl.c: 293: rgl.btcw=0;
   761  00440E  9365               	bcf	_rgl& (0+255),1,b
   762                           ;rgl.c: 294: rgl.btco=1;
   763  004410  8165               	bsf	_rgl& (0+255),0,b
   764                           ;rgl.c: 295: rgl.del1s=0;
   765  004412  9D65               	bcf	_rgl& (0+255),6,b
   766                           ;rgl.c: 296: rgl.deln1=0;
   767  004414  9F65               	bcf	_rgl& (0+255),7,b
   768                           ;rgl.c: 297: rgl.inv_mod=0;
   769  004416  9166               	bcf	(_rgl+1)& (0+255),0,b
   770                           ;rgl.c: 298: }
   771  004418  0012               	return	
   772  00441A                     __end_of_StartMCO1F:
   773                           ;rgl.c: 302: void ModZgCO(void)
   774                           ;rgl.c: 303: {
   775  00441A                     _ModZgCO:
   776  000000                     
   777                           ;rgl.c: 304: signed long m;
   778  00441A  0102               	movlb	_rgl shr (0+8)
   779  00441C  A565               	btfss	_rgl& (0+255),2,b
   780  00441E  D00A               	goto	l61
   781                           ;rgl.c: 309: {
   782  004420  0E0A               	movlw	10
   783  004422  ECB3  F036         	call	_Tnizsza
   784  004426  A0D8               	btfss	status,0,c
   785  004428  0012               	return	
   786                           ;rgl.c: 311: {
   787  00442A  C1DC  F26D         	movff	_PWM+1,_rgl+8
   788                           ;rgl.c: 313: rgl.srp=0;
   789  00442E  0102               	movlb	(_rgl+7) shr (0+8)
   790  004430  6B6C               	clrf	(_rgl+7)& (0+255),b
   791                           ;rgl.c: 314: rgl.ytmp=0;
   792  004432  6B6B               	clrf	(_rgl+6)& (0+255),b
   793                           ;rgl.c: 315: }
   794                           ;rgl.c: 316: else return;
   795  004434                     l61:
   796                           ;rgl.c: 317: }
   797  004434  0E05               	movlw	5
   798  004436  ECB3  F036         	call	_Tnizsza
   799  00443A  E204               	bc	u381
   800  00443C  0E00               	movlw	0
   801  00443E  EC91  F036         	call	_Tmaleje
   802  004442  E207               	bc	u420
   803  004444                     u381:
   804  004444  0E02               	movlw	2
   805  004446  ECB3  F036         	call	_Tnizsza
   806  00444A  E213               	bc	l64
   807  00444C  ECAC  F036         	call	_Tstoi	;wreg free
   808  004450  E310               	bnc	l64
   809  004452                     u420:
   810                           ;rgl.c: 320: {
   811  004452  0102               	movlb	_rgl shr (0+8)
   812  004454  8565               	bsf	_rgl& (0+255),2,b
   813                           ;rgl.c: 322: rgl.srp=PWM.BufPWM;
   814  004456  C1DC  F26C         	movff	_PWM+1,_rgl+7
   815                           ;rgl.c: 323: rgl.xmod=PWM.BufPWM;
   816  00445A  C1DC  F26D         	movff	_PWM+1,_rgl+8
   817                           ;rgl.c: 324: if(rgl.xmod>PWM.MGMOD)
   818  00445E  C26D  FFE8         	movff	_rgl+8,wreg
   819  004462  0101               	movlb	(_PWM+12) shr (0+8)
   820  004464  61E7               	cpfslt	(_PWM+12)& (0+255),b
   821  004466  0012               	return	
   822                           ;rgl.c: 325: {
   823  004468  C1E7  F26C         	movff	_PWM+12,_rgl+7
   824                           ;rgl.c: 327: rgl.xmod=PWM.MGMOD;
   825  00446C  C1E7  F26D         	movff	_PWM+12,_rgl+8
   826                           ;rgl.c: 328: }
   827  004470  0012               	return	
   828  004472                     l64:
   829                           ;rgl.c: 330: }
   830  004472  C1E4  FFE8         	movff	_PWM+9,wreg
   831  004476  0102               	movlb	(_rgl+8) shr (0+8)
   832  004478  5D6D               	subwf	(_rgl+8)& (0+255),w,b
   833  00447A  E318               	bnc	l66
   834  00447C  0E0A               	movlw	10
   835  00447E  6E02               	movwf	btemp+2,c
   836  004480  6A03               	clrf	btemp+3,c
   837  004482  C1E4  FFE8         	movff	_PWM+9,wreg
   838  004486  C26D  F000         	movff	_rgl+8,btemp
   839  00448A  6A01               	clrf	btemp+1,c
   840  00448C  5E00               	subwf	btemp,f,c
   841  00448E  0E00               	movlw	0
   842  004490  5A01               	subwfb	btemp+1,f,c
   843  004492  EC92  F078         	call	awmul
   844  004496  0100               	movlb	__Lparam shr (0+8)
   845  004498  C004  F0E9         	movff	btemp+4,?a_ModZgCO
   846  00449C  C005  F0EA         	movff	btemp+5,?a_ModZgCO+1
   847  0044A0  0E00               	movlw	0
   848  0044A2  BFEA               	btfsc	(?a_ModZgCO+1)^(__Lparam& (0+65280)),7,b
   849  0044A4  0EFF               	movlw	-1
   850  0044A6  6FEB               	movwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   851  0044A8  6FEC               	movwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   852  0044AA  D005               	goto	l67
   853  0044AC                     l66:
   854                           ;rgl.c: 332: else m=0;
   855  0044AC  0100               	movlb	__Lparam shr (0+8)
   856  0044AE  6BE9               	clrf	?a_ModZgCO^(__Lparam& (0+65280)),b
   857  0044B0  6BEA               	clrf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
   858  0044B2  6BEB               	clrf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   859  0044B4  6BEC               	clrf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   860  0044B6                     l67:
   861                           ;rgl.c: 333: m=m/(DtCO.MAD_CO-DtCO.DAD_CO);
   862  0044B6  C1C4  FFE8         	movff	_DtCO+14,wreg
   863  0044BA  C1C3  F000         	movff	_DtCO+13,btemp
   864  0044BE  5C00               	subwf	btemp,w,c
   865  0044C0  6E04               	movwf	btemp+4,c
   866  0044C2  6A05               	clrf	btemp+5,c
   867  0044C4  A0D8               	btfss	status,0,c
   868  0044C6  0605               	decf	btemp+5,f,c
   869  0044C8  6A06               	clrf	btemp+6,c
   870  0044CA  BE05               	btfsc	btemp+5,7,c
   871  0044CC  0606               	decf	btemp+6,f,c
   872  0044CE  5006               	movf	btemp+6,w,c
   873  0044D0  6E07               	movwf	btemp+7,c
   874  0044D2  0EE9               	movlw	low ?a_ModZgCO
   875  0044D4  6EE9               	movwf	fsr0l,c
   876  0044D6  0E00               	movlw	high ?a_ModZgCO
   877  0044D8  6EEA               	movwf	fsr0h,c
   878  0044DA  ECB8  F078         	call	aldiv_f
   879                           ;rgl.c: 334: m=m*(DtCO.AC_CO-DtCO.DAD_CO);
   880  0044DE  C1C4  FFE8         	movff	_DtCO+14,wreg
   881  0044E2  C1C2  F000         	movff	_DtCO+12,btemp
   882  0044E6  5C00               	subwf	btemp,w,c
   883  0044E8  6E04               	movwf	btemp+4,c
   884  0044EA  6A05               	clrf	btemp+5,c
   885  0044EC  A0D8               	btfss	status,0,c
   886  0044EE  0605               	decf	btemp+5,f,c
   887  0044F0  6A06               	clrf	btemp+6,c
   888  0044F2  BE05               	btfsc	btemp+5,7,c
   889  0044F4  0606               	decf	btemp+6,f,c
   890  0044F6  5006               	movf	btemp+6,w,c
   891  0044F8  6E07               	movwf	btemp+7,c
   892  0044FA  0EE9               	movlw	low ?a_ModZgCO
   893  0044FC  6EE9               	movwf	fsr0l,c
   894  0044FE  0E00               	movlw	high ?a_ModZgCO
   895  004500  6EEA               	movwf	fsr0h,c
   896  004502  ECAE  F078         	call	almul_f
   897                           ;rgl.c: 335: if(m<0) m=0;
   898  004506  0100               	movlb	__Lparam shr (0+8)
   899  004508  AFEC               	btfss	(?a_ModZgCO+3)^(__Lparam& (0+65280)),7,b
   900  00450A  D004               	goto	l68
   901  00450C  6BE9               	clrf	?a_ModZgCO^(__Lparam& (0+65280)),b
   902  00450E  6BEA               	clrf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
   903  004510  6BEB               	clrf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   904  004512  6BEC               	clrf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   905  004514                     l68:
   906                           ;rgl.c: 336: m=m/10+PWM.MDMOD;
   907  004514  0E0A               	movlw	10
   908  004516  6E04               	movwf	btemp+4,c
   909  004518  6A05               	clrf	btemp+5,c
   910  00451A  6A06               	clrf	btemp+6,c
   911  00451C  6A07               	clrf	btemp+7,c
   912  00451E  C0E9  F000         	movff	?a_ModZgCO,btemp
   913  004522  C0EA  F001         	movff	?a_ModZgCO+1,btemp+1
   914  004526  C0EB  F002         	movff	?a_ModZgCO+2,btemp+2
   915  00452A  C0EC  F003         	movff	?a_ModZgCO+3,btemp+3
   916  00452E  EC10  F078         	call	aldiv
   917  004532  C1E4  FFE8         	movff	_PWM+9,wreg
   918  004536  2400               	addwf	btemp,w,c
   919  004538  0100               	movlb	__Lparam shr (0+8)
   920  00453A  6FE9               	movwf	?a_ModZgCO^(__Lparam& (0+65280)),b
   921  00453C  0E00               	movlw	0
   922  00453E  2001               	addwfc	btemp+1,w,c
   923  004540  6FEA               	movwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),b
   924  004542  0E00               	movlw	0
   925  004544  2002               	addwfc	btemp+2,w,c
   926  004546  6FEB               	movwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),b
   927  004548  0E00               	movlw	0
   928  00454A  2003               	addwfc	btemp+3,w,c
   929  00454C  6FEC               	movwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),b
   930                           ;rgl.c: 337: if(m>0xff)
   931  00454E  51EC               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
   932  004550  0A80               	xorlw	128
   933  004552  0F80               	addlw	128
   934  004554  E108               	bnz	u465
   935  004556  0E00               	movlw	0
   936  004558  5DEB               	subwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
   937  00455A  E105               	bnz	u465
   938  00455C  0E01               	movlw	1
   939  00455E  5DEA               	subwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
   940  004560  E102               	bnz	u465
   941  004562  0E00               	movlw	0
   942  004564  5DE9               	subwf	?a_ModZgCO^(__Lparam& (0+65280)),w
   943  004566                     u465:
   944                           ;rgl.c: 338: {
   945  004566  0102               	movlb	_rgl shr (0+8)
   946  004568  E304               	bnc	L15
   947  00456A  9565               	bcf	_rgl& (0+255),2,b
   948                           ;rgl.c: 340: rgl.tmp_pwm=rgl.xmod;
   949  00456C  C26D  F26E         	movff	_rgl+8,_rgl+9
   950                           ;rgl.c: 341: return;
   951  004570  0012               	return	
   952                           ;rgl.c: 342: }
   953  004572                     L15:
   954  004572  A565               	btfss	_rgl& (0+255),2,b
   955  004574  D01C               	goto	l70
   956  004576  C26D  F000         	movff	_rgl+8,btemp
   957  00457A  6A01               	clrf	btemp+1,c
   958  00457C  6A02               	clrf	btemp+2,c
   959  00457E  6A03               	clrf	btemp+3,c
   960  004580  0100               	movlb	__Lparam shr (0+8)
   961  004582  51EC               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
   962  004584  0A80               	xorlw	128
   963  004586  6E04               	movwf	btemp+4,c
   964  004588  5003               	movf	btemp+3,w,c
   965  00458A  0A80               	xorlw	128
   966  00458C  5C04               	subwf	btemp+4,w,c
   967  00458E  E108               	bnz	u485
   968  004590  5002               	movf	btemp+2,w,c
   969  004592  5DEB               	subwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
   970  004594  E105               	bnz	u485
   971  004596  5001               	movf	btemp+1,w,c
   972  004598  5DEA               	subwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
   973  00459A  E102               	bnz	u485
   974  00459C  5000               	movf	btemp,w,c
   975  00459E  5DE9               	subwf	?a_ModZgCO^(__Lparam& (0+65280)),w
   976  0045A0                     u485:
   977  0045A0  E206               	bc	l70
   978                           ;rgl.c: 344: rgl.srp=(rgl.xmod-m);
   979  0045A2  0100               	movlb	__Lparam shr (0+8)
   980  0045A4  51E9               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
   981  0045A6  0102               	movlb	(_rgl+8) shr (0+8)
   982  0045A8  5D6D               	subwf	(_rgl+8)& (0+255),w,b
   983  0045AA  CFE8 F26C          	movff	wreg,_rgl+7
   984  0045AE                     l70:
   985                           ;rgl.c: 345: m+=rgl.srp;
   986  0045AE  C26C  FFE8         	movff	_rgl+7,wreg
   987  0045B2  0100               	movlb	__Lparam shr (0+8)
   988  0045B4  27E9               	addwf	?a_ModZgCO^(__Lparam& (0+65280)),f,b
   989  0045B6  0E01               	movlw	1
   990  0045B8  B0D8               	btfsc	status,0,c
   991  0045BA  27EA               	addwf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),f,b
   992  0045BC  B0D8               	btfsc	status,0,c
   993  0045BE  27EB               	addwf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),f,b
   994  0045C0  B0D8               	btfsc	status,0,c
   995  0045C2  27EC               	addwf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),f,b
   996                           ;rgl.c: 346: if(m>rgl.xmod) p=rgl.xmod;
   997  0045C4  C26D  F000         	movff	_rgl+8,btemp
   998  0045C8  6A01               	clrf	btemp+1,c
   999  0045CA  6A02               	clrf	btemp+2,c
  1000  0045CC  6A03               	clrf	btemp+3,c
  1001  0045CE  5003               	movf	btemp+3,w,c
  1002  0045D0  0A80               	xorlw	128
  1003  0045D2  6E04               	movwf	btemp+4,c
  1004  0045D4  51EC               	movf	(?a_ModZgCO+3)^(__Lparam& (0+65280)),w
  1005  0045D6  0A80               	xorlw	128
  1006  0045D8  5C04               	subwf	btemp+4,w,c
  1007  0045DA  E108               	bnz	u505
  1008  0045DC  51EB               	movf	(?a_ModZgCO+2)^(__Lparam& (0+65280)),w
  1009  0045DE  5C02               	subwf	btemp+2,w,c
  1010  0045E0  E105               	bnz	u505
  1011  0045E2  51EA               	movf	(?a_ModZgCO+1)^(__Lparam& (0+65280)),w
  1012  0045E4  5C01               	subwf	btemp+1,w,c
  1013  0045E6  E102               	bnz	u505
  1014  0045E8  51E9               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1015  0045EA  5C00               	subwf	btemp,w,c
  1016  0045EC                     u505:
  1017  0045EC  E203               	bc	l71
  1018  0045EE  C26D  FFD9         	movff	_rgl+8,fsr2l
  1019  0045F2  D003               	goto	l72
  1020  0045F4                     l71:
  1021                           ;rgl.c: 347: else p=m;
  1022  0045F4  0100               	movlb	__Lparam shr (0+8)
  1023  0045F6  51E9               	movf	?a_ModZgCO^(__Lparam& (0+65280)),w
  1024  0045F8  6ED9               	movwf	fsr2l,c
  1025  0045FA                     l72:
  1026                           ;rgl.c: 348: rgl.fz=0;
  1027  0045FA  0102               	movlb	_rgl shr (0+8)
  1028  0045FC  9565               	bcf	_rgl& (0+255),2,b
  1029                           ;rgl.c: 349: rgl.tmp_pwm=p;
  1030  0045FE  CFD9 F26E          	movff	fsr2l,_rgl+9
  1031                           ;rgl.c: 350: }
  1032  004602  0012               	return	
  1033  004604                     __end_of_ModZgCO:
  1034                           ;rgl.c: 353: void ModDkCO(void)
  1035                           ;rgl.c: 354: {
  1036  004604                     _ModDkCO:
  1037  000000                     
  1038                           ;rgl.c: 355: signed long m;
  1039  004604  0102               	movlb	_rgl shr (0+8)
  1040  004606  A565               	btfss	_rgl& (0+255),2,b
  1041  004608  0012               	return	
  1042                           ;rgl.c: 360: ada=DtCO.AC_CO-DtCO.DAD_CO;
  1043  00460A  C1C4  FFE8         	movff	_DtCO+14,wreg
  1044  00460E  0101               	movlb	(_DtCO+12) shr (0+8)
  1045  004610  5DC2               	subwf	(_DtCO+12)& (0+255),w,b
  1046  004612  0100               	movlb	__Lparam shr (0+8)
  1047  004614  6FE9               	movwf	?a_ModDkCO^(__Lparam& (0+65280)),b
  1048                           ;rgl.c: 361: k=5;
  1049  004616  0E05               	movlw	5
  1050  004618  6FEA               	movwf	(?a_ModDkCO+1)^(__Lparam& (0+65280)),b
  1051                           ;rgl.c: 362: if(Twyzsza(0)) k=6;
  1052  00461A  0E00               	movlw	0
  1053  00461C  ECC0  F036         	call	_Twyzsza
  1054  004620  E303               	bnc	l75
  1055  004622  0E06               	movlw	6
  1056  004624  0100               	movlb	__Lparam shr (0+8)
  1057  004626  6FEA               	movwf	(?a_ModDkCO+1)^(__Lparam& (0+65280)),b
  1058  004628                     l75:
  1059                           ;rgl.c: 363: m=rgl.srp+k*ada;
  1060  004628  C0E9  F002         	movff	?a_ModDkCO,btemp+2
  1061  00462C  6A03               	clrf	btemp+3,c
  1062  00462E  BE02               	btfsc	btemp+2,7,c
  1063  004630  0603               	decf	btemp+3,f,c
  1064  004632  C0EA  F000         	movff	?a_ModDkCO+1,btemp
  1065  004636  6A01               	clrf	btemp+1,c
  1066  004638  EC92  F078         	call	awmul
  1067  00463C  C26C  FFE8         	movff	_rgl+7,wreg
  1068  004640  2404               	addwf	btemp+4,w,c
  1069  004642  6E00               	movwf	btemp,c
  1070  004644  0E00               	movlw	0
  1071  004646  2005               	addwfc	btemp+5,w,c
  1072  004648  6E01               	movwf	btemp+1,c
  1073  00464A  0100               	movlb	__Lparam shr (0+8)
  1074  00464C  C000  F0EB         	movff	btemp,?a_ModDkCO+2
  1075  004650  C001  F0EC         	movff	btemp+1,?a_ModDkCO+3
  1076  004654  0E00               	movlw	0
  1077  004656  BFEC               	btfsc	(?a_ModDkCO+3)^(__Lparam& (0+65280)),7,b
  1078  004658  0EFF               	movlw	-1
  1079  00465A  6FED               	movwf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),b
  1080  00465C  6FEE               	movwf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),b
  1081                           ;rgl.c: 364: if(m>rgl.xmod) p=rgl.xmod;
  1082  00465E  C26D  F000         	movff	_rgl+8,btemp
  1083  004662  6A01               	clrf	btemp+1,c
  1084  004664  6A02               	clrf	btemp+2,c
  1085  004666  6A03               	clrf	btemp+3,c
  1086  004668  5003               	movf	btemp+3,w,c
  1087  00466A  0A80               	xorlw	128
  1088  00466C  6E04               	movwf	btemp+4,c
  1089  00466E  51EE               	movf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),w
  1090  004670  0A80               	xorlw	128
  1091  004672  5C04               	subwf	btemp+4,w,c
  1092  004674  E108               	bnz	u535
  1093  004676  51ED               	movf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),w
  1094  004678  5C02               	subwf	btemp+2,w,c
  1095  00467A  E105               	bnz	u535
  1096  00467C  51EC               	movf	(?a_ModDkCO+3)^(__Lparam& (0+65280)),w
  1097  00467E  5C01               	subwf	btemp+1,w,c
  1098  004680  E102               	bnz	u535
  1099  004682  51EB               	movf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1100  004684  5C00               	subwf	btemp,w,c
  1101  004686                     u535:
  1102  004686  E203               	bc	l76
  1103  004688  C26D  FFD9         	movff	_rgl+8,fsr2l
  1104  00468C  D01C               	goto	l77
  1105  00468E                     l76:
  1106                           ;rgl.c: 365: else
  1107  00468E  C1E4  F000         	movff	_PWM+9,btemp
  1108  004692  6A01               	clrf	btemp+1,c
  1109  004694  6A02               	clrf	btemp+2,c
  1110  004696  6A03               	clrf	btemp+3,c
  1111  004698  0100               	movlb	__Lparam shr (0+8)
  1112  00469A  51EE               	movf	(?a_ModDkCO+5)^(__Lparam& (0+65280)),w
  1113  00469C  0A80               	xorlw	128
  1114  00469E  6E04               	movwf	btemp+4,c
  1115  0046A0  5003               	movf	btemp+3,w,c
  1116  0046A2  0A80               	xorlw	128
  1117  0046A4  5C04               	subwf	btemp+4,w,c
  1118  0046A6  E108               	bnz	u545
  1119  0046A8  5002               	movf	btemp+2,w,c
  1120  0046AA  5DED               	subwf	(?a_ModDkCO+4)^(__Lparam& (0+65280)),w
  1121  0046AC  E105               	bnz	u545
  1122  0046AE  5001               	movf	btemp+1,w,c
  1123  0046B0  5DEC               	subwf	(?a_ModDkCO+3)^(__Lparam& (0+65280)),w
  1124  0046B2  E102               	bnz	u545
  1125  0046B4  5000               	movf	btemp,w,c
  1126  0046B6  5DEB               	subwf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1127  0046B8                     u545:
  1128  0046B8  E203               	bc	l78
  1129  0046BA  C1E4  FFD9         	movff	_PWM+9,fsr2l
  1130  0046BE  D003               	goto	l77
  1131  0046C0                     l78:
  1132                           ;rgl.c: 367: else p=m;
  1133  0046C0  0100               	movlb	__Lparam shr (0+8)
  1134  0046C2  51EB               	movf	(?a_ModDkCO+2)^(__Lparam& (0+65280)),w
  1135  0046C4  6ED9               	movwf	fsr2l,c
  1136  0046C6                     l77:
  1137                           ;rgl.c: 368: rgl.tmp_pwm=p;
  1138  0046C6  CFD9 F26E          	movff	fsr2l,_rgl+9
  1139                           ;rgl.c: 369: }
  1140  0046CA  0012               	return	
  1141  0046CC                     __end_of_ModDkCO:
  1142                           ;rgl.c: 374: void ModPruCO(void)
  1143                           ;rgl.c: 375: {
  1144  0046CC                     _ModPruCO:
  1145  000000                     
  1146                           ;rgl.c: 376: static unsigned char l;
  1147  0046CC  0102               	movlb	_rgl shr (0+8)
  1148  0046CE  B565               	btfsc	_rgl& (0+255),2,b
  1149  0046D0  D035               	goto	l81
  1150                           ;rgl.c: 380: {
  1151  0046D2  0E00               	movlw	0
  1152  0046D4  EC91  F036         	call	_Tmaleje
  1153  0046D8  E204               	bc	u580
  1154  0046DA  0E02               	movlw	2
  1155  0046DC  0102               	movlb	(_rgl+6) shr (0+8)
  1156  0046DE  656B               	cpfsgt	(_rgl+6)& (0+255),b
  1157  0046E0  0C02               	retlw	2
  1158  0046E2                     u580:
  1159                           ;rgl.c: 382: {
  1160  0046E2  0102               	movlb	(_rgl+6) shr (0+8)
  1161  0046E4  6B6B               	clrf	(_rgl+6)& (0+255),b
  1162                           ;rgl.c: 384: if(PWM.BufPWM>rgl.xmod) return;
  1163  0046E6  C1DC  FFE8         	movff	_PWM+1,wreg
  1164  0046EA  616D               	cpfslt	(_rgl+8)& (0+255),b
  1165  0046EC  D001               	goto	l83
  1166  0046EE  0012               	return	
  1167  0046F0                     l83:
  1168                           ;rgl.c: 385: tmp=rgl.xmod-PWM.BufPWM;
  1169  0046F0  C1DC  FFE8         	movff	_PWM+1,wreg
  1170  0046F4  0102               	movlb	(_rgl+8) shr (0+8)
  1171  0046F6  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  1172  0046F8  6EE1               	movwf	fsr1l,c
  1173                           ;rgl.c: 386: k=6;
  1174  0046FA  0E06               	movlw	6
  1175  0046FC  6ED9               	movwf	fsr2l,c
  1176                           ;rgl.c: 387: if(k>tmp) k=tmp;
  1177  0046FE  60E1               	cpfslt	fsr1l,c
  1178  004700  D002               	goto	l84
  1179  004702  50E1               	movf	fsr1l,w,c
  1180  004704  6ED9               	movwf	fsr2l,c
  1181  004706                     l84:
  1182                           ;rgl.c: 388: if(rgl.srp+k>PWM.MGMOD) rgl.srp=PWM
      +                          .MGMOD;
  1183  004706  50D9               	movf	fsr2l,w,c
  1184  004708  C26C  F002         	movff	_rgl+7,btemp+2
  1185  00470C  6A03               	clrf	btemp+3,c
  1186  00470E  2602               	addwf	btemp+2,f,c
  1187  004710  0E00               	movlw	0
  1188  004712  2203               	addwfc	btemp+3,f,c
  1189  004714  C1E7  F000         	movff	_PWM+12,btemp
  1190  004718  6A01               	clrf	btemp+1,c
  1191  00471A  5001               	movf	btemp+1,w,c
  1192  00471C  0A80               	xorlw	128
  1193  00471E  6E04               	movwf	btemp+4,c
  1194  004720  5003               	movf	btemp+3,w,c
  1195  004722  0A80               	xorlw	128
  1196  004724  5C04               	subwf	btemp+4,w,c
  1197  004726  E102               	bnz	u615
  1198  004728  5002               	movf	btemp+2,w,c
  1199  00472A  5C00               	subwf	btemp,w,c
  1200  00472C                     u615:
  1201  00472C  E203               	bc	l85
  1202  00472E  C1E7  F26C         	movff	_PWM+12,_rgl+7
  1203  004732  0012               	return	
  1204  004734                     l85:
  1205                           ;rgl.c: 389: else rgl.srp+=k;
  1206  004734  50D9               	movf	fsr2l,w,c
  1207  004736  0102               	movlb	(_rgl+7) shr (0+8)
  1208  004738  276C               	addwf	(_rgl+7)& (0+255),f,b
  1209                           ;rgl.c: 390: }
  1210  00473A  0012               	return	
  1211  00473C                     l81:
  1212                           ;rgl.c: 393: else
  1213  00473C  ECDB  F036         	call	_Trowna	;wreg free
  1214  004740  E301 D08B          	bc	l88
  1215                           ;rgl.c: 396: {
  1216  004744  C1C4  FFE8         	movff	_DtCO+14,wreg
  1217  004748  0101               	movlb	(_DtCO+12) shr (0+8)
  1218  00474A  61C2               	cpfslt	(_DtCO+12)& (0+255),b
  1219  00474C  D038               	goto	l89
  1220                           ;rgl.c: 398: {
  1221  00474E  0E00               	movlw	0
  1222  004750  EC91  F036         	call	_Tmaleje
  1223  004754  B0D8               	btfsc	status,0,c
  1224  004756  0012               	return	
  1225                           ;rgl.c: 400: if(l>=2)
  1226  004758  0E01               	movlw	1
  1227  00475A  010E               	movlb	F1782 shr (0+8)
  1228  00475C  65CA               	cpfsgt	F1782& (0+255),b
  1229  00475E  D003               	goto	l91
  1230                           ;rgl.c: 401: {
  1231  004760  6ED9               	movwf	fsr2l,c
  1232                           ;rgl.c: 403: l=0;
  1233  004762  6BCA               	clrf	F1782& (0+255),b
  1234                           ;rgl.c: 404: }
  1235  004764  D003               	goto	l92
  1236  004766                     l91:
  1237                           ;rgl.c: 405: else
  1238  004766  6AD9               	clrf	fsr2l,c
  1239                           ;rgl.c: 408: l++;
  1240  004768  010E               	movlb	F1782 shr (0+8)
  1241  00476A  2BCA               	incf	F1782& (0+255),f,b
  1242  00476C                     l92:
  1243                           ;rgl.c: 409: }
  1244  00476C  C1E4  F000         	movff	_PWM+9,btemp
  1245  004770  6A01               	clrf	btemp+1,c
  1246  004772  50D9               	movf	fsr2l,w,c
  1247  004774  C26C  F002         	movff	_rgl+7,btemp+2
  1248  004778  6A03               	clrf	btemp+3,c
  1249  00477A  5E02               	subwf	btemp+2,f,c
  1250  00477C  0E00               	movlw	0
  1251  00477E  5A03               	subwfb	btemp+3,f,c
  1252  004780  5003               	movf	btemp+3,w,c
  1253  004782  0A80               	xorlw	128
  1254  004784  6E04               	movwf	btemp+4,c
  1255  004786  5001               	movf	btemp+1,w,c
  1256  004788  0A80               	xorlw	128
  1257  00478A  5C04               	subwf	btemp+4,w,c
  1258  00478C  E102               	bnz	u665
  1259  00478E  5000               	movf	btemp,w,c
  1260  004790  5C02               	subwf	btemp+2,w,c
  1261  004792                     u665:
  1262  004792  E203               	bc	l93
  1263  004794  C1E4  F26C         	movff	_PWM+9,_rgl+7
  1264  004798  D003               	goto	l94
  1265  00479A                     l93:
  1266                           ;rgl.c: 411: else rgl.srp-=k;
  1267  00479A  50D9               	movf	fsr2l,w,c
  1268  00479C  0102               	movlb	(_rgl+7) shr (0+8)
  1269  00479E  5F6C               	subwf	(_rgl+7)& (0+255),f,b
  1270  0047A0                     l94:
  1271                           ;rgl.c: 412: if(rgl.srp>PWM.MAXPWM) rgl.srp=PWM.
      +                          MAXPWM;
  1272  0047A0  C26C  FFE8         	movff	_rgl+7,wreg
  1273  0047A4  0101               	movlb	(_PWM+35) shr (0+8)
  1274  0047A6  61FE               	cpfslt	(_PWM+35)& (0+255),b
  1275  0047A8  D002               	goto	l95
  1276  0047AA  C1FE  F26C         	movff	_PWM+35,_rgl+7
  1277  0047AE                     l95:
  1278                           ;rgl.c: 413: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.s
      +                          rp;
  1279  0047AE  C26C  FFE8         	movff	_rgl+7,wreg
  1280  0047B2  0102               	movlb	(_rgl+8) shr (0+8)
  1281  0047B4  616D               	cpfslt	(_rgl+8)& (0+255),b
  1282  0047B6  0012               	return	
  1283  0047B8  C26C  F26D         	movff	_rgl+7,_rgl+8
  1284                           ;rgl.c: 414: return;
  1285  0047BC  0012               	return	
  1286  0047BE                     l89:
  1287                           ;rgl.c: 416: else
  1288  0047BE  0E00               	movlw	0
  1289  0047C0  EC84  F036         	call	_Trosnie
  1290  0047C4  B0D8               	btfsc	status,0,c
  1291  0047C6  0012               	return	
  1292                           ;rgl.c: 419: if(l>=1)
  1293  0047C8  0E00               	movlw	0
  1294  0047CA  010E               	movlb	F1782 shr (0+8)
  1295  0047CC  65CA               	cpfsgt	F1782& (0+255),b
  1296  0047CE  D004               	goto	l99
  1297                           ;rgl.c: 420: {
  1298  0047D0  0E01               	movlw	1
  1299  0047D2  6ED9               	movwf	fsr2l,c
  1300                           ;rgl.c: 422: l=0;
  1301  0047D4  6BCA               	clrf	F1782& (0+255),b
  1302                           ;rgl.c: 423: }
  1303  0047D6  D003               	goto	l100
  1304  0047D8                     l99:
  1305                           ;rgl.c: 424: else
  1306  0047D8  6AD9               	clrf	fsr2l,c
  1307                           ;rgl.c: 427: l++;
  1308  0047DA  010E               	movlb	F1782 shr (0+8)
  1309  0047DC  2BCA               	incf	F1782& (0+255),f,b
  1310  0047DE                     l100:
  1311                           ;rgl.c: 428: }
  1312  0047DE  C1FE  FFE8         	movff	_PWM+35,wreg
  1313  0047E2  0101               	movlb	(_PWM+12) shr (0+8)
  1314  0047E4  61E7               	cpfslt	(_PWM+12)& (0+255),b
  1315  0047E6  D017               	goto	l101
  1316                           ;rgl.c: 430: {
  1317  0047E8  50D9               	movf	fsr2l,w,c
  1318  0047EA  C26C  F002         	movff	_rgl+7,btemp+2
  1319  0047EE  6A03               	clrf	btemp+3,c
  1320  0047F0  2602               	addwf	btemp+2,f,c
  1321  0047F2  0E00               	movlw	0
  1322  0047F4  2203               	addwfc	btemp+3,f,c
  1323  0047F6  C1E7  F000         	movff	_PWM+12,btemp
  1324  0047FA  6A01               	clrf	btemp+1,c
  1325  0047FC  5001               	movf	btemp+1,w,c
  1326  0047FE  0A80               	xorlw	128
  1327  004800  6E04               	movwf	btemp+4,c
  1328  004802  5003               	movf	btemp+3,w,c
  1329  004804  0A80               	xorlw	128
  1330  004806  5C04               	subwf	btemp+4,w,c
  1331  004808  E102               	bnz	u725
  1332  00480A  5002               	movf	btemp+2,w,c
  1333  00480C  5C00               	subwf	btemp,w,c
  1334  00480E                     u725:
  1335  00480E  E21A               	bc	l105
  1336  004810  C1E7  F26C         	movff	_PWM+12,_rgl+7
  1337  004814  D01A               	goto	l104
  1338                           ;rgl.c: 432: else rgl.srp+=k;
  1339                           ;rgl.c: 433: }
  1340  004816                     l101:
  1341                           ;rgl.c: 434: else
  1342  004816  50D9               	movf	fsr2l,w,c
  1343  004818  C26C  F002         	movff	_rgl+7,btemp+2
  1344  00481C  6A03               	clrf	btemp+3,c
  1345  00481E  2602               	addwf	btemp+2,f,c
  1346  004820  0E00               	movlw	0
  1347  004822  2203               	addwfc	btemp+3,f,c
  1348  004824  C1FE  F000         	movff	_PWM+35,btemp
  1349  004828  6A01               	clrf	btemp+1,c
  1350  00482A  5001               	movf	btemp+1,w,c
  1351  00482C  0A80               	xorlw	128
  1352  00482E  6E04               	movwf	btemp+4,c
  1353  004830  5003               	movf	btemp+3,w,c
  1354  004832  0A80               	xorlw	128
  1355  004834  5C04               	subwf	btemp+4,w,c
  1356  004836  E102               	bnz	u735
  1357  004838  5002               	movf	btemp+2,w,c
  1358  00483A  5C00               	subwf	btemp,w,c
  1359  00483C                     u735:
  1360  00483C  E203               	bc	l105
  1361  00483E  C1FE  F26C         	movff	_PWM+35,_rgl+7
  1362  004842  D003               	goto	l104
  1363  004844                     l105:
  1364                           ;rgl.c: 437: else rgl.srp+=k;
  1365  004844  50D9               	movf	fsr2l,w,c
  1366  004846  0102               	movlb	(_rgl+7) shr (0+8)
  1367  004848  276C               	addwf	(_rgl+7)& (0+255),f,b
  1368  00484A                     l104:
  1369                           ;rgl.c: 438: }
  1370  00484A  C26C  FFE8         	movff	_rgl+7,wreg
  1371  00484E  0102               	movlb	(_rgl+8) shr (0+8)
  1372  004850  616D               	cpfslt	(_rgl+8)& (0+255),b
  1373  004852  0012               	return	
  1374  004854  C26C  F26D         	movff	_rgl+7,_rgl+8
  1375                           ;rgl.c: 440: }
  1376  004858  0012               	return	
  1377  00485A                     l88:
  1378  00485A  010E               	movlb	F1782 shr (0+8)
  1379  00485C  6BCA               	clrf	F1782& (0+255),b
  1380                           ;rgl.c: 442: }
  1381  00485E  0012               	return	
  1382  004860                     __end_of_ModPruCO:
  1383                           ;rgl.c: 447: void IncMaxCO(void)
  1384                           ;rgl.c: 448: {
  1385  004860                     _IncMaxCO:
  1386  000000                     
  1387                           ;rgl.c: 449: unsigned char k;
  1388  004860  0E01               	movlw	1
  1389  004862  EC84  F036         	call	_Trosnie
  1390  004866  B0D8               	btfsc	status,0,c
  1391  004868  0012               	return	
  1392                           ;rgl.c: 453: k=6;
  1393  00486A  0E06               	movlw	6
  1394  00486C  6ED9               	movwf	fsr2l,c
  1395                           ;rgl.c: 454: if(!rgl.fz)
  1396  00486E  0102               	movlb	_rgl shr (0+8)
  1397  004870  B565               	btfsc	_rgl& (0+255),2,b
  1398  004872  D024               	goto	l111
  1399                           ;rgl.c: 455: {
  1400  004874  C26D  F002         	movff	_rgl+8,btemp+2
  1401  004878  6A03               	clrf	btemp+3,c
  1402  00487A  2602               	addwf	btemp+2,f,c
  1403  00487C  0E00               	movlw	0
  1404  00487E  2203               	addwfc	btemp+3,f,c
  1405  004880  C1FE  F000         	movff	_PWM+35,btemp
  1406  004884  6A01               	clrf	btemp+1,c
  1407  004886  5001               	movf	btemp+1,w,c
  1408  004888  0A80               	xorlw	128
  1409  00488A  6E04               	movwf	btemp+4,c
  1410  00488C  5003               	movf	btemp+3,w,c
  1411  00488E  0A80               	xorlw	128
  1412  004890  5C04               	subwf	btemp+4,w,c
  1413  004892  E102               	bnz	u775
  1414  004894  5002               	movf	btemp+2,w,c
  1415  004896  5C00               	subwf	btemp,w,c
  1416  004898                     u775:
  1417  004898  E205               	bc	l112
  1418                           ;rgl.c: 461: {
  1419  00489A  C1FE  F26D         	movff	_PWM+35,_rgl+8
  1420                           ;rgl.c: 463: PmpToUP();
  1421  00489E  EC46  F067         	call	_PmpToUP	;wreg free
  1422                           ;rgl.c: 464: }
  1423  0048A2  D005               	goto	l113
  1424  0048A4                     l112:
  1425                           ;rgl.c: 465: else
  1426  0048A4  0102               	movlb	(_rgl+8) shr (0+8)
  1427  0048A6  0E06               	movlw	6
  1428  0048A8  276D               	addwf	(_rgl+8)& (0+255),f,b
  1429                           ;rgl.c: 468: PmpToDW();
  1430  0048AA  EC6E  F067         	call	_PmpToDW	;wreg free
  1431  0048AE                     l113:
  1432                           ;rgl.c: 469: }
  1433  0048AE  0EF0               	movlw	-16
  1434  0048B0  0102               	movlb	(_rgl+8) shr (0+8)
  1435  0048B2  656D               	cpfsgt	(_rgl+8)& (0+255),b
  1436  0048B4  0CF0               	retlw	240
  1437  0048B6  CFE8 F26D          	movff	wreg,_rgl+8
  1438                           ;rgl.c: 471: }
  1439  0048BA  0CF0               	retlw	240
  1440  0048BC                     l111:
  1441                           ;rgl.c: 472: else
  1442  0048BC  C1FE  FFE8         	movff	_PWM+35,wreg
  1443  0048C0  0101               	movlb	(_PWM+12) shr (0+8)
  1444  0048C2  61E7               	cpfslt	(_PWM+12)& (0+255),b
  1445  0048C4  D01B               	goto	l116
  1446                           ;rgl.c: 475: {
  1447  0048C6  0E06               	movlw	6
  1448  0048C8  C26D  F002         	movff	_rgl+8,btemp+2
  1449  0048CC  6A03               	clrf	btemp+3,c
  1450  0048CE  2602               	addwf	btemp+2,f,c
  1451  0048D0  0E00               	movlw	0
  1452  0048D2  2203               	addwfc	btemp+3,f,c
  1453  0048D4  C1E7  F000         	movff	_PWM+12,btemp
  1454  0048D8  6A01               	clrf	btemp+1,c
  1455  0048DA  5001               	movf	btemp+1,w,c
  1456  0048DC  0A80               	xorlw	128
  1457  0048DE  6E04               	movwf	btemp+4,c
  1458  0048E0  5003               	movf	btemp+3,w,c
  1459  0048E2  0A80               	xorlw	128
  1460  0048E4  5C04               	subwf	btemp+4,w,c
  1461  0048E6  E102               	bnz	u805
  1462  0048E8  5002               	movf	btemp+2,w,c
  1463  0048EA  5C00               	subwf	btemp,w,c
  1464  0048EC                     u805:
  1465  0048EC  E203               	bc	l117
  1466  0048EE  C1E7  F26D         	movff	_PWM+12,_rgl+8
  1467  0048F2  0012               	return	
  1468  0048F4                     l117:
  1469                           ;rgl.c: 477: else rgl.xmod+=k;
  1470  0048F4  0102               	movlb	(_rgl+8) shr (0+8)
  1471  0048F6  0E06               	movlw	6
  1472  0048F8  276D               	addwf	(_rgl+8)& (0+255),f,b
  1473                           ;rgl.c: 478: }
  1474  0048FA  0C06               	retlw	6
  1475  0048FC                     l116:
  1476                           ;rgl.c: 479: else
  1477  0048FC  0E06               	movlw	6
  1478  0048FE  C26D  F002         	movff	_rgl+8,btemp+2
  1479  004902  6A03               	clrf	btemp+3,c
  1480  004904  2602               	addwf	btemp+2,f,c
  1481  004906  0E00               	movlw	0
  1482  004908  2203               	addwfc	btemp+3,f,c
  1483  00490A  C1FE  F000         	movff	_PWM+35,btemp
  1484  00490E  6A01               	clrf	btemp+1,c
  1485  004910  5001               	movf	btemp+1,w,c
  1486  004912  0A80               	xorlw	128
  1487  004914  6E04               	movwf	btemp+4,c
  1488  004916  5003               	movf	btemp+3,w,c
  1489  004918  0A80               	xorlw	128
  1490  00491A  5C04               	subwf	btemp+4,w,c
  1491  00491C  E102               	bnz	u815
  1492  00491E  5002               	movf	btemp+2,w,c
  1493  004920  5C00               	subwf	btemp,w,c
  1494  004922                     u815:
  1495  004922  E203               	bc	l120
  1496  004924  C1FE  F26D         	movff	_PWM+35,_rgl+8
  1497  004928  0012               	return	
  1498  00492A                     l120:
  1499                           ;rgl.c: 482: else rgl.xmod+=k;
  1500  00492A  0102               	movlb	(_rgl+8) shr (0+8)
  1501  00492C  0E06               	movlw	6
  1502  00492E  276D               	addwf	(_rgl+8)& (0+255),f,b
  1503                           ;rgl.c: 483: }
  1504  004930  0C06               	retlw	6
  1505  004932                     __end_of_IncMaxCO:
  1506                           ;rgl.c: 488: void ModPrzCO(void)
  1507                           ;rgl.c: 489: {
  1508  004932                     _ModPrzCO:
  1509  000000                     
  1510                           ;rgl.c: 490: unsigned char k;
  1511  004932  0102               	movlb	_rgl shr (0+8)
  1512  004934  BB65               	btfsc	_rgl& (0+255),5,b
  1513  004936  D025               	goto	l123
  1514                           ;rgl.c: 493: {
  1515  004938  0E03               	movlw	3
  1516  00493A  ECC0  F036         	call	_Twyzsza
  1517  00493E  A0D8               	btfss	status,0,c
  1518  004940  0012               	return	
  1519                           ;rgl.c: 495: {
  1520  004942  0102               	movlb	_rgl shr (0+8)
  1521  004944  8B65               	bsf	_rgl& (0+255),5,b
  1522                           ;rgl.c: 497: k=20;
  1523  004946  0E14               	movlw	20
  1524  004948  6ED9               	movwf	fsr2l,c
  1525                           ;rgl.c: 498: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PWM
      +                          .MDMOD;
  1526  00494A  C1E4  F000         	movff	_PWM+9,btemp
  1527  00494E  6A01               	clrf	btemp+1,c
  1528  004950  C26C  F002         	movff	_rgl+7,btemp+2
  1529  004954  0EEC               	movlw	236
  1530  004956  2402               	addwf	btemp+2,w,c
  1531  004958  6EF6               	movwf	tblptrl,c
  1532  00495A  6AF7               	clrf	tblptrh,c
  1533  00495C  0EFF               	movlw	255
  1534  00495E  22F7               	addwfc	tblptrh,f,c
  1535  004960  50F7               	movf	tblptrh,w,c
  1536  004962  0A80               	xorlw	128
  1537  004964  6E02               	movwf	btemp+2,c
  1538  004966  5001               	movf	btemp+1,w,c
  1539  004968  0A80               	xorlw	128
  1540  00496A  5C02               	subwf	btemp+2,w,c
  1541  00496C  E102               	bnz	u845
  1542  00496E  5000               	movf	btemp,w,c
  1543  004970  5CF6               	subwf	tblptrl,w,c
  1544  004972                     u845:
  1545  004972  E203               	bc	l125
  1546  004974  C1E4  F26C         	movff	_PWM+9,_rgl+7
  1547  004978  0012               	return	
  1548  00497A                     l125:
  1549                           ;rgl.c: 499: else rgl.srp-=k;
  1550  00497A  0102               	movlb	(_rgl+7) shr (0+8)
  1551  00497C  0EEC               	movlw	-20
  1552  00497E  276C               	addwf	(_rgl+7)& (0+255),f,b
  1553                           ;rgl.c: 500: }
  1554  004980  0CEC               	retlw	236
  1555  004982                     l123:
  1556                           ;rgl.c: 502: else
  1557  004982  0E02               	movlw	2
  1558  004984  ECC0  F036         	call	_Twyzsza
  1559  004988  B0D8               	btfsc	status,0,c
  1560  00498A  0012               	return	
  1561                           ;rgl.c: 505: rgl.nmod=0;
  1562  00498C  0102               	movlb	_rgl shr (0+8)
  1563  00498E  9B65               	bcf	_rgl& (0+255),5,b
  1564                           ;rgl.c: 506: }
  1565  004990  0012               	return	
  1566  004992                     __end_of_ModPrzCO:
  1567                           ;rgl.c: 510: void PropOPT(void)
  1568                           ;rgl.c: 511: {
  1569  004992                     _PropOPT:
  1570  000000                     
  1571                           ;rgl.c: 512: if(rgl.nmod)
  1572  004992  0102               	movlb	_rgl shr (0+8)
  1573  004994  BB65               	btfsc	_rgl& (0+255),5,b
  1574  004996  EF34  F036         	goto	l641
  1575                           ;rgl.c: 513: {
  1576                           ;rgl.c: 516: }
  1577  00499A  EF9D  F031         	goto	l486
  1578                           ;rgl.c: 517: else
  1579                           ;rgl.c: 521: }
  1580  00499E                     __end_of_PropOPT:
  1581                           ;rgl.c: 531: void StartCO(void)
  1582                           ;rgl.c: 532: {
  1583  00499E                     _StartCO:
  1584  000000                     
  1585                           ;rgl.c: 533: unsigned char k;
  1586  00499E  0102               	movlb	_rgl shr (0+8)
  1587  0049A0  A165               	btfss	_rgl& (0+255),0,b
  1588  0049A2  B365               	btfsc	_rgl& (0+255),1,b
  1589  0049A4  0012               	return	
  1590                           ;rgl.c: 536: StartRTdS(3);
  1591  0049A6  0E03               	movlw	3
  1592  0049A8  EC51  F073         	call	_StartRTdS
  1593                           ;rgl.c: 537: DtCO.dDCO=0;
  1594  0049AC  0101               	movlb	(_DtCO+9) shr (0+8)
  1595  0049AE  6BBF               	clrf	(_DtCO+9)& (0+255),b
  1596                           ;rgl.c: 538: DtCO.indCO=0;
  1597  0049B0  0101               	movlb	(_DtCO+10) shr (0+8)
  1598  0049B2  6BC0               	clrf	(_DtCO+10)& (0+255),b
  1599                           ;rgl.c: 539: DtCW.dDCW=0;
  1600  0049B4  0101               	movlb	(_DtCW+8) shr (0+8)
  1601  0049B6  6BAF               	clrf	(_DtCW+8)& (0+255),b
  1602                           ;rgl.c: 540: DtCW.indCW=0;
  1603  0049B8  0101               	movlb	(_DtCW+10) shr (0+8)
  1604  0049BA  6BB1               	clrf	(_DtCW+10)& (0+255),b
  1605                           ;rgl.c: 541: rgl.fz=0;
  1606  0049BC  0102               	movlb	_rgl shr (0+8)
  1607  0049BE  9565               	bcf	_rgl& (0+255),2,b
  1608                           ;rgl.c: 542: rgl.med_up=0;
  1609  0049C0  9765               	bcf	_rgl& (0+255),3,b
  1610                           ;rgl.c: 543: rgl.fast_up=0;
  1611  0049C2  9965               	bcf	_rgl& (0+255),4,b
  1612                           ;rgl.c: 545: if(PWM.MMAXCO>PWM.FIRSTPB)
  1613  0049C4  C1FA  FFE8         	movff	_PWM+31,wreg
  1614  0049C8  0101               	movlb	(_PWM+26) shr (0+8)
  1615  0049CA  61F5               	cpfslt	(_PWM+26)& (0+255),b
  1616  0049CC  D003               	goto	l134
  1617                           ;rgl.c: 546: {
  1618  0049CE  C1F5  F26D         	movff	_PWM+26,_rgl+8
  1619                           ;rgl.c: 548: }
  1620  0049D2  D002               	goto	l135
  1621  0049D4                     l134:
  1622                           ;rgl.c: 549: else
  1623  0049D4  C1FA  F26D         	movff	_PWM+31,_rgl+8
  1624  0049D8                     l135:
  1625                           ;rgl.c: 552: }
  1626  0049D8  0102               	movlb	(_rgl+7) shr (0+8)
  1627  0049DA  6B6C               	clrf	(_rgl+7)& (0+255),b
  1628                           ;rgl.c: 554: rgl.ytmp=0;
  1629  0049DC  6B6B               	clrf	(_rgl+6)& (0+255),b
  1630                           ;rgl.c: 555: rgl.nmod=0;
  1631  0049DE  9B65               	bcf	_rgl& (0+255),5,b
  1632                           ;rgl.c: 556: rgl.del1s=0;
  1633  0049E0  9D65               	bcf	_rgl& (0+255),6,b
  1634                           ;rgl.c: 557: rgl.inv_mod=0;
  1635  0049E2  9166               	bcf	(_rgl+1)& (0+255),0,b
  1636                           ;rgl.c: 558: }
  1637  0049E4  0012               	return	
  1638  0049E6                     __end_of_StartCO:
  1639                           ;rgl.c: 561: void StartMCW(void)
  1640                           ;rgl.c: 562: {
  1641  0049E6                     _StartMCW:
  1642  000000                     
  1643                           ;rgl.c: 563: if(rgl.btco||rgl.btcw) return;
  1644  0049E6  0102               	movlb	_rgl shr (0+8)
  1645  0049E8  A165               	btfss	_rgl& (0+255),0,b
  1646  0049EA  B365               	btfsc	_rgl& (0+255),1,b
  1647  0049EC  0012               	return	
  1648                           ;rgl.c: 564: StartRTdS(3);
  1649  0049EE  0E03               	movlw	3
  1650  0049F0  EC51  F073         	call	_StartRTdS
  1651                           ;rgl.c: 565: DtCO.dDCO=0;
  1652  0049F4  0101               	movlb	(_DtCO+9) shr (0+8)
  1653  0049F6  6BBF               	clrf	(_DtCO+9)& (0+255),b
  1654                           ;rgl.c: 566: DtCW.dDCW=0;
  1655  0049F8  0101               	movlb	(_DtCW+8) shr (0+8)
  1656  0049FA  6BAF               	clrf	(_DtCW+8)& (0+255),b
  1657                           ;rgl.c: 567: DtCO.indCO=0;
  1658  0049FC  0101               	movlb	(_DtCO+10) shr (0+8)
  1659  0049FE  6BC0               	clrf	(_DtCO+10)& (0+255),b
  1660                           ;rgl.c: 568: DtCW.indCW=0;
  1661  004A00  0101               	movlb	(_DtCW+10) shr (0+8)
  1662  004A02  6BB1               	clrf	(_DtCW+10)& (0+255),b
  1663                           ;rgl.c: 569: rgl.fz=0;
  1664  004A04  0102               	movlb	_rgl shr (0+8)
  1665  004A06  9565               	bcf	_rgl& (0+255),2,b
  1666                           ;rgl.c: 570: rgl.med_up=0;
  1667  004A08  9765               	bcf	_rgl& (0+255),3,b
  1668                           ;rgl.c: 571: rgl.fast_up=0;
  1669  004A0A  9965               	bcf	_rgl& (0+255),4,b
  1670                           ;rgl.c: 573: rgl.srp=0;
  1671  004A0C  6B6C               	clrf	(_rgl+7)& (0+255),b
  1672                           ;rgl.c: 574: rgl.ytmp=0;
  1673  004A0E  6B6B               	clrf	(_rgl+6)& (0+255),b
  1674                           ;rgl.c: 575: rgl.nmod=0;
  1675  004A10  9B65               	bcf	_rgl& (0+255),5,b
  1676                           ;rgl.c: 576: rgl.del1s=0;
  1677  004A12  9D65               	bcf	_rgl& (0+255),6,b
  1678                           ;rgl.c: 577: rgl.inv_mod=0;
  1679  004A14  9166               	bcf	(_rgl+1)& (0+255),0,b
  1680                           ;rgl.c: 578: rgl.xmod=FirstPCW();
  1681  004A16  D82E               	call	_FirstPCW	;wreg free
  1682  004A18  CFE8 F26D          	movff	wreg,_rgl+8
  1683                           ;rgl.c: 579: tmr=1;
  1684  004A1C  0E01               	movlw	1
  1685  004A1E  CFE8 FEE6          	movff	wreg,_tmr
  1686                           ;rgl.c: 580: tmr2=1;
  1687  004A22  CFE8 FEE7          	movff	wreg,_tmr2
  1688                           ;rgl.c: 581: pwm_center=PWM.MDMOD+(PWM.MGMOD-PWM
      +                          .MDMOD)/2;
  1689  004A26  0E02               	movlw	2
  1690  004A28  6E02               	movwf	btemp+2,c
  1691  004A2A  6A03               	clrf	btemp+3,c
  1692  004A2C  C1E4  FFE8         	movff	_PWM+9,wreg
  1693  004A30  C1E7  F000         	movff	_PWM+12,btemp
  1694  004A34  6A01               	clrf	btemp+1,c
  1695  004A36  5E00               	subwf	btemp,f,c
  1696  004A38  0E00               	movlw	0
  1697  004A3A  5A01               	subwfb	btemp+1,f,c
  1698  004A3C  EC49  F078         	call	awdiv
  1699  004A40  C1E4  F000         	movff	_PWM+9,btemp
  1700  004A44  5000               	movf	btemp,w,c
  1701  004A46  2404               	addwf	btemp+4,w,c
  1702  004A48  CFE8 FEE4          	movff	wreg,_pwm_center
  1703                           ;rgl.c: 582: pwm_kwr=PWM.MDMOD+(PWM.MGMOD-PWM.MD
      +                          MOD)/4;
  1704  004A4C  0E04               	movlw	4
  1705  004A4E  6E02               	movwf	btemp+2,c
  1706  004A50  6A03               	clrf	btemp+3,c
  1707  004A52  C1E4  FFE8         	movff	_PWM+9,wreg
  1708  004A56  C1E7  F000         	movff	_PWM+12,btemp
  1709  004A5A  6A01               	clrf	btemp+1,c
  1710  004A5C  5E00               	subwf	btemp,f,c
  1711  004A5E  0E00               	movlw	0
  1712  004A60  5A01               	subwfb	btemp+1,f,c
  1713  004A62  EC49  F078         	call	awdiv
  1714  004A66  C1E4  F000         	movff	_PWM+9,btemp
  1715  004A6A  5000               	movf	btemp,w,c
  1716  004A6C  2404               	addwf	btemp+4,w,c
  1717  004A6E  CFE8 FEE5          	movff	wreg,_pwm_kwr
  1718                           ;rgl.c: 583: }
  1719  004A72  0012               	return	
  1720  004A74                     __end_of_StartMCW:
  1721                           ;rgl.c: 645: unsigned char FirstPCW(void)
  1722                           ;rgl.c: 646: {
  1723  004A74                     _FirstPCW:
  1724  000000                     
  1725                           ;rgl.c: 647: signed long m;
  1726  004A74  0E04               	movlw	4
  1727  004A76  6E02               	movwf	btemp+2,c
  1728  004A78  6A03               	clrf	btemp+3,c
  1729  004A7A  C1E4  FFE8         	movff	_PWM+9,wreg
  1730  004A7E  C1F5  F000         	movff	_PWM+26,btemp
  1731  004A82  6A01               	clrf	btemp+1,c
  1732  004A84  5E00               	subwf	btemp,f,c
  1733  004A86  0E00               	movlw	0
  1734  004A88  5A01               	subwfb	btemp+1,f,c
  1735  004A8A  EC49  F078         	call	awdiv
  1736  004A8E  5004               	movf	btemp+4,w,c
  1737  004A90  6ED9               	movwf	fsr2l,c
  1738                           ;rgl.c: 655: if(PWM.MMAXCW>(PWM.FIRSTPB+tmp))
  1739  004A92  C1FB  F000         	movff	_PWM+32,btemp
  1740  004A96  6A01               	clrf	btemp+1,c
  1741  004A98  50D9               	movf	fsr2l,w,c
  1742  004A9A  C1F5  F002         	movff	_PWM+26,btemp+2
  1743  004A9E  6A03               	clrf	btemp+3,c
  1744  004AA0  2602               	addwf	btemp+2,f,c
  1745  004AA2  0E00               	movlw	0
  1746  004AA4  2203               	addwfc	btemp+3,f,c
  1747  004AA6  5003               	movf	btemp+3,w,c
  1748  004AA8  0A80               	xorlw	128
  1749  004AAA  6E04               	movwf	btemp+4,c
  1750  004AAC  5001               	movf	btemp+1,w,c
  1751  004AAE  0A80               	xorlw	128
  1752  004AB0  5C04               	subwf	btemp+4,w,c
  1753  004AB2  E102               	bnz	u945
  1754  004AB4  5000               	movf	btemp,w,c
  1755  004AB6  5C02               	subwf	btemp+2,w,c
  1756  004AB8                     u945:
  1757  004AB8  E205               	bc	l139
  1758                           ;rgl.c: 656: {
  1759  004ABA  50D9               	movf	fsr2l,w,c
  1760  004ABC  0101               	movlb	(_PWM+26) shr (0+8)
  1761  004ABE  25F5               	addwf	(_PWM+26)& (0+255),w,b
  1762  004AC0  6EE1               	movwf	fsr1l,c
  1763                           ;rgl.c: 658: }
  1764  004AC2  D002               	goto	l140
  1765  004AC4                     l139:
  1766                           ;rgl.c: 659: else
  1767  004AC4  C1FB  FFE1         	movff	_PWM+32,fsr1l
  1768  004AC8                     l140:
  1769                           ;rgl.c: 662: }
  1770  004AC8  0E13               	movlw	19
  1771  004ACA  0101               	movlb	(_DtCW+2) shr (0+8)
  1772  004ACC  65A9               	cpfsgt	(_DtCW+2)& (0+255),b
  1773  004ACE  D06D               	goto	l141
  1774  004AD0  0E3D               	movlw	61
  1775  004AD2  61A9               	cpfslt	(_DtCW+2)& (0+255),b
  1776  004AD4  D06A               	goto	l141
  1777                           ;rgl.c: 668: {
  1778  004AD6  0E0A               	movlw	10
  1779  004AD8  6E02               	movwf	btemp+2,c
  1780  004ADA  6A03               	clrf	btemp+3,c
  1781  004ADC  0E3C               	movlw	60
  1782  004ADE  6E00               	movwf	btemp,c
  1783  004AE0  6A01               	clrf	btemp+1,c
  1784  004AE2  C1A9  FFE8         	movff	_DtCW+2,wreg
  1785  004AE6  5E00               	subwf	btemp,f,c
  1786  004AE8  0E00               	movlw	0
  1787  004AEA  5A01               	subwfb	btemp+1,f,c
  1788  004AEC  EC92  F078         	call	awmul
  1789  004AF0  0100               	movlb	__Lparam shr (0+8)
  1790  004AF2  C004  F0EA         	movff	btemp+4,?a_FirstPCW+1
  1791  004AF6  C005  F0EB         	movff	btemp+5,?a_FirstPCW+2
  1792  004AFA  0E00               	movlw	0
  1793  004AFC  BFEB               	btfsc	(?a_FirstPCW+2)^(__Lparam& (0+65280)),7,b
  1794  004AFE  0EFF               	movlw	-1
  1795  004B00  6FEC               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1796  004B02  6FED               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1797                           ;rgl.c: 670: m=m/(60-20);
  1798  004B04  0E28               	movlw	40
  1799  004B06  6E04               	movwf	btemp+4,c
  1800  004B08  6A05               	clrf	btemp+5,c
  1801  004B0A  6A06               	clrf	btemp+6,c
  1802  004B0C  6A07               	clrf	btemp+7,c
  1803  004B0E  0EEA               	movlw	low (?a_FirstPCW+1)
  1804  004B10  6EE9               	movwf	fsr0l,c
  1805  004B12  0E00               	movlw	high (?a_FirstPCW+1)
  1806  004B14  6EEA               	movwf	fsr0h,c
  1807  004B16  ECB8  F078         	call	aldiv_f
  1808                           ;rgl.c: 671: m=m*(maxmod-PWM.MDMOD);
  1809  004B1A  C1E4  FFE8         	movff	_PWM+9,wreg
  1810  004B1E  5CE1               	subwf	fsr1l,w,c
  1811  004B20  6E04               	movwf	btemp+4,c
  1812  004B22  6A05               	clrf	btemp+5,c
  1813  004B24  A0D8               	btfss	status,0,c
  1814  004B26  0605               	decf	btemp+5,f,c
  1815  004B28  6A06               	clrf	btemp+6,c
  1816  004B2A  BE05               	btfsc	btemp+5,7,c
  1817  004B2C  0606               	decf	btemp+6,f,c
  1818  004B2E  5006               	movf	btemp+6,w,c
  1819  004B30  6E07               	movwf	btemp+7,c
  1820  004B32  0EEA               	movlw	low (?a_FirstPCW+1)
  1821  004B34  6EE9               	movwf	fsr0l,c
  1822  004B36  0E00               	movlw	high (?a_FirstPCW+1)
  1823  004B38  6EEA               	movwf	fsr0h,c
  1824  004B3A  ECAE  F078         	call	almul_f
  1825                           ;rgl.c: 672: if(m<0) m=0;
  1826  004B3E  AFED               	btfss	(?a_FirstPCW+4)^(__Lparam& (0+65280)),7,b
  1827  004B40  D004               	goto	l142
  1828  004B42  6BEA               	clrf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1829  004B44  6BEB               	clrf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1830  004B46  6BEC               	clrf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1831  004B48  6BED               	clrf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1832  004B4A                     l142:
  1833                           ;rgl.c: 673: m=m/10+PWM.MDMOD;
  1834  004B4A  0E0A               	movlw	10
  1835  004B4C  6E04               	movwf	btemp+4,c
  1836  004B4E  6A05               	clrf	btemp+5,c
  1837  004B50  6A06               	clrf	btemp+6,c
  1838  004B52  6A07               	clrf	btemp+7,c
  1839  004B54  C0EA  F000         	movff	?a_FirstPCW+1,btemp
  1840  004B58  C0EB  F001         	movff	?a_FirstPCW+2,btemp+1
  1841  004B5C  C0EC  F002         	movff	?a_FirstPCW+3,btemp+2
  1842  004B60  C0ED  F003         	movff	?a_FirstPCW+4,btemp+3
  1843  004B64  EC10  F078         	call	aldiv
  1844  004B68  C1E4  FFE8         	movff	_PWM+9,wreg
  1845  004B6C  2400               	addwf	btemp,w,c
  1846  004B6E  0100               	movlb	__Lparam shr (0+8)
  1847  004B70  6FEA               	movwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1848  004B72  0E00               	movlw	0
  1849  004B74  2001               	addwfc	btemp+1,w,c
  1850  004B76  6FEB               	movwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1851  004B78  0E00               	movlw	0
  1852  004B7A  2002               	addwfc	btemp+2,w,c
  1853  004B7C  6FEC               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1854  004B7E  0E00               	movlw	0
  1855  004B80  2003               	addwfc	btemp+3,w,c
  1856  004B82  6FED               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1857                           ;rgl.c: 674: if(m>0xff) p=maxmod;
  1858  004B84  51ED               	movf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),w
  1859  004B86  0A80               	xorlw	128
  1860  004B88  0F80               	addlw	128
  1861  004B8A  E108               	bnz	u995
  1862  004B8C  0E00               	movlw	0
  1863  004B8E  5DEC               	subwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),w
  1864  004B90  E105               	bnz	u995
  1865  004B92  0E01               	movlw	1
  1866  004B94  5DEB               	subwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),w
  1867  004B96  E102               	bnz	u995
  1868  004B98  0E00               	movlw	0
  1869  004B9A  5DEA               	subwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  1870  004B9C                     u995:
  1871  004B9C  E303               	bnc	l143
  1872  004B9E  50E1               	movf	fsr1l,w,c
  1873  004BA0                     L1:
  1874  004BA0  6FE9               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  1875  004BA2  D010               	goto	l145
  1876  004BA4                     l143:
  1877                           ;rgl.c: 675: else p=m;
  1878  004BA4  0100               	movlb	__Lparam shr (0+8)
  1879  004BA6  51EA               	movf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  1880  004BA8  D7FB               	goto	L1
  1881                           ;rgl.c: 676: }
  1882  004BAA                     l141:
  1883                           ;rgl.c: 677: else
  1884  004BAA  0E14               	movlw	20
  1885  004BAC  0101               	movlb	(_DtCW+2) shr (0+8)
  1886  004BAE  61A9               	cpfslt	(_DtCW+2)& (0+255),b
  1887  004BB0  D003               	goto	l146
  1888  004BB2  50E1               	movf	fsr1l,w,c
  1889  004BB4  0100               	movlb	__Lparam shr (0+8)
  1890  004BB6  6FE9               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  1891  004BB8                     l146:
  1892                           ;rgl.c: 680: if(DtCW.CW>60) p=PWM.MDMOD;
  1893  004BB8  0E3C               	movlw	60
  1894  004BBA  0101               	movlb	(_DtCW+2) shr (0+8)
  1895  004BBC  65A9               	cpfsgt	(_DtCW+2)& (0+255),b
  1896  004BBE  D002               	goto	l145
  1897  004BC0  C1E4  F0E9         	movff	_PWM+9,?a_FirstPCW
  1898  004BC4                     l145:
  1899                           ;rgl.c: 681: }
  1900  004BC4  0E0A               	movlw	10
  1901  004BC6  6E02               	movwf	btemp+2,c
  1902  004BC8  6A03               	clrf	btemp+3,c
  1903  004BCA  C1AA  F000         	movff	_DtCW+3,btemp
  1904  004BCE  6A01               	clrf	btemp+1,c
  1905  004BD0  0EE2               	movlw	226
  1906  004BD2  2600               	addwf	btemp,f,c
  1907  004BD4  0EFF               	movlw	255
  1908  004BD6  2201               	addwfc	btemp+1,f,c
  1909  004BD8  EC92  F078         	call	awmul
  1910  004BDC  0100               	movlb	__Lparam shr (0+8)
  1911  004BDE  C004  F0EA         	movff	btemp+4,?a_FirstPCW+1
  1912  004BE2  C005  F0EB         	movff	btemp+5,?a_FirstPCW+2
  1913  004BE6  0E00               	movlw	0
  1914  004BE8  BFEB               	btfsc	(?a_FirstPCW+2)^(__Lparam& (0+65280)),7,b
  1915  004BEA  0EFF               	movlw	-1
  1916  004BEC  6FEC               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1917  004BEE  6FED               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1918                           ;rgl.c: 685: m=m/(60-30);
  1919  004BF0  0E1E               	movlw	30
  1920  004BF2  6E04               	movwf	btemp+4,c
  1921  004BF4  6A05               	clrf	btemp+5,c
  1922  004BF6  6A06               	clrf	btemp+6,c
  1923  004BF8  6A07               	clrf	btemp+7,c
  1924  004BFA  0EEA               	movlw	low (?a_FirstPCW+1)
  1925  004BFC  6EE9               	movwf	fsr0l,c
  1926  004BFE  0E00               	movlw	high (?a_FirstPCW+1)
  1927  004C00  6EEA               	movwf	fsr0h,c
  1928  004C02  ECB8  F078         	call	aldiv_f
  1929                           ;rgl.c: 686: m=m*(maxmod-PWM.MDMOD);
  1930  004C06  C1E4  FFE8         	movff	_PWM+9,wreg
  1931  004C0A  5CE1               	subwf	fsr1l,w,c
  1932  004C0C  6E04               	movwf	btemp+4,c
  1933  004C0E  6A05               	clrf	btemp+5,c
  1934  004C10  A0D8               	btfss	status,0,c
  1935  004C12  0605               	decf	btemp+5,f,c
  1936  004C14  6A06               	clrf	btemp+6,c
  1937  004C16  BE05               	btfsc	btemp+5,7,c
  1938  004C18  0606               	decf	btemp+6,f,c
  1939  004C1A  5006               	movf	btemp+6,w,c
  1940  004C1C  6E07               	movwf	btemp+7,c
  1941  004C1E  0EEA               	movlw	low (?a_FirstPCW+1)
  1942  004C20  6EE9               	movwf	fsr0l,c
  1943  004C22  0E00               	movlw	high (?a_FirstPCW+1)
  1944  004C24  6EEA               	movwf	fsr0h,c
  1945  004C26  ECAE  F078         	call	almul_f
  1946                           ;rgl.c: 687: if(m<0) m=0;
  1947  004C2A  AFED               	btfss	(?a_FirstPCW+4)^(__Lparam& (0+65280)),7,b
  1948  004C2C  D004               	goto	l148
  1949  004C2E  6BEA               	clrf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1950  004C30  6BEB               	clrf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1951  004C32  6BEC               	clrf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1952  004C34  6BED               	clrf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1953  004C36                     l148:
  1954                           ;rgl.c: 688: m=m/10+PWM.MDMOD;
  1955  004C36  0E0A               	movlw	10
  1956  004C38  6E04               	movwf	btemp+4,c
  1957  004C3A  6A05               	clrf	btemp+5,c
  1958  004C3C  6A06               	clrf	btemp+6,c
  1959  004C3E  6A07               	clrf	btemp+7,c
  1960  004C40  C0EA  F000         	movff	?a_FirstPCW+1,btemp
  1961  004C44  C0EB  F001         	movff	?a_FirstPCW+2,btemp+1
  1962  004C48  C0EC  F002         	movff	?a_FirstPCW+3,btemp+2
  1963  004C4C  C0ED  F003         	movff	?a_FirstPCW+4,btemp+3
  1964  004C50  EC10  F078         	call	aldiv
  1965  004C54  C1E4  FFE8         	movff	_PWM+9,wreg
  1966  004C58  2400               	addwf	btemp,w,c
  1967  004C5A  0100               	movlb	__Lparam shr (0+8)
  1968  004C5C  6FEA               	movwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  1969  004C5E  0E00               	movlw	0
  1970  004C60  2001               	addwfc	btemp+1,w,c
  1971  004C62  6FEB               	movwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  1972  004C64  0E00               	movlw	0
  1973  004C66  2002               	addwfc	btemp+2,w,c
  1974  004C68  6FEC               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  1975  004C6A  0E00               	movlw	0
  1976  004C6C  2003               	addwfc	btemp+3,w,c
  1977  004C6E  6FED               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  1978                           ;rgl.c: 689: if(m>0xff) p2=maxmod;
  1979  004C70  51ED               	movf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),w
  1980  004C72  0A80               	xorlw	128
  1981  004C74  0F80               	addlw	128
  1982  004C76  E108               	bnz	u1035
  1983  004C78  0E00               	movlw	0
  1984  004C7A  5DEC               	subwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),w
  1985  004C7C  E105               	bnz	u1035
  1986  004C7E  0E01               	movlw	1
  1987  004C80  5DEB               	subwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),w
  1988  004C82  E102               	bnz	u1035
  1989  004C84  0E00               	movlw	0
  1990  004C86  5DEA               	subwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  1991  004C88                     u1035:
  1992  004C88  E302               	bnc	l149
  1993  004C8A  50E1               	movf	fsr1l,w,c
  1994  004C8C  D002               	goto	L2
  1995  004C8E                     l149:
  1996                           ;rgl.c: 690: else p2=m;
  1997  004C8E  0100               	movlb	__Lparam shr (0+8)
  1998  004C90  51EA               	movf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  1999  004C92                     L2:
  2000  004C92  6ED9               	movwf	fsr2l,c
  2001                           ;rgl.c: 693: if(p>p2) p=p2;
  2002  004C94  0100               	movlb	__Lparam shr (0+8)
  2003  004C96  51E9               	movf	?a_FirstPCW^(__Lparam& (0+65280)),w
  2004  004C98  60D9               	cpfslt	fsr2l,c
  2005  004C9A  D002               	goto	l151
  2006  004C9C  50D9               	movf	fsr2l,w,c
  2007  004C9E  6FE9               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  2008  004CA0                     l151:
  2009                           ;rgl.c: 696: if(DtCW.DCW>=0&&DtCW.DCW<=40)
  2010  004CA0  C1AE  F000         	movff	_DtCW+7,btemp
  2011  004CA4  C1AE  FFE8         	movff	_DtCW+7,wreg
  2012  004CA8  0A80               	xorlw	128
  2013  004CAA  BE00               	btfsc	btemp,7,c
  2014  004CAC  D06C               	goto	L16
  2015  004CAE  0F57               	addlw	-169
  2016  004CB0  E267               	bc	l152
  2017                           ;rgl.c: 697: {
  2018  004CB2  0E0A               	movlw	10
  2019  004CB4  6E02               	movwf	btemp+2,c
  2020  004CB6  6A03               	clrf	btemp+3,c
  2021  004CB8  C1AE  F000         	movff	_DtCW+7,btemp
  2022  004CBC  6A01               	clrf	btemp+1,c
  2023  004CBE  BE00               	btfsc	btemp,7,c
  2024  004CC0  0601               	decf	btemp+1,f,c
  2025  004CC2  EC92  F078         	call	awmul
  2026  004CC6  0100               	movlb	__Lparam shr (0+8)
  2027  004CC8  C004  F0EA         	movff	btemp+4,?a_FirstPCW+1
  2028  004CCC  C005  F0EB         	movff	btemp+5,?a_FirstPCW+2
  2029  004CD0  0E00               	movlw	0
  2030  004CD2  BFEB               	btfsc	(?a_FirstPCW+2)^(__Lparam& (0+65280)),7,b
  2031  004CD4  0EFF               	movlw	-1
  2032  004CD6  6FEC               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  2033  004CD8  6FED               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  2034                           ;rgl.c: 699: m=m/(40-0);
  2035  004CDA  0E28               	movlw	40
  2036  004CDC  6E04               	movwf	btemp+4,c
  2037  004CDE  6A05               	clrf	btemp+5,c
  2038  004CE0  6A06               	clrf	btemp+6,c
  2039  004CE2  6A07               	clrf	btemp+7,c
  2040  004CE4  0EEA               	movlw	low (?a_FirstPCW+1)
  2041  004CE6  6EE9               	movwf	fsr0l,c
  2042  004CE8  0E00               	movlw	high (?a_FirstPCW+1)
  2043  004CEA  6EEA               	movwf	fsr0h,c
  2044  004CEC  ECB8  F078         	call	aldiv_f
  2045                           ;rgl.c: 700: m=m*(maxmod-PWM.MDMOD);
  2046  004CF0  C1E4  FFE8         	movff	_PWM+9,wreg
  2047  004CF4  5CE1               	subwf	fsr1l,w,c
  2048  004CF6  6E04               	movwf	btemp+4,c
  2049  004CF8  6A05               	clrf	btemp+5,c
  2050  004CFA  A0D8               	btfss	status,0,c
  2051  004CFC  0605               	decf	btemp+5,f,c
  2052  004CFE  6A06               	clrf	btemp+6,c
  2053  004D00  BE05               	btfsc	btemp+5,7,c
  2054  004D02  0606               	decf	btemp+6,f,c
  2055  004D04  5006               	movf	btemp+6,w,c
  2056  004D06  6E07               	movwf	btemp+7,c
  2057  004D08  0EEA               	movlw	low (?a_FirstPCW+1)
  2058  004D0A  6EE9               	movwf	fsr0l,c
  2059  004D0C  0E00               	movlw	high (?a_FirstPCW+1)
  2060  004D0E  6EEA               	movwf	fsr0h,c
  2061  004D10  ECAE  F078         	call	almul_f
  2062                           ;rgl.c: 701: if(m<0) m=0;
  2063  004D14  AFED               	btfss	(?a_FirstPCW+4)^(__Lparam& (0+65280)),7,b
  2064  004D16  D004               	goto	l153
  2065  004D18  6BEA               	clrf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  2066  004D1A  6BEB               	clrf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  2067  004D1C  6BEC               	clrf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  2068  004D1E  6BED               	clrf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  2069  004D20                     l153:
  2070                           ;rgl.c: 702: m=m/10+PWM.MDMOD;
  2071  004D20  0E0A               	movlw	10
  2072  004D22  6E04               	movwf	btemp+4,c
  2073  004D24  6A05               	clrf	btemp+5,c
  2074  004D26  6A06               	clrf	btemp+6,c
  2075  004D28  6A07               	clrf	btemp+7,c
  2076  004D2A  C0EA  F000         	movff	?a_FirstPCW+1,btemp
  2077  004D2E  C0EB  F001         	movff	?a_FirstPCW+2,btemp+1
  2078  004D32  C0EC  F002         	movff	?a_FirstPCW+3,btemp+2
  2079  004D36  C0ED  F003         	movff	?a_FirstPCW+4,btemp+3
  2080  004D3A  EC10  F078         	call	aldiv
  2081  004D3E  C1E4  FFE8         	movff	_PWM+9,wreg
  2082  004D42  2400               	addwf	btemp,w,c
  2083  004D44  0100               	movlb	__Lparam shr (0+8)
  2084  004D46  6FEA               	movwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),b
  2085  004D48  0E00               	movlw	0
  2086  004D4A  2001               	addwfc	btemp+1,w,c
  2087  004D4C  6FEB               	movwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),b
  2088  004D4E  0E00               	movlw	0
  2089  004D50  2002               	addwfc	btemp+2,w,c
  2090  004D52  6FEC               	movwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),b
  2091  004D54  0E00               	movlw	0
  2092  004D56  2003               	addwfc	btemp+3,w,c
  2093  004D58  6FED               	movwf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),b
  2094                           ;rgl.c: 703: if(m>0xff) p2=maxmod;
  2095  004D5A  51ED               	movf	(?a_FirstPCW+4)^(__Lparam& (0+65280)),w
  2096  004D5C  0A80               	xorlw	128
  2097  004D5E  0F80               	addlw	128
  2098  004D60  E108               	bnz	u1095
  2099  004D62  0E00               	movlw	0
  2100  004D64  5DEC               	subwf	(?a_FirstPCW+3)^(__Lparam& (0+65280)),w
  2101  004D66  E105               	bnz	u1095
  2102  004D68  0E01               	movlw	1
  2103  004D6A  5DEB               	subwf	(?a_FirstPCW+2)^(__Lparam& (0+65280)),w
  2104  004D6C  E102               	bnz	u1095
  2105  004D6E  0E00               	movlw	0
  2106  004D70  5DEA               	subwf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  2107  004D72                     u1095:
  2108  004D72  E303               	bnc	l154
  2109  004D74  50E1               	movf	fsr1l,w,c
  2110  004D76                     L3:
  2111  004D76  6ED9               	movwf	fsr2l,c
  2112  004D78  D00F               	goto	l156
  2113  004D7A                     l154:
  2114                           ;rgl.c: 704: else p2=m;
  2115  004D7A  0100               	movlb	__Lparam shr (0+8)
  2116  004D7C  51EA               	movf	(?a_FirstPCW+1)^(__Lparam& (0+65280)),w
  2117  004D7E  D7FB               	goto	L3
  2118                           ;rgl.c: 705: }
  2119  004D80                     l152:
  2120                           ;rgl.c: 706: else
  2121  004D80  C1AE  FFE8         	movff	_DtCW+7,wreg
  2122  004D84  0A80               	xorlw	128
  2123  004D86                     L16:
  2124  004D86  0F57               	addlw	-169
  2125  004D88  E302               	bnc	l157
  2126  004D8A  50E1               	movf	fsr1l,w,c
  2127  004D8C  6ED9               	movwf	fsr2l,c
  2128  004D8E                     l157:
  2129                           ;rgl.c: 709: if(DtCW.DCW<0) p2=PWM.MDMOD;
  2130  004D8E  C1AE  F000         	movff	_DtCW+7,btemp
  2131  004D92  BE00               	btfsc	btemp,7,c
  2132  004D94  C1E4  FFD9         	movff	_PWM+9,fsr2l
  2133  004D98                     l156:
  2134                           ;rgl.c: 710: }
  2135  004D98  0100               	movlb	__Lparam shr (0+8)
  2136  004D9A  51E9               	movf	?a_FirstPCW^(__Lparam& (0+65280)),w
  2137  004D9C  60D9               	cpfslt	fsr2l,c
  2138  004D9E  D002               	goto	l159
  2139  004DA0  50D9               	movf	fsr2l,w,c
  2140  004DA2  6FE9               	movwf	?a_FirstPCW^(__Lparam& (0+65280)),b
  2141  004DA4                     l159:
  2142                           ;rgl.c: 715: return p;
  2143  004DA4  0100               	movlb	__Lparam shr (0+8)
  2144  004DA6  51E9               	movf	?a_FirstPCW^(__Lparam& (0+65280)),w
  2145  004DA8  0012               	return	
  2146                           ;rgl.c: 716: }
  2147  004DAA                     __end_of_FirstPCW:
  2148                           ;rgl.c: 719: void ClrMod(void)
  2149                           ;rgl.c: 720: {
  2150  004DAA                     _ClrMod:
  2151  000000                     
  2152                           ;rgl.c: 721: rgl.fz=0;
  2153  004DAA  0102               	movlb	_rgl shr (0+8)
  2154  004DAC  9565               	bcf	_rgl& (0+255),2,b
  2155                           ;rgl.c: 722: rgl.med_up=0;
  2156  004DAE  9765               	bcf	_rgl& (0+255),3,b
  2157                           ;rgl.c: 723: rgl.fast_up=0;
  2158  004DB0  9965               	bcf	_rgl& (0+255),4,b
  2159                           ;rgl.c: 724: rgl.xmod=PWM.BufPWM;
  2160  004DB2  C1DC  F26D         	movff	_PWM+1,_rgl+8
  2161                           ;rgl.c: 725: rgl.srp=0;
  2162  004DB6  6B6C               	clrf	(_rgl+7)& (0+255),b
  2163                           ;rgl.c: 726: rgl.ytmp=0;
  2164  004DB8  6B6B               	clrf	(_rgl+6)& (0+255),b
  2165                           ;rgl.c: 727: rgl.nmod=0;
  2166  004DBA  9B65               	bcf	_rgl& (0+255),5,b
  2167                           ;rgl.c: 728: rgl.del1s=0;
  2168  004DBC  9D65               	bcf	_rgl& (0+255),6,b
  2169                           ;rgl.c: 729: rgl.inv_mod=0;
  2170  004DBE  9166               	bcf	(_rgl+1)& (0+255),0,b
  2171                           ;rgl.c: 730: }
  2172  004DC0  0012               	return	
  2173  004DC2                     __end_of_ClrMod:
  2174                           ;rgl.c: 733: void ModToCW(void)
  2175                           ;rgl.c: 734: {
  2176  004DC2                     _ModToCW:
  2177  000000                     
  2178                           ;rgl.c: 735: rgl.btcw=1;
  2179  004DC2  0102               	movlb	_rgl shr (0+8)
  2180  004DC4  8365               	bsf	_rgl& (0+255),1,b
  2181                           ;rgl.c: 736: if(rgl.btco)
  2182  004DC6  A165               	btfss	_rgl& (0+255),0,b
  2183  004DC8  0012               	return	
  2184                           ;rgl.c: 737: {
  2185  004DCA  9165               	bcf	_rgl& (0+255),0,b
  2186                           ;rgl.c: 739: ClrMod();
  2187  004DCC  D7EE               	goto	_ClrMod	;wreg free
  2188                           ;rgl.c: 740: }
  2189  004DCE                     __end_of_ModToCW:
  2190                           ;rgl.c: 744: void ModToCO(void)
  2191                           ;rgl.c: 745: {
  2192  004DCE                     _ModToCO:
  2193  000000                     
  2194                           ;rgl.c: 746: rgl.btco=1;
  2195  004DCE  0102               	movlb	_rgl shr (0+8)
  2196  004DD0  8165               	bsf	_rgl& (0+255),0,b
  2197                           ;rgl.c: 747: if(rgl.btcw)
  2198  004DD2  A365               	btfss	_rgl& (0+255),1,b
  2199  004DD4  0012               	return	
  2200                           ;rgl.c: 748: {
  2201  004DD6  9365               	bcf	_rgl& (0+255),1,b
  2202                           ;rgl.c: 750: ClrMod();
  2203  004DD8  D7E8               	goto	_ClrMod	;wreg free
  2204                           ;rgl.c: 751: }
  2205  004DDA                     __end_of_ModToCO:
  2206                           ;rgl.c: 755: void IncConstCOCW(void)
  2207                           ;rgl.c: 756: {
  2208  004DDA                     _IncConstCOCW:
  2209  000000                     
  2210                           ;rgl.c: 757: if(Tstoi()) rgl.ytmp++;
  2211  004DDA  ECAC  F036         	call	_Tstoi	;wreg free
  2212  004DDE  0102               	movlb	(_rgl+6) shr (0+8)
  2213  004DE0  E302               	bnc	L17
  2214  004DE2  2B6B               	incf	(_rgl+6)& (0+255),f,b
  2215  004DE4  0C01               	retlw	1
  2216                           ;rgl.c: 758: else rgl.ytmp=0;
  2217  004DE6                     L17:
  2218  004DE6  6B6B               	clrf	(_rgl+6)& (0+255),b
  2219                           ;rgl.c: 759: }
  2220  004DE8  0012               	return	
  2221  004DEA                     __end_of_IncConstCOCW:
  2222                           ;rgl.c: 762: void ReadDataCO(void)
  2223                           ;rgl.c: 763: {
  2224  004DEA                     _ReadDataCO:
  2225  000000                     
  2226                           ;rgl.c: 764: rgl.x_t=DtCO.DCO;
  2227  004DEA  C1BE  F267         	movff	_DtCO+8,_rgl+2
  2228                           ;rgl.c: 765: rgl.x_dt=DtCO.dDCO;
  2229  004DEE  C1BF  F269         	movff	_DtCO+9,_rgl+4
  2230                           ;rgl.c: 766: }
  2231  004DF2  0012               	return	
  2232  004DF4                     __end_of_ReadDataCO:
  2233                           ;rgl.c: 769: void ReadDataCW(void)
  2234                           ;rgl.c: 770: {
  2235  004DF4                     _ReadDataCW:
  2236  000000                     
  2237                           ;rgl.c: 771: rgl.x_t=DtCW.DCW;
  2238  004DF4  C1AE  F267         	movff	_DtCW+7,_rgl+2
  2239                           ;rgl.c: 772: rgl.x_f=DtCO.DCO;
  2240  004DF8  C1BE  F268         	movff	_DtCO+8,_rgl+3
  2241                           ;rgl.c: 773: rgl.x_dt=DtCW.dDCW;
  2242  004DFC  C1AF  F269         	movff	_DtCW+8,_rgl+4
  2243                           ;rgl.c: 774: rgl.x_df=DtCO.dDCO;
  2244  004E00  C1BF  F26A         	movff	_DtCO+9,_rgl+5
  2245                           ;rgl.c: 775: }
  2246  004E04  0012               	return	
  2247  004E06                     __end_of_ReadDataCW:
  2248                           ;rgl.c: 778: void ModZgCW(void)
  2249                           ;rgl.c: 779: {
  2250  004E06                     _ModZgCW:
  2251  000000                     
  2252                           ;rgl.c: 780: signed long m;
  2253  004E06  0102               	movlb	_rgl shr (0+8)
  2254  004E08  A565               	btfss	_rgl& (0+255),2,b
  2255  004E0A  D00C               	goto	l171
  2256                           ;rgl.c: 783: {
  2257  004E0C  0E03               	movlw	3
  2258  004E0E  ECB3  F036         	call	_Tnizsza
  2259  004E12  A0D8               	btfss	status,0,c
  2260  004E14  0012               	return	
  2261                           ;rgl.c: 785: {
  2262  004E16  C1DC  F26D         	movff	_PWM+1,_rgl+8
  2263                           ;rgl.c: 787: rgl.srp=0;
  2264  004E1A  0102               	movlb	(_rgl+7) shr (0+8)
  2265  004E1C  6B6C               	clrf	(_rgl+7)& (0+255),b
  2266                           ;rgl.c: 788: rgl.ytmp=0;
  2267  004E1E  6B6B               	clrf	(_rgl+6)& (0+255),b
  2268                           ;rgl.c: 789: rgl.nmod=0;
  2269  004E20  9B65               	bcf	_rgl& (0+255),5,b
  2270                           ;rgl.c: 790: rgl.del1s=0;
  2271  004E22  9D65               	bcf	_rgl& (0+255),6,b
  2272                           ;rgl.c: 791: }
  2273                           ;rgl.c: 792: else return;
  2274  004E24                     l171:
  2275                           ;rgl.c: 793: }
  2276  004E24  0E00               	movlw	0
  2277  004E26  ECC0  F036         	call	_Twyzsza
  2278  004E2A  E315               	bnc	l174
  2279  004E2C  ECAC  F036         	call	_Tstoi	;wreg free
  2280  004E30  E312               	bnc	l174
  2281                           ;rgl.c: 795: {
  2282  004E32  0102               	movlb	_rgl shr (0+8)
  2283  004E34  8565               	bsf	_rgl& (0+255),2,b
  2284                           ;rgl.c: 797: rgl.fast_up=0;
  2285  004E36  9965               	bcf	_rgl& (0+255),4,b
  2286                           ;rgl.c: 798: rgl.med_up=0;
  2287  004E38  9765               	bcf	_rgl& (0+255),3,b
  2288                           ;rgl.c: 799: rgl.srp=PWM.BufPWM;
  2289  004E3A  C1DC  F26C         	movff	_PWM+1,_rgl+7
  2290                           ;rgl.c: 800: rgl.xmod=PWM.BufPWM;
  2291  004E3E  C1DC  F26D         	movff	_PWM+1,_rgl+8
  2292                           ;rgl.c: 801: if(rgl.xmod>PWM.MGMOD)
  2293  004E42  C26D  FFE8         	movff	_rgl+8,wreg
  2294  004E46  0101               	movlb	(_PWM+12) shr (0+8)
  2295  004E48  61E7               	cpfslt	(_PWM+12)& (0+255),b
  2296  004E4A  0012               	return	
  2297                           ;rgl.c: 802: {
  2298  004E4C  C1E7  F26C         	movff	_PWM+12,_rgl+7
  2299                           ;rgl.c: 804: rgl.xmod=PWM.MGMOD;
  2300  004E50  C1E7  F26D         	movff	_PWM+12,_rgl+8
  2301                           ;rgl.c: 805: }
  2302  004E54  0012               	return	
  2303  004E56                     l174:
  2304                           ;rgl.c: 807: }
  2305  004E56  C1E4  FFE8         	movff	_PWM+9,wreg
  2306  004E5A  0102               	movlb	(_rgl+8) shr (0+8)
  2307  004E5C  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  2308  004E5E  E318               	bnc	l176
  2309  004E60  0E0A               	movlw	10
  2310  004E62  6E02               	movwf	btemp+2,c
  2311  004E64  6A03               	clrf	btemp+3,c
  2312  004E66  C1E4  FFE8         	movff	_PWM+9,wreg
  2313  004E6A  C26D  F000         	movff	_rgl+8,btemp
  2314  004E6E  6A01               	clrf	btemp+1,c
  2315  004E70  5E00               	subwf	btemp,f,c
  2316  004E72  0E00               	movlw	0
  2317  004E74  5A01               	subwfb	btemp+1,f,c
  2318  004E76  EC92  F078         	call	awmul
  2319  004E7A  0100               	movlb	__Lparam shr (0+8)
  2320  004E7C  C004  F0E9         	movff	btemp+4,?a_ModZgCW
  2321  004E80  C005  F0EA         	movff	btemp+5,?a_ModZgCW+1
  2322  004E84  0E00               	movlw	0
  2323  004E86  BFEA               	btfsc	(?a_ModZgCW+1)^(__Lparam& (0+65280)),7,b
  2324  004E88  0EFF               	movlw	-1
  2325  004E8A  6FEB               	movwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2326  004E8C  6FEC               	movwf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2327  004E8E  D005               	goto	l177
  2328  004E90                     l176:
  2329                           ;rgl.c: 809: else m=0;
  2330  004E90  0100               	movlb	__Lparam shr (0+8)
  2331  004E92  6BE9               	clrf	?a_ModZgCW^(__Lparam& (0+65280)),b
  2332  004E94  6BEA               	clrf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),b
  2333  004E96  6BEB               	clrf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2334  004E98  6BEC               	clrf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2335  004E9A                     l177:
  2336                           ;rgl.c: 810: m=m/(DtCW.MAD_CW-DtCW.DAD_CW);
  2337  004E9A  C1B5  FFE8         	movff	_DtCW+14,wreg
  2338  004E9E  C1B4  F000         	movff	_DtCW+13,btemp
  2339  004EA2  5C00               	subwf	btemp,w,c
  2340  004EA4  6E04               	movwf	btemp+4,c
  2341  004EA6  6A05               	clrf	btemp+5,c
  2342  004EA8  A0D8               	btfss	status,0,c
  2343  004EAA  0605               	decf	btemp+5,f,c
  2344  004EAC  6A06               	clrf	btemp+6,c
  2345  004EAE  BE05               	btfsc	btemp+5,7,c
  2346  004EB0  0606               	decf	btemp+6,f,c
  2347  004EB2  5006               	movf	btemp+6,w,c
  2348  004EB4  6E07               	movwf	btemp+7,c
  2349  004EB6  0EE9               	movlw	low ?a_ModZgCW
  2350  004EB8  6EE9               	movwf	fsr0l,c
  2351  004EBA  0E00               	movlw	high ?a_ModZgCW
  2352  004EBC  6EEA               	movwf	fsr0h,c
  2353  004EBE  ECB8  F078         	call	aldiv_f
  2354                           ;rgl.c: 811: m=m*(DtCW.AC_CW-DtCW.DAD_CW);
  2355  004EC2  C1B5  FFE8         	movff	_DtCW+14,wreg
  2356  004EC6  C1B3  F000         	movff	_DtCW+12,btemp
  2357  004ECA  5C00               	subwf	btemp,w,c
  2358  004ECC  6E04               	movwf	btemp+4,c
  2359  004ECE  6A05               	clrf	btemp+5,c
  2360  004ED0  A0D8               	btfss	status,0,c
  2361  004ED2  0605               	decf	btemp+5,f,c
  2362  004ED4  6A06               	clrf	btemp+6,c
  2363  004ED6  BE05               	btfsc	btemp+5,7,c
  2364  004ED8  0606               	decf	btemp+6,f,c
  2365  004EDA  5006               	movf	btemp+6,w,c
  2366  004EDC  6E07               	movwf	btemp+7,c
  2367  004EDE  0EE9               	movlw	low ?a_ModZgCW
  2368  004EE0  6EE9               	movwf	fsr0l,c
  2369  004EE2  0E00               	movlw	high ?a_ModZgCW
  2370  004EE4  6EEA               	movwf	fsr0h,c
  2371  004EE6  ECAE  F078         	call	almul_f
  2372                           ;rgl.c: 812: if(m<0) m=0;
  2373  004EEA  0100               	movlb	__Lparam shr (0+8)
  2374  004EEC  AFEC               	btfss	(?a_ModZgCW+3)^(__Lparam& (0+65280)),7,b
  2375  004EEE  D004               	goto	l178
  2376  004EF0  6BE9               	clrf	?a_ModZgCW^(__Lparam& (0+65280)),b
  2377  004EF2  6BEA               	clrf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),b
  2378  004EF4  6BEB               	clrf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2379  004EF6  6BEC               	clrf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2380  004EF8                     l178:
  2381                           ;rgl.c: 813: m=m/10+PWM.MDMOD;
  2382  004EF8  0E0A               	movlw	10
  2383  004EFA  6E04               	movwf	btemp+4,c
  2384  004EFC  6A05               	clrf	btemp+5,c
  2385  004EFE  6A06               	clrf	btemp+6,c
  2386  004F00  6A07               	clrf	btemp+7,c
  2387  004F02  C0E9  F000         	movff	?a_ModZgCW,btemp
  2388  004F06  C0EA  F001         	movff	?a_ModZgCW+1,btemp+1
  2389  004F0A  C0EB  F002         	movff	?a_ModZgCW+2,btemp+2
  2390  004F0E  C0EC  F003         	movff	?a_ModZgCW+3,btemp+3
  2391  004F12  EC10  F078         	call	aldiv
  2392  004F16  C1E4  FFE8         	movff	_PWM+9,wreg
  2393  004F1A  2400               	addwf	btemp,w,c
  2394  004F1C  0100               	movlb	__Lparam shr (0+8)
  2395  004F1E  6FE9               	movwf	?a_ModZgCW^(__Lparam& (0+65280)),b
  2396  004F20  0E00               	movlw	0
  2397  004F22  2001               	addwfc	btemp+1,w,c
  2398  004F24  6FEA               	movwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),b
  2399  004F26  0E00               	movlw	0
  2400  004F28  2002               	addwfc	btemp+2,w,c
  2401  004F2A  6FEB               	movwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),b
  2402  004F2C  0E00               	movlw	0
  2403  004F2E  2003               	addwfc	btemp+3,w,c
  2404  004F30  6FEC               	movwf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),b
  2405                           ;rgl.c: 814: if(m>0xff)
  2406  004F32  51EC               	movf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),w
  2407  004F34  0A80               	xorlw	128
  2408  004F36  0F80               	addlw	128
  2409  004F38  E108               	bnz	u1245
  2410  004F3A  0E00               	movlw	0
  2411  004F3C  5DEB               	subwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),w
  2412  004F3E  E105               	bnz	u1245
  2413  004F40  0E01               	movlw	1
  2414  004F42  5DEA               	subwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),w
  2415  004F44  E102               	bnz	u1245
  2416  004F46  0E00               	movlw	0
  2417  004F48  5DE9               	subwf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2418  004F4A                     u1245:
  2419                           ;rgl.c: 815: {
  2420  004F4A  0102               	movlb	_rgl shr (0+8)
  2421  004F4C  E304               	bnc	L18
  2422  004F4E  9565               	bcf	_rgl& (0+255),2,b
  2423                           ;rgl.c: 817: rgl.tmp_pwm=rgl.xmod;
  2424  004F50  C26D  F26E         	movff	_rgl+8,_rgl+9
  2425                           ;rgl.c: 818: return;
  2426  004F54  0012               	return	
  2427                           ;rgl.c: 819: }
  2428  004F56                     L18:
  2429  004F56  A565               	btfss	_rgl& (0+255),2,b
  2430  004F58  D01C               	goto	l180
  2431  004F5A  C26D  F000         	movff	_rgl+8,btemp
  2432  004F5E  6A01               	clrf	btemp+1,c
  2433  004F60  6A02               	clrf	btemp+2,c
  2434  004F62  6A03               	clrf	btemp+3,c
  2435  004F64  0100               	movlb	__Lparam shr (0+8)
  2436  004F66  51EC               	movf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),w
  2437  004F68  0A80               	xorlw	128
  2438  004F6A  6E04               	movwf	btemp+4,c
  2439  004F6C  5003               	movf	btemp+3,w,c
  2440  004F6E  0A80               	xorlw	128
  2441  004F70  5C04               	subwf	btemp+4,w,c
  2442  004F72  E108               	bnz	u1265
  2443  004F74  5002               	movf	btemp+2,w,c
  2444  004F76  5DEB               	subwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),w
  2445  004F78  E105               	bnz	u1265
  2446  004F7A  5001               	movf	btemp+1,w,c
  2447  004F7C  5DEA               	subwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),w
  2448  004F7E  E102               	bnz	u1265
  2449  004F80  5000               	movf	btemp,w,c
  2450  004F82  5DE9               	subwf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2451  004F84                     u1265:
  2452  004F84  E206               	bc	l180
  2453                           ;rgl.c: 821: rgl.srp=(rgl.xmod-m);
  2454  004F86  0100               	movlb	__Lparam shr (0+8)
  2455  004F88  51E9               	movf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2456  004F8A  0102               	movlb	(_rgl+8) shr (0+8)
  2457  004F8C  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  2458  004F8E  CFE8 F26C          	movff	wreg,_rgl+7
  2459  004F92                     l180:
  2460                           ;rgl.c: 822: m+=rgl.srp;
  2461  004F92  C26C  FFE8         	movff	_rgl+7,wreg
  2462  004F96  0100               	movlb	__Lparam shr (0+8)
  2463  004F98  27E9               	addwf	?a_ModZgCW^(__Lparam& (0+65280)),f,b
  2464  004F9A  0E01               	movlw	1
  2465  004F9C  B0D8               	btfsc	status,0,c
  2466  004F9E  27EA               	addwf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),f,b
  2467  004FA0  B0D8               	btfsc	status,0,c
  2468  004FA2  27EB               	addwf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),f,b
  2469  004FA4  B0D8               	btfsc	status,0,c
  2470  004FA6  27EC               	addwf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),f,b
  2471                           ;rgl.c: 823: if(m>rgl.xmod) p=rgl.xmod;
  2472  004FA8  C26D  F000         	movff	_rgl+8,btemp
  2473  004FAC  6A01               	clrf	btemp+1,c
  2474  004FAE  6A02               	clrf	btemp+2,c
  2475  004FB0  6A03               	clrf	btemp+3,c
  2476  004FB2  5003               	movf	btemp+3,w,c
  2477  004FB4  0A80               	xorlw	128
  2478  004FB6  6E04               	movwf	btemp+4,c
  2479  004FB8  51EC               	movf	(?a_ModZgCW+3)^(__Lparam& (0+65280)),w
  2480  004FBA  0A80               	xorlw	128
  2481  004FBC  5C04               	subwf	btemp+4,w,c
  2482  004FBE  E108               	bnz	u1285
  2483  004FC0  51EB               	movf	(?a_ModZgCW+2)^(__Lparam& (0+65280)),w
  2484  004FC2  5C02               	subwf	btemp+2,w,c
  2485  004FC4  E105               	bnz	u1285
  2486  004FC6  51EA               	movf	(?a_ModZgCW+1)^(__Lparam& (0+65280)),w
  2487  004FC8  5C01               	subwf	btemp+1,w,c
  2488  004FCA  E102               	bnz	u1285
  2489  004FCC  51E9               	movf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2490  004FCE  5C00               	subwf	btemp,w,c
  2491  004FD0                     u1285:
  2492  004FD0  E203               	bc	l181
  2493  004FD2  C26D  FFD9         	movff	_rgl+8,fsr2l
  2494  004FD6  D003               	goto	l182
  2495  004FD8                     l181:
  2496                           ;rgl.c: 824: else p=m;
  2497  004FD8  0100               	movlb	__Lparam shr (0+8)
  2498  004FDA  51E9               	movf	?a_ModZgCW^(__Lparam& (0+65280)),w
  2499  004FDC  6ED9               	movwf	fsr2l,c
  2500  004FDE                     l182:
  2501                           ;rgl.c: 825: rgl.fz=0;
  2502  004FDE  0102               	movlb	_rgl shr (0+8)
  2503  004FE0  9565               	bcf	_rgl& (0+255),2,b
  2504                           ;rgl.c: 826: rgl.tmp_pwm=p;
  2505  004FE2  CFD9 F26E          	movff	fsr2l,_rgl+9
  2506                           ;rgl.c: 827: }
  2507  004FE6  0012               	return	
  2508  004FE8                     __end_of_ModZgCW:
  2509                           ;rgl.c: 830: void ModDkCW(void)
  2510                           ;rgl.c: 831: {
  2511  004FE8                     _ModDkCW:
  2512  000000                     
  2513                           ;rgl.c: 832: signed long m;
  2514  004FE8  0102               	movlb	_rgl shr (0+8)
  2515  004FEA  A565               	btfss	_rgl& (0+255),2,b
  2516  004FEC  0012               	return	
  2517                           ;rgl.c: 837: ada=DtCW.AC_CW-DtCW.DAD_CW;
  2518  004FEE  C1B5  FFE8         	movff	_DtCW+14,wreg
  2519  004FF2  0101               	movlb	(_DtCW+12) shr (0+8)
  2520  004FF4  5DB3               	subwf	(_DtCW+12)& (0+255),w,b
  2521  004FF6  0100               	movlb	__Lparam shr (0+8)
  2522  004FF8  6FE9               	movwf	?a_ModDkCW^(__Lparam& (0+65280)),b
  2523                           ;rgl.c: 838: k=1;
  2524  004FFA  0E01               	movlw	1
  2525  004FFC  6FEA               	movwf	(?a_ModDkCW+1)^(__Lparam& (0+65280)),b
  2526                           ;rgl.c: 839: if(Trowna()) return;
  2527  004FFE  ECDB  F036         	call	_Trowna	;wreg free
  2528  005002  B0D8               	btfsc	status,0,c
  2529  005004  0012               	return	
  2530                           ;rgl.c: 840: if(Tnizsza(0))
  2531  005006  0E00               	movlw	0
  2532  005008  ECB3  F036         	call	_Tnizsza
  2533  00500C  E303               	bnc	l186
  2534                           ;rgl.c: 841: {
  2535  00500E  0E02               	movlw	2
  2536  005010  0100               	movlb	__Lparam shr (0+8)
  2537  005012  6FEA               	movwf	(?a_ModDkCW+1)^(__Lparam& (0+65280)),b
  2538  005014                     l186:
  2539                           ;rgl.c: 848: }
  2540  005014  C0E9  F002         	movff	?a_ModDkCW,btemp+2
  2541  005018  6A03               	clrf	btemp+3,c
  2542  00501A  BE02               	btfsc	btemp+2,7,c
  2543  00501C  0603               	decf	btemp+3,f,c
  2544  00501E  C0EA  F000         	movff	?a_ModDkCW+1,btemp
  2545  005022  6A01               	clrf	btemp+1,c
  2546  005024  EC92  F078         	call	awmul
  2547  005028  C26C  FFE8         	movff	_rgl+7,wreg
  2548  00502C  2404               	addwf	btemp+4,w,c
  2549  00502E  6E00               	movwf	btemp,c
  2550  005030  0E00               	movlw	0
  2551  005032  2005               	addwfc	btemp+5,w,c
  2552  005034  6E01               	movwf	btemp+1,c
  2553  005036  0100               	movlb	__Lparam shr (0+8)
  2554  005038  C000  F0EB         	movff	btemp,?a_ModDkCW+2
  2555  00503C  C001  F0EC         	movff	btemp+1,?a_ModDkCW+3
  2556  005040  0E00               	movlw	0
  2557  005042  BFEC               	btfsc	(?a_ModDkCW+3)^(__Lparam& (0+65280)),7,b
  2558  005044  0EFF               	movlw	-1
  2559  005046  6FED               	movwf	(?a_ModDkCW+4)^(__Lparam& (0+65280)),b
  2560  005048  6FEE               	movwf	(?a_ModDkCW+5)^(__Lparam& (0+65280)),b
  2561                           ;rgl.c: 858: if(m>rgl.xmod) p=rgl.xmod;
  2562  00504A  C26D  F000         	movff	_rgl+8,btemp
  2563  00504E  6A01               	clrf	btemp+1,c
  2564  005050  6A02               	clrf	btemp+2,c
  2565  005052  6A03               	clrf	btemp+3,c
  2566  005054  5003               	movf	btemp+3,w,c
  2567  005056  0A80               	xorlw	128
  2568  005058  6E04               	movwf	btemp+4,c
  2569  00505A  51EE               	movf	(?a_ModDkCW+5)^(__Lparam& (0+65280)),w
  2570  00505C  0A80               	xorlw	128
  2571  00505E  5C04               	subwf	btemp+4,w,c
  2572  005060  E108               	bnz	u1325
  2573  005062  51ED               	movf	(?a_ModDkCW+4)^(__Lparam& (0+65280)),w
  2574  005064  5C02               	subwf	btemp+2,w,c
  2575  005066  E105               	bnz	u1325
  2576  005068  51EC               	movf	(?a_ModDkCW+3)^(__Lparam& (0+65280)),w
  2577  00506A  5C01               	subwf	btemp+1,w,c
  2578  00506C  E102               	bnz	u1325
  2579  00506E  51EB               	movf	(?a_ModDkCW+2)^(__Lparam& (0+65280)),w
  2580  005070  5C00               	subwf	btemp,w,c
  2581  005072                     u1325:
  2582  005072  E203               	bc	l187
  2583  005074  C26D  FFD9         	movff	_rgl+8,fsr2l
  2584  005078  D01C               	goto	l188
  2585  00507A                     l187:
  2586                           ;rgl.c: 859: else
  2587  00507A  C1E4  F000         	movff	_PWM+9,btemp
  2588  00507E  6A01               	clrf	btemp+1,c
  2589  005080  6A02               	clrf	btemp+2,c
  2590  005082  6A03               	clrf	btemp+3,c
  2591  005084  0100               	movlb	__Lparam shr (0+8)
  2592  005086  51EE               	movf	(?a_ModDkCW+5)^(__Lparam& (0+65280)),w
  2593  005088  0A80               	xorlw	128
  2594  00508A  6E04               	movwf	btemp+4,c
  2595  00508C  5003               	movf	btemp+3,w,c
  2596  00508E  0A80               	xorlw	128
  2597  005090  5C04               	subwf	btemp+4,w,c
  2598  005092  E108               	bnz	u1335
  2599  005094  5002               	movf	btemp+2,w,c
  2600  005096  5DED               	subwf	(?a_ModDkCW+4)^(__Lparam& (0+65280)),w
  2601  005098  E105               	bnz	u1335
  2602  00509A  5001               	movf	btemp+1,w,c
  2603  00509C  5DEC               	subwf	(?a_ModDkCW+3)^(__Lparam& (0+65280)),w
  2604  00509E  E102               	bnz	u1335
  2605  0050A0  5000               	movf	btemp,w,c
  2606  0050A2  5DEB               	subwf	(?a_ModDkCW+2)^(__Lparam& (0+65280)),w
  2607  0050A4                     u1335:
  2608  0050A4  E203               	bc	l189
  2609  0050A6  C1E4  FFD9         	movff	_PWM+9,fsr2l
  2610  0050AA  D003               	goto	l188
  2611  0050AC                     l189:
  2612                           ;rgl.c: 861: else p=m;
  2613  0050AC  0100               	movlb	__Lparam shr (0+8)
  2614  0050AE  51EB               	movf	(?a_ModDkCW+2)^(__Lparam& (0+65280)),w
  2615  0050B0  6ED9               	movwf	fsr2l,c
  2616  0050B2                     l188:
  2617                           ;rgl.c: 862: rgl.tmp_pwm=p;
  2618  0050B2  CFD9 F26E          	movff	fsr2l,_rgl+9
  2619                           ;rgl.c: 863: }
  2620  0050B6  0012               	return	
  2621  0050B8                     __end_of_ModDkCW:
  2622                           ;rgl.c: 868: void ModPruCW(void)
  2623                           ;rgl.c: 869: {
  2624  0050B8                     _ModPruCW:
  2625  000000                     
  2626                           ;rgl.c: 870: static unsigned char l,m,o,p,q,r,s;
  2627  0050B8  0102               	movlb	_rgl shr (0+8)
  2628  0050BA  B565               	btfsc	_rgl& (0+255),2,b
  2629  0050BC  D119               	goto	l192
  2630                           ;rgl.c: 875: {
  2631  0050BE  010E               	movlb	F1815 shr (0+8)
  2632  0050C0  6BCB               	clrf	F1815& (0+255),b
  2633                           ;rgl.c: 877: m=0;
  2634  0050C2  010E               	movlb	F1816 shr (0+8)
  2635  0050C4  6BCC               	clrf	F1816& (0+255),b
  2636                           ;rgl.c: 878: o=0;
  2637  0050C6  010E               	movlb	F1817 shr (0+8)
  2638  0050C8  6BCD               	clrf	F1817& (0+255),b
  2639                           ;rgl.c: 879: p=0;
  2640  0050CA  010E               	movlb	F1818 shr (0+8)
  2641  0050CC  6BCE               	clrf	F1818& (0+255),b
  2642                           ;rgl.c: 880: if(q<255) q++;
  2643  0050CE  CECF  F000         	movff	F1819,btemp
  2644  0050D2  2800               	incf	btemp,w,c
  2645  0050D4  E002               	bz	l193
  2646  0050D6  010E               	movlb	F1819 shr (0+8)
  2647  0050D8  2BCF               	incf	F1819& (0+255),f,b
  2648  0050DA                     l193:
  2649                           ;rgl.c: 881: if(s<255) s++;
  2650  0050DA  CED1  F000         	movff	F1821,btemp
  2651  0050DE  2800               	incf	btemp,w,c
  2652  0050E0  E002               	bz	l194
  2653  0050E2  010E               	movlb	F1821 shr (0+8)
  2654  0050E4  2BD1               	incf	F1821& (0+255),f,b
  2655  0050E6                     l194:
  2656                           ;rgl.c: 882: if(DtCW._newPCW) s=0;
  2657  0050E6  0101               	movlb	(_DtCW+1) shr (0+8)
  2658  0050E8  A1A8               	btfss	(_DtCW+1)& (0+255),0,b
  2659  0050EA  D002               	goto	l195
  2660  0050EC  010E               	movlb	F1821 shr (0+8)
  2661  0050EE  6BD1               	clrf	F1821& (0+255),b
  2662  0050F0                     l195:
  2663                           ;rgl.c: 883: if(Tnizsza(0))
  2664  0050F0  0E00               	movlw	0
  2665  0050F2  ECB3  F036         	call	_Tnizsza
  2666  0050F6  A0D8               	btfss	status,0,c
  2667  0050F8  0012               	return	
  2668                           ;rgl.c: 884: {
  2669  0050FA  0E0A               	movlw	10
  2670  0050FC  ECB3  F036         	call	_Tnizsza
  2671  005100  B0D8               	btfsc	status,0,c
  2672  005102  0012               	return	
  2673                           ;rgl.c: 886: {
  2674  005104  0100               	movlb	__Lparam shr (0+8)
  2675  005106  6BE9               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2676                           ;rgl.c: 888: if(rgl.tmp_pwm>=pwm_center)
  2677  005108  CEE4  FFE8         	movff	_pwm_center,wreg
  2678  00510C  0102               	movlb	(_rgl+9) shr (0+8)
  2679  00510E  5D6E               	subwf	(_rgl+9)& (0+255),w,b
  2680  005110  E330               	bnc	l198
  2681                           ;rgl.c: 889: {
  2682  005112  0E05               	movlw	5
  2683  005114  ECB3  F036         	call	_Tnizsza
  2684  005118  E30A               	bnc	l199
  2685  00511A  ECAC  F036         	call	_Tstoi	;wreg free
  2686  00511E  E307               	bnc	l199
  2687  005120  0E00               	movlw	0
  2688  005122  010E               	movlb	F1821 shr (0+8)
  2689  005124  65D1               	cpfsgt	F1821& (0+255),b
  2690  005126  D003               	goto	l199
  2691                           ;rgl.c: 891: {
  2692  005128  6BD1               	clrf	F1821& (0+255),b
  2693                           ;rgl.c: 893: k=20;
  2694  00512A  0E14               	movlw	20
  2695  00512C  D06B               	goto	L9
  2696                           ;rgl.c: 894: }
  2697  00512E                     l199:
  2698                           ;rgl.c: 895: else
  2699  00512E  0E04               	movlw	4
  2700  005130  ECB3  F036         	call	_Tnizsza
  2701  005134  E30A               	bnc	l201
  2702  005136  ECAC  F036         	call	_Tstoi	;wreg free
  2703  00513A  E307               	bnc	l201
  2704  00513C  0E00               	movlw	0
  2705  00513E  010E               	movlb	F1821 shr (0+8)
  2706  005140  65D1               	cpfsgt	F1821& (0+255),b
  2707  005142  D003               	goto	l201
  2708                           ;rgl.c: 897: {
  2709  005144  6BD1               	clrf	F1821& (0+255),b
  2710                           ;rgl.c: 899: k=15;
  2711  005146  0E0F               	movlw	15
  2712  005148  D05D               	goto	L9
  2713                           ;rgl.c: 900: }
  2714  00514A                     l201:
  2715                           ;rgl.c: 901: else
  2716  00514A  0E02               	movlw	2
  2717  00514C  ECB3  F036         	call	_Tnizsza
  2718  005150  E308               	bnc	l203
  2719  005152  ECAC  F036         	call	_Tstoi	;wreg free
  2720  005156  E305               	bnc	l203
  2721  005158  0E00               	movlw	0
  2722  00515A  010E               	movlb	F1821 shr (0+8)
  2723  00515C  65D1               	cpfsgt	F1821& (0+255),b
  2724  00515E  D001               	goto	l203
  2725  005160  D018               	goto	u1640
  2726                           ;rgl.c: 903: {
  2727                           ;rgl.c: 905: k=10;
  2728                           ;rgl.c: 906: }
  2729  005162                     l203:
  2730                           ;rgl.c: 907: else
  2731  005162  ECAC  F036         	call	_Tstoi	;wreg free
  2732  005166  E350               	bnc	l206
  2733  005168  0E00               	movlw	0
  2734  00516A  010E               	movlb	F1821 shr (0+8)
  2735  00516C  65D1               	cpfsgt	F1821& (0+255),b
  2736  00516E  D04C               	goto	l206
  2737  005170  D03C               	goto	u1820
  2738                           ;rgl.c: 909: {
  2739                           ;rgl.c: 911: k=5;
  2740                           ;rgl.c: 912: }
  2741  005172                     l198:
  2742                           ;rgl.c: 914: else
  2743  005172  CEE5  FFE8         	movff	_pwm_kwr,wreg
  2744  005176  0102               	movlb	(_rgl+9) shr (0+8)
  2745  005178  5D6E               	subwf	(_rgl+9)& (0+255),w,b
  2746  00517A  E32C               	bnc	l207
  2747                           ;rgl.c: 917: {
  2748  00517C  0E05               	movlw	5
  2749  00517E  ECB3  F036         	call	_Tnizsza
  2750  005182  E30B               	bnc	l208
  2751  005184  ECAC  F036         	call	_Tstoi	;wreg free
  2752  005188  E308               	bnc	l208
  2753  00518A  0E00               	movlw	0
  2754  00518C  010E               	movlb	F1821 shr (0+8)
  2755  00518E  65D1               	cpfsgt	F1821& (0+255),b
  2756  005190  D004               	goto	l208
  2757  005192                     u1640:
  2758                           ;rgl.c: 919: {
  2759  005192  010E               	movlb	F1821 shr (0+8)
  2760  005194  6BD1               	clrf	F1821& (0+255),b
  2761                           ;rgl.c: 921: k=10;
  2762  005196  0E0A               	movlw	10
  2763  005198  D035               	goto	L9
  2764                           ;rgl.c: 922: }
  2765  00519A                     l208:
  2766                           ;rgl.c: 923: else
  2767  00519A  0E04               	movlw	4
  2768  00519C  ECB3  F036         	call	_Tnizsza
  2769  0051A0  E30A               	bnc	l210
  2770  0051A2  ECAC  F036         	call	_Tstoi	;wreg free
  2771  0051A6  E307               	bnc	l210
  2772  0051A8  0E00               	movlw	0
  2773  0051AA  010E               	movlb	F1821 shr (0+8)
  2774  0051AC  65D1               	cpfsgt	F1821& (0+255),b
  2775  0051AE  D003               	goto	l210
  2776                           ;rgl.c: 925: {
  2777  0051B0  6BD1               	clrf	F1821& (0+255),b
  2778                           ;rgl.c: 927: k=8;
  2779  0051B2  0E08               	movlw	8
  2780  0051B4  D027               	goto	L9
  2781                           ;rgl.c: 928: }
  2782  0051B6                     l210:
  2783                           ;rgl.c: 929: else
  2784  0051B6  0E02               	movlw	2
  2785  0051B8  ECB3  F036         	call	_Tnizsza
  2786  0051BC  E308               	bnc	l212
  2787  0051BE  ECAC  F036         	call	_Tstoi	;wreg free
  2788  0051C2  E305               	bnc	l212
  2789  0051C4  0E00               	movlw	0
  2790  0051C6  010E               	movlb	F1821 shr (0+8)
  2791  0051C8  65D1               	cpfsgt	F1821& (0+255),b
  2792  0051CA  D001               	goto	l212
  2793  0051CC  D00E               	goto	u1820
  2794                           ;rgl.c: 931: {
  2795                           ;rgl.c: 933: k=5;
  2796                           ;rgl.c: 934: }
  2797  0051CE                     l212:
  2798                           ;rgl.c: 935: else
  2799  0051CE  ECAC  F036         	call	_Tstoi	;wreg free
  2800  0051D2  D011               	goto	L10
  2801                           ;rgl.c: 937: {
  2802                           ;rgl.c: 939: k=2;
  2803                           ;rgl.c: 940: }
  2804  0051D4                     l207:
  2805                           ;rgl.c: 942: else
  2806  0051D4  0E02               	movlw	2
  2807  0051D6  ECB3  F036         	call	_Tnizsza
  2808  0051DA  E30B               	bnc	l216
  2809  0051DC  ECAC  F036         	call	_Tstoi	;wreg free
  2810  0051E0  E308               	bnc	l216
  2811  0051E2  0E00               	movlw	0
  2812  0051E4  010E               	movlb	F1821 shr (0+8)
  2813  0051E6  65D1               	cpfsgt	F1821& (0+255),b
  2814  0051E8  D004               	goto	l216
  2815  0051EA                     u1820:
  2816                           ;rgl.c: 945: {
  2817  0051EA  010E               	movlb	F1821 shr (0+8)
  2818  0051EC  6BD1               	clrf	F1821& (0+255),b
  2819                           ;rgl.c: 947: k=5;
  2820  0051EE  0E05               	movlw	5
  2821  0051F0  D009               	goto	L9
  2822                           ;rgl.c: 948: }
  2823  0051F2                     l216:
  2824                           ;rgl.c: 949: else
  2825  0051F2  ECAC  F036         	call	_Tstoi	;wreg free
  2826  0051F6                     L10:
  2827  0051F6  E308               	bnc	l206
  2828  0051F8  0E00               	movlw	0
  2829  0051FA  010E               	movlb	F1821 shr (0+8)
  2830  0051FC  65D1               	cpfsgt	F1821& (0+255),b
  2831  0051FE  D004               	goto	l206
  2832                           ;rgl.c: 951: {
  2833  005200  6BD1               	clrf	F1821& (0+255),b
  2834                           ;rgl.c: 953: k=2;
  2835  005202  0E02               	movlw	2
  2836  005204                     L9:
  2837  005204  0100               	movlb	__Lparam shr (0+8)
  2838  005206  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2839  005208                     l206:
  2840                           ;rgl.c: 954: }
  2841  005208  CEE5  FFE8         	movff	_pwm_kwr,wreg
  2842  00520C  0102               	movlb	(_rgl+9) shr (0+8)
  2843  00520E  5D6E               	subwf	(_rgl+9)& (0+255),w,b
  2844  005210  E316               	bnc	l219
  2845                           ;rgl.c: 958: {
  2846  005212  0E01               	movlw	1
  2847  005214  EC84  F036         	call	_Trosnie
  2848  005218  E310               	bnc	l220
  2849  00521A  0E00               	movlw	0
  2850  00521C  010E               	movlb	F1821 shr (0+8)
  2851  00521E  65D1               	cpfsgt	F1821& (0+255),b
  2852  005220  D00C               	goto	l220
  2853                           ;rgl.c: 960: {
  2854  005222  6BD1               	clrf	F1821& (0+255),b
  2855                           ;rgl.c: 962: k=10;
  2856  005224  0E0A               	movlw	10
  2857  005226  0100               	movlb	__Lparam shr (0+8)
  2858  005228  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2859                           ;rgl.c: 963: if(Trosnie(2)) k=8;
  2860  00522A  0E02               	movlw	2
  2861  00522C  EC84  F036         	call	_Trosnie
  2862  005230  E306               	bnc	l219
  2863  005232  0E08               	movlw	8
  2864  005234  0100               	movlb	__Lparam shr (0+8)
  2865  005236  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2866                           ;rgl.c: 964: }
  2867  005238  D002               	goto	l219
  2868  00523A                     l220:
  2869                           ;rgl.c: 965: else
  2870  00523A  0102               	movlb	(_rgl+6) shr (0+8)
  2871  00523C  6B6B               	clrf	(_rgl+6)& (0+255),b
  2872  00523E                     l219:
  2873                           ;rgl.c: 967: }
  2874  00523E  C1DC  FFE8         	movff	_PWM+1,wreg
  2875  005242  0102               	movlb	(_rgl+8) shr (0+8)
  2876  005244  616D               	cpfslt	(_rgl+8)& (0+255),b
  2877  005246  D001               	goto	l223
  2878  005248  0012               	return	
  2879  00524A                     l223:
  2880                           ;rgl.c: 969: tmp=rgl.xmod-PWM.BufPWM;
  2881  00524A  C1DC  FFE8         	movff	_PWM+1,wreg
  2882  00524E  0102               	movlb	(_rgl+8) shr (0+8)
  2883  005250  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  2884  005252  6ED9               	movwf	fsr2l,c
  2885                           ;rgl.c: 970: if(k>tmp) k=tmp;
  2886  005254  50D9               	movf	fsr2l,w,c
  2887  005256  0100               	movlb	__Lparam shr (0+8)
  2888  005258  94D8               	bcf	status,2,c
  2889  00525A  90D8               	bcf	status,0,c
  2890  00525C  AFE9               	btfss	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  2891  00525E  5DE9               	subwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2892  005260  B4D8               	btfsc	status,2,c
  2893  005262  90D8               	bcf	status,0,c
  2894  005264  E302               	bnc	l224
  2895  005266  50D9               	movf	fsr2l,w,c
  2896  005268  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  2897  00526A                     l224:
  2898                           ;rgl.c: 971: if(PWM.MMAXCW>PWM.MGMOD)
  2899  00526A  C1FB  FFE8         	movff	_PWM+32,wreg
  2900  00526E  0101               	movlb	(_PWM+12) shr (0+8)
  2901  005270  61E7               	cpfslt	(_PWM+12)& (0+255),b
  2902  005272  D01F               	goto	l225
  2903                           ;rgl.c: 972: {
  2904  005274  C26C  FFE8         	movff	_rgl+7,wreg
  2905  005278  0100               	movlb	__Lparam shr (0+8)
  2906  00527A  25E9               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2907  00527C  6E02               	movwf	btemp+2,c
  2908  00527E  6A03               	clrf	btemp+3,c
  2909  005280  B0D8               	btfsc	status,0,c
  2910  005282  2A03               	incf	btemp+3,f,c
  2911  005284  BFE9               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  2912  005286  0603               	decf	btemp+3,f,c
  2913  005288  C1E7  F000         	movff	_PWM+12,btemp
  2914  00528C  6A01               	clrf	btemp+1,c
  2915  00528E  5001               	movf	btemp+1,w,c
  2916  005290  0A80               	xorlw	128
  2917  005292  6E04               	movwf	btemp+4,c
  2918  005294  5003               	movf	btemp+3,w,c
  2919  005296  0A80               	xorlw	128
  2920  005298  5C04               	subwf	btemp+4,w,c
  2921  00529A  E102               	bnz	u1945
  2922  00529C  5002               	movf	btemp+2,w,c
  2923  00529E  5C00               	subwf	btemp,w,c
  2924  0052A0                     u1945:
  2925  0052A0  E203               	bc	l226
  2926  0052A2  C1E7  F26C         	movff	_PWM+12,_rgl+7
  2927  0052A6  0012               	return	
  2928  0052A8                     l226:
  2929                           ;rgl.c: 974: else rgl.srp+=k;
  2930  0052A8  0100               	movlb	__Lparam shr (0+8)
  2931  0052AA  51E9               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2932  0052AC  0102               	movlb	(_rgl+7) shr (0+8)
  2933  0052AE  276C               	addwf	(_rgl+7)& (0+255),f,b
  2934                           ;rgl.c: 975: }
  2935  0052B0  0012               	return	
  2936  0052B2                     l225:
  2937                           ;rgl.c: 976: else
  2938  0052B2  C26C  FFE8         	movff	_rgl+7,wreg
  2939  0052B6  0100               	movlb	__Lparam shr (0+8)
  2940  0052B8  25E9               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2941  0052BA  6E02               	movwf	btemp+2,c
  2942  0052BC  6A03               	clrf	btemp+3,c
  2943  0052BE  B0D8               	btfsc	status,0,c
  2944  0052C0  2A03               	incf	btemp+3,f,c
  2945  0052C2  BFE9               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  2946  0052C4  0603               	decf	btemp+3,f,c
  2947  0052C6  C1FB  F000         	movff	_PWM+32,btemp
  2948  0052CA  6A01               	clrf	btemp+1,c
  2949  0052CC  5001               	movf	btemp+1,w,c
  2950  0052CE  0A80               	xorlw	128
  2951  0052D0  6E04               	movwf	btemp+4,c
  2952  0052D2  5003               	movf	btemp+3,w,c
  2953  0052D4  0A80               	xorlw	128
  2954  0052D6  5C04               	subwf	btemp+4,w,c
  2955  0052D8  E102               	bnz	u1955
  2956  0052DA  5002               	movf	btemp+2,w,c
  2957  0052DC  5C00               	subwf	btemp,w,c
  2958  0052DE                     u1955:
  2959  0052DE  E203               	bc	l229
  2960  0052E0  C1FB  F26C         	movff	_PWM+32,_rgl+7
  2961  0052E4  0012               	return	
  2962  0052E6                     l229:
  2963                           ;rgl.c: 979: else rgl.srp+=k;
  2964  0052E6  0100               	movlb	__Lparam shr (0+8)
  2965  0052E8  51E9               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  2966  0052EA  0102               	movlb	(_rgl+7) shr (0+8)
  2967  0052EC  276C               	addwf	(_rgl+7)& (0+255),f,b
  2968                           ;rgl.c: 980: }
  2969  0052EE  0012               	return	
  2970                           ;rgl.c: 983: else return;
  2971                           ;rgl.c: 985: else return;
  2972  0052F0                     l192:
  2973                           ;rgl.c: 987: else
  2974  0052F0  010E               	movlb	F1819 shr (0+8)
  2975  0052F2  6BCF               	clrf	F1819& (0+255),b
  2976                           ;rgl.c: 990: r=0;
  2977  0052F4  010E               	movlb	F1820 shr (0+8)
  2978  0052F6  6BD0               	clrf	F1820& (0+255),b
  2979                           ;rgl.c: 991: s=0;
  2980  0052F8  010E               	movlb	F1821 shr (0+8)
  2981  0052FA  6BD1               	clrf	F1821& (0+255),b
  2982                           ;rgl.c: 992: if(m<255) m++;
  2983  0052FC  CECC  F000         	movff	F1816,btemp
  2984  005300  2800               	incf	btemp,w,c
  2985  005302  E002               	bz	l234
  2986  005304  010E               	movlb	F1816 shr (0+8)
  2987  005306  2BCC               	incf	F1816& (0+255),f,b
  2988  005308                     l234:
  2989                           ;rgl.c: 993: if(p<255) p++;
  2990  005308  CECE  F000         	movff	F1818,btemp
  2991  00530C  2800               	incf	btemp,w,c
  2992  00530E  E002               	bz	l235
  2993  005310  010E               	movlb	F1818 shr (0+8)
  2994  005312  2BCE               	incf	F1818& (0+255),f,b
  2995  005314                     l235:
  2996                           ;rgl.c: 994: if(o<255) o++;
  2997  005314  CECD  F000         	movff	F1817,btemp
  2998  005318  2800               	incf	btemp,w,c
  2999  00531A  E002               	bz	l236
  3000  00531C  010E               	movlb	F1817 shr (0+8)
  3001  00531E  2BCD               	incf	F1817& (0+255),f,b
  3002  005320                     l236:
  3003                           ;rgl.c: 995: if(DtCW.DAD_CW>DtCW.AC_CW)
  3004  005320  C1B5  FFE8         	movff	_DtCW+14,wreg
  3005  005324  0101               	movlb	(_DtCW+12) shr (0+8)
  3006  005326  61B3               	cpfslt	(_DtCW+12)& (0+255),b
  3007  005328  D06C               	goto	l237
  3008                           ;rgl.c: 996: {
  3009  00532A  0100               	movlb	__Lparam shr (0+8)
  3010  00532C  6BE9               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3011                           ;rgl.c: 998: if(Trosnie(0)&&m>=2)
  3012  00532E  0E00               	movlw	0
  3013  005330  EC84  F036         	call	_Trosnie
  3014  005334  E310               	bnc	l238
  3015  005336  0E01               	movlw	1
  3016  005338  010E               	movlb	F1816 shr (0+8)
  3017  00533A  65CC               	cpfsgt	F1816& (0+255),b
  3018  00533C  D00C               	goto	l238
  3019                           ;rgl.c: 999: {
  3020  00533E  010E               	movlb	F1818 shr (0+8)
  3021  005340  6BCE               	clrf	F1818& (0+255),b
  3022                           ;rgl.c: 1001: o=0;
  3023  005342  010E               	movlb	F1817 shr (0+8)
  3024  005344  6BCD               	clrf	F1817& (0+255),b
  3025                           ;rgl.c: 1002: l=0;
  3026  005346  010E               	movlb	F1815 shr (0+8)
  3027  005348  6BCB               	clrf	F1815& (0+255),b
  3028                           ;rgl.c: 1003: m=0;
  3029  00534A  010E               	movlb	F1816 shr (0+8)
  3030  00534C  6BCC               	clrf	F1816& (0+255),b
  3031                           ;rgl.c: 1004: k=2;
  3032  00534E  0E02               	movlw	2
  3033  005350  0100               	movlb	__Lparam shr (0+8)
  3034  005352  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3035                           ;rgl.c: 1005: }
  3036  005354  D01C               	goto	l239
  3037  005356                     l238:
  3038                           ;rgl.c: 1006: else
  3039  005356  0E01               	movlw	1
  3040  005358  ECC0  F036         	call	_Twyzsza
  3041  00535C  E316               	bnc	l240
  3042                           ;rgl.c: 1008: {
  3043  00535E  ECAC  F036         	call	_Tstoi	;wreg free
  3044  005362  E315               	bnc	l239
  3045                           ;rgl.c: 1010: {
  3046  005364  0E01               	movlw	1
  3047  005366  010E               	movlb	F1815 shr (0+8)
  3048  005368  65CB               	cpfsgt	F1815& (0+255),b
  3049  00536A  D00A               	goto	l242
  3050                           ;rgl.c: 1012: {
  3051  00536C  0100               	movlb	__Lparam shr (0+8)
  3052  00536E  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3053                           ;rgl.c: 1014: if(Twyzsza(3)) k=2;
  3054  005370  0E03               	movlw	3
  3055  005372  ECC0  F036         	call	_Twyzsza
  3056  005376  E309               	bnc	l240
  3057  005378  0E02               	movlw	2
  3058  00537A  0100               	movlb	__Lparam shr (0+8)
  3059  00537C  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3060  00537E  D005               	goto	l240
  3061                           ;rgl.c: 1015: l=0;
  3062                           ;rgl.c: 1016: }
  3063  005380                     l242:
  3064                           ;rgl.c: 1017: else
  3065  005380  0100               	movlb	__Lparam shr (0+8)
  3066  005382  6BE9               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3067                           ;rgl.c: 1020: l++;
  3068  005384  010E               	movlb	F1815 shr (0+8)
  3069  005386  2BCB               	incf	F1815& (0+255),f,b
  3070                           ;rgl.c: 1021: }
  3071  005388  D002               	goto	l239
  3072  00538A                     l240:
  3073  00538A  010E               	movlb	F1815 shr (0+8)
  3074  00538C  6BCB               	clrf	F1815& (0+255),b
  3075  00538E                     l239:
  3076                           ;rgl.c: 1024: if(PWM.MMAXCW>PWM.MGMOD)
  3077  00538E  C1FB  FFE8         	movff	_PWM+32,wreg
  3078  005392  0101               	movlb	(_PWM+12) shr (0+8)
  3079  005394  61E7               	cpfslt	(_PWM+12)& (0+255),b
  3080  005396  D007               	goto	l246
  3081                           ;rgl.c: 1025: {
  3082  005398  C26C  FFE8         	movff	_rgl+7,wreg
  3083  00539C  61E7               	cpfslt	(_PWM+12)& (0+255),b
  3084  00539E  D00A               	goto	l248
  3085  0053A0  C1E7  F26C         	movff	_PWM+12,_rgl+7
  3086                           ;rgl.c: 1027: }
  3087  0053A4  D007               	goto	l248
  3088  0053A6                     l246:
  3089                           ;rgl.c: 1028: else
  3090  0053A6  C26C  FFE8         	movff	_rgl+7,wreg
  3091  0053AA  0101               	movlb	(_PWM+32) shr (0+8)
  3092  0053AC  61FB               	cpfslt	(_PWM+32)& (0+255),b
  3093  0053AE  D002               	goto	l248
  3094  0053B0  C1FB  F26C         	movff	_PWM+32,_rgl+7
  3095  0053B4                     l248:
  3096                           ;rgl.c: 1031: }
  3097  0053B4  C1E4  F000         	movff	_PWM+9,btemp
  3098  0053B8  6A01               	clrf	btemp+1,c
  3099  0053BA  C26C  F002         	movff	_rgl+7,btemp+2
  3100  0053BE  0100               	movlb	__Lparam shr (0+8)
  3101  0053C0  51E9               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3102  0053C2  5C02               	subwf	btemp+2,w,c
  3103  0053C4  6EF6               	movwf	tblptrl,c
  3104  0053C6  6AF7               	clrf	tblptrh,c
  3105  0053C8  B0D8               	btfsc	status,0,c
  3106  0053CA  2AF7               	incf	tblptrh,f,c
  3107  0053CC  AFE9               	btfss	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  3108  0053CE  06F7               	decf	tblptrh,f,c
  3109  0053D0  50F7               	movf	tblptrh,w,c
  3110  0053D2  0A80               	xorlw	128
  3111  0053D4  6E02               	movwf	btemp+2,c
  3112  0053D6  5001               	movf	btemp+1,w,c
  3113  0053D8  0A80               	xorlw	128
  3114  0053DA  5C02               	subwf	btemp+2,w,c
  3115  0053DC  E102               	bnz	u2105
  3116  0053DE  5000               	movf	btemp,w,c
  3117  0053E0  5CF6               	subwf	tblptrl,w,c
  3118  0053E2                     u2105:
  3119  0053E2  E203               	bc	l250
  3120  0053E4  C1E4  F26C         	movff	_PWM+9,_rgl+7
  3121  0053E8  D004               	goto	l251
  3122  0053EA                     l250:
  3123                           ;rgl.c: 1033: else rgl.srp-=k;
  3124  0053EA  0100               	movlb	__Lparam shr (0+8)
  3125  0053EC  51E9               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3126  0053EE  0102               	movlb	(_rgl+7) shr (0+8)
  3127  0053F0  5F6C               	subwf	(_rgl+7)& (0+255),f,b
  3128  0053F2                     l251:
  3129                           ;rgl.c: 1036: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  3130  0053F2  C26C  FFE8         	movff	_rgl+7,wreg
  3131  0053F6  0102               	movlb	(_rgl+8) shr (0+8)
  3132  0053F8  616D               	cpfslt	(_rgl+8)& (0+255),b
  3133  0053FA  0012               	return	
  3134  0053FC  C26C  F26D         	movff	_rgl+7,_rgl+8
  3135                           ;rgl.c: 1037: return;
  3136  005400  0012               	return	
  3137  005402                     l237:
  3138                           ;rgl.c: 1039: else
  3139  005402  0100               	movlb	__Lparam shr (0+8)
  3140  005404  6BE9               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3141                           ;rgl.c: 1042: if(Tmaleje(0)&&m>=2)
  3142  005406  0E00               	movlw	0
  3143  005408  EC91  F036         	call	_Tmaleje
  3144  00540C  E310               	bnc	l254
  3145  00540E  0E01               	movlw	1
  3146  005410  010E               	movlb	F1816 shr (0+8)
  3147  005412  65CC               	cpfsgt	F1816& (0+255),b
  3148  005414  D00C               	goto	l254
  3149                           ;rgl.c: 1043: {
  3150  005416  010E               	movlb	F1818 shr (0+8)
  3151  005418  6BCE               	clrf	F1818& (0+255),b
  3152                           ;rgl.c: 1045: o=0;
  3153  00541A  010E               	movlb	F1817 shr (0+8)
  3154  00541C  6BCD               	clrf	F1817& (0+255),b
  3155                           ;rgl.c: 1046: l=0;
  3156  00541E  010E               	movlb	F1815 shr (0+8)
  3157  005420  6BCB               	clrf	F1815& (0+255),b
  3158                           ;rgl.c: 1047: m=0;
  3159  005422  010E               	movlb	F1816 shr (0+8)
  3160  005424  6BCC               	clrf	F1816& (0+255),b
  3161                           ;rgl.c: 1048: k=5;
  3162  005426  0E05               	movlw	5
  3163  005428  0100               	movlb	__Lparam shr (0+8)
  3164  00542A  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3165                           ;rgl.c: 1050: }
  3166  00542C  D015               	goto	l255
  3167  00542E                     l254:
  3168                           ;rgl.c: 1051: else
  3169  00542E  0E01               	movlw	1
  3170  005430  ECB3  F036         	call	_Tnizsza
  3171  005434  E30F               	bnc	l256
  3172                           ;rgl.c: 1053: {
  3173  005436  ECAC  F036         	call	_Tstoi	;wreg free
  3174  00543A  E30E               	bnc	l255
  3175                           ;rgl.c: 1055: {
  3176  00543C  0E02               	movlw	2
  3177  00543E  010E               	movlb	F1815 shr (0+8)
  3178  005440  65CB               	cpfsgt	F1815& (0+255),b
  3179  005442  D003               	goto	l258
  3180                           ;rgl.c: 1057: {
  3181  005444  0100               	movlb	__Lparam shr (0+8)
  3182  005446  6FE9               	movwf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3183  005448  D005               	goto	l256
  3184                           ;rgl.c: 1059: l=0;
  3185                           ;rgl.c: 1060: }
  3186  00544A                     l258:
  3187                           ;rgl.c: 1061: else
  3188  00544A  0100               	movlb	__Lparam shr (0+8)
  3189  00544C  6BE9               	clrf	?a_ModPruCW^(__Lparam& (0+65280)),b
  3190                           ;rgl.c: 1064: l++;
  3191  00544E  010E               	movlb	F1815 shr (0+8)
  3192  005450  2BCB               	incf	F1815& (0+255),f,b
  3193                           ;rgl.c: 1065: }
  3194  005452  D002               	goto	l255
  3195  005454                     l256:
  3196  005454  010E               	movlb	F1815 shr (0+8)
  3197  005456  6BCB               	clrf	F1815& (0+255),b
  3198  005458                     l255:
  3199                           ;rgl.c: 1068: if(PWM.MMAXCW>PWM.MGMOD)
  3200  005458  C1FB  FFE8         	movff	_PWM+32,wreg
  3201  00545C  0101               	movlb	(_PWM+12) shr (0+8)
  3202  00545E  61E7               	cpfslt	(_PWM+12)& (0+255),b
  3203  005460  D01A               	goto	l261
  3204                           ;rgl.c: 1069: {
  3205  005462  C26C  FFE8         	movff	_rgl+7,wreg
  3206  005466  0100               	movlb	__Lparam shr (0+8)
  3207  005468  25E9               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3208  00546A  6E02               	movwf	btemp+2,c
  3209  00546C  6A03               	clrf	btemp+3,c
  3210  00546E  B0D8               	btfsc	status,0,c
  3211  005470  2A03               	incf	btemp+3,f,c
  3212  005472  BFE9               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  3213  005474  0603               	decf	btemp+3,f,c
  3214  005476  C1E7  F000         	movff	_PWM+12,btemp
  3215  00547A  6A01               	clrf	btemp+1,c
  3216  00547C  5001               	movf	btemp+1,w,c
  3217  00547E  0A80               	xorlw	128
  3218  005480  6E04               	movwf	btemp+4,c
  3219  005482  5003               	movf	btemp+3,w,c
  3220  005484  0A80               	xorlw	128
  3221  005486  5C04               	subwf	btemp+4,w,c
  3222  005488  E102               	bnz	u2195
  3223  00548A  5002               	movf	btemp+2,w,c
  3224  00548C  5C00               	subwf	btemp,w,c
  3225  00548E                     u2195:
  3226  00548E  E21D               	bc	l265
  3227  005490  C1E7  F26C         	movff	_PWM+12,_rgl+7
  3228  005494  D01E               	goto	l264
  3229                           ;rgl.c: 1071: else rgl.srp+=k;
  3230                           ;rgl.c: 1072: }
  3231  005496                     l261:
  3232                           ;rgl.c: 1073: else
  3233  005496  C26C  FFE8         	movff	_rgl+7,wreg
  3234  00549A  0100               	movlb	__Lparam shr (0+8)
  3235  00549C  25E9               	addwf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3236  00549E  6E02               	movwf	btemp+2,c
  3237  0054A0  6A03               	clrf	btemp+3,c
  3238  0054A2  B0D8               	btfsc	status,0,c
  3239  0054A4  2A03               	incf	btemp+3,f,c
  3240  0054A6  BFE9               	btfsc	?a_ModPruCW^(__Lparam& (0+65280)),7,b
  3241  0054A8  0603               	decf	btemp+3,f,c
  3242  0054AA  C1FB  F000         	movff	_PWM+32,btemp
  3243  0054AE  6A01               	clrf	btemp+1,c
  3244  0054B0  5001               	movf	btemp+1,w,c
  3245  0054B2  0A80               	xorlw	128
  3246  0054B4  6E04               	movwf	btemp+4,c
  3247  0054B6  5003               	movf	btemp+3,w,c
  3248  0054B8  0A80               	xorlw	128
  3249  0054BA  5C04               	subwf	btemp+4,w,c
  3250  0054BC  E102               	bnz	u2205
  3251  0054BE  5002               	movf	btemp+2,w,c
  3252  0054C0  5C00               	subwf	btemp,w,c
  3253  0054C2                     u2205:
  3254  0054C2  E203               	bc	l265
  3255  0054C4  C1FB  F26C         	movff	_PWM+32,_rgl+7
  3256  0054C8  D004               	goto	l264
  3257  0054CA                     l265:
  3258                           ;rgl.c: 1076: else rgl.srp+=k;
  3259  0054CA  0100               	movlb	__Lparam shr (0+8)
  3260  0054CC  51E9               	movf	?a_ModPruCW^(__Lparam& (0+65280)),w
  3261  0054CE  0102               	movlb	(_rgl+7) shr (0+8)
  3262  0054D0  276C               	addwf	(_rgl+7)& (0+255),f,b
  3263  0054D2                     l264:
  3264                           ;rgl.c: 1077: }
  3265  0054D2  C26C  FFE8         	movff	_rgl+7,wreg
  3266  0054D6  0102               	movlb	(_rgl+8) shr (0+8)
  3267  0054D8  616D               	cpfslt	(_rgl+8)& (0+255),b
  3268  0054DA  0012               	return	
  3269  0054DC  C26C  F26D         	movff	_rgl+7,_rgl+8
  3270                           ;rgl.c: 1079: return;
  3271  0054E0  0012               	return	
  3272                           ;rgl.c: 1080: }
  3273  0054E2                     __end_of_ModPruCW:
  3274                           ;rgl.c: 1087: void IncMaxCW(void)
  3275                           ;rgl.c: 1088: {
  3276  0054E2                     _IncMaxCW:
  3277  000000                     
  3278                           ;rgl.c: 1089: unsigned char k;
  3279  0054E2  0102               	movlb	_rgl shr (0+8)
  3280  0054E4  A565               	btfss	_rgl& (0+255),2,b
  3281  0054E6  D014               	goto	l269
  3282                           ;rgl.c: 1094: {
  3283  0054E8  C1FB  FFE8         	movff	_PWM+32,wreg
  3284  0054EC  0101               	movlb	(_PWM+12) shr (0+8)
  3285  0054EE  61E7               	cpfslt	(_PWM+12)& (0+255),b
  3286  0054F0  D007               	goto	l270
  3287                           ;rgl.c: 1096: {
  3288  0054F2  C26D  FFE8         	movff	_rgl+8,wreg
  3289  0054F6  61E7               	cpfslt	(_PWM+12)& (0+255),b
  3290  0054F8  0012               	return	
  3291  0054FA  C1E7  F26D         	movff	_PWM+12,_rgl+8
  3292                           ;rgl.c: 1098: }
  3293  0054FE  0012               	return	
  3294  005500                     l270:
  3295                           ;rgl.c: 1099: else
  3296  005500  C26D  FFE8         	movff	_rgl+8,wreg
  3297  005504  0101               	movlb	(_PWM+32) shr (0+8)
  3298  005506  61FB               	cpfslt	(_PWM+32)& (0+255),b
  3299  005508  0012               	return	
  3300  00550A  C1FB  F26D         	movff	_PWM+32,_rgl+8
  3301                           ;rgl.c: 1102: }
  3302  00550E  0012               	return	
  3303  005510                     l269:
  3304                           ;rgl.c: 1104: }
  3305  005510  0E02               	movlw	2
  3306  005512  EC84  F036         	call	_Trosnie
  3307  005516  E33D               	bnc	l274
  3308  005518  0102               	movlb	_rgl shr (0+8)
  3309  00551A  B765               	btfsc	_rgl& (0+255),3,b
  3310  00551C  D03A               	goto	l274
  3311                           ;rgl.c: 1108: {
  3312  00551E  0102               	movlb	_rgl shr (0+8)
  3313  005520  8765               	bsf	_rgl& (0+255),3,b
  3314                           ;rgl.c: 1110: k=5;
  3315  005522  0E05               	movlw	5
  3316  005524  6ED9               	movwf	fsr2l,c
  3317                           ;rgl.c: 1111: if(PWM.MMAXCW>PWM.MGMOD)
  3318  005526  C1FB  FFE8         	movff	_PWM+32,wreg
  3319  00552A  0101               	movlb	(_PWM+12) shr (0+8)
  3320  00552C  61E7               	cpfslt	(_PWM+12)& (0+255),b
  3321  00552E  D017               	goto	l275
  3322                           ;rgl.c: 1112: {
  3323  005530  0E05               	movlw	5
  3324  005532  C26C  F002         	movff	_rgl+7,btemp+2
  3325  005536  6A03               	clrf	btemp+3,c
  3326  005538  2602               	addwf	btemp+2,f,c
  3327  00553A  0E00               	movlw	0
  3328  00553C  2203               	addwfc	btemp+3,f,c
  3329  00553E  C1E7  F000         	movff	_PWM+12,btemp
  3330  005542  6A01               	clrf	btemp+1,c
  3331  005544  5001               	movf	btemp+1,w,c
  3332  005546  0A80               	xorlw	128
  3333  005548  6E04               	movwf	btemp+4,c
  3334  00554A  5003               	movf	btemp+3,w,c
  3335  00554C  0A80               	xorlw	128
  3336  00554E  5C04               	subwf	btemp+4,w,c
  3337  005550  E102               	bnz	u2305
  3338  005552  5002               	movf	btemp+2,w,c
  3339  005554  5C00               	subwf	btemp,w,c
  3340  005556                     u2305:
  3341  005556  E21A               	bc	l279
  3342  005558  C1E7  F26C         	movff	_PWM+12,_rgl+7
  3343  00555C  D01A               	goto	l274
  3344                           ;rgl.c: 1114: else rgl.srp+=k;
  3345                           ;rgl.c: 1115: }
  3346  00555E                     l275:
  3347                           ;rgl.c: 1116: else
  3348  00555E  0E05               	movlw	5
  3349  005560  C26C  F002         	movff	_rgl+7,btemp+2
  3350  005564  6A03               	clrf	btemp+3,c
  3351  005566  2602               	addwf	btemp+2,f,c
  3352  005568  0E00               	movlw	0
  3353  00556A  2203               	addwfc	btemp+3,f,c
  3354  00556C  C1FB  F000         	movff	_PWM+32,btemp
  3355  005570  6A01               	clrf	btemp+1,c
  3356  005572  5001               	movf	btemp+1,w,c
  3357  005574  0A80               	xorlw	128
  3358  005576  6E04               	movwf	btemp+4,c
  3359  005578  5003               	movf	btemp+3,w,c
  3360  00557A  0A80               	xorlw	128
  3361  00557C  5C04               	subwf	btemp+4,w,c
  3362  00557E  E102               	bnz	u2315
  3363  005580  5002               	movf	btemp+2,w,c
  3364  005582  5C00               	subwf	btemp,w,c
  3365  005584                     u2315:
  3366  005584  E203               	bc	l279
  3367  005586  C1FB  F26C         	movff	_PWM+32,_rgl+7
  3368  00558A  D003               	goto	l274
  3369  00558C                     l279:
  3370                           ;rgl.c: 1119: else rgl.srp+=k;
  3371  00558C  0102               	movlb	(_rgl+7) shr (0+8)
  3372  00558E  0E05               	movlw	5
  3373  005590  276C               	addwf	(_rgl+7)& (0+255),f,b
  3374  005592                     l274:
  3375                           ;rgl.c: 1120: }
  3376  005592  0E03               	movlw	3
  3377  005594  EC84  F036         	call	_Trosnie
  3378  005598  E33D               	bnc	l281
  3379  00559A  0102               	movlb	_rgl shr (0+8)
  3380  00559C  B965               	btfsc	_rgl& (0+255),4,b
  3381  00559E  D03A               	goto	l281
  3382                           ;rgl.c: 1123: {
  3383  0055A0  0102               	movlb	_rgl shr (0+8)
  3384  0055A2  8965               	bsf	_rgl& (0+255),4,b
  3385                           ;rgl.c: 1125: k=8;
  3386  0055A4  0E08               	movlw	8
  3387  0055A6  6ED9               	movwf	fsr2l,c
  3388                           ;rgl.c: 1126: if(PWM.MMAXCW>PWM.MGMOD)
  3389  0055A8  C1FB  FFE8         	movff	_PWM+32,wreg
  3390  0055AC  0101               	movlb	(_PWM+12) shr (0+8)
  3391  0055AE  61E7               	cpfslt	(_PWM+12)& (0+255),b
  3392  0055B0  D017               	goto	l282
  3393                           ;rgl.c: 1127: {
  3394  0055B2  0E08               	movlw	8
  3395  0055B4  C26C  F002         	movff	_rgl+7,btemp+2
  3396  0055B8  6A03               	clrf	btemp+3,c
  3397  0055BA  2602               	addwf	btemp+2,f,c
  3398  0055BC  0E00               	movlw	0
  3399  0055BE  2203               	addwfc	btemp+3,f,c
  3400  0055C0  C1E7  F000         	movff	_PWM+12,btemp
  3401  0055C4  6A01               	clrf	btemp+1,c
  3402  0055C6  5001               	movf	btemp+1,w,c
  3403  0055C8  0A80               	xorlw	128
  3404  0055CA  6E04               	movwf	btemp+4,c
  3405  0055CC  5003               	movf	btemp+3,w,c
  3406  0055CE  0A80               	xorlw	128
  3407  0055D0  5C04               	subwf	btemp+4,w,c
  3408  0055D2  E102               	bnz	u2365
  3409  0055D4  5002               	movf	btemp+2,w,c
  3410  0055D6  5C00               	subwf	btemp,w,c
  3411  0055D8                     u2365:
  3412  0055D8  E21A               	bc	l286
  3413  0055DA  C1E7  F26C         	movff	_PWM+12,_rgl+7
  3414  0055DE  D01A               	goto	l281
  3415                           ;rgl.c: 1129: else rgl.srp+=k;
  3416                           ;rgl.c: 1130: }
  3417  0055E0                     l282:
  3418                           ;rgl.c: 1131: else
  3419  0055E0  0E08               	movlw	8
  3420  0055E2  C26C  F002         	movff	_rgl+7,btemp+2
  3421  0055E6  6A03               	clrf	btemp+3,c
  3422  0055E8  2602               	addwf	btemp+2,f,c
  3423  0055EA  0E00               	movlw	0
  3424  0055EC  2203               	addwfc	btemp+3,f,c
  3425  0055EE  C1FB  F000         	movff	_PWM+32,btemp
  3426  0055F2  6A01               	clrf	btemp+1,c
  3427  0055F4  5001               	movf	btemp+1,w,c
  3428  0055F6  0A80               	xorlw	128
  3429  0055F8  6E04               	movwf	btemp+4,c
  3430  0055FA  5003               	movf	btemp+3,w,c
  3431  0055FC  0A80               	xorlw	128
  3432  0055FE  5C04               	subwf	btemp+4,w,c
  3433  005600  E102               	bnz	u2375
  3434  005602  5002               	movf	btemp+2,w,c
  3435  005604  5C00               	subwf	btemp,w,c
  3436  005606                     u2375:
  3437  005606  E203               	bc	l286
  3438  005608  C1FB  F26C         	movff	_PWM+32,_rgl+7
  3439  00560C  D003               	goto	l281
  3440  00560E                     l286:
  3441                           ;rgl.c: 1134: else rgl.srp+=k;
  3442  00560E  0102               	movlb	(_rgl+7) shr (0+8)
  3443  005610  0E08               	movlw	8
  3444  005612  276C               	addwf	(_rgl+7)& (0+255),f,b
  3445  005614                     l281:
  3446                           ;rgl.c: 1135: }
  3447  005614  CEE5  FFE8         	movff	_pwm_kwr,wreg
  3448  005618  0102               	movlb	(_rgl+9) shr (0+8)
  3449  00561A  5D6E               	subwf	(_rgl+9)& (0+255),w,b
  3450  00561C  E304               	bnc	l288
  3451                           ;rgl.c: 1140: {
  3452  00561E  0E02               	movlw	2
  3453  005620  EC84  F036         	call	_Trosnie
  3454  005624  D003               	goto	L11
  3455                           ;rgl.c: 1142: }
  3456  005626                     l288:
  3457                           ;rgl.c: 1143: else
  3458  005626  0E01               	movlw	1
  3459  005628  EC84  F036         	call	_Trosnie
  3460  00562C                     L11:
  3461  00562C  B0D8               	btfsc	status,0,c
  3462  00562E  0012               	return	
  3463                           ;rgl.c: 1146: }
  3464  005630  0E05               	movlw	5
  3465  005632  6ED9               	movwf	fsr2l,c
  3466                           ;rgl.c: 1148: if(rgl.xmod+k>0xF0) rgl.xmod=0xF0;
  3467  005634  C26D  F000         	movff	_rgl+8,btemp
  3468  005638  6A01               	clrf	btemp+1,c
  3469  00563A  2600               	addwf	btemp,f,c
  3470  00563C  0E00               	movlw	0
  3471  00563E  2201               	addwfc	btemp+1,f,c
  3472  005640  5001               	movf	btemp+1,w,c
  3473  005642  0A80               	xorlw	128
  3474  005644  0F80               	addlw	-128
  3475  005646  0EF1               	movlw	241
  3476  005648  B4D8               	btfsc	status,2,c
  3477  00564A  5C00               	subwf	btemp,w,c
  3478  00564C  E304               	bnc	l292
  3479  00564E  0EF0               	movlw	-16
  3480  005650  CFE8 F26D          	movff	wreg,_rgl+8
  3481  005654  D003               	goto	l293
  3482  005656                     l292:
  3483                           ;rgl.c: 1149: else rgl.xmod+=k;
  3484  005656  0102               	movlb	(_rgl+8) shr (0+8)
  3485  005658  0E05               	movlw	5
  3486  00565A  276D               	addwf	(_rgl+8)& (0+255),f,b
  3487  00565C                     l293:
  3488                           ;rgl.c: 1150: if(rgl.xmod>PWM.MMAXCW) rgl.xmod=P
      +                          WM.MMAXCW;
  3489  00565C  C26D  FFE8         	movff	_rgl+8,wreg
  3490  005660  0101               	movlb	(_PWM+32) shr (0+8)
  3491  005662  61FB               	cpfslt	(_PWM+32)& (0+255),b
  3492  005664  0012               	return	
  3493  005666  C1FB  F26D         	movff	_PWM+32,_rgl+8
  3494                           ;rgl.c: 1151: }
  3495  00566A  0012               	return	
  3496  00566C                     __end_of_IncMaxCW:
  3497                           ;rgl.c: 1181: void ModPrzCW(void)
  3498                           ;rgl.c: 1182: {
  3499  00566C                     _ModPrzCW:
  3500  000000                     
  3501                           ;rgl.c: 1183: unsigned char p,m,maxmod,mdmod;
  3502  00566C  0E00               	movlw	0
  3503  00566E  ECB3  F036         	call	_Tnizsza
  3504  005672  E201 D187          	bnc	l296
  3505                           ;rgl.c: 1189: {
  3506  005676  C1E7  FFE8         	movff	_PWM+12,wreg
  3507  00567A  0101               	movlb	(_PWM+32) shr (0+8)
  3508  00567C  61FB               	cpfslt	(_PWM+32)& (0+255),b
  3509  00567E  D003               	goto	l297
  3510  005680  C1FB  FFE1         	movff	_PWM+32,fsr1l
  3511  005684  D002               	goto	l298
  3512  005686                     l297:
  3513                           ;rgl.c: 1191: else maxmod=PWM.MGMOD;
  3514  005686  C1E7  FFE1         	movff	_PWM+12,fsr1l
  3515  00568A                     l298:
  3516                           ;rgl.c: 1194: if(rgl.tmp_pwm>=pwm_center)
  3517  00568A  CEE4  FFE8         	movff	_pwm_center,wreg
  3518  00568E  0102               	movlb	(_rgl+9) shr (0+8)
  3519  005690  5D6E               	subwf	(_rgl+9)& (0+255),w,b
  3520  005692  E201 D0BE          	bnc	l299
  3521                           ;rgl.c: 1195: {
  3522  005696  C26D  FFE8         	movff	_rgl+8,wreg
  3523  00569A  5CE1               	subwf	fsr1l,w,c
  3524  00569C  E303               	bnc	l300
  3525  00569E  C26D  FFD9         	movff	_rgl+8,fsr2l
  3526  0056A2  D004               	goto	l301
  3527  0056A4                     l300:
  3528                           ;rgl.c: 1197: else
  3529  0056A4  50E1               	movf	fsr1l,w,c
  3530  0056A6  6ED9               	movwf	fsr2l,c
  3531                           ;rgl.c: 1200: rgl.xmod=maxmod;
  3532  0056A8  CFE1 F26D          	movff	fsr1l,_rgl+8
  3533  0056AC                     l301:
  3534                           ;rgl.c: 1201: }
  3535  0056AC  C1B0  FFE8         	movff	_DtCW+9,wreg
  3536  0056B0  0A80               	xorlw	128
  3537  0056B2  0F79               	addlw	-135
  3538  0056B4  E335               	bnc	l302
  3539  0056B6  0E01               	movlw	1
  3540  0056B8  010E               	movlb	_tmr shr (0+8)
  3541  0056BA  65E6               	cpfsgt	_tmr& (0+255),b
  3542  0056BC  D031               	goto	l302
  3543                           ;rgl.c: 1203: {
  3544  0056BE  6BE6               	clrf	_tmr& (0+255),b
  3545                           ;rgl.c: 1205: r=p-PWM.MDMOD;
  3546  0056C0  C1E4  FFE8         	movff	_PWM+9,wreg
  3547  0056C4  5CD9               	subwf	fsr2l,w,c
  3548  0056C6  6EF3               	movwf	prodl,c
  3549  0056C8  6AF4               	clrf	prodh,c
  3550  0056CA  A0D8               	btfss	status,0,c
  3551  0056CC  06F4               	decf	prodh,f,c
  3552                           ;rgl.c: 1206: if((p-(r/3))>PWM.MDMOD) p-=r/3;
  3553  0056CE  0E03               	movlw	3
  3554  0056D0  6E02               	movwf	btemp+2,c
  3555  0056D2  6A03               	clrf	btemp+3,c
  3556  0056D4  CFF3 F000          	movff	prodl,btemp
  3557  0056D8  CFF4 F001          	movff	prodh,btemp+1
  3558  0056DC  EC49  F078         	call	awdiv
  3559  0056E0  5004               	movf	btemp+4,w,c
  3560  0056E2  5CD9               	subwf	fsr2l,w,c
  3561  0056E4  6E00               	movwf	btemp,c
  3562  0056E6  5005               	movf	btemp+5,w,c
  3563  0056E8  A0D8               	btfss	status,0,c
  3564  0056EA  2805               	incf	btemp+5,w,c
  3565  0056EC  6A01               	clrf	btemp+1,c
  3566  0056EE  5E01               	subwf	btemp+1,f,c
  3567  0056F0  C1E4  F002         	movff	_PWM+9,btemp+2
  3568  0056F4  6A03               	clrf	btemp+3,c
  3569  0056F6  5003               	movf	btemp+3,w,c
  3570  0056F8  0A80               	xorlw	128
  3571  0056FA  6E04               	movwf	btemp+4,c
  3572  0056FC  5001               	movf	btemp+1,w,c
  3573  0056FE  0A80               	xorlw	128
  3574  005700  5C04               	subwf	btemp+4,w,c
  3575  005702  E102               	bnz	u2505
  3576  005704  5000               	movf	btemp,w,c
  3577  005706  5C02               	subwf	btemp+2,w,c
  3578  005708                     u2505:
  3579  005708  E301 D138          	bc	l325
  3580  00570C  0E03               	movlw	3
  3581  00570E  6E02               	movwf	btemp+2,c
  3582  005710  6A03               	clrf	btemp+3,c
  3583  005712  CFF3 F000          	movff	prodl,btemp
  3584  005716  CFF4 F001          	movff	prodh,btemp+1
  3585  00571A  EC49  F078         	call	awdiv
  3586  00571E  D039               	goto	L14
  3587                           ;rgl.c: 1207: else p=PWM.MDMOD;
  3588                           ;rgl.c: 1208: rgl.xmod=p;
  3589                           ;rgl.c: 1209: }
  3590  005720                     l302:
  3591                           ;rgl.c: 1210: else
  3592  005720  C1B0  FFE8         	movff	_DtCW+9,wreg
  3593  005724  0A80               	xorlw	128
  3594  005726  0F7B               	addlw	-133
  3595  005728  E337               	bnc	l306
  3596  00572A  0E01               	movlw	1
  3597  00572C  010E               	movlb	_tmr shr (0+8)
  3598  00572E  65E6               	cpfsgt	_tmr& (0+255),b
  3599  005730  D033               	goto	l306
  3600                           ;rgl.c: 1212: {
  3601  005732  6BE6               	clrf	_tmr& (0+255),b
  3602                           ;rgl.c: 1214: r=p-PWM.MDMOD;
  3603  005734  C1E4  FFE8         	movff	_PWM+9,wreg
  3604  005738  5CD9               	subwf	fsr2l,w,c
  3605  00573A  6EF3               	movwf	prodl,c
  3606  00573C  6AF4               	clrf	prodh,c
  3607  00573E  A0D8               	btfss	status,0,c
  3608  005740  06F4               	decf	prodh,f,c
  3609                           ;rgl.c: 1215: if((p-(r/4))>PWM.MDMOD) p-=r/4;
  3610  005742  0E04               	movlw	4
  3611  005744  6E02               	movwf	btemp+2,c
  3612  005746  6A03               	clrf	btemp+3,c
  3613  005748  CFF3 F000          	movff	prodl,btemp
  3614  00574C  CFF4 F001          	movff	prodh,btemp+1
  3615  005750  EC49  F078         	call	awdiv
  3616  005754  5004               	movf	btemp+4,w,c
  3617  005756  5CD9               	subwf	fsr2l,w,c
  3618  005758  6E00               	movwf	btemp,c
  3619  00575A  5005               	movf	btemp+5,w,c
  3620  00575C  A0D8               	btfss	status,0,c
  3621  00575E  2805               	incf	btemp+5,w,c
  3622  005760  6A01               	clrf	btemp+1,c
  3623  005762  5E01               	subwf	btemp+1,f,c
  3624  005764  C1E4  F002         	movff	_PWM+9,btemp+2
  3625  005768  6A03               	clrf	btemp+3,c
  3626  00576A  5003               	movf	btemp+3,w,c
  3627  00576C  0A80               	xorlw	128
  3628  00576E  6E04               	movwf	btemp+4,c
  3629  005770  5001               	movf	btemp+1,w,c
  3630  005772  0A80               	xorlw	128
  3631  005774  5C04               	subwf	btemp+4,w,c
  3632  005776  E102               	bnz	u2545
  3633  005778  5000               	movf	btemp,w,c
  3634  00577A  5C02               	subwf	btemp+2,w,c
  3635  00577C                     u2545:
  3636  00577C  E301 D0FE          	bc	l325
  3637  005780  0E04               	movlw	4
  3638  005782  6E02               	movwf	btemp+2,c
  3639  005784  6A03               	clrf	btemp+3,c
  3640  005786  CFF3 F000          	movff	prodl,btemp
  3641  00578A  CFF4 F001          	movff	prodh,btemp+1
  3642  00578E  EC49  F078         	call	awdiv
  3643  005792                     L14:
  3644  005792  5004               	movf	btemp+4,w,c
  3645  005794  5ED9               	subwf	fsr2l,f,c
  3646  005796  D0F4               	goto	l326
  3647                           ;rgl.c: 1216: else p=PWM.MDMOD;
  3648                           ;rgl.c: 1217: rgl.xmod=p;
  3649                           ;rgl.c: 1218: }
  3650  005798                     l306:
  3651                           ;rgl.c: 1219: else
  3652  005798  C1B0  FFE8         	movff	_DtCW+9,wreg
  3653  00579C  0A80               	xorlw	128
  3654  00579E  0F7C               	addlw	-132
  3655  0057A0  E201 D0F0          	bnc	l296
  3656  0057A4  010E               	movlb	_tmr shr (0+8)
  3657  0057A6  53E6               	movf	_tmr& (0+255),f,b
  3658  0057A8  E101 D0EC          	bz	l296
  3659                           ;rgl.c: 1221: {
  3660  0057AC  6BE6               	clrf	_tmr& (0+255),b
  3661                           ;rgl.c: 1223: r=p-PWM.MDMOD;
  3662  0057AE  C1E4  FFE8         	movff	_PWM+9,wreg
  3663  0057B2  5CD9               	subwf	fsr2l,w,c
  3664  0057B4  6EF3               	movwf	prodl,c
  3665  0057B6  6AF4               	clrf	prodh,c
  3666  0057B8  A0D8               	btfss	status,0,c
  3667  0057BA  06F4               	decf	prodh,f,c
  3668                           ;rgl.c: 1224: if((p-(r/14))>PWM.MDMOD) p-=r/14;
  3669  0057BC  0E0E               	movlw	14
  3670  0057BE  6E02               	movwf	btemp+2,c
  3671  0057C0  6A03               	clrf	btemp+3,c
  3672  0057C2  CFF3 F000          	movff	prodl,btemp
  3673  0057C6  CFF4 F001          	movff	prodh,btemp+1
  3674  0057CA  EC49  F078         	call	awdiv
  3675  0057CE  5004               	movf	btemp+4,w,c
  3676  0057D0  5CD9               	subwf	fsr2l,w,c
  3677  0057D2  6E00               	movwf	btemp,c
  3678  0057D4  5005               	movf	btemp+5,w,c
  3679  0057D6  A0D8               	btfss	status,0,c
  3680  0057D8  2805               	incf	btemp+5,w,c
  3681  0057DA  6A01               	clrf	btemp+1,c
  3682  0057DC  5E01               	subwf	btemp+1,f,c
  3683  0057DE  C1E4  F002         	movff	_PWM+9,btemp+2
  3684  0057E2  6A03               	clrf	btemp+3,c
  3685  0057E4  5003               	movf	btemp+3,w,c
  3686  0057E6  0A80               	xorlw	128
  3687  0057E8  6E04               	movwf	btemp+4,c
  3688  0057EA  5001               	movf	btemp+1,w,c
  3689  0057EC  0A80               	xorlw	128
  3690  0057EE  5C04               	subwf	btemp+4,w,c
  3691  0057F0  E102               	bnz	u2585
  3692  0057F2  5000               	movf	btemp,w,c
  3693  0057F4  5C02               	subwf	btemp+2,w,c
  3694  0057F6                     u2585:
  3695  0057F6  E301 D0C1          	bc	l325
  3696  0057FA  0E0E               	movlw	14
  3697  0057FC  6E02               	movwf	btemp+2,c
  3698  0057FE  6A03               	clrf	btemp+3,c
  3699  005800  CFF3 F000          	movff	prodl,btemp
  3700  005804  CFF4 F001          	movff	prodh,btemp+1
  3701  005808  EC49  F078         	call	awdiv
  3702  00580C                     L12:
  3703  00580C  5004               	movf	btemp+4,w,c
  3704  00580E  5ED9               	subwf	fsr2l,f,c
  3705  005810  D0B7               	goto	l326
  3706                           ;rgl.c: 1225: else p=PWM.MDMOD;
  3707                           ;rgl.c: 1226: rgl.xmod=p;
  3708                           ;rgl.c: 1227: }
  3709  005812                     l299:
  3710                           ;rgl.c: 1229: else
  3711  005812  C26D  FFE8         	movff	_rgl+8,wreg
  3712  005816  5CE1               	subwf	fsr1l,w,c
  3713  005818  E303               	bnc	l314
  3714  00581A  C26D  FFD9         	movff	_rgl+8,fsr2l
  3715  00581E  D004               	goto	l315
  3716  005820                     l314:
  3717                           ;rgl.c: 1232: else
  3718  005820  50E1               	movf	fsr1l,w,c
  3719  005822  6ED9               	movwf	fsr2l,c
  3720                           ;rgl.c: 1235: rgl.xmod=maxmod;
  3721  005824  CFE1 F26D          	movff	fsr1l,_rgl+8
  3722  005828                     l315:
  3723                           ;rgl.c: 1236: }
  3724  005828  C1B0  FFE8         	movff	_DtCW+9,wreg
  3725  00582C  0A80               	xorlw	128
  3726  00582E  0F79               	addlw	-135
  3727  005830  E334               	bnc	l316
  3728  005832  0E01               	movlw	1
  3729  005834  010E               	movlb	_tmr shr (0+8)
  3730  005836  65E6               	cpfsgt	_tmr& (0+255),b
  3731  005838  D030               	goto	l316
  3732                           ;rgl.c: 1238: {
  3733  00583A  6BE6               	clrf	_tmr& (0+255),b
  3734                           ;rgl.c: 1240: r=p-PWM.MDMOD;
  3735  00583C  C1E4  FFE8         	movff	_PWM+9,wreg
  3736  005840  5CD9               	subwf	fsr2l,w,c
  3737  005842  6EF3               	movwf	prodl,c
  3738  005844  6AF4               	clrf	prodh,c
  3739  005846  A0D8               	btfss	status,0,c
  3740  005848  06F4               	decf	prodh,f,c
  3741                           ;rgl.c: 1241: if((p-(r/2))>PWM.MDMOD) p-=r/2;
  3742  00584A  0E02               	movlw	2
  3743  00584C  6E02               	movwf	btemp+2,c
  3744  00584E  6A03               	clrf	btemp+3,c
  3745  005850  CFF3 F000          	movff	prodl,btemp
  3746  005854  CFF4 F001          	movff	prodh,btemp+1
  3747  005858  EC49  F078         	call	awdiv
  3748  00585C  5004               	movf	btemp+4,w,c
  3749  00585E  5CD9               	subwf	fsr2l,w,c
  3750  005860  6E00               	movwf	btemp,c
  3751  005862  5005               	movf	btemp+5,w,c
  3752  005864  A0D8               	btfss	status,0,c
  3753  005866  2805               	incf	btemp+5,w,c
  3754  005868  6A01               	clrf	btemp+1,c
  3755  00586A  5E01               	subwf	btemp+1,f,c
  3756  00586C  C1E4  F002         	movff	_PWM+9,btemp+2
  3757  005870  6A03               	clrf	btemp+3,c
  3758  005872  5003               	movf	btemp+3,w,c
  3759  005874  0A80               	xorlw	128
  3760  005876  6E04               	movwf	btemp+4,c
  3761  005878  5001               	movf	btemp+1,w,c
  3762  00587A  0A80               	xorlw	128
  3763  00587C  5C04               	subwf	btemp+4,w,c
  3764  00587E  E102               	bnz	u2635
  3765  005880  5000               	movf	btemp,w,c
  3766  005882  5C02               	subwf	btemp+2,w,c
  3767  005884                     u2635:
  3768  005884  E27B               	bc	l325
  3769  005886  0E02               	movlw	2
  3770  005888  6E02               	movwf	btemp+2,c
  3771  00588A  6A03               	clrf	btemp+3,c
  3772  00588C  CFF3 F000          	movff	prodl,btemp
  3773  005890  CFF4 F001          	movff	prodh,btemp+1
  3774  005894  EC49  F078         	call	awdiv
  3775  005898  D7B9               	goto	L12
  3776                           ;rgl.c: 1242: else p=PWM.MDMOD;
  3777                           ;rgl.c: 1243: rgl.xmod=p;
  3778                           ;rgl.c: 1244: }
  3779  00589A                     l316:
  3780                           ;rgl.c: 1245: else
  3781  00589A  C1B0  FFE8         	movff	_DtCW+9,wreg
  3782  00589E  0A80               	xorlw	128
  3783  0058A0  0F7B               	addlw	-133
  3784  0058A2  E334               	bnc	l320
  3785  0058A4  0E01               	movlw	1
  3786  0058A6  010E               	movlb	_tmr shr (0+8)
  3787  0058A8  65E6               	cpfsgt	_tmr& (0+255),b
  3788  0058AA  D030               	goto	l320
  3789                           ;rgl.c: 1247: {
  3790  0058AC  6BE6               	clrf	_tmr& (0+255),b
  3791                           ;rgl.c: 1249: r=p-PWM.MDMOD;
  3792  0058AE  C1E4  FFE8         	movff	_PWM+9,wreg
  3793  0058B2  5CD9               	subwf	fsr2l,w,c
  3794  0058B4  6EF3               	movwf	prodl,c
  3795  0058B6  6AF4               	clrf	prodh,c
  3796  0058B8  A0D8               	btfss	status,0,c
  3797  0058BA  06F4               	decf	prodh,f,c
  3798                           ;rgl.c: 1250: if((p-(r/3))>PWM.MDMOD) p-=r/3;
  3799  0058BC  0E03               	movlw	3
  3800  0058BE  6E02               	movwf	btemp+2,c
  3801  0058C0  6A03               	clrf	btemp+3,c
  3802  0058C2  CFF3 F000          	movff	prodl,btemp
  3803  0058C6  CFF4 F001          	movff	prodh,btemp+1
  3804  0058CA  EC49  F078         	call	awdiv
  3805  0058CE  5004               	movf	btemp+4,w,c
  3806  0058D0  5CD9               	subwf	fsr2l,w,c
  3807  0058D2  6E00               	movwf	btemp,c
  3808  0058D4  5005               	movf	btemp+5,w,c
  3809  0058D6  A0D8               	btfss	status,0,c
  3810  0058D8  2805               	incf	btemp+5,w,c
  3811  0058DA  6A01               	clrf	btemp+1,c
  3812  0058DC  5E01               	subwf	btemp+1,f,c
  3813  0058DE  C1E4  F002         	movff	_PWM+9,btemp+2
  3814  0058E2  6A03               	clrf	btemp+3,c
  3815  0058E4  5003               	movf	btemp+3,w,c
  3816  0058E6  0A80               	xorlw	128
  3817  0058E8  6E04               	movwf	btemp+4,c
  3818  0058EA  5001               	movf	btemp+1,w,c
  3819  0058EC  0A80               	xorlw	128
  3820  0058EE  5C04               	subwf	btemp+4,w,c
  3821  0058F0  E102               	bnz	u2675
  3822  0058F2  5000               	movf	btemp,w,c
  3823  0058F4  5C02               	subwf	btemp+2,w,c
  3824  0058F6                     u2675:
  3825  0058F6  E242               	bc	l325
  3826  0058F8  0E03               	movlw	3
  3827  0058FA  6E02               	movwf	btemp+2,c
  3828  0058FC  6A03               	clrf	btemp+3,c
  3829  0058FE  CFF3 F000          	movff	prodl,btemp
  3830  005902  CFF4 F001          	movff	prodh,btemp+1
  3831  005906  EC49  F078         	call	awdiv
  3832  00590A  D780               	goto	L12
  3833                           ;rgl.c: 1251: else p=PWM.MDMOD;
  3834                           ;rgl.c: 1252: rgl.xmod=p;
  3835                           ;rgl.c: 1253: }
  3836  00590C                     l320:
  3837                           ;rgl.c: 1254: else
  3838  00590C  C1B0  FFE8         	movff	_DtCW+9,wreg
  3839  005910  0A80               	xorlw	128
  3840  005912  0F7C               	addlw	-132
  3841  005914  E337               	bnc	l296
  3842  005916  010E               	movlb	_tmr shr (0+8)
  3843  005918  53E6               	movf	_tmr& (0+255),f,b
  3844  00591A  E034               	bz	l296
  3845                           ;rgl.c: 1256: {
  3846  00591C  6BE6               	clrf	_tmr& (0+255),b
  3847                           ;rgl.c: 1258: r=p-PWM.MDMOD;
  3848  00591E  C1E4  FFE8         	movff	_PWM+9,wreg
  3849  005922  5CD9               	subwf	fsr2l,w,c
  3850  005924  6EF3               	movwf	prodl,c
  3851  005926  6AF4               	clrf	prodh,c
  3852  005928  A0D8               	btfss	status,0,c
  3853  00592A  06F4               	decf	prodh,f,c
  3854                           ;rgl.c: 1259: if((p-(r/4))>PWM.MDMOD) p-=r/4;
  3855  00592C  0E04               	movlw	4
  3856  00592E  6E02               	movwf	btemp+2,c
  3857  005930  6A03               	clrf	btemp+3,c
  3858  005932  CFF3 F000          	movff	prodl,btemp
  3859  005936  CFF4 F001          	movff	prodh,btemp+1
  3860  00593A  EC49  F078         	call	awdiv
  3861  00593E  5004               	movf	btemp+4,w,c
  3862  005940  5CD9               	subwf	fsr2l,w,c
  3863  005942  6E00               	movwf	btemp,c
  3864  005944  5005               	movf	btemp+5,w,c
  3865  005946  A0D8               	btfss	status,0,c
  3866  005948  2805               	incf	btemp+5,w,c
  3867  00594A  6A01               	clrf	btemp+1,c
  3868  00594C  5E01               	subwf	btemp+1,f,c
  3869  00594E  C1E4  F002         	movff	_PWM+9,btemp+2
  3870  005952  6A03               	clrf	btemp+3,c
  3871  005954  5003               	movf	btemp+3,w,c
  3872  005956  0A80               	xorlw	128
  3873  005958  6E04               	movwf	btemp+4,c
  3874  00595A  5001               	movf	btemp+1,w,c
  3875  00595C  0A80               	xorlw	128
  3876  00595E  5C04               	subwf	btemp+4,w,c
  3877  005960  E102               	bnz	u2715
  3878  005962  5000               	movf	btemp,w,c
  3879  005964  5C02               	subwf	btemp+2,w,c
  3880  005966                     u2715:
  3881  005966  E20A               	bc	l325
  3882  005968  0E04               	movlw	4
  3883  00596A  6E02               	movwf	btemp+2,c
  3884  00596C  6A03               	clrf	btemp+3,c
  3885  00596E  CFF3 F000          	movff	prodl,btemp
  3886  005972  CFF4 F001          	movff	prodh,btemp+1
  3887  005976  EC49  F078         	call	awdiv
  3888  00597A  D70B               	goto	L14
  3889  00597C                     l325:
  3890                           ;rgl.c: 1260: else p=PWM.MDMOD;
  3891  00597C  C1E4  FFD9         	movff	_PWM+9,fsr2l
  3892  005980                     l326:
  3893                           ;rgl.c: 1261: rgl.xmod=p;
  3894  005980  CFD9 F26D          	movff	fsr2l,_rgl+8
  3895  005984                     l296:
  3896                           ;rgl.c: 1262: }
  3897  005984  0102               	movlb	_rgl shr (0+8)
  3898  005986  BB65               	btfsc	_rgl& (0+255),5,b
  3899  005988  D02F               	goto	l327
  3900                           ;rgl.c: 1275: {
  3901  00598A  A565               	btfss	_rgl& (0+255),2,b
  3902  00598C  0012               	return	
  3903                           ;rgl.c: 1277: {
  3904  00598E  0E00               	movlw	0
  3905  005990  EC91  F036         	call	_Tmaleje
  3906  005994  B0D8               	btfsc	status,0,c
  3907  005996  0012               	return	
  3908                           ;rgl.c: 1279: {
  3909  005998  0E04               	movlw	4
  3910  00599A  ECC0  F036         	call	_Twyzsza
  3911  00599E  A0D8               	btfss	status,0,c
  3912  0059A0  0012               	return	
  3913                           ;rgl.c: 1281: {
  3914  0059A2  CEE5  FFE8         	movff	_pwm_kwr,wreg
  3915  0059A6  0102               	movlb	(_rgl+9) shr (0+8)
  3916  0059A8  5D6E               	subwf	(_rgl+9)& (0+255),w,b
  3917  0059AA  E31B               	bnc	l331
  3918                           ;rgl.c: 1283: {
  3919  0059AC  C1E4  F000         	movff	_PWM+9,btemp
  3920  0059B0  6A01               	clrf	btemp+1,c
  3921  0059B2  C26C  F002         	movff	_rgl+7,btemp+2
  3922  0059B6  0EFB               	movlw	251
  3923  0059B8  2402               	addwf	btemp+2,w,c
  3924  0059BA  6EF6               	movwf	tblptrl,c
  3925  0059BC  6AF7               	clrf	tblptrh,c
  3926  0059BE  0EFF               	movlw	255
  3927  0059C0  22F7               	addwfc	tblptrh,f,c
  3928  0059C2  50F7               	movf	tblptrh,w,c
  3929  0059C4  0A80               	xorlw	128
  3930  0059C6  6E02               	movwf	btemp+2,c
  3931  0059C8  5001               	movf	btemp+1,w,c
  3932  0059CA  0A80               	xorlw	128
  3933  0059CC  5C02               	subwf	btemp+2,w,c
  3934  0059CE  E102               	bnz	u2775
  3935  0059D0  5000               	movf	btemp,w,c
  3936  0059D2  5CF6               	subwf	tblptrl,w,c
  3937  0059D4                     u2775:
  3938  0059D4  E203               	bc	l332
  3939  0059D6  C1E4  F26C         	movff	_PWM+9,_rgl+7
  3940  0059DA  D003               	goto	l331
  3941  0059DC                     l332:
  3942                           ;rgl.c: 1285: else rgl.srp-=5;
  3943  0059DC  0102               	movlb	(_rgl+7) shr (0+8)
  3944  0059DE  0EFB               	movlw	-5
  3945  0059E0  276C               	addwf	(_rgl+7)& (0+255),f,b
  3946  0059E2                     l331:
  3947                           ;rgl.c: 1286: }
  3948  0059E2  0102               	movlb	_rgl shr (0+8)
  3949  0059E4  8B65               	bsf	_rgl& (0+255),5,b
  3950                           ;rgl.c: 1288: return;
  3951  0059E6  0012               	return	
  3952                           ;rgl.c: 1290: else return;
  3953                           ;rgl.c: 1292: else return;
  3954                           ;rgl.c: 1294: else return;
  3955  0059E8                     l327:
  3956                           ;rgl.c: 1296: else
  3957  0059E8  0E00               	movlw	0
  3958  0059EA  EC91  F036         	call	_Tmaleje
  3959  0059EE  E302               	bnc	l337
  3960                           ;rgl.c: 1299: rgl.nmod=0;
  3961  0059F0  0102               	movlb	_rgl shr (0+8)
  3962  0059F2  9B65               	bcf	_rgl& (0+255),5,b
  3963  0059F4                     l337:
  3964                           ;rgl.c: 1300: }
  3965  0059F4  010E               	movlb	F1834 shr (0+8)
  3966  0059F6  2BD2               	incf	F1834& (0+255),f,b
  3967                           ;rgl.c: 1302: }
  3968  0059F8  0C01               	retlw	1
  3969  0059FA                     __end_of_ModPrzCW:
  3970                           ;rgl.c: 1308: void PropCO(void)
  3971                           ;rgl.c: 1309: {
  3972  0059FA                     _PropCO:
  3973  000000                     
  3974                           ;rgl.c: 1310: if(!rgl.nmod)
  3975  0059FA  0102               	movlb	_rgl shr (0+8)
  3976  0059FC  BB65               	btfsc	_rgl& (0+255),5,b
  3977  0059FE  EF34  F036         	goto	l641
  3978                           ;rgl.c: 1311: {
  3979  005A02  0101               	movlb	_DtCO shr (0+8)
  3980  005A04  B1B6               	btfsc	_DtCO& (0+255),0,b
  3981  005A06  EF9D  F031         	goto	l486
  3982                           ;rgl.c: 1313: {
  3983  005A0A  C268  FFE8         	movff	_rgl+3,wreg
  3984  005A0E  0A03               	xorlw	3
  3985  005A10  E102               	bnz	l342
  3986  005A12  EF05  F036         	goto	L32
  3987                           ;rgl.c: 1315: {
  3988                           ;rgl.c: 1317: rgl.tmp_pwm=PWM.MGMOD;
  3989                           ;rgl.c: 1318: }
  3990  005A16                     l342:
  3991                           ;rgl.c: 1319: else
  3992  005A16  C268  FFE8         	movff	_rgl+3,wreg
  3993  005A1A  0A02               	xorlw	2
  3994  005A1C  E102               	bnz	l345
  3995  005A1E  EF13  F036         	goto	L33
  3996                           ;rgl.c: 1321: {
  3997                           ;rgl.c: 1323: rgl.tmp_pwm=PWM.PROP1;
  3998                           ;rgl.c: 1324: }
  3999  005A22                     l345:
  4000                           ;rgl.c: 1325: else
  4001  005A22  C268  F000         	movff	_rgl+3,btemp
  4002  005A26  0400               	decf	btemp,w,c
  4003  005A28  E102               	bnz	l348
  4004  005A2A  EF21  F036         	goto	L34
  4005                           ;rgl.c: 1327: {
  4006                           ;rgl.c: 1329: rgl.tmp_pwm=PWM.PROP2;
  4007                           ;rgl.c: 1330: }
  4008  005A2E                     l348:
  4009                           ;rgl.c: 1331: else
  4010  005A2E  C268  FFE8         	movff	_rgl+3,wreg
  4011  005A32  0A80               	xorlw	128
  4012  005A34  0F7F               	addlw	-129
  4013  005A36  E202               	bc	l341
  4014  005A38  EF96  F031         	goto	L35
  4015                           ;rgl.c: 1333: {
  4016                           ;rgl.c: 1335: rgl.tmp_pwm=PWM.PROP3;
  4017  005A3C                     l341:
  4018  005A3C  EF9D  F031         	goto	l486
  4019                           ;rgl.c: 1336: }
  4020                           ;rgl.c: 1339: }
  4021                           ;rgl.c: 1340: else WriteOPWM(PWM.MDMOD);
  4022                           ;rgl.c: 1341: }
  4023  005A40                     __end_of_PropCO:
  4024                           ;rgl.c: 1350: void StartCO4(void)
  4025                           ;rgl.c: 1351: {
  4026  005A40                     _StartCO4:
  4027  000000                     
  4028                           ;rgl.c: 1352: unsigned char k;
  4029  005A40  0102               	movlb	_rgl shr (0+8)
  4030  005A42  A165               	btfss	_rgl& (0+255),0,b
  4031  005A44  B365               	btfsc	_rgl& (0+255),1,b
  4032  005A46  0012               	return	
  4033                           ;rgl.c: 1355: StartRTdS(3);
  4034  005A48  0E03               	movlw	3
  4035  005A4A  EC51  F073         	call	_StartRTdS
  4036                           ;rgl.c: 1356: DtCO.dDCO=0;
  4037  005A4E  0101               	movlb	(_DtCO+9) shr (0+8)
  4038  005A50  6BBF               	clrf	(_DtCO+9)& (0+255),b
  4039                           ;rgl.c: 1357: DtCO.indCO=0;
  4040  005A52  0101               	movlb	(_DtCO+10) shr (0+8)
  4041  005A54  6BC0               	clrf	(_DtCO+10)& (0+255),b
  4042                           ;rgl.c: 1358: DtCW.dDCW=0;
  4043  005A56  0101               	movlb	(_DtCW+8) shr (0+8)
  4044  005A58  6BAF               	clrf	(_DtCW+8)& (0+255),b
  4045                           ;rgl.c: 1359: DtCW.indCW=0;
  4046  005A5A  0101               	movlb	(_DtCW+10) shr (0+8)
  4047  005A5C  6BB1               	clrf	(_DtCW+10)& (0+255),b
  4048                           ;rgl.c: 1360: rgl.fz=0;
  4049  005A5E  0102               	movlb	_rgl shr (0+8)
  4050  005A60  9565               	bcf	_rgl& (0+255),2,b
  4051                           ;rgl.c: 1361: rgl.med_up=0;
  4052  005A62  9765               	bcf	_rgl& (0+255),3,b
  4053                           ;rgl.c: 1362: rgl.fast_up=0;
  4054  005A64  9965               	bcf	_rgl& (0+255),4,b
  4055                           ;rgl.c: 1364: if(PWM.MMAXCO>PWM.FIRSTPB)
  4056  005A66  C1FA  FFE8         	movff	_PWM+31,wreg
  4057  005A6A  0101               	movlb	(_PWM+26) shr (0+8)
  4058  005A6C  61F5               	cpfslt	(_PWM+26)& (0+255),b
  4059  005A6E  D003               	goto	l356
  4060                           ;rgl.c: 1365: {
  4061  005A70  C1F5  F26D         	movff	_PWM+26,_rgl+8
  4062                           ;rgl.c: 1367: }
  4063  005A74  D002               	goto	l357
  4064  005A76                     l356:
  4065                           ;rgl.c: 1368: else
  4066  005A76  C1FA  F26D         	movff	_PWM+31,_rgl+8
  4067  005A7A                     l357:
  4068                           ;rgl.c: 1371: }
  4069  005A7A  0102               	movlb	(_rgl+7) shr (0+8)
  4070  005A7C  6B6C               	clrf	(_rgl+7)& (0+255),b
  4071                           ;rgl.c: 1373: rgl.ytmp=0;
  4072  005A7E  6B6B               	clrf	(_rgl+6)& (0+255),b
  4073                           ;rgl.c: 1374: rgl.nmod=0;
  4074  005A80  9B65               	bcf	_rgl& (0+255),5,b
  4075                           ;rgl.c: 1375: rgl.del1s=0;
  4076  005A82  9D65               	bcf	_rgl& (0+255),6,b
  4077                           ;rgl.c: 1376: rgl.inv_mod=0;
  4078  005A84  9166               	bcf	(_rgl+1)& (0+255),0,b
  4079                           ;rgl.c: 1377: }
  4080  005A86  0012               	return	
  4081  005A88                     __end_of_StartCO4:
  4082                           ;rgl.c: 1380: void StartMCW4(void)
  4083                           ;rgl.c: 1381: {
  4084  005A88                     _StartMCW4:
  4085  000000                     
  4086                           ;rgl.c: 1382: if(rgl.btco||rgl.btcw) return;
  4087  005A88  0102               	movlb	_rgl shr (0+8)
  4088  005A8A  A165               	btfss	_rgl& (0+255),0,b
  4089  005A8C  B365               	btfsc	_rgl& (0+255),1,b
  4090  005A8E  0012               	return	
  4091                           ;rgl.c: 1383: StartRTdS(3);
  4092  005A90  0E03               	movlw	3
  4093  005A92  EC51  F073         	call	_StartRTdS
  4094                           ;rgl.c: 1384: DtCO.dDCO=0;
  4095  005A96  0101               	movlb	(_DtCO+9) shr (0+8)
  4096  005A98  6BBF               	clrf	(_DtCO+9)& (0+255),b
  4097                           ;rgl.c: 1385: DtCW.dDCW=0;
  4098  005A9A  0101               	movlb	(_DtCW+8) shr (0+8)
  4099  005A9C  6BAF               	clrf	(_DtCW+8)& (0+255),b
  4100                           ;rgl.c: 1386: DtCO.indCO=0;
  4101  005A9E  0101               	movlb	(_DtCO+10) shr (0+8)
  4102  005AA0  6BC0               	clrf	(_DtCO+10)& (0+255),b
  4103                           ;rgl.c: 1387: DtCW.indCW=0;
  4104  005AA2  0101               	movlb	(_DtCW+10) shr (0+8)
  4105  005AA4  6BB1               	clrf	(_DtCW+10)& (0+255),b
  4106                           ;rgl.c: 1388: rgl.fz=0;
  4107  005AA6  0102               	movlb	_rgl shr (0+8)
  4108  005AA8  9565               	bcf	_rgl& (0+255),2,b
  4109                           ;rgl.c: 1389: rgl.med_up=0;
  4110  005AAA  9765               	bcf	_rgl& (0+255),3,b
  4111                           ;rgl.c: 1390: rgl.fast_up=0;
  4112  005AAC  9965               	bcf	_rgl& (0+255),4,b
  4113                           ;rgl.c: 1392: rgl.srp=0;
  4114  005AAE  6B6C               	clrf	(_rgl+7)& (0+255),b
  4115                           ;rgl.c: 1393: rgl.ytmp=0;
  4116  005AB0  6B6B               	clrf	(_rgl+6)& (0+255),b
  4117                           ;rgl.c: 1394: rgl.nmod=0;
  4118  005AB2  9B65               	bcf	_rgl& (0+255),5,b
  4119                           ;rgl.c: 1395: rgl.del1s=0;
  4120  005AB4  9D65               	bcf	_rgl& (0+255),6,b
  4121                           ;rgl.c: 1396: rgl.inv_mod=0;
  4122  005AB6  9166               	bcf	(_rgl+1)& (0+255),0,b
  4123                           ;rgl.c: 1397: rgl.xmod=PWM.MDMOD;
  4124  005AB8  C1E4  F26D         	movff	_PWM+9,_rgl+8
  4125                           ;rgl.c: 1398: }
  4126  005ABC  0012               	return	
  4127  005ABE                     __end_of_StartMCW4:
  4128                           ;rgl.c: 1401: void FirstPCW4(void)
  4129                           ;rgl.c: 1402: {
  4130  005ABE                     _FirstPCW4:
  4131  000000                     
  4132                           ;rgl.c: 1403: if(PWM.MMAXCW>PWM.MGMOD)
  4133  005ABE  C1FB  FFE8         	movff	_PWM+32,wreg
  4134  005AC2  0101               	movlb	(_PWM+12) shr (0+8)
  4135  005AC4  61E7               	cpfslt	(_PWM+12)& (0+255),b
  4136  005AC6  D00B               	goto	l361
  4137                           ;rgl.c: 1404: {
  4138  005AC8  C1AE  FFE8         	movff	_DtCW+7,wreg
  4139  005ACC  0A80               	xorlw	128
  4140  005ACE  0F7F               	addlw	-129
  4141  005AD0  E303               	bnc	l362
  4142  005AD2  C1E7  F26D         	movff	_PWM+12,_rgl+8
  4143  005AD6  0012               	return	
  4144  005AD8                     l362:
  4145                           ;rgl.c: 1406: else rgl.xmod=PWM.FIRSTPB;
  4146  005AD8  C1F5  F26D         	movff	_PWM+26,_rgl+8
  4147                           ;rgl.c: 1407: }
  4148  005ADC  0012               	return	
  4149  005ADE                     l361:
  4150                           ;rgl.c: 1408: else
  4151  005ADE  C1AE  FFE8         	movff	_DtCW+7,wreg
  4152  005AE2  0A80               	xorlw	128
  4153  005AE4  0F7F               	addlw	-129
  4154  005AE6  E303               	bnc	l365
  4155  005AE8  C1FB  F26D         	movff	_PWM+32,_rgl+8
  4156  005AEC  0012               	return	
  4157  005AEE                     l365:
  4158                           ;rgl.c: 1411: else
  4159  005AEE  C1FB  FFE8         	movff	_PWM+32,wreg
  4160  005AF2  0101               	movlb	(_PWM+26) shr (0+8)
  4161  005AF4  61F5               	cpfslt	(_PWM+26)& (0+255),b
  4162  005AF6  D003               	goto	l367
  4163  005AF8  C1F5  F26D         	movff	_PWM+26,_rgl+8
  4164  005AFC  0012               	return	
  4165  005AFE                     l367:
  4166                           ;rgl.c: 1414: else rgl.xmod=PWM.MMAXCW;
  4167  005AFE  C1FB  F26D         	movff	_PWM+32,_rgl+8
  4168                           ;rgl.c: 1415: }
  4169  005B02  0012               	return	
  4170  005B04                     __end_of_FirstPCW4:
  4171                           ;rgl.c: 1420: void ClrMod4(void)
  4172                           ;rgl.c: 1421: {
  4173  005B04                     _ClrMod4:
  4174  000000                     
  4175                           ;rgl.c: 1422: rgl.fz=0;
  4176  005B04  0102               	movlb	_rgl shr (0+8)
  4177  005B06  9565               	bcf	_rgl& (0+255),2,b
  4178                           ;rgl.c: 1423: rgl.med_up=0;
  4179  005B08  9765               	bcf	_rgl& (0+255),3,b
  4180                           ;rgl.c: 1424: rgl.fast_up=0;
  4181  005B0A  9965               	bcf	_rgl& (0+255),4,b
  4182                           ;rgl.c: 1425: rgl.xmod=PWM.BufPWM;
  4183  005B0C  C1DC  F26D         	movff	_PWM+1,_rgl+8
  4184                           ;rgl.c: 1426: rgl.srp=0;
  4185  005B10  6B6C               	clrf	(_rgl+7)& (0+255),b
  4186                           ;rgl.c: 1427: rgl.ytmp=0;
  4187  005B12  6B6B               	clrf	(_rgl+6)& (0+255),b
  4188                           ;rgl.c: 1428: rgl.nmod=0;
  4189  005B14  9B65               	bcf	_rgl& (0+255),5,b
  4190                           ;rgl.c: 1429: rgl.del1s=0;
  4191  005B16  9D65               	bcf	_rgl& (0+255),6,b
  4192                           ;rgl.c: 1430: rgl.inv_mod=0;
  4193  005B18  9166               	bcf	(_rgl+1)& (0+255),0,b
  4194                           ;rgl.c: 1431: }
  4195  005B1A  0012               	return	
  4196  005B1C                     __end_of_ClrMod4:
  4197                           ;rgl.c: 1434: void ModToCW4(void)
  4198                           ;rgl.c: 1435: {
  4199  005B1C                     _ModToCW4:
  4200  000000                     
  4201                           ;rgl.c: 1436: rgl.btcw=1;
  4202  005B1C  0102               	movlb	_rgl shr (0+8)
  4203  005B1E  8365               	bsf	_rgl& (0+255),1,b
  4204                           ;rgl.c: 1437: if(rgl.btco)
  4205  005B20  A165               	btfss	_rgl& (0+255),0,b
  4206  005B22  0012               	return	
  4207                           ;rgl.c: 1438: {
  4208  005B24  9165               	bcf	_rgl& (0+255),0,b
  4209                           ;rgl.c: 1440: ClrMod4();
  4210  005B26  D7EE               	goto	_ClrMod4	;wreg free
  4211                           ;rgl.c: 1441: }
  4212  005B28                     __end_of_ModToCW4:
  4213                           ;rgl.c: 1445: void ModToCO4(void)
  4214                           ;rgl.c: 1446: {
  4215  005B28                     _ModToCO4:
  4216  000000                     
  4217                           ;rgl.c: 1447: rgl.btco=1;
  4218  005B28  0102               	movlb	_rgl shr (0+8)
  4219  005B2A  8165               	bsf	_rgl& (0+255),0,b
  4220                           ;rgl.c: 1448: if(rgl.btcw)
  4221  005B2C  A365               	btfss	_rgl& (0+255),1,b
  4222  005B2E  0012               	return	
  4223                           ;rgl.c: 1449: {
  4224  005B30  9365               	bcf	_rgl& (0+255),1,b
  4225                           ;rgl.c: 1451: ClrMod4();
  4226  005B32  D7E8               	goto	_ClrMod4	;wreg free
  4227                           ;rgl.c: 1452: }
  4228  005B34                     __end_of_ModToCO4:
  4229                           ;rgl.c: 1456: void IncConstCOCW4(void)
  4230                           ;rgl.c: 1457: {
  4231  005B34                     _IncConstCOCW4:
  4232  000000                     
  4233                           ;rgl.c: 1458: if(Tstoi()) rgl.ytmp++;
  4234  005B34  ECAC  F036         	call	_Tstoi	;wreg free
  4235  005B38  0102               	movlb	(_rgl+6) shr (0+8)
  4236  005B3A  E302               	bnc	L19
  4237  005B3C  2B6B               	incf	(_rgl+6)& (0+255),f,b
  4238  005B3E  0C01               	retlw	1
  4239                           ;rgl.c: 1459: else rgl.ytmp=0;
  4240  005B40                     L19:
  4241  005B40  6B6B               	clrf	(_rgl+6)& (0+255),b
  4242                           ;rgl.c: 1460: }
  4243  005B42  0012               	return	
  4244  005B44                     __end_of_IncConstCOCW4:
  4245                           ;rgl.c: 1463: void ReadDataCO4(void)
  4246                           ;rgl.c: 1464: {
  4247  005B44                     _ReadDataCO4:
  4248  000000                     
  4249                           ;rgl.c: 1465: rgl.x_t=DtCO.DCO;
  4250  005B44  C1BE  F267         	movff	_DtCO+8,_rgl+2
  4251                           ;rgl.c: 1466: rgl.x_dt=DtCO.dDCO;
  4252  005B48  C1BF  F269         	movff	_DtCO+9,_rgl+4
  4253                           ;rgl.c: 1467: }
  4254  005B4C  0012               	return	
  4255  005B4E                     __end_of_ReadDataCO4:
  4256                           ;rgl.c: 1470: void ReadDataCW4(void)
  4257                           ;rgl.c: 1471: {
  4258  005B4E                     _ReadDataCW4:
  4259  000000                     
  4260                           ;rgl.c: 1472: rgl.x_t=DtCW.DCW;
  4261  005B4E  C1AE  F267         	movff	_DtCW+7,_rgl+2
  4262                           ;rgl.c: 1473: rgl.x_f=DtCO.DCO;
  4263  005B52  C1BE  F268         	movff	_DtCO+8,_rgl+3
  4264                           ;rgl.c: 1474: rgl.x_dt=DtCW.dDCW;
  4265  005B56  C1AF  F269         	movff	_DtCW+8,_rgl+4
  4266                           ;rgl.c: 1475: rgl.x_df=DtCO.dDCO;
  4267  005B5A  C1BF  F26A         	movff	_DtCO+9,_rgl+5
  4268                           ;rgl.c: 1476: }
  4269  005B5E  0012               	return	
  4270  005B60                     __end_of_ReadDataCW4:
  4271                           ;rgl.c: 1479: void ModZgCW4(void)
  4272                           ;rgl.c: 1480: {
  4273  005B60                     _ModZgCW4:
  4274  000000                     
  4275                           ;rgl.c: 1481: signed long m;
  4276  005B60  0E0A               	movlw	10
  4277  005B62  ECB3  F036         	call	_Tnizsza
  4278  005B66  E302               	bnc	l380
  4279                           ;rgl.c: 1486: {
  4280  005B68  010E               	movlb	F1849 shr (0+8)
  4281  005B6A  6BD3               	clrf	F1849& (0+255),b
  4282  005B6C                     l380:
  4283                           ;rgl.c: 1489: }
  4284  005B6C  0102               	movlb	_rgl shr (0+8)
  4285  005B6E  A565               	btfss	_rgl& (0+255),2,b
  4286  005B70  D00D               	goto	l381
  4287                           ;rgl.c: 1491: {
  4288  005B72  0E02               	movlw	2
  4289  005B74  ECB3  F036         	call	_Tnizsza
  4290  005B78  A0D8               	btfss	status,0,c
  4291  005B7A  0012               	return	
  4292                           ;rgl.c: 1493: {
  4293  005B7C  C1DC  F26D         	movff	_PWM+1,_rgl+8
  4294                           ;rgl.c: 1495: rgl.srp=0;
  4295  005B80  0102               	movlb	(_rgl+7) shr (0+8)
  4296  005B82  6B6C               	clrf	(_rgl+7)& (0+255),b
  4297                           ;rgl.c: 1496: rgl.ytmp=0;
  4298  005B84  6B6B               	clrf	(_rgl+6)& (0+255),b
  4299                           ;rgl.c: 1497: rgl.del1s=0;
  4300  005B86  9D65               	bcf	_rgl& (0+255),6,b
  4301                           ;rgl.c: 1498: pop=0;
  4302  005B88  010E               	movlb	F1849 shr (0+8)
  4303  005B8A  6BD3               	clrf	F1849& (0+255),b
  4304                           ;rgl.c: 1499: }
  4305                           ;rgl.c: 1500: else return;
  4306  005B8C                     l381:
  4307                           ;rgl.c: 1501: }
  4308  005B8C  0E01               	movlw	1
  4309  005B8E  ECB3  F036         	call	_Tnizsza
  4310  005B92  E229               	bc	l384
  4311                           ;rgl.c: 1503: {
  4312  005B94  0102               	movlb	_rgl shr (0+8)
  4313  005B96  8565               	bsf	_rgl& (0+255),2,b
  4314                           ;rgl.c: 1505: rgl.fast_up=0;
  4315  005B98  9965               	bcf	_rgl& (0+255),4,b
  4316                           ;rgl.c: 1506: rgl.med_up=0;
  4317  005B9A  9765               	bcf	_rgl& (0+255),3,b
  4318                           ;rgl.c: 1507: rgl.srp=PWM.BufPWM+pop;
  4319  005B9C  CED3  FFE8         	movff	F1849,wreg
  4320  005BA0  0101               	movlb	(_PWM+1) shr (0+8)
  4321  005BA2  25DC               	addwf	(_PWM+1)& (0+255),w,b
  4322  005BA4  CFE8 F26C          	movff	wreg,_rgl+7
  4323                           ;rgl.c: 1508: rgl.xmod=PWM.BufPWM+pop;
  4324  005BA8  CED3  FFE8         	movff	F1849,wreg
  4325  005BAC  25DC               	addwf	(_PWM+1)& (0+255),w,b
  4326  005BAE  CFE8 F26D          	movff	wreg,_rgl+8
  4327                           ;rgl.c: 1509: pop=0;
  4328  005BB2  010E               	movlb	F1849 shr (0+8)
  4329  005BB4  6BD3               	clrf	F1849& (0+255),b
  4330                           ;rgl.c: 1510: if(PWM.MMAXCW>PWM.MGMOD)
  4331  005BB6  C1FB  FFE8         	movff	_PWM+32,wreg
  4332  005BBA  0101               	movlb	(_PWM+12) shr (0+8)
  4333  005BBC  61E7               	cpfslt	(_PWM+12)& (0+255),b
  4334  005BBE  D009               	goto	l385
  4335                           ;rgl.c: 1511: {
  4336  005BC0  C26D  FFE8         	movff	_rgl+8,wreg
  4337  005BC4  61E7               	cpfslt	(_PWM+12)& (0+255),b
  4338  005BC6  0012               	return	
  4339                           ;rgl.c: 1513: {
  4340  005BC8  C1E7  F26C         	movff	_PWM+12,_rgl+7
  4341                           ;rgl.c: 1515: rgl.xmod=PWM.MGMOD;
  4342  005BCC  C1E7  F26D         	movff	_PWM+12,_rgl+8
  4343                           ;rgl.c: 1516: }
  4344  005BD0  0012               	return	
  4345  005BD2                     l385:
  4346                           ;rgl.c: 1518: else
  4347  005BD2  C26D  FFE8         	movff	_rgl+8,wreg
  4348  005BD6  0101               	movlb	(_PWM+32) shr (0+8)
  4349  005BD8  61FB               	cpfslt	(_PWM+32)& (0+255),b
  4350  005BDA  0012               	return	
  4351                           ;rgl.c: 1521: {
  4352  005BDC  C1FB  F26C         	movff	_PWM+32,_rgl+7
  4353                           ;rgl.c: 1523: rgl.xmod=PWM.MMAXCW;
  4354  005BE0  C1FB  F26D         	movff	_PWM+32,_rgl+8
  4355                           ;rgl.c: 1524: }
  4356  005BE4  0012               	return	
  4357  005BE6                     l384:
  4358                           ;rgl.c: 1527: }
  4359  005BE6  C1E4  FFE8         	movff	_PWM+9,wreg
  4360  005BEA  0102               	movlb	(_rgl+8) shr (0+8)
  4361  005BEC  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  4362  005BEE  E318               	bnc	l389
  4363  005BF0  0E0A               	movlw	10
  4364  005BF2  6E02               	movwf	btemp+2,c
  4365  005BF4  6A03               	clrf	btemp+3,c
  4366  005BF6  C1E4  FFE8         	movff	_PWM+9,wreg
  4367  005BFA  C26D  F000         	movff	_rgl+8,btemp
  4368  005BFE  6A01               	clrf	btemp+1,c
  4369  005C00  5E00               	subwf	btemp,f,c
  4370  005C02  0E00               	movlw	0
  4371  005C04  5A01               	subwfb	btemp+1,f,c
  4372  005C06  EC92  F078         	call	awmul
  4373  005C0A  0100               	movlb	__Lparam shr (0+8)
  4374  005C0C  C004  F0E9         	movff	btemp+4,?a_ModZgCW4
  4375  005C10  C005  F0EA         	movff	btemp+5,?a_ModZgCW4+1
  4376  005C14  0E00               	movlw	0
  4377  005C16  BFEA               	btfsc	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),7,b
  4378  005C18  0EFF               	movlw	-1
  4379  005C1A  6FEB               	movwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4380  005C1C  6FEC               	movwf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4381  005C1E  D005               	goto	l390
  4382  005C20                     l389:
  4383                           ;rgl.c: 1529: else m=0;
  4384  005C20  0100               	movlb	__Lparam shr (0+8)
  4385  005C22  6BE9               	clrf	?a_ModZgCW4^(__Lparam& (0+65280)),b
  4386  005C24  6BEA               	clrf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),b
  4387  005C26  6BEB               	clrf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4388  005C28  6BEC               	clrf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4389  005C2A                     l390:
  4390                           ;rgl.c: 1530: m=m/(DtCW.MAD_CW-DtCW.DAD_CW);
  4391  005C2A  C1B5  FFE8         	movff	_DtCW+14,wreg
  4392  005C2E  C1B4  F000         	movff	_DtCW+13,btemp
  4393  005C32  5C00               	subwf	btemp,w,c
  4394  005C34  6E04               	movwf	btemp+4,c
  4395  005C36  6A05               	clrf	btemp+5,c
  4396  005C38  A0D8               	btfss	status,0,c
  4397  005C3A  0605               	decf	btemp+5,f,c
  4398  005C3C  6A06               	clrf	btemp+6,c
  4399  005C3E  BE05               	btfsc	btemp+5,7,c
  4400  005C40  0606               	decf	btemp+6,f,c
  4401  005C42  5006               	movf	btemp+6,w,c
  4402  005C44  6E07               	movwf	btemp+7,c
  4403  005C46  0EE9               	movlw	low ?a_ModZgCW4
  4404  005C48  6EE9               	movwf	fsr0l,c
  4405  005C4A  0E00               	movlw	high ?a_ModZgCW4
  4406  005C4C  6EEA               	movwf	fsr0h,c
  4407  005C4E  ECB8  F078         	call	aldiv_f
  4408                           ;rgl.c: 1531: m=m*(DtCW.AC_CW-DtCW.DAD_CW);
  4409  005C52  C1B5  FFE8         	movff	_DtCW+14,wreg
  4410  005C56  C1B3  F000         	movff	_DtCW+12,btemp
  4411  005C5A  5C00               	subwf	btemp,w,c
  4412  005C5C  6E04               	movwf	btemp+4,c
  4413  005C5E  6A05               	clrf	btemp+5,c
  4414  005C60  A0D8               	btfss	status,0,c
  4415  005C62  0605               	decf	btemp+5,f,c
  4416  005C64  6A06               	clrf	btemp+6,c
  4417  005C66  BE05               	btfsc	btemp+5,7,c
  4418  005C68  0606               	decf	btemp+6,f,c
  4419  005C6A  5006               	movf	btemp+6,w,c
  4420  005C6C  6E07               	movwf	btemp+7,c
  4421  005C6E  0EE9               	movlw	low ?a_ModZgCW4
  4422  005C70  6EE9               	movwf	fsr0l,c
  4423  005C72  0E00               	movlw	high ?a_ModZgCW4
  4424  005C74  6EEA               	movwf	fsr0h,c
  4425  005C76  ECAE  F078         	call	almul_f
  4426                           ;rgl.c: 1532: if(m<0) m=0;
  4427  005C7A  0100               	movlb	__Lparam shr (0+8)
  4428  005C7C  AFEC               	btfss	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),7,b
  4429  005C7E  D004               	goto	l391
  4430  005C80  6BE9               	clrf	?a_ModZgCW4^(__Lparam& (0+65280)),b
  4431  005C82  6BEA               	clrf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),b
  4432  005C84  6BEB               	clrf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4433  005C86  6BEC               	clrf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4434  005C88                     l391:
  4435                           ;rgl.c: 1533: m=m/10+PWM.MDMOD;
  4436  005C88  0E0A               	movlw	10
  4437  005C8A  6E04               	movwf	btemp+4,c
  4438  005C8C  6A05               	clrf	btemp+5,c
  4439  005C8E  6A06               	clrf	btemp+6,c
  4440  005C90  6A07               	clrf	btemp+7,c
  4441  005C92  C0E9  F000         	movff	?a_ModZgCW4,btemp
  4442  005C96  C0EA  F001         	movff	?a_ModZgCW4+1,btemp+1
  4443  005C9A  C0EB  F002         	movff	?a_ModZgCW4+2,btemp+2
  4444  005C9E  C0EC  F003         	movff	?a_ModZgCW4+3,btemp+3
  4445  005CA2  EC10  F078         	call	aldiv
  4446  005CA6  C1E4  FFE8         	movff	_PWM+9,wreg
  4447  005CAA  2400               	addwf	btemp,w,c
  4448  005CAC  0100               	movlb	__Lparam shr (0+8)
  4449  005CAE  6FE9               	movwf	?a_ModZgCW4^(__Lparam& (0+65280)),b
  4450  005CB0  0E00               	movlw	0
  4451  005CB2  2001               	addwfc	btemp+1,w,c
  4452  005CB4  6FEA               	movwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),b
  4453  005CB6  0E00               	movlw	0
  4454  005CB8  2002               	addwfc	btemp+2,w,c
  4455  005CBA  6FEB               	movwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),b
  4456  005CBC  0E00               	movlw	0
  4457  005CBE  2003               	addwfc	btemp+3,w,c
  4458  005CC0  6FEC               	movwf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),b
  4459                           ;rgl.c: 1534: if(m>0xff)
  4460  005CC2  51EC               	movf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),w
  4461  005CC4  0A80               	xorlw	128
  4462  005CC6  0F80               	addlw	128
  4463  005CC8  E108               	bnz	u3125
  4464  005CCA  0E00               	movlw	0
  4465  005CCC  5DEB               	subwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),w
  4466  005CCE  E105               	bnz	u3125
  4467  005CD0  0E01               	movlw	1
  4468  005CD2  5DEA               	subwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),w
  4469  005CD4  E102               	bnz	u3125
  4470  005CD6  0E00               	movlw	0
  4471  005CD8  5DE9               	subwf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4472  005CDA                     u3125:
  4473                           ;rgl.c: 1535: {
  4474  005CDA  0102               	movlb	_rgl shr (0+8)
  4475  005CDC  E304               	bnc	L20
  4476  005CDE  9565               	bcf	_rgl& (0+255),2,b
  4477                           ;rgl.c: 1537: rgl.tmp_pwm=rgl.xmod;
  4478  005CE0  C26D  F26E         	movff	_rgl+8,_rgl+9
  4479                           ;rgl.c: 1538: return;
  4480  005CE4  0012               	return	
  4481                           ;rgl.c: 1539: }
  4482  005CE6                     L20:
  4483  005CE6  A565               	btfss	_rgl& (0+255),2,b
  4484  005CE8  D01C               	goto	l393
  4485  005CEA  C26D  F000         	movff	_rgl+8,btemp
  4486  005CEE  6A01               	clrf	btemp+1,c
  4487  005CF0  6A02               	clrf	btemp+2,c
  4488  005CF2  6A03               	clrf	btemp+3,c
  4489  005CF4  0100               	movlb	__Lparam shr (0+8)
  4490  005CF6  51EC               	movf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),w
  4491  005CF8  0A80               	xorlw	128
  4492  005CFA  6E04               	movwf	btemp+4,c
  4493  005CFC  5003               	movf	btemp+3,w,c
  4494  005CFE  0A80               	xorlw	128
  4495  005D00  5C04               	subwf	btemp+4,w,c
  4496  005D02  E108               	bnz	u3145
  4497  005D04  5002               	movf	btemp+2,w,c
  4498  005D06  5DEB               	subwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),w
  4499  005D08  E105               	bnz	u3145
  4500  005D0A  5001               	movf	btemp+1,w,c
  4501  005D0C  5DEA               	subwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),w
  4502  005D0E  E102               	bnz	u3145
  4503  005D10  5000               	movf	btemp,w,c
  4504  005D12  5DE9               	subwf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4505  005D14                     u3145:
  4506  005D14  E206               	bc	l393
  4507                           ;rgl.c: 1541: rgl.srp=(rgl.xmod-m);
  4508  005D16  0100               	movlb	__Lparam shr (0+8)
  4509  005D18  51E9               	movf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4510  005D1A  0102               	movlb	(_rgl+8) shr (0+8)
  4511  005D1C  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  4512  005D1E  CFE8 F26C          	movff	wreg,_rgl+7
  4513  005D22                     l393:
  4514                           ;rgl.c: 1542: m+=rgl.srp;
  4515  005D22  C26C  FFE8         	movff	_rgl+7,wreg
  4516  005D26  0100               	movlb	__Lparam shr (0+8)
  4517  005D28  27E9               	addwf	?a_ModZgCW4^(__Lparam& (0+65280)),f,b
  4518  005D2A  0E01               	movlw	1
  4519  005D2C  B0D8               	btfsc	status,0,c
  4520  005D2E  27EA               	addwf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),f,b
  4521  005D30  B0D8               	btfsc	status,0,c
  4522  005D32  27EB               	addwf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),f,b
  4523  005D34  B0D8               	btfsc	status,0,c
  4524  005D36  27EC               	addwf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),f,b
  4525                           ;rgl.c: 1543: if(m>rgl.xmod) p=rgl.xmod;
  4526  005D38  C26D  F000         	movff	_rgl+8,btemp
  4527  005D3C  6A01               	clrf	btemp+1,c
  4528  005D3E  6A02               	clrf	btemp+2,c
  4529  005D40  6A03               	clrf	btemp+3,c
  4530  005D42  5003               	movf	btemp+3,w,c
  4531  005D44  0A80               	xorlw	128
  4532  005D46  6E04               	movwf	btemp+4,c
  4533  005D48  51EC               	movf	(?a_ModZgCW4+3)^(__Lparam& (0+65280)),w
  4534  005D4A  0A80               	xorlw	128
  4535  005D4C  5C04               	subwf	btemp+4,w,c
  4536  005D4E  E108               	bnz	u3165
  4537  005D50  51EB               	movf	(?a_ModZgCW4+2)^(__Lparam& (0+65280)),w
  4538  005D52  5C02               	subwf	btemp+2,w,c
  4539  005D54  E105               	bnz	u3165
  4540  005D56  51EA               	movf	(?a_ModZgCW4+1)^(__Lparam& (0+65280)),w
  4541  005D58  5C01               	subwf	btemp+1,w,c
  4542  005D5A  E102               	bnz	u3165
  4543  005D5C  51E9               	movf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4544  005D5E  5C00               	subwf	btemp,w,c
  4545  005D60                     u3165:
  4546  005D60  E203               	bc	l394
  4547  005D62  C26D  FFD9         	movff	_rgl+8,fsr2l
  4548  005D66  D003               	goto	l395
  4549  005D68                     l394:
  4550                           ;rgl.c: 1544: else p=m;
  4551  005D68  0100               	movlb	__Lparam shr (0+8)
  4552  005D6A  51E9               	movf	?a_ModZgCW4^(__Lparam& (0+65280)),w
  4553  005D6C  6ED9               	movwf	fsr2l,c
  4554  005D6E                     l395:
  4555                           ;rgl.c: 1545: rgl.fz=0;
  4556  005D6E  0102               	movlb	_rgl shr (0+8)
  4557  005D70  9565               	bcf	_rgl& (0+255),2,b
  4558                           ;rgl.c: 1546: rgl.tmp_pwm=p;
  4559  005D72  CFD9 F26E          	movff	fsr2l,_rgl+9
  4560                           ;rgl.c: 1547: }
  4561  005D76  0012               	return	
  4562  005D78                     __end_of_ModZgCW4:
  4563                           ;rgl.c: 1550: void ModDkCW4(void)
  4564                           ;rgl.c: 1551: {
  4565  005D78                     _ModDkCW4:
  4566  000000                     
  4567                           ;rgl.c: 1552: signed long m;
  4568  005D78  0102               	movlb	_rgl shr (0+8)
  4569  005D7A  A565               	btfss	_rgl& (0+255),2,b
  4570  005D7C  0012               	return	
  4571                           ;rgl.c: 1557: ada=DtCW.AC_CW-DtCW.DAD_CW;
  4572  005D7E  C1B5  FFE8         	movff	_DtCW+14,wreg
  4573  005D82  0101               	movlb	(_DtCW+12) shr (0+8)
  4574  005D84  5DB3               	subwf	(_DtCW+12)& (0+255),w,b
  4575  005D86  6ED9               	movwf	fsr2l,c
  4576                           ;rgl.c: 1558: k=2;
  4577  005D88  0E02               	movlw	2
  4578  005D8A  6EE1               	movwf	fsr1l,c
  4579                           ;rgl.c: 1559: if(ada<0) k=1;
  4580  005D8C  AED9               	btfss	fsr2l,7,c
  4581  005D8E  D002               	goto	l398
  4582  005D90  0E01               	movlw	1
  4583  005D92  6EE1               	movwf	fsr1l,c
  4584  005D94                     l398:
  4585                           ;rgl.c: 1560: m=rgl.srp+k*ada;
  4586  005D94  CFD9 F002          	movff	fsr2l,btemp+2
  4587  005D98  6A03               	clrf	btemp+3,c
  4588  005D9A  BE02               	btfsc	btemp+2,7,c
  4589  005D9C  0603               	decf	btemp+3,f,c
  4590  005D9E  CFE1 F000          	movff	fsr1l,btemp
  4591  005DA2  6A01               	clrf	btemp+1,c
  4592  005DA4  EC92  F078         	call	awmul
  4593  005DA8  C26C  FFE8         	movff	_rgl+7,wreg
  4594  005DAC  2404               	addwf	btemp+4,w,c
  4595  005DAE  6E00               	movwf	btemp,c
  4596  005DB0  0E00               	movlw	0
  4597  005DB2  2005               	addwfc	btemp+5,w,c
  4598  005DB4  6E01               	movwf	btemp+1,c
  4599  005DB6  0100               	movlb	__Lparam shr (0+8)
  4600  005DB8  C000  F0E9         	movff	btemp,?a_ModDkCW4
  4601  005DBC  C001  F0EA         	movff	btemp+1,?a_ModDkCW4+1
  4602  005DC0  0E00               	movlw	0
  4603  005DC2  BFEA               	btfsc	(?a_ModDkCW4+1)^(__Lparam& (0+65280)),7,b
  4604  005DC4  0EFF               	movlw	-1
  4605  005DC6  6FEB               	movwf	(?a_ModDkCW4+2)^(__Lparam& (0+65280)),b
  4606  005DC8  6FEC               	movwf	(?a_ModDkCW4+3)^(__Lparam& (0+65280)),b
  4607                           ;rgl.c: 1561: if(m>rgl.xmod) p=rgl.xmod;
  4608  005DCA  C26D  F000         	movff	_rgl+8,btemp
  4609  005DCE  6A01               	clrf	btemp+1,c
  4610  005DD0  6A02               	clrf	btemp+2,c
  4611  005DD2  6A03               	clrf	btemp+3,c
  4612  005DD4  5003               	movf	btemp+3,w,c
  4613  005DD6  0A80               	xorlw	128
  4614  005DD8  6E04               	movwf	btemp+4,c
  4615  005DDA  51EC               	movf	(?a_ModDkCW4+3)^(__Lparam& (0+65280)),w
  4616  005DDC  0A80               	xorlw	128
  4617  005DDE  5C04               	subwf	btemp+4,w,c
  4618  005DE0  E108               	bnz	u3195
  4619  005DE2  51EB               	movf	(?a_ModDkCW4+2)^(__Lparam& (0+65280)),w
  4620  005DE4  5C02               	subwf	btemp+2,w,c
  4621  005DE6  E105               	bnz	u3195
  4622  005DE8  51EA               	movf	(?a_ModDkCW4+1)^(__Lparam& (0+65280)),w
  4623  005DEA  5C01               	subwf	btemp+1,w,c
  4624  005DEC  E102               	bnz	u3195
  4625  005DEE  51E9               	movf	?a_ModDkCW4^(__Lparam& (0+65280)),w
  4626  005DF0  5C00               	subwf	btemp,w,c
  4627  005DF2                     u3195:
  4628  005DF2  E203               	bc	l399
  4629  005DF4  C26D  FFD9         	movff	_rgl+8,fsr2l
  4630  005DF8  D01C               	goto	l400
  4631  005DFA                     l399:
  4632                           ;rgl.c: 1562: else
  4633  005DFA  C1E4  F000         	movff	_PWM+9,btemp
  4634  005DFE  6A01               	clrf	btemp+1,c
  4635  005E00  6A02               	clrf	btemp+2,c
  4636  005E02  6A03               	clrf	btemp+3,c
  4637  005E04  0100               	movlb	__Lparam shr (0+8)
  4638  005E06  51EC               	movf	(?a_ModDkCW4+3)^(__Lparam& (0+65280)),w
  4639  005E08  0A80               	xorlw	128
  4640  005E0A  6E04               	movwf	btemp+4,c
  4641  005E0C  5003               	movf	btemp+3,w,c
  4642  005E0E  0A80               	xorlw	128
  4643  005E10  5C04               	subwf	btemp+4,w,c
  4644  005E12  E108               	bnz	u3205
  4645  005E14  5002               	movf	btemp+2,w,c
  4646  005E16  5DEB               	subwf	(?a_ModDkCW4+2)^(__Lparam& (0+65280)),w
  4647  005E18  E105               	bnz	u3205
  4648  005E1A  5001               	movf	btemp+1,w,c
  4649  005E1C  5DEA               	subwf	(?a_ModDkCW4+1)^(__Lparam& (0+65280)),w
  4650  005E1E  E102               	bnz	u3205
  4651  005E20  5000               	movf	btemp,w,c
  4652  005E22  5DE9               	subwf	?a_ModDkCW4^(__Lparam& (0+65280)),w
  4653  005E24                     u3205:
  4654  005E24  E203               	bc	l401
  4655  005E26  C1E4  FFD9         	movff	_PWM+9,fsr2l
  4656  005E2A  D003               	goto	l400
  4657  005E2C                     l401:
  4658                           ;rgl.c: 1564: else p=m;
  4659  005E2C  0100               	movlb	__Lparam shr (0+8)
  4660  005E2E  51E9               	movf	?a_ModDkCW4^(__Lparam& (0+65280)),w
  4661  005E30  6ED9               	movwf	fsr2l,c
  4662  005E32                     l400:
  4663                           ;rgl.c: 1565: rgl.tmp_pwm=p;
  4664  005E32  CFD9 F26E          	movff	fsr2l,_rgl+9
  4665                           ;rgl.c: 1566: }
  4666  005E36  0012               	return	
  4667  005E38                     __end_of_ModDkCW4:
  4668                           ;rgl.c: 1571: void ModPruCW4(void)
  4669                           ;rgl.c: 1572: {
  4670  005E38                     _ModPruCW4:
  4671  000000                     
  4672                           ;rgl.c: 1573: static unsigned char l,m,o,p,q,r,s
      +                          ;
  4673  005E38  0102               	movlb	_rgl shr (0+8)
  4674  005E3A  B565               	btfsc	_rgl& (0+255),2,b
  4675  005E3C  D09F               	goto	l404
  4676                           ;rgl.c: 1577: {
  4677  005E3E  010E               	movlb	F1856 shr (0+8)
  4678  005E40  6BD4               	clrf	F1856& (0+255),b
  4679                           ;rgl.c: 1579: m=0;
  4680  005E42  010E               	movlb	F1857 shr (0+8)
  4681  005E44  6BD5               	clrf	F1857& (0+255),b
  4682                           ;rgl.c: 1580: o=0;
  4683  005E46  010E               	movlb	F1858 shr (0+8)
  4684  005E48  6BD6               	clrf	F1858& (0+255),b
  4685                           ;rgl.c: 1581: p=0;
  4686  005E4A  010E               	movlb	F1859 shr (0+8)
  4687  005E4C  6BD7               	clrf	F1859& (0+255),b
  4688                           ;rgl.c: 1582: if(q<255) q++;
  4689  005E4E  CED8  F000         	movff	F1860,btemp
  4690  005E52  2800               	incf	btemp,w,c
  4691  005E54  E002               	bz	l405
  4692  005E56  010E               	movlb	F1860 shr (0+8)
  4693  005E58  2BD8               	incf	F1860& (0+255),f,b
  4694  005E5A                     l405:
  4695                           ;rgl.c: 1583: if(s<255) s++;
  4696  005E5A  CEDA  F000         	movff	F1862,btemp
  4697  005E5E  2800               	incf	btemp,w,c
  4698  005E60  E002               	bz	l406
  4699  005E62  010E               	movlb	F1862 shr (0+8)
  4700  005E64  2BDA               	incf	F1862& (0+255),f,b
  4701  005E66                     l406:
  4702                           ;rgl.c: 1584: if(DtCW._newPCW) s=0;
  4703  005E66  0101               	movlb	(_DtCW+1) shr (0+8)
  4704  005E68  A1A8               	btfss	(_DtCW+1)& (0+255),0,b
  4705  005E6A  D002               	goto	l407
  4706  005E6C  010E               	movlb	F1862 shr (0+8)
  4707  005E6E  6BDA               	clrf	F1862& (0+255),b
  4708  005E70                     l407:
  4709                           ;rgl.c: 1585: if(Tnizsza(0))
  4710  005E70  0E00               	movlw	0
  4711  005E72  ECB3  F036         	call	_Tnizsza
  4712  005E76  A0D8               	btfss	status,0,c
  4713  005E78  0012               	return	
  4714                           ;rgl.c: 1586: {
  4715  005E7A  0E0A               	movlw	10
  4716  005E7C  ECB3  F036         	call	_Tnizsza
  4717  005E80  B0D8               	btfsc	status,0,c
  4718  005E82  0012               	return	
  4719                           ;rgl.c: 1588: {
  4720  005E84  0100               	movlb	__Lparam shr (0+8)
  4721  005E86  6BE9               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4722                           ;rgl.c: 1590: if(Tstoi()&&s>=1)
  4723  005E88  ECAC  F036         	call	_Tstoi	;wreg free
  4724  005E8C  E308               	bnc	l410
  4725  005E8E  0E00               	movlw	0
  4726  005E90  010E               	movlb	F1862 shr (0+8)
  4727  005E92  65DA               	cpfsgt	F1862& (0+255),b
  4728  005E94  D004               	goto	l410
  4729                           ;rgl.c: 1591: {
  4730  005E96  6BDA               	clrf	F1862& (0+255),b
  4731                           ;rgl.c: 1593: k=2;
  4732  005E98  0E02               	movlw	2
  4733  005E9A  0100               	movlb	__Lparam shr (0+8)
  4734  005E9C  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4735  005E9E                     l410:
  4736                           ;rgl.c: 1594: }
  4737  005E9E  0E01               	movlw	1
  4738  005EA0  EC84  F036         	call	_Trosnie
  4739  005EA4  E310               	bnc	l411
  4740  005EA6  0E00               	movlw	0
  4741  005EA8  010E               	movlb	F1862 shr (0+8)
  4742  005EAA  65DA               	cpfsgt	F1862& (0+255),b
  4743  005EAC  D00C               	goto	l411
  4744                           ;rgl.c: 1596: {
  4745  005EAE  6BDA               	clrf	F1862& (0+255),b
  4746                           ;rgl.c: 1598: k=10;
  4747  005EB0  0E0A               	movlw	10
  4748  005EB2  0100               	movlb	__Lparam shr (0+8)
  4749  005EB4  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4750                           ;rgl.c: 1599: if(Trosnie(2)) k=8;
  4751  005EB6  0E02               	movlw	2
  4752  005EB8  EC84  F036         	call	_Trosnie
  4753  005EBC  E306               	bnc	l413
  4754  005EBE  0E08               	movlw	8
  4755  005EC0  0100               	movlb	__Lparam shr (0+8)
  4756  005EC2  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4757                           ;rgl.c: 1600: }
  4758  005EC4  D002               	goto	l413
  4759  005EC6                     l411:
  4760                           ;rgl.c: 1601: else
  4761  005EC6  0102               	movlb	(_rgl+6) shr (0+8)
  4762  005EC8  6B6B               	clrf	(_rgl+6)& (0+255),b
  4763  005ECA                     l413:
  4764                           ;rgl.c: 1603: if(PWM.BufPWM>rgl.xmod) return;
  4765  005ECA  C1DC  FFE8         	movff	_PWM+1,wreg
  4766  005ECE  0102               	movlb	(_rgl+8) shr (0+8)
  4767  005ED0  616D               	cpfslt	(_rgl+8)& (0+255),b
  4768  005ED2  D001               	goto	l414
  4769  005ED4  0012               	return	
  4770  005ED6                     l414:
  4771                           ;rgl.c: 1604: tmp=rgl.xmod-PWM.BufPWM;
  4772  005ED6  C1DC  FFE8         	movff	_PWM+1,wreg
  4773  005EDA  0102               	movlb	(_rgl+8) shr (0+8)
  4774  005EDC  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  4775  005EDE  6ED9               	movwf	fsr2l,c
  4776                           ;rgl.c: 1605: if(k>tmp) k=tmp;
  4777  005EE0  50D9               	movf	fsr2l,w,c
  4778  005EE2  0100               	movlb	__Lparam shr (0+8)
  4779  005EE4  94D8               	bcf	status,2,c
  4780  005EE6  90D8               	bcf	status,0,c
  4781  005EE8  AFE9               	btfss	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4782  005EEA  5DE9               	subwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4783  005EEC  B4D8               	btfsc	status,2,c
  4784  005EEE  90D8               	bcf	status,0,c
  4785  005EF0  E302               	bnc	l415
  4786  005EF2  50D9               	movf	fsr2l,w,c
  4787  005EF4  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4788  005EF6                     l415:
  4789                           ;rgl.c: 1606: if(PWM.MMAXCW>PWM.MGMOD)
  4790  005EF6  C1FB  FFE8         	movff	_PWM+32,wreg
  4791  005EFA  0101               	movlb	(_PWM+12) shr (0+8)
  4792  005EFC  61E7               	cpfslt	(_PWM+12)& (0+255),b
  4793  005EFE  D01F               	goto	l416
  4794                           ;rgl.c: 1607: {
  4795  005F00  C26C  FFE8         	movff	_rgl+7,wreg
  4796  005F04  0100               	movlb	__Lparam shr (0+8)
  4797  005F06  25E9               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4798  005F08  6E02               	movwf	btemp+2,c
  4799  005F0A  6A03               	clrf	btemp+3,c
  4800  005F0C  B0D8               	btfsc	status,0,c
  4801  005F0E  2A03               	incf	btemp+3,f,c
  4802  005F10  BFE9               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4803  005F12  0603               	decf	btemp+3,f,c
  4804  005F14  C1E7  F000         	movff	_PWM+12,btemp
  4805  005F18  6A01               	clrf	btemp+1,c
  4806  005F1A  5001               	movf	btemp+1,w,c
  4807  005F1C  0A80               	xorlw	128
  4808  005F1E  6E04               	movwf	btemp+4,c
  4809  005F20  5003               	movf	btemp+3,w,c
  4810  005F22  0A80               	xorlw	128
  4811  005F24  5C04               	subwf	btemp+4,w,c
  4812  005F26  E102               	bnz	u3375
  4813  005F28  5002               	movf	btemp+2,w,c
  4814  005F2A  5C00               	subwf	btemp,w,c
  4815  005F2C                     u3375:
  4816  005F2C  E203               	bc	l417
  4817  005F2E  C1E7  F26C         	movff	_PWM+12,_rgl+7
  4818  005F32  0012               	return	
  4819  005F34                     l417:
  4820                           ;rgl.c: 1609: else rgl.srp+=k;
  4821  005F34  0100               	movlb	__Lparam shr (0+8)
  4822  005F36  51E9               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4823  005F38  0102               	movlb	(_rgl+7) shr (0+8)
  4824  005F3A  276C               	addwf	(_rgl+7)& (0+255),f,b
  4825                           ;rgl.c: 1610: }
  4826  005F3C  0012               	return	
  4827  005F3E                     l416:
  4828                           ;rgl.c: 1611: else
  4829  005F3E  C26C  FFE8         	movff	_rgl+7,wreg
  4830  005F42  0100               	movlb	__Lparam shr (0+8)
  4831  005F44  25E9               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4832  005F46  6E02               	movwf	btemp+2,c
  4833  005F48  6A03               	clrf	btemp+3,c
  4834  005F4A  B0D8               	btfsc	status,0,c
  4835  005F4C  2A03               	incf	btemp+3,f,c
  4836  005F4E  BFE9               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4837  005F50  0603               	decf	btemp+3,f,c
  4838  005F52  C1FB  F000         	movff	_PWM+32,btemp
  4839  005F56  6A01               	clrf	btemp+1,c
  4840  005F58  5001               	movf	btemp+1,w,c
  4841  005F5A  0A80               	xorlw	128
  4842  005F5C  6E04               	movwf	btemp+4,c
  4843  005F5E  5003               	movf	btemp+3,w,c
  4844  005F60  0A80               	xorlw	128
  4845  005F62  5C04               	subwf	btemp+4,w,c
  4846  005F64  E102               	bnz	u3385
  4847  005F66  5002               	movf	btemp+2,w,c
  4848  005F68  5C00               	subwf	btemp,w,c
  4849  005F6A                     u3385:
  4850  005F6A  E203               	bc	l420
  4851  005F6C  C1FB  F26C         	movff	_PWM+32,_rgl+7
  4852  005F70  0012               	return	
  4853  005F72                     l420:
  4854                           ;rgl.c: 1614: else rgl.srp+=k;
  4855  005F72  0100               	movlb	__Lparam shr (0+8)
  4856  005F74  51E9               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4857  005F76  0102               	movlb	(_rgl+7) shr (0+8)
  4858  005F78  276C               	addwf	(_rgl+7)& (0+255),f,b
  4859                           ;rgl.c: 1615: }
  4860  005F7A  0012               	return	
  4861                           ;rgl.c: 1618: else return;
  4862                           ;rgl.c: 1620: else return;
  4863  005F7C                     l404:
  4864                           ;rgl.c: 1622: else
  4865  005F7C  010E               	movlb	F1860 shr (0+8)
  4866  005F7E  6BD8               	clrf	F1860& (0+255),b
  4867                           ;rgl.c: 1625: r=0;
  4868  005F80  010E               	movlb	F1861 shr (0+8)
  4869  005F82  6BD9               	clrf	F1861& (0+255),b
  4870                           ;rgl.c: 1626: s=0;
  4871  005F84  010E               	movlb	F1862 shr (0+8)
  4872  005F86  6BDA               	clrf	F1862& (0+255),b
  4873                           ;rgl.c: 1627: if(m<255) m++;
  4874  005F88  CED5  F000         	movff	F1857,btemp
  4875  005F8C  2800               	incf	btemp,w,c
  4876  005F8E  E002               	bz	l425
  4877  005F90  010E               	movlb	F1857 shr (0+8)
  4878  005F92  2BD5               	incf	F1857& (0+255),f,b
  4879  005F94                     l425:
  4880                           ;rgl.c: 1628: if(p<255) p++;
  4881  005F94  CED7  F000         	movff	F1859,btemp
  4882  005F98  2800               	incf	btemp,w,c
  4883  005F9A  E002               	bz	l426
  4884  005F9C  010E               	movlb	F1859 shr (0+8)
  4885  005F9E  2BD7               	incf	F1859& (0+255),f,b
  4886  005FA0                     l426:
  4887                           ;rgl.c: 1629: if(o<255) o++;
  4888  005FA0  CED6  F000         	movff	F1858,btemp
  4889  005FA4  2800               	incf	btemp,w,c
  4890  005FA6  E002               	bz	l427
  4891  005FA8  010E               	movlb	F1858 shr (0+8)
  4892  005FAA  2BD6               	incf	F1858& (0+255),f,b
  4893  005FAC                     l427:
  4894                           ;rgl.c: 1630: if(DtCW.DAD_CW>DtCW.AC_CW)
  4895  005FAC  C1B5  FFE8         	movff	_DtCW+14,wreg
  4896  005FB0  0101               	movlb	(_DtCW+12) shr (0+8)
  4897  005FB2  61B3               	cpfslt	(_DtCW+12)& (0+255),b
  4898  005FB4  D060               	goto	l428
  4899                           ;rgl.c: 1631: {
  4900  005FB6  0100               	movlb	__Lparam shr (0+8)
  4901  005FB8  6BE9               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4902                           ;rgl.c: 1633: if(Trosnie(0)&&m>=2)
  4903  005FBA  0E00               	movlw	0
  4904  005FBC  EC84  F036         	call	_Trosnie
  4905  005FC0  E310               	bnc	l429
  4906  005FC2  0E01               	movlw	1
  4907  005FC4  010E               	movlb	F1857 shr (0+8)
  4908  005FC6  65D5               	cpfsgt	F1857& (0+255),b
  4909  005FC8  D00C               	goto	l429
  4910                           ;rgl.c: 1634: {
  4911  005FCA  010E               	movlb	F1859 shr (0+8)
  4912  005FCC  6BD7               	clrf	F1859& (0+255),b
  4913                           ;rgl.c: 1636: o=0;
  4914  005FCE  010E               	movlb	F1858 shr (0+8)
  4915  005FD0  6BD6               	clrf	F1858& (0+255),b
  4916                           ;rgl.c: 1637: l=0;
  4917  005FD2  010E               	movlb	F1856 shr (0+8)
  4918  005FD4  6BD4               	clrf	F1856& (0+255),b
  4919                           ;rgl.c: 1638: m=0;
  4920  005FD6  010E               	movlb	F1857 shr (0+8)
  4921  005FD8  6BD5               	clrf	F1857& (0+255),b
  4922                           ;rgl.c: 1639: k=2;
  4923  005FDA  0E02               	movlw	2
  4924  005FDC  0100               	movlb	__Lparam shr (0+8)
  4925  005FDE  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4926                           ;rgl.c: 1640: }
  4927  005FE0  D01C               	goto	l430
  4928  005FE2                     l429:
  4929                           ;rgl.c: 1641: else
  4930  005FE2  0E01               	movlw	1
  4931  005FE4  ECC0  F036         	call	_Twyzsza
  4932  005FE8  E316               	bnc	l431
  4933                           ;rgl.c: 1643: {
  4934  005FEA  ECAC  F036         	call	_Tstoi	;wreg free
  4935  005FEE  E315               	bnc	l430
  4936                           ;rgl.c: 1645: {
  4937  005FF0  0E01               	movlw	1
  4938  005FF2  010E               	movlb	F1856 shr (0+8)
  4939  005FF4  65D4               	cpfsgt	F1856& (0+255),b
  4940  005FF6  D00A               	goto	l433
  4941                           ;rgl.c: 1647: {
  4942  005FF8  0100               	movlb	__Lparam shr (0+8)
  4943  005FFA  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4944                           ;rgl.c: 1649: if(Twyzsza(3)) k=2;
  4945  005FFC  0E03               	movlw	3
  4946  005FFE  ECC0  F036         	call	_Twyzsza
  4947  006002  E309               	bnc	l431
  4948  006004  0E02               	movlw	2
  4949  006006  0100               	movlb	__Lparam shr (0+8)
  4950  006008  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4951  00600A  D005               	goto	l431
  4952                           ;rgl.c: 1650: l=0;
  4953                           ;rgl.c: 1651: }
  4954  00600C                     l433:
  4955                           ;rgl.c: 1652: else
  4956  00600C  0100               	movlb	__Lparam shr (0+8)
  4957  00600E  6BE9               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  4958                           ;rgl.c: 1655: l++;
  4959  006010  010E               	movlb	F1856 shr (0+8)
  4960  006012  2BD4               	incf	F1856& (0+255),f,b
  4961                           ;rgl.c: 1656: }
  4962  006014  D002               	goto	l430
  4963  006016                     l431:
  4964  006016  010E               	movlb	F1856 shr (0+8)
  4965  006018  6BD4               	clrf	F1856& (0+255),b
  4966  00601A                     l430:
  4967                           ;rgl.c: 1659: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PW
      +                          M.MDMOD;
  4968  00601A  C1E4  F000         	movff	_PWM+9,btemp
  4969  00601E  6A01               	clrf	btemp+1,c
  4970  006020  C26C  F002         	movff	_rgl+7,btemp+2
  4971  006024  0100               	movlb	__Lparam shr (0+8)
  4972  006026  51E9               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4973  006028  5C02               	subwf	btemp+2,w,c
  4974  00602A  6EF6               	movwf	tblptrl,c
  4975  00602C  6AF7               	clrf	tblptrh,c
  4976  00602E  B0D8               	btfsc	status,0,c
  4977  006030  2AF7               	incf	tblptrh,f,c
  4978  006032  AFE9               	btfss	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  4979  006034  06F7               	decf	tblptrh,f,c
  4980  006036  50F7               	movf	tblptrh,w,c
  4981  006038  0A80               	xorlw	128
  4982  00603A  6E02               	movwf	btemp+2,c
  4983  00603C  5001               	movf	btemp+1,w,c
  4984  00603E  0A80               	xorlw	128
  4985  006040  5C02               	subwf	btemp+2,w,c
  4986  006042  E102               	bnz	u3505
  4987  006044  5000               	movf	btemp,w,c
  4988  006046  5CF6               	subwf	tblptrl,w,c
  4989  006048                     u3505:
  4990  006048  E203               	bc	l437
  4991  00604A  C1E4  F26C         	movff	_PWM+9,_rgl+7
  4992  00604E  D004               	goto	l438
  4993  006050                     l437:
  4994                           ;rgl.c: 1660: else rgl.srp-=k;
  4995  006050  0100               	movlb	__Lparam shr (0+8)
  4996  006052  51E9               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  4997  006054  0102               	movlb	(_rgl+7) shr (0+8)
  4998  006056  5F6C               	subwf	(_rgl+7)& (0+255),f,b
  4999  006058                     l438:
  5000                           ;rgl.c: 1661: if(rgl.srp>PWM.MMAXCW) rgl.srp=PWM
      +                          .MMAXCW;
  5001  006058  C26C  FFE8         	movff	_rgl+7,wreg
  5002  00605C  0101               	movlb	(_PWM+32) shr (0+8)
  5003  00605E  61FB               	cpfslt	(_PWM+32)& (0+255),b
  5004  006060  D002               	goto	l439
  5005  006062  C1FB  F26C         	movff	_PWM+32,_rgl+7
  5006  006066                     l439:
  5007                           ;rgl.c: 1662: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  5008  006066  C26C  FFE8         	movff	_rgl+7,wreg
  5009  00606A  0102               	movlb	(_rgl+8) shr (0+8)
  5010  00606C  616D               	cpfslt	(_rgl+8)& (0+255),b
  5011  00606E  0012               	return	
  5012  006070  C26C  F26D         	movff	_rgl+7,_rgl+8
  5013                           ;rgl.c: 1663: return;
  5014  006074  0012               	return	
  5015  006076                     l428:
  5016                           ;rgl.c: 1665: else
  5017  006076  0100               	movlb	__Lparam shr (0+8)
  5018  006078  6BE9               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5019                           ;rgl.c: 1668: if(Tmaleje(0)&&m>=2)
  5020  00607A  0E00               	movlw	0
  5021  00607C  EC91  F036         	call	_Tmaleje
  5022  006080  E310               	bnc	l442
  5023  006082  0E01               	movlw	1
  5024  006084  010E               	movlb	F1857 shr (0+8)
  5025  006086  65D5               	cpfsgt	F1857& (0+255),b
  5026  006088  D00C               	goto	l442
  5027                           ;rgl.c: 1669: {
  5028  00608A  010E               	movlb	F1859 shr (0+8)
  5029  00608C  6BD7               	clrf	F1859& (0+255),b
  5030                           ;rgl.c: 1671: o=0;
  5031  00608E  010E               	movlb	F1858 shr (0+8)
  5032  006090  6BD6               	clrf	F1858& (0+255),b
  5033                           ;rgl.c: 1672: l=0;
  5034  006092  010E               	movlb	F1856 shr (0+8)
  5035  006094  6BD4               	clrf	F1856& (0+255),b
  5036                           ;rgl.c: 1673: m=0;
  5037  006096  010E               	movlb	F1857 shr (0+8)
  5038  006098  6BD5               	clrf	F1857& (0+255),b
  5039                           ;rgl.c: 1674: k=1;
  5040  00609A  0E01               	movlw	1
  5041  00609C  0100               	movlb	__Lparam shr (0+8)
  5042  00609E  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5043                           ;rgl.c: 1676: }
  5044  0060A0  D015               	goto	l443
  5045  0060A2                     l442:
  5046                           ;rgl.c: 1677: else
  5047  0060A2  0E01               	movlw	1
  5048  0060A4  ECB3  F036         	call	_Tnizsza
  5049  0060A8  E30F               	bnc	l444
  5050                           ;rgl.c: 1679: {
  5051  0060AA  ECAC  F036         	call	_Tstoi	;wreg free
  5052  0060AE  E30E               	bnc	l443
  5053                           ;rgl.c: 1681: {
  5054  0060B0  0E02               	movlw	2
  5055  0060B2  010E               	movlb	F1856 shr (0+8)
  5056  0060B4  65D4               	cpfsgt	F1856& (0+255),b
  5057  0060B6  D003               	goto	l446
  5058                           ;rgl.c: 1683: {
  5059  0060B8  0100               	movlb	__Lparam shr (0+8)
  5060  0060BA  6FE9               	movwf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5061  0060BC  D005               	goto	l444
  5062                           ;rgl.c: 1685: l=0;
  5063                           ;rgl.c: 1686: }
  5064  0060BE                     l446:
  5065                           ;rgl.c: 1687: else
  5066  0060BE  0100               	movlb	__Lparam shr (0+8)
  5067  0060C0  6BE9               	clrf	?a_ModPruCW4^(__Lparam& (0+65280)),b
  5068                           ;rgl.c: 1690: l++;
  5069  0060C2  010E               	movlb	F1856 shr (0+8)
  5070  0060C4  2BD4               	incf	F1856& (0+255),f,b
  5071                           ;rgl.c: 1691: }
  5072  0060C6  D002               	goto	l443
  5073  0060C8                     l444:
  5074  0060C8  010E               	movlb	F1856 shr (0+8)
  5075  0060CA  6BD4               	clrf	F1856& (0+255),b
  5076  0060CC                     l443:
  5077                           ;rgl.c: 1694: if(PWM.MMAXCW>PWM.MGMOD)
  5078  0060CC  C1FB  FFE8         	movff	_PWM+32,wreg
  5079  0060D0  0101               	movlb	(_PWM+12) shr (0+8)
  5080  0060D2  61E7               	cpfslt	(_PWM+12)& (0+255),b
  5081  0060D4  D01A               	goto	l449
  5082                           ;rgl.c: 1695: {
  5083  0060D6  C26C  FFE8         	movff	_rgl+7,wreg
  5084  0060DA  0100               	movlb	__Lparam shr (0+8)
  5085  0060DC  25E9               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  5086  0060DE  6E02               	movwf	btemp+2,c
  5087  0060E0  6A03               	clrf	btemp+3,c
  5088  0060E2  B0D8               	btfsc	status,0,c
  5089  0060E4  2A03               	incf	btemp+3,f,c
  5090  0060E6  BFE9               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  5091  0060E8  0603               	decf	btemp+3,f,c
  5092  0060EA  C1E7  F000         	movff	_PWM+12,btemp
  5093  0060EE  6A01               	clrf	btemp+1,c
  5094  0060F0  5001               	movf	btemp+1,w,c
  5095  0060F2  0A80               	xorlw	128
  5096  0060F4  6E04               	movwf	btemp+4,c
  5097  0060F6  5003               	movf	btemp+3,w,c
  5098  0060F8  0A80               	xorlw	128
  5099  0060FA  5C04               	subwf	btemp+4,w,c
  5100  0060FC  E102               	bnz	u3605
  5101  0060FE  5002               	movf	btemp+2,w,c
  5102  006100  5C00               	subwf	btemp,w,c
  5103  006102                     u3605:
  5104  006102  E21D               	bc	l453
  5105  006104  C1E7  F26C         	movff	_PWM+12,_rgl+7
  5106  006108  D01E               	goto	l452
  5107                           ;rgl.c: 1697: else rgl.srp+=k;
  5108                           ;rgl.c: 1698: }
  5109  00610A                     l449:
  5110                           ;rgl.c: 1699: else
  5111  00610A  C26C  FFE8         	movff	_rgl+7,wreg
  5112  00610E  0100               	movlb	__Lparam shr (0+8)
  5113  006110  25E9               	addwf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  5114  006112  6E02               	movwf	btemp+2,c
  5115  006114  6A03               	clrf	btemp+3,c
  5116  006116  B0D8               	btfsc	status,0,c
  5117  006118  2A03               	incf	btemp+3,f,c
  5118  00611A  BFE9               	btfsc	?a_ModPruCW4^(__Lparam& (0+65280)),7,b
  5119  00611C  0603               	decf	btemp+3,f,c
  5120  00611E  C1FB  F000         	movff	_PWM+32,btemp
  5121  006122  6A01               	clrf	btemp+1,c
  5122  006124  5001               	movf	btemp+1,w,c
  5123  006126  0A80               	xorlw	128
  5124  006128  6E04               	movwf	btemp+4,c
  5125  00612A  5003               	movf	btemp+3,w,c
  5126  00612C  0A80               	xorlw	128
  5127  00612E  5C04               	subwf	btemp+4,w,c
  5128  006130  E102               	bnz	u3615
  5129  006132  5002               	movf	btemp+2,w,c
  5130  006134  5C00               	subwf	btemp,w,c
  5131  006136                     u3615:
  5132  006136  E203               	bc	l453
  5133  006138  C1FB  F26C         	movff	_PWM+32,_rgl+7
  5134  00613C  D004               	goto	l452
  5135  00613E                     l453:
  5136                           ;rgl.c: 1702: else rgl.srp+=k;
  5137  00613E  0100               	movlb	__Lparam shr (0+8)
  5138  006140  51E9               	movf	?a_ModPruCW4^(__Lparam& (0+65280)),w
  5139  006142  0102               	movlb	(_rgl+7) shr (0+8)
  5140  006144  276C               	addwf	(_rgl+7)& (0+255),f,b
  5141  006146                     l452:
  5142                           ;rgl.c: 1703: }
  5143  006146  C26C  FFE8         	movff	_rgl+7,wreg
  5144  00614A  0102               	movlb	(_rgl+8) shr (0+8)
  5145  00614C  616D               	cpfslt	(_rgl+8)& (0+255),b
  5146  00614E  0012               	return	
  5147  006150  C26C  F26D         	movff	_rgl+7,_rgl+8
  5148                           ;rgl.c: 1705: return;
  5149  006154  0012               	return	
  5150                           ;rgl.c: 1706: }
  5151  006156                     __end_of_ModPruCW4:
  5152                           ;rgl.c: 1712: void IncMaxCW4(void)
  5153                           ;rgl.c: 1713: {
  5154  006156                     _IncMaxCW4:
  5155  000000                     
  5156                           ;rgl.c: 1714: unsigned char k;
  5157  006156  0102               	movlb	_rgl shr (0+8)
  5158  006158  A565               	btfss	_rgl& (0+255),2,b
  5159  00615A  D014               	goto	l457
  5160                           ;rgl.c: 1718: {
  5161  00615C  C1FB  FFE8         	movff	_PWM+32,wreg
  5162  006160  0101               	movlb	(_PWM+12) shr (0+8)
  5163  006162  61E7               	cpfslt	(_PWM+12)& (0+255),b
  5164  006164  D007               	goto	l458
  5165                           ;rgl.c: 1720: {
  5166  006166  C26D  FFE8         	movff	_rgl+8,wreg
  5167  00616A  61E7               	cpfslt	(_PWM+12)& (0+255),b
  5168  00616C  0012               	return	
  5169  00616E  C1E7  F26D         	movff	_PWM+12,_rgl+8
  5170                           ;rgl.c: 1722: }
  5171  006172  0012               	return	
  5172  006174                     l458:
  5173                           ;rgl.c: 1723: else
  5174  006174  C26D  FFE8         	movff	_rgl+8,wreg
  5175  006178  0101               	movlb	(_PWM+32) shr (0+8)
  5176  00617A  61FB               	cpfslt	(_PWM+32)& (0+255),b
  5177  00617C  0012               	return	
  5178  00617E  C1FB  F26D         	movff	_PWM+32,_rgl+8
  5179                           ;rgl.c: 1726: }
  5180  006182  0012               	return	
  5181  006184                     l457:
  5182                           ;rgl.c: 1728: }
  5183  006184  0E01               	movlw	1
  5184  006186  EC84  F036         	call	_Trosnie
  5185  00618A  B0D8               	btfsc	status,0,c
  5186  00618C  0012               	return	
  5187                           ;rgl.c: 1732: k=5;
  5188  00618E  0E05               	movlw	5
  5189  006190  6ED9               	movwf	fsr2l,c
  5190                           ;rgl.c: 1733: if(rgl.xmod+k>0xF0) rgl.xmod=0xF0;
  5191  006192  C26D  F000         	movff	_rgl+8,btemp
  5192  006196  6A01               	clrf	btemp+1,c
  5193  006198  2600               	addwf	btemp,f,c
  5194  00619A  0E00               	movlw	0
  5195  00619C  2201               	addwfc	btemp+1,f,c
  5196  00619E  5001               	movf	btemp+1,w,c
  5197  0061A0  0A80               	xorlw	128
  5198  0061A2  0F80               	addlw	-128
  5199  0061A4  0EF1               	movlw	241
  5200  0061A6  B4D8               	btfsc	status,2,c
  5201  0061A8  5C00               	subwf	btemp,w,c
  5202  0061AA  E304               	bnc	l463
  5203  0061AC  0EF0               	movlw	-16
  5204  0061AE  CFE8 F26D          	movff	wreg,_rgl+8
  5205  0061B2  D003               	goto	l464
  5206  0061B4                     l463:
  5207                           ;rgl.c: 1734: else rgl.xmod+=k;
  5208  0061B4  0102               	movlb	(_rgl+8) shr (0+8)
  5209  0061B6  0E05               	movlw	5
  5210  0061B8  276D               	addwf	(_rgl+8)& (0+255),f,b
  5211  0061BA                     l464:
  5212                           ;rgl.c: 1735: if(rgl.xmod>PWM.MMAXCW) rgl.xmod=P
      +                          WM.MMAXCW;
  5213  0061BA  C26D  FFE8         	movff	_rgl+8,wreg
  5214  0061BE  0101               	movlb	(_PWM+32) shr (0+8)
  5215  0061C0  61FB               	cpfslt	(_PWM+32)& (0+255),b
  5216  0061C2  0012               	return	
  5217  0061C4  C1FB  F26D         	movff	_PWM+32,_rgl+8
  5218                           ;rgl.c: 1736: }
  5219  0061C8  0012               	return	
  5220  0061CA                     __end_of_IncMaxCW4:
  5221                           ;rgl.c: 1739: void ModPrzCW4(void)
  5222                           ;rgl.c: 1740: {
  5223  0061CA                     _ModPrzCW4:
  5224  000000                     
  5225                           ;rgl.c: 1741: static unsigned char trb=0;
  5226  0061CA  0E64               	movlw	100
  5227  0061CC  6E02               	movwf	btemp+2,c
  5228  0061CE  6A03               	clrf	btemp+3,c
  5229  0061D0  C1E4  FFE8         	movff	_PWM+9,wreg
  5230  0061D4  C26E  F000         	movff	_rgl+9,btemp
  5231  0061D8  6A01               	clrf	btemp+1,c
  5232  0061DA  5E00               	subwf	btemp,f,c
  5233  0061DC  0E00               	movlw	0
  5234  0061DE  5A01               	subwfb	btemp+1,f,c
  5235  0061E0  EC92  F078         	call	lwmul
  5236  0061E4  C004  FFF6         	movff	btemp+4,tblptrl
  5237  0061E8  C005  FFF7         	movff	btemp+5,tblptrh
  5238                           ;rgl.c: 1745: p=p/(PWM.MGMOD-PWM.MDMOD);
  5239  0061EC  C1E4  FFE8         	movff	_PWM+9,wreg
  5240  0061F0  C1E7  F002         	movff	_PWM+12,btemp+2
  5241  0061F4  6A03               	clrf	btemp+3,c
  5242  0061F6  5E02               	subwf	btemp+2,f,c
  5243  0061F8  0E00               	movlw	0
  5244  0061FA  5A03               	subwfb	btemp+3,f,c
  5245  0061FC  CFF6 F000          	movff	tblptrl,btemp
  5246  006200  CFF7 F001          	movff	tblptrh,btemp+1
  5247  006204  ECB8  F077         	call	lwdiv
  5248  006208  C004  FFF6         	movff	btemp+4,tblptrl
  5249  00620C  C005  FFF7         	movff	btemp+5,tblptrh
  5250                           ;rgl.c: 1747: if(!rgl.nmod)
  5251  006210  0102               	movlb	_rgl shr (0+8)
  5252  006212  BB65               	btfsc	_rgl& (0+255),5,b
  5253  006214  D066               	goto	l478
  5254                           ;rgl.c: 1748: {
  5255  006216  010E               	movlb	F1869 shr (0+8)
  5256  006218  6BDB               	clrf	F1869& (0+255),b
  5257                           ;rgl.c: 1750: if(p<=35)
  5258  00621A  0E00               	movlw	0
  5259  00621C  5CF7               	subwf	tblptrh,w,c
  5260  00621E  0E24               	movlw	36
  5261  006220  B4D8               	btfsc	status,2,c
  5262  006222  5CF6               	subwf	tblptrl,w,c
  5263                           ;rgl.c: 1751: {
  5264  006224  0E00               	movlw	0
  5265  006226  E20F               	bc	L21
  5266  006228  EC91  F036         	call	_Tmaleje
  5267  00622C  B0D8               	btfsc	status,0,c
  5268  00622E  0012               	return	
  5269  006230  0E03               	movlw	3
  5270  006232  ECC0  F036         	call	_Twyzsza
  5271  006236  A0D8               	btfss	status,0,c
  5272  006238  0012               	return	
  5273                           ;rgl.c: 1753: {
  5274  00623A  0E01               	movlw	1
  5275  00623C  CFE8 FEDB          	movff	wreg,F1869
  5276                           ;rgl.c: 1755: rgl.nmod=1;
  5277  006240  0102               	movlb	_rgl shr (0+8)
  5278  006242  8B65               	bsf	_rgl& (0+255),5,b
  5279                           ;rgl.c: 1756: }
  5280  006244  0C01               	retlw	1
  5281                           ;rgl.c: 1758: else
  5282  006246                     L21:
  5283  006246  EC91  F036         	call	_Tmaleje
  5284  00624A  B0D8               	btfsc	status,0,c
  5285  00624C  0012               	return	
  5286                           ;rgl.c: 1761: {
  5287  00624E  0E05               	movlw	5
  5288  006250  ECC0  F036         	call	_Twyzsza
  5289  006254  A0D8               	btfss	status,0,c
  5290  006256  0012               	return	
  5291                           ;rgl.c: 1763: {
  5292  006258  C1E4  F000         	movff	_PWM+9,btemp
  5293  00625C  6A01               	clrf	btemp+1,c
  5294  00625E  C26C  F002         	movff	_rgl+7,btemp+2
  5295  006262  0EFD               	movlw	253
  5296  006264  2402               	addwf	btemp+2,w,c
  5297  006266  6EF6               	movwf	tblptrl,c
  5298  006268  6AF7               	clrf	tblptrh,c
  5299  00626A  0EFF               	movlw	255
  5300  00626C  22F7               	addwfc	tblptrh,f,c
  5301  00626E  50F7               	movf	tblptrh,w,c
  5302  006270  0A80               	xorlw	128
  5303  006272  6E02               	movwf	btemp+2,c
  5304  006274  5001               	movf	btemp+1,w,c
  5305  006276  0A80               	xorlw	128
  5306  006278  5C02               	subwf	btemp+2,w,c
  5307  00627A  E102               	bnz	u3775
  5308  00627C  5000               	movf	btemp,w,c
  5309  00627E  5CF6               	subwf	tblptrl,w,c
  5310  006280                     u3775:
  5311  006280  E203               	bc	l473
  5312  006282  C1E4  F26C         	movff	_PWM+9,_rgl+7
  5313  006286  D003               	goto	l474
  5314  006288                     l473:
  5315                           ;rgl.c: 1765: else rgl.srp-=3;
  5316  006288  0102               	movlb	(_rgl+7) shr (0+8)
  5317  00628A  0EFD               	movlw	-3
  5318  00628C  276C               	addwf	(_rgl+7)& (0+255),f,b
  5319  00628E                     l474:
  5320                           ;rgl.c: 1766: trb=2;
  5321  00628E  0E02               	movlw	2
  5322  006290  CFE8 FEDB          	movff	wreg,F1869
  5323                           ;rgl.c: 1767: rgl.nmod=1;
  5324  006294  0102               	movlb	_rgl shr (0+8)
  5325  006296  8B65               	bsf	_rgl& (0+255),5,b
  5326                           ;rgl.c: 1768: return;
  5327  006298  0C02               	retlw	2
  5328                           ;rgl.c: 1769: }
  5329                           ;rgl.c: 1771: else return;
  5330                           ;rgl.c: 1772: }
  5331                           ;rgl.c: 1774: else
  5332  00629A                     l479:
  5333                           ;rgl.c: 1777: {
  5334                           ;rgl.c: 1779: {
  5335  00629A  0E03               	movlw	3
  5336  00629C  ECC0  F036         	call	_Twyzsza
  5337  0062A0  B0D8               	btfsc	status,0,c
  5338  0062A2  0012               	return	
  5339                           ;rgl.c: 1781: {
  5340  0062A4  0E03               	movlw	3
  5341  0062A6  ECB3  F036         	call	_Tnizsza
  5342  0062AA  E208               	bc	u3820
  5343  0062AC  ECAC  F036         	call	_Tstoi	;wreg free
  5344  0062B0  E205               	bc	u3820
  5345  0062B2  0E00               	movlw	0
  5346  0062B4  EC91  F036         	call	_Tmaleje
  5347  0062B8  A0D8               	btfss	status,0,c
  5348  0062BA  0012               	return	
  5349  0062BC                     u3820:
  5350                           ;rgl.c: 1783: {
  5351  0062BC  010E               	movlb	F1869 shr (0+8)
  5352  0062BE  6BDB               	clrf	F1869& (0+255),b
  5353                           ;rgl.c: 1785: rgl.nmod=0;
  5354  0062C0  0102               	movlb	_rgl shr (0+8)
  5355  0062C2  9B65               	bcf	_rgl& (0+255),5,b
  5356                           ;rgl.c: 1786: }
  5357  0062C4  0012               	return	
  5358  0062C6                     l482:
  5359                           ;rgl.c: 1789: }
  5360                           ;rgl.c: 1791: {
  5361  0062C6  0E00               	movlw	0
  5362  0062C8  EC91  F036         	call	_Tmaleje
  5363  0062CC  E205               	bc	u3860
  5364  0062CE  0E04               	movlw	4
  5365  0062D0  ECC0  F036         	call	_Twyzsza
  5366  0062D4  B0D8               	btfsc	status,0,c
  5367  0062D6  0012               	return	
  5368  0062D8                     u3860:
  5369                           ;rgl.c: 1793: {
  5370  0062D8  010E               	movlb	F1869 shr (0+8)
  5371  0062DA  6BDB               	clrf	F1869& (0+255),b
  5372                           ;rgl.c: 1795: rgl.nmod=0;
  5373  0062DC  0102               	movlb	_rgl shr (0+8)
  5374  0062DE  9B65               	bcf	_rgl& (0+255),5,b
  5375                           ;rgl.c: 1796: return;
  5376  0062E0  0012               	return	
  5377                           ;rgl.c: 1797: }
  5378  0062E2                     l478:
  5379  0062E2  CEDB  FFE8         	movff	F1869,wreg
  5380  0062E6  0A01               	xorlw	1
  5381  0062E8  E0D8               	bz	l479
  5382  0062EA  0A03               	xorlw	3
  5383  0062EC  E0EC               	bz	l482
  5384  0062EE  0012               	return	
  5385                           ;rgl.c: 1801: }
  5386  0062F0                     __end_of_ModPrzCW4:
  5387                           ;rgl.c: 1805: void PropCO4(void)
  5388                           ;rgl.c: 1806: {
  5389  0062F0                     _PropCO4:
  5390  000000                     
  5391                           ;rgl.c: 1807: if(!rgl.nmod)
  5392  0062F0  0102               	movlb	_rgl shr (0+8)
  5393  0062F2  BB65               	btfsc	_rgl& (0+255),5,b
  5394  0062F4  EF34  F036         	goto	l641
  5395                           ;rgl.c: 1808: {
  5396  0062F8  0101               	movlb	_DtCO shr (0+8)
  5397  0062FA  B1B6               	btfsc	_DtCO& (0+255),0,b
  5398  0062FC  D01E               	goto	l486
  5399                           ;rgl.c: 1810: {
  5400  0062FE  C268  FFE8         	movff	_rgl+3,wreg
  5401  006302  0A03               	xorlw	3
  5402  006304  E102               	bnz	l487
  5403  006306  EF05  F036         	goto	L32
  5404                           ;rgl.c: 1812: {
  5405                           ;rgl.c: 1814: rgl.tmp_pwm=PWM.MGMOD;
  5406                           ;rgl.c: 1815: }
  5407  00630A                     l487:
  5408                           ;rgl.c: 1816: else
  5409  00630A  C268  FFE8         	movff	_rgl+3,wreg
  5410  00630E  0A02               	xorlw	2
  5411  006310  E102               	bnz	l490
  5412  006312  EF13  F036         	goto	L33
  5413                           ;rgl.c: 1818: {
  5414                           ;rgl.c: 1820: rgl.tmp_pwm=PWM.PROP1;
  5415                           ;rgl.c: 1821: }
  5416  006316                     l490:
  5417                           ;rgl.c: 1822: else
  5418  006316  C268  F000         	movff	_rgl+3,btemp
  5419  00631A  0400               	decf	btemp,w,c
  5420  00631C  E102               	bnz	l493
  5421  00631E  EF21  F036         	goto	L34
  5422                           ;rgl.c: 1824: {
  5423                           ;rgl.c: 1826: rgl.tmp_pwm=PWM.PROP2;
  5424                           ;rgl.c: 1827: }
  5425  006322                     l493:
  5426                           ;rgl.c: 1828: else
  5427  006322  C268  FFE8         	movff	_rgl+3,wreg
  5428  006326  0A80               	xorlw	128
  5429  006328  0F7F               	addlw	-129
  5430  00632A  E207               	bc	l486
  5431  00632C                     L35:
  5432                           ;rgl.c: 1830: {
  5433  00632C  C26E  FFE8         	movff	_rgl+9,wreg
  5434  006330  0101               	movlb	(_PWM+29) shr (0+8)
  5435  006332  61F8               	cpfslt	(_PWM+29)& (0+255),b
  5436  006334  D002               	goto	l486
  5437                           ;rgl.c: 2398: rgl.tmp_pwm=PWM.PROP3;
  5438  006336  C1F8  F26E         	movff	_PWM+29,_rgl+9
  5439  00633A                     l644:
  5440                           ;rgl.c: 1832: rgl.tmp_pwm=PWM.PROP3;
  5441  00633A                     l486:
  5442                           ;rgl.c: 1833: }
  5443  00633A  C26E  FFE8         	movff	_rgl+9,wreg
  5444  00633E  EFAD  F06A         	goto	_WriteOPWM
  5445                           ;rgl.c: 1836: }
  5446                           ;rgl.c: 1837: else WriteOPWM(PWM.MDMOD);
  5447                           ;rgl.c: 1838: }
  5448  006342                     __end_of_PropCO4:
  5449                           ;rgl.c: 1847: void StartCO2(void)
  5450                           ;rgl.c: 1848: {
  5451  006342                     _StartCO2:
  5452  000000                     
  5453                           ;rgl.c: 1849: unsigned char k;
  5454  006342  0102               	movlb	_rgl shr (0+8)
  5455  006344  A165               	btfss	_rgl& (0+255),0,b
  5456  006346  B365               	btfsc	_rgl& (0+255),1,b
  5457  006348  0012               	return	
  5458                           ;rgl.c: 1852: StartRTdS(3);
  5459  00634A  0E03               	movlw	3
  5460  00634C  EC51  F073         	call	_StartRTdS
  5461                           ;rgl.c: 1853: DtCO.dDCO=0;
  5462  006350  0101               	movlb	(_DtCO+9) shr (0+8)
  5463  006352  6BBF               	clrf	(_DtCO+9)& (0+255),b
  5464                           ;rgl.c: 1854: DtCO.indCO=0;
  5465  006354  0101               	movlb	(_DtCO+10) shr (0+8)
  5466  006356  6BC0               	clrf	(_DtCO+10)& (0+255),b
  5467                           ;rgl.c: 1855: DtCW.dDCW=0;
  5468  006358  0101               	movlb	(_DtCW+8) shr (0+8)
  5469  00635A  6BAF               	clrf	(_DtCW+8)& (0+255),b
  5470                           ;rgl.c: 1856: DtCW.indCW=0;
  5471  00635C  0101               	movlb	(_DtCW+10) shr (0+8)
  5472  00635E  6BB1               	clrf	(_DtCW+10)& (0+255),b
  5473                           ;rgl.c: 1857: rgl.fz=0;
  5474  006360  0102               	movlb	_rgl shr (0+8)
  5475  006362  9565               	bcf	_rgl& (0+255),2,b
  5476                           ;rgl.c: 1858: rgl.med_up=0;
  5477  006364  9765               	bcf	_rgl& (0+255),3,b
  5478                           ;rgl.c: 1859: rgl.fast_up=0;
  5479  006366  9965               	bcf	_rgl& (0+255),4,b
  5480                           ;rgl.c: 1863: if(PWM.MMAXCO>PWM.FIRSTPB)
  5481  006368  C1FA  FFE8         	movff	_PWM+31,wreg
  5482  00636C  0101               	movlb	(_PWM+26) shr (0+8)
  5483  00636E  61F5               	cpfslt	(_PWM+26)& (0+255),b
  5484  006370  D003               	goto	l501
  5485                           ;rgl.c: 1864: {
  5486  006372  C1F5  F26D         	movff	_PWM+26,_rgl+8
  5487                           ;rgl.c: 1866: }
  5488  006376  D002               	goto	l502
  5489  006378                     l501:
  5490                           ;rgl.c: 1867: else
  5491  006378  C1FA  F26D         	movff	_PWM+31,_rgl+8
  5492  00637C                     l502:
  5493                           ;rgl.c: 1870: }
  5494  00637C  0102               	movlb	(_rgl+7) shr (0+8)
  5495  00637E  6B6C               	clrf	(_rgl+7)& (0+255),b
  5496                           ;rgl.c: 1896: rgl.ytmp=0;
  5497  006380  6B6B               	clrf	(_rgl+6)& (0+255),b
  5498                           ;rgl.c: 1897: rgl.nmod=0;
  5499  006382  9B65               	bcf	_rgl& (0+255),5,b
  5500                           ;rgl.c: 1898: rgl.del1s=0;
  5501  006384  9D65               	bcf	_rgl& (0+255),6,b
  5502                           ;rgl.c: 1899: rgl.deln1=0;
  5503  006386  9F65               	bcf	_rgl& (0+255),7,b
  5504                           ;rgl.c: 1900: rgl.inv_mod=0;
  5505  006388  9166               	bcf	(_rgl+1)& (0+255),0,b
  5506                           ;rgl.c: 1901: }
  5507  00638A  0012               	return	
  5508  00638C                     __end_of_StartCO2:
  5509                           ;rgl.c: 1904: void StartMCW2(void)
  5510                           ;rgl.c: 1905: {
  5511  00638C                     _StartMCW2:
  5512  000000                     
  5513                           ;rgl.c: 1906: if(rgl.btco||rgl.btcw) return;
  5514  00638C  0102               	movlb	_rgl shr (0+8)
  5515  00638E  A165               	btfss	_rgl& (0+255),0,b
  5516  006390  B365               	btfsc	_rgl& (0+255),1,b
  5517  006392  0012               	return	
  5518                           ;rgl.c: 1907: StartRTdS(3);
  5519  006394  0E03               	movlw	3
  5520  006396  EC51  F073         	call	_StartRTdS
  5521                           ;rgl.c: 1908: DtCO.dDCO=0;
  5522  00639A  0101               	movlb	(_DtCO+9) shr (0+8)
  5523  00639C  6BBF               	clrf	(_DtCO+9)& (0+255),b
  5524                           ;rgl.c: 1909: DtCW.dDCW=0;
  5525  00639E  0101               	movlb	(_DtCW+8) shr (0+8)
  5526  0063A0  6BAF               	clrf	(_DtCW+8)& (0+255),b
  5527                           ;rgl.c: 1910: DtCO.indCO=0;
  5528  0063A2  0101               	movlb	(_DtCO+10) shr (0+8)
  5529  0063A4  6BC0               	clrf	(_DtCO+10)& (0+255),b
  5530                           ;rgl.c: 1911: DtCW.indCW=0;
  5531  0063A6  0101               	movlb	(_DtCW+10) shr (0+8)
  5532  0063A8  6BB1               	clrf	(_DtCW+10)& (0+255),b
  5533                           ;rgl.c: 1912: rgl.fz=0;
  5534  0063AA  0102               	movlb	_rgl shr (0+8)
  5535  0063AC  9565               	bcf	_rgl& (0+255),2,b
  5536                           ;rgl.c: 1913: FirstPCW2();
  5537  0063AE  D805               	call	_FirstPCW2	;wreg free
  5538                           ;rgl.c: 1914: rgl.srp=0;
  5539  0063B0  0102               	movlb	(_rgl+7) shr (0+8)
  5540  0063B2  6B6C               	clrf	(_rgl+7)& (0+255),b
  5541                           ;rgl.c: 1915: rgl.ytmp=0;
  5542  0063B4  6B6B               	clrf	(_rgl+6)& (0+255),b
  5543                           ;rgl.c: 1916: rgl.del1s=0;
  5544  0063B6  9D65               	bcf	_rgl& (0+255),6,b
  5545                           ;rgl.c: 1917: }
  5546  0063B8  0012               	return	
  5547  0063BA                     __end_of_StartMCW2:
  5548                           ;rgl.c: 1920: void FirstPCW2(void)
  5549                           ;rgl.c: 1921: {
  5550  0063BA                     _FirstPCW2:
  5551  000000                     
  5552                           ;rgl.c: 1922: if(PWM.MMAXCW>PWM.MGMOD)
  5553  0063BA  C1FB  FFE8         	movff	_PWM+32,wreg
  5554  0063BE  0101               	movlb	(_PWM+12) shr (0+8)
  5555  0063C0  61E7               	cpfslt	(_PWM+12)& (0+255),b
  5556  0063C2  D00B               	goto	l506
  5557                           ;rgl.c: 1923: {
  5558  0063C4  C1AE  FFE8         	movff	_DtCW+7,wreg
  5559  0063C8  0A80               	xorlw	128
  5560  0063CA  0F7F               	addlw	-129
  5561  0063CC  E303               	bnc	l507
  5562  0063CE  C1E7  F26D         	movff	_PWM+12,_rgl+8
  5563  0063D2  0012               	return	
  5564  0063D4                     l507:
  5565                           ;rgl.c: 1925: else rgl.xmod=PWM.FIRSTPB;
  5566  0063D4  C1F5  F26D         	movff	_PWM+26,_rgl+8
  5567                           ;rgl.c: 1926: }
  5568  0063D8  0012               	return	
  5569  0063DA                     l506:
  5570                           ;rgl.c: 1927: else
  5571  0063DA  C1AE  FFE8         	movff	_DtCW+7,wreg
  5572  0063DE  0A80               	xorlw	128
  5573  0063E0  0F7F               	addlw	-129
  5574  0063E2  E303               	bnc	l510
  5575  0063E4  C1FB  F26D         	movff	_PWM+32,_rgl+8
  5576  0063E8  0012               	return	
  5577  0063EA                     l510:
  5578                           ;rgl.c: 1930: else
  5579  0063EA  C1FB  FFE8         	movff	_PWM+32,wreg
  5580  0063EE  0101               	movlb	(_PWM+26) shr (0+8)
  5581  0063F0  61F5               	cpfslt	(_PWM+26)& (0+255),b
  5582  0063F2  D003               	goto	l512
  5583  0063F4  C1F5  F26D         	movff	_PWM+26,_rgl+8
  5584  0063F8  0012               	return	
  5585  0063FA                     l512:
  5586                           ;rgl.c: 1933: else rgl.xmod=PWM.MMAXCW;
  5587  0063FA  C1FB  F26D         	movff	_PWM+32,_rgl+8
  5588                           ;rgl.c: 1934: }
  5589  0063FE  0012               	return	
  5590  006400                     __end_of_FirstPCW2:
  5591                           ;rgl.c: 1974: void ClrMod2(void)
  5592                           ;rgl.c: 1975: {
  5593  006400                     _ClrMod2:
  5594  000000                     
  5595                           ;rgl.c: 1976: rgl.fz=0;
  5596  006400  0102               	movlb	_rgl shr (0+8)
  5597  006402  9565               	bcf	_rgl& (0+255),2,b
  5598                           ;rgl.c: 1977: rgl.xmod=PWM.BufPWM;
  5599  006404  C1DC  F26D         	movff	_PWM+1,_rgl+8
  5600                           ;rgl.c: 1978: rgl.srp=0;
  5601  006408  6B6C               	clrf	(_rgl+7)& (0+255),b
  5602                           ;rgl.c: 1979: rgl.ytmp=0;
  5603  00640A  6B6B               	clrf	(_rgl+6)& (0+255),b
  5604                           ;rgl.c: 1980: rgl.del1s=0;
  5605  00640C  9D65               	bcf	_rgl& (0+255),6,b
  5606                           ;rgl.c: 1981: }
  5607  00640E  0012               	return	
  5608  006410                     __end_of_ClrMod2:
  5609                           ;rgl.c: 1984: void ModToCW2(void)
  5610                           ;rgl.c: 1985: {
  5611  006410                     _ModToCW2:
  5612  000000                     
  5613                           ;rgl.c: 1986: rgl.btcw=1;
  5614  006410  0102               	movlb	_rgl shr (0+8)
  5615  006412  8365               	bsf	_rgl& (0+255),1,b
  5616                           ;rgl.c: 1987: if(rgl.btco)
  5617  006414  A165               	btfss	_rgl& (0+255),0,b
  5618  006416  0012               	return	
  5619                           ;rgl.c: 1988: {
  5620  006418  9165               	bcf	_rgl& (0+255),0,b
  5621                           ;rgl.c: 1990: ClrMod2();
  5622  00641A  D7F2               	goto	_ClrMod2	;wreg free
  5623                           ;rgl.c: 1991: }
  5624  00641C                     __end_of_ModToCW2:
  5625                           ;rgl.c: 1995: void ModToCO2(void)
  5626                           ;rgl.c: 1996: {
  5627  00641C                     _ModToCO2:
  5628  000000                     
  5629                           ;rgl.c: 1997: rgl.btco=1;
  5630  00641C  0102               	movlb	_rgl shr (0+8)
  5631  00641E  8165               	bsf	_rgl& (0+255),0,b
  5632                           ;rgl.c: 1998: if(rgl.btcw)
  5633  006420  A365               	btfss	_rgl& (0+255),1,b
  5634  006422  0012               	return	
  5635                           ;rgl.c: 1999: {
  5636  006424  9365               	bcf	_rgl& (0+255),1,b
  5637                           ;rgl.c: 2001: ClrMod2();
  5638  006426  D7EC               	goto	_ClrMod2	;wreg free
  5639                           ;rgl.c: 2002: }
  5640  006428                     __end_of_ModToCO2:
  5641                           ;rgl.c: 2006: void IncConstCW2(void)
  5642                           ;rgl.c: 2007: {
  5643  006428                     _IncConstCW2:
  5644  000000                     
  5645                           ;rgl.c: 2008: if(!TFrosnie(0))
  5646  006428  0E00               	movlw	0
  5647  00642A  ECE2  F036         	call	_TFrosnie
  5648  00642E  E208               	bc	l520
  5649                           ;rgl.c: 2009: {
  5650  006430  ECAC  F036         	call	_Tstoi	;wreg free
  5651  006434  0102               	movlb	(_rgl+6) shr (0+8)
  5652  006436  E302               	bnc	L22
  5653  006438  2B6B               	incf	(_rgl+6)& (0+255),f,b
  5654  00643A  0C01               	retlw	1
  5655                           ;rgl.c: 2011: else rgl.ytmp=0;
  5656  00643C                     L22:
  5657  00643C  6B6B               	clrf	(_rgl+6)& (0+255),b
  5658                           ;rgl.c: 2012: }
  5659  00643E  0012               	return	
  5660  006440                     l520:
  5661                           ;rgl.c: 2013: else rgl.ytmp=0;
  5662  006440  0102               	movlb	(_rgl+6) shr (0+8)
  5663  006442  6B6B               	clrf	(_rgl+6)& (0+255),b
  5664                           ;rgl.c: 2014: }
  5665  006444  0012               	return	
  5666  006446                     __end_of_IncConstCW2:
  5667                           ;rgl.c: 2016: void IncConstCO2(void)
  5668                           ;rgl.c: 2017: {
  5669  006446                     _IncConstCO2:
  5670  000000                     
  5671                           ;rgl.c: 2018: if(Tstoi()) rgl.ytmp++;
  5672  006446  ECAC  F036         	call	_Tstoi	;wreg free
  5673  00644A  0102               	movlb	(_rgl+6) shr (0+8)
  5674  00644C  E302               	bnc	L23
  5675  00644E  2B6B               	incf	(_rgl+6)& (0+255),f,b
  5676  006450  0C01               	retlw	1
  5677                           ;rgl.c: 2019: else rgl.ytmp=0;
  5678  006452                     L23:
  5679  006452  6B6B               	clrf	(_rgl+6)& (0+255),b
  5680                           ;rgl.c: 2020: }
  5681  006454  0012               	return	
  5682  006456                     __end_of_IncConstCO2:
  5683                           ;rgl.c: 2023: void ReadDataCO2(void)
  5684                           ;rgl.c: 2024: {
  5685  006456                     _ReadDataCO2:
  5686  000000                     
  5687                           ;rgl.c: 2025: rgl.x_t=DtCO.DCO;
  5688  006456  C1BE  F267         	movff	_DtCO+8,_rgl+2
  5689                           ;rgl.c: 2026: rgl.x_dt=DtCO.dDCO;
  5690  00645A  C1BF  F269         	movff	_DtCO+9,_rgl+4
  5691                           ;rgl.c: 2027: }
  5692  00645E  0012               	return	
  5693  006460                     __end_of_ReadDataCO2:
  5694                           ;rgl.c: 2030: void ReadDataCW2(void)
  5695                           ;rgl.c: 2031: {
  5696  006460                     _ReadDataCW2:
  5697  000000                     
  5698                           ;rgl.c: 2032: rgl.x_t=DtCW.DCW;
  5699  006460  C1AE  F267         	movff	_DtCW+7,_rgl+2
  5700                           ;rgl.c: 2033: rgl.x_f=DtCO.DCO;
  5701  006464  C1BE  F268         	movff	_DtCO+8,_rgl+3
  5702                           ;rgl.c: 2034: rgl.x_dt=DtCW.dDCW;
  5703  006468  C1AF  F269         	movff	_DtCW+8,_rgl+4
  5704                           ;rgl.c: 2035: rgl.x_df=DtCO.dDCO;
  5705  00646C  C1BF  F26A         	movff	_DtCO+9,_rgl+5
  5706                           ;rgl.c: 2036: }
  5707  006470  0012               	return	
  5708  006472                     __end_of_ReadDataCW2:
  5709                           ;rgl.c: 2039: void ModZgCW2(void)
  5710                           ;rgl.c: 2040: {
  5711  006472                     _ModZgCW2:
  5712  000000                     
  5713                           ;rgl.c: 2041: signed long m;
  5714  006472  0E0A               	movlw	10
  5715  006474  ECB3  F036         	call	_Tnizsza
  5716  006478  E304               	bnc	l530
  5717                           ;rgl.c: 2046: {
  5718  00647A  0E14               	movlw	20
  5719  00647C  CFE8 FEDC          	movff	wreg,F1886
  5720                           ;rgl.c: 2048: FirstPCW2();
  5721  006480  DF9C               	call	_FirstPCW2	;wreg free
  5722  006482                     l530:
  5723                           ;rgl.c: 2049: }
  5724  006482  0102               	movlb	_rgl shr (0+8)
  5725  006484  A565               	btfss	_rgl& (0+255),2,b
  5726  006486  D00D               	goto	l531
  5727                           ;rgl.c: 2051: {
  5728  006488  0E02               	movlw	2
  5729  00648A  ECB3  F036         	call	_Tnizsza
  5730  00648E  A0D8               	btfss	status,0,c
  5731  006490  0012               	return	
  5732                           ;rgl.c: 2053: {
  5733  006492  C1DC  F26D         	movff	_PWM+1,_rgl+8
  5734                           ;rgl.c: 2055: rgl.srp=0;
  5735  006496  0102               	movlb	(_rgl+7) shr (0+8)
  5736  006498  6B6C               	clrf	(_rgl+7)& (0+255),b
  5737                           ;rgl.c: 2056: rgl.ytmp=0;
  5738  00649A  6B6B               	clrf	(_rgl+6)& (0+255),b
  5739                           ;rgl.c: 2057: rgl.del1s=0;
  5740  00649C  9D65               	bcf	_rgl& (0+255),6,b
  5741                           ;rgl.c: 2058: pop=0;
  5742  00649E  010E               	movlb	F1886 shr (0+8)
  5743  0064A0  6BDC               	clrf	F1886& (0+255),b
  5744                           ;rgl.c: 2059: }
  5745                           ;rgl.c: 2060: else return;
  5746  0064A2                     l531:
  5747                           ;rgl.c: 2061: }
  5748  0064A2  0E01               	movlw	1
  5749  0064A4  ECB3  F036         	call	_Tnizsza
  5750  0064A8  E229               	bc	l534
  5751                           ;rgl.c: 2063: {
  5752  0064AA  0102               	movlb	_rgl shr (0+8)
  5753  0064AC  8565               	bsf	_rgl& (0+255),2,b
  5754                           ;rgl.c: 2065: rgl.fast_up=0;
  5755  0064AE  9965               	bcf	_rgl& (0+255),4,b
  5756                           ;rgl.c: 2066: rgl.med_up=0;
  5757  0064B0  9765               	bcf	_rgl& (0+255),3,b
  5758                           ;rgl.c: 2067: rgl.srp=PWM.BufPWM+pop;
  5759  0064B2  CEDC  FFE8         	movff	F1886,wreg
  5760  0064B6  0101               	movlb	(_PWM+1) shr (0+8)
  5761  0064B8  25DC               	addwf	(_PWM+1)& (0+255),w,b
  5762  0064BA  CFE8 F26C          	movff	wreg,_rgl+7
  5763                           ;rgl.c: 2068: rgl.xmod=PWM.BufPWM+pop;
  5764  0064BE  CEDC  FFE8         	movff	F1886,wreg
  5765  0064C2  25DC               	addwf	(_PWM+1)& (0+255),w,b
  5766  0064C4  CFE8 F26D          	movff	wreg,_rgl+8
  5767                           ;rgl.c: 2069: pop=0;
  5768  0064C8  010E               	movlb	F1886 shr (0+8)
  5769  0064CA  6BDC               	clrf	F1886& (0+255),b
  5770                           ;rgl.c: 2070: if(PWM.MMAXCW>PWM.MGMOD)
  5771  0064CC  C1FB  FFE8         	movff	_PWM+32,wreg
  5772  0064D0  0101               	movlb	(_PWM+12) shr (0+8)
  5773  0064D2  61E7               	cpfslt	(_PWM+12)& (0+255),b
  5774  0064D4  D009               	goto	l535
  5775                           ;rgl.c: 2071: {
  5776  0064D6  C26D  FFE8         	movff	_rgl+8,wreg
  5777  0064DA  61E7               	cpfslt	(_PWM+12)& (0+255),b
  5778  0064DC  0012               	return	
  5779                           ;rgl.c: 2073: {
  5780  0064DE  C1E7  F26C         	movff	_PWM+12,_rgl+7
  5781                           ;rgl.c: 2075: rgl.xmod=PWM.MGMOD;
  5782  0064E2  C1E7  F26D         	movff	_PWM+12,_rgl+8
  5783                           ;rgl.c: 2076: }
  5784  0064E6  0012               	return	
  5785  0064E8                     l535:
  5786                           ;rgl.c: 2078: else
  5787  0064E8  C26D  FFE8         	movff	_rgl+8,wreg
  5788  0064EC  0101               	movlb	(_PWM+32) shr (0+8)
  5789  0064EE  61FB               	cpfslt	(_PWM+32)& (0+255),b
  5790  0064F0  0012               	return	
  5791                           ;rgl.c: 2081: {
  5792  0064F2  C1FB  F26C         	movff	_PWM+32,_rgl+7
  5793                           ;rgl.c: 2083: rgl.xmod=PWM.MMAXCW;
  5794  0064F6  C1FB  F26D         	movff	_PWM+32,_rgl+8
  5795                           ;rgl.c: 2084: }
  5796  0064FA  0012               	return	
  5797  0064FC                     l534:
  5798                           ;rgl.c: 2087: }
  5799  0064FC  C1E4  FFE8         	movff	_PWM+9,wreg
  5800  006500  0102               	movlb	(_rgl+8) shr (0+8)
  5801  006502  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  5802  006504  E318               	bnc	l539
  5803  006506  0E0A               	movlw	10
  5804  006508  6E02               	movwf	btemp+2,c
  5805  00650A  6A03               	clrf	btemp+3,c
  5806  00650C  C1E4  FFE8         	movff	_PWM+9,wreg
  5807  006510  C26D  F000         	movff	_rgl+8,btemp
  5808  006514  6A01               	clrf	btemp+1,c
  5809  006516  5E00               	subwf	btemp,f,c
  5810  006518  0E00               	movlw	0
  5811  00651A  5A01               	subwfb	btemp+1,f,c
  5812  00651C  EC92  F078         	call	awmul
  5813  006520  0100               	movlb	__Lparam shr (0+8)
  5814  006522  C004  F0E9         	movff	btemp+4,?a_ModZgCW2
  5815  006526  C005  F0EA         	movff	btemp+5,?a_ModZgCW2+1
  5816  00652A  0E00               	movlw	0
  5817  00652C  BFEA               	btfsc	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),7,b
  5818  00652E  0EFF               	movlw	-1
  5819  006530  6FEB               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5820  006532  6FEC               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5821  006534  D005               	goto	l540
  5822  006536                     l539:
  5823                           ;rgl.c: 2089: else m=0;
  5824  006536  0100               	movlb	__Lparam shr (0+8)
  5825  006538  6BE9               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  5826  00653A  6BEA               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  5827  00653C  6BEB               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5828  00653E  6BEC               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5829  006540                     l540:
  5830                           ;rgl.c: 2090: m=m/(DtCW.MAD_CW-DtCW.DAD_CW);
  5831  006540  C1B5  FFE8         	movff	_DtCW+14,wreg
  5832  006544  C1B4  F000         	movff	_DtCW+13,btemp
  5833  006548  5C00               	subwf	btemp,w,c
  5834  00654A  6E04               	movwf	btemp+4,c
  5835  00654C  6A05               	clrf	btemp+5,c
  5836  00654E  A0D8               	btfss	status,0,c
  5837  006550  0605               	decf	btemp+5,f,c
  5838  006552  6A06               	clrf	btemp+6,c
  5839  006554  BE05               	btfsc	btemp+5,7,c
  5840  006556  0606               	decf	btemp+6,f,c
  5841  006558  5006               	movf	btemp+6,w,c
  5842  00655A  6E07               	movwf	btemp+7,c
  5843  00655C  0EE9               	movlw	low ?a_ModZgCW2
  5844  00655E  6EE9               	movwf	fsr0l,c
  5845  006560  0E00               	movlw	high ?a_ModZgCW2
  5846  006562  6EEA               	movwf	fsr0h,c
  5847  006564  ECB8  F078         	call	aldiv_f
  5848                           ;rgl.c: 2091: m=m*(DtCW.AC_CW-DtCW.DAD_CW);
  5849  006568  C1B5  FFE8         	movff	_DtCW+14,wreg
  5850  00656C  C1B3  F000         	movff	_DtCW+12,btemp
  5851  006570  5C00               	subwf	btemp,w,c
  5852  006572  6E04               	movwf	btemp+4,c
  5853  006574  6A05               	clrf	btemp+5,c
  5854  006576  A0D8               	btfss	status,0,c
  5855  006578  0605               	decf	btemp+5,f,c
  5856  00657A  6A06               	clrf	btemp+6,c
  5857  00657C  BE05               	btfsc	btemp+5,7,c
  5858  00657E  0606               	decf	btemp+6,f,c
  5859  006580  5006               	movf	btemp+6,w,c
  5860  006582  6E07               	movwf	btemp+7,c
  5861  006584  0EE9               	movlw	low ?a_ModZgCW2
  5862  006586  6EE9               	movwf	fsr0l,c
  5863  006588  0E00               	movlw	high ?a_ModZgCW2
  5864  00658A  6EEA               	movwf	fsr0h,c
  5865  00658C  ECAE  F078         	call	almul_f
  5866                           ;rgl.c: 2092: if(m<0) m=0;
  5867  006590  0100               	movlb	__Lparam shr (0+8)
  5868  006592  AFEC               	btfss	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),7,b
  5869  006594  D004               	goto	l541
  5870  006596  6BE9               	clrf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  5871  006598  6BEA               	clrf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  5872  00659A  6BEB               	clrf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5873  00659C  6BEC               	clrf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5874  00659E                     l541:
  5875                           ;rgl.c: 2093: m=m/10+PWM.MDMOD;
  5876  00659E  0E0A               	movlw	10
  5877  0065A0  6E04               	movwf	btemp+4,c
  5878  0065A2  6A05               	clrf	btemp+5,c
  5879  0065A4  6A06               	clrf	btemp+6,c
  5880  0065A6  6A07               	clrf	btemp+7,c
  5881  0065A8  C0E9  F000         	movff	?a_ModZgCW2,btemp
  5882  0065AC  C0EA  F001         	movff	?a_ModZgCW2+1,btemp+1
  5883  0065B0  C0EB  F002         	movff	?a_ModZgCW2+2,btemp+2
  5884  0065B4  C0EC  F003         	movff	?a_ModZgCW2+3,btemp+3
  5885  0065B8  EC10  F078         	call	aldiv
  5886  0065BC  C1E4  FFE8         	movff	_PWM+9,wreg
  5887  0065C0  2400               	addwf	btemp,w,c
  5888  0065C2  0100               	movlb	__Lparam shr (0+8)
  5889  0065C4  6FE9               	movwf	?a_ModZgCW2^(__Lparam& (0+65280)),b
  5890  0065C6  0E00               	movlw	0
  5891  0065C8  2001               	addwfc	btemp+1,w,c
  5892  0065CA  6FEA               	movwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),b
  5893  0065CC  0E00               	movlw	0
  5894  0065CE  2002               	addwfc	btemp+2,w,c
  5895  0065D0  6FEB               	movwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),b
  5896  0065D2  0E00               	movlw	0
  5897  0065D4  2003               	addwfc	btemp+3,w,c
  5898  0065D6  6FEC               	movwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),b
  5899                           ;rgl.c: 2094: if(m>0xff)
  5900  0065D8  51EC               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  5901  0065DA  0A80               	xorlw	128
  5902  0065DC  0F80               	addlw	128
  5903  0065DE  E108               	bnz	u4225
  5904  0065E0  0E00               	movlw	0
  5905  0065E2  5DEB               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  5906  0065E4  E105               	bnz	u4225
  5907  0065E6  0E01               	movlw	1
  5908  0065E8  5DEA               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  5909  0065EA  E102               	bnz	u4225
  5910  0065EC  0E00               	movlw	0
  5911  0065EE  5DE9               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5912  0065F0                     u4225:
  5913                           ;rgl.c: 2095: {
  5914  0065F0  0102               	movlb	_rgl shr (0+8)
  5915  0065F2  E304               	bnc	L24
  5916  0065F4  9565               	bcf	_rgl& (0+255),2,b
  5917                           ;rgl.c: 2097: rgl.tmp_pwm=rgl.xmod;
  5918  0065F6  C26D  F26E         	movff	_rgl+8,_rgl+9
  5919                           ;rgl.c: 2098: return;
  5920  0065FA  0012               	return	
  5921                           ;rgl.c: 2099: }
  5922  0065FC                     L24:
  5923  0065FC  A565               	btfss	_rgl& (0+255),2,b
  5924  0065FE  D01C               	goto	l543
  5925  006600  C26D  F000         	movff	_rgl+8,btemp
  5926  006604  6A01               	clrf	btemp+1,c
  5927  006606  6A02               	clrf	btemp+2,c
  5928  006608  6A03               	clrf	btemp+3,c
  5929  00660A  0100               	movlb	__Lparam shr (0+8)
  5930  00660C  51EC               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  5931  00660E  0A80               	xorlw	128
  5932  006610  6E04               	movwf	btemp+4,c
  5933  006612  5003               	movf	btemp+3,w,c
  5934  006614  0A80               	xorlw	128
  5935  006616  5C04               	subwf	btemp+4,w,c
  5936  006618  E108               	bnz	u4245
  5937  00661A  5002               	movf	btemp+2,w,c
  5938  00661C  5DEB               	subwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  5939  00661E  E105               	bnz	u4245
  5940  006620  5001               	movf	btemp+1,w,c
  5941  006622  5DEA               	subwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  5942  006624  E102               	bnz	u4245
  5943  006626  5000               	movf	btemp,w,c
  5944  006628  5DE9               	subwf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5945  00662A                     u4245:
  5946  00662A  E206               	bc	l543
  5947                           ;rgl.c: 2101: rgl.srp=(rgl.xmod-m);
  5948  00662C  0100               	movlb	__Lparam shr (0+8)
  5949  00662E  51E9               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5950  006630  0102               	movlb	(_rgl+8) shr (0+8)
  5951  006632  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  5952  006634  CFE8 F26C          	movff	wreg,_rgl+7
  5953  006638                     l543:
  5954                           ;rgl.c: 2102: m+=rgl.srp;
  5955  006638  C26C  FFE8         	movff	_rgl+7,wreg
  5956  00663C  0100               	movlb	__Lparam shr (0+8)
  5957  00663E  27E9               	addwf	?a_ModZgCW2^(__Lparam& (0+65280)),f,b
  5958  006640  0E01               	movlw	1
  5959  006642  B0D8               	btfsc	status,0,c
  5960  006644  27EA               	addwf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),f,b
  5961  006646  B0D8               	btfsc	status,0,c
  5962  006648  27EB               	addwf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),f,b
  5963  00664A  B0D8               	btfsc	status,0,c
  5964  00664C  27EC               	addwf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),f,b
  5965                           ;rgl.c: 2103: if(m>rgl.xmod) p=rgl.xmod;
  5966  00664E  C26D  F000         	movff	_rgl+8,btemp
  5967  006652  6A01               	clrf	btemp+1,c
  5968  006654  6A02               	clrf	btemp+2,c
  5969  006656  6A03               	clrf	btemp+3,c
  5970  006658  5003               	movf	btemp+3,w,c
  5971  00665A  0A80               	xorlw	128
  5972  00665C  6E04               	movwf	btemp+4,c
  5973  00665E  51EC               	movf	(?a_ModZgCW2+3)^(__Lparam& (0+65280)),w
  5974  006660  0A80               	xorlw	128
  5975  006662  5C04               	subwf	btemp+4,w,c
  5976  006664  E108               	bnz	u4265
  5977  006666  51EB               	movf	(?a_ModZgCW2+2)^(__Lparam& (0+65280)),w
  5978  006668  5C02               	subwf	btemp+2,w,c
  5979  00666A  E105               	bnz	u4265
  5980  00666C  51EA               	movf	(?a_ModZgCW2+1)^(__Lparam& (0+65280)),w
  5981  00666E  5C01               	subwf	btemp+1,w,c
  5982  006670  E102               	bnz	u4265
  5983  006672  51E9               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5984  006674  5C00               	subwf	btemp,w,c
  5985  006676                     u4265:
  5986  006676  E203               	bc	l544
  5987  006678  C26D  FFD9         	movff	_rgl+8,fsr2l
  5988  00667C  D003               	goto	l545
  5989  00667E                     l544:
  5990                           ;rgl.c: 2104: else p=m;
  5991  00667E  0100               	movlb	__Lparam shr (0+8)
  5992  006680  51E9               	movf	?a_ModZgCW2^(__Lparam& (0+65280)),w
  5993  006682  6ED9               	movwf	fsr2l,c
  5994  006684                     l545:
  5995                           ;rgl.c: 2105: rgl.fz=0;
  5996  006684  0102               	movlb	_rgl shr (0+8)
  5997  006686  9565               	bcf	_rgl& (0+255),2,b
  5998                           ;rgl.c: 2106: rgl.tmp_pwm=p;
  5999  006688  CFD9 F26E          	movff	fsr2l,_rgl+9
  6000                           ;rgl.c: 2107: }
  6001  00668C  0012               	return	
  6002  00668E                     __end_of_ModZgCW2:
  6003                           ;rgl.c: 2110: void ModDkCW2(void)
  6004                           ;rgl.c: 2111: {
  6005  00668E                     _ModDkCW2:
  6006  000000                     
  6007                           ;rgl.c: 2112: signed long m;
  6008  00668E  0102               	movlb	_rgl shr (0+8)
  6009  006690  A565               	btfss	_rgl& (0+255),2,b
  6010  006692  0012               	return	
  6011                           ;rgl.c: 2117: ada=DtCW.AC_CW-DtCW.DAD_CW;
  6012  006694  C1B5  FFE8         	movff	_DtCW+14,wreg
  6013  006698  0101               	movlb	(_DtCW+12) shr (0+8)
  6014  00669A  5DB3               	subwf	(_DtCW+12)& (0+255),w,b
  6015  00669C  6ED9               	movwf	fsr2l,c
  6016                           ;rgl.c: 2118: k=9;
  6017  00669E  0E09               	movlw	9
  6018  0066A0  6EE1               	movwf	fsr1l,c
  6019                           ;rgl.c: 2119: if(ada<0) k=8;
  6020  0066A2  AED9               	btfss	fsr2l,7,c
  6021  0066A4  D002               	goto	l548
  6022  0066A6  0E08               	movlw	8
  6023  0066A8  6EE1               	movwf	fsr1l,c
  6024  0066AA                     l548:
  6025                           ;rgl.c: 2120: m=rgl.srp+k*ada;
  6026  0066AA  CFD9 F002          	movff	fsr2l,btemp+2
  6027  0066AE  6A03               	clrf	btemp+3,c
  6028  0066B0  BE02               	btfsc	btemp+2,7,c
  6029  0066B2  0603               	decf	btemp+3,f,c
  6030  0066B4  CFE1 F000          	movff	fsr1l,btemp
  6031  0066B8  6A01               	clrf	btemp+1,c
  6032  0066BA  EC92  F078         	call	awmul
  6033  0066BE  C26C  FFE8         	movff	_rgl+7,wreg
  6034  0066C2  2404               	addwf	btemp+4,w,c
  6035  0066C4  6E00               	movwf	btemp,c
  6036  0066C6  0E00               	movlw	0
  6037  0066C8  2005               	addwfc	btemp+5,w,c
  6038  0066CA  6E01               	movwf	btemp+1,c
  6039  0066CC  0100               	movlb	__Lparam shr (0+8)
  6040  0066CE  C000  F0E9         	movff	btemp,?a_ModDkCW2
  6041  0066D2  C001  F0EA         	movff	btemp+1,?a_ModDkCW2+1
  6042  0066D6  0E00               	movlw	0
  6043  0066D8  BFEA               	btfsc	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),7,b
  6044  0066DA  0EFF               	movlw	-1
  6045  0066DC  6FEB               	movwf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),b
  6046  0066DE  6FEC               	movwf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),b
  6047                           ;rgl.c: 2121: if(m>rgl.xmod) p=rgl.xmod;
  6048  0066E0  C26D  F000         	movff	_rgl+8,btemp
  6049  0066E4  6A01               	clrf	btemp+1,c
  6050  0066E6  6A02               	clrf	btemp+2,c
  6051  0066E8  6A03               	clrf	btemp+3,c
  6052  0066EA  5003               	movf	btemp+3,w,c
  6053  0066EC  0A80               	xorlw	128
  6054  0066EE  6E04               	movwf	btemp+4,c
  6055  0066F0  51EC               	movf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),w
  6056  0066F2  0A80               	xorlw	128
  6057  0066F4  5C04               	subwf	btemp+4,w,c
  6058  0066F6  E108               	bnz	u4295
  6059  0066F8  51EB               	movf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),w
  6060  0066FA  5C02               	subwf	btemp+2,w,c
  6061  0066FC  E105               	bnz	u4295
  6062  0066FE  51EA               	movf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),w
  6063  006700  5C01               	subwf	btemp+1,w,c
  6064  006702  E102               	bnz	u4295
  6065  006704  51E9               	movf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  6066  006706  5C00               	subwf	btemp,w,c
  6067  006708                     u4295:
  6068  006708  E203               	bc	l549
  6069  00670A  C26D  FFD9         	movff	_rgl+8,fsr2l
  6070  00670E  D01C               	goto	l550
  6071  006710                     l549:
  6072                           ;rgl.c: 2122: else
  6073  006710  C1E4  F000         	movff	_PWM+9,btemp
  6074  006714  6A01               	clrf	btemp+1,c
  6075  006716  6A02               	clrf	btemp+2,c
  6076  006718  6A03               	clrf	btemp+3,c
  6077  00671A  0100               	movlb	__Lparam shr (0+8)
  6078  00671C  51EC               	movf	(?a_ModDkCW2+3)^(__Lparam& (0+65280)),w
  6079  00671E  0A80               	xorlw	128
  6080  006720  6E04               	movwf	btemp+4,c
  6081  006722  5003               	movf	btemp+3,w,c
  6082  006724  0A80               	xorlw	128
  6083  006726  5C04               	subwf	btemp+4,w,c
  6084  006728  E108               	bnz	u4305
  6085  00672A  5002               	movf	btemp+2,w,c
  6086  00672C  5DEB               	subwf	(?a_ModDkCW2+2)^(__Lparam& (0+65280)),w
  6087  00672E  E105               	bnz	u4305
  6088  006730  5001               	movf	btemp+1,w,c
  6089  006732  5DEA               	subwf	(?a_ModDkCW2+1)^(__Lparam& (0+65280)),w
  6090  006734  E102               	bnz	u4305
  6091  006736  5000               	movf	btemp,w,c
  6092  006738  5DE9               	subwf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  6093  00673A                     u4305:
  6094  00673A  E203               	bc	l551
  6095  00673C  C1E4  FFD9         	movff	_PWM+9,fsr2l
  6096  006740  D003               	goto	l550
  6097  006742                     l551:
  6098                           ;rgl.c: 2124: else p=m;
  6099  006742  0100               	movlb	__Lparam shr (0+8)
  6100  006744  51E9               	movf	?a_ModDkCW2^(__Lparam& (0+65280)),w
  6101  006746  6ED9               	movwf	fsr2l,c
  6102  006748                     l550:
  6103                           ;rgl.c: 2125: rgl.tmp_pwm=p;
  6104  006748  CFD9 F26E          	movff	fsr2l,_rgl+9
  6105                           ;rgl.c: 2126: }
  6106  00674C  0012               	return	
  6107  00674E                     __end_of_ModDkCW2:
  6108                           ;rgl.c: 2131: void ModPruCW2(void)
  6109                           ;rgl.c: 2132: {
  6110  00674E                     _ModPruCW2:
  6111  000000                     
  6112                           ;rgl.c: 2133: static unsigned char l,m,o,p,q,r,s
      +                          ;
  6113  00674E  0102               	movlb	_rgl shr (0+8)
  6114  006750  B565               	btfsc	_rgl& (0+255),2,b
  6115  006752  D0AF               	goto	l554
  6116                           ;rgl.c: 2137: {
  6117  006754  010E               	movlb	F1893 shr (0+8)
  6118  006756  6BDD               	clrf	F1893& (0+255),b
  6119                           ;rgl.c: 2139: m=0;
  6120  006758  010E               	movlb	F1894 shr (0+8)
  6121  00675A  6BDE               	clrf	F1894& (0+255),b
  6122                           ;rgl.c: 2140: o=0;
  6123  00675C  010E               	movlb	F1895 shr (0+8)
  6124  00675E  6BDF               	clrf	F1895& (0+255),b
  6125                           ;rgl.c: 2141: p=0;
  6126  006760  010E               	movlb	F1896 shr (0+8)
  6127  006762  6BE0               	clrf	F1896& (0+255),b
  6128                           ;rgl.c: 2142: if(q<255) q++;
  6129  006764  CEE1  F000         	movff	F1897,btemp
  6130  006768  2800               	incf	btemp,w,c
  6131  00676A  E002               	bz	l555
  6132  00676C  010E               	movlb	F1897 shr (0+8)
  6133  00676E  2BE1               	incf	F1897& (0+255),f,b
  6134  006770                     l555:
  6135                           ;rgl.c: 2143: if(s<255) s++;
  6136  006770  CEE3  F000         	movff	F1899,btemp
  6137  006774  2800               	incf	btemp,w,c
  6138  006776  E002               	bz	l556
  6139  006778  010E               	movlb	F1899 shr (0+8)
  6140  00677A  2BE3               	incf	F1899& (0+255),f,b
  6141  00677C                     l556:
  6142                           ;rgl.c: 2144: if(DtCW._newPCW) s=0;
  6143  00677C  0101               	movlb	(_DtCW+1) shr (0+8)
  6144  00677E  A1A8               	btfss	(_DtCW+1)& (0+255),0,b
  6145  006780  D002               	goto	l557
  6146  006782  010E               	movlb	F1899 shr (0+8)
  6147  006784  6BE3               	clrf	F1899& (0+255),b
  6148  006786                     l557:
  6149                           ;rgl.c: 2145: if(Tnizsza(0))
  6150  006786  0E00               	movlw	0
  6151  006788  DAEE               	call	_Tnizsza
  6152  00678A  A0D8               	btfss	status,0,c
  6153  00678C  0012               	return	
  6154                           ;rgl.c: 2146: {
  6155  00678E  0E0A               	movlw	10
  6156  006790  DAEA               	call	_Tnizsza
  6157  006792  B0D8               	btfsc	status,0,c
  6158  006794  0012               	return	
  6159                           ;rgl.c: 2148: {
  6160  006796  0100               	movlb	__Lparam shr (0+8)
  6161  006798  6BE9               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6162                           ;rgl.c: 2150: if((Trosnie(1)||TFrosnie(1))&&s>=1
      +                          )
  6163  00679A  0E01               	movlw	1
  6164  00679C  DAB5               	call	_Trosnie
  6165  00679E  E203               	bc	u4390
  6166  0067A0  0E01               	movlw	1
  6167  0067A2  DB10               	call	_TFrosnie
  6168  0067A4  E310               	bnc	l560
  6169  0067A6                     u4390:
  6170  0067A6  0E00               	movlw	0
  6171  0067A8  010E               	movlb	F1899 shr (0+8)
  6172  0067AA  65E3               	cpfsgt	F1899& (0+255),b
  6173  0067AC  D00C               	goto	l560
  6174                           ;rgl.c: 2151: {
  6175  0067AE  6BE3               	clrf	F1899& (0+255),b
  6176                           ;rgl.c: 2153: k=10;
  6177  0067B0  0E0A               	movlw	10
  6178  0067B2  0100               	movlb	__Lparam shr (0+8)
  6179  0067B4  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6180                           ;rgl.c: 2154: if(Trosnie(2)||TFrosnie(2)) k=8;
  6181  0067B6  0E02               	movlw	2
  6182  0067B8  DAA7               	call	_Trosnie
  6183  0067BA  E203               	bc	u4440
  6184  0067BC  0E02               	movlw	2
  6185  0067BE  DB02               	call	_TFrosnie
  6186  0067C0  E31E               	bnc	l562
  6187  0067C2                     u4440:
  6188  0067C2  0E08               	movlw	8
  6189  0067C4  D009               	goto	L5
  6190                           ;rgl.c: 2155: }
  6191  0067C6                     l560:
  6192                           ;rgl.c: 2156: else
  6193  0067C6  0E00               	movlw	0
  6194  0067C8  DB0A               	call	_TFmaleje
  6195  0067CA  E309               	bnc	l563
  6196  0067CC  0E00               	movlw	0
  6197  0067CE  010E               	movlb	F1897 shr (0+8)
  6198  0067D0  65E1               	cpfsgt	F1897& (0+255),b
  6199  0067D2  D005               	goto	l563
  6200                           ;rgl.c: 2158: {
  6201  0067D4  6BE1               	clrf	F1897& (0+255),b
  6202                           ;rgl.c: 2160: k=6;
  6203  0067D6  0E06               	movlw	6
  6204  0067D8                     L5:
  6205  0067D8  0100               	movlb	__Lparam shr (0+8)
  6206  0067DA  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6207                           ;rgl.c: 2161: }else
  6208  0067DC  D010               	goto	l562
  6209  0067DE                     l563:
  6210                           ;rgl.c: 2162: if(TFstoi())
  6211  0067DE  DB1A               	call	_TFstoi	;wreg free
  6212  0067E0  E30E               	bnc	l562
  6213                           ;rgl.c: 2163: {
  6214  0067E2  0E00               	movlw	0
  6215  0067E4  010E               	movlb	F1898 shr (0+8)
  6216  0067E6  65E2               	cpfsgt	F1898& (0+255),b
  6217  0067E8  D006               	goto	l566
  6218                           ;rgl.c: 2165: {
  6219  0067EA  0E06               	movlw	6
  6220  0067EC  0100               	movlb	__Lparam shr (0+8)
  6221  0067EE  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6222                           ;rgl.c: 2167: r=0;
  6223  0067F0  010E               	movlb	F1898 shr (0+8)
  6224  0067F2  6BE2               	clrf	F1898& (0+255),b
  6225                           ;rgl.c: 2168: }
  6226  0067F4  D004               	goto	l562
  6227  0067F6                     l566:
  6228                           ;rgl.c: 2169: else
  6229  0067F6  0100               	movlb	__Lparam shr (0+8)
  6230  0067F8  6BE9               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6231                           ;rgl.c: 2172: r++;
  6232  0067FA  010E               	movlb	F1898 shr (0+8)
  6233  0067FC  2BE2               	incf	F1898& (0+255),f,b
  6234  0067FE                     l562:
  6235                           ;rgl.c: 2173: }
  6236  0067FE  0102               	movlb	(_rgl+6) shr (0+8)
  6237  006800  6B6B               	clrf	(_rgl+6)& (0+255),b
  6238                           ;rgl.c: 2176: if(PWM.BufPWM>rgl.xmod) return;
  6239  006802  C1DC  FFE8         	movff	_PWM+1,wreg
  6240  006806  616D               	cpfslt	(_rgl+8)& (0+255),b
  6241  006808  D001               	goto	l568
  6242  00680A  0012               	return	
  6243  00680C                     l568:
  6244                           ;rgl.c: 2177: tmp=rgl.xmod-PWM.BufPWM;
  6245  00680C  C1DC  FFE8         	movff	_PWM+1,wreg
  6246  006810  0102               	movlb	(_rgl+8) shr (0+8)
  6247  006812  5D6D               	subwf	(_rgl+8)& (0+255),w,b
  6248  006814  6ED9               	movwf	fsr2l,c
  6249                           ;rgl.c: 2178: if(k>tmp) k=tmp;
  6250  006816  50D9               	movf	fsr2l,w,c
  6251  006818  0100               	movlb	__Lparam shr (0+8)
  6252  00681A  94D8               	bcf	status,2,c
  6253  00681C  90D8               	bcf	status,0,c
  6254  00681E  AFE9               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6255  006820  5DE9               	subwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6256  006822  B4D8               	btfsc	status,2,c
  6257  006824  90D8               	bcf	status,0,c
  6258  006826  E302               	bnc	l569
  6259  006828  50D9               	movf	fsr2l,w,c
  6260  00682A  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6261  00682C                     l569:
  6262                           ;rgl.c: 2181: if(PWM.MMAXCW>PWM.MGMOD)
  6263  00682C  C1FB  FFE8         	movff	_PWM+32,wreg
  6264  006830  0101               	movlb	(_PWM+12) shr (0+8)
  6265  006832  61E7               	cpfslt	(_PWM+12)& (0+255),b
  6266  006834  D01F               	goto	l570
  6267                           ;rgl.c: 2182: {
  6268  006836  C26C  FFE8         	movff	_rgl+7,wreg
  6269  00683A  0100               	movlb	__Lparam shr (0+8)
  6270  00683C  25E9               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6271  00683E  6E02               	movwf	btemp+2,c
  6272  006840  6A03               	clrf	btemp+3,c
  6273  006842  B0D8               	btfsc	status,0,c
  6274  006844  2A03               	incf	btemp+3,f,c
  6275  006846  BFE9               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6276  006848  0603               	decf	btemp+3,f,c
  6277  00684A  C1E7  F000         	movff	_PWM+12,btemp
  6278  00684E  6A01               	clrf	btemp+1,c
  6279  006850  5001               	movf	btemp+1,w,c
  6280  006852  0A80               	xorlw	128
  6281  006854  6E04               	movwf	btemp+4,c
  6282  006856  5003               	movf	btemp+3,w,c
  6283  006858  0A80               	xorlw	128
  6284  00685A  5C04               	subwf	btemp+4,w,c
  6285  00685C  E102               	bnz	u4535
  6286  00685E  5002               	movf	btemp+2,w,c
  6287  006860  5C00               	subwf	btemp,w,c
  6288  006862                     u4535:
  6289  006862  E203               	bc	l571
  6290  006864  C1E7  F26C         	movff	_PWM+12,_rgl+7
  6291  006868  0012               	return	
  6292  00686A                     l571:
  6293                           ;rgl.c: 2184: else rgl.srp+=k;
  6294  00686A  0100               	movlb	__Lparam shr (0+8)
  6295  00686C  51E9               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6296  00686E  0102               	movlb	(_rgl+7) shr (0+8)
  6297  006870  276C               	addwf	(_rgl+7)& (0+255),f,b
  6298                           ;rgl.c: 2185: }
  6299  006872  0012               	return	
  6300  006874                     l570:
  6301                           ;rgl.c: 2186: else
  6302  006874  C26C  FFE8         	movff	_rgl+7,wreg
  6303  006878  0100               	movlb	__Lparam shr (0+8)
  6304  00687A  25E9               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6305  00687C  6E02               	movwf	btemp+2,c
  6306  00687E  6A03               	clrf	btemp+3,c
  6307  006880  B0D8               	btfsc	status,0,c
  6308  006882  2A03               	incf	btemp+3,f,c
  6309  006884  BFE9               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6310  006886  0603               	decf	btemp+3,f,c
  6311  006888  C1FB  F000         	movff	_PWM+32,btemp
  6312  00688C  6A01               	clrf	btemp+1,c
  6313  00688E  5001               	movf	btemp+1,w,c
  6314  006890  0A80               	xorlw	128
  6315  006892  6E04               	movwf	btemp+4,c
  6316  006894  5003               	movf	btemp+3,w,c
  6317  006896  0A80               	xorlw	128
  6318  006898  5C04               	subwf	btemp+4,w,c
  6319  00689A  E102               	bnz	u4545
  6320  00689C  5002               	movf	btemp+2,w,c
  6321  00689E  5C00               	subwf	btemp,w,c
  6322  0068A0                     u4545:
  6323  0068A0  E203               	bc	l574
  6324  0068A2  C1FB  F26C         	movff	_PWM+32,_rgl+7
  6325  0068A6  0012               	return	
  6326  0068A8                     l574:
  6327                           ;rgl.c: 2189: else rgl.srp+=k;
  6328  0068A8  0100               	movlb	__Lparam shr (0+8)
  6329  0068AA  51E9               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6330  0068AC  0102               	movlb	(_rgl+7) shr (0+8)
  6331  0068AE  276C               	addwf	(_rgl+7)& (0+255),f,b
  6332                           ;rgl.c: 2190: }
  6333  0068B0  0012               	return	
  6334                           ;rgl.c: 2193: else return;
  6335                           ;rgl.c: 2195: else return;
  6336  0068B2                     l554:
  6337                           ;rgl.c: 2197: else
  6338  0068B2  010E               	movlb	F1897 shr (0+8)
  6339  0068B4  6BE1               	clrf	F1897& (0+255),b
  6340                           ;rgl.c: 2200: r=0;
  6341  0068B6  010E               	movlb	F1898 shr (0+8)
  6342  0068B8  6BE2               	clrf	F1898& (0+255),b
  6343                           ;rgl.c: 2201: s=0;
  6344  0068BA  010E               	movlb	F1899 shr (0+8)
  6345  0068BC  6BE3               	clrf	F1899& (0+255),b
  6346                           ;rgl.c: 2202: if(m<255) m++;
  6347  0068BE  CEDE  F000         	movff	F1894,btemp
  6348  0068C2  2800               	incf	btemp,w,c
  6349  0068C4  E002               	bz	l579
  6350  0068C6  010E               	movlb	F1894 shr (0+8)
  6351  0068C8  2BDE               	incf	F1894& (0+255),f,b
  6352  0068CA                     l579:
  6353                           ;rgl.c: 2203: if(p<255) p++;
  6354  0068CA  CEE0  F000         	movff	F1896,btemp
  6355  0068CE  2800               	incf	btemp,w,c
  6356  0068D0  E002               	bz	l580
  6357  0068D2  010E               	movlb	F1896 shr (0+8)
  6358  0068D4  2BE0               	incf	F1896& (0+255),f,b
  6359  0068D6                     l580:
  6360                           ;rgl.c: 2204: if(o<255) o++;
  6361  0068D6  CEDF  F000         	movff	F1895,btemp
  6362  0068DA  2800               	incf	btemp,w,c
  6363  0068DC  E002               	bz	l581
  6364  0068DE  010E               	movlb	F1895 shr (0+8)
  6365  0068E0  2BDF               	incf	F1895& (0+255),f,b
  6366  0068E2                     l581:
  6367                           ;rgl.c: 2205: if(DtCW.DAD_CW>DtCW.AC_CW)
  6368  0068E2  C1B5  FFE8         	movff	_DtCW+14,wreg
  6369  0068E6  0101               	movlb	(_DtCW+12) shr (0+8)
  6370  0068E8  61B3               	cpfslt	(_DtCW+12)& (0+255),b
  6371  0068EA  D087               	goto	l582
  6372                           ;rgl.c: 2206: {
  6373  0068EC  0100               	movlb	__Lparam shr (0+8)
  6374  0068EE  6BE9               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6375                           ;rgl.c: 2208: if(TFmaleje(0)&&!Twyzsza(0)&&p>=2)
  6376  0068F0  0E00               	movlw	0
  6377  0068F2  DA75               	call	_TFmaleje
  6378  0068F4  0E00               	movlw	0
  6379  0068F6  E311               	bnc	L25
  6380  0068F8  DA43               	call	_Twyzsza
  6381  0068FA  E20E               	bc	l583
  6382  0068FC  0E01               	movlw	1
  6383  0068FE  010E               	movlb	F1896 shr (0+8)
  6384  006900  65E0               	cpfsgt	F1896& (0+255),b
  6385  006902  D00A               	goto	l583
  6386                           ;rgl.c: 2209: {
  6387  006904  6BE0               	clrf	F1896& (0+255),b
  6388                           ;rgl.c: 2211: o=0;
  6389  006906  010E               	movlb	F1895 shr (0+8)
  6390  006908  6BDF               	clrf	F1895& (0+255),b
  6391                           ;rgl.c: 2212: l=0;
  6392  00690A  010E               	movlb	F1893 shr (0+8)
  6393  00690C  6BDD               	clrf	F1893& (0+255),b
  6394                           ;rgl.c: 2213: m=0;
  6395  00690E  010E               	movlb	F1894 shr (0+8)
  6396  006910  6BDE               	clrf	F1894& (0+255),b
  6397                           ;rgl.c: 2214: k=-1;
  6398  006912  0100               	movlb	__Lparam shr (0+8)
  6399  006914  69E9               	setf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6400                           ;rgl.c: 2215: }
  6401  006916  D043               	goto	l584
  6402  006918                     l583:
  6403                           ;rgl.c: 2216: else
  6404  006918  0E00               	movlw	0
  6405  00691A                     L25:
  6406  00691A  DA54               	call	_TFrosnie
  6407  00691C  E312               	bnc	l585
  6408  00691E  0E01               	movlw	1
  6409  006920  010E               	movlb	F1895 shr (0+8)
  6410  006922  65DF               	cpfsgt	F1895& (0+255),b
  6411  006924  D00E               	goto	l585
  6412                           ;rgl.c: 2218: {
  6413  006926  6BDF               	clrf	F1895& (0+255),b
  6414                           ;rgl.c: 2220: p=0;
  6415  006928  010E               	movlb	F1896 shr (0+8)
  6416  00692A  6BE0               	clrf	F1896& (0+255),b
  6417                           ;rgl.c: 2221: l=0;
  6418  00692C  010E               	movlb	F1893 shr (0+8)
  6419  00692E  6BDD               	clrf	F1893& (0+255),b
  6420                           ;rgl.c: 2222: m=0;
  6421  006930  010E               	movlb	F1894 shr (0+8)
  6422  006932  6BDE               	clrf	F1894& (0+255),b
  6423                           ;rgl.c: 2223: k=2;
  6424  006934  0E02               	movlw	2
  6425  006936  0100               	movlb	__Lparam shr (0+8)
  6426  006938  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6427                           ;rgl.c: 2224: if(Trowna()) k=1;
  6428  00693A  DA3D               	call	_Trowna	;wreg free
  6429  00693C  E330               	bnc	l584
  6430  00693E  0E01               	movlw	1
  6431  006940  D010               	goto	L6
  6432                           ;rgl.c: 2225: }
  6433  006942                     l585:
  6434                           ;rgl.c: 2226: else
  6435  006942  0E00               	movlw	0
  6436  006944  D9E1               	call	_Trosnie
  6437  006946  E310               	bnc	l588
  6438  006948  0E01               	movlw	1
  6439  00694A  010E               	movlb	F1894 shr (0+8)
  6440  00694C  65DE               	cpfsgt	F1894& (0+255),b
  6441  00694E  D00C               	goto	l588
  6442                           ;rgl.c: 2228: {
  6443  006950  010E               	movlb	F1896 shr (0+8)
  6444  006952  6BE0               	clrf	F1896& (0+255),b
  6445                           ;rgl.c: 2230: o=0;
  6446  006954  010E               	movlb	F1895 shr (0+8)
  6447  006956  6BDF               	clrf	F1895& (0+255),b
  6448                           ;rgl.c: 2231: l=0;
  6449  006958  010E               	movlb	F1893 shr (0+8)
  6450  00695A  6BDD               	clrf	F1893& (0+255),b
  6451                           ;rgl.c: 2232: m=0;
  6452  00695C  010E               	movlb	F1894 shr (0+8)
  6453  00695E  6BDE               	clrf	F1894& (0+255),b
  6454                           ;rgl.c: 2233: k=3;
  6455  006960  0E03               	movlw	3
  6456  006962                     L6:
  6457  006962  0100               	movlb	__Lparam shr (0+8)
  6458  006964  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6459                           ;rgl.c: 2234: }
  6460  006966  D01B               	goto	l584
  6461  006968                     l588:
  6462                           ;rgl.c: 2235: else
  6463  006968  0E01               	movlw	1
  6464  00696A  DA0A               	call	_Twyzsza
  6465  00696C  E316               	bnc	l590
  6466                           ;rgl.c: 2237: {
  6467  00696E  D9F4               	call	_Tstoi	;wreg free
  6468  006970  E316               	bnc	l584
  6469  006972  DA50               	call	_TFstoi	;wreg free
  6470  006974  E314               	bnc	l584
  6471                           ;rgl.c: 2239: {
  6472  006976  0E01               	movlw	1
  6473  006978  010E               	movlb	F1893 shr (0+8)
  6474  00697A  65DD               	cpfsgt	F1893& (0+255),b
  6475  00697C  D009               	goto	l592
  6476                           ;rgl.c: 2241: {
  6477  00697E  0100               	movlb	__Lparam shr (0+8)
  6478  006980  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6479                           ;rgl.c: 2243: if(Twyzsza(3)) k=2;
  6480  006982  0E03               	movlw	3
  6481  006984  D9FD               	call	_Twyzsza
  6482  006986  E309               	bnc	l590
  6483  006988  0E02               	movlw	2
  6484  00698A  0100               	movlb	__Lparam shr (0+8)
  6485  00698C  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6486  00698E  D005               	goto	l590
  6487                           ;rgl.c: 2244: l=0;
  6488                           ;rgl.c: 2245: }
  6489  006990                     l592:
  6490                           ;rgl.c: 2246: else
  6491  006990  0100               	movlb	__Lparam shr (0+8)
  6492  006992  6BE9               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6493                           ;rgl.c: 2249: l++;
  6494  006994  010E               	movlb	F1893 shr (0+8)
  6495  006996  2BDD               	incf	F1893& (0+255),f,b
  6496                           ;rgl.c: 2250: }
  6497  006998  D002               	goto	l584
  6498  00699A                     l590:
  6499  00699A  010E               	movlb	F1893 shr (0+8)
  6500  00699C  6BDD               	clrf	F1893& (0+255),b
  6501  00699E                     l584:
  6502                           ;rgl.c: 2253: if(rgl.srp-k<PWM.MDMOD) rgl.srp=PW
      +                          M.MDMOD;
  6503  00699E  C1E4  F000         	movff	_PWM+9,btemp
  6504  0069A2  6A01               	clrf	btemp+1,c
  6505  0069A4  C26C  F002         	movff	_rgl+7,btemp+2
  6506  0069A8  0100               	movlb	__Lparam shr (0+8)
  6507  0069AA  51E9               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6508  0069AC  5C02               	subwf	btemp+2,w,c
  6509  0069AE  6EF6               	movwf	tblptrl,c
  6510  0069B0  6AF7               	clrf	tblptrh,c
  6511  0069B2  B0D8               	btfsc	status,0,c
  6512  0069B4  2AF7               	incf	tblptrh,f,c
  6513  0069B6  AFE9               	btfss	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6514  0069B8  06F7               	decf	tblptrh,f,c
  6515  0069BA  50F7               	movf	tblptrh,w,c
  6516  0069BC  0A80               	xorlw	128
  6517  0069BE  6E02               	movwf	btemp+2,c
  6518  0069C0  5001               	movf	btemp+1,w,c
  6519  0069C2  0A80               	xorlw	128
  6520  0069C4  5C02               	subwf	btemp+2,w,c
  6521  0069C6  E102               	bnz	u4775
  6522  0069C8  5000               	movf	btemp,w,c
  6523  0069CA  5CF6               	subwf	tblptrl,w,c
  6524  0069CC                     u4775:
  6525  0069CC  E203               	bc	l596
  6526  0069CE  C1E4  F26C         	movff	_PWM+9,_rgl+7
  6527  0069D2  D004               	goto	l597
  6528  0069D4                     l596:
  6529                           ;rgl.c: 2254: else rgl.srp-=k;
  6530  0069D4  0100               	movlb	__Lparam shr (0+8)
  6531  0069D6  51E9               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6532  0069D8  0102               	movlb	(_rgl+7) shr (0+8)
  6533  0069DA  5F6C               	subwf	(_rgl+7)& (0+255),f,b
  6534  0069DC                     l597:
  6535                           ;rgl.c: 2255: if(rgl.srp>PWM.MMAXCW) rgl.srp=PWM
      +                          .MMAXCW;
  6536  0069DC  C26C  FFE8         	movff	_rgl+7,wreg
  6537  0069E0  0101               	movlb	(_PWM+32) shr (0+8)
  6538  0069E2  61FB               	cpfslt	(_PWM+32)& (0+255),b
  6539  0069E4  D002               	goto	l598
  6540  0069E6  C1FB  F26C         	movff	_PWM+32,_rgl+7
  6541  0069EA                     l598:
  6542                           ;rgl.c: 2256: if(rgl.xmod<rgl.srp) rgl.xmod=rgl.
      +                          srp;
  6543  0069EA  C26C  FFE8         	movff	_rgl+7,wreg
  6544  0069EE  0102               	movlb	(_rgl+8) shr (0+8)
  6545  0069F0  616D               	cpfslt	(_rgl+8)& (0+255),b
  6546  0069F2  0012               	return	
  6547  0069F4  C26C  F26D         	movff	_rgl+7,_rgl+8
  6548                           ;rgl.c: 2257: return;
  6549  0069F8  0012               	return	
  6550  0069FA                     l582:
  6551                           ;rgl.c: 2259: else
  6552  0069FA  0100               	movlb	__Lparam shr (0+8)
  6553  0069FC  6BE9               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6554                           ;rgl.c: 2262: if(TFrosnie(0)&&o>=2)
  6555  0069FE  0E00               	movlw	0
  6556  006A00  D9E1               	call	_TFrosnie
  6557  006A02  E312               	bnc	l601
  6558  006A04  0E01               	movlw	1
  6559  006A06  010E               	movlb	F1895 shr (0+8)
  6560  006A08  65DF               	cpfsgt	F1895& (0+255),b
  6561  006A0A  D00E               	goto	l601
  6562                           ;rgl.c: 2263: {
  6563  006A0C  6BDF               	clrf	F1895& (0+255),b
  6564                           ;rgl.c: 2265: p=0;
  6565  006A0E  010E               	movlb	F1896 shr (0+8)
  6566  006A10  6BE0               	clrf	F1896& (0+255),b
  6567                           ;rgl.c: 2266: l=0;
  6568  006A12  010E               	movlb	F1893 shr (0+8)
  6569  006A14  6BDD               	clrf	F1893& (0+255),b
  6570                           ;rgl.c: 2267: m=0;
  6571  006A16  010E               	movlb	F1894 shr (0+8)
  6572  006A18  6BDE               	clrf	F1894& (0+255),b
  6573                           ;rgl.c: 2268: k=-3;
  6574  006A1A  0EFD               	movlw	253
  6575  006A1C  0100               	movlb	__Lparam shr (0+8)
  6576  006A1E  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6577                           ;rgl.c: 2269: if(Trowna()) k=-2;
  6578  006A20  D9CA               	call	_Trowna	;wreg free
  6579  006A22  E345               	bnc	l603
  6580  006A24  0EFE               	movlw	254
  6581  006A26  D02B               	goto	L8
  6582                           ;rgl.c: 2270: }
  6583  006A28                     l601:
  6584                           ;rgl.c: 2271: else
  6585  006A28  0E00               	movlw	0
  6586  006A2A  D9D9               	call	_TFmaleje
  6587  006A2C  E312               	bnc	l604
  6588  006A2E  0E01               	movlw	1
  6589  006A30  010E               	movlb	F1896 shr (0+8)
  6590  006A32  65E0               	cpfsgt	F1896& (0+255),b
  6591  006A34  D00E               	goto	l604
  6592                           ;rgl.c: 2273: {
  6593  006A36  6BE0               	clrf	F1896& (0+255),b
  6594                           ;rgl.c: 2275: o=0;
  6595  006A38  010E               	movlb	F1895 shr (0+8)
  6596  006A3A  6BDF               	clrf	F1895& (0+255),b
  6597                           ;rgl.c: 2276: l=0;
  6598  006A3C  010E               	movlb	F1893 shr (0+8)
  6599  006A3E  6BDD               	clrf	F1893& (0+255),b
  6600                           ;rgl.c: 2277: m=0;
  6601  006A40  010E               	movlb	F1894 shr (0+8)
  6602  006A42  6BDE               	clrf	F1894& (0+255),b
  6603                           ;rgl.c: 2278: k=2;
  6604  006A44  0E02               	movlw	2
  6605  006A46  0100               	movlb	__Lparam shr (0+8)
  6606  006A48  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6607                           ;rgl.c: 2279: if(Trowna()) k=1;
  6608  006A4A  D9B5               	call	_Trowna	;wreg free
  6609  006A4C  E330               	bnc	l603
  6610  006A4E  0E01               	movlw	1
  6611  006A50  D016               	goto	L8
  6612                           ;rgl.c: 2280: }
  6613  006A52                     l604:
  6614                           ;rgl.c: 2281: else
  6615  006A52  0E00               	movlw	0
  6616  006A54  D966               	call	_Tmaleje
  6617  006A56  E316               	bnc	l607
  6618  006A58  0E01               	movlw	1
  6619  006A5A  010E               	movlb	F1894 shr (0+8)
  6620  006A5C  65DE               	cpfsgt	F1894& (0+255),b
  6621  006A5E  D012               	goto	l607
  6622                           ;rgl.c: 2283: {
  6623  006A60  010E               	movlb	F1896 shr (0+8)
  6624  006A62  6BE0               	clrf	F1896& (0+255),b
  6625                           ;rgl.c: 2285: o=0;
  6626  006A64  010E               	movlb	F1895 shr (0+8)
  6627  006A66  6BDF               	clrf	F1895& (0+255),b
  6628                           ;rgl.c: 2286: l=0;
  6629  006A68  010E               	movlb	F1893 shr (0+8)
  6630  006A6A  6BDD               	clrf	F1893& (0+255),b
  6631                           ;rgl.c: 2287: m=0;
  6632  006A6C  010E               	movlb	F1894 shr (0+8)
  6633  006A6E  6BDE               	clrf	F1894& (0+255),b
  6634                           ;rgl.c: 2288: k=2;
  6635  006A70  0E02               	movlw	2
  6636  006A72  0100               	movlb	__Lparam shr (0+8)
  6637  006A74  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6638                           ;rgl.c: 2289: if(Tnizsza(0)) k=3;
  6639  006A76  0E00               	movlw	0
  6640  006A78  D976               	call	_Tnizsza
  6641  006A7A  E319               	bnc	l603
  6642  006A7C  0E03               	movlw	3
  6643  006A7E                     L8:
  6644  006A7E  0100               	movlb	__Lparam shr (0+8)
  6645  006A80  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6646                           ;rgl.c: 2290: }
  6647  006A82  D015               	goto	l603
  6648  006A84                     l607:
  6649                           ;rgl.c: 2291: else
  6650  006A84  0E01               	movlw	1
  6651  006A86  D96F               	call	_Tnizsza
  6652  006A88  E310               	bnc	l610
  6653                           ;rgl.c: 2293: {
  6654  006A8A  D966               	call	_Tstoi	;wreg free
  6655  006A8C  E310               	bnc	l603
  6656  006A8E  D9C2               	call	_TFstoi	;wreg free
  6657  006A90  E30E               	bnc	l603
  6658                           ;rgl.c: 2295: {
  6659  006A92  0E02               	movlw	2
  6660  006A94  010E               	movlb	F1893 shr (0+8)
  6661  006A96  65DD               	cpfsgt	F1893& (0+255),b
  6662  006A98  D003               	goto	l612
  6663                           ;rgl.c: 2297: {
  6664  006A9A  0100               	movlb	__Lparam shr (0+8)
  6665  006A9C  6FE9               	movwf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6666  006A9E  D005               	goto	l610
  6667                           ;rgl.c: 2299: l=0;
  6668                           ;rgl.c: 2300: }
  6669  006AA0                     l612:
  6670                           ;rgl.c: 2301: else
  6671  006AA0  0100               	movlb	__Lparam shr (0+8)
  6672  006AA2  6BE9               	clrf	?a_ModPruCW2^(__Lparam& (0+65280)),b
  6673                           ;rgl.c: 2304: l++;
  6674  006AA4  010E               	movlb	F1893 shr (0+8)
  6675  006AA6  2BDD               	incf	F1893& (0+255),f,b
  6676                           ;rgl.c: 2305: }
  6677  006AA8  D002               	goto	l603
  6678  006AAA                     l610:
  6679  006AAA  010E               	movlb	F1893 shr (0+8)
  6680  006AAC  6BDD               	clrf	F1893& (0+255),b
  6681  006AAE                     l603:
  6682                           ;rgl.c: 2308: if(PWM.MMAXCW>PWM.MGMOD)
  6683  006AAE  C1FB  FFE8         	movff	_PWM+32,wreg
  6684  006AB2  0101               	movlb	(_PWM+12) shr (0+8)
  6685  006AB4  61E7               	cpfslt	(_PWM+12)& (0+255),b
  6686  006AB6  D01A               	goto	l615
  6687                           ;rgl.c: 2309: {
  6688  006AB8  C26C  FFE8         	movff	_rgl+7,wreg
  6689  006ABC  0100               	movlb	__Lparam shr (0+8)
  6690  006ABE  25E9               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6691  006AC0  6E02               	movwf	btemp+2,c
  6692  006AC2  6A03               	clrf	btemp+3,c
  6693  006AC4  B0D8               	btfsc	status,0,c
  6694  006AC6  2A03               	incf	btemp+3,f,c
  6695  006AC8  BFE9               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6696  006ACA  0603               	decf	btemp+3,f,c
  6697  006ACC  C1E7  F000         	movff	_PWM+12,btemp
  6698  006AD0  6A01               	clrf	btemp+1,c
  6699  006AD2  5001               	movf	btemp+1,w,c
  6700  006AD4  0A80               	xorlw	128
  6701  006AD6  6E04               	movwf	btemp+4,c
  6702  006AD8  5003               	movf	btemp+3,w,c
  6703  006ADA  0A80               	xorlw	128
  6704  006ADC  5C04               	subwf	btemp+4,w,c
  6705  006ADE  E102               	bnz	u4985
  6706  006AE0  5002               	movf	btemp+2,w,c
  6707  006AE2  5C00               	subwf	btemp,w,c
  6708  006AE4                     u4985:
  6709  006AE4  E21D               	bc	l619
  6710  006AE6  C1E7  F26C         	movff	_PWM+12,_rgl+7
  6711  006AEA  D01E               	goto	l618
  6712                           ;rgl.c: 2311: else rgl.srp+=k;
  6713                           ;rgl.c: 2312: }
  6714  006AEC                     l615:
  6715                           ;rgl.c: 2313: else
  6716  006AEC  C26C  FFE8         	movff	_rgl+7,wreg
  6717  006AF0  0100               	movlb	__Lparam shr (0+8)
  6718  006AF2  25E9               	addwf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6719  006AF4  6E02               	movwf	btemp+2,c
  6720  006AF6  6A03               	clrf	btemp+3,c
  6721  006AF8  B0D8               	btfsc	status,0,c
  6722  006AFA  2A03               	incf	btemp+3,f,c
  6723  006AFC  BFE9               	btfsc	?a_ModPruCW2^(__Lparam& (0+65280)),7,b
  6724  006AFE  0603               	decf	btemp+3,f,c
  6725  006B00  C1FB  F000         	movff	_PWM+32,btemp
  6726  006B04  6A01               	clrf	btemp+1,c
  6727  006B06  5001               	movf	btemp+1,w,c
  6728  006B08  0A80               	xorlw	128
  6729  006B0A  6E04               	movwf	btemp+4,c
  6730  006B0C  5003               	movf	btemp+3,w,c
  6731  006B0E  0A80               	xorlw	128
  6732  006B10  5C04               	subwf	btemp+4,w,c
  6733  006B12  E102               	bnz	u4995
  6734  006B14  5002               	movf	btemp+2,w,c
  6735  006B16  5C00               	subwf	btemp,w,c
  6736  006B18                     u4995:
  6737  006B18  E203               	bc	l619
  6738  006B1A  C1FB  F26C         	movff	_PWM+32,_rgl+7
  6739  006B1E  D004               	goto	l618
  6740  006B20                     l619:
  6741                           ;rgl.c: 2316: else rgl.srp+=k;
  6742  006B20  0100               	movlb	__Lparam shr (0+8)
  6743  006B22  51E9               	movf	?a_ModPruCW2^(__Lparam& (0+65280)),w
  6744  006B24  0102               	movlb	(_rgl+7) shr (0+8)
  6745  006B26  276C               	addwf	(_rgl+7)& (0+255),f,b
  6746  006B28                     l618:
  6747                           ;rgl.c: 2317: }
  6748  006B28  C26C  FFE8         	movff	_rgl+7,wreg
  6749  006B2C  0102               	movlb	(_rgl+8) shr (0+8)
  6750  006B2E  616D               	cpfslt	(_rgl+8)& (0+255),b
  6751  006B30  0012               	return	
  6752  006B32  C26C  F26D         	movff	_rgl+7,_rgl+8
  6753                           ;rgl.c: 2319: return;
  6754  006B36  0012               	return	
  6755                           ;rgl.c: 2320: }
  6756  006B38                     __end_of_ModPruCW2:
  6757                           ;rgl.c: 2326: void IncMaxCW2(void)
  6758                           ;rgl.c: 2327: {
  6759  006B38                     _IncMaxCW2:
  6760  000000                     
  6761                           ;rgl.c: 2328: unsigned char k;
  6762  006B38  0102               	movlb	_rgl shr (0+8)
  6763  006B3A  A565               	btfss	_rgl& (0+255),2,b
  6764  006B3C  D014               	goto	l623
  6765                           ;rgl.c: 2332: {
  6766  006B3E  C1FB  FFE8         	movff	_PWM+32,wreg
  6767  006B42  0101               	movlb	(_PWM+12) shr (0+8)
  6768  006B44  61E7               	cpfslt	(_PWM+12)& (0+255),b
  6769  006B46  D007               	goto	l624
  6770                           ;rgl.c: 2334: {
  6771  006B48  C26D  FFE8         	movff	_rgl+8,wreg
  6772  006B4C  61E7               	cpfslt	(_PWM+12)& (0+255),b
  6773  006B4E  0012               	return	
  6774  006B50  C1E7  F26D         	movff	_PWM+12,_rgl+8
  6775                           ;rgl.c: 2336: }
  6776  006B54  0012               	return	
  6777  006B56                     l624:
  6778                           ;rgl.c: 2337: else
  6779  006B56  C26D  FFE8         	movff	_rgl+8,wreg
  6780  006B5A  0101               	movlb	(_PWM+32) shr (0+8)
  6781  006B5C  61FB               	cpfslt	(_PWM+32)& (0+255),b
  6782  006B5E  0012               	return	
  6783  006B60  C1FB  F26D         	movff	_PWM+32,_rgl+8
  6784                           ;rgl.c: 2340: }
  6785  006B64  0012               	return	
  6786  006B66                     l623:
  6787                           ;rgl.c: 2342: }
  6788  006B66  0E01               	movlw	1
  6789  006B68  D8CF               	call	_Trosnie
  6790  006B6A  B0D8               	btfsc	status,0,c
  6791  006B6C  0012               	return	
  6792  006B6E  0E01               	movlw	1
  6793  006B70  D929               	call	_TFrosnie
  6794  006B72  B0D8               	btfsc	status,0,c
  6795  006B74  0012               	return	
  6796                           ;rgl.c: 2345: k=5;
  6797  006B76  0E05               	movlw	5
  6798  006B78  6ED9               	movwf	fsr2l,c
  6799                           ;rgl.c: 2346: if(rgl.xmod+k>0xF0) rgl.xmod=0xF0;
  6800  006B7A  C26D  F000         	movff	_rgl+8,btemp
  6801  006B7E  6A01               	clrf	btemp+1,c
  6802  006B80  2600               	addwf	btemp,f,c
  6803  006B82  0E00               	movlw	0
  6804  006B84  2201               	addwfc	btemp+1,f,c
  6805  006B86  5001               	movf	btemp+1,w,c
  6806  006B88  0A80               	xorlw	128
  6807  006B8A  0F80               	addlw	-128
  6808  006B8C  0EF1               	movlw	241
  6809  006B8E  B4D8               	btfsc	status,2,c
  6810  006B90  5C00               	subwf	btemp,w,c
  6811  006B92  E304               	bnc	l629
  6812  006B94  0EF0               	movlw	-16
  6813  006B96  CFE8 F26D          	movff	wreg,_rgl+8
  6814  006B9A  D003               	goto	l630
  6815  006B9C                     l629:
  6816                           ;rgl.c: 2347: else rgl.xmod+=k;
  6817  006B9C  0102               	movlb	(_rgl+8) shr (0+8)
  6818  006B9E  0E05               	movlw	5
  6819  006BA0  276D               	addwf	(_rgl+8)& (0+255),f,b
  6820  006BA2                     l630:
  6821                           ;rgl.c: 2348: if(rgl.xmod>PWM.MMAXCW) rgl.xmod=P
      +                          WM.MMAXCW;
  6822  006BA2  C26D  FFE8         	movff	_rgl+8,wreg
  6823  006BA6  0101               	movlb	(_PWM+32) shr (0+8)
  6824  006BA8  61FB               	cpfslt	(_PWM+32)& (0+255),b
  6825  006BAA  0012               	return	
  6826  006BAC  C1FB  F26D         	movff	_PWM+32,_rgl+8
  6827                           ;rgl.c: 2349: }
  6828  006BB0  0012               	return	
  6829  006BB2                     __end_of_IncMaxCW2:
  6830                           ;rgl.c: 2352: void ModPrzCW2(void)
  6831                           ;rgl.c: 2353: {
  6832  006BB2                     _ModPrzCW2:
  6833  000000                     
  6834                           ;rgl.c: 2354: if(!rgl.nmod)
  6835  006BB2  0102               	movlb	_rgl shr (0+8)
  6836  006BB4  BB65               	btfsc	_rgl& (0+255),5,b
  6837  006BB6  D00B               	goto	l633
  6838                           ;rgl.c: 2355: {
  6839  006BB8  0E00               	movlw	0
  6840  006BBA  D8B3               	call	_Tmaleje
  6841  006BBC  B0D8               	btfsc	status,0,c
  6842  006BBE  0012               	return	
  6843  006BC0  0E03               	movlw	3
  6844  006BC2  D8DE               	call	_Twyzsza
  6845  006BC4  A0D8               	btfss	status,0,c
  6846  006BC6  0012               	return	
  6847                           ;rgl.c: 2357: {
  6848  006BC8  0102               	movlb	_rgl shr (0+8)
  6849  006BCA  8B65               	bsf	_rgl& (0+255),5,b
  6850                           ;rgl.c: 2359: }
  6851  006BCC  0012               	return	
  6852  006BCE                     l633:
  6853                           ;rgl.c: 2361: else
  6854  006BCE  0E03               	movlw	3
  6855  006BD0  D8D7               	call	_Twyzsza
  6856  006BD2  B0D8               	btfsc	status,0,c
  6857  006BD4  0012               	return	
  6858                           ;rgl.c: 2364: {
  6859  006BD6  0E00               	movlw	0
  6860  006BD8  D8A4               	call	_Tmaleje
  6861  006BDA  E302               	bnc	l637
  6862  006BDC  0102               	movlb	_rgl shr (0+8)
  6863  006BDE  9B65               	bcf	_rgl& (0+255),5,b
  6864  006BE0                     l637:
  6865                           ;rgl.c: 2366: if(Tstoi()&&TFmaleje(0)) rgl.nmod=
      +                          0;
  6866  006BE0  D8BB               	call	_Tstoi	;wreg free
  6867  006BE2  E305               	bnc	l638
  6868  006BE4  0E00               	movlw	0
  6869  006BE6  D8FB               	call	_TFmaleje
  6870  006BE8  E302               	bnc	l638
  6871  006BEA  0102               	movlb	_rgl shr (0+8)
  6872  006BEC  9B65               	bcf	_rgl& (0+255),5,b
  6873  006BEE                     l638:
  6874                           ;rgl.c: 2367: if(Tnizsza(3)) rgl.nmod=0;
  6875  006BEE  0E03               	movlw	3
  6876  006BF0  D8BA               	call	_Tnizsza
  6877  006BF2  A0D8               	btfss	status,0,c
  6878  006BF4  0012               	return	
  6879  006BF6  0102               	movlb	_rgl shr (0+8)
  6880  006BF8  9B65               	bcf	_rgl& (0+255),5,b
  6881                           ;rgl.c: 2368: }
  6882  006BFA  0012               	return	
  6883  006BFC                     __end_of_ModPrzCW2:
  6884                           ;rgl.c: 2373: void PropCO2(void)
  6885                           ;rgl.c: 2374: {
  6886  006BFC                     _PropCO2:
  6887  000000                     
  6888                           ;rgl.c: 2375: if(!rgl.nmod)
  6889  006BFC  0102               	movlb	_rgl shr (0+8)
  6890  006BFE  BB65               	btfsc	_rgl& (0+255),5,b
  6891  006C00  D033               	goto	l641
  6892                           ;rgl.c: 2376: {
  6893  006C02  C268  FFE8         	movff	_rgl+3,wreg
  6894  006C06  0A03               	xorlw	3
  6895  006C08  E10A               	bnz	l642
  6896  006C0A                     L32:
  6897                           ;rgl.c: 2378: {
  6898  006C0A  C26E  FFE8         	movff	_rgl+9,wreg
  6899  006C0E  0101               	movlb	(_PWM+12) shr (0+8)
  6900  006C10  61E7               	cpfslt	(_PWM+12)& (0+255),b
  6901  006C12  EF9D  F031         	goto	l486
  6902                           ;rgl.c: 2380: rgl.tmp_pwm=PWM.MGMOD;
  6903  006C16  C1E7  F26E         	movff	_PWM+12,_rgl+9
  6904                           ;rgl.c: 2381: }
  6905  006C1A  EF9D  F031         	goto	l486
  6906  006C1E                     l642:
  6907                           ;rgl.c: 2382: else
  6908  006C1E  C268  FFE8         	movff	_rgl+3,wreg
  6909  006C22  0A02               	xorlw	2
  6910  006C24  E10A               	bnz	l645
  6911  006C26                     L33:
  6912                           ;rgl.c: 2384: {
  6913  006C26  C26E  FFE8         	movff	_rgl+9,wreg
  6914  006C2A  0101               	movlb	(_PWM+27) shr (0+8)
  6915  006C2C  61F6               	cpfslt	(_PWM+27)& (0+255),b
  6916  006C2E  EF9D  F031         	goto	l486
  6917                           ;rgl.c: 2386: rgl.tmp_pwm=PWM.PROP1;
  6918  006C32  C1F6  F26E         	movff	_PWM+27,_rgl+9
  6919                           ;rgl.c: 2387: }
  6920  006C36  EF9D  F031         	goto	l486
  6921  006C3A                     l645:
  6922                           ;rgl.c: 2388: else
  6923  006C3A  C268  F000         	movff	_rgl+3,btemp
  6924  006C3E  0400               	decf	btemp,w,c
  6925  006C40  E10A               	bnz	l648
  6926  006C42                     L34:
  6927                           ;rgl.c: 2390: {
  6928  006C42  C26E  FFE8         	movff	_rgl+9,wreg
  6929  006C46  0101               	movlb	(_PWM+28) shr (0+8)
  6930  006C48  61F7               	cpfslt	(_PWM+28)& (0+255),b
  6931  006C4A  EF9D  F031         	goto	l486
  6932                           ;rgl.c: 2392: rgl.tmp_pwm=PWM.PROP2;
  6933  006C4E  C1F7  F26E         	movff	_PWM+28,_rgl+9
  6934                           ;rgl.c: 2393: }
  6935  006C52  EF9D  F031         	goto	l486
  6936  006C56                     l648:
  6937                           ;rgl.c: 2394: else
  6938  006C56  C268  FFE8         	movff	_rgl+3,wreg
  6939  006C5A  0A80               	xorlw	128
  6940  006C5C  0F7F               	addlw	-129
  6941  006C5E  E302 EF9D  F031    	bc	l644
  6942  006C64  EF96  F031         	goto	L35
  6943                           ;rgl.c: 2396: {
  6944                           ;rgl.c: 2399: }
  6945                           ;rgl.c: 2402: }
  6946  006C68                     l641:
  6947                           ;rgl.c: 2403: else WriteOPWM(PWM.MDMOD);
  6948  006C68  C1E4  FFE8         	movff	_PWM+9,wreg
  6949  006C6C  EFAD  F06A         	goto	_WriteOPWM
  6950                           ;rgl.c: 2404: }
  6951  006C70                     __end_of_PropCO2:
  6952                           ;rgl.c: 2414: void ModToCW3(void)
  6953                           ;rgl.c: 2415: {
  6954  006C70                     _ModToCW3:
  6955  000000                     
  6956                           ;rgl.c: 2416: rgl.btcw=1;
  6957  006C70  0102               	movlb	_rgl shr (0+8)
  6958  006C72  8365               	bsf	_rgl& (0+255),1,b
  6959                           ;rgl.c: 2417: if(rgl.btco)
  6960  006C74  A165               	btfss	_rgl& (0+255),0,b
  6961  006C76  0012               	return	
  6962                           ;rgl.c: 2418: {
  6963  006C78  9165               	bcf	_rgl& (0+255),0,b
  6964                           ;rgl.c: 2421: if(!Tnizsza(0))
  6965  006C7A  0E00               	movlw	0
  6966  006C7C  D874               	call	_Tnizsza
  6967  006C7E  B0D8               	btfsc	status,0,c
  6968  006C80  0012               	return	
  6969                           ;rgl.c: 2422: {
  6970  006C82  C1E4  F000         	movff	_PWM+9,btemp
  6971  006C86  6A01               	clrf	btemp+1,c
  6972  006C88  C26C  F002         	movff	_rgl+7,btemp+2
  6973  006C8C  0EF6               	movlw	246
  6974  006C8E  2402               	addwf	btemp+2,w,c
  6975  006C90  6EF6               	movwf	tblptrl,c
  6976  006C92  6AF7               	clrf	tblptrh,c
  6977  006C94  0EFF               	movlw	255
  6978  006C96  22F7               	addwfc	tblptrh,f,c
  6979  006C98  50F7               	movf	tblptrh,w,c
  6980  006C9A  0A80               	xorlw	128
  6981  006C9C  6E02               	movwf	btemp+2,c
  6982  006C9E  5001               	movf	btemp+1,w,c
  6983  006CA0  0A80               	xorlw	128
  6984  006CA2  5C02               	subwf	btemp+2,w,c
  6985  006CA4  E102               	bnz	u5315
  6986  006CA6  5000               	movf	btemp,w,c
  6987  006CA8  5CF6               	subwf	tblptrl,w,c
  6988  006CAA                     u5315:
  6989  006CAA  E203               	bc	l657
  6990  006CAC  C1E4  F26C         	movff	_PWM+9,_rgl+7
  6991  006CB0  0012               	return	
  6992  006CB2                     l657:
  6993                           ;rgl.c: 2424: else rgl.srp-=10;
  6994  006CB2  0102               	movlb	(_rgl+7) shr (0+8)
  6995  006CB4  0EF6               	movlw	-10
  6996  006CB6  276C               	addwf	(_rgl+7)& (0+255),f,b
  6997                           ;rgl.c: 2425: }
  6998  006CB8  0CF6               	retlw	246
  6999  006CBA                     __end_of_ModToCW3:
  7000                           ;rgl.c: 2430: void ModToCO3(void)
  7001                           ;rgl.c: 2431: {
  7002  006CBA                     _ModToCO3:
  7003  000000                     
  7004                           ;rgl.c: 2432: rgl.btco=1;
  7005  006CBA  0102               	movlb	_rgl shr (0+8)
  7006  006CBC  8165               	bsf	_rgl& (0+255),0,b
  7007                           ;rgl.c: 2433: rgl.btcw=0;
  7008  006CBE  9365               	bcf	_rgl& (0+255),1,b
  7009                           ;rgl.c: 2434: }
  7010  006CC0  0012               	return	
  7011  006CC2                     __end_of_ModToCO3:
  7012                           ;rgl.c: 2437: void StartMCO3(void)
  7013                           ;rgl.c: 2438: {
  7014  006CC2                     _StartMCO3:
  7015  000000                     
  7016                           ;rgl.c: 2439: if(rgl.btco||rgl.btcw) return;
  7017  006CC2  0102               	movlb	_rgl shr (0+8)
  7018  006CC4  A165               	btfss	_rgl& (0+255),0,b
  7019  006CC6  B365               	btfsc	_rgl& (0+255),1,b
  7020  006CC8  0012               	return	
  7021                           ;rgl.c: 2440: StartRTdS(3);
  7022  006CCA  0E03               	movlw	3
  7023  006CCC  EC51  F073         	call	_StartRTdS
  7024                           ;rgl.c: 2441: DtCO.dDCO=0;
  7025  006CD0  0101               	movlb	(_DtCO+9) shr (0+8)
  7026  006CD2  6BBF               	clrf	(_DtCO+9)& (0+255),b
  7027                           ;rgl.c: 2442: DtCO.indCO=0;
  7028  006CD4  0101               	movlb	(_DtCO+10) shr (0+8)
  7029  006CD6  6BC0               	clrf	(_DtCO+10)& (0+255),b
  7030                           ;rgl.c: 2443: rgl.fz=0;
  7031  006CD8  0102               	movlb	_rgl shr (0+8)
  7032  006CDA  9565               	bcf	_rgl& (0+255),2,b
  7033                           ;rgl.c: 2444: rgl.med_up=0;
  7034  006CDC  9765               	bcf	_rgl& (0+255),3,b
  7035                           ;rgl.c: 2445: rgl.fast_up=0;
  7036  006CDE  9965               	bcf	_rgl& (0+255),4,b
  7037                           ;rgl.c: 2447: if(PWM.MAXPWM>PWM.FIRSTPB)
  7038  006CE0  C1FE  FFE8         	movff	_PWM+35,wreg
  7039  006CE4  0101               	movlb	(_PWM+26) shr (0+8)
  7040  006CE6  61F5               	cpfslt	(_PWM+26)& (0+255),b
  7041  006CE8  D003               	goto	l662
  7042                           ;rgl.c: 2448: {
  7043  006CEA  C1F5  F26D         	movff	_PWM+26,_rgl+8
  7044                           ;rgl.c: 2450: }
  7045  006CEE  D002               	goto	l663
  7046  006CF0                     l662:
  7047                           ;rgl.c: 2451: else
  7048  006CF0  C1FE  F26D         	movff	_PWM+35,_rgl+8
  7049  006CF4                     l663:
  7050                           ;rgl.c: 2454: }
  7051  006CF4  0102               	movlb	(_rgl+7) shr (0+8)
  7052  006CF6  6B6C               	clrf	(_rgl+7)& (0+255),b
  7053                           ;rgl.c: 2456: rgl.ytmp=0;
  7054  006CF8  6B6B               	clrf	(_rgl+6)& (0+255),b
  7055                           ;rgl.c: 2457: rgl.nmod=0;
  7056  006CFA  9B65               	bcf	_rgl& (0+255),5,b
  7057                           ;rgl.c: 2458: rgl.btcw=0;
  7058  006CFC  9365               	bcf	_rgl& (0+255),1,b
  7059                           ;rgl.c: 2459: rgl.btco=1;
  7060  006CFE  8165               	bsf	_rgl& (0+255),0,b
  7061                           ;rgl.c: 2460: rgl.del1s=0;
  7062  006D00  9D65               	bcf	_rgl& (0+255),6,b
  7063                           ;rgl.c: 2461: rgl.deln1=0;
  7064  006D02  9F65               	bcf	_rgl& (0+255),7,b
  7065                           ;rgl.c: 2462: rgl.inv_mod=0;
  7066  006D04  9166               	bcf	(_rgl+1)& (0+255),0,b
  7067                           ;rgl.c: 2463: }
  7068  006D06  0012               	return	
  7069  006D08                     __end_of_StartMCO3:
  7070                           ;rgl.c: 2473: bit Trosnie(const unsigned char t)
  7071                           ;rgl.c: 2474: {
  7072  006D08                     _Trosnie:
  7073  000000                     
  7074                           ; _t loaded to fsr2l
  7075  006D08  6ED9               	movwf	fsr2l,c
  7076                           ;rgl.c: 2475: return (rgl.x_dt>t);
  7077  006D0A  C269  F000         	movff	_rgl+4,btemp
  7078  006D0E  50D9               	movf	fsr2l,w,c
  7079  006D10  BE00               	btfsc	btemp,7,c
  7080  006D12  D005               	goto	u5360
  7081  006D14  0AFF               	xorlw	255
  7082  006D16  2400               	addwf	btemp,w,c
  7083  006D18  E302               	bnc	u5360
  7084  006D1A  80D8               	bsf	status,0,c
  7085  006D1C  0012               	return	
  7086  006D1E                     u5360:
  7087  006D1E  90D8               	bcf	status,0,c
  7088  006D20  0012               	return	
  7089                           ;rgl.c: 2476: }
  7090  006D22                     __end_of_Trosnie:
  7091                           ;rgl.c: 2482: bit Tmaleje(const unsigned char t)
  7092                           ;rgl.c: 2483: {
  7093  006D22                     _Tmaleje:
  7094  000000                     
  7095                           ; _t loaded to fsr2l
  7096  006D22  6ED9               	movwf	fsr2l,c
  7097                           ;rgl.c: 2484: return (rgl.x_dt<(-1*t));
  7098  006D24  CFD9 F000          	movff	fsr2l,btemp
  7099  006D28  6A01               	clrf	btemp+1,c
  7100  006D2A  1E00               	comf	btemp,f,c
  7101  006D2C  1E01               	comf	btemp+1,f,c
  7102  006D2E  4A00               	infsnz	btemp,f,c
  7103  006D30  2A01               	incf	btemp+1,f,c
  7104  006D32  C269  F002         	movff	_rgl+4,btemp+2
  7105  006D36  6A03               	clrf	btemp+3,c
  7106  006D38  BE02               	btfsc	btemp+2,7,c
  7107  006D3A  0603               	decf	btemp+3,f,c
  7108  006D3C  5003               	movf	btemp+3,w,c
  7109  006D3E  0A80               	xorlw	128
  7110  006D40  6E04               	movwf	btemp+4,c
  7111  006D42  5001               	movf	btemp+1,w,c
  7112  006D44  0A80               	xorlw	128
  7113  006D46  5C04               	subwf	btemp+4,w,c
  7114  006D48  E102               	bnz	u5385
  7115  006D4A  5000               	movf	btemp,w,c
  7116  006D4C  5C02               	subwf	btemp+2,w,c
  7117  006D4E                     u5385:
  7118  006D4E  E202               	bc	u5380
  7119  006D50  80D8               	bsf	status,0,c
  7120  006D52  0012               	return	
  7121  006D54                     u5380:
  7122  006D54  90D8               	bcf	status,0,c
  7123  006D56  0012               	return	
  7124                           ;rgl.c: 2485: }
  7125  006D58                     __end_of_Tmaleje:
  7126                           ;rgl.c: 2489: bit Tstoi(void)
  7127                           ;rgl.c: 2490: {
  7128  006D58                     _Tstoi:
  7129  000000                     
  7130                           ;rgl.c: 2491: return !rgl.x_dt;
  7131  006D58  EE02  F069         	lfsr	0,_rgl+4
  7132  006D5C  50EF               	movf	indf0,w,c
  7133  006D5E  90D8               	bcf	status,0,c
  7134  006D60  B4D8               	btfsc	status,2,c
  7135  006D62  80D8               	bsf	status,0,c
  7136  006D64  0012               	return	
  7137                           ;rgl.c: 2492: }
  7138  006D66                     __end_of_Tstoi:
  7139                           ;rgl.c: 2499: bit Tnizsza(const unsigned char t)
  7140                           ;rgl.c: 2500: {
  7141  006D66                     _Tnizsza:
  7142  000000                     
  7143                           ; _t loaded to fsr2l
  7144  006D66  6ED9               	movwf	fsr2l,c
  7145                           ;rgl.c: 2501: return (rgl.x_t>t);
  7146  006D68  C267  F000         	movff	_rgl+2,btemp
  7147  006D6C  50D9               	movf	fsr2l,w,c
  7148  006D6E  BE00               	btfsc	btemp,7,c
  7149  006D70  D005               	goto	u5400
  7150  006D72  0AFF               	xorlw	255
  7151  006D74  2400               	addwf	btemp,w,c
  7152  006D76  E302               	bnc	u5400
  7153  006D78  80D8               	bsf	status,0,c
  7154  006D7A  0012               	return	
  7155  006D7C                     u5400:
  7156  006D7C  90D8               	bcf	status,0,c
  7157  006D7E  0012               	return	
  7158                           ;rgl.c: 2502: }
  7159  006D80                     __end_of_Tnizsza:
  7160                           ;rgl.c: 2508: bit Twyzsza(const unsigned char t)
  7161                           ;rgl.c: 2509: {
  7162  006D80                     _Twyzsza:
  7163  000000                     
  7164                           ; _t loaded to fsr2l
  7165  006D80  6ED9               	movwf	fsr2l,c
  7166                           ;rgl.c: 2510: return (rgl.x_t<(-1*t));
  7167  006D82  CFD9 F000          	movff	fsr2l,btemp
  7168  006D86  6A01               	clrf	btemp+1,c
  7169  006D88  1E00               	comf	btemp,f,c
  7170  006D8A  1E01               	comf	btemp+1,f,c
  7171  006D8C  4A00               	infsnz	btemp,f,c
  7172  006D8E  2A01               	incf	btemp+1,f,c
  7173  006D90  C267  F002         	movff	_rgl+2,btemp+2
  7174  006D94  6A03               	clrf	btemp+3,c
  7175  006D96  BE02               	btfsc	btemp+2,7,c
  7176  006D98  0603               	decf	btemp+3,f,c
  7177  006D9A  5003               	movf	btemp+3,w,c
  7178  006D9C  0A80               	xorlw	128
  7179  006D9E  6E04               	movwf	btemp+4,c
  7180  006DA0  5001               	movf	btemp+1,w,c
  7181  006DA2  0A80               	xorlw	128
  7182  006DA4  5C04               	subwf	btemp+4,w,c
  7183  006DA6  E102               	bnz	u5425
  7184  006DA8  5000               	movf	btemp,w,c
  7185  006DAA  5C02               	subwf	btemp+2,w,c
  7186  006DAC                     u5425:
  7187  006DAC  E202               	bc	u5420
  7188  006DAE  80D8               	bsf	status,0,c
  7189  006DB0  0012               	return	
  7190  006DB2                     u5420:
  7191  006DB2  90D8               	bcf	status,0,c
  7192  006DB4  0012               	return	
  7193                           ;rgl.c: 2511: }
  7194  006DB6                     __end_of_Twyzsza:
  7195                           ;rgl.c: 2515: bit Trowna(void)
  7196                           ;rgl.c: 2516: {
  7197  006DB6                     _Trowna:
  7198  000000                     
  7199                           ;rgl.c: 2517: return !rgl.x_t;
  7200  006DB6  EE02  F067         	lfsr	0,_rgl+2
  7201  006DBA  50EF               	movf	indf0,w,c
  7202  006DBC  90D8               	bcf	status,0,c
  7203  006DBE  B4D8               	btfsc	status,2,c
  7204  006DC0  80D8               	bsf	status,0,c
  7205  006DC2  0012               	return	
  7206                           ;rgl.c: 2518: }
  7207  006DC4                     __end_of_Trowna:
  7208                           ;rgl.c: 2524: bit TFrosnie(const unsigned char t
      +                          )
  7209                           ;rgl.c: 2525: {
  7210  006DC4                     _TFrosnie:
  7211  000000                     
  7212                           ; _t loaded to fsr2l
  7213  006DC4  6ED9               	movwf	fsr2l,c
  7214                           ;rgl.c: 2526: return (rgl.x_df>t);
  7215  006DC6  C26A  F000         	movff	_rgl+5,btemp
  7216  006DCA  50D9               	movf	fsr2l,w,c
  7217  006DCC  BE00               	btfsc	btemp,7,c
  7218  006DCE  D005               	goto	u5440
  7219  006DD0  0AFF               	xorlw	255
  7220  006DD2  2400               	addwf	btemp,w,c
  7221  006DD4  E302               	bnc	u5440
  7222  006DD6  80D8               	bsf	status,0,c
  7223  006DD8  0012               	return	
  7224  006DDA                     u5440:
  7225  006DDA  90D8               	bcf	status,0,c
  7226  006DDC  0012               	return	
  7227                           ;rgl.c: 2527: }
  7228  006DDE                     __end_of_TFrosnie:
  7229                           ;rgl.c: 2533: bit TFmaleje(const unsigned char t
      +                          )
  7230                           ;rgl.c: 2534: {
  7231  006DDE                     _TFmaleje:
  7232  000000                     
  7233                           ; _t loaded to fsr2l
  7234  006DDE  6ED9               	movwf	fsr2l,c
  7235                           ;rgl.c: 2535: return (rgl.x_df<(-1*t));
  7236  006DE0  CFD9 F000          	movff	fsr2l,btemp
  7237  006DE4  6A01               	clrf	btemp+1,c
  7238  006DE6  1E00               	comf	btemp,f,c
  7239  006DE8  1E01               	comf	btemp+1,f,c
  7240  006DEA  4A00               	infsnz	btemp,f,c
  7241  006DEC  2A01               	incf	btemp+1,f,c
  7242  006DEE  C26A  F002         	movff	_rgl+5,btemp+2
  7243  006DF2  6A03               	clrf	btemp+3,c
  7244  006DF4  BE02               	btfsc	btemp+2,7,c
  7245  006DF6  0603               	decf	btemp+3,f,c
  7246  006DF8  5003               	movf	btemp+3,w,c
  7247  006DFA  0A80               	xorlw	128
  7248  006DFC  6E04               	movwf	btemp+4,c
  7249  006DFE  5001               	movf	btemp+1,w,c
  7250  006E00  0A80               	xorlw	128
  7251  006E02  5C04               	subwf	btemp+4,w,c
  7252  006E04  E102               	bnz	u5465
  7253  006E06  5000               	movf	btemp,w,c
  7254  006E08  5C02               	subwf	btemp+2,w,c
  7255  006E0A                     u5465:
  7256  006E0A  E202               	bc	u5460
  7257  006E0C  80D8               	bsf	status,0,c
  7258  006E0E  0012               	return	
  7259  006E10                     u5460:
  7260  006E10  90D8               	bcf	status,0,c
  7261  006E12  0012               	return	
  7262                           ;rgl.c: 2536: }
  7263  006E14                     __end_of_TFmaleje:
  7264                           ;rgl.c: 2540: bit TFstoi(void)
  7265                           ;rgl.c: 2541: {
  7266  006E14                     _TFstoi:
  7267  000000                     
  7268                           ;rgl.c: 2542: return !rgl.x_df;
  7269  006E14  EE02  F06A         	lfsr	0,_rgl+5
  7270  006E18  50EF               	movf	indf0,w,c
  7271  006E1A  90D8               	bcf	status,0,c
  7272  006E1C  B4D8               	btfsc	status,2,c
  7273  006E1E  80D8               	bsf	status,0,c
  7274  006E20  0012               	return	
  7275                           ;rgl.c: 2543: }
  7276  006E22                     __end_of_TFstoi:
  7277                           ;rgl.c: 2546: void RestartMod(void)
  7278                           ;rgl.c: 2547: {
  7279  006E22                     _RestartMod:
  7280  000000                     
  7281                           ;rgl.c: 2548: rgl.btco=0;
  7282  006E22  0102               	movlb	_rgl shr (0+8)
  7283  006E24  9165               	bcf	_rgl& (0+255),0,b
  7284                           ;rgl.c: 2549: rgl.btcw=0;
  7285  006E26  9365               	bcf	_rgl& (0+255),1,b
  7286                           ;rgl.c: 2550: rgl.fz=0;
  7287  006E28  9565               	bcf	_rgl& (0+255),2,b
  7288                           ;rgl.c: 2551: rgl.med_up=0;
  7289  006E2A  9765               	bcf	_rgl& (0+255),3,b
  7290                           ;rgl.c: 2552: rgl.fast_up=0;
  7291  006E2C  9965               	bcf	_rgl& (0+255),4,b
  7292                           ;rgl.c: 2553: rgl.nmod=0;
  7293  006E2E  9B65               	bcf	_rgl& (0+255),5,b
  7294                           ;rgl.c: 2554: rgl.del1s=0;
  7295  006E30  9D65               	bcf	_rgl& (0+255),6,b
  7296                           ;rgl.c: 2555: rgl.deln1=0;
  7297  006E32  9F65               	bcf	_rgl& (0+255),7,b
  7298                           ;rgl.c: 2556: rgl.inv_mod=0;
  7299  006E34  9166               	bcf	(_rgl+1)& (0+255),0,b
  7300                           ;rgl.c: 2557: }
  7301  006E36  0012               	return	
  7302  006E38                     __end_of_RestartMod:
  7303  000000                     
  7304  000000                     
  7305  000000                     
  7306  000000                     
  7307  000000                     
  7308  000000                     
  7309  000000                     
  7310  000000                     
  7311  000000                     
  7312  000000                     
  7313  000000                     
  7314  000000                     
  7315  000000                     
  7316  000000                     
  7317  000000                     
  7318  000000                     
  7319  000000                     
  7320  000000                     
  7321  000000                     
  7322  000000                     
  7323  000000                     
  7324  000000                     
  7325  000000                     
  7326  000000                     
  7327  000000                     
  7328  000000                     
  7329  000000                     
  7330  000000                     
  7331  000000                     
  7332  000000                     
  7333  000000                     
  7334  000000                     
  7335  000000                     
  7336  000000                     
  7337  000000                     
  7338  000000                     
  7339  000000                     
  7340  000000                     
  7341  000000                     
  7342  000000                     
  7343  000000                     
  7344  000000                     
  7345  000000                     
  7346  000000                     
  7347  000000                     
  7348  000000                     
  7349  000000                     
  7350  000000                     
  7351  000000                     
  7352  000000                     
  7353  000000                     
  7354  000000                     
  7355  000000                     
  7356  000000                     
  7357  000000                     
  7358  000000                     
  7359  000000                     
  7360  000000                     
  7361  000000                     
  7362  000000                     
  7363  000000                     
  7364  000000                     
  7365  000000                     
  7366  000000                     
  7367  000000                     
  7368  000000                     
  7369  000000                     
  7370  000000                     
  7371  000000                     
  7372  000000                     
  7373  000000                     
  7374  000000                     
  7375  000000                     
  7376  000000                     
  7377  000000                     
  7378  000000                     
  7379  000000                     
  7380  000000                     
  7381  000000                     
  7382  000000                     
  7383  000000                     
  7384  000000                     
  7385  000000                     
  7386  000000                     
  7387  000000                     
  7388  000000                     
  7389  000000                     
  7390  000000                     
  7391  000000                     
  7392  000000                     
  7393  000000                     
  7394  000000                     
  7395  000000                     
  7396  000000                     
  7397  000000                     
  7398  000000                     
  7399  000000                     
  7400  000000                     
  7401  000000                     
  7402  000000                     
  7403  000000                     
  7404  000000                     
  7405  000000                     
  7406  000000                     
  7407  000000                     
  7408  000000                     
  7409  000000                     
  7410  000000                     
  7411  000000                     
  7412  000000                     
  7413  000000                     
  7414  000000                     
  7415  000000                     
  7416  000000                     
  7417  000000                     
  7418  000000                     
  7419  000000                     
  7420  000000                     
  7421  000000                     
  7422  000000                     
  7423  000000                     
  7424  000000                     
  7425  000000                     
  7426  000000                     
  7427  000000                     
  7428  000000                     
  7429  000000                     
  7430  000000                     
  7431  000000                     
  7432  000000                     
  7433  000000                     
  7434  000000                     
  7435  000000                     
  7436  000000                     
  7437  000000                     
  7438  000000                     
  7439  000000                     
  7440  000000                     
  7441  000000                     
  7442  000000                     
  7443  000000                     
  7444  000000                     
  7445  000000                     
  7446  000000                     
  7447  000000                     
  7448  000000                     
  7449  000000                     
  7450  000000                     
  7451  000000                     
  7452  000000                     
  7453  000000                     
  7454  000000                     
  7455  000000                     
  7456  000000                     
  7457  000000                     
  7458  000000                     
  7459  000000                     
  7460  000000                     
  7461  000000                     
  7462  000000                     
  7463  000000                     
  7464  000000                     
  7465  000000                     
  7466  000000                     
  7467  000000                     
  7468  000000                     
  7469  000000                     
  7470  000000                     
  7471  000000                     
  7472  000000                     
  7473  000000                     
  7474  000000                     
  7475  000000                     
  7476  000000                     
  7477  000000                     
  7478  000000                     
  7479  000000                     
  7480  000000                     
  7481  000000                     
  7482  000000                     
  7483  000000                     
  7484  000000                     
  7485  000000                     
  7486  000000                     
  7487  000000                     
  7488  000000                     
  7489  000000                     
  7490  000000                     
  7491  000000                     
  7492  000000                     
  7493  000000                     
  7494  000000                     
  7495  000000                     
  7496  000000                     
  7497  000000                     
  7498  000000                     
  7499  000000                     
  7500  000000                     
  7501  000000                     
  7502  000000                     
  7503  000000                     
  7504  000000                     
  7505  000000                     
  7506  000000                     
  7507  000000                     
  7508  000000                     
  7509  000000                     
  7510  000000                     
  7511  000000                     
  7512  000000                     
  7513  000000                     
  7514  000000                     
  7515  000000                     
  7516  000000                     
  7517  000000                     
  7518  000000                     
  7519  000000                     
  7520  000000                     
  7521  000000                     
  7522  000000                     
  7523  000000                     
  7524  000000                     
  7525  000000                     
  7526  000000                     
  7527  000000                     
  7528  000000                     
  7529  000000                     
  7530  000000                     
  7531  000000                     
  7532  000000                     
  7533  000000                     
  7534  000000                     
  7535  000000                     
  7536  000000                     
  7537  000000                     
  7538  000000                     
  7539  000000                     
  7540  000000                     
  7541  000000                     
  7542  000000                     
  7543  000000                     
  7544  000000                     
  7545  000000                     
  7546  000000                     
  7547  000000                     
  7548  000000                     
  7549  000000                     
  7550  000000                     
  7551  000000                     
  7552  000000                     
  7553  000000                     
  7554  000000                     
  7555  000000                     
  7556  000000                     
  7557  000000                     
  7558  000000                     
  7559  000000                     
  7560  000000                     
  7561  000000                     
  7562  000000                     
  7563  000000                     
  7564  000000                     
  7565  000000                     
  7566  000000                     
  7567  000000                     
  7568  000000                     
  7569  000000                     
  7570  000000                     
  7571  000000                     
  7572  000000                     
  7573  000000                     
  7574  000000                     
  7575  000000                     
  7576  000000                     
  7577  000000                     
  7578  000000                     
  7579  000000                     
  7580  000000                     
  7581  000000                     
  7582  000000                     
  7583  000000                     
  7584  000000                     
  7585  000000                     
  7586  000000                     
  7587  000000                     
  7588  000000                     
  7589  000000                     
  7590  000000                     
  7591  000000                     
  7592  000000                     
  7593  000000                     
  7594  000000                     
  7595  000000                     
  7596  000000                     
  7597  000000                     
  7598  000000                     
  7599  000000                     
  7600  000000                     
  7601  000000                     
  7602  000000                     
  7603  000000                     
  7604  000000                     
  7605  000000                     
  7606  000000                     
  7607  000000                     
  7608  000000                     
  7609  000000                     
  7610  000000                     
  7611  000000                     
  7612  000000                     
  7613  000000                     
  7614  000000                     
  7615  000000                     
  7616  000000                     
  7617  000000                     
  7618  000000                     
  7619  000000                     
  7620  000000                     
  7621  000000                     
  7622  000000                     
  7623  000000                     
  7624  000000                     
  7625  000000                     
  7626  000000                     
  7627  000000                     
  7628  000000                     
  7629  000000                     
  7630  000000                     
  7631  000000                     
  7632  000000                     
  7633  000000                     
  7634  000000                     
  7635  000000                     
  7636  000000                     
  7637  000000                     
  7638  000000                     
  7639  000000                     
  7640  000000                     
  7641  000000                     
  7642  000000                     
  7643  000000                     
  7644  000000                     
  7645  000000                     
  7646  000000                     
  7647  000000                     
  7648  000000                     
  7649  000000                     
  7650  000000                     
  7651  000000                     
  7652  000000                     
  7653  000000                     
  7654  000000                     
  7655  000000                     
  7656  000000                     
  7657  000000                     
  7658  000000                     
  7659  000000                     
  7660  000000                     
  7661  000000                     
  7662  000000                     
  7663  000000                     
  7664  000000                     
  7665  000000                     
  7666  000000                     
  7667  000000                     
  7668  000000                     
  7669  000000                     
  7670  000000                     
  7671  000000                     
  7672  000000                     
  7673  000000                     
  7674  000000                     
  7675  000000                     
  7676  000000                     
  7677  000000                     
  7678  000000                     
  7679  000000                     
  7680  000000                     
  7681  000000                     
  7682  000000                     
  7683  000000                     
  7684  000000                     
  7685  000000                     
  7686  000000                     
  7687  000000                     
  7688  000000                     
  7689  000000                     
  7690  000000                     
  7691  000000                     
  7692  000000                     
  7693  000000                     
  7694  000000                     
  7695  000000                     
  7696  000000                     
  7697  000000                     
  7698  000000                     
  7699  000000                     
  7700  000000                     
  7701  000000                     
  7702  000000                     
  7703  000000                     
  7704  000000                     
  7705  000000                     
  7706  000000                     
  7707  000000                     
  7708  000000                     
  7709  000000                     
  7710  000000                     
  7711  000000                     
  7712  000000                     
  7713  000000                     
  7714  000000                     
  7715  000000                     
  7716  000000                     
  7717  000000                     
  7718  000000                     
  7719  000000                     
  7720  000000                     
  7721  000000                     
  7722  000000                     
  7723  000000                     
  7724  000000                     
  7725  000000                     
  7726  000000                     
  7727  000000                     
  7728  000000                     
  7729  000000                     
  7730  000000                     
  7731  000000                     
  7732  000000                     
  7733  000000                     
  7734  000000                     
  7735  000000                     
  7736  000000                     
  7737  000000                     
  7738  000000                     
  7739                           
  7740                           	psect	bigbss
  7741  000ECA                     F1782:
  7742  000ECA                     	ds	1
  7743  000ECA                     F1815:
  7744  000ECA                     	ds	1
  7745  000ECA                     F1816:
  7746  000ECA                     	ds	1
  7747  000ECA                     F1817:
  7748  000ECA                     	ds	1
  7749  000ECA                     F1818:
  7750  000ECA                     	ds	1
  7751  000ECA                     F1819:
  7752  000ECA                     	ds	1
  7753  000ECA                     F1820:
  7754  000ECA                     	ds	1
  7755  000ECA                     F1821:
  7756  000ECA                     	ds	1
  7757  000ECA                     F1834:
  7758  000ECA                     	ds	1
  7759  000ECA                     F1849:
  7760  000ECA                     	ds	1
  7761  000ECA                     F1856:
  7762  000ECA                     	ds	1
  7763  000ECA                     F1857:
  7764  000ECA                     	ds	1
  7765  000ECA                     F1858:
  7766  000ECA                     	ds	1
  7767  000ECA                     F1859:
  7768  000ECA                     	ds	1
  7769  000ECA                     F1860:
  7770  000ECA                     	ds	1
  7771  000ECA                     F1861:
  7772  000ECA                     	ds	1
  7773  000ECA                     F1862:
  7774  000ECA                     	ds	1
  7775  000ECA                     F1869:
  7776  000ECA                     	ds	1
  7777  000ECA                     F1886:
  7778  000ECA                     	ds	1
  7779  000ECA                     F1893:
  7780  000ECA                     	ds	1
  7781  000ECA                     F1894:
  7782  000ECA                     	ds	1
  7783  000ECA                     F1895:
  7784  000ECA                     	ds	1
  7785  000ECA                     F1896:
  7786  000ECA                     	ds	1
  7787  000ECA                     F1897:
  7788  000ECA                     	ds	1
  7789  000ECA                     F1898:
  7790  000ECA                     	ds	1
  7791  000ECA                     F1899:
  7792  000ECA                     	ds	1
  7793  000000                     
  7794  000000                     
  7795  000000                     
  7796  000000                     
  7797  000000                     
  7798  000000                     
  7799  000000                     
  7800  000000                     
  7801  000000                     
  7802  000000                     
  7803  000000                     
  7804  000000                     
  7805  000000                     
  7806  000000                     
  7807  000000                     
  7808  000000                     
  7809  000000                     
  7810  000000                     
  7811  000000                     
  7812  000000                     
  7813  000000                     
  7814  000000                     
  7815  000000                     
  7816  000000                     
  7817  000000                     
  7818  000000                     
  7819  000000                     
  7820  000000                     
  7821  000000                     
  7822  000000                     
  7823  000000                     
  7824  000000                     
  7825  000000                     
  7826  000000                     
  7827  000000                     
  7828  000000                     
  7829  000000                     
  7830  000000                     
  7831  000000                     
  7832  000000                     
  7833  000000                     
  7834  000000                     
  7835  000000                     
  7836  000000                     
  7837  000000                     
  7838  000000                     
  7839  000000                     
  7840  000000                     
  7841  000000                     
  7842  000000                     
  7843  000000                     
  7844  000000                     
  7845  000000                     
  7846  000000                     
  7847  000000                     
  7848  000000                     
  7849  000000                     
  7850  000000                     
  7851  000000                     
  7852  000000                     
  7853  000000                     
  7854  000000                     
  7855  000000                     
  7856  000000                     
  7857  000000                     
  7858  000000                     
  7859  000000                     
  7860  000000                     
  7861  000000                     
  7862  000000                     
  7863  000000                     
  7864  000000                     
  7865  000000                     
  7866  000000                     
  7867  000000                     
  7868  000000                     
  7869  000000                     
  7870  000000                     
  7871  000000                     
  7872  000000                     
  7873  000000                     
  7874  000000                     
  7875  000000                     
  7876  000000                     
  7877  000000                     
  7878  000000                     
  7879  000000                     
  7880  000000                     
  7881  000000                     
  7882  000000                     
  7883  000000                     
  7884  000000                     
  7885  000000                     
  7886  000000                     
  7887  000000                     
  7888  000000                     
  7889  000000                     
  7890  000000                     
  7891  000000                     
  7892  000000                     
  7893  000000                     
  7894  000000                     
  7895  000000                     
  7896  000000                     
  7897  000000                     
  7898  000000                     
  7899  000000                     
  7900  000000                     
  7901  000000                     
  7902  000000                     
  7903  000000                     
  7904  000000                     
  7905  000000                     
  7906  000000                     
  7907  000000                     
  7908  000000                     
  7909  000000                     
  7910  000000                     
  7911  000000                     
  7912  000000                     
  7913  000000                     
  7914  000000                     
  7915  000000                     
  7916  000000                     
  7917  000000                     
  7918  000ECA                     _pwm_center:
  7919  000ECA                     	ds	1
  7920  000ECA                     _pwm_kwr:
  7921  000ECA                     	ds	1
  7922  000ECA                     _tmr:
  7923  000ECA                     	ds	1
  7924  000ECA                     _tmr2:
  7925  000ECA                     	ds	1
  7926  000000                     
  7927  000000                     
  7928  000000                     
  7929  000000                     
  7930  000000                     
  7931  000000                     
  7932  000000                     
  7933                           
  7934                           	psect	bss
  7935  000265                     _rgl:
  7936  000265                     	ds	10
  7937                           
  7938                           	psect	temp
  7939  000000                     btemp:
  7940  000000                     	ds	8
  7941                           tblptrh	equ	0xFF7
  7942                           tblptrl	equ	0xFF6
  7943                           prodh	equ	0xFF4
  7944                           prodl	equ	0xFF3
  7945                           indf0	equ	0xFEF
  7946                           fsr0h	equ	0xFEA
  7947                           fsr0l	equ	0xFE9
  7948                           wreg	equ	0xFE8
  7949                           fsr1l	equ	0xFE1
  7950                           fsr2l	equ	0xFD9
  7951                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:44:53 2020

                    _M 0100              ?a_ModDkCO 00E9  
            ?a_ModDkCW 00E9                     l20 4108  
                   l21 4100                     l40 42A2  
                   l32 41DA                     l24 415A  
                   l41 429E                     l33 41E2  
                   l25 4142                     l50 435C  
                   l34 4220                     l26 414E  
                   l18 4364                     l35 421C  
                   l27 4162                     l19 40C6  
                   l52 438C                     l44 42DC  
                   l28 41A0                     l61 4434  
                   l53 43DC                     l45 42E4  
                   l29 419C                     l70 45AE  
                   l46 4322                     l38 4260  
                   l71 45F4                     l55 43D4  
                   l47 431E                     l39 4264  
                   l72 45FA                     l64 4472  
                   l81 473C                     l66 44AC  
                   l58 4402                     l91 4766  
                   l83 46F0                     l75 4628  
                   l67 44B6                     l59 4406  
                   l92 476C                     l84 4706  
                   l76 468E                     l68 4514  
                   l93 479A                     l85 4734  
                   l77 46C6                     l94 47A0  
                   l78 46C0                     l95 47AE  
                   l88 485A                     l89 47BE  
                   l99 47D8              ?a_ModZgCO 00E9  
            ?a_ModZgCW 00E9               _StartCO2 6342  
             _StartCO4 5A40               _StartMCW 49E6  
           ?a_ModDkCW2 00E9             ?a_ModDkCW4 00E9  
           ?a_FirstPCW 00E9                    l100 47DE  
                  l101 4816                    l111 48BC  
                  l120 492A                    l112 48A4  
                  l104 484A                    l201 514A  
                  l113 48AE                    l105 4844  
                  l210 51B6                    l203 5162  
                  l123 4982                    l300 56A4  
                  l220 523A                    l212 51CE  
                  l140 4AC8                    l116 48FC  
                  l301 56AC                    l141 4BAA  
                  l125 497A                    l117 48F4  
                  l302 5720                    l206 5208  
                  l142 4B4A                    l134 49D4  
                  l223 524A                    l207 51D4  
                  l151 4CA0                    l143 4BA4  
                  l135 49D8                    l400 5E32  
                  l320 590C                    l240 538A  
                  l224 526A                    l216 51F2  
                  l208 519A                    l152 4D80  
                  l401 5E2C                    l225 52B2  
                  l153 4D20                    l145 4BC4  
                  l410 5E9E                    l314 5820  
                  l306 5798                    l250 53EA  
                  l242 5380                    l234 5308  
                  l226 52A8                    l154 4D7A  
                  l146 4BB8                    l411 5EC6  
                  l331 59E2                    l315 5828  
                  l251 53F2                    l235 5314  
                  l219 523E                    l171 4E24  
                  l139 4AC4                    l420 5F72  
                  l404 5F7C                    l332 59DC  
                  l316 589A                    l236 5320  
                  l180 4F92                    l156 4D98  
                  l148 4C36                    l501 6378  
                  l413 5ECA                    l405 5E5A  
                  l341 5A3C                    l325 597C  
                  l261 5496                    l237 5402  
                  l229 52E6                    l181 4FD8  
                  l157 4D8E                    l149 4C8E  
                  l510 63EA                    l502 637C  
                  l430 601A                    l414 5ED6  
                  l406 5E66                    l342 5A16  
                  l326 5980                    l270 5500  
                  l254 542E                    l246 53A6  
                  l238 5356                    l182 4FDE  
                  l174 4E56                    l431 6016  
                  l415 5EF6                    l407 5E70  
                  l327 59E8                    l255 5458  
                  l239 538E                    l159 4DA4  
                  l520 6440                    l512 63FA  
                  l416 5F3E                    l264 54D2  
                  l256 5454                    l248 53B4  
                  l192 52F0                    l176 4E90  
                  l601 6A28                    l433 600C  
                  l425 5F94                    l417 5F34  
                  l361 5ADE                    l345 5A22  
                  l337 59F4                    l281 5614  
                  l265 54CA                    l193 50DA  
                  l177 4E9A                    l610 6AAA  
                  l530 6482                    l506 63DA  
                  l442 60A2                    l426 5FA0  
                  l362 5AD8                    l282 55E0  
                  l274 5592                    l258 544A  
                  l194 50E6                    l186 5014  
                  l178 4EF8                    l603 6AAE  
                  l531 64A2                    l507 63D4  
                  l443 60CC                    l427 5FAC  
                  l275 555E                    l195 50F0  
                  l187 507A                    l612 6AA0  
                  l604 6A52                    l540 6540  
                  l452 6146                    l444 60C8  
                  l428 6076                    l380 5B6C  
                  l356 5A76                    l348 5A2E  
                  l292 5656                    l188 50B2  
                  l541 659E                    l453 613E  
                  l437 6050                    l429 5FE2  
                  l381 5B8C                    l365 5AEE  
                  l357 5A7A                    l293 565C  
                  l269 5510                    l189 50AC  
                  l630 6BA2                    l550 6748  
                  l534 64FC                    l446 60BE  
                  l438 6058                    l390 5C2A  
                  l286 560E                    l198 5172  
                  l623 6B66                    l615 6AEC  
                  l607 6A84                    l551 6742  
                  l543 6638                    l535 64E8  
                  l463 61B4                    l439 6066  
                  l391 5C88                    l367 5AFE  
                  l279 558C                    l199 512E  
                  l624 6B56                    l560 67C6  
                  l544 667E                    l464 61BA  
                  l384 5BE6                    l296 5984  
                  l288 5626                    l641 6C68  
                  l633 6BCE                    l545 6684  
                  l473 6288                    l457 6184  
                  l449 610A                    l393 5D22  
                  l385 5BD2                    l297 5686  
                  l642 6C1E                    l618 6B28  
                  l570 6874                    l562 67FE  
                  l554 68B2                    l490 6316  
                  l482 62C6                    l474 628E  
                  l458 6174                    l394 5D68  
                  l298 568A                    l619 6B20  
                  l571 686A                    l563 67DE  
                  l555 6770                    l539 6536  
                  l395 5D6E                    l299 5812  
                  l644 633A                    l580 68D6  
                  l556 677C                    l548 66AA  
                  l645 6C3A                    l637 6BE0  
                  l629 6B9C                    l581 68E2  
                  l557 6786                    l549 6710  
                  l493 6322                    l389 5C20  
                  l662 6CF0                    l638 6BEE  
                  l590 699A                    l582 69FA  
                  l574 68A8                    l566 67F6  
                  l486 633A                    l478 62E2  
                  l398 5D94                    l663 6CF4  
                  l583 6918                    l487 630A  
                  l479 629A                    l399 5DFA  
                  l648 6C56                    l592 6990  
                  l584 699E                    l568 680C  
                  l657 6CB2                    l585 6942  
                  l569 682C                    l579 68CA  
                  l596 69D4                    l588 6968  
                  l597 69DC                    l598 69EA  
                  u150 422C                    u420 4452  
                  u325 43CC                    u505 45EC  
                  u381 4444                    u615 472C  
                  u535 4686                    u545 46B8  
                  u465 4566                    u580 46E2  
                  u805 48EC                    u725 480E  
                  u485 45A0                    u815 4922  
                  u735 483C                    u665 4792  
                  u845 4972                    u775 4898  
                  u945 4AB8                    u995 4B9C  
                  _PWM 01DB             ?a_ModZgCW2 00E9  
           ?a_ModZgCW4 00E9             ?a_ModPruCW 00E9  
                  _rgl 0265              _StartMCO3 6CC2  
            _StartMCW2 638C              _StartMCW4 5A88  
                  _tmr 0EE6      __end_of_StartMCO3 6D08  
    __end_of_StartMCW2 63BA      __end_of_StartMCW4 5ABE  
                  wreg 000FE8              _StartRTdS E6A2  
           _RestartMod 6E22                   F1820 0ED0  
                 F1821 0ED1                   F1815 0ECB  
                 F1816 0ECC                   F1817 0ECD  
                 F1834 0ED2                   F1818 0ECE  
                 F1819 0ECF                   F1860 0ED8  
                 F1861 0ED9                   F1862 0EDA  
                 F1782 0ECA                   F1856 0ED4  
                 F1857 0ED5                   F1849 0ED3  
                 F1858 0ED6                   F1859 0ED7  
   __end_of_RestartMod 6E38                   F1893 0EDD  
                 F1869 0EDB                   F1894 0EDE  
                 F1886 0EDC                   F1895 0EDF  
                 F1896 0EE0                   F1897 0EE1  
                 F1898 0EE2                   F1899 0EE3  
                 u1035 4C88                   u2105 53E2  
                 u2205 54C2                   u1325 5072  
                 u1245 4F4A                   u1335 50A4  
                 u1095 4D72                   u2305 5556  
                 u1265 4F84                   u2315 5584  
                 u3205 5E24                   u3125 5CDA  
                 u1285 4FD0                   u1640 5192  
                 u3145 5D14                   u2505 5708  
                 u2195 548E                   u1820 51EA  
                 u3165 5D60                   u2365 55D8  
                 u2375 5606                   u4305 673A  
                 u4225 65F0                   u3505 6048  
                 u2545 577C                   u3195 5DF2  
                 u2715 5966                   u2635 5884  
                 u4245 662A                   u3605 6102  
                 u3615 6136                   u3375 5F2C  
                 u5400 6D7C                   u4440 67C2  
                 u4265 6676                   u3385 5F6A  
                 u2585 57F6                   u1945 52A0  
                 u5315 6CAA                   u2675 58F6  
                 u1955 52DE                   u5420 6DB2  
                 u3820 62BC                   u4390 67A6  
                 u4535 6862                   u4295 6708  
                 u2775 59D4                   u5440 6DDA  
                 u5360 6D1E                   u5425 6DAC  
                 u4545 68A0                   u5460 6E10  
                 u5380 6D54                   u3860 62D8  
                 u3775 6280                   u5465 6E0A  
                 u5385 6D4E                   u4775 69CC  
                 u4985 6AE4                   u4995 6B18  
                 _DtCO 01B6                   _DtCW 01A7  
            _WriteOPWM D55A                   _RTdS E6C6  
      __end_of_ClrMod2 6410        __end_of_ClrMod4 5B1C  
          ?a_ModPruCW2 00E9            ?a_ModPruCW4 00E9  
           _StartMCO1F 4382                   aldiv F020  
                 _tmr2 0EE7                   fsr0h 000FEA  
                 indf0 000FEF                   fsr0l 000FE9  
                 fsr1l 000FE1                   fsr2l 000FD9  
                 btemp 0000                   awdiv F092  
                 awmul F124     __end_of_StartMCO1F 441A  
                 lwdiv EF70        __end_of_ModDkCO 46CC  
      __end_of_ModDkCW 50B8                   prodl 000FF3  
                 lwmul F124             _pwm_center 0EE4  
      __end_of_ModToCO 4DDA        __end_of_ModToCW 4DCE  
      __end_of_ModZgCO 4604        __end_of_ModZgCW 4FE8  
      __end_of_Moduluj 4382        __end_of_PropCO2 6C70  
      __end_of_PropCO4 6342        __end_of_Tmaleje 6D58  
      __end_of_PropOPT 499E        __end_of_StartCO 49E6  
      __end_of_Tnizsza 6D80        __end_of_Trosnie 6D22  
      __end_of_Twyzsza 6DB6          __end_of_Tstoi 6D66  
          _IncConstCO2 6446            _IncConstCW2 6428  
                _DtKNF 0230    __end_of_IncConstCO2 6456  
  __end_of_IncConstCW2 6446          _IncConstCOCW4 5B34  
           used_btemp0 0001             used_btemp1 0001  
           used_btemp2 0001             used_btemp3 0001  
           used_btemp4 0001             used_btemp5 0001  
           used_btemp6 0001             used_btemp7 0001  
                _Tstoi 6D58       __end_of_TFmaleje 6E14  
     __end_of_IncMaxCO 4932       __end_of_IncMaxCW 566C  
     __end_of_TFrosnie 6DDE       __end_of_ModDkCW2 674E  
     __end_of_ModDkCW4 5E38       __end_of_FirstPCW 4DAA  
              _ClrMod2 6400                _ClrMod4 5B04  
                status 000FD8  __end_of_IncConstCOCW4 5B44  
     __end_of_ModToCO2 6428       __end_of_ModToCO3 6CC2  
     __end_of_ModToCO4 5B34       __end_of_ModToCW2 641C  
     __end_of_ModToCW3 6CBA       __end_of_ModToCW4 5B28  
     __end_of_ModZgCW2 668E       __end_of_ModZgCW4 5D78  
     __end_of_ModPruCO 4860       __end_of_ModPruCW 54E2  
     __end_of_ModPrzCO 4992       __end_of_ModPrzCW 59FA  
              _ModDkCO 4604                _ModDkCW 4FE8  
              _ModToCO 4DCE                _ModToCW 4DC2  
              _ModZgCO 441A                _ModZgCW 4E06  
              _PmpToDW CEDC                _PmpToUP CE8C  
              _Moduluj 40C4                __Lparam 00E9  
              _PropCO2 6BFC                _PropCO4 62F0  
              _Tmaleje 6D22                _PropOPT 4992  
              _StartCO 499E                _Tnizsza 6D66  
              _Trosnie 6D08       __end_of_StartCO2 638C  
     __end_of_StartCO4 5A88       __end_of_StartMCW 4A74  
              _Twyzsza 6D80                __ramtop 1000  
       __end_of_ClrMod 4DC2         __end_of_TFstoi 6E22  
       __end_of_PropCO 5A40         __end_of_Trowna 6DC4  
          _ReadDataCO2 6456            _ReadDataCO4 5B44  
              _pwm_kwr 0EE5            _ReadDataCW2 6460  
          _ReadDataCW4 5B4E    __end_of_ReadDataCO2 6460  
  __end_of_ReadDataCO4 5B4E    __end_of_ReadDataCW2 6472  
  __end_of_ReadDataCW4 5B60           _IncConstCOCW 4DDA  
               _ClrMod 4DAA   __end_of_IncConstCOCW 4DEA  
               _TFstoi 6E14                 _PropCO 59FA  
               _Trowna 6DB6                 aldiv_f F170  
               almul_f F15C             _ReadDataCO 4DEA  
           _ReadDataCW 4DF4              _IncMaxCW2 6B38  
            _IncMaxCW4 6156      __end_of_IncMaxCW2 6BB2  
    __end_of_IncMaxCW4 61CA     __end_of_ReadDataCO 4DF4  
   __end_of_ReadDataCW 4E06              _FirstPCW2 63BA  
            _FirstPCW4 5ABE                 tblptrh 000FF7  
               tblptrl 000FF6      __end_of_FirstPCW2 6400  
    __end_of_FirstPCW4 5B04               _TFmaleje 6DDE  
             _IncMaxCO 4860               _IncMaxCW 54E2  
             _TFrosnie 6DC4              _ModPruCW2 674E  
            _ModPruCW4 5E38              _ModPrzCW2 6BB2  
            _ModPrzCW4 61CA      __end_of_ModPruCW2 6B38  
    __end_of_ModPruCW4 6156      __end_of_ModPrzCW2 6BFC  
    __end_of_ModPrzCW4 62F0               _ModDkCW2 668E  
             _ModDkCW4 5D78               _FirstPCW 4A74  
             _ModToCO2 641C               _ModToCO3 6CBA  
             _ModToCO4 5B28               _ModToCW2 6410  
             _ModToCW3 6C70               _ModToCW4 5B1C  
             _ModZgCW2 6472               _ModZgCW4 5B60  
             _ModPruCO 46CC               _ModPruCW 50B8  
             _ModPrzCO 4932               _ModPrzCW 566C  
