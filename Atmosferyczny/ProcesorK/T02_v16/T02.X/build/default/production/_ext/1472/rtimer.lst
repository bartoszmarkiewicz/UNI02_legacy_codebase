

HI-TECH Software PICC-18 Macro Assembler V9.51PL3
                                                       Mon Sep 14 17:44:52 2020


     1                           	processor	18F46K20
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	rbss,global,common,class=COMRAM,space=1,d
      +                          elta=1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	text
    99                           ;pic18f45k20.h: 20: static volatile near unsigne
      +                          d char TOSU @ 0xFFF;
   100                           ;pic18f45k20.h: 21: static volatile near unsigne
      +                          d char TOSH @ 0xFFE;
   101                           ;pic18f45k20.h: 22: static volatile near unsigne
      +                          d char TOSL @ 0xFFD;
   102                           ;pic18f45k20.h: 23: static volatile near unsigne
      +                          d char STKPTR @ 0xFFC;
   103                           ;pic18f45k20.h: 24: static volatile near unsigne
      +                          d char PCLATU @ 0xFFB;
   104                           ;pic18f45k20.h: 25: static volatile near unsigne
      +                          d char PCLATH @ 0xFFA;
   105                           ;pic18f45k20.h: 26: static volatile near unsigne
      +                          d char PCL @ 0xFF9;
   106                           ;pic18f45k20.h: 27: static volatile far unsigned
      +                           char * TBLPTR @ 0xFF6;
   107                           ;pic18f45k20.h: 28: static volatile near unsigne
      +                          d char TBLPTRU @ 0xFF8;
   108                           ;pic18f45k20.h: 29: static volatile near unsigne
      +                          d char TBLPTRH @ 0xFF7;
   109                           ;pic18f45k20.h: 30: static volatile near unsigne
      +                          d char TBLPTRL @ 0xFF6;
   110                           ;pic18f45k20.h: 31: static volatile near unsigne
      +                          d char TABLAT @ 0xFF5;
   111                           ;pic18f45k20.h: 32: static volatile near unsigne
      +                          d char PRODH @ 0xFF4;
   112                           ;pic18f45k20.h: 33: static volatile near unsigne
      +                          d char PRODL @ 0xFF3;
   113                           ;pic18f45k20.h: 34: static volatile near unsigne
      +                          d char INTCON @ 0xFF2;
   114                           ;pic18f45k20.h: 35: static near unsigned char IN
      +                          TCON2 @ 0xFF1;
   115                           ;pic18f45k20.h: 36: static volatile near unsigne
      +                          d char INTCON3 @ 0xFF0;
   116                           ;pic18f45k20.h: 37: static volatile near unsigne
      +                          d char INDF0 @ 0xFEF;
   117                           ;pic18f45k20.h: 38: static volatile near unsigne
      +                          d char POSTINC0 @ 0xFEE;
   118                           ;pic18f45k20.h: 39: static volatile near unsigne
      +                          d char POSTDEC0 @ 0xFED;
   119                           ;pic18f45k20.h: 40: static volatile near unsigne
      +                          d char PREINC0 @ 0xFEC;
   120                           ;pic18f45k20.h: 41: static volatile near unsigne
      +                          d char PLUSW0 @ 0xFEB;
   121                           ;pic18f45k20.h: 42: static volatile near unsigne
      +                          d char FSR0H @ 0xFEA;
   122                           ;pic18f45k20.h: 43: static volatile near unsigne
      +                          d char FSR0L @ 0xFE9;
   123                           ;pic18f45k20.h: 44: static volatile near unsigne
      +                          d char WREG @ 0xFE8;
   124                           ;pic18f45k20.h: 45: static volatile near unsigne
      +                          d char INDF1 @ 0xFE7;
   125                           ;pic18f45k20.h: 46: static volatile near unsigne
      +                          d char POSTINC1 @ 0xFE6;
   126                           ;pic18f45k20.h: 47: static volatile near unsigne
      +                          d char POSTDEC1 @ 0xFE5;
   127                           ;pic18f45k20.h: 48: static volatile near unsigne
      +                          d char PREINC1 @ 0xFE4;
   128                           ;pic18f45k20.h: 49: static volatile near unsigne
      +                          d char PLUSW1 @ 0xFE3;
   129                           ;pic18f45k20.h: 50: static volatile near unsigne
      +                          d char FSR1H @ 0xFE2;
   130                           ;pic18f45k20.h: 51: static volatile near unsigne
      +                          d char FSR1L @ 0xFE1;
   131                           ;pic18f45k20.h: 52: static near unsigned char BS
      +                          R @ 0xFE0;
   132                           ;pic18f45k20.h: 53: static volatile near unsigne
      +                          d char INDF2 @ 0xFDF;
   133                           ;pic18f45k20.h: 54: static volatile near unsigne
      +                          d char POSTINC2 @ 0xFDE;
   134                           ;pic18f45k20.h: 55: static volatile near unsigne
      +                          d char POSTDEC2 @ 0xFDD;
   135                           ;pic18f45k20.h: 56: static volatile near unsigne
      +                          d char PREINC2 @ 0xFDC;
   136                           ;pic18f45k20.h: 57: static volatile near unsigne
      +                          d char PLUSW2 @ 0xFDB;
   137                           ;pic18f45k20.h: 58: static volatile near unsigne
      +                          d char FSR2H @ 0xFDA;
   138                           ;pic18f45k20.h: 59: static volatile near unsigne
      +                          d char FSR2L @ 0xFD9;
   139                           ;pic18f45k20.h: 60: static volatile near unsigne
      +                          d char STATUS @ 0xFD8;
   140                           ;pic18f45k20.h: 61: static volatile near unsigne
      +                          d char TMR0H @ 0xFD7;
   141                           ;pic18f45k20.h: 62: static volatile near unsigne
      +                          d char TMR0L @ 0xFD6;
   142                           ;pic18f45k20.h: 64: static volatile near unsigne
      +                          d int TMR0 @ 0xFD6;
   143                           ;pic18f45k20.h: 65: static near unsigned char T0
      +                          CON @ 0xFD5;
   144                           ;pic18f45k20.h: 66: static volatile near unsigne
      +                          d char OSCCON @ 0xFD3;
   145                           ;pic18f45k20.h: 67: static volatile near unsigne
      +                          d char HLVDCON @ 0xFD2;
   146                           ;pic18f45k20.h: 68: static volatile near unsigne
      +                          d char WDTCON @ 0xFD1;
   147                           ;pic18f45k20.h: 69: static volatile near unsigne
      +                          d char RCON @ 0xFD0;
   148                           ;pic18f45k20.h: 70: static volatile near unsigne
      +                          d char TMR1H @ 0xFCF;
   149                           ;pic18f45k20.h: 71: static volatile near unsigne
      +                          d char TMR1L @ 0xFCE;
   150                           ;pic18f45k20.h: 73: static volatile near unsigne
      +                          d int TMR1 @ 0xFCE;
   151                           ;pic18f45k20.h: 74: static near unsigned char T1
      +                          CON @ 0xFCD;
   152                           ;pic18f45k20.h: 75: static volatile near unsigne
      +                          d char TMR2 @ 0xFCC;
   153                           ;pic18f45k20.h: 76: static near unsigned char PR
      +                          2 @ 0xFCB;
   154                           ;pic18f45k20.h: 77: static near unsigned char T2
      +                          CON @ 0xFCA;
   155                           ;pic18f45k20.h: 78: static volatile near unsigne
      +                          d char SSPBUF @ 0xFC9;
   156                           ;pic18f45k20.h: 79: static near unsigned char SS
      +                          PADD @ 0xFC8;
   157                           ;pic18f45k20.h: 80: static volatile near unsigne
      +                          d char SSPSTAT @ 0xFC7;
   158                           ;pic18f45k20.h: 81: static volatile near unsigne
      +                          d char SSPCON1 @ 0xFC6;
   159                           ;pic18f45k20.h: 82: static volatile near unsigne
      +                          d char SSPCON2 @ 0xFC5;
   160                           ;pic18f45k20.h: 83: static volatile near unsigne
      +                          d char ADRESH @ 0xFC4;
   161                           ;pic18f45k20.h: 84: static volatile near unsigne
      +                          d char ADRESL @ 0xFC3;
   162                           ;pic18f45k20.h: 86: static volatile near unsigne
      +                          d int ADRES @ 0xFC3;
   163                           ;pic18f45k20.h: 87: static volatile near unsigne
      +                          d char ADCON0 @ 0xFC2;
   164                           ;pic18f45k20.h: 88: static near unsigned char AD
      +                          CON1 @ 0xFC1;
   165                           ;pic18f45k20.h: 89: static near unsigned char AD
      +                          CON2 @ 0xFC0;
   166                           ;pic18f45k20.h: 90: static volatile near unsigne
      +                          d char CCPR1H @ 0xFBF;
   167                           ;pic18f45k20.h: 91: static volatile near unsigne
      +                          d char CCPR1L @ 0xFBE;
   168                           ;pic18f45k20.h: 93: static volatile near unsigne
      +                          d int CCPR1 @ 0xFBE;
   169                           ;pic18f45k20.h: 94: static volatile near unsigne
      +                          d char CCP1CON @ 0xFBD;
   170                           ;pic18f45k20.h: 95: static volatile near unsigne
      +                          d char CCPR2H @ 0xFBC;
   171                           ;pic18f45k20.h: 96: static volatile near unsigne
      +                          d char CCPR2L @ 0xFBB;
   172                           ;pic18f45k20.h: 98: static volatile near unsigne
      +                          d int CCPR2 @ 0xFBB;
   173                           ;pic18f45k20.h: 99: static volatile near unsigne
      +                          d char CCP2CON @ 0xFBA;
   174                           ;pic18f45k20.h: 100: static near unsigned char P
      +                          STRCON @ 0xFB9;
   175                           ;pic18f45k20.h: 101: static volatile near unsign
      +                          ed char BAUDCTL @ 0xFB8;
   176                           ;pic18f45k20.h: 102: static volatile near unsign
      +                          ed char PWM1CON @ 0xFB7;
   177                           ;pic18f45k20.h: 103: static volatile near unsign
      +                          ed char ECCP1AS @ 0xFB6;
   178                           ;pic18f45k20.h: 104: static volatile near unsign
      +                          ed char CVRCON @ 0xFB5;
   179                           ;pic18f45k20.h: 105: static volatile near unsign
      +                          ed char CVRCON2 @ 0xFB4;
   180                           ;pic18f45k20.h: 106: static volatile near unsign
      +                          ed char TMR3H @ 0xFB3;
   181                           ;pic18f45k20.h: 107: static volatile near unsign
      +                          ed char TMR3L @ 0xFB2;
   182                           ;pic18f45k20.h: 109: static volatile near unsign
      +                          ed int TMR3 @ 0xFB2;
   183                           ;pic18f45k20.h: 110: static near unsigned char T
      +                          3CON @ 0xFB1;
   184                           ;pic18f45k20.h: 111: static near unsigned char S
      +                          PBRGH @ 0xFB0;
   185                           ;pic18f45k20.h: 112: static near unsigned char S
      +                          PBRG @ 0xFAF;
   186                           ;pic18f45k20.h: 114: static near unsigned char S
      +                          PBRG1 @ 0xFAF;
   187                           ;pic18f45k20.h: 115: static volatile near unsign
      +                          ed char RCREG @ 0xFAE;
   188                           ;pic18f45k20.h: 117: static volatile near unsign
      +                          ed char RCREG1 @ 0xFAE;
   189                           ;pic18f45k20.h: 118: static volatile near unsign
      +                          ed char TXREG @ 0xFAD;
   190                           ;pic18f45k20.h: 120: static volatile near unsign
      +                          ed char TXREG1 @ 0xFAD;
   191                           ;pic18f45k20.h: 121: static volatile near unsign
      +                          ed char TXSTA @ 0xFAC;
   192                           ;pic18f45k20.h: 123: static volatile near unsign
      +                          ed char TXSTA1 @ 0xFAC;
   193                           ;pic18f45k20.h: 124: static volatile near unsign
      +                          ed char RCSTA @ 0xFAB;
   194                           ;pic18f45k20.h: 126: static volatile near unsign
      +                          ed char RCSTA1 @ 0xFAB;
   195                           ;pic18f45k20.h: 128: static near unsigned char E
      +                          EADRH @ 0xFAA;
   196                           ;pic18f45k20.h: 130: static near unsigned char E
      +                          EADR @ 0xFA9;
   197                           ;pic18f45k20.h: 131: static volatile near unsign
      +                          ed char EEDATA @ 0xFA8;
   198                           ;pic18f45k20.h: 132: static volatile near unsign
      +                          ed char EECON2 @ 0xFA7;
   199  00E6A2                     _StartRTdS:
   200  000000                     
   201                           ; _Index loaded to fsr2l
   202  00E6A2  6ED9               	movwf	fsr2l,c
   203                           ;rtimer.c: 56: if (Index>11-1) asm("RESET");
   204  00E6A4  0E0A               	movlw	10
   205  00E6A6  64D9               	cpfsgt	fsr2l,c
   206  00E6A8  D001               	goto	l7
   207  00E6AA  00FF               	reset		;#
   208  00E6AC                     l7:
   209                           ;rtimer.c: 57: dSk[Index].cS=0;
   210  00E6AC  50D9               	movf	fsr2l,w,c
   211  00E6AE  24D9               	addwf	fsr2l,w,c
   212  00E6B0  0F12               	addlw	_dSk
   213  00E6B2  6EE9               	movwf	fsr0l,c
   214  00E6B4  6AEA               	clrf	fsr0h,c
   215  00E6B6  6AEF               	clrf	indf0,c
   216                           ;rtimer.c: 58: dSk[Index].dS=0;
   217  00E6B8  50D9               	movf	fsr2l,w,c
   218  00E6BA  24D9               	addwf	fsr2l,w,c
   219  00E6BC  0F13               	addlw	_dSk+1
   220  00E6BE  6EE9               	movwf	fsr0l,c
   221  00E6C0  6AEA               	clrf	fsr0h,c
   222  00E6C2  6AEF               	clrf	indf0,c
   223                           ;rtimer.c: 59: }
   224  00E6C4  0C00               	retlw	0
   225  00E6C6                     __end_of_StartRTdS:
   226                           ;rtimer.c: 60: unsigned char RTdS(const unsigned
      +                           char Index)
   227                           ;rtimer.c: 61: {
   228  00E6C6                     _RTdS:
   229  000000                     
   230                           ; _Index loaded to fsr2l
   231  00E6C6  6ED9               	movwf	fsr2l,c
   232                           ;rtimer.c: 62: if (Index>11-1) asm("RESET");
   233  00E6C8  0E0A               	movlw	10
   234  00E6CA  64D9               	cpfsgt	fsr2l,c
   235  00E6CC  D001               	goto	l9
   236  00E6CE  00FF               	reset		;#
   237  00E6D0                     l9:
   238                           ;rtimer.c: 63: return dSk[Index].dS;
   239  00E6D0  50D9               	movf	fsr2l,w,c
   240  00E6D2  24D9               	addwf	fsr2l,w,c
   241  00E6D4  0F13               	addlw	_dSk+1
   242  00E6D6  6EE9               	movwf	fsr0l,c
   243  00E6D8  6AEA               	clrf	fsr0h,c
   244  00E6DA  50EF               	movf	indf0,w,c
   245  00E6DC  0012               	return	
   246                           ;rtimer.c: 64: }
   247  00E6DE                     __end_of_RTdS:
   248                           ;rtimer.c: 69: void StartRTS(const unsigned char
      +                           Index)
   249                           ;rtimer.c: 70: {
   250  00E6DE                     _StartRTS:
   251  000000                     
   252                           ; _Index loaded to fsr2l
   253  00E6DE  6ED9               	movwf	fsr2l,c
   254                           ;rtimer.c: 71: if (Index>20-1) asm("RESET");
   255  00E6E0  0E13               	movlw	19
   256  00E6E2  64D9               	cpfsgt	fsr2l,c
   257  00E6E4  D001               	goto	l11
   258  00E6E6  00FF               	reset		;#
   259  00E6E8                     l11:
   260                           ;rtimer.c: 72: Sk[Index].dS=0;
   261  00E6E8  50D9               	movf	fsr2l,w,c
   262  00E6EA  0D02               	mullw	2
   263  00E6EC  0E43               	movlw	low _Sk
   264  00E6EE  24F3               	addwf	prodl,w,c
   265  00E6F0  6EE9               	movwf	fsr0l,c
   266  00E6F2  0E00               	movlw	high _Sk
   267  00E6F4  20F4               	addwfc	prodh,w,c
   268  00E6F6  6EEA               	movwf	fsr0h,c
   269  00E6F8  6AEF               	clrf	indf0,c
   270                           ;rtimer.c: 73: Sk[Index].S=0;
   271  00E6FA  50D9               	movf	fsr2l,w,c
   272  00E6FC  0D02               	mullw	2
   273  00E6FE  0E44               	movlw	low (_Sk+1)
   274  00E700  24F3               	addwf	prodl,w,c
   275  00E702  6EE9               	movwf	fsr0l,c
   276  00E704  0E00               	movlw	high (_Sk+1)
   277  00E706  20F4               	addwfc	prodh,w,c
   278  00E708  6EEA               	movwf	fsr0h,c
   279  00E70A  6AEF               	clrf	indf0,c
   280                           ;rtimer.c: 74: }
   281  00E70C  0C00               	retlw	0
   282  00E70E                     __end_of_StartRTS:
   283                           ;rtimer.c: 75: unsigned char RTS(const unsigned 
      +                          char Index)
   284                           ;rtimer.c: 76: {
   285  00E70E                     _RTS:
   286  000000                     
   287                           ; _Index loaded to fsr2l
   288  00E70E  6ED9               	movwf	fsr2l,c
   289                           ;rtimer.c: 77: if (Index>20-1) asm("RESET");
   290  00E710  0E13               	movlw	19
   291  00E712  64D9               	cpfsgt	fsr2l,c
   292  00E714  D001               	goto	l13
   293  00E716  00FF               	reset		;#
   294  00E718                     l13:
   295                           ;rtimer.c: 78: return Sk[Index].S;
   296  00E718  50D9               	movf	fsr2l,w,c
   297  00E71A  0D02               	mullw	2
   298  00E71C  0E44               	movlw	low (_Sk+1)
   299  00E71E  24F3               	addwf	prodl,w,c
   300  00E720  6EE9               	movwf	fsr0l,c
   301  00E722  0E00               	movlw	high (_Sk+1)
   302  00E724  20F4               	addwfc	prodh,w,c
   303  00E726  6EEA               	movwf	fsr0h,c
   304  00E728  50EF               	movf	indf0,w,c
   305  00E72A  0012               	return	
   306                           ;rtimer.c: 79: }
   307  00E72C                     __end_of_RTS:
   308                           ;rtimer.c: 84: void StartRTM(const unsigned char
      +                           Index)
   309                           ;rtimer.c: 85: {
   310  00E72C                     _StartRTM:
   311  000000                     
   312                           ; _Index loaded to fsr2l
   313  00E72C  6ED9               	movwf	fsr2l,c
   314                           ;rtimer.c: 86: if (Index>7-1) asm("RESET");
   315  00E72E  0E06               	movlw	6
   316  00E730  64D9               	cpfsgt	fsr2l,c
   317  00E732  D001               	goto	l15
   318  00E734  00FF               	reset		;#
   319  00E736                     l15:
   320                           ;rtimer.c: 87: Mn[Index].S=0;
   321  00E736  50D9               	movf	fsr2l,w,c
   322  00E738  0D02               	mullw	2
   323  00E73A  0E35               	movlw	low _Mn
   324  00E73C  24F3               	addwf	prodl,w,c
   325  00E73E  6EE9               	movwf	fsr0l,c
   326  00E740  0E00               	movlw	high _Mn
   327  00E742  20F4               	addwfc	prodh,w,c
   328  00E744  6EEA               	movwf	fsr0h,c
   329  00E746  6AEF               	clrf	indf0,c
   330                           ;rtimer.c: 88: Mn[Index].M=0;
   331  00E748  50D9               	movf	fsr2l,w,c
   332  00E74A  0D02               	mullw	2
   333  00E74C  0E36               	movlw	low (_Mn+1)
   334  00E74E  24F3               	addwf	prodl,w,c
   335  00E750  6EE9               	movwf	fsr0l,c
   336  00E752  0E00               	movlw	high (_Mn+1)
   337  00E754  20F4               	addwfc	prodh,w,c
   338  00E756  6EEA               	movwf	fsr0h,c
   339  00E758  6AEF               	clrf	indf0,c
   340                           ;rtimer.c: 89: }
   341  00E75A  0C00               	retlw	0
   342  00E75C                     __end_of_StartRTM:
   343                           ;rtimer.c: 90: unsigned char RTM(const unsigned 
      +                          char Index)
   344                           ;rtimer.c: 91: {
   345  00E75C                     _RTM:
   346  000000                     
   347                           ; _Index loaded to fsr2l
   348  00E75C  6ED9               	movwf	fsr2l,c
   349                           ;rtimer.c: 92: if (Index>7-1) asm("RESET");
   350  00E75E  0E06               	movlw	6
   351  00E760  64D9               	cpfsgt	fsr2l,c
   352  00E762  D001               	goto	l17
   353  00E764  00FF               	reset		;#
   354  00E766                     l17:
   355                           ;rtimer.c: 93: return Mn[Index].M;
   356  00E766  50D9               	movf	fsr2l,w,c
   357  00E768  0D02               	mullw	2
   358  00E76A  0E36               	movlw	low (_Mn+1)
   359  00E76C  24F3               	addwf	prodl,w,c
   360  00E76E  6EE9               	movwf	fsr0l,c
   361  00E770  0E00               	movlw	high (_Mn+1)
   362  00E772  20F4               	addwfc	prodh,w,c
   363  00E774  6EEA               	movwf	fsr0h,c
   364  00E776  50EF               	movf	indf0,w,c
   365  00E778  0012               	return	
   366                           ;rtimer.c: 94: }
   367  00E77A                     __end_of_RTM:
   368                           ;rtimer.c: 95: unsigned char RTMs(const unsigned
      +                           char Index)
   369                           ;rtimer.c: 96: {
   370  00E77A                     _RTMs:
   371  000000                     
   372                           ; _Index loaded to fsr2l
   373  00E77A  6ED9               	movwf	fsr2l,c
   374                           ;rtimer.c: 97: if (Index>7-1) asm("RESET");
   375  00E77C  0E06               	movlw	6
   376  00E77E  64D9               	cpfsgt	fsr2l,c
   377  00E780  D001               	goto	l19
   378  00E782  00FF               	reset		;#
   379  00E784                     l19:
   380                           ;rtimer.c: 98: return Mn[Index].S;
   381  00E784  50D9               	movf	fsr2l,w,c
   382  00E786  0D02               	mullw	2
   383  00E788  0E35               	movlw	low _Mn
   384  00E78A  24F3               	addwf	prodl,w,c
   385  00E78C  6EE9               	movwf	fsr0l,c
   386  00E78E  0E00               	movlw	high _Mn
   387  00E790  20F4               	addwfc	prodh,w,c
   388  00E792  6EEA               	movwf	fsr0h,c
   389  00E794  50EF               	movf	indf0,w,c
   390  00E796  0012               	return	
   391                           ;rtimer.c: 99: }
   392  00E798                     __end_of_RTMs:
   393                           ;rtimer.c: 104: void StartRTG(const unsigned cha
      +                          r Index)
   394                           ;rtimer.c: 105: {
   395  00E798                     _StartRTG:
   396  000000                     
   397                           ; _Index loaded to fsr2l
   398  00E798  6ED9               	movwf	fsr2l,c
   399                           ;rtimer.c: 106: if (Index>3-1) asm("RESET");
   400  00E79A  0E02               	movlw	2
   401  00E79C  64D9               	cpfsgt	fsr2l,c
   402  00E79E  D001               	goto	l21
   403  00E7A0  00FF               	reset		;#
   404  00E7A2                     l21:
   405                           ;rtimer.c: 107: Gd[Index].M=0;
   406  00E7A2  50D9               	movf	fsr2l,w,c
   407  00E7A4  0D02               	mullw	2
   408  00E7A6  0E2F               	movlw	low _Gd
   409  00E7A8  24F3               	addwf	prodl,w,c
   410  00E7AA  6EE9               	movwf	fsr0l,c
   411  00E7AC  0E00               	movlw	high _Gd
   412  00E7AE  20F4               	addwfc	prodh,w,c
   413  00E7B0  6EEA               	movwf	fsr0h,c
   414  00E7B2  6AEF               	clrf	indf0,c
   415                           ;rtimer.c: 108: Gd[Index].G=0;
   416  00E7B4  50D9               	movf	fsr2l,w,c
   417  00E7B6  0D02               	mullw	2
   418  00E7B8  0E30               	movlw	low (_Gd+1)
   419  00E7BA  24F3               	addwf	prodl,w,c
   420  00E7BC  6EE9               	movwf	fsr0l,c
   421  00E7BE  0E00               	movlw	high (_Gd+1)
   422  00E7C0  20F4               	addwfc	prodh,w,c
   423  00E7C2  6EEA               	movwf	fsr0h,c
   424  00E7C4  6AEF               	clrf	indf0,c
   425                           ;rtimer.c: 109: }
   426  00E7C6  0C00               	retlw	0
   427  00E7C8                     __end_of_StartRTG:
   428                           ;rtimer.c: 110: unsigned char RTG(const unsigned
      +                           char Index)
   429                           ;rtimer.c: 111: {
   430  00E7C8                     _RTG:
   431  000000                     
   432                           ; _Index loaded to fsr2l
   433  00E7C8  6ED9               	movwf	fsr2l,c
   434                           ;rtimer.c: 112: if (Index>3-1) asm("RESET");
   435  00E7CA  0E02               	movlw	2
   436  00E7CC  64D9               	cpfsgt	fsr2l,c
   437  00E7CE  D001               	goto	l23
   438  00E7D0  00FF               	reset		;#
   439  00E7D2                     l23:
   440                           ;rtimer.c: 113: return Gd[Index].G;
   441  00E7D2  50D9               	movf	fsr2l,w,c
   442  00E7D4  0D02               	mullw	2
   443  00E7D6  0E30               	movlw	low (_Gd+1)
   444  00E7D8  24F3               	addwf	prodl,w,c
   445  00E7DA  6EE9               	movwf	fsr0l,c
   446  00E7DC  0E00               	movlw	high (_Gd+1)
   447  00E7DE  20F4               	addwfc	prodh,w,c
   448  00E7E0  6EEA               	movwf	fsr0h,c
   449  00E7E2  50EF               	movf	indf0,w,c
   450  00E7E4  0012               	return	
   451                           ;rtimer.c: 114: }
   452  00E7E6                     __end_of_RTG:
   453                           ;rtimer.c: 119: void IncRTimer(void)
   454                           ;rtimer.c: 120: {
   455  00E7E6                     _IncRTimer:
   456  000000                     
   457                           ;rtimer.c: 122: unsigned char i;
   458  00E7E6  6AD9               	clrf	fsr2l,c
   459  00E7E8                     l25:
   460                           ;rtimer.c: 136: {
   461  00E7E8  50D9               	movf	fsr2l,w,c
   462  00E7EA  24D9               	addwf	fsr2l,w,c
   463  00E7EC  0F12               	addlw	_dSk
   464  00E7EE  6EE9               	movwf	fsr0l,c
   465  00E7F0  6AEA               	clrf	fsr0h,c
   466  00E7F2  2AEF               	incf	indf0,f,c
   467                           ;rtimer.c: 138: if(dSk[i].cS>9)
   468  00E7F4  50D9               	movf	fsr2l,w,c
   469  00E7F6  24D9               	addwf	fsr2l,w,c
   470  00E7F8  0F12               	addlw	_dSk
   471  00E7FA  6EE9               	movwf	fsr0l,c
   472  00E7FC  6AEA               	clrf	fsr0h,c
   473  00E7FE  50EF               	movf	indf0,w,c
   474  00E800  6E00               	movwf	btemp,c
   475  00E802  0E0A               	movlw	10
   476  00E804  5C00               	subwf	btemp,w,c
   477  00E806  E315               	bnc	l28
   478                           ;rtimer.c: 139: {
   479  00E808  50D9               	movf	fsr2l,w,c
   480  00E80A  24D9               	addwf	fsr2l,w,c
   481  00E80C  0F12               	addlw	_dSk
   482  00E80E  6EE9               	movwf	fsr0l,c
   483  00E810  6AEA               	clrf	fsr0h,c
   484  00E812  6AEF               	clrf	indf0,c
   485                           ;rtimer.c: 141: if(dSk[i].dS<255) dSk[i].dS++;
   486  00E814  50D9               	movf	fsr2l,w,c
   487  00E816  24D9               	addwf	fsr2l,w,c
   488  00E818  0F13               	addlw	_dSk+1
   489  00E81A  6EE9               	movwf	fsr0l,c
   490  00E81C  6AEA               	clrf	fsr0h,c
   491  00E81E  50EF               	movf	indf0,w,c
   492  00E820  6E00               	movwf	btemp,c
   493  00E822  2800               	incf	btemp,w,c
   494  00E824  E006               	bz	l28
   495  00E826  50D9               	movf	fsr2l,w,c
   496  00E828  24D9               	addwf	fsr2l,w,c
   497  00E82A  0F13               	addlw	_dSk+1
   498  00E82C  6EE9               	movwf	fsr0l,c
   499  00E82E  6AEA               	clrf	fsr0h,c
   500  00E830  2AEF               	incf	indf0,f,c
   501  00E832                     l28:
   502  00E832  2AD9               	incf	fsr2l,f,c
   503  00E834  0E0A               	movlw	10
   504  00E836  64D9               	cpfsgt	fsr2l,c
   505  00E838  D7D7               	goto	l25
   506                           ;rtimer.c: 142: }
   507  00E83A  2A0F               	incf	_CommRT,f,c	;volatile
   508                           ;rtimer.c: 149: if(CommRT.cS>9)
   509  00E83C  0E09               	movlw	9
   510  00E83E  640F               	cpfsgt	_CommRT,c	;volatile
   511  00E840  0C09               	retlw	9
   512                           ;rtimer.c: 150: {
   513  00E842  6A0F               	clrf	_CommRT,c	;volatile
   514                           ;rtimer.c: 152: CommRT.dS++;
   515  00E844  2A10               	incf	_CommRT+1,f,c	;volatile
   516                           ;rtimer.c: 157: for(i=0;i<20;i++)
   517  00E846  6AD9               	clrf	fsr2l,c
   518  00E848                     l31:
   519                           ;rtimer.c: 158: {
   520  00E848  50D9               	movf	fsr2l,w,c
   521  00E84A  0D02               	mullw	2
   522  00E84C  0E43               	movlw	low _Sk
   523  00E84E  24F3               	addwf	prodl,w,c
   524  00E850  6EE9               	movwf	fsr0l,c
   525  00E852  0E00               	movlw	high _Sk
   526  00E854  20F4               	addwfc	prodh,w,c
   527  00E856  6EEA               	movwf	fsr0h,c
   528  00E858  2AEF               	incf	indf0,f,c
   529                           ;rtimer.c: 160: if(Sk[i].dS>9)
   530  00E85A  50D9               	movf	fsr2l,w,c
   531  00E85C  0D02               	mullw	2
   532  00E85E  0E43               	movlw	low _Sk
   533  00E860  24F3               	addwf	prodl,w,c
   534  00E862  6EE9               	movwf	fsr0l,c
   535  00E864  0E00               	movlw	high _Sk
   536  00E866  20F4               	addwfc	prodh,w,c
   537  00E868  6EEA               	movwf	fsr0h,c
   538  00E86A  50EF               	movf	indf0,w,c
   539  00E86C  6E00               	movwf	btemp,c
   540  00E86E  0E0A               	movlw	10
   541  00E870  5C00               	subwf	btemp,w,c
   542  00E872  E31E               	bnc	l34
   543                           ;rtimer.c: 161: {
   544  00E874  50D9               	movf	fsr2l,w,c
   545  00E876  0D02               	mullw	2
   546  00E878  0E43               	movlw	low _Sk
   547  00E87A  24F3               	addwf	prodl,w,c
   548  00E87C  6EE9               	movwf	fsr0l,c
   549  00E87E  0E00               	movlw	high _Sk
   550  00E880  20F4               	addwfc	prodh,w,c
   551  00E882  6EEA               	movwf	fsr0h,c
   552  00E884  6AEF               	clrf	indf0,c
   553                           ;rtimer.c: 163: if(Sk[i].S<255) Sk[i].S++;
   554  00E886  50D9               	movf	fsr2l,w,c
   555  00E888  0D02               	mullw	2
   556  00E88A  0E44               	movlw	low (_Sk+1)
   557  00E88C  24F3               	addwf	prodl,w,c
   558  00E88E  6EE9               	movwf	fsr0l,c
   559  00E890  0E00               	movlw	high (_Sk+1)
   560  00E892  20F4               	addwfc	prodh,w,c
   561  00E894  6EEA               	movwf	fsr0h,c
   562  00E896  50EF               	movf	indf0,w,c
   563  00E898  6E00               	movwf	btemp,c
   564  00E89A  2800               	incf	btemp,w,c
   565  00E89C  E009               	bz	l34
   566  00E89E  50D9               	movf	fsr2l,w,c
   567  00E8A0  0D02               	mullw	2
   568  00E8A2  0E44               	movlw	low (_Sk+1)
   569  00E8A4  24F3               	addwf	prodl,w,c
   570  00E8A6  6EE9               	movwf	fsr0l,c
   571  00E8A8  0E00               	movlw	high (_Sk+1)
   572  00E8AA  20F4               	addwfc	prodh,w,c
   573  00E8AC  6EEA               	movwf	fsr0h,c
   574  00E8AE  2AEF               	incf	indf0,f,c
   575  00E8B0                     l34:
   576  00E8B0  2AD9               	incf	fsr2l,f,c
   577  00E8B2  0E13               	movlw	19
   578  00E8B4  64D9               	cpfsgt	fsr2l,c
   579  00E8B6  D7C8               	goto	l31
   580                           ;rtimer.c: 164: }
   581  00E8B8  0E09               	movlw	9
   582  00E8BA  6410               	cpfsgt	_CommRT+1,c	;volatile
   583  00E8BC  0C09               	retlw	9
   584                           ;rtimer.c: 169: {
   585  00E8BE  6A10               	clrf	_CommRT+1,c	;volatile
   586                           ;rtimer.c: 171: CommRT.S++;
   587  00E8C0  2A11               	incf	_CommRT+2,f,c	;volatile
   588                           ;rtimer.c: 176: for(i=0;i<7;i++)
   589  00E8C2  6AD9               	clrf	fsr2l,c
   590  00E8C4                     l37:
   591                           ;rtimer.c: 177: {
   592  00E8C4  50D9               	movf	fsr2l,w,c
   593  00E8C6  0D02               	mullw	2
   594  00E8C8  0E35               	movlw	low _Mn
   595  00E8CA  24F3               	addwf	prodl,w,c
   596  00E8CC  6EE9               	movwf	fsr0l,c
   597  00E8CE  0E00               	movlw	high _Mn
   598  00E8D0  20F4               	addwfc	prodh,w,c
   599  00E8D2  6EEA               	movwf	fsr0h,c
   600  00E8D4  2AEF               	incf	indf0,f,c
   601                           ;rtimer.c: 179: if(Mn[i].S>59)
   602  00E8D6  50D9               	movf	fsr2l,w,c
   603  00E8D8  0D02               	mullw	2
   604  00E8DA  0E35               	movlw	low _Mn
   605  00E8DC  24F3               	addwf	prodl,w,c
   606  00E8DE  6EE9               	movwf	fsr0l,c
   607  00E8E0  0E00               	movlw	high _Mn
   608  00E8E2  20F4               	addwfc	prodh,w,c
   609  00E8E4  6EEA               	movwf	fsr0h,c
   610  00E8E6  50EF               	movf	indf0,w,c
   611  00E8E8  6E00               	movwf	btemp,c
   612  00E8EA  0E3C               	movlw	60
   613  00E8EC  5C00               	subwf	btemp,w,c
   614  00E8EE  E31E               	bnc	l40
   615                           ;rtimer.c: 180: {
   616  00E8F0  50D9               	movf	fsr2l,w,c
   617  00E8F2  0D02               	mullw	2
   618  00E8F4  0E35               	movlw	low _Mn
   619  00E8F6  24F3               	addwf	prodl,w,c
   620  00E8F8  6EE9               	movwf	fsr0l,c
   621  00E8FA  0E00               	movlw	high _Mn
   622  00E8FC  20F4               	addwfc	prodh,w,c
   623  00E8FE  6EEA               	movwf	fsr0h,c
   624  00E900  6AEF               	clrf	indf0,c
   625                           ;rtimer.c: 182: if(Mn[i].M<255) Mn[i].M++;
   626  00E902  50D9               	movf	fsr2l,w,c
   627  00E904  0D02               	mullw	2
   628  00E906  0E36               	movlw	low (_Mn+1)
   629  00E908  24F3               	addwf	prodl,w,c
   630  00E90A  6EE9               	movwf	fsr0l,c
   631  00E90C  0E00               	movlw	high (_Mn+1)
   632  00E90E  20F4               	addwfc	prodh,w,c
   633  00E910  6EEA               	movwf	fsr0h,c
   634  00E912  50EF               	movf	indf0,w,c
   635  00E914  6E00               	movwf	btemp,c
   636  00E916  2800               	incf	btemp,w,c
   637  00E918  E009               	bz	l40
   638  00E91A  50D9               	movf	fsr2l,w,c
   639  00E91C  0D02               	mullw	2
   640  00E91E  0E36               	movlw	low (_Mn+1)
   641  00E920  24F3               	addwf	prodl,w,c
   642  00E922  6EE9               	movwf	fsr0l,c
   643  00E924  0E00               	movlw	high (_Mn+1)
   644  00E926  20F4               	addwfc	prodh,w,c
   645  00E928  6EEA               	movwf	fsr0h,c
   646  00E92A  2AEF               	incf	indf0,f,c
   647  00E92C                     l40:
   648  00E92C  2AD9               	incf	fsr2l,f,c
   649  00E92E  0E06               	movlw	6
   650  00E930  64D9               	cpfsgt	fsr2l,c
   651  00E932  D7C8               	goto	l37
   652                           ;rtimer.c: 183: }
   653  00E934  0E3B               	movlw	59
   654  00E936  6411               	cpfsgt	_CommRT+2,c	;volatile
   655  00E938  0C3B               	retlw	59
   656                           ;rtimer.c: 188: {
   657  00E93A  6A11               	clrf	_CommRT+2,c	;volatile
   658                           ;rtimer.c: 194: for(i=0;i<3;i++)
   659  00E93C  6AD9               	clrf	fsr2l,c
   660  00E93E                     l43:
   661                           ;rtimer.c: 195: {
   662  00E93E  50D9               	movf	fsr2l,w,c
   663  00E940  0D02               	mullw	2
   664  00E942  0E2F               	movlw	low _Gd
   665  00E944  24F3               	addwf	prodl,w,c
   666  00E946  6EE9               	movwf	fsr0l,c
   667  00E948  0E00               	movlw	high _Gd
   668  00E94A  20F4               	addwfc	prodh,w,c
   669  00E94C  6EEA               	movwf	fsr0h,c
   670  00E94E  2AEF               	incf	indf0,f,c
   671                           ;rtimer.c: 197: if(Gd[i].M>59)
   672  00E950  50D9               	movf	fsr2l,w,c
   673  00E952  0D02               	mullw	2
   674  00E954  0E2F               	movlw	low _Gd
   675  00E956  24F3               	addwf	prodl,w,c
   676  00E958  6EE9               	movwf	fsr0l,c
   677  00E95A  0E00               	movlw	high _Gd
   678  00E95C  20F4               	addwfc	prodh,w,c
   679  00E95E  6EEA               	movwf	fsr0h,c
   680  00E960  50EF               	movf	indf0,w,c
   681  00E962  6E00               	movwf	btemp,c
   682  00E964  0E3C               	movlw	60
   683  00E966  5C00               	subwf	btemp,w,c
   684  00E968  E31E               	bnc	l46
   685                           ;rtimer.c: 198: {
   686  00E96A  50D9               	movf	fsr2l,w,c
   687  00E96C  0D02               	mullw	2
   688  00E96E  0E2F               	movlw	low _Gd
   689  00E970  24F3               	addwf	prodl,w,c
   690  00E972  6EE9               	movwf	fsr0l,c
   691  00E974  0E00               	movlw	high _Gd
   692  00E976  20F4               	addwfc	prodh,w,c
   693  00E978  6EEA               	movwf	fsr0h,c
   694  00E97A  6AEF               	clrf	indf0,c
   695                           ;rtimer.c: 200: if(Gd[i].G<255) Gd[i].G++;
   696  00E97C  50D9               	movf	fsr2l,w,c
   697  00E97E  0D02               	mullw	2
   698  00E980  0E30               	movlw	low (_Gd+1)
   699  00E982  24F3               	addwf	prodl,w,c
   700  00E984  6EE9               	movwf	fsr0l,c
   701  00E986  0E00               	movlw	high (_Gd+1)
   702  00E988  20F4               	addwfc	prodh,w,c
   703  00E98A  6EEA               	movwf	fsr0h,c
   704  00E98C  50EF               	movf	indf0,w,c
   705  00E98E  6E00               	movwf	btemp,c
   706  00E990  2800               	incf	btemp,w,c
   707  00E992  E009               	bz	l46
   708  00E994  50D9               	movf	fsr2l,w,c
   709  00E996  0D02               	mullw	2
   710  00E998  0E30               	movlw	low (_Gd+1)
   711  00E99A  24F3               	addwf	prodl,w,c
   712  00E99C  6EE9               	movwf	fsr0l,c
   713  00E99E  0E00               	movlw	high (_Gd+1)
   714  00E9A0  20F4               	addwfc	prodh,w,c
   715  00E9A2  6EEA               	movwf	fsr0h,c
   716  00E9A4  2AEF               	incf	indf0,f,c
   717  00E9A6                     l46:
   718  00E9A6  2AD9               	incf	fsr2l,f,c
   719  00E9A8  0E02               	movlw	2
   720  00E9AA  64D9               	cpfsgt	fsr2l,c
   721  00E9AC  D7C8               	goto	l43
   722  00E9AE  0C02               	retlw	2
   723                           ;rtimer.c: 201: }
   724  00E9B0                     __end_of_IncRTimer:
   725  000000                     
   726  000000                     
   727  000000                     
   728  000000                     
   729  000000                     
   730  000000                     
   731  000000                     
   732  000000                     
   733  000000                     
   734  000000                     
   735  000000                     
   736  000000                     
   737  000000                     
   738  000000                     
   739  000000                     
   740  000000                     
   741  000000                     
   742  000000                     
   743  000000                     
   744  000000                     
   745  000000                     
   746  000000                     
   747  000000                     
   748  000000                     
   749  000000                     
   750  000000                     
   751  000000                     
   752  000000                     
   753  000000                     
   754  000000                     
   755  000000                     
   756  000000                     
   757  000000                     
   758  000000                     
   759  000000                     
   760  000000                     
   761  000000                     
   762  000000                     
   763  000000                     
   764  000000                     
   765  000000                     
   766  000000                     
   767  000000                     
   768  000000                     
   769  000000                     
   770  000000                     
   771  000000                     
   772  000000                     
   773  000000                     
   774  000000                     
   775  000000                     
   776  000000                     
   777  000000                     
   778  000000                     
   779  000000                     
   780  000000                     
   781  000000                     
   782  000000                     
   783  000000                     
   784  000000                     
   785  000000                     
   786  000000                     
   787  000000                     
   788  000000                     
   789  000000                     
   790  000000                     
   791  000000                     
   792  000000                     
   793  000000                     
   794  000000                     
   795  000000                     
   796  000000                     
   797  000000                     
   798  000000                     
   799  000000                     
   800  000000                     
   801  000000                     
   802  000000                     
   803  000000                     
   804  000000                     
   805  000000                     
   806  000000                     
   807  000000                     
   808  000000                     
   809  000000                     
   810  000000                     
   811  000000                     
   812  000000                     
   813  000000                     
   814  000000                     
   815  000000                     
   816  000000                     
   817  000000                     
   818  000000                     
   819  000000                     
   820  000000                     
   821  000000                     
   822  000000                     
   823  000000                     
   824  000000                     
   825  000000                     
   826  000000                     
   827  000000                     
   828  000000                     
   829  000000                     
   830  000000                     
   831  000000                     
   832  000000                     
   833  000000                     
   834  000000                     
   835  000000                     
   836  000000                     
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293                           
  1294                           	psect	rbss
  1295  00000F                     _CommRT:
  1296  00000F                     	ds	3
  1297  00000F                     _dSk:
  1298  00000F                     	ds	22
  1299                           
  1300                           	psect	bss
  1301  00002F                     _Gd:
  1302  00002F                     	ds	6
  1303  00002F                     _Mn:
  1304  00002F                     	ds	14
  1305  00002F                     _Sk:
  1306  00002F                     	ds	40
  1307                           
  1308                           	psect	temp
  1309  000000                     btemp:
  1310  000000                     	ds	1
  1311                           prodh	equ	0xFF4
  1312                           prodl	equ	0xFF3
  1313                           indf0	equ	0xFEF
  1314                           fsr0h	equ	0xFEA
  1315                           fsr0l	equ	0xFE9
  1316                           fsr2l	equ	0xFD9


HI-TECH Software PICC-18 Macro Assembler V9.51PL3
Symbol Table                                           Mon Sep 14 17:44:52 2020

                l7 E6AC                  l9 E6D0                 l11 E6E8  
               l21 E7A2                 l13 E718                 l31 E848  
               l23 E7D2                 l15 E736                 l40 E92C  
               l25 E7E8                 l17 E766                 l34 E8B0  
               l43 E93E                 l19 E784                 l28 E832  
               l37 E8C4                 l46 E9A6                 _Gd 002F  
               _Mn 0035                 _Sk 0043           _StartRTG E798  
         _StartRTM E72C           _StartRTS E6DE                _RTG E7C8  
              _RTM E75C                _RTS E70E                _dSk 0012  
        _StartRTdS E6A2  __end_of_StartRTdS E6C6               _RTMs E77A  
             _RTdS E6C6               fsr0h 000FEA               indf0 000FEF  
             fsr0l 000FE9               fsr2l 000FD9               btemp 0000  
             prodh 000FF4               prodl 000FF3         used_btemp0 0001  
            status 000FD8            __Lparam 00E9   __end_of_StartRTG E7C8  
 __end_of_StartRTM E75C   __end_of_StartRTS E70E            __ramtop 1000  
     __end_of_RTMs E798       __end_of_RTdS E6DE             _CommRT 000F  
      __end_of_RTG E7E6        __end_of_RTM E77A        __end_of_RTS E72C  
        _IncRTimer E7E6  __end_of_IncRTimer E9B0  
